
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 10 19 00 	lgdtl  0x191018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 0f 19 f0       	mov    $0xf0190fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 7c 65 f0       	mov    $0xf0657cbc,%edx
f010006a:	b8 b0 6f 65 f0       	mov    $0xf0656fb0,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b0 6f 65 f0       	push   $0xf0656fb0
f010007e:	e8 63 0d 03 00       	call   f0130de6 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 43 0b 00 00       	call   f0100bce <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 f2 00 00 00       	call   f0100182 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 a0 60 00 00       	call   f0106135 <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 2c 5c 00 00       	call   f0105cc6 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 ad 63 00 00       	call   f010644c <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 73 d9 00 00       	call   f010da17 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000ae:	e8 16 c8 00 00       	call   f010c8c9 <sys_calculate_free_frames>
f01000b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000b6:	e8 81 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000be:	e8 7f 75 00 00       	call   f0107642 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000c3:	e8 01 c8 00 00       	call   f010c8c9 <sys_calculate_free_frames>
f01000c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000cb:	e8 6c 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000d3:	ff 75 e8             	pushl  -0x18(%ebp)
f01000d6:	ff 75 ec             	pushl  -0x14(%ebp)
f01000d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01000dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01000df:	e8 65 f6 02 00       	call   f012f749 <test_initialize_dyn_block_system>
f01000e4:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000e7:	c7 05 28 7b 65 f0 61 	movl   $0x61,0xf0657b28
f01000ee:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f01000f1:	c7 05 b4 7a 65 f0 59 	movl   $0x59,0xf0657ab4
f01000f8:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f01000fb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0100100:	83 ec 0c             	sub    $0xc,%esp
f0100103:	50                   	push   %eax
f0100104:	e8 1d 6f 00 00       	call   f0107026 <create_shares_array>
f0100109:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f010010c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f0100111:	83 ec 0c             	sub    $0xc,%esp
f0100114:	50                   	push   %eax
f0100115:	e8 8f da 00 00       	call   f010dba9 <create_semaphores_array>
f010011a:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f010011d:	e8 da 98 00 00       	call   f01099fc <env_init>
	idt_init();
f0100122:	e8 49 ae 00 00       	call   f010af70 <idt_init>

	enableBuffering(0);
f0100127:	83 ec 0c             	sub    $0xc,%esp
f010012a:	6a 00                	push   $0x0
f010012c:	e8 f3 d9 00 00       	call   f010db24 <enableBuffering>
f0100131:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f0100134:	83 ec 0c             	sub    $0xc,%esp
f0100137:	6a 00                	push   $0x0
f0100139:	e8 ce d9 00 00       	call   f010db0c <enableModifiedBuffer>
f010013e:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f0100141:	83 ec 0c             	sub    $0xc,%esp
f0100144:	68 e8 03 00 00       	push   $0x3e8
f0100149:	e8 ee d9 00 00       	call   f010db3c <setModifiedBufferLength>
f010014e:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100151:	e8 ea 59 00 00       	call   f0105b40 <pic_init>
	sched_init() ;
f0100156:	e8 9d 46 00 00       	call   f01047f8 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010015b:	83 ec 0c             	sub    $0xc,%esp
f010015e:	68 80 2e 13 f0       	push   $0xf0132e80
f0100163:	e8 1a 0b 00 00       	call   f0100c82 <cprintf>
f0100168:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010016b:	83 ec 0c             	sub    $0xc,%esp
f010016e:	68 ac 2e 13 f0       	push   $0xf0132eac
f0100173:	e8 0a 0b 00 00       	call   f0100c82 <cprintf>
f0100178:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f010017b:	e8 28 0b 00 00       	call   f0100ca8 <run_command_prompt>
	}
f0100180:	eb d9                	jmp    f010015b <FOS_initialize+0xfc>

f0100182 <print_welcome_message>:
}


void print_welcome_message()
{
f0100182:	55                   	push   %ebp
f0100183:	89 e5                	mov    %esp,%ebp
f0100185:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100188:	83 ec 0c             	sub    $0xc,%esp
f010018b:	68 d1 2e 13 f0       	push   $0xf0132ed1
f0100190:	e8 ed 0a 00 00       	call   f0100c82 <cprintf>
f0100195:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100198:	83 ec 0c             	sub    $0xc,%esp
f010019b:	68 d8 2e 13 f0       	push   $0xf0132ed8
f01001a0:	e8 dd 0a 00 00       	call   f0100c82 <cprintf>
f01001a5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001a8:	83 ec 0c             	sub    $0xc,%esp
f01001ab:	68 20 2f 13 f0       	push   $0xf0132f20
f01001b0:	e8 cd 0a 00 00       	call   f0100c82 <cprintf>
f01001b5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001b8:	83 ec 0c             	sub    $0xc,%esp
f01001bb:	68 68 2f 13 f0       	push   $0xf0132f68
f01001c0:	e8 bd 0a 00 00       	call   f0100c82 <cprintf>
f01001c5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001c8:	83 ec 0c             	sub    $0xc,%esp
f01001cb:	68 20 2f 13 f0       	push   $0xf0132f20
f01001d0:	e8 ad 0a 00 00       	call   f0100c82 <cprintf>
f01001d5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001d8:	83 ec 0c             	sub    $0xc,%esp
f01001db:	68 d8 2e 13 f0       	push   $0xf0132ed8
f01001e0:	e8 9d 0a 00 00       	call   f0100c82 <cprintf>
f01001e5:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001e8:	83 ec 0c             	sub    $0xc,%esp
f01001eb:	68 ad 2f 13 f0       	push   $0xf0132fad
f01001f0:	e8 8d 0a 00 00       	call   f0100c82 <cprintf>
f01001f5:	83 c4 10             	add    $0x10,%esp
}
f01001f8:	90                   	nop
f01001f9:	c9                   	leave  
f01001fa:	c3                   	ret    

f01001fb <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001fb:	55                   	push   %ebp
f01001fc:	89 e5                	mov    %esp,%ebp
f01001fe:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100201:	8b 45 10             	mov    0x10(%ebp),%eax
f0100204:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100209:	8d 45 10             	lea    0x10(%ebp),%eax
f010020c:	83 c0 04             	add    $0x4,%eax
f010020f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100212:	83 ec 04             	sub    $0x4,%esp
f0100215:	ff 75 0c             	pushl  0xc(%ebp)
f0100218:	ff 75 08             	pushl  0x8(%ebp)
f010021b:	68 b2 2f 13 f0       	push   $0xf0132fb2
f0100220:	e8 5d 0a 00 00       	call   f0100c82 <cprintf>
f0100225:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100228:	8b 45 10             	mov    0x10(%ebp),%eax
f010022b:	83 ec 08             	sub    $0x8,%esp
f010022e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100231:	50                   	push   %eax
f0100232:	e8 22 0a 00 00       	call   f0100c59 <vcprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010023a:	83 ec 0c             	sub    $0xc,%esp
f010023d:	68 cb 2f 13 f0       	push   $0xf0132fcb
f0100242:	e8 3b 0a 00 00       	call   f0100c82 <cprintf>
f0100247:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010024a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010024f:	85 c0                	test   %eax,%eax
f0100251:	74 12                	je     f0100265 <_panic+0x6a>
f0100253:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100258:	8b 40 54             	mov    0x54(%eax),%eax
f010025b:	83 f8 02             	cmp    $0x2,%eax
f010025e:	75 05                	jne    f0100265 <_panic+0x6a>
	{
		//2015
		env_exit();
f0100260:	e8 8c 96 00 00       	call   f01098f1 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100265:	e8 db 43 00 00       	call   f0104645 <fos_scheduler>

f010026a <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f010026a:	55                   	push   %ebp
f010026b:	89 e5                	mov    %esp,%ebp
f010026d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100270:	8b 45 10             	mov    0x10(%ebp),%eax
f0100273:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100278:	8d 45 10             	lea    0x10(%ebp),%eax
f010027b:	83 c0 04             	add    $0x4,%eax
f010027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100281:	83 ec 04             	sub    $0x4,%esp
f0100284:	ff 75 0c             	pushl  0xc(%ebp)
f0100287:	ff 75 08             	pushl  0x8(%ebp)
f010028a:	68 b2 2f 13 f0       	push   $0xf0132fb2
f010028f:	e8 ee 09 00 00       	call   f0100c82 <cprintf>
f0100294:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100297:	8b 45 10             	mov    0x10(%ebp),%eax
f010029a:	83 ec 08             	sub    $0x8,%esp
f010029d:	ff 75 f4             	pushl  -0xc(%ebp)
f01002a0:	50                   	push   %eax
f01002a1:	e8 b3 09 00 00       	call   f0100c59 <vcprintf>
f01002a6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a9:	83 ec 0c             	sub    $0xc,%esp
f01002ac:	68 cb 2f 13 f0       	push   $0xf0132fcb
f01002b1:	e8 cc 09 00 00       	call   f0100c82 <cprintf>
f01002b6:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f01002b9:	e8 46 51 00 00       	call   f0105404 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f01002be:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002c3:	85 c0                	test   %eax,%eax
f01002c5:	74 14                	je     f01002db <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f01002c7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002cf:	83 ec 0c             	sub    $0xc,%esp
f01002d2:	50                   	push   %eax
f01002d3:	e8 f3 4e 00 00       	call   f01051cb <sched_exit_env>
f01002d8:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f01002db:	e8 65 43 00 00       	call   f0104645 <fos_scheduler>

f01002e0 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f01002e0:	55                   	push   %ebp
f01002e1:	89 e5                	mov    %esp,%ebp
f01002e3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01002e9:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f01002ee:	8d 45 10             	lea    0x10(%ebp),%eax
f01002f1:	83 c0 04             	add    $0x4,%eax
f01002f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002f7:	83 ec 04             	sub    $0x4,%esp
f01002fa:	ff 75 0c             	pushl  0xc(%ebp)
f01002fd:	ff 75 08             	pushl  0x8(%ebp)
f0100300:	68 b2 2f 13 f0       	push   $0xf0132fb2
f0100305:	e8 78 09 00 00       	call   f0100c82 <cprintf>
f010030a:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010030d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100310:	83 ec 08             	sub    $0x8,%esp
f0100313:	ff 75 f4             	pushl  -0xc(%ebp)
f0100316:	50                   	push   %eax
f0100317:	e8 3d 09 00 00       	call   f0100c59 <vcprintf>
f010031c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010031f:	83 ec 0c             	sub    $0xc,%esp
f0100322:	68 cb 2f 13 f0       	push   $0xf0132fcb
f0100327:	e8 56 09 00 00       	call   f0100c82 <cprintf>
f010032c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010032f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100334:	85 c0                	test   %eax,%eax
f0100336:	74 28                	je     f0100360 <_panic_into_prompt+0x80>
f0100338:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010033d:	8b 40 54             	mov    0x54(%eax),%eax
f0100340:	83 f8 02             	cmp    $0x2,%eax
f0100343:	75 1b                	jne    f0100360 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100345:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010034a:	83 ec 0c             	sub    $0xc,%esp
f010034d:	50                   	push   %eax
f010034e:	e8 30 47 00 00       	call   f0104a83 <sched_insert_exit>
f0100353:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100356:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f010035d:	00 00 00 
	}

	lcr3(phys_page_directory);
f0100360:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0100365:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010036b:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f010036e:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0100375:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100378:	83 ec 0c             	sub    $0xc,%esp
f010037b:	6a 00                	push   $0x0
f010037d:	e8 26 09 00 00       	call   f0100ca8 <run_command_prompt>
f0100382:	83 c4 10             	add    $0x10,%esp
f0100385:	eb f1                	jmp    f0100378 <_panic_into_prompt+0x98>

f0100387 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100387:	55                   	push   %ebp
f0100388:	89 e5                	mov    %esp,%ebp
f010038a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f010038d:	8d 45 10             	lea    0x10(%ebp),%eax
f0100390:	83 c0 04             	add    $0x4,%eax
f0100393:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100396:	83 ec 04             	sub    $0x4,%esp
f0100399:	ff 75 0c             	pushl  0xc(%ebp)
f010039c:	ff 75 08             	pushl  0x8(%ebp)
f010039f:	68 cd 2f 13 f0       	push   $0xf0132fcd
f01003a4:	e8 d9 08 00 00       	call   f0100c82 <cprintf>
f01003a9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01003af:	83 ec 08             	sub    $0x8,%esp
f01003b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01003b5:	50                   	push   %eax
f01003b6:	e8 9e 08 00 00       	call   f0100c59 <vcprintf>
f01003bb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003be:	83 ec 0c             	sub    $0xc,%esp
f01003c1:	68 cb 2f 13 f0       	push   $0xf0132fcb
f01003c6:	e8 b7 08 00 00       	call   f0100c82 <cprintf>
f01003cb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01003ce:	90                   	nop
f01003cf:	c9                   	leave  
f01003d0:	c3                   	ret    

f01003d1 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f01003d1:	55                   	push   %ebp
f01003d2:	89 e5                	mov    %esp,%ebp
f01003d4:	83 ec 10             	sub    $0x10,%esp
f01003d7:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003de:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01003e1:	89 c2                	mov    %eax,%edx
f01003e3:	ec                   	in     (%dx),%al
f01003e4:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01003e7:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f01003ea:	0f b6 c0             	movzbl %al,%eax
f01003ed:	83 e0 01             	and    $0x1,%eax
f01003f0:	85 c0                	test   %eax,%eax
f01003f2:	75 07                	jne    f01003fb <serial_proc_data+0x2a>
		return -1;
f01003f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003f9:	eb 16                	jmp    f0100411 <serial_proc_data+0x40>
f01003fb:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100402:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100405:	89 c2                	mov    %eax,%edx
f0100407:	ec                   	in     (%dx),%al
f0100408:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010040b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010040e:	0f b6 c0             	movzbl %al,%eax
}
f0100411:	c9                   	leave  
f0100412:	c3                   	ret    

f0100413 <serial_intr>:

void
serial_intr(void)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100419:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f010041e:	85 c0                	test   %eax,%eax
f0100420:	74 10                	je     f0100432 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100422:	83 ec 0c             	sub    $0xc,%esp
f0100425:	68 d1 03 10 f0       	push   $0xf01003d1
f010042a:	e8 e4 05 00 00       	call   f0100a13 <cons_intr>
f010042f:	83 c4 10             	add    $0x10,%esp
}
f0100432:	90                   	nop
f0100433:	c9                   	leave  
f0100434:	c3                   	ret    

f0100435 <serial_init>:

void
serial_init(void)
{
f0100435:	55                   	push   %ebp
f0100436:	89 e5                	mov    %esp,%ebp
f0100438:	83 ec 40             	sub    $0x40,%esp
f010043b:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100442:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100446:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100449:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010044c:	ee                   	out    %al,(%dx)
f010044d:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f0100454:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100458:	8a 45 cf             	mov    -0x31(%ebp),%al
f010045b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010045e:	ee                   	out    %al,(%dx)
f010045f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100466:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f010046a:	8a 45 d0             	mov    -0x30(%ebp),%al
f010046d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100470:	ee                   	out    %al,(%dx)
f0100471:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100478:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f010047c:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010047f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100482:	ee                   	out    %al,(%dx)
f0100483:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f010048a:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010048e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100491:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100494:	ee                   	out    %al,(%dx)
f0100495:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f010049c:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004a0:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004a6:	ee                   	out    %al,(%dx)
f01004a7:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004ae:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004b2:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004b8:	ee                   	out    %al,(%dx)
f01004b9:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004c3:	89 c2                	mov    %eax,%edx
f01004c5:	ec                   	in     (%dx),%al
f01004c6:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f01004c9:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f01004cc:	3c ff                	cmp    $0xff,%al
f01004ce:	0f 95 c0             	setne  %al
f01004d1:	0f b6 c0             	movzbl %al,%eax
f01004d4:	a3 e0 6f 65 f0       	mov    %eax,0xf0656fe0
f01004d9:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01004e3:	89 c2                	mov    %eax,%edx
f01004e5:	ec                   	in     (%dx),%al
f01004e6:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01004e9:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f01004f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01004f3:	89 c2                	mov    %eax,%edx
f01004f5:	ec                   	in     (%dx),%al
f01004f6:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004f9:	90                   	nop
f01004fa:	c9                   	leave  
f01004fb:	c3                   	ret    

f01004fc <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004fc:	55                   	push   %ebp
f01004fd:	89 e5                	mov    %esp,%ebp
f01004ff:	83 ec 20             	sub    $0x20,%esp
f0100502:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100509:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010050c:	89 c2                	mov    %eax,%edx
f010050e:	ec                   	in     (%dx),%al
f010050f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100512:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100519:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010051c:	89 c2                	mov    %eax,%edx
f010051e:	ec                   	in     (%dx),%al
f010051f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100522:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010052c:	89 c2                	mov    %eax,%edx
f010052e:	ec                   	in     (%dx),%al
f010052f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100532:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100539:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010053c:	89 c2                	mov    %eax,%edx
f010053e:	ec                   	in     (%dx),%al
f010053f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100542:	90                   	nop
f0100543:	c9                   	leave  
f0100544:	c3                   	ret    

f0100545 <lpt_putc>:

static void
lpt_putc(int c)
{
f0100545:	55                   	push   %ebp
f0100546:	89 e5                	mov    %esp,%ebp
f0100548:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f010054b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100552:	eb 08                	jmp    f010055c <lpt_putc+0x17>
		delay();
f0100554:	e8 a3 ff ff ff       	call   f01004fc <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100559:	ff 45 fc             	incl   -0x4(%ebp)
f010055c:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f0100563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100566:	89 c2                	mov    %eax,%edx
f0100568:	ec                   	in     (%dx),%al
f0100569:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f010056c:	8a 45 eb             	mov    -0x15(%ebp),%al
f010056f:	84 c0                	test   %al,%al
f0100571:	78 09                	js     f010057c <lpt_putc+0x37>
f0100573:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f010057a:	7e d8                	jle    f0100554 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f010057c:	8b 45 08             	mov    0x8(%ebp),%eax
f010057f:	0f b6 c0             	movzbl %al,%eax
f0100582:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100589:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010058c:	8a 45 e8             	mov    -0x18(%ebp),%al
f010058f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100592:	ee                   	out    %al,(%dx)
f0100593:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f010059a:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010059e:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005a4:	ee                   	out    %al,(%dx)
f01005a5:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005ac:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005b0:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005b6:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005b7:	90                   	nop
f01005b8:	c9                   	leave  
f01005b9:	c3                   	ret    

f01005ba <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005ba:	55                   	push   %ebp
f01005bb:	89 e5                	mov    %esp,%ebp
f01005bd:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005c0:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005ca:	66 8b 00             	mov    (%eax),%ax
f01005cd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f01005d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005d4:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f01005d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005dc:	66 8b 00             	mov    (%eax),%ax
f01005df:	66 3d 5a a5          	cmp    $0xa55a,%ax
f01005e3:	74 13                	je     f01005f8 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f01005e5:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f01005ec:	c7 05 e4 6f 65 f0 b4 	movl   $0x3b4,0xf0656fe4
f01005f3:	03 00 00 
f01005f6:	eb 14                	jmp    f010060c <cga_init+0x52>
	} else {
		*cp = was;
f01005f8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005fb:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005ff:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100602:	c7 05 e4 6f 65 f0 d4 	movl   $0x3d4,0xf0656fe4
f0100609:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010060c:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100611:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100614:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100618:	8a 45 e0             	mov    -0x20(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010061f:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100624:	40                   	inc    %eax
f0100625:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010062b:	89 c2                	mov    %eax,%edx
f010062d:	ec                   	in     (%dx),%al
f010062e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100631:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100634:	0f b6 c0             	movzbl %al,%eax
f0100637:	c1 e0 08             	shl    $0x8,%eax
f010063a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010063d:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100642:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100645:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100649:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010064c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010064f:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100650:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100655:	40                   	inc    %eax
f0100656:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010065c:	89 c2                	mov    %eax,%edx
f010065e:	ec                   	in     (%dx),%al
f010065f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100662:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100665:	0f b6 c0             	movzbl %al,%eax
f0100668:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f010066b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066e:	a3 e8 6f 65 f0       	mov    %eax,0xf0656fe8
	crt_pos = pos;
f0100673:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100676:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
}
f010067c:	90                   	nop
f010067d:	c9                   	leave  
f010067e:	c3                   	ret    

f010067f <cga_putc>:



void
cga_putc(int c)
{
f010067f:	55                   	push   %ebp
f0100680:	89 e5                	mov    %esp,%ebp
f0100682:	53                   	push   %ebx
f0100683:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100686:	8b 45 08             	mov    0x8(%ebp),%eax
f0100689:	b0 00                	mov    $0x0,%al
f010068b:	85 c0                	test   %eax,%eax
f010068d:	75 07                	jne    f0100696 <cga_putc+0x17>
		c |= 0x0700;
f010068f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100696:	8b 45 08             	mov    0x8(%ebp),%eax
f0100699:	0f b6 c0             	movzbl %al,%eax
f010069c:	83 f8 09             	cmp    $0x9,%eax
f010069f:	0f 84 94 00 00 00    	je     f0100739 <cga_putc+0xba>
f01006a5:	83 f8 09             	cmp    $0x9,%eax
f01006a8:	7f 0a                	jg     f01006b4 <cga_putc+0x35>
f01006aa:	83 f8 08             	cmp    $0x8,%eax
f01006ad:	74 14                	je     f01006c3 <cga_putc+0x44>
f01006af:	e9 c8 00 00 00       	jmp    f010077c <cga_putc+0xfd>
f01006b4:	83 f8 0a             	cmp    $0xa,%eax
f01006b7:	74 49                	je     f0100702 <cga_putc+0x83>
f01006b9:	83 f8 0d             	cmp    $0xd,%eax
f01006bc:	74 53                	je     f0100711 <cga_putc+0x92>
f01006be:	e9 b9 00 00 00       	jmp    f010077c <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f01006c3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006c9:	66 85 c0             	test   %ax,%ax
f01006cc:	0f 84 d0 00 00 00    	je     f01007a2 <cga_putc+0x123>
			crt_pos--;
f01006d2:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006d8:	48                   	dec    %eax
f01006d9:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f01006df:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01006e5:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006eb:	0f b7 c0             	movzwl %ax,%eax
f01006ee:	01 c0                	add    %eax,%eax
f01006f0:	01 c2                	add    %eax,%edx
f01006f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01006f5:	b0 00                	mov    $0x0,%al
f01006f7:	83 c8 20             	or     $0x20,%eax
f01006fa:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006fd:	e9 a0 00 00 00       	jmp    f01007a2 <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f0100702:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100708:	83 c0 50             	add    $0x50,%eax
f010070b:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100711:	66 8b 0d ec 6f 65 f0 	mov    0xf0656fec,%cx
f0100718:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f010071e:	bb 50 00 00 00       	mov    $0x50,%ebx
f0100723:	ba 00 00 00 00       	mov    $0x0,%edx
f0100728:	66 f7 f3             	div    %bx
f010072b:	89 d0                	mov    %edx,%eax
f010072d:	29 c1                	sub    %eax,%ecx
f010072f:	89 c8                	mov    %ecx,%eax
f0100731:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		break;
f0100737:	eb 6a                	jmp    f01007a3 <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f0100739:	83 ec 0c             	sub    $0xc,%esp
f010073c:	6a 20                	push   $0x20
f010073e:	e8 69 04 00 00       	call   f0100bac <cons_putc>
f0100743:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100746:	83 ec 0c             	sub    $0xc,%esp
f0100749:	6a 20                	push   $0x20
f010074b:	e8 5c 04 00 00       	call   f0100bac <cons_putc>
f0100750:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100753:	83 ec 0c             	sub    $0xc,%esp
f0100756:	6a 20                	push   $0x20
f0100758:	e8 4f 04 00 00       	call   f0100bac <cons_putc>
f010075d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100760:	83 ec 0c             	sub    $0xc,%esp
f0100763:	6a 20                	push   $0x20
f0100765:	e8 42 04 00 00       	call   f0100bac <cons_putc>
f010076a:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010076d:	83 ec 0c             	sub    $0xc,%esp
f0100770:	6a 20                	push   $0x20
f0100772:	e8 35 04 00 00       	call   f0100bac <cons_putc>
f0100777:	83 c4 10             	add    $0x10,%esp
		break;
f010077a:	eb 27                	jmp    f01007a3 <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f010077c:	8b 0d e8 6f 65 f0    	mov    0xf0656fe8,%ecx
f0100782:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100788:	8d 50 01             	lea    0x1(%eax),%edx
f010078b:	66 89 15 ec 6f 65 f0 	mov    %dx,0xf0656fec
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	01 c0                	add    %eax,%eax
f0100797:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010079a:	8b 45 08             	mov    0x8(%ebp),%eax
f010079d:	66 89 02             	mov    %ax,(%edx)
		break;
f01007a0:	eb 01                	jmp    f01007a3 <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007a2:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007a3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007a9:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007ad:	76 58                	jbe    f0100807 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007af:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007b4:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007ba:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007bf:	83 ec 04             	sub    $0x4,%esp
f01007c2:	68 00 0f 00 00       	push   $0xf00
f01007c7:	52                   	push   %edx
f01007c8:	50                   	push   %eax
f01007c9:	e8 48 06 03 00       	call   f0130e16 <memcpy>
f01007ce:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007d1:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007d8:	eb 15                	jmp    f01007ef <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f01007da:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01007e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007e3:	01 c0                	add    %eax,%eax
f01007e5:	01 d0                	add    %edx,%eax
f01007e7:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ec:	ff 45 f4             	incl   -0xc(%ebp)
f01007ef:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007f6:	7e e2                	jle    f01007da <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007f8:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007fe:	83 e8 50             	sub    $0x50,%eax
f0100801:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100807:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f010080c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010080f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100813:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100816:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100819:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f010081a:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100820:	66 c1 e8 08          	shr    $0x8,%ax
f0100824:	0f b6 c0             	movzbl %al,%eax
f0100827:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010082d:	42                   	inc    %edx
f010082e:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100831:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100834:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100837:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010083a:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f010083b:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100840:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100843:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100847:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010084a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010084d:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f010084e:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100854:	0f b6 c0             	movzbl %al,%eax
f0100857:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010085d:	42                   	inc    %edx
f010085e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100861:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100864:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100867:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010086a:	ee                   	out    %al,(%dx)
}
f010086b:	90                   	nop
f010086c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010086f:	c9                   	leave  
f0100870:	c3                   	ret    

f0100871 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100871:	55                   	push   %ebp
f0100872:	89 e5                	mov    %esp,%ebp
f0100874:	83 ec 28             	sub    $0x28,%esp
f0100877:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010087e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100881:	89 c2                	mov    %eax,%edx
f0100883:	ec                   	in     (%dx),%al
f0100884:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100887:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010088a:	0f b6 c0             	movzbl %al,%eax
f010088d:	83 e0 01             	and    $0x1,%eax
f0100890:	85 c0                	test   %eax,%eax
f0100892:	75 0a                	jne    f010089e <kbd_proc_data+0x2d>
		return -1;
f0100894:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100899:	e9 54 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
f010089e:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01008a8:	89 c2                	mov    %eax,%edx
f01008aa:	ec                   	in     (%dx),%al
f01008ab:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f01008ae:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f01008b1:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008b4:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008b8:	75 17                	jne    f01008d1 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008ba:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008bf:	83 c8 40             	or     $0x40,%eax
f01008c2:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f01008c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01008cc:	e9 21 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f01008d1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008d4:	84 c0                	test   %al,%al
f01008d6:	79 44                	jns    f010091c <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008d8:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008dd:	83 e0 40             	and    $0x40,%eax
f01008e0:	85 c0                	test   %eax,%eax
f01008e2:	75 08                	jne    f01008ec <kbd_proc_data+0x7b>
f01008e4:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008e7:	83 e0 7f             	and    $0x7f,%eax
f01008ea:	eb 03                	jmp    f01008ef <kbd_proc_data+0x7e>
f01008ec:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ef:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01008f2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008f6:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f01008fc:	83 c8 40             	or     $0x40,%eax
f01008ff:	0f b6 c0             	movzbl %al,%eax
f0100902:	f7 d0                	not    %eax
f0100904:	89 c2                	mov    %eax,%edx
f0100906:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010090b:	21 d0                	and    %edx,%eax
f010090d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f0100912:	b8 00 00 00 00       	mov    $0x0,%eax
f0100917:	e9 d6 00 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f010091c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100921:	83 e0 40             	and    $0x40,%eax
f0100924:	85 c0                	test   %eax,%eax
f0100926:	74 11                	je     f0100939 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100928:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f010092c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100931:	83 e0 bf             	and    $0xffffffbf,%eax
f0100934:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	}

	shift |= shiftcode[data];
f0100939:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010093d:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f0100943:	0f b6 d0             	movzbl %al,%edx
f0100946:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010094b:	09 d0                	or     %edx,%eax
f010094d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	shift ^= togglecode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 11 19 f0    	mov    -0xfe6eee0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100964:	31 d0                	xor    %edx,%eax
f0100966:	a3 08 72 65 f0       	mov    %eax,0xf0657208

	c = charcode[shift & (CTL | SHIFT)][data];
f010096b:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100970:	83 e0 03             	and    $0x3,%eax
f0100973:	8b 14 85 20 15 19 f0 	mov    -0xfe6eae0(,%eax,4),%edx
f010097a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010097e:	01 d0                	add    %edx,%eax
f0100980:	8a 00                	mov    (%eax),%al
f0100982:	0f b6 c0             	movzbl %al,%eax
f0100985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100988:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010098d:	83 e0 08             	and    $0x8,%eax
f0100990:	85 c0                	test   %eax,%eax
f0100992:	74 22                	je     f01009b6 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100994:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100998:	7e 0c                	jle    f01009a6 <kbd_proc_data+0x135>
f010099a:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f010099e:	7f 06                	jg     f01009a6 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f01009a0:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f01009a4:	eb 10                	jmp    f01009b6 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f01009a6:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f01009aa:	7e 0a                	jle    f01009b6 <kbd_proc_data+0x145>
f01009ac:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f01009b0:	7f 04                	jg     f01009b6 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f01009b2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f01009b6:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01009bb:	f7 d0                	not    %eax
f01009bd:	83 e0 06             	and    $0x6,%eax
f01009c0:	85 c0                	test   %eax,%eax
f01009c2:	75 2b                	jne    f01009ef <kbd_proc_data+0x17e>
f01009c4:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009cb:	75 22                	jne    f01009ef <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f01009cd:	83 ec 0c             	sub    $0xc,%esp
f01009d0:	68 e8 2f 13 f0       	push   $0xf0132fe8
f01009d5:	e8 a8 02 00 00       	call   f0100c82 <cprintf>
f01009da:	83 c4 10             	add    $0x10,%esp
f01009dd:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f01009e4:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01009e8:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01009eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01009ee:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f01009ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01009f2:	c9                   	leave  
f01009f3:	c3                   	ret    

f01009f4 <kbd_intr>:

void
kbd_intr(void)
{
f01009f4:	55                   	push   %ebp
f01009f5:	89 e5                	mov    %esp,%ebp
f01009f7:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009fa:	83 ec 0c             	sub    $0xc,%esp
f01009fd:	68 71 08 10 f0       	push   $0xf0100871
f0100a02:	e8 0c 00 00 00       	call   f0100a13 <cons_intr>
f0100a07:	83 c4 10             	add    $0x10,%esp
}
f0100a0a:	90                   	nop
f0100a0b:	c9                   	leave  
f0100a0c:	c3                   	ret    

f0100a0d <kbd_init>:

void
kbd_init(void)
{
f0100a0d:	55                   	push   %ebp
f0100a0e:	89 e5                	mov    %esp,%ebp
}
f0100a10:	90                   	nop
f0100a11:	5d                   	pop    %ebp
f0100a12:	c3                   	ret    

f0100a13 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a13:	55                   	push   %ebp
f0100a14:	89 e5                	mov    %esp,%ebp
f0100a16:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100a19:	eb 35                	jmp    f0100a50 <cons_intr+0x3d>
		if (c == 0)
f0100a1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a1f:	75 02                	jne    f0100a23 <cons_intr+0x10>
			continue;
f0100a21:	eb 2d                	jmp    f0100a50 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100a23:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a28:	8d 50 01             	lea    0x1(%eax),%edx
f0100a2b:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100a31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100a34:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100a3a:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a44:	75 0a                	jne    f0100a50 <cons_intr+0x3d>
			cons.wpos = 0;
f0100a46:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100a4d:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0100a53:	ff d0                	call   *%eax
f0100a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a58:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a5c:	75 bd                	jne    f0100a1b <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a5e:	90                   	nop
f0100a5f:	c9                   	leave  
f0100a60:	c3                   	ret    

f0100a61 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a61:	55                   	push   %ebp
f0100a62:	89 e5                	mov    %esp,%ebp
f0100a64:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a67:	e8 a7 f9 ff ff       	call   f0100413 <serial_intr>
	kbd_intr();
f0100a6c:	e8 83 ff ff ff       	call   f01009f4 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a71:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100a77:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a7c:	39 c2                	cmp    %eax,%edx
f0100a7e:	74 35                	je     f0100ab5 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a80:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a85:	8d 50 01             	lea    0x1(%eax),%edx
f0100a88:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100a8e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100a94:	0f b6 c0             	movzbl %al,%eax
f0100a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a9a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a9f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100aa4:	75 0a                	jne    f0100ab0 <cons_getc+0x4f>
			cons.rpos = 0;
f0100aa6:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100aad:	00 00 00 
		return c;
f0100ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ab3:	eb 05                	jmp    f0100aba <cons_getc+0x59>
	}
	return 0;
f0100ab5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100aba:	c9                   	leave  
f0100abb:	c3                   	ret    

f0100abc <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100abc:	55                   	push   %ebp
f0100abd:	89 e5                	mov    %esp,%ebp
f0100abf:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100ac2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100ac9:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100ace:	85 c0                	test   %eax,%eax
f0100ad0:	74 41                	je     f0100b13 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100ad2:	e8 fa f8 ff ff       	call   f01003d1 <serial_proc_data>
f0100ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ada:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ade:	74 33                	je     f0100b13 <cons_getc2+0x57>
				if (c1 == 0)
f0100ae0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ae4:	74 2d                	je     f0100b13 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100ae6:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100aeb:	8d 50 01             	lea    0x1(%eax),%edx
f0100aee:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100af4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100af7:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100afd:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b07:	75 0a                	jne    f0100b13 <cons_getc2+0x57>
						cons.wpos = 0;
f0100b09:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b10:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100b1a:	e8 52 fd ff ff       	call   f0100871 <kbd_proc_data>
f0100b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100b22:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100b26:	74 33                	je     f0100b5b <cons_getc2+0x9f>
			if (c2 == 0)
f0100b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b2c:	74 2d                	je     f0100b5b <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100b2e:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b33:	8d 50 01             	lea    0x1(%eax),%edx
f0100b36:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100b3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100b3f:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100b45:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b4f:	75 0a                	jne    f0100b5b <cons_getc2+0x9f>
					cons.wpos = 0;
f0100b51:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b58:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b5f:	7e 44                	jle    f0100ba5 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b61:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100b67:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b6c:	39 c2                	cmp    %eax,%edx
f0100b6e:	74 35                	je     f0100ba5 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b70:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b75:	8d 50 01             	lea    0x1(%eax),%edx
f0100b78:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100b7e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100b84:	0f b6 c0             	movzbl %al,%eax
f0100b87:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b8a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b94:	75 0a                	jne    f0100ba0 <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b96:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100b9d:	00 00 00 
			return c;
f0100ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100ba3:	eb 05                	jmp    f0100baa <cons_getc2+0xee>
		}
	}
	return 0;
f0100ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100baa:	c9                   	leave  
f0100bab:	c3                   	ret    

f0100bac <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100bac:	55                   	push   %ebp
f0100bad:	89 e5                	mov    %esp,%ebp
f0100baf:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100bb2:	ff 75 08             	pushl  0x8(%ebp)
f0100bb5:	e8 8b f9 ff ff       	call   f0100545 <lpt_putc>
f0100bba:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100bbd:	83 ec 0c             	sub    $0xc,%esp
f0100bc0:	ff 75 08             	pushl  0x8(%ebp)
f0100bc3:	e8 b7 fa ff ff       	call   f010067f <cga_putc>
f0100bc8:	83 c4 10             	add    $0x10,%esp
}
f0100bcb:	90                   	nop
f0100bcc:	c9                   	leave  
f0100bcd:	c3                   	ret    

f0100bce <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100bce:	55                   	push   %ebp
f0100bcf:	89 e5                	mov    %esp,%ebp
f0100bd1:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100bd4:	e8 e1 f9 ff ff       	call   f01005ba <cga_init>
	kbd_init();
f0100bd9:	e8 2f fe ff ff       	call   f0100a0d <kbd_init>
	serial_init();
f0100bde:	e8 52 f8 ff ff       	call   f0100435 <serial_init>

	if (!serial_exists)
f0100be3:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100be8:	85 c0                	test   %eax,%eax
f0100bea:	75 10                	jne    f0100bfc <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100bec:	83 ec 0c             	sub    $0xc,%esp
f0100bef:	68 f4 2f 13 f0       	push   $0xf0132ff4
f0100bf4:	e8 89 00 00 00       	call   f0100c82 <cprintf>
f0100bf9:	83 c4 10             	add    $0x10,%esp
}
f0100bfc:	90                   	nop
f0100bfd:	c9                   	leave  
f0100bfe:	c3                   	ret    

f0100bff <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100bff:	55                   	push   %ebp
f0100c00:	89 e5                	mov    %esp,%ebp
f0100c02:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c05:	83 ec 0c             	sub    $0xc,%esp
f0100c08:	ff 75 08             	pushl  0x8(%ebp)
f0100c0b:	e8 9c ff ff ff       	call   f0100bac <cons_putc>
f0100c10:	83 c4 10             	add    $0x10,%esp
}
f0100c13:	90                   	nop
f0100c14:	c9                   	leave  
f0100c15:	c3                   	ret    

f0100c16 <getchar>:

int
getchar(void)
{
f0100c16:	55                   	push   %ebp
f0100c17:	89 e5                	mov    %esp,%ebp
f0100c19:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100c1c:	e8 40 fe ff ff       	call   f0100a61 <cons_getc>
f0100c21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c28:	74 f2                	je     f0100c1c <getchar+0x6>
		/* do nothing */;
	return c;
f0100c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2d:	c9                   	leave  
f0100c2e:	c3                   	ret    

f0100c2f <iscons>:

int
iscons(int fdnum)
{
f0100c2f:	55                   	push   %ebp
f0100c30:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100c32:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100c37:	5d                   	pop    %ebp
f0100c38:	c3                   	ret    

f0100c39 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100c39:	55                   	push   %ebp
f0100c3a:	89 e5                	mov    %esp,%ebp
f0100c3c:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100c3f:	83 ec 0c             	sub    $0xc,%esp
f0100c42:	ff 75 08             	pushl  0x8(%ebp)
f0100c45:	e8 b5 ff ff ff       	call   f0100bff <cputchar>
f0100c4a:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100c4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100c50:	83 c0 04             	add    $0x4,%eax
f0100c53:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c56:	90                   	nop
f0100c57:	c9                   	leave  
f0100c58:	c3                   	ret    

f0100c59 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c59:	55                   	push   %ebp
f0100c5a:	89 e5                	mov    %esp,%ebp
f0100c5c:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c66:	ff 75 0c             	pushl  0xc(%ebp)
f0100c69:	ff 75 08             	pushl  0x8(%ebp)
f0100c6c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c6f:	50                   	push   %eax
f0100c70:	68 39 0c 10 f0       	push   $0xf0100c39
f0100c75:	e8 d0 f8 02 00       	call   f013054a <vprintfmt>
f0100c7a:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c80:	c9                   	leave  
f0100c81:	c3                   	ret    

f0100c82 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c82:	55                   	push   %ebp
f0100c83:	89 e5                	mov    %esp,%ebp
f0100c85:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c88:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c91:	83 ec 08             	sub    $0x8,%esp
f0100c94:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c97:	50                   	push   %eax
f0100c98:	e8 bc ff ff ff       	call   f0100c59 <vcprintf>
f0100c9d:	83 c4 10             	add    $0x10,%esp
f0100ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100ca3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100ca6:	c9                   	leave  
f0100ca7:	c3                   	ret    

f0100ca8 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100ca8:	55                   	push   %ebp
f0100ca9:	89 e5                	mov    %esp,%ebp
f0100cab:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100cb1:	83 ec 08             	sub    $0x8,%esp
f0100cb4:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cba:	50                   	push   %eax
f0100cbb:	68 11 30 13 f0       	push   $0xf0133011
f0100cc0:	e8 2d fd 02 00       	call   f01309f2 <readline>
f0100cc5:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100cc8:	83 ec 0c             	sub    $0xc,%esp
f0100ccb:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cd1:	50                   	push   %eax
f0100cd2:	e8 0d 00 00 00       	call   f0100ce4 <execute_command>
f0100cd7:	83 c4 10             	add    $0x10,%esp
f0100cda:	85 c0                	test   %eax,%eax
f0100cdc:	78 02                	js     f0100ce0 <run_command_prompt+0x38>
				break;
	}
f0100cde:	eb d1                	jmp    f0100cb1 <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100ce0:	90                   	nop
	}
}
f0100ce1:	90                   	nop
f0100ce2:	c9                   	leave  
f0100ce3:	c3                   	ret    

f0100ce4 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100ce4:	55                   	push   %ebp
f0100ce5:	89 e5                	mov    %esp,%ebp
f0100ce7:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100ced:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100cf0:	50                   	push   %eax
f0100cf1:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100cf4:	50                   	push   %eax
f0100cf5:	68 17 30 13 f0       	push   $0xf0133017
f0100cfa:	ff 75 08             	pushl  0x8(%ebp)
f0100cfd:	e8 2a 05 03 00       	call   f013122c <strsplit>
f0100d02:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d08:	85 c0                	test   %eax,%eax
f0100d0a:	75 0a                	jne    f0100d16 <execute_command+0x32>
		return 0;
f0100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d11:	e9 37 01 00 00       	jmp    f0100e4d <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100d1d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100d2b:	e9 8c 00 00 00       	jmp    f0100dbc <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100d30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d33:	89 d0                	mov    %edx,%eax
f0100d35:	01 c0                	add    %eax,%eax
f0100d37:	01 d0                	add    %edx,%eax
f0100d39:	c1 e0 02             	shl    $0x2,%eax
f0100d3c:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d41:	8b 10                	mov    (%eax),%edx
f0100d43:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d46:	83 ec 08             	sub    $0x8,%esp
f0100d49:	52                   	push   %edx
f0100d4a:	50                   	push   %eax
f0100d4b:	e8 b4 ff 02 00       	call   f0130d04 <strcmp>
f0100d50:	83 c4 10             	add    $0x10,%esp
f0100d53:	85 c0                	test   %eax,%eax
f0100d55:	75 09                	jne    f0100d60 <execute_command+0x7c>
		{
			command_found = 1;
f0100d57:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d5e:	eb 6c                	jmp    f0100dcc <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d60:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d63:	83 ec 0c             	sub    $0xc,%esp
f0100d66:	50                   	push   %eax
f0100d67:	e8 8c fe 02 00       	call   f0130bf8 <strlen>
f0100d6c:	83 c4 10             	add    $0x10,%esp
f0100d6f:	89 c1                	mov    %eax,%ecx
f0100d71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d74:	89 d0                	mov    %edx,%eax
f0100d76:	01 c0                	add    %eax,%eax
f0100d78:	01 d0                	add    %edx,%eax
f0100d7a:	c1 e0 02             	shl    $0x2,%eax
f0100d7d:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d82:	8b 10                	mov    (%eax),%edx
f0100d84:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d87:	83 ec 04             	sub    $0x4,%esp
f0100d8a:	51                   	push   %ecx
f0100d8b:	52                   	push   %edx
f0100d8c:	50                   	push   %eax
f0100d8d:	e8 aa ff 02 00       	call   f0130d3c <strncmp>
f0100d92:	83 c4 10             	add    $0x10,%esp
f0100d95:	85 c0                	test   %eax,%eax
f0100d97:	75 20                	jne    f0100db9 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d9c:	89 d0                	mov    %edx,%eax
f0100d9e:	01 c0                	add    %eax,%eax
f0100da0:	01 d0                	add    %edx,%eax
f0100da2:	c1 e0 02             	shl    $0x2,%eax
f0100da5:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100daa:	8b 10                	mov    (%eax),%edx
f0100dac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100daf:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100db6:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db9:	ff 45 f0             	incl   -0x10(%ebp)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0100dc4:	39 c2                	cmp    %eax,%edx
f0100dc6:	0f 82 64 ff ff ff    	jb     f0100d30 <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100dcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd0:	74 2b                	je     f0100dfd <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100dd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dd5:	89 d0                	mov    %edx,%eax
f0100dd7:	01 c0                	add    %eax,%eax
f0100dd9:	01 d0                	add    %edx,%eax
f0100ddb:	c1 e0 02             	shl    $0x2,%eax
f0100dde:	05 48 15 19 f0       	add    $0xf0191548,%eax
f0100de3:	8b 00                	mov    (%eax),%eax
f0100de5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100de8:	83 ec 08             	sub    $0x8,%esp
f0100deb:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100dee:	51                   	push   %ecx
f0100def:	52                   	push   %edx
f0100df0:	ff d0                	call   *%eax
f0100df2:	83 c4 10             	add    $0x10,%esp
f0100df5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100df8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100dfb:	eb 50                	jmp    f0100e4d <execute_command+0x169>
	}
	else if (count == 0)
f0100dfd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e01:	75 16                	jne    f0100e19 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e06:	83 ec 08             	sub    $0x8,%esp
f0100e09:	50                   	push   %eax
f0100e0a:	68 1c 30 13 f0       	push   $0xf013301c
f0100e0f:	e8 6e fe ff ff       	call   f0100c82 <cprintf>
f0100e14:	83 c4 10             	add    $0x10,%esp
f0100e17:	eb 2f                	jmp    f0100e48 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e19:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100e20:	eb 1e                	jmp    f0100e40 <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100e22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e25:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100e2c:	83 ec 08             	sub    $0x8,%esp
f0100e2f:	50                   	push   %eax
f0100e30:	68 32 30 13 f0       	push   $0xf0133032
f0100e35:	e8 48 fe ff ff       	call   f0100c82 <cprintf>
f0100e3a:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e3d:	ff 45 e8             	incl   -0x18(%ebp)
f0100e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e43:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100e46:	7c da                	jl     f0100e22 <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100e4d:	c9                   	leave  
f0100e4e:	c3                   	ret    

f0100e4f <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100e4f:	55                   	push   %ebp
f0100e50:	89 e5                	mov    %esp,%ebp
f0100e52:	c7 05 5c 7b 65 f0 00 	movl   $0x0,0xf0657b5c
f0100e59:	00 00 00 
f0100e5c:	90                   	nop
f0100e5d:	5d                   	pop    %ebp
f0100e5e:	c3                   	ret    

f0100e5f <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e5f:	55                   	push   %ebp
f0100e60:	89 e5                	mov    %esp,%ebp
f0100e62:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100e69:	00 00 00 
f0100e6c:	90                   	nop
f0100e6d:	5d                   	pop    %ebp
f0100e6e:	c3                   	ret    

f0100e6f <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e6f:	55                   	push   %ebp
f0100e70:	89 e5                	mov    %esp,%ebp
f0100e72:	c7 05 5c 7b 65 f0 02 	movl   $0x2,0xf0657b5c
f0100e79:	00 00 00 
f0100e7c:	90                   	nop
f0100e7d:	5d                   	pop    %ebp
f0100e7e:	c3                   	ret    

f0100e7f <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e7f:	55                   	push   %ebp
f0100e80:	89 e5                	mov    %esp,%ebp
f0100e82:	c7 05 5c 7b 65 f0 03 	movl   $0x3,0xf0657b5c
f0100e89:	00 00 00 
f0100e8c:	90                   	nop
f0100e8d:	5d                   	pop    %ebp
f0100e8e:	c3                   	ret    

f0100e8f <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e8f:	55                   	push   %ebp
f0100e90:	89 e5                	mov    %esp,%ebp
f0100e92:	c7 05 5c 7b 65 f0 04 	movl   $0x4,0xf0657b5c
f0100e99:	00 00 00 
f0100e9c:	90                   	nop
f0100e9d:	5d                   	pop    %ebp
f0100e9e:	c3                   	ret    

f0100e9f <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e9f:	55                   	push   %ebp
f0100ea0:	89 e5                	mov    %esp,%ebp
f0100ea2:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ea7:	85 c0                	test   %eax,%eax
f0100ea9:	75 04                	jne    f0100eaf <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100eab:	b0 01                	mov    $0x1,%al
f0100ead:	eb 02                	jmp    f0100eb1 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100eaf:	b0 00                	mov    $0x0,%al
f0100eb1:	5d                   	pop    %ebp
f0100eb2:	c3                   	ret    

f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100eb3:	55                   	push   %ebp
f0100eb4:	89 e5                	mov    %esp,%ebp
f0100eb6:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ebb:	83 f8 01             	cmp    $0x1,%eax
f0100ebe:	75 04                	jne    f0100ec4 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100ec0:	b0 01                	mov    $0x1,%al
f0100ec2:	eb 02                	jmp    f0100ec6 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100ec4:	b0 00                	mov    $0x0,%al
f0100ec6:	5d                   	pop    %ebp
f0100ec7:	c3                   	ret    

f0100ec8 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100ec8:	55                   	push   %ebp
f0100ec9:	89 e5                	mov    %esp,%ebp
f0100ecb:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ed0:	83 f8 02             	cmp    $0x2,%eax
f0100ed3:	75 04                	jne    f0100ed9 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100ed5:	b0 01                	mov    $0x1,%al
f0100ed7:	eb 02                	jmp    f0100edb <isKHeapPlacementStrategyBESTFIT+0x13>
f0100ed9:	b0 00                	mov    $0x0,%al
f0100edb:	5d                   	pop    %ebp
f0100edc:	c3                   	ret    

f0100edd <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100edd:	55                   	push   %ebp
f0100ede:	89 e5                	mov    %esp,%ebp
f0100ee0:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ee5:	83 f8 03             	cmp    $0x3,%eax
f0100ee8:	75 04                	jne    f0100eee <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100eea:	b0 01                	mov    $0x1,%al
f0100eec:	eb 02                	jmp    f0100ef0 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100eee:	b0 00                	mov    $0x0,%al
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100efa:	83 f8 04             	cmp    $0x4,%eax
f0100efd:	75 04                	jne    f0100f03 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100f11:	00 00 00 
f0100f14:	90                   	nop
f0100f15:	5d                   	pop    %ebp
f0100f16:	c3                   	ret    

f0100f17 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f17:	55                   	push   %ebp
f0100f18:	89 e5                	mov    %esp,%ebp
f0100f1a:	c7 05 30 7b 65 f0 02 	movl   $0x2,0xf0657b30
f0100f21:	00 00 00 
f0100f24:	90                   	nop
f0100f25:	5d                   	pop    %ebp
f0100f26:	c3                   	ret    

f0100f27 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f27:	55                   	push   %ebp
f0100f28:	89 e5                	mov    %esp,%ebp
f0100f2a:	c7 05 30 7b 65 f0 03 	movl   $0x3,0xf0657b30
f0100f31:	00 00 00 
f0100f34:	90                   	nop
f0100f35:	5d                   	pop    %ebp
f0100f36:	c3                   	ret    

f0100f37 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100f37:	55                   	push   %ebp
f0100f38:	89 e5                	mov    %esp,%ebp
f0100f3a:	c7 05 30 7b 65 f0 04 	movl   $0x4,0xf0657b30
f0100f41:	00 00 00 
f0100f44:	90                   	nop
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f4f:	83 f8 01             	cmp    $0x1,%eax
f0100f52:	75 04                	jne    f0100f58 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100f54:	b0 01                	mov    $0x1,%al
f0100f56:	eb 02                	jmp    f0100f5a <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f58:	b0 00                	mov    $0x0,%al
f0100f5a:	5d                   	pop    %ebp
f0100f5b:	c3                   	ret    

f0100f5c <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f5c:	55                   	push   %ebp
f0100f5d:	89 e5                	mov    %esp,%ebp
f0100f5f:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f64:	83 f8 02             	cmp    $0x2,%eax
f0100f67:	75 04                	jne    f0100f6d <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f69:	b0 01                	mov    $0x1,%al
f0100f6b:	eb 02                	jmp    f0100f6f <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f6d:	b0 00                	mov    $0x0,%al
f0100f6f:	5d                   	pop    %ebp
f0100f70:	c3                   	ret    

f0100f71 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f71:	55                   	push   %ebp
f0100f72:	89 e5                	mov    %esp,%ebp
f0100f74:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f79:	83 f8 03             	cmp    $0x3,%eax
f0100f7c:	75 04                	jne    f0100f82 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f7e:	b0 01                	mov    $0x1,%al
f0100f80:	eb 02                	jmp    f0100f84 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f82:	b0 00                	mov    $0x0,%al
f0100f84:	5d                   	pop    %ebp
f0100f85:	c3                   	ret    

f0100f86 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f86:	55                   	push   %ebp
f0100f87:	89 e5                	mov    %esp,%ebp
f0100f89:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f8e:	83 f8 04             	cmp    $0x4,%eax
f0100f91:	75 04                	jne    f0100f97 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f93:	b0 01                	mov    $0x1,%al
f0100f95:	eb 02                	jmp    f0100f99 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f97:	b0 00                	mov    $0x0,%al
f0100f99:	5d                   	pop    %ebp
f0100f9a:	c3                   	ret    

f0100f9b <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f9b:	55                   	push   %ebp
f0100f9c:	89 e5                	mov    %esp,%ebp
f0100f9e:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fa4:	c1 e8 0c             	shr    $0xc,%eax
f0100fa7:	89 c2                	mov    %eax,%edx
f0100fa9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0100fae:	39 c2                	cmp    %eax,%edx
f0100fb0:	72 14                	jb     f0100fc6 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100fb2:	83 ec 04             	sub    $0x4,%esp
f0100fb5:	68 38 30 13 f0       	push   $0xf0133038
f0100fba:	6a 55                	push   $0x55
f0100fbc:	68 60 30 13 f0       	push   $0xf0133060
f0100fc1:	e8 35 f2 ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0100fc6:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0100fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fcf:	c1 e8 0c             	shr    $0xc,%eax
f0100fd2:	89 c1                	mov    %eax,%ecx
f0100fd4:	89 c8                	mov    %ecx,%eax
f0100fd6:	01 c0                	add    %eax,%eax
f0100fd8:	01 c8                	add    %ecx,%eax
f0100fda:	c1 e0 03             	shl    $0x3,%eax
f0100fdd:	01 d0                	add    %edx,%eax
}
f0100fdf:	c9                   	leave  
f0100fe0:	c3                   	ret    

f0100fe1 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100fe1:	55                   	push   %ebp
f0100fe2:	89 e5                	mov    %esp,%ebp
f0100fe4:	53                   	push   %ebx
f0100fe5:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fe8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fef:	eb 3b                	jmp    f010102c <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100ff1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ff4:	89 d0                	mov    %edx,%eax
f0100ff6:	01 c0                	add    %eax,%eax
f0100ff8:	01 d0                	add    %edx,%eax
f0100ffa:	c1 e0 02             	shl    $0x2,%eax
f0100ffd:	05 44 15 19 f0       	add    $0xf0191544,%eax
f0101002:	8b 10                	mov    (%eax),%edx
f0101004:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101007:	89 c8                	mov    %ecx,%eax
f0101009:	01 c0                	add    %eax,%eax
f010100b:	01 c8                	add    %ecx,%eax
f010100d:	c1 e0 02             	shl    $0x2,%eax
f0101010:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0101015:	8b 00                	mov    (%eax),%eax
f0101017:	83 ec 04             	sub    $0x4,%esp
f010101a:	52                   	push   %edx
f010101b:	50                   	push   %eax
f010101c:	68 da 3e 13 f0       	push   $0xf0133eda
f0101021:	e8 5c fc ff ff       	call   f0100c82 <cprintf>
f0101026:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101029:	ff 45 f4             	incl   -0xc(%ebp)
f010102c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010102f:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0101034:	39 c2                	cmp    %eax,%edx
f0101036:	72 b9                	jb     f0100ff1 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101038:	83 ec 0c             	sub    $0xc,%esp
f010103b:	68 e3 3e 13 f0       	push   $0xf0133ee3
f0101040:	e8 3d fc ff ff       	call   f0100c82 <cprintf>
f0101045:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101048:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010104f:	eb 42                	jmp    f0101093 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101051:	8b 0d c0 1c 19 f0    	mov    0xf0191cc0,%ecx
f0101057:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010105a:	89 d0                	mov    %edx,%eax
f010105c:	01 c0                	add    %eax,%eax
f010105e:	01 d0                	add    %edx,%eax
f0101060:	c1 e0 02             	shl    $0x2,%eax
f0101063:	01 c8                	add    %ecx,%eax
f0101065:	8b 50 04             	mov    0x4(%eax),%edx
f0101068:	8b 1d c0 1c 19 f0    	mov    0xf0191cc0,%ebx
f010106e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101071:	89 c8                	mov    %ecx,%eax
f0101073:	01 c0                	add    %eax,%eax
f0101075:	01 c8                	add    %ecx,%eax
f0101077:	c1 e0 02             	shl    $0x2,%eax
f010107a:	01 d8                	add    %ebx,%eax
f010107c:	8b 00                	mov    (%eax),%eax
f010107e:	83 ec 04             	sub    $0x4,%esp
f0101081:	52                   	push   %edx
f0101082:	50                   	push   %eax
f0101083:	68 f8 3e 13 f0       	push   $0xf0133ef8
f0101088:	e8 f5 fb ff ff       	call   f0100c82 <cprintf>
f010108d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101090:	ff 45 f4             	incl   -0xc(%ebp)
f0101093:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f0101098:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010109b:	7c b4                	jl     f0101051 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010109d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01010a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01010a5:	c9                   	leave  
f01010a6:	c3                   	ret    

f01010a7 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01010a7:	55                   	push   %ebp
f01010a8:	89 e5                	mov    %esp,%ebp
f01010aa:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01010ad:	83 ec 0c             	sub    $0xc,%esp
f01010b0:	68 14 3f 13 f0       	push   $0xf0133f14
f01010b5:	e8 c8 fb ff ff       	call   f0100c82 <cprintf>
f01010ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01010bd:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01010c2:	83 ec 04             	sub    $0x4,%esp
f01010c5:	50                   	push   %eax
f01010c6:	68 0c 00 10 f0       	push   $0xf010000c
f01010cb:	68 30 3f 13 f0       	push   $0xf0133f30
f01010d0:	e8 ad fb ff ff       	call   f0100c82 <cprintf>
f01010d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01010d8:	b8 7d 2e 13 00       	mov    $0x132e7d,%eax
f01010dd:	83 ec 04             	sub    $0x4,%esp
f01010e0:	50                   	push   %eax
f01010e1:	68 7d 2e 13 f0       	push   $0xf0132e7d
f01010e6:	68 6c 3f 13 f0       	push   $0xf0133f6c
f01010eb:	e8 92 fb ff ff       	call   f0100c82 <cprintf>
f01010f0:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01010f3:	b8 b0 6f 65 00       	mov    $0x656fb0,%eax
f01010f8:	83 ec 04             	sub    $0x4,%esp
f01010fb:	50                   	push   %eax
f01010fc:	68 b0 6f 65 f0       	push   $0xf0656fb0
f0101101:	68 a8 3f 13 f0       	push   $0xf0133fa8
f0101106:	e8 77 fb ff ff       	call   f0100c82 <cprintf>
f010110b:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010110e:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0101113:	83 ec 04             	sub    $0x4,%esp
f0101116:	50                   	push   %eax
f0101117:	68 bc 7c 65 f0       	push   $0xf0657cbc
f010111c:	68 f0 3f 13 f0       	push   $0xf0133ff0
f0101121:	e8 5c fb ff ff       	call   f0100c82 <cprintf>
f0101126:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101129:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f010112e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101134:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101139:	29 c2                	sub    %eax,%edx
f010113b:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010113d:	85 c0                	test   %eax,%eax
f010113f:	79 05                	jns    f0101146 <command_kernel_info+0x9f>
f0101141:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101146:	c1 f8 0a             	sar    $0xa,%eax
f0101149:	83 ec 08             	sub    $0x8,%esp
f010114c:	50                   	push   %eax
f010114d:	68 2c 40 13 f0       	push   $0xf013402c
f0101152:	e8 2b fb ff ff       	call   f0100c82 <cprintf>
f0101157:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010115a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010115f:	c9                   	leave  
f0101160:	c3                   	ret    

f0101161 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101161:	55                   	push   %ebp
f0101162:	89 e5                	mov    %esp,%ebp
f0101164:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101167:	83 ec 04             	sub    $0x4,%esp
f010116a:	68 58 40 13 f0       	push   $0xf0134058
f010116f:	68 b0 00 00 00       	push   $0xb0
f0101174:	68 79 40 13 f0       	push   $0xf0134079
f0101179:	e8 7d f0 ff ff       	call   f01001fb <_panic>

f010117e <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010117e:	55                   	push   %ebp
f010117f:	89 e5                	mov    %esp,%ebp
f0101181:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	68 58 40 13 f0       	push   $0xf0134058
f010118c:	68 ba 00 00 00       	push   $0xba
f0101191:	68 79 40 13 f0       	push   $0xf0134079
f0101196:	e8 60 f0 ff ff       	call   f01001fb <_panic>

f010119b <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f010119b:	55                   	push   %ebp
f010119c:	89 e5                	mov    %esp,%ebp
f010119e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a1:	83 ec 04             	sub    $0x4,%esp
f01011a4:	68 58 40 13 f0       	push   $0xf0134058
f01011a9:	68 c3 00 00 00       	push   $0xc3
f01011ae:	68 79 40 13 f0       	push   $0xf0134079
f01011b3:	e8 43 f0 ff ff       	call   f01001fb <_panic>

f01011b8 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f01011b8:	55                   	push   %ebp
f01011b9:	89 e5                	mov    %esp,%ebp
f01011bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011be:	83 ec 04             	sub    $0x4,%esp
f01011c1:	68 58 40 13 f0       	push   $0xf0134058
f01011c6:	68 cf 00 00 00       	push   $0xcf
f01011cb:	68 79 40 13 f0       	push   $0xf0134079
f01011d0:	e8 26 f0 ff ff       	call   f01001fb <_panic>

f01011d5 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f01011d5:	55                   	push   %ebp
f01011d6:	89 e5                	mov    %esp,%ebp
f01011d8:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011db:	83 ec 04             	sub    $0x4,%esp
f01011de:	68 58 40 13 f0       	push   $0xf0134058
f01011e3:	68 d8 00 00 00       	push   $0xd8
f01011e8:	68 79 40 13 f0       	push   $0xf0134079
f01011ed:	e8 09 f0 ff ff       	call   f01001fb <_panic>

f01011f2 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01011f2:	55                   	push   %ebp
f01011f3:	89 e5                	mov    %esp,%ebp
f01011f5:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f8:	83 ec 04             	sub    $0x4,%esp
f01011fb:	68 58 40 13 f0       	push   $0xf0134058
f0101200:	68 e1 00 00 00       	push   $0xe1
f0101205:	68 79 40 13 f0       	push   $0xf0134079
f010120a:	e8 ec ef ff ff       	call   f01001fb <_panic>

f010120f <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010120f:	55                   	push   %ebp
f0101210:	89 e5                	mov    %esp,%ebp
f0101212:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101215:	83 ec 04             	sub    $0x4,%esp
f0101218:	68 58 40 13 f0       	push   $0xf0134058
f010121d:	68 ee 00 00 00       	push   $0xee
f0101222:	68 79 40 13 f0       	push   $0xf0134079
f0101227:	e8 cf ef ff ff       	call   f01001fb <_panic>

f010122c <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f010122c:	55                   	push   %ebp
f010122d:	89 e5                	mov    %esp,%ebp
f010122f:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101232:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101235:	83 c0 04             	add    $0x4,%eax
f0101238:	8b 00                	mov    (%eax),%eax
f010123a:	83 ec 04             	sub    $0x4,%esp
f010123d:	6a 10                	push   $0x10
f010123f:	6a 00                	push   $0x0
f0101241:	50                   	push   %eax
f0101242:	e8 11 fd 02 00       	call   f0130f58 <strtol>
f0101247:	83 c4 10             	add    $0x10,%esp
f010124a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f010124d:	83 ec 0c             	sub    $0xc,%esp
f0101250:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101253:	50                   	push   %eax
f0101254:	e8 c2 55 00 00       	call   f010681b <allocate_frame>
f0101259:	83 c4 10             	add    $0x10,%esp
f010125c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010125f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101262:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0101267:	6a 06                	push   $0x6
f0101269:	ff 75 f4             	pushl  -0xc(%ebp)
f010126c:	52                   	push   %edx
f010126d:	50                   	push   %eax
f010126e:	e8 f7 59 00 00       	call   f0106c6a <map_frame>
f0101273:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010127b:	c9                   	leave  
f010127c:	c3                   	ret    

f010127d <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f010127d:	55                   	push   %ebp
f010127e:	89 e5                	mov    %esp,%ebp
f0101280:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101283:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101286:	83 c0 04             	add    $0x4,%eax
f0101289:	8b 00                	mov    (%eax),%eax
f010128b:	83 ec 04             	sub    $0x4,%esp
f010128e:	6a 10                	push   $0x10
f0101290:	6a 00                	push   $0x0
f0101292:	50                   	push   %eax
f0101293:	e8 c0 fc 02 00       	call   f0130f58 <strtol>
f0101298:	83 c4 10             	add    $0x10,%esp
f010129b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010129e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01012a3:	83 ec 08             	sub    $0x8,%esp
f01012a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01012a9:	50                   	push   %eax
f01012aa:	e8 f0 5a 00 00       	call   f0106d9f <unmap_frame>
f01012af:	83 c4 10             	add    $0x10,%esp

	return 0;
f01012b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012b7:	c9                   	leave  
f01012b8:	c3                   	ret    

f01012b9 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f01012b9:	55                   	push   %ebp
f01012ba:	89 e5                	mov    %esp,%ebp
f01012bc:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012bf:	83 ec 04             	sub    $0x4,%esp
f01012c2:	68 58 40 13 f0       	push   $0xf0134058
f01012c7:	68 18 01 00 00       	push   $0x118
f01012cc:	68 79 40 13 f0       	push   $0xf0134079
f01012d1:	e8 25 ef ff ff       	call   f01001fb <_panic>

f01012d6 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f01012d6:	55                   	push   %ebp
f01012d7:	89 e5                	mov    %esp,%ebp
f01012d9:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012dc:	83 ec 04             	sub    $0x4,%esp
f01012df:	68 58 40 13 f0       	push   $0xf0134058
f01012e4:	68 23 01 00 00       	push   $0x123
f01012e9:	68 79 40 13 f0       	push   $0xf0134079
f01012ee:	e8 08 ef ff ff       	call   f01001fb <_panic>

f01012f3 <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01012f3:	55                   	push   %ebp
f01012f4:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012fb:	5d                   	pop    %ebp
f01012fc:	c3                   	ret    

f01012fd <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012fd:	55                   	push   %ebp
f01012fe:	89 e5                	mov    %esp,%ebp
f0101300:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0101303:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101307:	75 37                	jne    f0101340 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101309:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130c:	83 c0 04             	add    $0x4,%eax
f010130f:	8b 00                	mov    (%eax),%eax
f0101311:	83 ec 04             	sub    $0x4,%esp
f0101314:	6a 10                	push   $0x10
f0101316:	6a 00                	push   $0x0
f0101318:	50                   	push   %eax
f0101319:	e8 3a fc 02 00       	call   f0130f58 <strtol>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0101324:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101327:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010132a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132d:	83 c0 08             	add    $0x8,%eax
f0101330:	8b 00                	mov    (%eax),%eax
f0101332:	8a 00                	mov    (%eax),%al
f0101334:	88 c2                	mov    %al,%dl
f0101336:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101339:	88 10                	mov    %dl,(%eax)
f010133b:	e9 b9 00 00 00       	jmp    f01013f9 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0101340:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101344:	0f 85 9f 00 00 00    	jne    f01013e9 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010134a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010134d:	83 c0 04             	add    $0x4,%eax
f0101350:	8b 00                	mov    (%eax),%eax
f0101352:	83 ec 04             	sub    $0x4,%esp
f0101355:	6a 0a                	push   $0xa
f0101357:	6a 00                	push   $0x0
f0101359:	50                   	push   %eax
f010135a:	e8 f9 fb 02 00       	call   f0130f58 <strtol>
f010135f:	83 c4 10             	add    $0x10,%esp
f0101362:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101365:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010136c:	83 ec 04             	sub    $0x4,%esp
f010136f:	6a 00                	push   $0x0
f0101371:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101374:	50                   	push   %eax
f0101375:	ff 75 f4             	pushl  -0xc(%ebp)
f0101378:	e8 93 85 00 00       	call   f0109910 <envid2env>
f010137d:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101380:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101383:	83 c0 08             	add    $0x8,%eax
f0101386:	8b 00                	mov    (%eax),%eax
f0101388:	83 ec 04             	sub    $0x4,%esp
f010138b:	6a 10                	push   $0x10
f010138d:	6a 00                	push   $0x0
f010138f:	50                   	push   %eax
f0101390:	e8 c3 fb 02 00       	call   f0130f58 <strtol>
f0101395:	83 c4 10             	add    $0x10,%esp
f0101398:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010139b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	75 07                	jne    f01013a9 <command_writeusermem+0xac>
f01013a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01013a7:	eb 55                	jmp    f01013fe <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01013a9:	0f 20 d8             	mov    %cr3,%eax
f01013ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01013af:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01013b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01013b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01013b8:	8b 40 60             	mov    0x60(%eax),%eax
f01013bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01013be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01013c1:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01013c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01013c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01013ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013cd:	83 c0 0c             	add    $0xc,%eax
f01013d0:	8b 00                	mov    (%eax),%eax
f01013d2:	8a 00                	mov    (%eax),%al
f01013d4:	88 c2                	mov    %al,%dl
f01013d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01013d9:	88 10                	mov    %dl,(%eax)
f01013db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01013de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01013e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01013e4:	0f 22 d8             	mov    %eax,%cr3
f01013e7:	eb 10                	jmp    f01013f9 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01013e9:	83 ec 0c             	sub    $0xc,%esp
f01013ec:	68 90 40 13 f0       	push   $0xf0134090
f01013f1:	e8 8c f8 ff ff       	call   f0100c82 <cprintf>
f01013f6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013fe:	c9                   	leave  
f01013ff:	c3                   	ret    

f0101400 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101400:	55                   	push   %ebp
f0101401:	89 e5                	mov    %esp,%ebp
f0101403:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101406:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101409:	83 c0 04             	add    $0x4,%eax
f010140c:	8b 00                	mov    (%eax),%eax
f010140e:	83 ec 04             	sub    $0x4,%esp
f0101411:	6a 10                	push   $0x10
f0101413:	6a 00                	push   $0x0
f0101415:	50                   	push   %eax
f0101416:	e8 3d fb 02 00       	call   f0130f58 <strtol>
f010141b:	83 c4 10             	add    $0x10,%esp
f010141e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101423:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101426:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101429:	83 c0 08             	add    $0x8,%eax
f010142c:	8b 00                	mov    (%eax),%eax
f010142e:	83 ec 04             	sub    $0x4,%esp
f0101431:	6a 0a                	push   $0xa
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 1d fb 02 00       	call   f0130f58 <strtol>
f010143b:	83 c4 10             	add    $0x10,%esp
f010143e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101441:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101448:	8b 45 0c             	mov    0xc(%ebp),%eax
f010144b:	83 c0 0c             	add    $0xc,%eax
f010144e:	8b 00                	mov    (%eax),%eax
f0101450:	83 ec 0c             	sub    $0xc,%esp
f0101453:	50                   	push   %eax
f0101454:	e8 9f f7 02 00       	call   f0130bf8 <strlen>
f0101459:	83 c4 10             	add    $0x10,%esp
f010145c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010145f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101466:	eb 30                	jmp    f0101498 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101468:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010146f:	eb 1c                	jmp    f010148d <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101474:	83 c0 0c             	add    $0xc,%eax
f0101477:	8b 10                	mov    (%eax),%edx
f0101479:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010147c:	01 d0                	add    %edx,%eax
f010147e:	8a 00                	mov    (%eax),%al
f0101480:	88 c2                	mov    %al,%dl
f0101482:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101485:	88 10                	mov    %dl,(%eax)
			address++;
f0101487:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f010148a:	ff 45 ec             	incl   -0x14(%ebp)
f010148d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101490:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101493:	7c dc                	jl     f0101471 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101495:	ff 45 f0             	incl   -0x10(%ebp)
f0101498:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010149b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010149e:	7c c8                	jl     f0101468 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f01014a0:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01014a5:	c9                   	leave  
f01014a6:	c3                   	ret    

f01014a7 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01014a7:	55                   	push   %ebp
f01014a8:	89 e5                	mov    %esp,%ebp
f01014aa:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f01014ad:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01014b1:	75 42                	jne    f01014f5 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01014b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b6:	83 c0 04             	add    $0x4,%eax
f01014b9:	8b 00                	mov    (%eax),%eax
f01014bb:	83 ec 04             	sub    $0x4,%esp
f01014be:	6a 10                	push   $0x10
f01014c0:	6a 00                	push   $0x0
f01014c2:	50                   	push   %eax
f01014c3:	e8 90 fa 02 00       	call   f0130f58 <strtol>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01014ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014d1:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01014d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014d7:	8a 00                	mov    (%eax),%al
f01014d9:	0f b6 c0             	movzbl %al,%eax
f01014dc:	83 ec 04             	sub    $0x4,%esp
f01014df:	50                   	push   %eax
f01014e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01014e3:	68 ba 40 13 f0       	push   $0xf01340ba
f01014e8:	e8 95 f7 ff ff       	call   f0100c82 <cprintf>
f01014ed:	83 c4 10             	add    $0x10,%esp
f01014f0:	e9 c4 00 00 00       	jmp    f01015b9 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014f5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014f9:	0f 85 aa 00 00 00    	jne    f01015a9 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101502:	83 c0 04             	add    $0x4,%eax
f0101505:	8b 00                	mov    (%eax),%eax
f0101507:	83 ec 04             	sub    $0x4,%esp
f010150a:	6a 0a                	push   $0xa
f010150c:	6a 00                	push   $0x0
f010150e:	50                   	push   %eax
f010150f:	e8 44 fa 02 00       	call   f0130f58 <strtol>
f0101514:	83 c4 10             	add    $0x10,%esp
f0101517:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010151a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101521:	83 ec 04             	sub    $0x4,%esp
f0101524:	6a 00                	push   $0x0
f0101526:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101529:	50                   	push   %eax
f010152a:	ff 75 f4             	pushl  -0xc(%ebp)
f010152d:	e8 de 83 00 00       	call   f0109910 <envid2env>
f0101532:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101538:	83 c0 08             	add    $0x8,%eax
f010153b:	8b 00                	mov    (%eax),%eax
f010153d:	83 ec 04             	sub    $0x4,%esp
f0101540:	6a 10                	push   $0x10
f0101542:	6a 00                	push   $0x0
f0101544:	50                   	push   %eax
f0101545:	e8 0e fa 02 00       	call   f0130f58 <strtol>
f010154a:	83 c4 10             	add    $0x10,%esp
f010154d:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101550:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101553:	85 c0                	test   %eax,%eax
f0101555:	75 07                	jne    f010155e <command_readusermem+0xb7>
f0101557:	b8 00 00 00 00       	mov    $0x0,%eax
f010155c:	eb 60                	jmp    f01015be <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010155e:	0f 20 d8             	mov    %cr3,%eax
f0101561:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101564:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101567:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f010156a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010156d:	8b 40 60             	mov    0x60(%eax),%eax
f0101570:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101573:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101576:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010157c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010157f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101582:	8a 00                	mov    (%eax),%al
f0101584:	0f b6 c0             	movzbl %al,%eax
f0101587:	83 ec 04             	sub    $0x4,%esp
f010158a:	50                   	push   %eax
f010158b:	ff 75 f0             	pushl  -0x10(%ebp)
f010158e:	68 ba 40 13 f0       	push   $0xf01340ba
f0101593:	e8 ea f6 ff ff       	call   f0100c82 <cprintf>
f0101598:	83 c4 10             	add    $0x10,%esp
f010159b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010159e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01015a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a4:	0f 22 d8             	mov    %eax,%cr3
f01015a7:	eb 10                	jmp    f01015b9 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f01015a9:	83 ec 0c             	sub    $0xc,%esp
f01015ac:	68 d4 40 13 f0       	push   $0xf01340d4
f01015b1:	e8 cc f6 ff ff       	call   f0100c82 <cprintf>
f01015b6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01015b9:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01015be:	c9                   	leave  
f01015bf:	c3                   	ret    

f01015c0 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01015c0:	55                   	push   %ebp
f01015c1:	89 e5                	mov    %esp,%ebp
f01015c3:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c9:	83 c0 04             	add    $0x4,%eax
f01015cc:	8b 00                	mov    (%eax),%eax
f01015ce:	83 ec 04             	sub    $0x4,%esp
f01015d1:	6a 10                	push   $0x10
f01015d3:	6a 00                	push   $0x0
f01015d5:	50                   	push   %eax
f01015d6:	e8 7d f9 02 00       	call   f0130f58 <strtol>
f01015db:	83 c4 10             	add    $0x10,%esp
f01015de:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01015e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01015e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015e9:	83 c0 08             	add    $0x8,%eax
f01015ec:	8b 00                	mov    (%eax),%eax
f01015ee:	83 ec 04             	sub    $0x4,%esp
f01015f1:	6a 0a                	push   $0xa
f01015f3:	6a 00                	push   $0x0
f01015f5:	50                   	push   %eax
f01015f6:	e8 5d f9 02 00       	call   f0130f58 <strtol>
f01015fb:	83 c4 10             	add    $0x10,%esp
f01015fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101601:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101608:	eb 22                	jmp    f010162c <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f010160a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010160d:	8d 50 01             	lea    0x1(%eax),%edx
f0101610:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101613:	8a 00                	mov    (%eax),%al
f0101615:	0f b6 c0             	movzbl %al,%eax
f0101618:	83 ec 08             	sub    $0x8,%esp
f010161b:	50                   	push   %eax
f010161c:	68 fe 40 13 f0       	push   $0xf01340fe
f0101621:	e8 5c f6 ff ff       	call   f0100c82 <cprintf>
f0101626:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101629:	ff 45 f0             	incl   -0x10(%ebp)
f010162c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010162f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101632:	7c d6                	jl     f010160a <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101634:	83 ec 0c             	sub    $0xc,%esp
f0101637:	68 01 41 13 f0       	push   $0xf0134101
f010163c:	e8 41 f6 ff ff       	call   f0100c82 <cprintf>
f0101641:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101644:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101649:	c9                   	leave  
f010164a:	c3                   	ret    

f010164b <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f010164b:	55                   	push   %ebp
f010164c:	89 e5                	mov    %esp,%ebp
f010164e:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101654:	83 c0 04             	add    $0x4,%eax
f0101657:	8b 00                	mov    (%eax),%eax
f0101659:	83 ec 04             	sub    $0x4,%esp
f010165c:	6a 0a                	push   $0xa
f010165e:	6a 00                	push   $0x0
f0101660:	50                   	push   %eax
f0101661:	e8 f2 f8 02 00       	call   f0130f58 <strtol>
f0101666:	83 c4 10             	add    $0x10,%esp
f0101669:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f010166c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101673:	83 ec 04             	sub    $0x4,%esp
f0101676:	6a 00                	push   $0x0
f0101678:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010167b:	50                   	push   %eax
f010167c:	ff 75 ec             	pushl  -0x14(%ebp)
f010167f:	e8 8c 82 00 00       	call   f0109910 <envid2env>
f0101684:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101687:	8b 45 0c             	mov    0xc(%ebp),%eax
f010168a:	83 c0 08             	add    $0x8,%eax
f010168d:	8b 00                	mov    (%eax),%eax
f010168f:	83 ec 04             	sub    $0x4,%esp
f0101692:	6a 10                	push   $0x10
f0101694:	6a 00                	push   $0x0
f0101696:	50                   	push   %eax
f0101697:	e8 bc f8 02 00       	call   f0130f58 <strtol>
f010169c:	83 c4 10             	add    $0x10,%esp
f010169f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01016a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a5:	83 c0 0c             	add    $0xc,%eax
f01016a8:	8b 00                	mov    (%eax),%eax
f01016aa:	83 ec 04             	sub    $0x4,%esp
f01016ad:	6a 0a                	push   $0xa
f01016af:	6a 00                	push   $0x0
f01016b1:	50                   	push   %eax
f01016b2:	e8 a1 f8 02 00       	call   f0130f58 <strtol>
f01016b7:	83 c4 10             	add    $0x10,%esp
f01016ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01016bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01016c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01016c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016c6:	85 c0                	test   %eax,%eax
f01016c8:	75 07                	jne    f01016d1 <command_readuserblock+0x86>
f01016ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01016cf:	eb 65                	jmp    f0101736 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01016d1:	0f 20 d8             	mov    %cr3,%eax
f01016d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01016d7:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01016da:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01016dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016e0:	8b 40 60             	mov    0x60(%eax),%eax
f01016e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01016e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016e9:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01016ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01016f3:	eb 28                	jmp    f010171d <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016f8:	8a 00                	mov    (%eax),%al
f01016fa:	0f b6 d0             	movzbl %al,%edx
f01016fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101700:	8a 00                	mov    (%eax),%al
f0101702:	0f b6 c0             	movzbl %al,%eax
f0101705:	52                   	push   %edx
f0101706:	50                   	push   %eax
f0101707:	ff 75 f4             	pushl  -0xc(%ebp)
f010170a:	68 03 41 13 f0       	push   $0xf0134103
f010170f:	e8 6e f5 ff ff       	call   f0100c82 <cprintf>
f0101714:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101717:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010171a:	ff 45 f0             	incl   -0x10(%ebp)
f010171d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101720:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101723:	7c d0                	jl     f01016f5 <command_readuserblock+0xaa>
f0101725:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101728:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010172b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010172e:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101731:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101736:	c9                   	leave  
f0101737:	c3                   	ret    

f0101738 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101738:	55                   	push   %ebp
f0101739:	89 e5                	mov    %esp,%ebp
f010173b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010173e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101741:	83 c0 04             	add    $0x4,%eax
f0101744:	8b 00                	mov    (%eax),%eax
f0101746:	83 ec 04             	sub    $0x4,%esp
f0101749:	6a 0a                	push   $0xa
f010174b:	6a 00                	push   $0x0
f010174d:	50                   	push   %eax
f010174e:	e8 05 f8 02 00       	call   f0130f58 <strtol>
f0101753:	83 c4 10             	add    $0x10,%esp
f0101756:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101759:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101760:	83 ec 04             	sub    $0x4,%esp
f0101763:	6a 00                	push   $0x0
f0101765:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101768:	50                   	push   %eax
f0101769:	ff 75 f4             	pushl  -0xc(%ebp)
f010176c:	e8 9f 81 00 00       	call   f0109910 <envid2env>
f0101771:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101774:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101777:	85 c0                	test   %eax,%eax
f0101779:	75 0a                	jne    f0101785 <command_remove_table+0x4d>
f010177b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101780:	e9 c7 00 00 00       	jmp    f010184c <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101785:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101788:	83 c0 08             	add    $0x8,%eax
f010178b:	8b 00                	mov    (%eax),%eax
f010178d:	83 ec 04             	sub    $0x4,%esp
f0101790:	6a 10                	push   $0x10
f0101792:	6a 00                	push   $0x0
f0101794:	50                   	push   %eax
f0101795:	e8 be f7 02 00       	call   f0130f58 <strtol>
f010179a:	83 c4 10             	add    $0x10,%esp
f010179d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01017a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01017a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01017af:	c1 ea 16             	shr    $0x16,%edx
f01017b2:	c1 e2 02             	shl    $0x2,%edx
f01017b5:	01 d0                	add    %edx,%eax
f01017b7:	8b 00                	mov    (%eax),%eax
f01017b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01017be:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f01017c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01017c4:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01017c9:	77 1c                	ja     f01017e7 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f01017cb:	83 ec 0c             	sub    $0xc,%esp
f01017ce:	ff 75 e8             	pushl  -0x18(%ebp)
f01017d1:	e8 11 62 00 00       	call   f01079e7 <kheap_virtual_address>
f01017d6:	83 c4 10             	add    $0x10,%esp
f01017d9:	83 ec 0c             	sub    $0xc,%esp
f01017dc:	50                   	push   %eax
f01017dd:	e8 de 60 00 00       	call   f01078c0 <kfree>
f01017e2:	83 c4 10             	add    $0x10,%esp
f01017e5:	eb 28                	jmp    f010180f <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01017e7:	83 ec 0c             	sub    $0xc,%esp
f01017ea:	ff 75 e8             	pushl  -0x18(%ebp)
f01017ed:	e8 a9 f7 ff ff       	call   f0100f9b <to_frame_info>
f01017f2:	83 c4 10             	add    $0x10,%esp
f01017f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01017f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01017fb:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101801:	83 ec 0c             	sub    $0xc,%esp
f0101804:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101807:	e8 24 51 00 00       	call   f0106930 <free_frame>
f010180c:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010180f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101812:	c1 e8 16             	shr    $0x16,%eax
f0101815:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101818:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010181b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010181e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101821:	c1 e2 02             	shl    $0x2,%edx
f0101824:	01 c2                	add    %eax,%edx
f0101826:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101829:	8b 40 5c             	mov    0x5c(%eax),%eax
f010182c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010182f:	c1 e1 02             	shl    $0x2,%ecx
f0101832:	01 c8                	add    %ecx,%eax
f0101834:	8b 00                	mov    (%eax),%eax
f0101836:	83 e0 fe             	and    $0xfffffffe,%eax
f0101839:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010183b:	0f 20 d8             	mov    %cr3,%eax
f010183e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101841:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101844:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101847:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010184c:	c9                   	leave  
f010184d:	c3                   	ret    

f010184e <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f010184e:	55                   	push   %ebp
f010184f:	89 e5                	mov    %esp,%ebp
f0101851:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0101854:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101858:	7e 06                	jle    f0101860 <command_allocuserpage+0x12>
f010185a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010185e:	7e 1a                	jle    f010187a <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0101860:	83 ec 0c             	sub    $0xc,%esp
f0101863:	68 14 41 13 f0       	push   $0xf0134114
f0101868:	e8 15 f4 ff ff       	call   f0100c82 <cprintf>
f010186d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101870:	b8 00 00 00 00       	mov    $0x0,%eax
f0101875:	e9 46 01 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f010187a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010187d:	83 c0 04             	add    $0x4,%eax
f0101880:	8b 00                	mov    (%eax),%eax
f0101882:	83 ec 04             	sub    $0x4,%esp
f0101885:	6a 0a                	push   $0xa
f0101887:	6a 00                	push   $0x0
f0101889:	50                   	push   %eax
f010188a:	e8 c9 f6 02 00       	call   f0130f58 <strtol>
f010188f:	83 c4 10             	add    $0x10,%esp
f0101892:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101895:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f010189c:	83 ec 04             	sub    $0x4,%esp
f010189f:	6a 00                	push   $0x0
f01018a1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01018a4:	50                   	push   %eax
f01018a5:	ff 75 f0             	pushl  -0x10(%ebp)
f01018a8:	e8 63 80 00 00       	call   f0109910 <envid2env>
f01018ad:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01018b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018b3:	85 c0                	test   %eax,%eax
f01018b5:	75 0a                	jne    f01018c1 <command_allocuserpage+0x73>
f01018b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01018bc:	e9 ff 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f01018c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c4:	83 c0 08             	add    $0x8,%eax
f01018c7:	8b 00                	mov    (%eax),%eax
f01018c9:	83 ec 04             	sub    $0x4,%esp
f01018cc:	6a 10                	push   $0x10
f01018ce:	6a 00                	push   $0x0
f01018d0:	50                   	push   %eax
f01018d1:	e8 82 f6 02 00       	call   f0130f58 <strtol>
f01018d6:	83 c4 10             	add    $0x10,%esp
f01018d9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f01018dc:	83 ec 0c             	sub    $0xc,%esp
f01018df:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01018e2:	50                   	push   %eax
f01018e3:	e8 33 4f 00 00       	call   f010681b <allocate_frame>
f01018e8:	83 c4 10             	add    $0x10,%esp
f01018eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f01018ee:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f01018f2:	75 1a                	jne    f010190e <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f01018f4:	83 ec 0c             	sub    $0xc,%esp
f01018f7:	68 3e 41 13 f0       	push   $0xf013413e
f01018fc:	e8 81 f3 ff ff       	call   f0100c82 <cprintf>
f0101901:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101904:	b8 00 00 00 00       	mov    $0x0,%eax
f0101909:	e9 b2 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010190e:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101912:	75 1d                	jne    f0101931 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101914:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010191a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010191d:	6a 06                	push   $0x6
f010191f:	ff 75 ec             	pushl  -0x14(%ebp)
f0101922:	52                   	push   %edx
f0101923:	50                   	push   %eax
f0101924:	e8 41 53 00 00       	call   f0106c6a <map_frame>
f0101929:	83 c4 10             	add    $0x10,%esp
f010192c:	e9 8a 00 00 00       	jmp    f01019bb <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0101931:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101935:	0f 85 80 00 00 00    	jne    f01019bb <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f010193b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010193e:	83 c0 0c             	add    $0xc,%eax
f0101941:	8b 00                	mov    (%eax),%eax
f0101943:	8a 00                	mov    (%eax),%al
f0101945:	3c 72                	cmp    $0x72,%al
f0101947:	74 0e                	je     f0101957 <command_allocuserpage+0x109>
f0101949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194c:	83 c0 0c             	add    $0xc,%eax
f010194f:	8b 00                	mov    (%eax),%eax
f0101951:	8a 00                	mov    (%eax),%al
f0101953:	3c 52                	cmp    $0x52,%al
f0101955:	75 09                	jne    f0101960 <command_allocuserpage+0x112>
			rw = 0 ;
f0101957:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010195e:	eb 3c                	jmp    f010199c <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0101960:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101963:	83 c0 0c             	add    $0xc,%eax
f0101966:	8b 00                	mov    (%eax),%eax
f0101968:	8a 00                	mov    (%eax),%al
f010196a:	3c 77                	cmp    $0x77,%al
f010196c:	74 0e                	je     f010197c <command_allocuserpage+0x12e>
f010196e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101971:	83 c0 0c             	add    $0xc,%eax
f0101974:	8b 00                	mov    (%eax),%eax
f0101976:	8a 00                	mov    (%eax),%al
f0101978:	3c 57                	cmp    $0x57,%al
f010197a:	75 09                	jne    f0101985 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f010197c:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101983:	eb 17                	jmp    f010199c <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101985:	83 ec 0c             	sub    $0xc,%esp
f0101988:	68 58 41 13 f0       	push   $0xf0134158
f010198d:	e8 f0 f2 ff ff       	call   f0100c82 <cprintf>
f0101992:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101995:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f010199c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010199f:	83 c8 04             	or     $0x4,%eax
f01019a2:	89 c1                	mov    %eax,%ecx
f01019a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019ad:	51                   	push   %ecx
f01019ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01019b1:	52                   	push   %edx
f01019b2:	50                   	push   %eax
f01019b3:	e8 b2 52 00 00       	call   f0106c6a <map_frame>
f01019b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01019bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019c0:	c9                   	leave  
f01019c1:	c3                   	ret    

f01019c2 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f01019c2:	55                   	push   %ebp
f01019c3:	89 e5                	mov    %esp,%ebp
f01019c5:	56                   	push   %esi
f01019c6:	53                   	push   %ebx
f01019c7:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f01019ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 2e 55 00 00       	call   f0106f04 <calculate_available_frames>
f01019d6:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01019df:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f01019e2:	8b 75 ec             	mov    -0x14(%ebp),%esi
f01019e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01019e8:	01 de                	add    %ebx,%esi
f01019ea:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019ed:	01 f3                	add    %esi,%ebx
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	51                   	push   %ecx
f01019f3:	52                   	push   %edx
f01019f4:	50                   	push   %eax
f01019f5:	53                   	push   %ebx
f01019f6:	68 9c 41 13 f0       	push   $0xf013419c
f01019fb:	e8 82 f2 ff ff       	call   f0100c82 <cprintf>
f0101a00:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a03:	a1 74 7b 65 f0       	mov    0xf0657b74,%eax
f0101a08:	83 ec 08             	sub    $0x8,%esp
f0101a0b:	50                   	push   %eax
f0101a0c:	68 f4 41 13 f0       	push   $0xf01341f4
f0101a11:	e8 6c f2 ff ff       	call   f0100c82 <cprintf>
f0101a16:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a1e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a21:	5b                   	pop    %ebx
f0101a22:	5e                   	pop    %esi
f0101a23:	5d                   	pop    %ebp
f0101a24:	c3                   	ret    

f0101a25 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a25:	55                   	push   %ebp
f0101a26:	89 e5                	mov    %esp,%ebp
f0101a28:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a2b:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101a32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101a39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0101a43:	83 f8 04             	cmp    $0x4,%eax
f0101a46:	0f 84 94 00 00 00    	je     f0101ae0 <CreateEnv+0xbb>
f0101a4c:	83 f8 05             	cmp    $0x5,%eax
f0101a4f:	74 0e                	je     f0101a5f <CreateEnv+0x3a>
f0101a51:	83 f8 03             	cmp    $0x3,%eax
f0101a54:	0f 84 ec 00 00 00    	je     f0101b46 <CreateEnv+0x121>
f0101a5a:	e9 2f 01 00 00       	jmp    f0101b8e <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a5f:	83 ec 0c             	sub    $0xc,%esp
f0101a62:	6a 02                	push   $0x2
f0101a64:	e8 06 c0 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0101a69:	83 c4 10             	add    $0x10,%esp
f0101a6c:	85 c0                	test   %eax,%eax
f0101a6e:	75 1a                	jne    f0101a8a <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101a70:	83 ec 0c             	sub    $0xc,%esp
f0101a73:	68 30 42 13 f0       	push   $0xf0134230
f0101a78:	e8 05 f2 ff ff       	call   f0100c82 <cprintf>
f0101a7d:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	e9 d5 01 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a8d:	83 c0 10             	add    $0x10,%eax
f0101a90:	8b 00                	mov    (%eax),%eax
f0101a92:	83 ec 04             	sub    $0x4,%esp
f0101a95:	6a 0a                	push   $0xa
f0101a97:	6a 00                	push   $0x0
f0101a99:	50                   	push   %eax
f0101a9a:	e8 b9 f4 02 00       	call   f0130f58 <strtol>
f0101a9f:	83 c4 10             	add    $0x10,%esp
f0101aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aa8:	83 c0 0c             	add    $0xc,%eax
f0101aab:	8b 00                	mov    (%eax),%eax
f0101aad:	83 ec 04             	sub    $0x4,%esp
f0101ab0:	6a 0a                	push   $0xa
f0101ab2:	6a 00                	push   $0x0
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 9e f4 02 00       	call   f0130f58 <strtol>
f0101aba:	83 c4 10             	add    $0x10,%esp
f0101abd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ac3:	83 c0 08             	add    $0x8,%eax
f0101ac6:	8b 00                	mov    (%eax),%eax
f0101ac8:	83 ec 04             	sub    $0x4,%esp
f0101acb:	6a 0a                	push   $0xa
f0101acd:	6a 00                	push   $0x0
f0101acf:	50                   	push   %eax
f0101ad0:	e8 83 f4 02 00       	call   f0130f58 <strtol>
f0101ad5:	83 c4 10             	add    $0x10,%esp
f0101ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101adb:	e9 c8 00 00 00       	jmp    f0101ba8 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101ae0:	83 ec 0c             	sub    $0xc,%esp
f0101ae3:	6a 02                	push   $0x2
f0101ae5:	e8 85 bf 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	85 c0                	test   %eax,%eax
f0101aef:	75 1d                	jne    f0101b0e <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101af1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101af4:	83 c0 0c             	add    $0xc,%eax
f0101af7:	8b 00                	mov    (%eax),%eax
f0101af9:	83 ec 04             	sub    $0x4,%esp
f0101afc:	6a 0a                	push   $0xa
f0101afe:	6a 00                	push   $0x0
f0101b00:	50                   	push   %eax
f0101b01:	e8 52 f4 02 00       	call   f0130f58 <strtol>
f0101b06:	83 c4 10             	add    $0x10,%esp
f0101b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b0c:	eb 1b                	jmp    f0101b29 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b11:	83 c0 0c             	add    $0xc,%eax
f0101b14:	8b 00                	mov    (%eax),%eax
f0101b16:	83 ec 04             	sub    $0x4,%esp
f0101b19:	6a 0a                	push   $0xa
f0101b1b:	6a 00                	push   $0x0
f0101b1d:	50                   	push   %eax
f0101b1e:	e8 35 f4 02 00       	call   f0130f58 <strtol>
f0101b23:	83 c4 10             	add    $0x10,%esp
f0101b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b2c:	83 c0 08             	add    $0x8,%eax
f0101b2f:	8b 00                	mov    (%eax),%eax
f0101b31:	83 ec 04             	sub    $0x4,%esp
f0101b34:	6a 0a                	push   $0xa
f0101b36:	6a 00                	push   $0x0
f0101b38:	50                   	push   %eax
f0101b39:	e8 1a f4 02 00       	call   f0130f58 <strtol>
f0101b3e:	83 c4 10             	add    $0x10,%esp
f0101b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b44:	eb 62                	jmp    f0101ba8 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b46:	83 ec 0c             	sub    $0xc,%esp
f0101b49:	6a 02                	push   $0x2
f0101b4b:	e8 1f bf 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	85 c0                	test   %eax,%eax
f0101b55:	74 1a                	je     f0101b71 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101b57:	83 ec 0c             	sub    $0xc,%esp
f0101b5a:	68 f0 42 13 f0       	push   $0xf01342f0
f0101b5f:	e8 1e f1 ff ff       	call   f0100c82 <cprintf>
f0101b64:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b6c:	e9 ee 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b74:	83 c0 08             	add    $0x8,%eax
f0101b77:	8b 00                	mov    (%eax),%eax
f0101b79:	83 ec 04             	sub    $0x4,%esp
f0101b7c:	6a 0a                	push   $0xa
f0101b7e:	6a 00                	push   $0x0
f0101b80:	50                   	push   %eax
f0101b81:	e8 d2 f3 02 00       	call   f0130f58 <strtol>
f0101b86:	83 c4 10             	add    $0x10,%esp
f0101b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b8c:	eb 1a                	jmp    f0101ba8 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b8e:	83 ec 0c             	sub    $0xc,%esp
f0101b91:	68 80 43 13 f0       	push   $0xf0134380
f0101b96:	e8 e7 f0 ff ff       	call   f0100c82 <cprintf>
f0101b9b:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101b9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ba3:	e9 b7 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101ba8:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101baf:	76 1f                	jbe    f0101bd0 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101bb1:	83 ec 08             	sub    $0x8,%esp
f0101bb4:	68 88 13 00 00       	push   $0x1388
f0101bb9:	68 18 44 13 f0       	push   $0xf0134418
f0101bbe:	e8 bf f0 ff ff       	call   f0100c82 <cprintf>
f0101bc3:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101bc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bcb:	e9 8f 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd0:	83 ec 0c             	sub    $0xc,%esp
f0101bd3:	6a 02                	push   $0x2
f0101bd5:	e8 95 be 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0101bda:	83 c4 10             	add    $0x10,%esp
f0101bdd:	85 c0                	test   %eax,%eax
f0101bdf:	74 20                	je     f0101c01 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101be4:	48                   	dec    %eax
f0101be5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101be8:	73 17                	jae    f0101c01 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101bea:	83 ec 0c             	sub    $0xc,%esp
f0101bed:	68 58 44 13 f0       	push   $0xf0134458
f0101bf2:	e8 8b f0 ff ff       	call   f0100c82 <cprintf>
f0101bf7:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bff:	eb 5e                	jmp    f0101c5f <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c01:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c05:	76 19                	jbe    f0101c20 <CreateEnv+0x1fb>
f0101c07:	68 b0 44 13 f0       	push   $0xf01344b0
f0101c0c:	68 f5 44 13 f0       	push   $0xf01344f5
f0101c11:	68 5a 02 00 00       	push   $0x25a
f0101c16:	68 79 40 13 f0       	push   $0xf0134079
f0101c1b:	e8 db e5 ff ff       	call   f01001fb <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c20:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c24:	76 19                	jbe    f0101c3f <CreateEnv+0x21a>
f0101c26:	68 b0 44 13 f0       	push   $0xf01344b0
f0101c2b:	68 f5 44 13 f0       	push   $0xf01344f5
f0101c30:	68 71 02 00 00       	push   $0x271
f0101c35:	68 79 40 13 f0       	push   $0xf0134079
f0101c3a:	e8 bc e5 ff ff       	call   f01001fb <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c42:	83 c0 04             	add    $0x4,%eax
f0101c45:	8b 00                	mov    (%eax),%eax
f0101c47:	ff 75 ec             	pushl  -0x14(%ebp)
f0101c4a:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c50:	50                   	push   %eax
f0101c51:	e8 13 70 00 00       	call   f0108c69 <env_create>
f0101c56:	83 c4 10             	add    $0x10,%esp
f0101c59:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101c5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101c5f:	c9                   	leave  
f0101c60:	c3                   	ret    

f0101c61 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101c61:	55                   	push   %ebp
f0101c62:	89 e5                	mov    %esp,%ebp
f0101c64:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101c67:	83 ec 08             	sub    $0x8,%esp
f0101c6a:	ff 75 0c             	pushl  0xc(%ebp)
f0101c6d:	ff 75 08             	pushl  0x8(%ebp)
f0101c70:	e8 b0 fd ff ff       	call   f0101a25 <CreateEnv>
f0101c75:	83 c4 10             	add    $0x10,%esp
f0101c78:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101c7f:	75 07                	jne    f0101c88 <command_run_program+0x27>
f0101c81:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c86:	eb 46                	jmp    f0101cce <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c8b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101c8e:	83 ec 08             	sub    $0x8,%esp
f0101c91:	50                   	push   %eax
f0101c92:	68 0a 45 13 f0       	push   $0xf013450a
f0101c97:	e8 e6 ef ff ff       	call   f0100c82 <cprintf>
f0101c9c:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101c9f:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101ca6:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101ca9:	83 ec 0c             	sub    $0xc,%esp
f0101cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0101caf:	e8 79 34 00 00       	call   f010512d <sched_new_env>
f0101cb4:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101cb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cba:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101cbd:	83 ec 0c             	sub    $0xc,%esp
f0101cc0:	50                   	push   %eax
f0101cc1:	e8 84 34 00 00       	call   f010514a <sched_run_env>
f0101cc6:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101cc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cce:	c9                   	leave  
f0101ccf:	c3                   	ret    

f0101cd0 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101cd0:	55                   	push   %ebp
f0101cd1:	89 e5                	mov    %esp,%ebp
f0101cd3:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd9:	83 c0 04             	add    $0x4,%eax
f0101cdc:	8b 00                	mov    (%eax),%eax
f0101cde:	83 ec 04             	sub    $0x4,%esp
f0101ce1:	6a 0a                	push   $0xa
f0101ce3:	6a 00                	push   $0x0
f0101ce5:	50                   	push   %eax
f0101ce6:	e8 6d f2 02 00       	call   f0130f58 <strtol>
f0101ceb:	83 c4 10             	add    $0x10,%esp
f0101cee:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cf4:	83 ec 0c             	sub    $0xc,%esp
f0101cf7:	50                   	push   %eax
f0101cf8:	e8 6b 38 00 00       	call   f0105568 <sched_kill_env>
f0101cfd:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d05:	c9                   	leave  
f0101d06:	c3                   	ret    

f0101d07 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d07:	55                   	push   %ebp
f0101d08:	89 e5                	mov    %esp,%ebp
f0101d0a:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d0d:	83 ec 08             	sub    $0x8,%esp
f0101d10:	ff 75 0c             	pushl  0xc(%ebp)
f0101d13:	ff 75 08             	pushl  0x8(%ebp)
f0101d16:	e8 0a fd ff ff       	call   f0101a25 <CreateEnv>
f0101d1b:	83 c4 10             	add    $0x10,%esp
f0101d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d25:	75 07                	jne    f0101d2e <commnad_load_env+0x27>
		return 0 ;
f0101d27:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d2c:	eb 2a                	jmp    f0101d58 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101d2e:	83 ec 0c             	sub    $0xc,%esp
f0101d31:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d34:	e8 f4 33 00 00       	call   f010512d <sched_new_env>
f0101d39:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d42:	83 ec 08             	sub    $0x8,%esp
f0101d45:	50                   	push   %eax
f0101d46:	68 0a 45 13 f0       	push   $0xf013450a
f0101d4b:	e8 32 ef ff ff       	call   f0100c82 <cprintf>
f0101d50:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d58:	c9                   	leave  
f0101d59:	c3                   	ret    

f0101d5a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101d5a:	55                   	push   %ebp
f0101d5b:	89 e5                	mov    %esp,%ebp
f0101d5d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101d60:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101d67:	00 00 00 
	sched_run_all();
f0101d6a:	e8 06 30 00 00       	call   f0104d75 <sched_run_all>

	return 0 ;
f0101d6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d74:	c9                   	leave  
f0101d75:	c3                   	ret    

f0101d76 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101d76:	55                   	push   %ebp
f0101d77:	89 e5                	mov    %esp,%ebp
f0101d79:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101d7c:	e8 ea 2d 00 00       	call   f0104b6b <sched_print_all>

	return 0 ;
f0101d81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d86:	c9                   	leave  
f0101d87:	c3                   	ret    

f0101d88 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101d88:	55                   	push   %ebp
f0101d89:	89 e5                	mov    %esp,%ebp
f0101d8b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101d8e:	e8 55 30 00 00       	call   f0104de8 <sched_kill_all>

	return 0 ;
f0101d93:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d98:	c9                   	leave  
f0101d99:	c3                   	ret    

f0101d9a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101d9a:	55                   	push   %ebp
f0101d9b:	89 e5                	mov    %esp,%ebp
f0101d9d:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101da0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101da4:	7f 1a                	jg     f0101dc0 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101da6:	83 ec 0c             	sub    $0xc,%esp
f0101da9:	68 20 45 13 f0       	push   $0xf0134520
f0101dae:	e8 cf ee ff ff       	call   f0100c82 <cprintf>
f0101db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dbb:	e9 83 00 00 00       	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101dc3:	83 c0 04             	add    $0x4,%eax
f0101dc6:	8b 00                	mov    (%eax),%eax
f0101dc8:	83 ec 04             	sub    $0x4,%esp
f0101dcb:	6a 0a                	push   $0xa
f0101dcd:	6a 00                	push   $0x0
f0101dcf:	50                   	push   %eax
f0101dd0:	e8 83 f1 02 00       	call   f0130f58 <strtol>
f0101dd5:	83 c4 10             	add    $0x10,%esp
f0101dd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101ddb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101ddf:	75 20                	jne    f0101e01 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101de1:	83 ec 0c             	sub    $0xc,%esp
f0101de4:	ff 75 f4             	pushl  -0xc(%ebp)
f0101de7:	e8 f8 bb 00 00       	call   f010d9e4 <setPageReplacmentAlgorithmLRU>
f0101dec:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101def:	83 ec 0c             	sub    $0xc,%esp
f0101df2:	68 80 45 13 f0       	push   $0xf0134580
f0101df7:	e8 86 ee ff ff       	call   f0100c82 <cprintf>
f0101dfc:	83 c4 10             	add    $0x10,%esp
f0101dff:	eb 3d                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e01:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e05:	75 20                	jne    f0101e27 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e07:	83 ec 0c             	sub    $0xc,%esp
f0101e0a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e0d:	e8 d2 bb 00 00       	call   f010d9e4 <setPageReplacmentAlgorithmLRU>
f0101e12:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e15:	83 ec 0c             	sub    $0xc,%esp
f0101e18:	68 c4 45 13 f0       	push   $0xf01345c4
f0101e1d:	e8 60 ee ff ff       	call   f0100c82 <cprintf>
f0101e22:	83 c4 10             	add    $0x10,%esp
f0101e25:	eb 17                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e27:	83 ec 0c             	sub    $0xc,%esp
f0101e2a:	68 04 46 13 f0       	push   $0xf0134604
f0101e2f:	e8 4e ee ff ff       	call   f0100c82 <cprintf>
f0101e34:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e37:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e3c:	eb 05                	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101e3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e43:	c9                   	leave  
f0101e44:	c3                   	ret    

f0101e45 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101e45:	55                   	push   %ebp
f0101e46:	89 e5                	mov    %esp,%ebp
f0101e48:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4e:	83 c0 04             	add    $0x4,%eax
f0101e51:	8b 00                	mov    (%eax),%eax
f0101e53:	83 ec 04             	sub    $0x4,%esp
f0101e56:	6a 0a                	push   $0xa
f0101e58:	6a 00                	push   $0x0
f0101e5a:	50                   	push   %eax
f0101e5b:	e8 f8 f0 02 00       	call   f0130f58 <strtol>
f0101e60:	83 c4 10             	add    $0x10,%esp
f0101e63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101e66:	83 ec 0c             	sub    $0xc,%esp
f0101e69:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e6c:	e8 e6 bb 00 00       	call   f010da57 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101e71:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101e74:	83 ec 0c             	sub    $0xc,%esp
f0101e77:	68 58 46 13 f0       	push   $0xf0134658
f0101e7c:	e8 01 ee ff ff       	call   f0100c82 <cprintf>
f0101e81:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e89:	c9                   	leave  
f0101e8a:	c3                   	ret    

f0101e8b <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101e8b:	55                   	push   %ebp
f0101e8c:	89 e5                	mov    %esp,%ebp
f0101e8e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101e91:	e8 81 bb 00 00       	call   f010da17 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101e96:	83 ec 0c             	sub    $0xc,%esp
f0101e99:	68 8c 46 13 f0       	push   $0xf013468c
f0101e9e:	e8 df ed ff ff       	call   f0100c82 <cprintf>
f0101ea3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eab:	c9                   	leave  
f0101eac:	c3                   	ret    

f0101ead <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101ead:	55                   	push   %ebp
f0101eae:	89 e5                	mov    %esp,%ebp
f0101eb0:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101eb3:	e8 6f bb 00 00       	call   f010da27 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	68 b8 46 13 f0       	push   $0xf01346b8
f0101ec0:	e8 bd ed ff ff       	call   f0100c82 <cprintf>
f0101ec5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ec8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecd:	c9                   	leave  
f0101ece:	c3                   	ret    

f0101ecf <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101ecf:	55                   	push   %ebp
f0101ed0:	89 e5                	mov    %esp,%ebp
f0101ed2:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101ed5:	e8 5d bb 00 00       	call   f010da37 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101eda:	83 ec 0c             	sub    $0xc,%esp
f0101edd:	68 e0 46 13 f0       	push   $0xf01346e0
f0101ee2:	e8 9b ed ff ff       	call   f0100c82 <cprintf>
f0101ee7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101eea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eef:	c9                   	leave  
f0101ef0:	c3                   	ret    

f0101ef1 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101ef1:	55                   	push   %ebp
f0101ef2:	89 e5                	mov    %esp,%ebp
f0101ef4:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101efa:	83 c0 04             	add    $0x4,%eax
f0101efd:	8b 00                	mov    (%eax),%eax
f0101eff:	83 ec 04             	sub    $0x4,%esp
f0101f02:	6a 0a                	push   $0xa
f0101f04:	6a 00                	push   $0x0
f0101f06:	50                   	push   %eax
f0101f07:	e8 4c f0 02 00       	call   f0130f58 <strtol>
f0101f0c:	83 c4 10             	add    $0x10,%esp
f0101f0f:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f12:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f16:	83 ec 0c             	sub    $0xc,%esp
f0101f19:	50                   	push   %eax
f0101f1a:	e8 12 28 00 00       	call   f0104731 <sched_init_RR>
f0101f1f:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f22:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0101f27:	8a 00                	mov    (%eax),%al
f0101f29:	0f b6 c0             	movzbl %al,%eax
f0101f2c:	83 ec 08             	sub    $0x8,%esp
f0101f2f:	50                   	push   %eax
f0101f30:	68 14 47 13 f0       	push   $0xf0134714
f0101f35:	e8 48 ed ff ff       	call   f0100c82 <cprintf>
f0101f3a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f42:	c9                   	leave  
f0101f43:	c3                   	ret    

f0101f44 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101f44:	55                   	push   %ebp
f0101f45:	89 e5                	mov    %esp,%ebp
f0101f47:	53                   	push   %ebx
f0101f48:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f4e:	83 c0 04             	add    $0x4,%eax
f0101f51:	8b 00                	mov    (%eax),%eax
f0101f53:	83 ec 04             	sub    $0x4,%esp
f0101f56:	6a 0a                	push   $0xa
f0101f58:	6a 00                	push   $0x0
f0101f5a:	50                   	push   %eax
f0101f5b:	e8 f8 ef 02 00       	call   f0130f58 <strtol>
f0101f60:	83 c4 10             	add    $0x10,%esp
f0101f63:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f66:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101f6d:	eb 2e                	jmp    f0101f9d <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f72:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f82:	01 d0                	add    %edx,%eax
f0101f84:	8b 00                	mov    (%eax),%eax
f0101f86:	83 ec 04             	sub    $0x4,%esp
f0101f89:	6a 0a                	push   $0xa
f0101f8b:	6a 00                	push   $0x0
f0101f8d:	50                   	push   %eax
f0101f8e:	e8 c5 ef 02 00       	call   f0130f58 <strtol>
f0101f93:	83 c4 10             	add    $0x10,%esp
f0101f96:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f9a:	ff 45 f4             	incl   -0xc(%ebp)
f0101f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fa0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101fa3:	7c ca                	jl     f0101f6f <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101fa5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101fa9:	83 ec 08             	sub    $0x8,%esp
f0101fac:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101faf:	52                   	push   %edx
f0101fb0:	50                   	push   %eax
f0101fb1:	e8 06 28 00 00       	call   f01047bc <sched_init_MLFQ>
f0101fb6:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101fb9:	83 ec 0c             	sub    $0xc,%esp
f0101fbc:	68 4c 47 13 f0       	push   $0xf013474c
f0101fc1:	e8 bc ec ff ff       	call   f0100c82 <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101fc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fd0:	eb 24                	jmp    f0101ff6 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0101fd2:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f0101fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdb:	01 d0                	add    %edx,%eax
f0101fdd:	8a 00                	mov    (%eax),%al
f0101fdf:	0f b6 c0             	movzbl %al,%eax
f0101fe2:	83 ec 08             	sub    $0x8,%esp
f0101fe5:	50                   	push   %eax
f0101fe6:	68 79 47 13 f0       	push   $0xf0134779
f0101feb:	e8 92 ec ff ff       	call   f0100c82 <cprintf>
f0101ff0:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ff3:	ff 45 f0             	incl   -0x10(%ebp)
f0101ff6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0101ffb:	0f b6 c0             	movzbl %al,%eax
f0101ffe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102001:	7f cf                	jg     f0101fd2 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102003:	83 ec 0c             	sub    $0xc,%esp
f0102006:	68 01 41 13 f0       	push   $0xf0134101
f010200b:	e8 72 ec ff ff       	call   f0100c82 <cprintf>
f0102010:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102018:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102023:	e8 8d 23 00 00       	call   f01043b5 <isSchedMethodMLFQ>
f0102028:	85 c0                	test   %eax,%eax
f010202a:	74 5c                	je     f0102088 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010202c:	83 ec 0c             	sub    $0xc,%esp
f010202f:	68 80 47 13 f0       	push   $0xf0134780
f0102034:	e8 49 ec ff ff       	call   f0100c82 <cprintf>
f0102039:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010203c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102043:	eb 24                	jmp    f0102069 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102045:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f010204b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010204e:	01 d0                	add    %edx,%eax
f0102050:	8a 00                	mov    (%eax),%al
f0102052:	0f b6 c0             	movzbl %al,%eax
f0102055:	83 ec 08             	sub    $0x8,%esp
f0102058:	50                   	push   %eax
f0102059:	68 79 47 13 f0       	push   $0xf0134779
f010205e:	e8 1f ec ff ff       	call   f0100c82 <cprintf>
f0102063:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102066:	ff 45 f4             	incl   -0xc(%ebp)
f0102069:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010206e:	0f b6 c0             	movzbl %al,%eax
f0102071:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102074:	7f cf                	jg     f0102045 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102076:	83 ec 0c             	sub    $0xc,%esp
f0102079:	68 01 41 13 f0       	push   $0xf0134101
f010207e:	e8 ff eb ff ff       	call   f0100c82 <cprintf>
f0102083:	83 c4 10             	add    $0x10,%esp
f0102086:	eb 36                	jmp    f01020be <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102088:	e8 0e 23 00 00       	call   f010439b <isSchedMethodRR>
f010208d:	85 c0                	test   %eax,%eax
f010208f:	74 1d                	je     f01020ae <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102091:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0102096:	8a 00                	mov    (%eax),%al
f0102098:	0f b6 c0             	movzbl %al,%eax
f010209b:	83 ec 08             	sub    $0x8,%esp
f010209e:	50                   	push   %eax
f010209f:	68 b4 47 13 f0       	push   $0xf01347b4
f01020a4:	e8 d9 eb ff ff       	call   f0100c82 <cprintf>
f01020a9:	83 c4 10             	add    $0x10,%esp
f01020ac:	eb 10                	jmp    f01020be <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01020ae:	83 ec 0c             	sub    $0xc,%esp
f01020b1:	68 f0 47 13 f0       	push   $0xf01347f0
f01020b6:	e8 c7 eb ff ff       	call   f0100c82 <cprintf>
f01020bb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020c3:	c9                   	leave  
f01020c4:	c3                   	ret    

f01020c5 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01020c5:	55                   	push   %ebp
f01020c6:	89 e5                	mov    %esp,%ebp
f01020c8:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01020cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020ce:	83 c0 04             	add    $0x4,%eax
f01020d1:	8b 00                	mov    (%eax),%eax
f01020d3:	83 ec 04             	sub    $0x4,%esp
f01020d6:	6a 0a                	push   $0xa
f01020d8:	6a 00                	push   $0x0
f01020da:	50                   	push   %eax
f01020db:	e8 78 ee 02 00       	call   f0130f58 <strtol>
f01020e0:	83 c4 10             	add    $0x10,%esp
f01020e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01020e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020e9:	0f b6 c0             	movzbl %al,%eax
f01020ec:	83 ec 0c             	sub    $0xc,%esp
f01020ef:	50                   	push   %eax
f01020f0:	e8 89 dd 02 00       	call   f012fe7e <chksch>
f01020f5:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01020f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01020fc:	75 12                	jne    f0102110 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01020fe:	83 ec 0c             	sub    $0xc,%esp
f0102101:	68 18 48 13 f0       	push   $0xf0134818
f0102106:	e8 77 eb ff ff       	call   f0100c82 <cprintf>
f010210b:	83 c4 10             	add    $0x10,%esp
f010210e:	eb 16                	jmp    f0102126 <command_sch_test+0x61>
	else if (status == 1)
f0102110:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102114:	75 10                	jne    f0102126 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102116:	83 ec 0c             	sub    $0xc,%esp
f0102119:	68 40 48 13 f0       	push   $0xf0134840
f010211e:	e8 5f eb ff ff       	call   f0100c82 <cprintf>
f0102123:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102126:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212b:	c9                   	leave  
f010212c:	c3                   	ret    

f010212d <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010212d:	55                   	push   %ebp
f010212e:	89 e5                	mov    %esp,%ebp
f0102130:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102133:	e8 4d b9 00 00       	call   f010da85 <isPageReplacmentAlgorithmCLOCK>
f0102138:	85 c0                	test   %eax,%eax
f010213a:	74 15                	je     f0102151 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f010213c:	83 ec 0c             	sub    $0xc,%esp
f010213f:	68 64 48 13 f0       	push   $0xf0134864
f0102144:	e8 39 eb ff ff       	call   f0100c82 <cprintf>
f0102149:	83 c4 10             	add    $0x10,%esp
f010214c:	e9 8c 00 00 00       	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102151:	83 ec 0c             	sub    $0xc,%esp
f0102154:	6a 01                	push   $0x1
f0102156:	e8 14 b9 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f010215b:	83 c4 10             	add    $0x10,%esp
f010215e:	85 c0                	test   %eax,%eax
f0102160:	74 12                	je     f0102174 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102162:	83 ec 0c             	sub    $0xc,%esp
f0102165:	68 8c 48 13 f0       	push   $0xf013488c
f010216a:	e8 13 eb ff ff       	call   f0100c82 <cprintf>
f010216f:	83 c4 10             	add    $0x10,%esp
f0102172:	eb 69                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102174:	83 ec 0c             	sub    $0xc,%esp
f0102177:	6a 02                	push   $0x2
f0102179:	e8 f1 b8 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f010217e:	83 c4 10             	add    $0x10,%esp
f0102181:	85 c0                	test   %eax,%eax
f0102183:	74 12                	je     f0102197 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102185:	83 ec 0c             	sub    $0xc,%esp
f0102188:	68 cc 48 13 f0       	push   $0xf01348cc
f010218d:	e8 f0 ea ff ff       	call   f0100c82 <cprintf>
f0102192:	83 c4 10             	add    $0x10,%esp
f0102195:	eb 46                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102197:	e8 04 b9 00 00       	call   f010daa0 <isPageReplacmentAlgorithmFIFO>
f010219c:	85 c0                	test   %eax,%eax
f010219e:	74 12                	je     f01021b2 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01021a0:	83 ec 0c             	sub    $0xc,%esp
f01021a3:	68 08 49 13 f0       	push   $0xf0134908
f01021a8:	e8 d5 ea ff ff       	call   f0100c82 <cprintf>
f01021ad:	83 c4 10             	add    $0x10,%esp
f01021b0:	eb 2b                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01021b2:	e8 04 b9 00 00       	call   f010dabb <isPageReplacmentAlgorithmModifiedCLOCK>
f01021b7:	85 c0                	test   %eax,%eax
f01021b9:	74 12                	je     f01021cd <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01021bb:	83 ec 0c             	sub    $0xc,%esp
f01021be:	68 2c 49 13 f0       	push   $0xf013492c
f01021c3:	e8 ba ea ff ff       	call   f0100c82 <cprintf>
f01021c8:	83 c4 10             	add    $0x10,%esp
f01021cb:	eb 10                	jmp    f01021dd <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01021cd:	83 ec 0c             	sub    $0xc,%esp
f01021d0:	68 5c 49 13 f0       	push   $0xf013495c
f01021d5:	e8 a8 ea ff ff       	call   f0100c82 <cprintf>
f01021da:	83 c4 10             	add    $0x10,%esp

	return 0;
f01021dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021e2:	c9                   	leave  
f01021e3:	c3                   	ret    

f01021e4 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01021e4:	55                   	push   %ebp
f01021e5:	89 e5                	mov    %esp,%ebp
f01021e7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01021ea:	e8 18 ed ff ff       	call   f0100f07 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01021ef:	83 ec 0c             	sub    $0xc,%esp
f01021f2:	68 88 49 13 f0       	push   $0xf0134988
f01021f7:	e8 86 ea ff ff       	call   f0100c82 <cprintf>
f01021fc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102204:	c9                   	leave  
f0102205:	c3                   	ret    

f0102206 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102206:	55                   	push   %ebp
f0102207:	89 e5                	mov    %esp,%ebp
f0102209:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f010220c:	e8 06 ed ff ff       	call   f0100f17 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 b8 49 13 f0       	push   $0xf01349b8
f0102219:	e8 64 ea ff ff       	call   f0100c82 <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102226:	c9                   	leave  
f0102227:	c3                   	ret    

f0102228 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102228:	55                   	push   %ebp
f0102229:	89 e5                	mov    %esp,%ebp
f010222b:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010222e:	e8 f4 ec ff ff       	call   f0100f27 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102233:	83 ec 0c             	sub    $0xc,%esp
f0102236:	68 e8 49 13 f0       	push   $0xf01349e8
f010223b:	e8 42 ea ff ff       	call   f0100c82 <cprintf>
f0102240:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102250:	e8 e2 ec ff ff       	call   f0100f37 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 18 4a 13 f0       	push   $0xf0134a18
f010225d:	e8 20 ea ff ff       	call   f0100c82 <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102272:	e8 d0 ec ff ff       	call   f0100f47 <isUHeapPlacementStrategyFIRSTFIT>
f0102277:	84 c0                	test   %al,%al
f0102279:	74 12                	je     f010228d <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 48 4a 13 f0       	push   $0xf0134a48
f0102283:	e8 fa e9 ff ff       	call   f0100c82 <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
f010228b:	eb 61                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010228d:	e8 ca ec ff ff       	call   f0100f5c <isUHeapPlacementStrategyBESTFIT>
f0102292:	84 c0                	test   %al,%al
f0102294:	74 12                	je     f01022a8 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	68 74 4a 13 f0       	push   $0xf0134a74
f010229e:	e8 df e9 ff ff       	call   f0100c82 <cprintf>
f01022a3:	83 c4 10             	add    $0x10,%esp
f01022a6:	eb 46                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01022a8:	e8 c4 ec ff ff       	call   f0100f71 <isUHeapPlacementStrategyNEXTFIT>
f01022ad:	84 c0                	test   %al,%al
f01022af:	74 12                	je     f01022c3 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01022b1:	83 ec 0c             	sub    $0xc,%esp
f01022b4:	68 a0 4a 13 f0       	push   $0xf0134aa0
f01022b9:	e8 c4 e9 ff ff       	call   f0100c82 <cprintf>
f01022be:	83 c4 10             	add    $0x10,%esp
f01022c1:	eb 2b                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01022c3:	e8 be ec ff ff       	call   f0100f86 <isUHeapPlacementStrategyWORSTFIT>
f01022c8:	84 c0                	test   %al,%al
f01022ca:	74 12                	je     f01022de <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01022cc:	83 ec 0c             	sub    $0xc,%esp
f01022cf:	68 cc 4a 13 f0       	push   $0xf0134acc
f01022d4:	e8 a9 e9 ff ff       	call   f0100c82 <cprintf>
f01022d9:	83 c4 10             	add    $0x10,%esp
f01022dc:	eb 10                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01022de:	83 ec 0c             	sub    $0xc,%esp
f01022e1:	68 f8 4a 13 f0       	push   $0xf0134af8
f01022e6:	e8 97 e9 ff ff       	call   f0100c82 <cprintf>
f01022eb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f3:	c9                   	leave  
f01022f4:	c3                   	ret    

f01022f5 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01022f5:	55                   	push   %ebp
f01022f6:	89 e5                	mov    %esp,%ebp
f01022f8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01022fb:	e8 4f eb ff ff       	call   f0100e4f <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102300:	83 ec 0c             	sub    $0xc,%esp
f0102303:	68 24 4b 13 f0       	push   $0xf0134b24
f0102308:	e8 75 e9 ff ff       	call   f0100c82 <cprintf>
f010230d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102310:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102315:	c9                   	leave  
f0102316:	c3                   	ret    

f0102317 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102317:	55                   	push   %ebp
f0102318:	89 e5                	mov    %esp,%ebp
f010231a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010231d:	e8 3d eb ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 24 4b 13 f0       	push   $0xf0134b24
f010232a:	e8 53 e9 ff ff       	call   f0100c82 <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102332:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102337:	c9                   	leave  
f0102338:	c3                   	ret    

f0102339 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010233f:	e8 2b eb ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102344:	83 ec 0c             	sub    $0xc,%esp
f0102347:	68 58 4b 13 f0       	push   $0xf0134b58
f010234c:	e8 31 e9 ff ff       	call   f0100c82 <cprintf>
f0102351:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102359:	c9                   	leave  
f010235a:	c3                   	ret    

f010235b <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010235b:	55                   	push   %ebp
f010235c:	89 e5                	mov    %esp,%ebp
f010235e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102361:	e8 19 eb ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102366:	83 ec 0c             	sub    $0xc,%esp
f0102369:	68 88 4b 13 f0       	push   $0xf0134b88
f010236e:	e8 0f e9 ff ff       	call   f0100c82 <cprintf>
f0102373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237b:	c9                   	leave  
f010237c:	c3                   	ret    

f010237d <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010237d:	55                   	push   %ebp
f010237e:	89 e5                	mov    %esp,%ebp
f0102380:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102383:	e8 07 eb ff ff       	call   f0100e8f <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102388:	83 ec 0c             	sub    $0xc,%esp
f010238b:	68 b8 4b 13 f0       	push   $0xf0134bb8
f0102390:	e8 ed e8 ff ff       	call   f0100c82 <cprintf>
f0102395:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102398:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010239d:	c9                   	leave  
f010239e:	c3                   	ret    

f010239f <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010239f:	55                   	push   %ebp
f01023a0:	89 e5                	mov    %esp,%ebp
f01023a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01023a5:	e8 f5 ea ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01023aa:	84 c0                	test   %al,%al
f01023ac:	74 12                	je     f01023c0 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 ec 4b 13 f0       	push   $0xf0134bec
f01023b6:	e8 c7 e8 ff ff       	call   f0100c82 <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
f01023be:	eb 7c                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01023c0:	e8 ee ea ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01023c5:	84 c0                	test   %al,%al
f01023c7:	74 12                	je     f01023db <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01023c9:	83 ec 0c             	sub    $0xc,%esp
f01023cc:	68 28 4c 13 f0       	push   $0xf0134c28
f01023d1:	e8 ac e8 ff ff       	call   f0100c82 <cprintf>
f01023d6:	83 c4 10             	add    $0x10,%esp
f01023d9:	eb 61                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01023db:	e8 e8 ea ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01023e0:	84 c0                	test   %al,%al
f01023e2:	74 12                	je     f01023f6 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 58 4c 13 f0       	push   $0xf0134c58
f01023ec:	e8 91 e8 ff ff       	call   f0100c82 <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
f01023f4:	eb 46                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01023f6:	e8 e2 ea ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f01023fb:	84 c0                	test   %al,%al
f01023fd:	74 12                	je     f0102411 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01023ff:	83 ec 0c             	sub    $0xc,%esp
f0102402:	68 84 4c 13 f0       	push   $0xf0134c84
f0102407:	e8 76 e8 ff ff       	call   f0100c82 <cprintf>
f010240c:	83 c4 10             	add    $0x10,%esp
f010240f:	eb 2b                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102411:	e8 dc ea ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f0102416:	84 c0                	test   %al,%al
f0102418:	74 12                	je     f010242c <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010241a:	83 ec 0c             	sub    $0xc,%esp
f010241d:	68 b0 4c 13 f0       	push   $0xf0134cb0
f0102422:	e8 5b e8 ff ff       	call   f0100c82 <cprintf>
f0102427:	83 c4 10             	add    $0x10,%esp
f010242a:	eb 10                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f010242c:	83 ec 0c             	sub    $0xc,%esp
f010242f:	68 e0 4c 13 f0       	push   $0xf0134ce0
f0102434:	e8 49 e8 ff ff       	call   f0100c82 <cprintf>
f0102439:	83 c4 10             	add    $0x10,%esp

	return 0;
f010243c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102441:	c9                   	leave  
f0102442:	c3                   	ret    

f0102443 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102443:	55                   	push   %ebp
f0102444:	89 e5                	mov    %esp,%ebp
f0102446:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102449:	e8 e4 b6 00 00       	call   f010db32 <isBufferingEnabled>
f010244e:	84 c0                	test   %al,%al
f0102450:	75 12                	jne    f0102464 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102452:	83 ec 0c             	sub    $0xc,%esp
f0102455:	68 10 4d 13 f0       	push   $0xf0134d10
f010245a:	e8 23 e8 ff ff       	call   f0100c82 <cprintf>
f010245f:	83 c4 10             	add    $0x10,%esp
f0102462:	eb 1d                	jmp    f0102481 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102464:	83 ec 0c             	sub    $0xc,%esp
f0102467:	6a 00                	push   $0x0
f0102469:	e8 9e b6 00 00       	call   f010db0c <enableModifiedBuffer>
f010246e:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102471:	83 ec 0c             	sub    $0xc,%esp
f0102474:	68 4c 4d 13 f0       	push   $0xf0134d4c
f0102479:	e8 04 e8 ff ff       	call   f0100c82 <cprintf>
f010247e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102481:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102486:	c9                   	leave  
f0102487:	c3                   	ret    

f0102488 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102488:	55                   	push   %ebp
f0102489:	89 e5                	mov    %esp,%ebp
f010248b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010248e:	e8 9f b6 00 00       	call   f010db32 <isBufferingEnabled>
f0102493:	84 c0                	test   %al,%al
f0102495:	75 12                	jne    f01024a9 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102497:	83 ec 0c             	sub    $0xc,%esp
f010249a:	68 10 4d 13 f0       	push   $0xf0134d10
f010249f:	e8 de e7 ff ff       	call   f0100c82 <cprintf>
f01024a4:	83 c4 10             	add    $0x10,%esp
f01024a7:	eb 1d                	jmp    f01024c6 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01024a9:	83 ec 0c             	sub    $0xc,%esp
f01024ac:	6a 01                	push   $0x1
f01024ae:	e8 59 b6 00 00       	call   f010db0c <enableModifiedBuffer>
f01024b3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01024b6:	83 ec 0c             	sub    $0xc,%esp
f01024b9:	68 70 4d 13 f0       	push   $0xf0134d70
f01024be:	e8 bf e7 ff ff       	call   f0100c82 <cprintf>
f01024c3:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cb:	c9                   	leave  
f01024cc:	c3                   	ret    

f01024cd <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01024cd:	55                   	push   %ebp
f01024ce:	89 e5                	mov    %esp,%ebp
f01024d0:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01024d3:	83 ec 0c             	sub    $0xc,%esp
f01024d6:	6a 00                	push   $0x0
f01024d8:	e8 47 b6 00 00       	call   f010db24 <enableBuffering>
f01024dd:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01024e0:	83 ec 0c             	sub    $0xc,%esp
f01024e3:	6a 00                	push   $0x0
f01024e5:	e8 22 b6 00 00       	call   f010db0c <enableModifiedBuffer>
f01024ea:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01024ed:	83 ec 0c             	sub    $0xc,%esp
f01024f0:	68 90 4d 13 f0       	push   $0xf0134d90
f01024f5:	e8 88 e7 ff ff       	call   f0100c82 <cprintf>
f01024fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102502:	c9                   	leave  
f0102503:	c3                   	ret    

f0102504 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102504:	55                   	push   %ebp
f0102505:	89 e5                	mov    %esp,%ebp
f0102507:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f010250a:	83 ec 0c             	sub    $0xc,%esp
f010250d:	6a 01                	push   $0x1
f010250f:	e8 10 b6 00 00       	call   f010db24 <enableBuffering>
f0102514:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102517:	83 ec 0c             	sub    $0xc,%esp
f010251a:	6a 01                	push   $0x1
f010251c:	e8 eb b5 00 00       	call   f010db0c <enableModifiedBuffer>
f0102521:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102524:	e8 21 b6 00 00       	call   f010db4a <getModifiedBufferLength>
f0102529:	85 c0                	test   %eax,%eax
f010252b:	75 59                	jne    f0102586 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010252d:	83 ec 0c             	sub    $0xc,%esp
f0102530:	68 ac 4d 13 f0       	push   $0xf0134dac
f0102535:	e8 48 e7 ff ff       	call   f0100c82 <cprintf>
f010253a:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010253d:	83 ec 08             	sub    $0x8,%esp
f0102540:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102543:	50                   	push   %eax
f0102544:	68 dc 4d 13 f0       	push   $0xf0134ddc
f0102549:	e8 a4 e4 02 00       	call   f01309f2 <readline>
f010254e:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	6a 0a                	push   $0xa
f0102556:	6a 00                	push   $0x0
f0102558:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010255b:	50                   	push   %eax
f010255c:	e8 f7 e9 02 00       	call   f0130f58 <strtol>
f0102561:	83 c4 10             	add    $0x10,%esp
f0102564:	83 ec 0c             	sub    $0xc,%esp
f0102567:	50                   	push   %eax
f0102568:	e8 cf b5 00 00       	call   f010db3c <setModifiedBufferLength>
f010256d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102570:	e8 d5 b5 00 00       	call   f010db4a <getModifiedBufferLength>
f0102575:	83 ec 08             	sub    $0x8,%esp
f0102578:	50                   	push   %eax
f0102579:	68 08 4e 13 f0       	push   $0xf0134e08
f010257e:	e8 ff e6 ff ff       	call   f0100c82 <cprintf>
f0102583:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102586:	83 ec 0c             	sub    $0xc,%esp
f0102589:	68 2d 4e 13 f0       	push   $0xf0134e2d
f010258e:	e8 ef e6 ff ff       	call   f0100c82 <cprintf>
f0102593:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102596:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259b:	c9                   	leave  
f010259c:	c3                   	ret    

f010259d <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010259d:	55                   	push   %ebp
f010259e:	89 e5                	mov    %esp,%ebp
f01025a0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01025a3:	e8 8a b5 00 00       	call   f010db32 <isBufferingEnabled>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	75 12                	jne    f01025be <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01025ac:	83 ec 0c             	sub    $0xc,%esp
f01025af:	68 48 4e 13 f0       	push   $0xf0134e48
f01025b4:	e8 c9 e6 ff ff       	call   f0100c82 <cprintf>
f01025b9:	83 c4 10             	add    $0x10,%esp
f01025bc:	eb 19                	jmp    f01025d7 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01025be:	e8 57 b5 00 00       	call   f010db1a <isModifiedBufferEnabled>
f01025c3:	84 c0                	test   %al,%al
f01025c5:	75 10                	jne    f01025d7 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01025c7:	83 ec 0c             	sub    $0xc,%esp
f01025ca:	68 98 4e 13 f0       	push   $0xf0134e98
f01025cf:	e8 ae e6 ff ff       	call   f0100c82 <cprintf>
f01025d4:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01025d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025da:	83 c0 04             	add    $0x4,%eax
f01025dd:	8b 00                	mov    (%eax),%eax
f01025df:	83 ec 04             	sub    $0x4,%esp
f01025e2:	6a 0a                	push   $0xa
f01025e4:	6a 00                	push   $0x0
f01025e6:	50                   	push   %eax
f01025e7:	e8 6c e9 02 00       	call   f0130f58 <strtol>
f01025ec:	83 c4 10             	add    $0x10,%esp
f01025ef:	83 ec 0c             	sub    $0xc,%esp
f01025f2:	50                   	push   %eax
f01025f3:	e8 44 b5 00 00       	call   f010db3c <setModifiedBufferLength>
f01025f8:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fb:	e8 4a b5 00 00       	call   f010db4a <getModifiedBufferLength>
f0102600:	83 ec 08             	sub    $0x8,%esp
f0102603:	50                   	push   %eax
f0102604:	68 08 4e 13 f0       	push   $0xf0134e08
f0102609:	e8 74 e6 ff ff       	call   f0100c82 <cprintf>
f010260e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102611:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102616:	c9                   	leave  
f0102617:	c3                   	ret    

f0102618 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102618:	55                   	push   %ebp
f0102619:	89 e5                	mov    %esp,%ebp
f010261b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010261e:	e8 0f b5 00 00       	call   f010db32 <isBufferingEnabled>
f0102623:	84 c0                	test   %al,%al
f0102625:	75 12                	jne    f0102639 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102627:	83 ec 0c             	sub    $0xc,%esp
f010262a:	68 48 4e 13 f0       	push   $0xf0134e48
f010262f:	e8 4e e6 ff ff       	call   f0100c82 <cprintf>
f0102634:	83 c4 10             	add    $0x10,%esp
f0102637:	eb 19                	jmp    f0102652 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102639:	e8 dc b4 00 00       	call   f010db1a <isModifiedBufferEnabled>
f010263e:	84 c0                	test   %al,%al
f0102640:	75 10                	jne    f0102652 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102642:	83 ec 0c             	sub    $0xc,%esp
f0102645:	68 98 4e 13 f0       	push   $0xf0134e98
f010264a:	e8 33 e6 ff ff       	call   f0100c82 <cprintf>
f010264f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102652:	e8 f3 b4 00 00       	call   f010db4a <getModifiedBufferLength>
f0102657:	83 ec 08             	sub    $0x8,%esp
f010265a:	50                   	push   %eax
f010265b:	68 de 4e 13 f0       	push   $0xf0134ede
f0102660:	e8 1d e6 ff ff       	call   f0100c82 <cprintf>
f0102665:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102668:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010266d:	c9                   	leave  
f010266e:	c3                   	ret    

f010266f <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010266f:	55                   	push   %ebp
f0102670:	89 e5                	mov    %esp,%ebp
f0102672:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102675:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f010267c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102680:	75 1b                	jne    f010269d <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102682:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102685:	83 c0 04             	add    $0x4,%eax
f0102688:	8b 00                	mov    (%eax),%eax
f010268a:	83 ec 04             	sub    $0x4,%esp
f010268d:	6a 0a                	push   $0xa
f010268f:	6a 00                	push   $0x0
f0102691:	50                   	push   %eax
f0102692:	e8 c1 e8 02 00       	call   f0130f58 <strtol>
f0102697:	83 c4 10             	add    $0x10,%esp
f010269a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f010269d:	e8 fd e7 ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01026a2:	84 c0                	test   %al,%al
f01026a4:	74 0a                	je     f01026b0 <command_test_kmalloc+0x41>
		test_kmalloc();
f01026a6:	e8 3c 4a 01 00       	call   f01170e7 <test_kmalloc>
f01026ab:	e9 e8 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01026b0:	e8 fe e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01026b5:	84 c0                	test   %al,%al
f01026b7:	74 44                	je     f01026fd <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01026b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01026bd:	75 1a                	jne    f01026d9 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01026bf:	83 ec 0c             	sub    $0xc,%esp
f01026c2:	68 fc 4e 13 f0       	push   $0xf0134efc
f01026c7:	e8 b6 e5 ff ff       	call   f0100c82 <cprintf>
f01026cc:	83 c4 10             	add    $0x10,%esp
			return 0;
f01026cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01026d4:	e9 c4 00 00 00       	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01026d9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026dd:	75 0a                	jne    f01026e9 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01026df:	e8 8c 98 01 00       	call   f011bf70 <test_kmalloc_firstfit1>
f01026e4:	e9 af 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01026e9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01026ed:	0f 85 a5 00 00 00    	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01026f3:	e8 1a ac 01 00       	call   f011d312 <test_kmalloc_firstfit2>
f01026f8:	e9 9b 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01026fd:	e8 c6 e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102702:	84 c0                	test   %al,%al
f0102704:	74 44                	je     f010274a <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102706:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010270a:	75 17                	jne    f0102723 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010270c:	83 ec 0c             	sub    $0xc,%esp
f010270f:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102714:	e8 69 e5 ff ff       	call   f0100c82 <cprintf>
f0102719:	83 c4 10             	add    $0x10,%esp
			return 0;
f010271c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102721:	eb 7a                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102723:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102727:	75 07                	jne    f0102730 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102729:	e8 b9 49 01 00       	call   f01170e7 <test_kmalloc>
f010272e:	eb 68                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102730:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102734:	75 07                	jne    f010273d <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102736:	e8 ff 72 01 00       	call   f0119a3a <test_kmalloc_bestfit1>
f010273b:	eb 5b                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f010273d:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102741:	75 55                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102743:	e8 48 85 01 00       	call   f011ac90 <test_kmalloc_bestfit2>
f0102748:	eb 4e                	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010274a:	e8 8e e7 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010274f:	84 c0                	test   %al,%al
f0102751:	74 37                	je     f010278a <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102753:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102757:	75 17                	jne    f0102770 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102759:	83 ec 0c             	sub    $0xc,%esp
f010275c:	68 9c 4f 13 f0       	push   $0xf0134f9c
f0102761:	e8 1c e5 ff ff       	call   f0100c82 <cprintf>
f0102766:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102769:	b8 00 00 00 00       	mov    $0x0,%eax
f010276e:	eb 2d                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102770:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102774:	75 07                	jne    f010277d <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102776:	e8 6c 49 01 00       	call   f01170e7 <test_kmalloc>
f010277b:	eb 1b                	jmp    f0102798 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f010277d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102781:	75 15                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102783:	e8 bd 5b 01 00       	call   f0118345 <test_kmalloc_nextfit>
f0102788:	eb 0e                	jmp    f0102798 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010278a:	e8 63 e7 ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f010278f:	84 c0                	test   %al,%al
f0102791:	74 05                	je     f0102798 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102793:	e8 0f ba 01 00       	call   f011e1a7 <test_kmalloc_worstfit>
	return 0;
f0102798:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010279d:	c9                   	leave  
f010279e:	c3                   	ret    

f010279f <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010279f:	55                   	push   %ebp
f01027a0:	89 e5                	mov    %esp,%ebp
f01027a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01027a5:	e8 1e e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01027aa:	84 c0                	test   %al,%al
f01027ac:	75 09                	jne    f01027b7 <command_test_kfree+0x18>
f01027ae:	e8 00 e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01027b3:	84 c0                	test   %al,%al
f01027b5:	74 07                	je     f01027be <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01027b7:	e8 8d f1 01 00       	call   f0121949 <test_kfree_bestfirstfit>
f01027bc:	eb 05                	jmp    f01027c3 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01027be:	e8 34 d0 01 00       	call   f011f7f7 <test_kfree>
	}
	return 0;
f01027c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027c8:	c9                   	leave  
f01027c9:	c3                   	ret    

f01027ca <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01027ca:	55                   	push   %ebp
f01027cb:	89 e5                	mov    %esp,%ebp
f01027cd:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01027d0:	e8 70 0b 02 00       	call   f0123345 <test_kheap_phys_addr>
	return 0;
f01027d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027da:	c9                   	leave  
f01027db:	c3                   	ret    

f01027dc <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01027dc:	55                   	push   %ebp
f01027dd:	89 e5                	mov    %esp,%ebp
f01027df:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01027e2:	e8 2e 20 02 00       	call   f0124815 <test_kheap_virt_addr>
	return 0;
f01027e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027ec:	c9                   	leave  
f01027ed:	c3                   	ret    

f01027ee <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01027ee:	55                   	push   %ebp
f01027ef:	89 e5                	mov    %esp,%ebp
f01027f1:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01027f4:	e8 f9 34 02 00       	call   f0125cf2 <test_three_creation_functions>
	return 0;
f01027f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027fe:	c9                   	leave  
f01027ff:	c3                   	ret    

f0102800 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f0102800:	55                   	push   %ebp
f0102801:	89 e5                	mov    %esp,%ebp
f0102803:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102806:	e8 d2 e6 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010280b:	84 c0                	test   %al,%al
f010280d:	74 07                	je     f0102816 <command_test_krealloc+0x16>
		test_krealloc();
f010280f:	e8 f5 8e 02 00       	call   f012b709 <test_krealloc>
f0102814:	eb 0e                	jmp    f0102824 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102816:	e8 ad e6 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_krealloc+0x24>
		test_krealloc_BF();
f010281f:	e8 95 ae 02 00       	call   f012d6b9 <test_krealloc_BF>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102831:	e8 c6 34 01 00       	call   f0115cfc <test_priority_normal_and_higher>
	return 0;
f0102836:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010283b:	c9                   	leave  
f010283c:	c3                   	ret    

f010283d <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f010283d:	55                   	push   %ebp
f010283e:	89 e5                	mov    %esp,%ebp
f0102840:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102843:	e8 9a 3e 01 00       	call   f01166e2 <test_priority_normal_and_lower>
	return 0;
f0102848:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010284d:	c9                   	leave  
f010284e:	c3                   	ret    

f010284f <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f010284f:	55                   	push   %ebp
f0102850:	89 e5                	mov    %esp,%ebp
f0102852:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f0102855:	e8 d2 36 02 00       	call   f0125f2c <test_kfreeall>
	return 0;
f010285a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010285f:	c9                   	leave  
f0102860:	c3                   	ret    

f0102861 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102861:	55                   	push   %ebp
f0102862:	89 e5                	mov    %esp,%ebp
f0102864:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f0102867:	e8 ac 4d 02 00       	call   f0127618 <test_kexpand>
	return 0;
f010286c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102871:	c9                   	leave  
f0102872:	c3                   	ret    

f0102873 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102873:	55                   	push   %ebp
f0102874:	89 e5                	mov    %esp,%ebp
f0102876:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102879:	e8 1b 5b 02 00       	call   f0128399 <test_kshrink>
	return 0;
f010287e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102883:	c9                   	leave  
f0102884:	c3                   	ret    

f0102885 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102885:	55                   	push   %ebp
f0102886:	89 e5                	mov    %esp,%ebp
f0102888:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010288b:	e8 f6 69 02 00       	call   f0129286 <test_kfreelast>
	return 0;
f0102890:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102895:	c9                   	leave  
f0102896:	c3                   	ret    

f0102897 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102897:	55                   	push   %ebp
f0102898:	89 e5                	mov    %esp,%ebp
f010289a:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010289d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028a0:	83 c0 04             	add    $0x4,%eax
f01028a3:	8b 00                	mov    (%eax),%eax
f01028a5:	83 ec 04             	sub    $0x4,%esp
f01028a8:	6a 0a                	push   $0xa
f01028aa:	6a 00                	push   $0x0
f01028ac:	50                   	push   %eax
f01028ad:	e8 a6 e6 02 00       	call   f0130f58 <strtol>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01028b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01028bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01028c6:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01028cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01028ce:	eb 3d                	jmp    f010290d <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01028d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028d3:	05 5c 05 00 00       	add    $0x55c,%eax
f01028d8:	83 ec 08             	sub    $0x8,%esp
f01028db:	68 ea 4f 13 f0       	push   $0xf0134fea
f01028e0:	50                   	push   %eax
f01028e1:	e8 1e e4 02 00       	call   f0130d04 <strcmp>
f01028e6:	83 c4 10             	add    $0x10,%esp
f01028e9:	85 c0                	test   %eax,%eax
f01028eb:	75 12                	jne    f01028ff <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01028ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01028f1:	74 07                	je     f01028fa <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01028f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01028fa:	ff 45 f4             	incl   -0xc(%ebp)
f01028fd:	eb 06                	jmp    f0102905 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01028ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102903:	74 31                	je     f0102936 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102905:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010290a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010290d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102911:	74 08                	je     f010291b <command_test_sc_MLFQ+0x84>
f0102913:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102916:	8b 40 44             	mov    0x44(%eax),%eax
f0102919:	eb 05                	jmp    f0102920 <command_test_sc_MLFQ+0x89>
f010291b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102920:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0102925:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010292a:	85 c0                	test   %eax,%eax
f010292c:	75 a2                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f010292e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102932:	75 9c                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f0102934:	eb 01                	jmp    f0102937 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102936:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102937:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010293a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010293d:	75 12                	jne    f0102951 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010293f:	83 ec 0c             	sub    $0xc,%esp
f0102942:	68 f4 4f 13 f0       	push   $0xf0134ff4
f0102947:	e8 36 e3 ff ff       	call   f0100c82 <cprintf>
f010294c:	83 c4 10             	add    $0x10,%esp
f010294f:	eb 17                	jmp    f0102968 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102951:	83 ec 04             	sub    $0x4,%esp
f0102954:	68 2d 50 13 f0       	push   $0xf013502d
f0102959:	68 8b 04 00 00       	push   $0x48b
f010295e:	68 79 40 13 f0       	push   $0xf0134079
f0102963:	e8 93 d8 ff ff       	call   f01001fb <_panic>
	}
	return 0;
f0102968:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010296d:	c9                   	leave  
f010296e:	c3                   	ret    

f010296f <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f010296f:	55                   	push   %ebp
f0102970:	89 e5                	mov    %esp,%ebp
f0102972:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102975:	e8 7e e0 00 00       	call   f01109f8 <TestAutoCompleteCommand>
f010297a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010297d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102982:	c9                   	leave  
f0102983:	c3                   	ret    

f0102984 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102984:	55                   	push   %ebp
f0102985:	89 e5                	mov    %esp,%ebp
f0102987:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010298a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010298e:	74 1a                	je     f01029aa <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102990:	83 ec 0c             	sub    $0xc,%esp
f0102993:	68 44 50 13 f0       	push   $0xf0135044
f0102998:	e8 e5 e2 ff ff       	call   f0100c82 <cprintf>
f010299d:	83 c4 10             	add    $0x10,%esp
		return 0;
f01029a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01029a5:	e9 82 01 00 00       	jmp    f0102b2c <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f01029aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029ad:	83 c0 04             	add    $0x4,%eax
f01029b0:	8b 00                	mov    (%eax),%eax
f01029b2:	83 ec 08             	sub    $0x8,%esp
f01029b5:	68 7c 50 13 f0       	push   $0xf013507c
f01029ba:	50                   	push   %eax
f01029bb:	e8 44 e3 02 00       	call   f0130d04 <strcmp>
f01029c0:	83 c4 10             	add    $0x10,%esp
f01029c3:	85 c0                	test   %eax,%eax
f01029c5:	75 0a                	jne    f01029d1 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01029c7:	e8 d6 b5 00 00       	call   f010dfa2 <test_initialize_MemBlocksList>
f01029cc:	e9 56 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01029d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d4:	83 c0 04             	add    $0x4,%eax
f01029d7:	8b 00                	mov    (%eax),%eax
f01029d9:	83 ec 08             	sub    $0x8,%esp
f01029dc:	68 81 50 13 f0       	push   $0xf0135081
f01029e1:	50                   	push   %eax
f01029e2:	e8 1d e3 02 00       	call   f0130d04 <strcmp>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	85 c0                	test   %eax,%eax
f01029ec:	75 0a                	jne    f01029f8 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01029ee:	e8 c3 b6 00 00       	call   f010e0b6 <test_insert_sorted_allocList>
f01029f3:	e9 2f 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01029f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029fb:	83 c0 04             	add    $0x4,%eax
f01029fe:	8b 00                	mov    (%eax),%eax
f0102a00:	83 ec 08             	sub    $0x8,%esp
f0102a03:	68 87 50 13 f0       	push   $0xf0135087
f0102a08:	50                   	push   %eax
f0102a09:	e8 f6 e2 02 00       	call   f0130d04 <strcmp>
f0102a0e:	83 c4 10             	add    $0x10,%esp
f0102a11:	85 c0                	test   %eax,%eax
f0102a13:	75 0a                	jne    f0102a1f <command_test_lists+0x9b>
	{
		test_find_block();
f0102a15:	e8 5a bb 00 00       	call   f010e574 <test_find_block>
f0102a1a:	e9 08 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a22:	83 c0 04             	add    $0x4,%eax
f0102a25:	8b 00                	mov    (%eax),%eax
f0102a27:	83 ec 08             	sub    $0x8,%esp
f0102a2a:	68 8c 50 13 f0       	push   $0xf013508c
f0102a2f:	50                   	push   %eax
f0102a30:	e8 cf e2 02 00       	call   f0130d04 <strcmp>
f0102a35:	83 c4 10             	add    $0x10,%esp
f0102a38:	85 c0                	test   %eax,%eax
f0102a3a:	74 1d                	je     f0102a59 <command_test_lists+0xd5>
f0102a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a3f:	83 c0 04             	add    $0x4,%eax
f0102a42:	8b 00                	mov    (%eax),%eax
f0102a44:	83 ec 08             	sub    $0x8,%esp
f0102a47:	68 8f 50 13 f0       	push   $0xf013508f
f0102a4c:	50                   	push   %eax
f0102a4d:	e8 b2 e2 02 00       	call   f0130d04 <strcmp>
f0102a52:	83 c4 10             	add    $0x10,%esp
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	75 0a                	jne    f0102a63 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102a59:	e8 71 be 00 00       	call   f010e8cf <test_alloc_block_FF>
f0102a5e:	e9 c4 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a66:	83 c0 04             	add    $0x4,%eax
f0102a69:	8b 00                	mov    (%eax),%eax
f0102a6b:	83 ec 08             	sub    $0x8,%esp
f0102a6e:	68 92 50 13 f0       	push   $0xf0135092
f0102a73:	50                   	push   %eax
f0102a74:	e8 8b e2 02 00       	call   f0130d04 <strcmp>
f0102a79:	83 c4 10             	add    $0x10,%esp
f0102a7c:	85 c0                	test   %eax,%eax
f0102a7e:	74 1d                	je     f0102a9d <command_test_lists+0x119>
f0102a80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a83:	83 c0 04             	add    $0x4,%eax
f0102a86:	8b 00                	mov    (%eax),%eax
f0102a88:	83 ec 08             	sub    $0x8,%esp
f0102a8b:	68 95 50 13 f0       	push   $0xf0135095
f0102a90:	50                   	push   %eax
f0102a91:	e8 6e e2 02 00       	call   f0130d04 <strcmp>
f0102a96:	83 c4 10             	add    $0x10,%esp
f0102a99:	85 c0                	test   %eax,%eax
f0102a9b:	75 0a                	jne    f0102aa7 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102a9d:	e8 ab c2 00 00       	call   f010ed4d <test_alloc_block_BF>
f0102aa2:	e9 80 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102aa7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aaa:	83 c0 04             	add    $0x4,%eax
f0102aad:	8b 00                	mov    (%eax),%eax
f0102aaf:	83 ec 08             	sub    $0x8,%esp
f0102ab2:	68 98 50 13 f0       	push   $0xf0135098
f0102ab7:	50                   	push   %eax
f0102ab8:	e8 47 e2 02 00       	call   f0130d04 <strcmp>
f0102abd:	83 c4 10             	add    $0x10,%esp
f0102ac0:	85 c0                	test   %eax,%eax
f0102ac2:	74 1d                	je     f0102ae1 <command_test_lists+0x15d>
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 9b 50 13 f0       	push   $0xf013509b
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 2a e2 02 00       	call   f0130d04 <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102ae1:	e8 ee c8 00 00       	call   f010f3d4 <test_alloc_block_NF>
f0102ae6:	eb 3f                	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 9e 50 13 f0       	push   $0xf013509e
f0102af8:	50                   	push   %eax
f0102af9:	e8 06 e2 02 00       	call   f0130d04 <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	74 1d                	je     f0102b22 <command_test_lists+0x19e>
f0102b05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b08:	83 c0 04             	add    $0x4,%eax
f0102b0b:	8b 00                	mov    (%eax),%eax
f0102b0d:	83 ec 08             	sub    $0x8,%esp
f0102b10:	68 a4 50 13 f0       	push   $0xf01350a4
f0102b15:	50                   	push   %eax
f0102b16:	e8 e9 e1 02 00       	call   f0130d04 <strcmp>
f0102b1b:	83 c4 10             	add    $0x10,%esp
f0102b1e:	85 c0                	test   %eax,%eax
f0102b20:	75 05                	jne    f0102b27 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b22:	e8 3b d1 00 00       	call   f010fc62 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b2c:	c9                   	leave  
f0102b2d:	c3                   	ret    

f0102b2e <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102b2e:	55                   	push   %ebp
f0102b2f:	89 e5                	mov    %esp,%ebp
f0102b31:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102b34:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102b38:	74 1a                	je     f0102b54 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102b3a:	83 ec 0c             	sub    $0xc,%esp
f0102b3d:	68 ac 50 13 f0       	push   $0xf01350ac
f0102b42:	e8 3b e1 ff ff       	call   f0100c82 <cprintf>
f0102b47:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b4f:	e9 e1 00 00 00       	jmp    f0102c35 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102b54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b57:	83 c0 04             	add    $0x4,%eax
f0102b5a:	8b 00                	mov    (%eax),%eax
f0102b5c:	83 ec 08             	sub    $0x8,%esp
f0102b5f:	68 e5 50 13 f0       	push   $0xf01350e5
f0102b64:	50                   	push   %eax
f0102b65:	e8 9a e1 02 00       	call   f0130d04 <strcmp>
f0102b6a:	83 c4 10             	add    $0x10,%esp
f0102b6d:	85 c0                	test   %eax,%eax
f0102b6f:	75 0a                	jne    f0102b7b <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102b71:	e8 16 e9 00 00       	call   f011148c <test_cut_paste_pages>
f0102b76:	e9 b5 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7e:	83 c0 04             	add    $0x4,%eax
f0102b81:	8b 00                	mov    (%eax),%eax
f0102b83:	83 ec 08             	sub    $0x8,%esp
f0102b86:	68 ee 50 13 f0       	push   $0xf01350ee
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 73 e1 02 00       	call   f0130d04 <strcmp>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	85 c0                	test   %eax,%eax
f0102b96:	75 0a                	jne    f0102ba2 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102b98:	e8 3a f3 00 00       	call   f0111ed7 <test_copy_paste_chunk>
f0102b9d:	e9 8e 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 04             	add    $0x4,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	83 ec 08             	sub    $0x8,%esp
f0102bad:	68 f8 50 13 f0       	push   $0xf01350f8
f0102bb2:	50                   	push   %eax
f0102bb3:	e8 4c e1 02 00       	call   f0130d04 <strcmp>
f0102bb8:	83 c4 10             	add    $0x10,%esp
f0102bbb:	85 c0                	test   %eax,%eax
f0102bbd:	75 07                	jne    f0102bc6 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102bbf:	e8 11 04 01 00       	call   f0112fd5 <test_share_chunk>
f0102bc4:	eb 6a                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc9:	83 c0 04             	add    $0x4,%eax
f0102bcc:	8b 00                	mov    (%eax),%eax
f0102bce:	83 ec 08             	sub    $0x8,%esp
f0102bd1:	68 fe 50 13 f0       	push   $0xf01350fe
f0102bd6:	50                   	push   %eax
f0102bd7:	e8 28 e1 02 00       	call   f0130d04 <strcmp>
f0102bdc:	83 c4 10             	add    $0x10,%esp
f0102bdf:	85 c0                	test   %eax,%eax
f0102be1:	75 07                	jne    f0102bea <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102be3:	e8 15 0e 01 00       	call   f01139fd <test_allocate_chunk>
f0102be8:	eb 46                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102bea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bed:	83 c0 04             	add    $0x4,%eax
f0102bf0:	8b 00                	mov    (%eax),%eax
f0102bf2:	83 ec 08             	sub    $0x8,%esp
f0102bf5:	68 07 51 13 f0       	push   $0xf0135107
f0102bfa:	50                   	push   %eax
f0102bfb:	e8 04 e1 02 00       	call   f0130d04 <strcmp>
f0102c00:	83 c4 10             	add    $0x10,%esp
f0102c03:	85 c0                	test   %eax,%eax
f0102c05:	75 07                	jne    f0102c0e <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c07:	e8 a0 16 01 00       	call   f01142ac <test_calculate_required_frames>
f0102c0c:	eb 22                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c11:	83 c0 04             	add    $0x4,%eax
f0102c14:	8b 00                	mov    (%eax),%eax
f0102c16:	83 ec 08             	sub    $0x8,%esp
f0102c19:	68 16 51 13 f0       	push   $0xf0135116
f0102c1e:	50                   	push   %eax
f0102c1f:	e8 e0 e0 02 00       	call   f0130d04 <strcmp>
f0102c24:	83 c4 10             	add    $0x10,%esp
f0102c27:	85 c0                	test   %eax,%eax
f0102c29:	75 05                	jne    f0102c30 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c2b:	e8 f0 1e 01 00       	call   f0114b20 <test_calculate_allocated_space>
	}
	return 0;
f0102c30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c35:	c9                   	leave  
f0102c36:	c3                   	ret    

f0102c37 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102c37:	55                   	push   %ebp
f0102c38:	89 e5                	mov    %esp,%ebp
f0102c3a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102c3d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c41:	74 1a                	je     f0102c5d <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102c43:	83 ec 0c             	sub    $0xc,%esp
f0102c46:	68 28 51 13 f0       	push   $0xf0135128
f0102c4b:	e8 32 e0 ff ff       	call   f0100c82 <cprintf>
f0102c50:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c53:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c58:	e9 e1 00 00 00       	jmp    f0102d3e <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c60:	83 c0 04             	add    $0x4,%eax
f0102c63:	8b 00                	mov    (%eax),%eax
f0102c65:	83 ec 08             	sub    $0x8,%esp
f0102c68:	68 5e 51 13 f0       	push   $0xf013515e
f0102c6d:	50                   	push   %eax
f0102c6e:	e8 91 e0 02 00       	call   f0130d04 <strcmp>
f0102c73:	83 c4 10             	add    $0x10,%esp
f0102c76:	85 c0                	test   %eax,%eax
f0102c78:	75 0a                	jne    f0102c84 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102c7a:	e8 fe de 00 00       	call   f0110b7d <test_pt_set_page_permissions>
f0102c7f:	e9 b5 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 04             	add    $0x4,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 08             	sub    $0x8,%esp
f0102c8f:	68 66 51 13 f0       	push   $0xf0135166
f0102c94:	50                   	push   %eax
f0102c95:	e8 6a e0 02 00       	call   f0130d04 <strcmp>
f0102c9a:	83 c4 10             	add    $0x10,%esp
f0102c9d:	85 c0                	test   %eax,%eax
f0102c9f:	75 0a                	jne    f0102cab <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102ca1:	e8 3a e1 00 00       	call   f0110de0 <test_pt_set_page_permissions_invalid_va>
f0102ca6:	e9 8e 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102cab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cae:	83 c0 04             	add    $0x4,%eax
f0102cb1:	8b 00                	mov    (%eax),%eax
f0102cb3:	83 ec 08             	sub    $0x8,%esp
f0102cb6:	68 6e 51 13 f0       	push   $0xf013516e
f0102cbb:	50                   	push   %eax
f0102cbc:	e8 43 e0 02 00       	call   f0130d04 <strcmp>
f0102cc1:	83 c4 10             	add    $0x10,%esp
f0102cc4:	85 c0                	test   %eax,%eax
f0102cc6:	75 07                	jne    f0102ccf <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102cc8:	e8 5c e1 00 00       	call   f0110e29 <test_pt_get_page_permissions>
f0102ccd:	eb 6a                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ccf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd2:	83 c0 04             	add    $0x4,%eax
f0102cd5:	8b 00                	mov    (%eax),%eax
f0102cd7:	83 ec 08             	sub    $0x8,%esp
f0102cda:	68 76 51 13 f0       	push   $0xf0135176
f0102cdf:	50                   	push   %eax
f0102ce0:	e8 1f e0 02 00       	call   f0130d04 <strcmp>
f0102ce5:	83 c4 10             	add    $0x10,%esp
f0102ce8:	85 c0                	test   %eax,%eax
f0102cea:	75 07                	jne    f0102cf3 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102cec:	e8 7c e2 00 00       	call   f0110f6d <test_pt_clear_page_table_entry>
f0102cf1:	eb 46                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf6:	83 c0 04             	add    $0x4,%eax
f0102cf9:	8b 00                	mov    (%eax),%eax
f0102cfb:	83 ec 08             	sub    $0x8,%esp
f0102cfe:	68 7d 51 13 f0       	push   $0xf013517d
f0102d03:	50                   	push   %eax
f0102d04:	e8 fb df 02 00       	call   f0130d04 <strcmp>
f0102d09:	83 c4 10             	add    $0x10,%esp
f0102d0c:	85 c0                	test   %eax,%eax
f0102d0e:	75 07                	jne    f0102d17 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d10:	e8 b1 e3 00 00       	call   f01110c6 <test_pt_clear_page_table_entry_invalid_va>
f0102d15:	eb 22                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d1a:	83 c0 04             	add    $0x4,%eax
f0102d1d:	8b 00                	mov    (%eax),%eax
f0102d1f:	83 ec 08             	sub    $0x8,%esp
f0102d22:	68 84 51 13 f0       	push   $0xf0135184
f0102d27:	50                   	push   %eax
f0102d28:	e8 d7 df 02 00       	call   f0130d04 <strcmp>
f0102d2d:	83 c4 10             	add    $0x10,%esp
f0102d30:	85 c0                	test   %eax,%eax
f0102d32:	75 05                	jne    f0102d39 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102d34:	e8 c5 e3 00 00       	call   f01110fe <test_virtual_to_physical>
	}
	return 0;
f0102d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d3e:	c9                   	leave  
f0102d3f:	c3                   	ret    

f0102d40 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102d40:	55                   	push   %ebp
f0102d41:	89 e5                	mov    %esp,%ebp
f0102d43:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102d46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d49:	83 c0 08             	add    $0x8,%eax
f0102d4c:	8b 00                	mov    (%eax),%eax
f0102d4e:	83 ec 08             	sub    $0x8,%esp
f0102d51:	68 88 51 13 f0       	push   $0xf0135188
f0102d56:	50                   	push   %eax
f0102d57:	e8 a8 df 02 00       	call   f0130d04 <strcmp>
f0102d5c:	83 c4 10             	add    $0x10,%esp
f0102d5f:	85 c0                	test   %eax,%eax
f0102d61:	75 20                	jne    f0102d83 <command_test_kheap+0x43>
f0102d63:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102d67:	74 1a                	je     f0102d83 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102d69:	83 ec 0c             	sub    $0xc,%esp
f0102d6c:	68 90 51 13 f0       	push   $0xf0135190
f0102d71:	e8 0c df ff ff       	call   f0100c82 <cprintf>
f0102d76:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d7e:	e9 33 03 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d86:	83 c0 08             	add    $0x8,%eax
f0102d89:	8b 00                	mov    (%eax),%eax
f0102d8b:	83 ec 08             	sub    $0x8,%esp
f0102d8e:	68 88 51 13 f0       	push   $0xf0135188
f0102d93:	50                   	push   %eax
f0102d94:	e8 6b df 02 00       	call   f0130d04 <strcmp>
f0102d99:	83 c4 10             	add    $0x10,%esp
f0102d9c:	85 c0                	test   %eax,%eax
f0102d9e:	74 20                	je     f0102dc0 <command_test_kheap+0x80>
f0102da0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da4:	74 1a                	je     f0102dc0 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102da6:	83 ec 0c             	sub    $0xc,%esp
f0102da9:	68 e0 51 13 f0       	push   $0xf01351e0
f0102dae:	e8 cf de ff ff       	call   f0100c82 <cprintf>
f0102db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dbb:	e9 f6 02 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dc3:	83 c0 04             	add    $0x4,%eax
f0102dc6:	8b 00                	mov    (%eax),%eax
f0102dc8:	83 ec 08             	sub    $0x8,%esp
f0102dcb:	68 8c 50 13 f0       	push   $0xf013508c
f0102dd0:	50                   	push   %eax
f0102dd1:	e8 2e df 02 00       	call   f0130d04 <strcmp>
f0102dd6:	83 c4 10             	add    $0x10,%esp
f0102dd9:	85 c0                	test   %eax,%eax
f0102ddb:	74 1d                	je     f0102dfa <command_test_kheap+0xba>
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 04             	add    $0x4,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 8f 50 13 f0       	push   $0xf013508f
f0102ded:	50                   	push   %eax
f0102dee:	e8 11 df 02 00       	call   f0130d04 <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 1a                	jne    f0102e14 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102dfa:	e8 60 e0 ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102dff:	83 ec 0c             	sub    $0xc,%esp
f0102e02:	68 28 4c 13 f0       	push   $0xf0134c28
f0102e07:	e8 76 de ff ff       	call   f0100c82 <cprintf>
f0102e0c:	83 c4 10             	add    $0x10,%esp
f0102e0f:	e9 a0 00 00 00       	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102e14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e17:	83 c0 04             	add    $0x4,%eax
f0102e1a:	8b 00                	mov    (%eax),%eax
f0102e1c:	83 ec 08             	sub    $0x8,%esp
f0102e1f:	68 92 50 13 f0       	push   $0xf0135092
f0102e24:	50                   	push   %eax
f0102e25:	e8 da de 02 00       	call   f0130d04 <strcmp>
f0102e2a:	83 c4 10             	add    $0x10,%esp
f0102e2d:	85 c0                	test   %eax,%eax
f0102e2f:	74 1d                	je     f0102e4e <command_test_kheap+0x10e>
f0102e31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e34:	83 c0 04             	add    $0x4,%eax
f0102e37:	8b 00                	mov    (%eax),%eax
f0102e39:	83 ec 08             	sub    $0x8,%esp
f0102e3c:	68 95 50 13 f0       	push   $0xf0135095
f0102e41:	50                   	push   %eax
f0102e42:	e8 bd de 02 00       	call   f0130d04 <strcmp>
f0102e47:	83 c4 10             	add    $0x10,%esp
f0102e4a:	85 c0                	test   %eax,%eax
f0102e4c:	75 17                	jne    f0102e65 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102e4e:	e8 1c e0 ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102e53:	83 ec 0c             	sub    $0xc,%esp
f0102e56:	68 58 4c 13 f0       	push   $0xf0134c58
f0102e5b:	e8 22 de ff ff       	call   f0100c82 <cprintf>
f0102e60:	83 c4 10             	add    $0x10,%esp
f0102e63:	eb 4f                	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102e65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e68:	83 c0 04             	add    $0x4,%eax
f0102e6b:	8b 00                	mov    (%eax),%eax
f0102e6d:	83 ec 08             	sub    $0x8,%esp
f0102e70:	68 98 50 13 f0       	push   $0xf0135098
f0102e75:	50                   	push   %eax
f0102e76:	e8 89 de 02 00       	call   f0130d04 <strcmp>
f0102e7b:	83 c4 10             	add    $0x10,%esp
f0102e7e:	85 c0                	test   %eax,%eax
f0102e80:	74 1d                	je     f0102e9f <command_test_kheap+0x15f>
f0102e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e85:	83 c0 04             	add    $0x4,%eax
f0102e88:	8b 00                	mov    (%eax),%eax
f0102e8a:	83 ec 08             	sub    $0x8,%esp
f0102e8d:	68 9b 50 13 f0       	push   $0xf013509b
f0102e92:	50                   	push   %eax
f0102e93:	e8 6c de 02 00       	call   f0130d04 <strcmp>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	85 c0                	test   %eax,%eax
f0102e9d:	75 15                	jne    f0102eb4 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102e9f:	e8 db df ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102ea4:	83 ec 0c             	sub    $0xc,%esp
f0102ea7:	68 84 4c 13 f0       	push   $0xf0134c84
f0102eac:	e8 d1 dd ff ff       	call   f0100c82 <cprintf>
f0102eb1:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eb7:	83 c0 08             	add    $0x8,%eax
f0102eba:	8b 00                	mov    (%eax),%eax
f0102ebc:	83 ec 08             	sub    $0x8,%esp
f0102ebf:	68 88 51 13 f0       	push   $0xf0135188
f0102ec4:	50                   	push   %eax
f0102ec5:	e8 3a de 02 00       	call   f0130d04 <strcmp>
f0102eca:	83 c4 10             	add    $0x10,%esp
f0102ecd:	85 c0                	test   %eax,%eax
f0102ecf:	0f 85 13 01 00 00    	jne    f0102fe8 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ed8:	83 c0 0c             	add    $0xc,%eax
f0102edb:	8b 00                	mov    (%eax),%eax
f0102edd:	83 ec 04             	sub    $0x4,%esp
f0102ee0:	6a 0a                	push   $0xa
f0102ee2:	6a 00                	push   $0x0
f0102ee4:	50                   	push   %eax
f0102ee5:	e8 6e e0 02 00       	call   f0130f58 <strtol>
f0102eea:	83 c4 10             	add    $0x10,%esp
f0102eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ef0:	e8 be df ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0102ef5:	84 c0                	test   %al,%al
f0102ef7:	74 54                	je     f0102f4d <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102ef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102efd:	75 1a                	jne    f0102f19 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102eff:	83 ec 0c             	sub    $0xc,%esp
f0102f02:	68 fc 4e 13 f0       	push   $0xf0134efc
f0102f07:	e8 76 dd ff ff       	call   f0100c82 <cprintf>
f0102f0c:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f0f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f14:	e9 9d 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f19:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f1d:	75 0a                	jne    f0102f29 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f1f:	e8 c3 41 01 00       	call   f01170e7 <test_kmalloc>
f0102f24:	e9 b5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f29:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f2d:	75 0a                	jne    f0102f39 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102f2f:	e8 3c 90 01 00       	call   f011bf70 <test_kmalloc_firstfit1>
f0102f34:	e9 a5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f39:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f3d:	0f 85 9b 00 00 00    	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102f43:	e8 ca a3 01 00       	call   f011d312 <test_kmalloc_firstfit2>
f0102f48:	e9 91 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102f4d:	e8 76 df ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102f52:	84 c0                	test   %al,%al
f0102f54:	74 47                	je     f0102f9d <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102f56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f5a:	75 1a                	jne    f0102f76 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102f5c:	83 ec 0c             	sub    $0xc,%esp
f0102f5f:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102f64:	e8 19 dd ff ff       	call   f0100c82 <cprintf>
f0102f69:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f71:	e9 40 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102f76:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f7a:	75 07                	jne    f0102f83 <command_test_kheap+0x243>
				test_kmalloc();
f0102f7c:	e8 66 41 01 00       	call   f01170e7 <test_kmalloc>
f0102f81:	eb 5b                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f83:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f87:	75 07                	jne    f0102f90 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102f89:	e8 ac 6a 01 00       	call   f0119a3a <test_kmalloc_bestfit1>
f0102f8e:	eb 4e                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f90:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f94:	75 48                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102f96:	e8 f5 7c 01 00       	call   f011ac90 <test_kmalloc_bestfit2>
f0102f9b:	eb 41                	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102f9d:	e8 3b df ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f0102fa2:	84 c0                	test   %al,%al
f0102fa4:	74 38                	je     f0102fde <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102fa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102faa:	75 1a                	jne    f0102fc6 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102fac:	83 ec 0c             	sub    $0xc,%esp
f0102faf:	68 9c 4f 13 f0       	push   $0xf0134f9c
f0102fb4:	e8 c9 dc ff ff       	call   f0100c82 <cprintf>
f0102fb9:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fc1:	e9 f0 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102fc6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fca:	75 07                	jne    f0102fd3 <command_test_kheap+0x293>
				test_kmalloc();
f0102fcc:	e8 16 41 01 00       	call   f01170e7 <test_kmalloc>
f0102fd1:	eb 0b                	jmp    f0102fde <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102fd3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fd7:	75 05                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102fd9:	e8 67 53 01 00       	call   f0118345 <test_kmalloc_nextfit>
		}
		return 0;
f0102fde:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fe3:	e9 ce 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102feb:	83 c0 08             	add    $0x8,%eax
f0102fee:	8b 00                	mov    (%eax),%eax
f0102ff0:	83 ec 08             	sub    $0x8,%esp
f0102ff3:	68 24 52 13 f0       	push   $0xf0135224
f0102ff8:	50                   	push   %eax
f0102ff9:	e8 06 dd 02 00       	call   f0130d04 <strcmp>
f0102ffe:	83 c4 10             	add    $0x10,%esp
f0103001:	85 c0                	test   %eax,%eax
f0103003:	75 28                	jne    f010302d <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103005:	e8 be de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010300a:	84 c0                	test   %al,%al
f010300c:	75 09                	jne    f0103017 <command_test_kheap+0x2d7>
f010300e:	e8 a0 de ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0103013:	84 c0                	test   %al,%al
f0103015:	74 07                	je     f010301e <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0103017:	e8 2d e9 01 00       	call   f0121949 <test_kfree_bestfirstfit>
f010301c:	eb 05                	jmp    f0103023 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010301e:	e8 d4 c7 01 00       	call   f011f7f7 <test_kfree>
		}
		return 0;
f0103023:	b8 00 00 00 00       	mov    $0x0,%eax
f0103028:	e9 89 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010302d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103030:	83 c0 08             	add    $0x8,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 08             	sub    $0x8,%esp
f0103038:	68 2a 52 13 f0       	push   $0xf013522a
f010303d:	50                   	push   %eax
f010303e:	e8 c1 dc 02 00       	call   f0130d04 <strcmp>
f0103043:	83 c4 10             	add    $0x10,%esp
f0103046:	85 c0                	test   %eax,%eax
f0103048:	75 0c                	jne    f0103056 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f010304a:	e8 f6 02 02 00       	call   f0123345 <test_kheap_phys_addr>
		return 0;
f010304f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103054:	eb 60                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0103056:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103059:	83 c0 08             	add    $0x8,%eax
f010305c:	8b 00                	mov    (%eax),%eax
f010305e:	83 ec 08             	sub    $0x8,%esp
f0103061:	68 34 52 13 f0       	push   $0xf0135234
f0103066:	50                   	push   %eax
f0103067:	e8 98 dc 02 00       	call   f0130d04 <strcmp>
f010306c:	83 c4 10             	add    $0x10,%esp
f010306f:	85 c0                	test   %eax,%eax
f0103071:	75 0c                	jne    f010307f <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0103073:	e8 9d 17 02 00       	call   f0124815 <test_kheap_virt_addr>
		return 0;
f0103078:	b8 00 00 00 00       	mov    $0x0,%eax
f010307d:	eb 37                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010307f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103082:	83 c0 08             	add    $0x8,%eax
f0103085:	8b 00                	mov    (%eax),%eax
f0103087:	83 ec 08             	sub    $0x8,%esp
f010308a:	68 3e 52 13 f0       	push   $0xf013523e
f010308f:	50                   	push   %eax
f0103090:	e8 6f dc 02 00       	call   f0130d04 <strcmp>
f0103095:	83 c4 10             	add    $0x10,%esp
f0103098:	85 c0                	test   %eax,%eax
f010309a:	75 15                	jne    f01030b1 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f010309c:	e8 27 de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01030a1:	84 c0                	test   %al,%al
f01030a3:	74 05                	je     f01030aa <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f01030a5:	e8 0f a6 02 00       	call   f012d6b9 <test_krealloc_BF>
		}
		return 0;
f01030aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01030af:	eb 05                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	return 0;
f01030b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030b6:	c9                   	leave  
f01030b7:	c3                   	ret    

f01030b8 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01030b8:	55                   	push   %ebp
f01030b9:	89 e5                	mov    %esp,%ebp
f01030bb:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030be:	8b 45 08             	mov    0x8(%ebp),%eax
f01030c1:	05 00 14 00 00       	add    $0x1400,%eax
f01030c6:	c1 e0 03             	shl    $0x3,%eax
f01030c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030cc:	83 ec 04             	sub    $0x4,%esp
f01030cf:	6a 08                	push   $0x8
f01030d1:	ff 75 0c             	pushl  0xc(%ebp)
f01030d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01030d7:	e8 6f e2 02 00       	call   f013134b <ide_read>
f01030dc:	83 c4 10             	add    $0x10,%esp
f01030df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01030e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01030e5:	c9                   	leave  
f01030e6:	c3                   	ret    

f01030e7 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01030e7:	55                   	push   %ebp
f01030e8:	89 e5                	mov    %esp,%ebp
f01030ea:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01030f0:	05 00 14 00 00       	add    $0x1400,%eax
f01030f5:	c1 e0 03             	shl    $0x3,%eax
f01030f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030fb:	83 ec 04             	sub    $0x4,%esp
f01030fe:	6a 08                	push   $0x8
f0103100:	ff 75 0c             	pushl  0xc(%ebp)
f0103103:	ff 75 f4             	pushl  -0xc(%ebp)
f0103106:	e8 80 e3 02 00       	call   f013148b <ide_write>
f010310b:	83 c4 10             	add    $0x10,%esp
f010310e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103111:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103115:	74 14                	je     f010312b <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103117:	83 ec 04             	sub    $0x4,%esp
f010311a:	68 48 52 13 f0       	push   $0xf0135248
f010311f:	6a 2e                	push   $0x2e
f0103121:	68 5f 52 13 f0       	push   $0xf013525f
f0103126:	e8 d0 d0 ff ff       	call   f01001fb <_panic>
	return success;
f010312b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010312e:	c9                   	leave  
f010312f:	c3                   	ret    

f0103130 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103130:	55                   	push   %ebp
f0103131:	89 e5                	mov    %esp,%ebp
f0103133:	53                   	push   %ebx
f0103134:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103137:	c7 05 b8 7b 65 f0 00 	movl   $0x0,0xf0657bb8
f010313e:	00 00 00 
f0103141:	c7 05 bc 7b 65 f0 00 	movl   $0x0,0xf0657bbc
f0103148:	00 00 00 
f010314b:	c7 05 c4 7b 65 f0 00 	movl   $0x0,0xf0657bc4
f0103152:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103155:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010315c:	e9 e8 00 00 00       	jmp    f0103249 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103161:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010316a:	89 d0                	mov    %edx,%eax
f010316c:	01 c0                	add    %eax,%eax
f010316e:	01 d0                	add    %edx,%eax
f0103170:	c1 e0 03             	shl    $0x3,%eax
f0103173:	01 c8                	add    %ecx,%eax
f0103175:	83 ec 0c             	sub    $0xc,%esp
f0103178:	50                   	push   %eax
f0103179:	e8 82 36 00 00       	call   f0106800 <initialize_frame_info>
f010317e:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103181:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103187:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010318a:	89 d0                	mov    %edx,%eax
f010318c:	01 c0                	add    %eax,%eax
f010318e:	01 d0                	add    %edx,%eax
f0103190:	c1 e0 03             	shl    $0x3,%eax
f0103193:	01 c8                	add    %ecx,%eax
f0103195:	85 c0                	test   %eax,%eax
f0103197:	75 14                	jne    f01031ad <initialize_disk_page_file+0x7d>
f0103199:	83 ec 04             	sub    $0x4,%esp
f010319c:	68 7c 52 13 f0       	push   $0xf013527c
f01031a1:	6a 59                	push   $0x59
f01031a3:	68 5f 52 13 f0       	push   $0xf013525f
f01031a8:	e8 4e d0 ff ff       	call   f01001fb <_panic>
f01031ad:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031b6:	89 d0                	mov    %edx,%eax
f01031b8:	01 c0                	add    %eax,%eax
f01031ba:	01 d0                	add    %edx,%eax
f01031bc:	c1 e0 03             	shl    $0x3,%eax
f01031bf:	01 c8                	add    %ecx,%eax
f01031c1:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031c7:	89 10                	mov    %edx,(%eax)
f01031c9:	8b 00                	mov    (%eax),%eax
f01031cb:	85 c0                	test   %eax,%eax
f01031cd:	74 1f                	je     f01031ee <initialize_disk_page_file+0xbe>
f01031cf:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031d5:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01031db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01031de:	89 c8                	mov    %ecx,%eax
f01031e0:	01 c0                	add    %eax,%eax
f01031e2:	01 c8                	add    %ecx,%eax
f01031e4:	c1 e0 03             	shl    $0x3,%eax
f01031e7:	01 d8                	add    %ebx,%eax
f01031e9:	89 42 04             	mov    %eax,0x4(%edx)
f01031ec:	eb 19                	jmp    f0103207 <initialize_disk_page_file+0xd7>
f01031ee:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f7:	89 d0                	mov    %edx,%eax
f01031f9:	01 c0                	add    %eax,%eax
f01031fb:	01 d0                	add    %edx,%eax
f01031fd:	c1 e0 03             	shl    $0x3,%eax
f0103200:	01 c8                	add    %ecx,%eax
f0103202:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f0103207:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f010320d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103210:	89 d0                	mov    %edx,%eax
f0103212:	01 c0                	add    %eax,%eax
f0103214:	01 d0                	add    %edx,%eax
f0103216:	c1 e0 03             	shl    $0x3,%eax
f0103219:	01 c8                	add    %ecx,%eax
f010321b:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103220:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103226:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103229:	89 d0                	mov    %edx,%eax
f010322b:	01 c0                	add    %eax,%eax
f010322d:	01 d0                	add    %edx,%eax
f010322f:	c1 e0 03             	shl    $0x3,%eax
f0103232:	01 c8                	add    %ecx,%eax
f0103234:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010323b:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f0103240:	40                   	inc    %eax
f0103241:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103246:	ff 45 f4             	incl   -0xc(%ebp)
f0103249:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103250:	0f 8e 0b ff ff ff    	jle    f0103161 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103256:	90                   	nop
f0103257:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010325a:	c9                   	leave  
f010325b:	c3                   	ret    

f010325c <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f010325c:	55                   	push   %ebp
f010325d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010325f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103262:	8b 15 dc 7a 65 f0    	mov    0xf0657adc,%edx
f0103268:	29 d0                	sub    %edx,%eax
f010326a:	c1 f8 03             	sar    $0x3,%eax
f010326d:	89 c2                	mov    %eax,%edx
f010326f:	89 d0                	mov    %edx,%eax
f0103271:	c1 e0 02             	shl    $0x2,%eax
f0103274:	01 d0                	add    %edx,%eax
f0103276:	c1 e0 02             	shl    $0x2,%eax
f0103279:	01 d0                	add    %edx,%eax
f010327b:	c1 e0 02             	shl    $0x2,%eax
f010327e:	01 d0                	add    %edx,%eax
f0103280:	89 c1                	mov    %eax,%ecx
f0103282:	c1 e1 08             	shl    $0x8,%ecx
f0103285:	01 c8                	add    %ecx,%eax
f0103287:	89 c1                	mov    %eax,%ecx
f0103289:	c1 e1 10             	shl    $0x10,%ecx
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	01 c0                	add    %eax,%eax
f0103290:	01 d0                	add    %edx,%eax
}
f0103292:	5d                   	pop    %ebp
f0103293:	c3                   	ret    

f0103294 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103294:	55                   	push   %ebp
f0103295:	89 e5                	mov    %esp,%ebp
f0103297:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010329a:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f010329f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f01032a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032a6:	75 0a                	jne    f01032b2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f01032a8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01032ad:	e9 a7 00 00 00       	jmp    f0103359 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f01032b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032b6:	75 14                	jne    f01032cc <allocate_disk_frame+0x38>
f01032b8:	83 ec 04             	sub    $0x4,%esp
f01032bb:	68 9f 52 13 f0       	push   $0xf013529f
f01032c0:	6a 78                	push   $0x78
f01032c2:	68 5f 52 13 f0       	push   $0xf013525f
f01032c7:	e8 2f cf ff ff       	call   f01001fb <_panic>
f01032cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032cf:	8b 00                	mov    (%eax),%eax
f01032d1:	85 c0                	test   %eax,%eax
f01032d3:	74 10                	je     f01032e5 <allocate_disk_frame+0x51>
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8b 00                	mov    (%eax),%eax
f01032da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032dd:	8b 52 04             	mov    0x4(%edx),%edx
f01032e0:	89 50 04             	mov    %edx,0x4(%eax)
f01032e3:	eb 0b                	jmp    f01032f0 <allocate_disk_frame+0x5c>
f01032e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e8:	8b 40 04             	mov    0x4(%eax),%eax
f01032eb:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01032f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032f3:	8b 40 04             	mov    0x4(%eax),%eax
f01032f6:	85 c0                	test   %eax,%eax
f01032f8:	74 0f                	je     f0103309 <allocate_disk_frame+0x75>
f01032fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032fd:	8b 40 04             	mov    0x4(%eax),%eax
f0103300:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103303:	8b 12                	mov    (%edx),%edx
f0103305:	89 10                	mov    %edx,(%eax)
f0103307:	eb 0a                	jmp    f0103313 <allocate_disk_frame+0x7f>
f0103309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010330c:	8b 00                	mov    (%eax),%eax
f010330e:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103316:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010331c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010331f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103326:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010332b:	48                   	dec    %eax
f010332c:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
	initialize_frame_info(ptr_frame_info);
f0103331:	83 ec 0c             	sub    $0xc,%esp
f0103334:	ff 75 f4             	pushl  -0xc(%ebp)
f0103337:	e8 c4 34 00 00       	call   f0106800 <initialize_frame_info>
f010333c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010333f:	83 ec 0c             	sub    $0xc,%esp
f0103342:	ff 75 f4             	pushl  -0xc(%ebp)
f0103345:	e8 12 ff ff ff       	call   f010325c <to_disk_frame_number>
f010334a:	83 c4 10             	add    $0x10,%esp
f010334d:	89 c2                	mov    %eax,%edx
f010334f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103352:	89 10                	mov    %edx,(%eax)
	return 0;
f0103354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103359:	c9                   	leave  
f010335a:	c3                   	ret    

f010335b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010335b:	55                   	push   %ebp
f010335c:	89 e5                	mov    %esp,%ebp
f010335e:	53                   	push   %ebx
f010335f:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103362:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103366:	0f 84 ca 00 00 00    	je     f0103436 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010336c:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103372:	8b 55 08             	mov    0x8(%ebp),%edx
f0103375:	89 d0                	mov    %edx,%eax
f0103377:	01 c0                	add    %eax,%eax
f0103379:	01 d0                	add    %edx,%eax
f010337b:	c1 e0 03             	shl    $0x3,%eax
f010337e:	01 c8                	add    %ecx,%eax
f0103380:	85 c0                	test   %eax,%eax
f0103382:	75 17                	jne    f010339b <free_disk_frame+0x40>
f0103384:	83 ec 04             	sub    $0x4,%esp
f0103387:	68 7c 52 13 f0       	push   $0xf013527c
f010338c:	68 85 00 00 00       	push   $0x85
f0103391:	68 5f 52 13 f0       	push   $0xf013525f
f0103396:	e8 60 ce ff ff       	call   f01001fb <_panic>
f010339b:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033a1:	8b 55 08             	mov    0x8(%ebp),%edx
f01033a4:	89 d0                	mov    %edx,%eax
f01033a6:	01 c0                	add    %eax,%eax
f01033a8:	01 d0                	add    %edx,%eax
f01033aa:	c1 e0 03             	shl    $0x3,%eax
f01033ad:	01 c8                	add    %ecx,%eax
f01033af:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033b5:	89 10                	mov    %edx,(%eax)
f01033b7:	8b 00                	mov    (%eax),%eax
f01033b9:	85 c0                	test   %eax,%eax
f01033bb:	74 1f                	je     f01033dc <free_disk_frame+0x81>
f01033bd:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033c3:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01033c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01033cc:	89 c8                	mov    %ecx,%eax
f01033ce:	01 c0                	add    %eax,%eax
f01033d0:	01 c8                	add    %ecx,%eax
f01033d2:	c1 e0 03             	shl    $0x3,%eax
f01033d5:	01 d8                	add    %ebx,%eax
f01033d7:	89 42 04             	mov    %eax,0x4(%edx)
f01033da:	eb 19                	jmp    f01033f5 <free_disk_frame+0x9a>
f01033dc:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033e2:	8b 55 08             	mov    0x8(%ebp),%edx
f01033e5:	89 d0                	mov    %edx,%eax
f01033e7:	01 c0                	add    %eax,%eax
f01033e9:	01 d0                	add    %edx,%eax
f01033eb:	c1 e0 03             	shl    $0x3,%eax
f01033ee:	01 c8                	add    %ecx,%eax
f01033f0:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01033f5:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033fb:	8b 55 08             	mov    0x8(%ebp),%edx
f01033fe:	89 d0                	mov    %edx,%eax
f0103400:	01 c0                	add    %eax,%eax
f0103402:	01 d0                	add    %edx,%eax
f0103404:	c1 e0 03             	shl    $0x3,%eax
f0103407:	01 c8                	add    %ecx,%eax
f0103409:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f010340e:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103414:	8b 55 08             	mov    0x8(%ebp),%edx
f0103417:	89 d0                	mov    %edx,%eax
f0103419:	01 c0                	add    %eax,%eax
f010341b:	01 d0                	add    %edx,%eax
f010341d:	c1 e0 03             	shl    $0x3,%eax
f0103420:	01 c8                	add    %ecx,%eax
f0103422:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103429:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010342e:	40                   	inc    %eax
f010342f:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
f0103434:	eb 01                	jmp    f0103437 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103436:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103437:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010343a:	c9                   	leave  
f010343b:	c3                   	ret    

f010343c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010343c:	55                   	push   %ebp
f010343d:	89 e5                	mov    %esp,%ebp
f010343f:	53                   	push   %ebx
f0103440:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103443:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103446:	c1 e8 16             	shr    $0x16,%eax
f0103449:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103450:	8b 45 08             	mov    0x8(%ebp),%eax
f0103453:	01 d0                	add    %edx,%eax
f0103455:	8b 00                	mov    (%eax),%eax
f0103457:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010345a:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103461:	77 1d                	ja     f0103480 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f0103463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103466:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010346b:	83 ec 0c             	sub    $0xc,%esp
f010346e:	50                   	push   %eax
f010346f:	e8 73 45 00 00       	call   f01079e7 <kheap_virtual_address>
f0103474:	83 c4 10             	add    $0x10,%esp
f0103477:	89 c2                	mov    %eax,%edx
f0103479:	8b 45 14             	mov    0x14(%ebp),%eax
f010347c:	89 10                	mov    %edx,(%eax)
f010347e:	eb 44                	jmp    f01034c4 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103480:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103483:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103488:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010348b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010348e:	c1 e8 0c             	shr    $0xc,%eax
f0103491:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103494:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0103499:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010349c:	72 17                	jb     f01034b5 <get_disk_page_table+0x79>
f010349e:	ff 75 f0             	pushl  -0x10(%ebp)
f01034a1:	68 c0 52 13 f0       	push   $0xf01352c0
f01034a6:	68 92 00 00 00       	push   $0x92
f01034ab:	68 5f 52 13 f0       	push   $0xf013525f
f01034b0:	e8 46 cd ff ff       	call   f01001fb <_panic>
f01034b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01034b8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01034bd:	89 c2                	mov    %eax,%edx
f01034bf:	8b 45 14             	mov    0x14(%ebp),%eax
f01034c2:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f01034c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01034c8:	0f 85 80 00 00 00    	jne    f010354e <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f01034ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01034d2:	74 6a                	je     f010353e <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f01034d4:	83 ec 0c             	sub    $0xc,%esp
f01034d7:	68 00 10 00 00       	push   $0x1000
f01034dc:	e8 1d 43 00 00       	call   f01077fe <kmalloc>
f01034e1:	83 c4 10             	add    $0x10,%esp
f01034e4:	89 c2                	mov    %eax,%edx
f01034e6:	8b 45 14             	mov    0x14(%ebp),%eax
f01034e9:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f01034eb:	8b 45 14             	mov    0x14(%ebp),%eax
f01034ee:	8b 00                	mov    (%eax),%eax
f01034f0:	85 c0                	test   %eax,%eax
f01034f2:	75 07                	jne    f01034fb <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f01034f4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01034f9:	eb 58                	jmp    f0103553 <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01034fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034fe:	c1 e8 16             	shr    $0x16,%eax
f0103501:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103508:	8b 45 08             	mov    0x8(%ebp),%eax
f010350b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010350e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103511:	8b 00                	mov    (%eax),%eax
f0103513:	83 ec 0c             	sub    $0xc,%esp
f0103516:	50                   	push   %eax
f0103517:	e8 f7 44 00 00       	call   f0107a13 <kheap_physical_address>
f010351c:	83 c4 10             	add    $0x10,%esp
f010351f:	83 c8 01             	or     $0x1,%eax
f0103522:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103524:	8b 45 14             	mov    0x14(%ebp),%eax
f0103527:	8b 00                	mov    (%eax),%eax
f0103529:	83 ec 04             	sub    $0x4,%esp
f010352c:	68 00 10 00 00       	push   $0x1000
f0103531:	6a 00                	push   $0x0
f0103533:	50                   	push   %eax
f0103534:	e8 ad d8 02 00       	call   f0130de6 <memset>
f0103539:	83 c4 10             	add    $0x10,%esp
f010353c:	eb 10                	jmp    f010354e <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010353e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103547:	b8 00 00 00 00       	mov    $0x0,%eax
f010354c:	eb 05                	jmp    f0103553 <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010354e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103553:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103556:	c9                   	leave  
f0103557:	c3                   	ret    

f0103558 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103558:	55                   	push   %ebp
f0103559:	89 e5                	mov    %esp,%ebp
f010355b:	83 ec 28             	sub    $0x28,%esp
f010355e:	8b 45 10             	mov    0x10(%ebp),%eax
f0103561:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103564:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103568:	74 75                	je     f01035df <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010356a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103574:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103579:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010357c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010357f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103584:	f7 75 f4             	divl   -0xc(%ebp)
f0103587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010358a:	29 d0                	sub    %edx,%eax
f010358c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010358f:	73 32                	jae    f01035c3 <pf_add_empty_env_page+0x6b>
f0103591:	8b 45 08             	mov    0x8(%ebp),%eax
f0103594:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f010359a:	b8 00 00 00 00       	mov    $0x0,%eax
f010359f:	29 d0                	sub    %edx,%eax
f01035a1:	c1 e0 0c             	shl    $0xc,%eax
f01035a4:	2d 00 20 40 11       	sub    $0x11402000,%eax
f01035a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01035ac:	76 15                	jbe    f01035c3 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f01035ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01035b1:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01035b7:	8d 50 01             	lea    0x1(%eax),%edx
f01035ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01035bd:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f01035c3:	a1 60 7b 65 f0       	mov    0xf0657b60,%eax
f01035c8:	83 ec 04             	sub    $0x4,%esp
f01035cb:	50                   	push   %eax
f01035cc:	ff 75 0c             	pushl  0xc(%ebp)
f01035cf:	ff 75 08             	pushl  0x8(%ebp)
f01035d2:	e8 b2 00 00 00       	call   f0103689 <pf_add_env_page>
f01035d7:	83 c4 10             	add    $0x10,%esp
f01035da:	e9 a8 00 00 00       	jmp    f0103687 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01035df:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035e6:	76 19                	jbe    f0103601 <pf_add_empty_env_page+0xa9>
f01035e8:	68 f0 52 13 f0       	push   $0xf01352f0
f01035ed:	68 16 53 13 f0       	push   $0xf0135316
f01035f2:	68 d1 00 00 00       	push   $0xd1
f01035f7:	68 5f 52 13 f0       	push   $0xf013525f
f01035fc:	e8 fa cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103601:	8b 45 08             	mov    0x8(%ebp),%eax
f0103604:	83 c0 64             	add    $0x64,%eax
f0103607:	83 ec 08             	sub    $0x8,%esp
f010360a:	50                   	push   %eax
f010360b:	ff 75 08             	pushl  0x8(%ebp)
f010360e:	e8 10 06 00 00       	call   f0103c23 <get_disk_page_directory>
f0103613:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103616:	8b 45 08             	mov    0x8(%ebp),%eax
f0103619:	8b 40 64             	mov    0x64(%eax),%eax
f010361c:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010361f:	52                   	push   %edx
f0103620:	6a 01                	push   $0x1
f0103622:	ff 75 0c             	pushl  0xc(%ebp)
f0103625:	50                   	push   %eax
f0103626:	e8 11 fe ff ff       	call   f010343c <get_disk_page_table>
f010362b:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010362e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103631:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103634:	c1 ea 0c             	shr    $0xc,%edx
f0103637:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010363d:	c1 e2 02             	shl    $0x2,%edx
f0103640:	01 d0                	add    %edx,%eax
f0103642:	8b 00                	mov    (%eax),%eax
f0103644:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103647:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010364a:	85 c0                	test   %eax,%eax
f010364c:	75 34                	jne    f0103682 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010364e:	83 ec 0c             	sub    $0xc,%esp
f0103651:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103654:	50                   	push   %eax
f0103655:	e8 3a fc ff ff       	call   f0103294 <allocate_disk_frame>
f010365a:	83 c4 10             	add    $0x10,%esp
f010365d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103660:	75 07                	jne    f0103669 <pf_add_empty_env_page+0x111>
f0103662:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103667:	eb 1e                	jmp    f0103687 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103669:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010366c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010366f:	c1 ea 0c             	shr    $0xc,%edx
f0103672:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103678:	c1 e2 02             	shl    $0x2,%edx
f010367b:	01 c2                	add    %eax,%edx
f010367d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103680:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103682:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103687:	c9                   	leave  
f0103688:	c3                   	ret    

f0103689 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103689:	55                   	push   %ebp
f010368a:	89 e5                	mov    %esp,%ebp
f010368c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010368f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103696:	76 19                	jbe    f01036b1 <pf_add_env_page+0x28>
f0103698:	68 f0 52 13 f0       	push   $0xf01352f0
f010369d:	68 16 53 13 f0       	push   $0xf0135316
f01036a2:	68 e6 00 00 00       	push   $0xe6
f01036a7:	68 5f 52 13 f0       	push   $0xf013525f
f01036ac:	e8 4a cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01036b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b4:	83 c0 64             	add    $0x64,%eax
f01036b7:	83 ec 08             	sub    $0x8,%esp
f01036ba:	50                   	push   %eax
f01036bb:	ff 75 08             	pushl  0x8(%ebp)
f01036be:	e8 60 05 00 00       	call   f0103c23 <get_disk_page_directory>
f01036c3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c9:	8b 40 64             	mov    0x64(%eax),%eax
f01036cc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01036cf:	52                   	push   %edx
f01036d0:	6a 01                	push   $0x1
f01036d2:	ff 75 0c             	pushl  0xc(%ebp)
f01036d5:	50                   	push   %eax
f01036d6:	e8 61 fd ff ff       	call   f010343c <get_disk_page_table>
f01036db:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036e4:	c1 ea 0c             	shr    $0xc,%edx
f01036e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036ed:	c1 e2 02             	shl    $0x2,%edx
f01036f0:	01 d0                	add    %edx,%eax
f01036f2:	8b 00                	mov    (%eax),%eax
f01036f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01036f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036fa:	85 c0                	test   %eax,%eax
f01036fc:	75 34                	jne    f0103732 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036fe:	83 ec 0c             	sub    $0xc,%esp
f0103701:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103704:	50                   	push   %eax
f0103705:	e8 8a fb ff ff       	call   f0103294 <allocate_disk_frame>
f010370a:	83 c4 10             	add    $0x10,%esp
f010370d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103710:	75 07                	jne    f0103719 <pf_add_env_page+0x90>
f0103712:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103717:	eb 31                	jmp    f010374a <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010371c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010371f:	c1 ea 0c             	shr    $0xc,%edx
f0103722:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103728:	c1 e2 02             	shl    $0x2,%edx
f010372b:	01 c2                	add    %eax,%edx
f010372d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103730:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103732:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103735:	83 ec 08             	sub    $0x8,%esp
f0103738:	ff 75 10             	pushl  0x10(%ebp)
f010373b:	50                   	push   %eax
f010373c:	e8 a6 f9 ff ff       	call   f01030e7 <write_disk_page>
f0103741:	83 c4 10             	add    $0x10,%esp
f0103744:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103747:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010374a:	c9                   	leave  
f010374b:	c3                   	ret    

f010374c <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010374c:	55                   	push   %ebp
f010374d:	89 e5                	mov    %esp,%ebp
f010374f:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103752:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103759:	76 19                	jbe    f0103774 <pf_update_env_page+0x28>
f010375b:	68 f0 52 13 f0       	push   $0xf01352f0
f0103760:	68 16 53 13 f0       	push   $0xf0135316
f0103765:	68 08 01 00 00       	push   $0x108
f010376a:	68 5f 52 13 f0       	push   $0xf013525f
f010376f:	e8 87 ca ff ff       	call   f01001fb <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103774:	8b 45 08             	mov    0x8(%ebp),%eax
f0103777:	83 c0 64             	add    $0x64,%eax
f010377a:	83 ec 08             	sub    $0x8,%esp
f010377d:	50                   	push   %eax
f010377e:	ff 75 08             	pushl  0x8(%ebp)
f0103781:	e8 9d 04 00 00       	call   f0103c23 <get_disk_page_directory>
f0103786:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 9e fc ff ff       	call   f010343c <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f01037a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037a4:	85 c0                	test   %eax,%eax
f01037a6:	74 29                	je     f01037d1 <pf_update_env_page+0x85>
f01037a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037ab:	85 c0                	test   %eax,%eax
f01037ad:	0f 84 43 01 00 00    	je     f01038f6 <pf_update_env_page+0x1aa>
f01037b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037b6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037b9:	c1 ea 0c             	shr    $0xc,%edx
f01037bc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037c2:	c1 e2 02             	shl    $0x2,%edx
f01037c5:	01 d0                	add    %edx,%eax
f01037c7:	8b 00                	mov    (%eax),%eax
f01037c9:	85 c0                	test   %eax,%eax
f01037cb:	0f 85 25 01 00 00    	jne    f01038f6 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f01037d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f01037d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01037da:	85 c0                	test   %eax,%eax
f01037dc:	79 09                	jns    f01037e7 <pf_update_env_page+0x9b>
f01037de:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01037e5:	76 38                	jbe    f010381f <pf_update_env_page+0xd3>
f01037e7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01037ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037f1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01037f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01037f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103801:	f7 75 f0             	divl   -0x10(%ebp)
f0103804:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103807:	29 d0                	sub    %edx,%eax
f0103809:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010380c:	0f 87 cd 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
f0103812:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103819:	0f 87 c0 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010381f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103822:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103825:	83 ec 04             	sub    $0x4,%esp
f0103828:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010382b:	52                   	push   %edx
f010382c:	ff 75 0c             	pushl  0xc(%ebp)
f010382f:	50                   	push   %eax
f0103830:	e8 fa 34 00 00       	call   f0106d2f <get_frame_info>
f0103835:	83 c4 10             	add    $0x10,%esp
f0103838:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010383b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010383e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103841:	75 52                	jne    f0103895 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0103843:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103846:	83 ec 04             	sub    $0x4,%esp
f0103849:	50                   	push   %eax
f010384a:	ff 75 f4             	pushl  -0xc(%ebp)
f010384d:	ff 75 08             	pushl  0x8(%ebp)
f0103850:	e8 34 fe ff ff       	call   f0103689 <pf_add_env_page>
f0103855:	83 c4 10             	add    $0x10,%esp
f0103858:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010385b:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010385f:	75 17                	jne    f0103878 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103861:	83 ec 04             	sub    $0x4,%esp
f0103864:	68 2c 53 13 f0       	push   $0xf013532c
f0103869:	68 1d 01 00 00       	push   $0x11d
f010386e:	68 5f 52 13 f0       	push   $0xf013525f
f0103873:	e8 83 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103878:	8b 45 08             	mov    0x8(%ebp),%eax
f010387b:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103881:	8d 50 01             	lea    0x1(%eax),%edx
f0103884:	8b 45 08             	mov    0x8(%ebp),%eax
f0103887:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f010388d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103890:	e9 17 01 00 00       	jmp    f01039ac <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103895:	83 ec 04             	sub    $0x4,%esp
f0103898:	6a 00                	push   $0x0
f010389a:	ff 75 f4             	pushl  -0xc(%ebp)
f010389d:	ff 75 08             	pushl  0x8(%ebp)
f01038a0:	e8 b3 fc ff ff       	call   f0103558 <pf_add_empty_env_page>
f01038a5:	83 c4 10             	add    $0x10,%esp
f01038a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038ab:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038af:	75 17                	jne    f01038c8 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	68 58 53 13 f0       	push   $0xf0135358
f01038b9:	68 28 01 00 00       	push   $0x128
f01038be:	68 5f 52 13 f0       	push   $0xf013525f
f01038c3:	e8 33 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cb:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038d1:	8d 50 01             	lea    0x1(%eax),%edx
f01038d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01038d7:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f01038dd:	eb 17                	jmp    f01038f6 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01038df:	83 ec 04             	sub    $0x4,%esp
f01038e2:	68 a4 53 13 f0       	push   $0xf01353a4
f01038e7:	68 2f 01 00 00       	push   $0x12f
f01038ec:	68 5f 52 13 f0       	push   $0xf013525f
f01038f1:	e8 05 c9 ff ff       	call   f01001fb <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 31 fb ff ff       	call   f010343c <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010390e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103911:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103914:	c1 ea 0c             	shr    $0xc,%edx
f0103917:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010391d:	c1 e2 02             	shl    $0x2,%edx
f0103920:	01 d0                	add    %edx,%eax
f0103922:	8b 00                	mov    (%eax),%eax
f0103924:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f0103927:	8b 45 08             	mov    0x8(%ebp),%eax
f010392a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010392d:	6a 00                	push   $0x0
f010392f:	68 00 00 80 ef       	push   $0xef800000
f0103934:	ff 75 10             	pushl  0x10(%ebp)
f0103937:	50                   	push   %eax
f0103938:	e8 2d 33 00 00       	call   f0106c6a <map_frame>
f010393d:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f0103940:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f0103947:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010394a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010394f:	83 ec 08             	sub    $0x8,%esp
f0103952:	50                   	push   %eax
f0103953:	ff 75 e0             	pushl  -0x20(%ebp)
f0103956:	e8 8c f7 ff ff       	call   f01030e7 <write_disk_page>
f010395b:	83 c4 10             	add    $0x10,%esp
f010395e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0103961:	8b 45 10             	mov    0x10(%ebp),%eax
f0103964:	8b 40 08             	mov    0x8(%eax),%eax
f0103967:	40                   	inc    %eax
f0103968:	8b 55 10             	mov    0x10(%ebp),%edx
f010396b:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f010396f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103972:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103975:	83 ec 08             	sub    $0x8,%esp
f0103978:	68 00 00 80 ef       	push   $0xef800000
f010397d:	50                   	push   %eax
f010397e:	e8 1c 34 00 00       	call   f0106d9f <unmap_frame>
f0103983:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103986:	8b 45 10             	mov    0x10(%ebp),%eax
f0103989:	8b 40 08             	mov    0x8(%eax),%eax
f010398c:	48                   	dec    %eax
f010398d:	8b 55 10             	mov    0x10(%ebp),%edx
f0103990:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103994:	8b 45 08             	mov    0x8(%ebp),%eax
f0103997:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f010399d:	8d 50 01             	lea    0x1(%eax),%edx
f01039a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a3:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f01039a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01039ac:	c9                   	leave  
f01039ad:	c3                   	ret    

f01039ae <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01039ae:	55                   	push   %ebp
f01039af:	89 e5                	mov    %esp,%ebp
f01039b1:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01039b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01039ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039c2:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01039c8:	8b 40 64             	mov    0x64(%eax),%eax
f01039cb:	85 c0                	test   %eax,%eax
f01039cd:	75 0a                	jne    f01039d9 <pf_read_env_page+0x2b>
f01039cf:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039d4:	e9 90 00 00 00       	jmp    f0103a69 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01039d9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01039df:	8b 40 64             	mov    0x64(%eax),%eax
f01039e2:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01039e5:	51                   	push   %ecx
f01039e6:	6a 00                	push   $0x0
f01039e8:	52                   	push   %edx
f01039e9:	50                   	push   %eax
f01039ea:	e8 4d fa ff ff       	call   f010343c <get_disk_page_table>
f01039ef:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039f5:	85 c0                	test   %eax,%eax
f01039f7:	75 07                	jne    f0103a00 <pf_read_env_page+0x52>
f01039f9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039fe:	eb 69                	jmp    f0103a69 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a03:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a06:	c1 ea 0c             	shr    $0xc,%edx
f0103a09:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a0f:	c1 e2 02             	shl    $0x2,%edx
f0103a12:	01 d0                	add    %edx,%eax
f0103a14:	8b 00                	mov    (%eax),%eax
f0103a16:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a1d:	75 07                	jne    f0103a26 <pf_read_env_page+0x78>
f0103a1f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a24:	eb 43                	jmp    f0103a69 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a26:	83 ec 08             	sub    $0x8,%esp
f0103a29:	ff 75 0c             	pushl  0xc(%ebp)
f0103a2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103a2f:	e8 84 f6 ff ff       	call   f01030b8 <read_disk_page>
f0103a34:	83 c4 10             	add    $0x10,%esp
f0103a37:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103a3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a40:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a43:	6a 40                	push   $0x40
f0103a45:	6a 00                	push   $0x0
f0103a47:	52                   	push   %edx
f0103a48:	50                   	push   %eax
f0103a49:	e8 cf 40 00 00       	call   f0107b1d <pt_set_page_permissions>
f0103a4e:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103a5a:	8d 50 01             	lea    0x1(%eax),%edx
f0103a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a60:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103a66:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103a69:	c9                   	leave  
f0103a6a:	c3                   	ret    

f0103a6b <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103a6b:	55                   	push   %ebp
f0103a6c:	89 e5                	mov    %esp,%ebp
f0103a6e:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a74:	8b 40 64             	mov    0x64(%eax),%eax
f0103a77:	85 c0                	test   %eax,%eax
f0103a79:	74 62                	je     f0103add <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a7e:	8b 40 64             	mov    0x64(%eax),%eax
f0103a81:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103a84:	52                   	push   %edx
f0103a85:	6a 00                	push   $0x0
f0103a87:	ff 75 0c             	pushl  0xc(%ebp)
f0103a8a:	50                   	push   %eax
f0103a8b:	e8 ac f9 ff ff       	call   f010343c <get_disk_page_table>
f0103a90:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a96:	85 c0                	test   %eax,%eax
f0103a98:	74 46                	je     f0103ae0 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aa0:	c1 ea 0c             	shr    $0xc,%edx
f0103aa3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aa9:	c1 e2 02             	shl    $0x2,%edx
f0103aac:	01 d0                	add    %edx,%eax
f0103aae:	8b 00                	mov    (%eax),%eax
f0103ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ab6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ab9:	c1 ea 0c             	shr    $0xc,%edx
f0103abc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ac2:	c1 e2 02             	shl    $0x2,%edx
f0103ac5:	01 d0                	add    %edx,%eax
f0103ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103acd:	83 ec 0c             	sub    $0xc,%esp
f0103ad0:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ad3:	e8 83 f8 ff ff       	call   f010335b <free_disk_frame>
f0103ad8:	83 c4 10             	add    $0x10,%esp
f0103adb:	eb 04                	jmp    f0103ae1 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103add:	90                   	nop
f0103ade:	eb 01                	jmp    f0103ae1 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103ae0:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103ae1:	c9                   	leave  
f0103ae2:	c3                   	ret    

f0103ae3 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103ae3:	55                   	push   %ebp
f0103ae4:	89 e5                	mov    %esp,%ebp
f0103ae6:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ae9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103af0:	e9 b8 00 00 00       	jmp    f0103bad <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af8:	8b 40 64             	mov    0x64(%eax),%eax
f0103afb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103afe:	c1 e2 02             	shl    $0x2,%edx
f0103b01:	01 d0                	add    %edx,%eax
f0103b03:	8b 00                	mov    (%eax),%eax
f0103b05:	83 e0 01             	and    $0x1,%eax
f0103b08:	85 c0                	test   %eax,%eax
f0103b0a:	0f 84 99 00 00 00    	je     f0103ba9 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b13:	8b 40 64             	mov    0x64(%eax),%eax
f0103b16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b19:	c1 e2 02             	shl    $0x2,%edx
f0103b1c:	01 d0                	add    %edx,%eax
f0103b1e:	8b 00                	mov    (%eax),%eax
f0103b20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b28:	83 ec 0c             	sub    $0xc,%esp
f0103b2b:	ff 75 ec             	pushl  -0x14(%ebp)
f0103b2e:	e8 b4 3e 00 00       	call   f01079e7 <kheap_virtual_address>
f0103b33:	83 c4 10             	add    $0x10,%esp
f0103b36:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103b40:	eb 3a                	jmp    f0103b7c <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b4f:	01 d0                	add    %edx,%eax
f0103b51:	8b 00                	mov    (%eax),%eax
f0103b53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b63:	01 d0                	add    %edx,%eax
f0103b65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103b6b:	83 ec 0c             	sub    $0xc,%esp
f0103b6e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103b71:	e8 e5 f7 ff ff       	call   f010335b <free_disk_frame>
f0103b76:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b79:	ff 45 f0             	incl   -0x10(%ebp)
f0103b7c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103b83:	76 bd                	jbe    f0103b42 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b88:	8b 40 64             	mov    0x64(%eax),%eax
f0103b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8e:	c1 e2 02             	shl    $0x2,%edx
f0103b91:	01 d0                	add    %edx,%eax
f0103b93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103b99:	83 ec 0c             	sub    $0xc,%esp
f0103b9c:	ff 75 e8             	pushl  -0x18(%ebp)
f0103b9f:	e8 1c 3d 00 00       	call   f01078c0 <kfree>
f0103ba4:	83 c4 10             	add    $0x10,%esp
f0103ba7:	eb 01                	jmp    f0103baa <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103ba9:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103baa:	ff 45 f4             	incl   -0xc(%ebp)
f0103bad:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103bb4:	0f 86 3b ff ff ff    	jbe    f0103af5 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bbd:	8b 40 64             	mov    0x64(%eax),%eax
f0103bc0:	83 ec 0c             	sub    $0xc,%esp
f0103bc3:	50                   	push   %eax
f0103bc4:	e8 f7 3c 00 00       	call   f01078c0 <kfree>
f0103bc9:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bcf:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103bd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd9:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be3:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103be6:	85 c0                	test   %eax,%eax
f0103be8:	74 36                	je     f0103c20 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103bea:	83 ec 0c             	sub    $0xc,%esp
f0103bed:	ff 75 08             	pushl  0x8(%ebp)
f0103bf0:	e8 05 03 00 00       	call   f0103efa <__pf_remove_env_all_tables>
f0103bf5:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103bf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bfb:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103bfe:	83 ec 0c             	sub    $0xc,%esp
f0103c01:	50                   	push   %eax
f0103c02:	e8 b9 3c 00 00       	call   f01078c0 <kfree>
f0103c07:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c0d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103c14:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c17:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c1e:	eb 01                	jmp    f0103c21 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c20:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c21:	c9                   	leave  
f0103c22:	c3                   	ret    

f0103c23 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c23:	55                   	push   %ebp
f0103c24:	89 e5                	mov    %esp,%ebp
f0103c26:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c2c:	8b 50 64             	mov    0x64(%eax),%edx
f0103c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c32:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103c34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	75 58                	jne    f0103c95 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103c3d:	83 ec 0c             	sub    $0xc,%esp
f0103c40:	68 00 10 00 00       	push   $0x1000
f0103c45:	e8 b4 3b 00 00       	call   f01077fe <kmalloc>
f0103c4a:	83 c4 10             	add    $0x10,%esp
f0103c4d:	89 c2                	mov    %eax,%edx
f0103c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c52:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c57:	8b 00                	mov    (%eax),%eax
f0103c59:	85 c0                	test   %eax,%eax
f0103c5b:	75 07                	jne    f0103c64 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103c5d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103c62:	eb 36                	jmp    f0103c9a <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103c64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c67:	8b 00                	mov    (%eax),%eax
f0103c69:	83 ec 0c             	sub    $0xc,%esp
f0103c6c:	50                   	push   %eax
f0103c6d:	e8 a1 3d 00 00       	call   f0107a13 <kheap_physical_address>
f0103c72:	83 c4 10             	add    $0x10,%esp
f0103c75:	89 c2                	mov    %eax,%edx
f0103c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c7a:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c80:	8b 00                	mov    (%eax),%eax
f0103c82:	83 ec 04             	sub    $0x4,%esp
f0103c85:	68 00 10 00 00       	push   $0x1000
f0103c8a:	6a 00                	push   $0x0
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 54 d1 02 00       	call   f0130de6 <memset>
f0103c92:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103c95:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103c9a:	c9                   	leave  
f0103c9b:	c3                   	ret    

f0103c9c <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103c9c:	55                   	push   %ebp
f0103c9d:	89 e5                	mov    %esp,%ebp
f0103c9f:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103ca2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103ca9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb0:	eb 78                	jmp    f0103d2a <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103cb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb5:	8b 40 64             	mov    0x64(%eax),%eax
f0103cb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cbb:	c1 e2 02             	shl    $0x2,%edx
f0103cbe:	01 d0                	add    %edx,%eax
f0103cc0:	8b 00                	mov    (%eax),%eax
f0103cc2:	83 e0 01             	and    $0x1,%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	74 5d                	je     f0103d26 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103cc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0103ccf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cd2:	c1 e2 02             	shl    $0x2,%edx
f0103cd5:	01 d0                	add    %edx,%eax
f0103cd7:	8b 00                	mov    (%eax),%eax
f0103cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103cde:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	ff 75 e8             	pushl  -0x18(%ebp)
f0103ce7:	e8 fb 3c 00 00       	call   f01079e7 <kheap_virtual_address>
f0103cec:	83 c4 10             	add    $0x10,%esp
f0103cef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103cf2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103cf9:	eb 20                	jmp    f0103d1b <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103cfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d08:	01 d0                	add    %edx,%eax
f0103d0a:	8b 00                	mov    (%eax),%eax
f0103d0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d13:	74 03                	je     f0103d18 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d15:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d18:	ff 45 ec             	incl   -0x14(%ebp)
f0103d1b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d22:	76 d7                	jbe    f0103cfb <pf_calculate_allocated_pages+0x5f>
f0103d24:	eb 01                	jmp    f0103d27 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d26:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d27:	ff 45 f4             	incl   -0xc(%ebp)
f0103d2a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103d31:	0f 86 7b ff ff ff    	jbe    f0103cb2 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103d3a:	c9                   	leave  
f0103d3b:	c3                   	ret    

f0103d3c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103d3c:	55                   	push   %ebp
f0103d3d:	89 e5                	mov    %esp,%ebp
f0103d3f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103d42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d49:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f0103d4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d51:	eb 0b                	jmp    f0103d5e <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103d53:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d56:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d5e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d62:	74 07                	je     f0103d6b <pf_calculate_free_frames+0x2f>
f0103d64:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	eb 05                	jmp    f0103d70 <pf_calculate_free_frames+0x34>
f0103d6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d70:	a3 c0 7b 65 f0       	mov    %eax,0xf0657bc0
f0103d75:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d7a:	85 c0                	test   %eax,%eax
f0103d7c:	75 d5                	jne    f0103d53 <pf_calculate_free_frames+0x17>
f0103d7e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d82:	75 cf                	jne    f0103d53 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103d84:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103d87:	c9                   	leave  
f0103d88:	c3                   	ret    

f0103d89 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103d89:	55                   	push   %ebp
f0103d8a:	89 e5                	mov    %esp,%ebp
f0103d8c:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103d8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d92:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d9d:	8b 00                	mov    (%eax),%eax
f0103d9f:	85 c0                	test   %eax,%eax
f0103da1:	75 58                	jne    f0103dfb <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103da3:	83 ec 0c             	sub    $0xc,%esp
f0103da6:	68 00 10 00 00       	push   $0x1000
f0103dab:	e8 4e 3a 00 00       	call   f01077fe <kmalloc>
f0103db0:	83 c4 10             	add    $0x10,%esp
f0103db3:	89 c2                	mov    %eax,%edx
f0103db5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103db8:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103dba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dbd:	8b 00                	mov    (%eax),%eax
f0103dbf:	85 c0                	test   %eax,%eax
f0103dc1:	75 07                	jne    f0103dca <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103dc3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103dc8:	eb 36                	jmp    f0103e00 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103dca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dcd:	8b 00                	mov    (%eax),%eax
f0103dcf:	83 ec 0c             	sub    $0xc,%esp
f0103dd2:	50                   	push   %eax
f0103dd3:	e8 3b 3c 00 00       	call   f0107a13 <kheap_physical_address>
f0103dd8:	83 c4 10             	add    $0x10,%esp
f0103ddb:	89 c2                	mov    %eax,%edx
f0103ddd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de0:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103de3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103de6:	8b 00                	mov    (%eax),%eax
f0103de8:	83 ec 04             	sub    $0x4,%esp
f0103deb:	68 00 10 00 00       	push   $0x1000
f0103df0:	6a 00                	push   $0x0
f0103df2:	50                   	push   %eax
f0103df3:	e8 ee cf 02 00       	call   f0130de6 <memset>
f0103df8:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e00:	c9                   	leave  
f0103e01:	c3                   	ret    

f0103e02 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e02:	55                   	push   %ebp
f0103e03:	89 e5                	mov    %esp,%ebp
f0103e05:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e08:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e0f:	76 19                	jbe    f0103e2a <__pf_write_env_table+0x28>
f0103e11:	68 f0 52 13 f0       	push   $0xf01352f0
f0103e16:	68 16 53 13 f0       	push   $0xf0135316
f0103e1b:	68 5a 02 00 00       	push   $0x25a
f0103e20:	68 5f 52 13 f0       	push   $0xf013525f
f0103e25:	e8 d1 c3 ff ff       	call   f01001fb <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e2d:	83 c0 6c             	add    $0x6c,%eax
f0103e30:	83 ec 08             	sub    $0x8,%esp
f0103e33:	50                   	push   %eax
f0103e34:	ff 75 08             	pushl  0x8(%ebp)
f0103e37:	e8 4d ff ff ff       	call   f0103d89 <get_disk_table_directory>
f0103e3c:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e42:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e45:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e48:	c1 ea 16             	shr    $0x16,%edx
f0103e4b:	c1 e2 02             	shl    $0x2,%edx
f0103e4e:	01 d0                	add    %edx,%eax
f0103e50:	8b 00                	mov    (%eax),%eax
f0103e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e58:	85 c0                	test   %eax,%eax
f0103e5a:	75 31                	jne    f0103e8d <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e5c:	83 ec 0c             	sub    $0xc,%esp
f0103e5f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e62:	50                   	push   %eax
f0103e63:	e8 2c f4 ff ff       	call   f0103294 <allocate_disk_frame>
f0103e68:	83 c4 10             	add    $0x10,%esp
f0103e6b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e6e:	75 07                	jne    f0103e77 <__pf_write_env_table+0x75>
f0103e70:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e75:	eb 2e                	jmp    f0103ea5 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e7a:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e7d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e80:	c1 ea 16             	shr    $0x16,%edx
f0103e83:	c1 e2 02             	shl    $0x2,%edx
f0103e86:	01 c2                	add    %eax,%edx
f0103e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e8b:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e90:	83 ec 08             	sub    $0x8,%esp
f0103e93:	ff 75 10             	pushl  0x10(%ebp)
f0103e96:	50                   	push   %eax
f0103e97:	e8 4b f2 ff ff       	call   f01030e7 <write_disk_page>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103ea5:	c9                   	leave  
f0103ea6:	c3                   	ret    

f0103ea7 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103ea7:	55                   	push   %ebp
f0103ea8:	89 e5                	mov    %esp,%ebp
f0103eaa:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ead:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eb3:	85 c0                	test   %eax,%eax
f0103eb5:	75 07                	jne    f0103ebe <__pf_read_env_table+0x17>
f0103eb7:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103ebc:	eb 3a                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ec1:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ec4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ec7:	c1 ea 16             	shr    $0x16,%edx
f0103eca:	c1 e2 02             	shl    $0x2,%edx
f0103ecd:	01 d0                	add    %edx,%eax
f0103ecf:	8b 00                	mov    (%eax),%eax
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ed4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ed8:	75 07                	jne    f0103ee1 <__pf_read_env_table+0x3a>
f0103eda:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103edf:	eb 17                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103ee1:	83 ec 08             	sub    $0x8,%esp
f0103ee4:	ff 75 10             	pushl  0x10(%ebp)
f0103ee7:	ff 75 f4             	pushl  -0xc(%ebp)
f0103eea:	e8 c9 f1 ff ff       	call   f01030b8 <read_disk_page>
f0103eef:	83 c4 10             	add    $0x10,%esp
f0103ef2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ef8:	c9                   	leave  
f0103ef9:	c3                   	ret    

f0103efa <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103efa:	55                   	push   %ebp
f0103efb:	89 e5                	mov    %esp,%ebp
f0103efd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f03:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f06:	85 c0                	test   %eax,%eax
f0103f08:	74 4c                	je     f0103f56 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f11:	eb 38                	jmp    f0103f4b <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f16:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f1c:	c1 e2 02             	shl    $0x2,%edx
f0103f1f:	01 d0                	add    %edx,%eax
f0103f21:	8b 00                	mov    (%eax),%eax
f0103f23:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f29:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f2f:	c1 e2 02             	shl    $0x2,%edx
f0103f32:	01 d0                	add    %edx,%eax
f0103f34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103f3a:	83 ec 0c             	sub    $0xc,%esp
f0103f3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f40:	e8 16 f4 ff ff       	call   f010335b <free_disk_frame>
f0103f45:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f48:	ff 45 f4             	incl   -0xc(%ebp)
f0103f4b:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103f52:	76 bf                	jbe    f0103f13 <__pf_remove_env_all_tables+0x19>
f0103f54:	eb 01                	jmp    f0103f57 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f56:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f57:	c9                   	leave  
f0103f58:	c3                   	ret    

f0103f59 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103f59:	55                   	push   %ebp
f0103f5a:	89 e5                	mov    %esp,%ebp
f0103f5c:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f63:	75 10                	jne    f0103f75 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f65:	83 ec 0c             	sub    $0xc,%esp
f0103f68:	68 20 54 13 f0       	push   $0xf0135420
f0103f6d:	e8 10 cd ff ff       	call   f0100c82 <cprintf>
f0103f72:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f78:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f7b:	85 c0                	test   %eax,%eax
f0103f7d:	74 3d                	je     f0103fbc <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f82:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f88:	c1 ea 16             	shr    $0x16,%edx
f0103f8b:	c1 e2 02             	shl    $0x2,%edx
f0103f8e:	01 d0                	add    %edx,%eax
f0103f90:	8b 00                	mov    (%eax),%eax
f0103f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f95:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f98:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f9e:	c1 ea 16             	shr    $0x16,%edx
f0103fa1:	c1 e2 02             	shl    $0x2,%edx
f0103fa4:	01 d0                	add    %edx,%eax
f0103fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103fac:	83 ec 0c             	sub    $0xc,%esp
f0103faf:	ff 75 f4             	pushl  -0xc(%ebp)
f0103fb2:	e8 a4 f3 ff ff       	call   f010335b <free_disk_frame>
f0103fb7:	83 c4 10             	add    $0x10,%esp
f0103fba:	eb 01                	jmp    f0103fbd <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fbc:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103fbd:	c9                   	leave  
f0103fbe:	c3                   	ret    

f0103fbf <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103fbf:	55                   	push   %ebp
f0103fc0:	89 e5                	mov    %esp,%ebp
f0103fc2:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103fc5:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103fcc:	eb 1f                	jmp    f0103fed <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd1:	83 ec 04             	sub    $0x4,%esp
f0103fd4:	6a 08                	push   $0x8
f0103fd6:	ff 75 08             	pushl  0x8(%ebp)
f0103fd9:	50                   	push   %eax
f0103fda:	e8 ac d4 02 00       	call   f013148b <ide_write>
f0103fdf:	83 c4 10             	add    $0x10,%esp
f0103fe2:	85 c0                	test   %eax,%eax
f0103fe4:	75 12                	jne    f0103ff8 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103fe6:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103fed:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103ff4:	7e d8                	jle    f0103fce <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff6:	eb 01                	jmp    f0103ff9 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103ff8:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff9:	90                   	nop
f0103ffa:	c9                   	leave  
f0103ffb:	c3                   	ret    

f0103ffc <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103ffc:	55                   	push   %ebp
f0103ffd:	89 e5                	mov    %esp,%ebp
f0103fff:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104002:	8b 45 08             	mov    0x8(%ebp),%eax
f0104005:	0f b6 c0             	movzbl %al,%eax
f0104008:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010400f:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104012:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104015:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104018:	ee                   	out    %al,(%dx)
f0104019:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104020:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104023:	89 c2                	mov    %eax,%edx
f0104025:	ec                   	in     (%dx),%al
f0104026:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104029:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f010402c:	0f b6 c0             	movzbl %al,%eax
}
f010402f:	c9                   	leave  
f0104030:	c3                   	ret    

f0104031 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104031:	55                   	push   %ebp
f0104032:	89 e5                	mov    %esp,%ebp
f0104034:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104037:	8b 45 08             	mov    0x8(%ebp),%eax
f010403a:	0f b6 c0             	movzbl %al,%eax
f010403d:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104044:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104047:	8a 45 f6             	mov    -0xa(%ebp),%al
f010404a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010404d:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f010404e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104051:	0f b6 c0             	movzbl %al,%eax
f0104054:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f010405b:	88 45 f7             	mov    %al,-0x9(%ebp)
f010405e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104061:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104064:	ee                   	out    %al,(%dx)
}
f0104065:	90                   	nop
f0104066:	c9                   	leave  
f0104067:	c3                   	ret    

f0104068 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104068:	55                   	push   %ebp
f0104069:	89 e5                	mov    %esp,%ebp
f010406b:	53                   	push   %ebx
f010406c:	83 ec 24             	sub    $0x24,%esp
f010406f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104072:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104075:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010407c:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104080:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104083:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104086:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104087:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010408b:	77 48                	ja     f01040d5 <kclock_start+0x6d>
f010408d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104094:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104098:	8a 45 ee             	mov    -0x12(%ebp),%al
f010409b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010409e:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010409f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040a3:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01040a8:	99                   	cltd   
f01040a9:	f7 fb                	idiv   %ebx
f01040ab:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01040b1:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040b5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01040ba:	99                   	cltd   
f01040bb:	f7 fb                	idiv   %ebx
f01040bd:	89 c3                	mov    %eax,%ebx
f01040bf:	89 c8                	mov    %ecx,%eax
f01040c1:	99                   	cltd   
f01040c2:	f7 fb                	idiv   %ebx
f01040c4:	0f b7 c0             	movzwl %ax,%eax
f01040c7:	83 ec 0c             	sub    $0xc,%esp
f01040ca:	50                   	push   %eax
f01040cb:	e8 b8 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01040d0:	83 c4 10             	add    $0x10,%esp
f01040d3:	eb 13                	jmp    f01040e8 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01040d5:	6a 35                	push   $0x35
f01040d7:	68 44 54 13 f0       	push   $0xf0135444
f01040dc:	6a 33                	push   $0x33
f01040de:	68 a0 54 13 f0       	push   $0xf01354a0
f01040e3:	e8 13 c1 ff ff       	call   f01001fb <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01040e8:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01040ee:	0f b7 c0             	movzwl %ax,%eax
f01040f1:	25 fe ff 00 00       	and    $0xfffe,%eax
f01040f6:	83 ec 0c             	sub    $0xc,%esp
f01040f9:	50                   	push   %eax
f01040fa:	e8 71 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f01040ff:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104102:	90                   	nop
f0104103:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104106:	c9                   	leave  
f0104107:	c3                   	ret    

f0104108 <kclock_stop>:

void
kclock_stop(void)
{
f0104108:	55                   	push   %ebp
f0104109:	89 e5                	mov    %esp,%ebp
f010410b:	83 ec 18             	sub    $0x18,%esp
f010410e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104115:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104119:	8a 45 f3             	mov    -0xd(%ebp),%al
f010411c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010411f:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	68 ff ff 00 00       	push   $0xffff
f0104128:	e8 43 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f010412d:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104130:	90                   	nop
f0104131:	c9                   	leave  
f0104132:	c3                   	ret    

f0104133 <kclock_resume>:

void
kclock_resume(void)
{
f0104133:	55                   	push   %ebp
f0104134:	89 e5                	mov    %esp,%ebp
f0104136:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104139:	e8 8c 01 00 00       	call   f01042ca <kclock_read_cnt0>
f010413e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104142:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104147:	77 06                	ja     f010414f <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104149:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010414f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104153:	83 e0 01             	and    $0x1,%eax
f0104156:	66 85 c0             	test   %ax,%ax
f0104159:	74 09                	je     f0104164 <kclock_resume+0x31>
		cnt0++;
f010415b:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010415f:	40                   	inc    %eax
f0104160:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104164:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010416b:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010416f:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104172:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104175:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104176:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f010417a:	83 ec 0c             	sub    $0xc,%esp
f010417d:	50                   	push   %eax
f010417e:	e8 05 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104183:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104186:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f010418c:	0f b7 c0             	movzwl %ax,%eax
f010418f:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104194:	83 ec 0c             	sub    $0xc,%esp
f0104197:	50                   	push   %eax
f0104198:	e8 d3 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f010419d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01041a0:	90                   	nop
f01041a1:	c9                   	leave  
f01041a2:	c3                   	ret    

f01041a3 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f01041a3:	55                   	push   %ebp
f01041a4:	89 e5                	mov    %esp,%ebp
f01041a6:	83 ec 28             	sub    $0x28,%esp
f01041a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01041ac:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01041af:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041b6:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041ba:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041c0:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041c1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01041c5:	83 ec 0c             	sub    $0xc,%esp
f01041c8:	50                   	push   %eax
f01041c9:	e8 ba 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01041ce:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041d1:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01041d7:	0f b7 c0             	movzwl %ax,%eax
f01041da:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041df:	83 ec 0c             	sub    $0xc,%esp
f01041e2:	50                   	push   %eax
f01041e3:	e8 88 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f01041e8:	83 c4 10             	add    $0x10,%esp

}
f01041eb:	90                   	nop
f01041ec:	c9                   	leave  
f01041ed:	c3                   	ret    

f01041ee <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01041ee:	55                   	push   %ebp
f01041ef:	89 e5                	mov    %esp,%ebp
f01041f1:	53                   	push   %ebx
f01041f2:	83 ec 24             	sub    $0x24,%esp
f01041f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01041f8:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041fb:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041ff:	77 6c                	ja     f010426d <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f0104201:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104205:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010420a:	99                   	cltd   
f010420b:	f7 fb                	idiv   %ebx
f010420d:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104213:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104217:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f010421c:	99                   	cltd   
f010421d:	f7 fb                	idiv   %ebx
f010421f:	89 c3                	mov    %eax,%ebx
f0104221:	89 c8                	mov    %ecx,%eax
f0104223:	99                   	cltd   
f0104224:	f7 fb                	idiv   %ebx
f0104226:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0104229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010422c:	25 01 00 00 80       	and    $0x80000001,%eax
f0104231:	85 c0                	test   %eax,%eax
f0104233:	79 05                	jns    f010423a <kclock_set_quantum+0x4c>
f0104235:	48                   	dec    %eax
f0104236:	83 c8 fe             	or     $0xfffffffe,%eax
f0104239:	40                   	inc    %eax
f010423a:	83 f8 01             	cmp    $0x1,%eax
f010423d:	75 03                	jne    f0104242 <kclock_set_quantum+0x54>
			cnt++;
f010423f:	ff 45 f4             	incl   -0xc(%ebp)
f0104242:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104249:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010424d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104250:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104253:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104254:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104257:	0f b7 c0             	movzwl %ax,%eax
f010425a:	83 ec 0c             	sub    $0xc,%esp
f010425d:	50                   	push   %eax
f010425e:	e8 25 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104263:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104266:	e8 9d fe ff ff       	call   f0104108 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f010426b:	eb 16                	jmp    f0104283 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010426d:	6a 35                	push   $0x35
f010426f:	68 44 54 13 f0       	push   $0xf0135444
f0104274:	68 c9 00 00 00       	push   $0xc9
f0104279:	68 a0 54 13 f0       	push   $0xf01354a0
f010427e:	e8 78 bf ff ff       	call   f01001fb <_panic>
	}
}
f0104283:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104286:	c9                   	leave  
f0104287:	c3                   	ret    

f0104288 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104288:	55                   	push   %ebp
f0104289:	89 e5                	mov    %esp,%ebp
f010428b:	83 ec 14             	sub    $0x14,%esp
f010428e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104291:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104298:	0f b6 c0             	movzbl %al,%eax
f010429b:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01042a2:	88 45 f6             	mov    %al,-0xa(%ebp)
f01042a5:	8a 45 f6             	mov    -0xa(%ebp),%al
f01042a8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01042ab:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01042ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042af:	66 c1 e8 08          	shr    $0x8,%ax
f01042b3:	0f b6 c0             	movzbl %al,%eax
f01042b6:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01042bd:	88 45 f7             	mov    %al,-0x9(%ebp)
f01042c0:	8a 45 f7             	mov    -0x9(%ebp),%al
f01042c3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01042c6:	ee                   	out    %al,(%dx)
}
f01042c7:	90                   	nop
f01042c8:	c9                   	leave  
f01042c9:	c3                   	ret    

f01042ca <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01042ca:	55                   	push   %ebp
f01042cb:	89 e5                	mov    %esp,%ebp
f01042cd:	83 ec 20             	sub    $0x20,%esp
f01042d0:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042da:	89 c2                	mov    %eax,%edx
f01042dc:	ec                   	in     (%dx),%al
f01042dd:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01042e0:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042e3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042e6:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042f0:	89 c2                	mov    %eax,%edx
f01042f2:	ec                   	in     (%dx),%al
f01042f3:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01042f6:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01042f9:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042fc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104300:	c1 e0 08             	shl    $0x8,%eax
f0104303:	89 c2                	mov    %eax,%edx
f0104305:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104309:	09 d0                	or     %edx,%eax
f010430b:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010430f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 30             	sub    $0x30,%esp
f010431a:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104321:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104324:	89 c2                	mov    %eax,%edx
f0104326:	ec                   	in     (%dx),%al
f0104327:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010432a:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f010432d:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104330:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104337:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010433b:	8a 45 dc             	mov    -0x24(%ebp),%al
f010433e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104341:	ee                   	out    %al,(%dx)
f0104342:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104349:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010434c:	89 c2                	mov    %eax,%edx
f010434e:	ec                   	in     (%dx),%al
f010434f:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104352:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104355:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104358:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010435f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104362:	89 c2                	mov    %eax,%edx
f0104364:	ec                   	in     (%dx),%al
f0104365:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104368:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010436b:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010436e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104372:	c1 e0 08             	shl    $0x8,%eax
f0104375:	89 c2                	mov    %eax,%edx
f0104377:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010437b:	09 d0                	or     %edx,%eax
f010437d:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104381:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104385:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f010438c:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010438f:	8a 45 df             	mov    -0x21(%ebp),%al
f0104392:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104395:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104396:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104399:	c9                   	leave  
f010439a:	c3                   	ret    

f010439b <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010439b:	55                   	push   %ebp
f010439c:	89 e5                	mov    %esp,%ebp
f010439e:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043a3:	85 c0                	test   %eax,%eax
f01043a5:	75 07                	jne    f01043ae <isSchedMethodRR+0x13>
f01043a7:	b8 01 00 00 00       	mov    $0x1,%eax
f01043ac:	eb 05                	jmp    f01043b3 <isSchedMethodRR+0x18>
f01043ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01043b3:	5d                   	pop    %ebp
f01043b4:	c3                   	ret    

f01043b5 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01043b5:	55                   	push   %ebp
f01043b6:	89 e5                	mov    %esp,%ebp
f01043b8:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043bd:	83 f8 01             	cmp    $0x1,%eax
f01043c0:	75 07                	jne    f01043c9 <isSchedMethodMLFQ+0x14>
f01043c2:	b8 01 00 00 00       	mov    $0x1,%eax
f01043c7:	eb 05                	jmp    f01043ce <isSchedMethodMLFQ+0x19>
f01043c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01043ce:	5d                   	pop    %ebp
f01043cf:	c3                   	ret    

f01043d0 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01043d0:	55                   	push   %ebp
f01043d1:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043d7:	74 1d                	je     f01043f6 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01043d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01043e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01043ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01043f6:	90                   	nop
f01043f7:	5d                   	pop    %ebp
f01043f8:	c3                   	ret    

f01043f9 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01043f9:	55                   	push   %ebp
f01043fa:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104400:	74 08                	je     f010440a <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104402:	8b 45 08             	mov    0x8(%ebp),%eax
f0104405:	8b 40 0c             	mov    0xc(%eax),%eax
f0104408:	eb 05                	jmp    f010440f <queue_size+0x16>
	}
	else
	{
		return 0;
f010440a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010440f:	5d                   	pop    %ebp
f0104410:	c3                   	ret    

f0104411 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104411:	55                   	push   %ebp
f0104412:	89 e5                	mov    %esp,%ebp
f0104414:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104417:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010441b:	74 66                	je     f0104483 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f010441d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104421:	75 14                	jne    f0104437 <enqueue+0x26>
f0104423:	83 ec 04             	sub    $0x4,%esp
f0104426:	68 b4 54 13 f0       	push   $0xf01354b4
f010442b:	6a 2f                	push   $0x2f
f010442d:	68 d7 54 13 f0       	push   $0xf01354d7
f0104432:	e8 c4 bd ff ff       	call   f01001fb <_panic>
f0104437:	8b 45 08             	mov    0x8(%ebp),%eax
f010443a:	8b 10                	mov    (%eax),%edx
f010443c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010443f:	89 50 44             	mov    %edx,0x44(%eax)
f0104442:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104445:	8b 40 44             	mov    0x44(%eax),%eax
f0104448:	85 c0                	test   %eax,%eax
f010444a:	74 0d                	je     f0104459 <enqueue+0x48>
f010444c:	8b 45 08             	mov    0x8(%ebp),%eax
f010444f:	8b 00                	mov    (%eax),%eax
f0104451:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104454:	89 50 48             	mov    %edx,0x48(%eax)
f0104457:	eb 09                	jmp    f0104462 <enqueue+0x51>
f0104459:	8b 45 08             	mov    0x8(%ebp),%eax
f010445c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010445f:	89 50 04             	mov    %edx,0x4(%eax)
f0104462:	8b 45 08             	mov    0x8(%ebp),%eax
f0104465:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104468:	89 10                	mov    %edx,(%eax)
f010446a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010446d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104474:	8b 45 08             	mov    0x8(%ebp),%eax
f0104477:	8b 40 0c             	mov    0xc(%eax),%eax
f010447a:	8d 50 01             	lea    0x1(%eax),%edx
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104483:	90                   	nop
f0104484:	c9                   	leave  
f0104485:	c3                   	ret    

f0104486 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104486:	55                   	push   %ebp
f0104487:	89 e5                	mov    %esp,%ebp
f0104489:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f010448c:	8b 45 08             	mov    0x8(%ebp),%eax
f010448f:	8b 40 04             	mov    0x4(%eax),%eax
f0104492:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104499:	0f 84 8a 00 00 00    	je     f0104529 <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f010449f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044a3:	75 14                	jne    f01044b9 <dequeue+0x33>
f01044a5:	83 ec 04             	sub    $0x4,%esp
f01044a8:	68 e8 54 13 f0       	push   $0xf01354e8
f01044ad:	6a 38                	push   $0x38
f01044af:	68 d7 54 13 f0       	push   $0xf01354d7
f01044b4:	e8 42 bd ff ff       	call   f01001fb <_panic>
f01044b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044bc:	8b 40 44             	mov    0x44(%eax),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 11                	je     f01044d4 <dequeue+0x4e>
f01044c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044c6:	8b 40 44             	mov    0x44(%eax),%eax
f01044c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044cc:	8b 52 48             	mov    0x48(%edx),%edx
f01044cf:	89 50 48             	mov    %edx,0x48(%eax)
f01044d2:	eb 0c                	jmp    f01044e0 <dequeue+0x5a>
f01044d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044d7:	8b 50 48             	mov    0x48(%eax),%edx
f01044da:	8b 45 08             	mov    0x8(%ebp),%eax
f01044dd:	89 50 04             	mov    %edx,0x4(%eax)
f01044e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044e3:	8b 40 48             	mov    0x48(%eax),%eax
f01044e6:	85 c0                	test   %eax,%eax
f01044e8:	74 11                	je     f01044fb <dequeue+0x75>
f01044ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ed:	8b 40 48             	mov    0x48(%eax),%eax
f01044f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044f3:	8b 52 44             	mov    0x44(%edx),%edx
f01044f6:	89 50 44             	mov    %edx,0x44(%eax)
f01044f9:	eb 0b                	jmp    f0104506 <dequeue+0x80>
f01044fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fe:	8b 50 44             	mov    0x44(%eax),%edx
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	89 10                	mov    %edx,(%eax)
f0104506:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104509:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104513:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451a:	8b 45 08             	mov    0x8(%ebp),%eax
f010451d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104520:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104523:	8b 45 08             	mov    0x8(%ebp),%eax
f0104526:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104529:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f0104534:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104538:	0f 84 8a 00 00 00    	je     f01045c8 <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f010453e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104542:	75 14                	jne    f0104558 <remove_from_queue+0x2a>
f0104544:	83 ec 04             	sub    $0x4,%esp
f0104547:	68 e8 54 13 f0       	push   $0xf01354e8
f010454c:	6a 41                	push   $0x41
f010454e:	68 d7 54 13 f0       	push   $0xf01354d7
f0104553:	e8 a3 bc ff ff       	call   f01001fb <_panic>
f0104558:	8b 45 0c             	mov    0xc(%ebp),%eax
f010455b:	8b 40 44             	mov    0x44(%eax),%eax
f010455e:	85 c0                	test   %eax,%eax
f0104560:	74 11                	je     f0104573 <remove_from_queue+0x45>
f0104562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104565:	8b 40 44             	mov    0x44(%eax),%eax
f0104568:	8b 55 0c             	mov    0xc(%ebp),%edx
f010456b:	8b 52 48             	mov    0x48(%edx),%edx
f010456e:	89 50 48             	mov    %edx,0x48(%eax)
f0104571:	eb 0c                	jmp    f010457f <remove_from_queue+0x51>
f0104573:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104576:	8b 50 48             	mov    0x48(%eax),%edx
f0104579:	8b 45 08             	mov    0x8(%ebp),%eax
f010457c:	89 50 04             	mov    %edx,0x4(%eax)
f010457f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104582:	8b 40 48             	mov    0x48(%eax),%eax
f0104585:	85 c0                	test   %eax,%eax
f0104587:	74 11                	je     f010459a <remove_from_queue+0x6c>
f0104589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010458c:	8b 40 48             	mov    0x48(%eax),%eax
f010458f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104592:	8b 52 44             	mov    0x44(%edx),%edx
f0104595:	89 50 44             	mov    %edx,0x44(%eax)
f0104598:	eb 0b                	jmp    f01045a5 <remove_from_queue+0x77>
f010459a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010459d:	8b 50 44             	mov    0x44(%eax),%edx
f01045a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a3:	89 10                	mov    %edx,(%eax)
f01045a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045a8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045b2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01045bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01045c8:	90                   	nop
f01045c9:	c9                   	leave  
f01045ca:	c3                   	ret    

f01045cb <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01045cb:	55                   	push   %ebp
f01045cc:	89 e5                	mov    %esp,%ebp
f01045ce:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f01045d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 00                	mov    (%eax),%eax
f01045dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045e0:	eb 19                	jmp    f01045fb <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f01045e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045e5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01045e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01045eb:	75 05                	jne    f01045f2 <find_env_in_queue+0x27>
		{
			return ptr_env;
f01045ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045f0:	eb 37                	jmp    f0104629 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01045f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f5:	8b 40 08             	mov    0x8(%eax),%eax
f01045f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045fb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045ff:	74 08                	je     f0104609 <find_env_in_queue+0x3e>
f0104601:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104604:	8b 40 44             	mov    0x44(%eax),%eax
f0104607:	eb 05                	jmp    f010460e <find_env_in_queue+0x43>
f0104609:	b8 00 00 00 00       	mov    $0x0,%eax
f010460e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104611:	89 42 08             	mov    %eax,0x8(%edx)
f0104614:	8b 45 08             	mov    0x8(%ebp),%eax
f0104617:	8b 40 08             	mov    0x8(%eax),%eax
f010461a:	85 c0                	test   %eax,%eax
f010461c:	75 c4                	jne    f01045e2 <find_env_in_queue+0x17>
f010461e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104622:	75 be                	jne    f01045e2 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104624:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104629:	c9                   	leave  
f010462a:	c3                   	ret    

f010462b <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010462b:	55                   	push   %ebp
f010462c:	89 e5                	mov    %esp,%ebp
f010462e:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104631:	83 ec 04             	sub    $0x4,%esp
f0104634:	68 08 55 13 f0       	push   $0xf0135508
f0104639:	6a 58                	push   $0x58
f010463b:	68 d7 54 13 f0       	push   $0xf01354d7
f0104640:	e8 b6 bb ff ff       	call   f01001fb <_panic>

f0104645 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104645:	55                   	push   %ebp
f0104646:	89 e5                	mov    %esp,%ebp
f0104648:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010464b:	e8 67 b8 02 00       	call   f012feb7 <chk1>
	scheduler_status = SCH_STARTED;
f0104650:	c7 05 58 7b 65 f0 01 	movl   $0x1,0xf0657b58
f0104657:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010465a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104661:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f0104666:	85 c0                	test   %eax,%eax
f0104668:	75 4d                	jne    f01046b7 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010466a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010466f:	85 c0                	test   %eax,%eax
f0104671:	74 18                	je     f010468b <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104673:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f0104679:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010467e:	83 ec 08             	sub    $0x8,%esp
f0104681:	52                   	push   %edx
f0104682:	50                   	push   %eax
f0104683:	e8 89 fd ff ff       	call   f0104411 <enqueue>
f0104688:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010468b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104690:	83 ec 0c             	sub    $0xc,%esp
f0104693:	50                   	push   %eax
f0104694:	e8 ed fd ff ff       	call   f0104486 <dequeue>
f0104699:	83 c4 10             	add    $0x10,%esp
f010469c:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010469f:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f01046a4:	8a 00                	mov    (%eax),%al
f01046a6:	0f b6 c0             	movzbl %al,%eax
f01046a9:	83 ec 0c             	sub    $0xc,%esp
f01046ac:	50                   	push   %eax
f01046ad:	e8 3c fb ff ff       	call   f01041ee <kclock_set_quantum>
f01046b2:	83 c4 10             	add    $0x10,%esp
f01046b5:	eb 12                	jmp    f01046c9 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01046b7:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01046bc:	83 f8 01             	cmp    $0x1,%eax
f01046bf:	75 08                	jne    f01046c9 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01046c1:	e8 65 ff ff ff       	call   f010462b <fos_scheduler_MLFQ>
f01046c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01046c9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01046ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01046d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046d4:	a3 14 72 65 f0       	mov    %eax,0xf0657214
	chk2(next_env) ;
f01046d9:	83 ec 0c             	sub    $0xc,%esp
f01046dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01046df:	e8 10 b8 02 00       	call   f012fef4 <chk2>
f01046e4:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01046e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01046ea:	a3 14 72 65 f0       	mov    %eax,0xf0657214

	//sched_print_all();

	if(next_env != NULL)
f01046ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046f3:	74 0b                	je     f0104700 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01046f5:	83 ec 0c             	sub    $0xc,%esp
f01046f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01046fb:	e8 72 51 00 00       	call   f0109872 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0104700:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0104707:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010470a:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010470f:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0104712:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104715:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104718:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f010471f:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104722:	83 ec 0c             	sub    $0xc,%esp
f0104725:	6a 00                	push   $0x0
f0104727:	e8 7c c5 ff ff       	call   f0100ca8 <run_command_prompt>
f010472c:	83 c4 10             	add    $0x10,%esp
f010472f:	eb f1                	jmp    f0104722 <fos_scheduler+0xdd>

f0104731 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104731:	55                   	push   %ebp
f0104732:	89 e5                	mov    %esp,%ebp
f0104734:	83 ec 18             	sub    $0x18,%esp
f0104737:	8b 45 08             	mov    0x8(%ebp),%eax
f010473a:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f010473d:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0104744:	00 00 00 
	scheduler_method = SCH_RR;
f0104747:	c7 05 4c 7b 65 f0 00 	movl   $0x0,0xf0657b4c
f010474e:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0104751:	c6 05 80 7b 65 f0 01 	movb   $0x1,0xf0657b80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104758:	e8 db 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010475d:	83 ec 0c             	sub    $0xc,%esp
f0104760:	6a 10                	push   $0x10
f0104762:	e8 97 30 00 00       	call   f01077fe <kmalloc>
f0104767:	83 c4 10             	add    $0x10,%esp
f010476a:	a3 e8 7a 65 f0       	mov    %eax,0xf0657ae8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010476f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104774:	0f b6 c0             	movzbl %al,%eax
f0104777:	83 ec 0c             	sub    $0xc,%esp
f010477a:	50                   	push   %eax
f010477b:	e8 7e 30 00 00       	call   f01077fe <kmalloc>
f0104780:	83 c4 10             	add    $0x10,%esp
f0104783:	a3 2c 7b 65 f0       	mov    %eax,0xf0657b2c
#endif
	quantums[0] = quantum;
f0104788:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010478d:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104790:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0104792:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104797:	8a 00                	mov    (%eax),%al
f0104799:	0f b6 c0             	movzbl %al,%eax
f010479c:	83 ec 0c             	sub    $0xc,%esp
f010479f:	50                   	push   %eax
f01047a0:	e8 49 fa ff ff       	call   f01041ee <kclock_set_quantum>
f01047a5:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01047a8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01047ad:	83 ec 0c             	sub    $0xc,%esp
f01047b0:	50                   	push   %eax
f01047b1:	e8 1a fc ff ff       	call   f01043d0 <init_queue>
f01047b6:	83 c4 10             	add    $0x10,%esp
}
f01047b9:	90                   	nop
f01047ba:	c9                   	leave  
f01047bb:	c3                   	ret    

f01047bc <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01047bc:	55                   	push   %ebp
f01047bd:	89 e5                	mov    %esp,%ebp
f01047bf:	83 ec 18             	sub    $0x18,%esp
f01047c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c5:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01047c8:	e8 6b 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f01047cd:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f01047d4:	00 00 00 
	scheduler_method = SCH_MLFQ;
f01047d7:	c7 05 4c 7b 65 f0 01 	movl   $0x1,0xf0657b4c
f01047de:	00 00 00 
	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01047e1:	83 ec 04             	sub    $0x4,%esp
f01047e4:	68 3c 55 13 f0       	push   $0xf013553c
f01047e9:	68 c6 00 00 00       	push   $0xc6
f01047ee:	68 d7 54 13 f0       	push   $0xf01354d7
f01047f3:	e8 03 ba ff ff       	call   f01001fb <_panic>

f01047f8 <sched_init>:
#endif
}


void sched_init()
{
f01047f8:	55                   	push   %ebp
f01047f9:	89 e5                	mov    %esp,%ebp
f01047fb:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01047fe:	c7 05 08 7b 65 f0 00 	movl   $0x0,0xf0657b08
f0104805:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104808:	83 ec 0c             	sub    $0xc,%esp
f010480b:	6a 0a                	push   $0xa
f010480d:	e8 1f ff ff ff       	call   f0104731 <sched_init_RR>
f0104812:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104815:	83 ec 0c             	sub    $0xc,%esp
f0104818:	68 3c 7b 65 f0       	push   $0xf0657b3c
f010481d:	e8 ae fb ff ff       	call   f01043d0 <init_queue>
f0104822:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104825:	83 ec 0c             	sub    $0xc,%esp
f0104828:	68 f4 7a 65 f0       	push   $0xf0657af4
f010482d:	e8 9e fb ff ff       	call   f01043d0 <init_queue>
f0104832:	83 c4 10             	add    $0x10,%esp
}
f0104835:	90                   	nop
f0104836:	c9                   	leave  
f0104837:	c3                   	ret    

f0104838 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0104838:	55                   	push   %ebp
f0104839:	89 e5                	mov    %esp,%ebp
f010483b:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f010483e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104843:	85 c0                	test   %eax,%eax
f0104845:	74 11                	je     f0104858 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0104847:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010484c:	83 ec 0c             	sub    $0xc,%esp
f010484f:	50                   	push   %eax
f0104850:	e8 6b 30 00 00       	call   f01078c0 <kfree>
f0104855:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0104858:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010485d:	85 c0                	test   %eax,%eax
f010485f:	74 11                	je     f0104872 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f0104861:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104866:	83 ec 0c             	sub    $0xc,%esp
f0104869:	50                   	push   %eax
f010486a:	e8 51 30 00 00       	call   f01078c0 <kfree>
f010486f:	83 c4 10             	add    $0x10,%esp
}
f0104872:	90                   	nop
f0104873:	c9                   	leave  
f0104874:	c3                   	ret    

f0104875 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104875:	55                   	push   %ebp
f0104876:	89 e5                	mov    %esp,%ebp
f0104878:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010487b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010487f:	74 1e                	je     f010489f <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104881:	8b 45 08             	mov    0x8(%ebp),%eax
f0104884:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f010488b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104890:	83 ec 08             	sub    $0x8,%esp
f0104893:	ff 75 08             	pushl  0x8(%ebp)
f0104896:	50                   	push   %eax
f0104897:	e8 75 fb ff ff       	call   f0104411 <enqueue>
f010489c:	83 c4 10             	add    $0x10,%esp
	}
}
f010489f:	90                   	nop
f01048a0:	c9                   	leave  
f01048a1:	c3                   	ret    

f01048a2 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01048a2:	55                   	push   %ebp
f01048a3:	89 e5                	mov    %esp,%ebp
f01048a5:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01048a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ac:	0f 84 fe 00 00 00    	je     f01049b0 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048b9:	e9 e1 00 00 00       	jmp    f010499f <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01048be:	8b 45 08             	mov    0x8(%ebp),%eax
f01048c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01048c4:	89 c2                	mov    %eax,%edx
f01048c6:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01048cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01048ce:	c1 e1 04             	shl    $0x4,%ecx
f01048d1:	01 c8                	add    %ecx,%eax
f01048d3:	52                   	push   %edx
f01048d4:	50                   	push   %eax
f01048d5:	e8 f1 fc ff ff       	call   f01045cb <find_env_in_queue>
f01048da:	83 c4 08             	add    $0x8,%esp
f01048dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01048e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01048e4:	0f 84 b2 00 00 00    	je     f010499c <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01048ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ee:	75 17                	jne    f0104907 <sched_remove_ready+0x65>
f01048f0:	83 ec 04             	sub    $0x4,%esp
f01048f3:	68 e8 54 13 f0       	push   $0xf01354e8
f01048f8:	68 f5 00 00 00       	push   $0xf5
f01048fd:	68 d7 54 13 f0       	push   $0xf01354d7
f0104902:	e8 f4 b8 ff ff       	call   f01001fb <_panic>
f0104907:	8b 45 08             	mov    0x8(%ebp),%eax
f010490a:	8b 40 44             	mov    0x44(%eax),%eax
f010490d:	85 c0                	test   %eax,%eax
f010490f:	74 11                	je     f0104922 <sched_remove_ready+0x80>
f0104911:	8b 45 08             	mov    0x8(%ebp),%eax
f0104914:	8b 40 44             	mov    0x44(%eax),%eax
f0104917:	8b 55 08             	mov    0x8(%ebp),%edx
f010491a:	8b 52 48             	mov    0x48(%edx),%edx
f010491d:	89 50 48             	mov    %edx,0x48(%eax)
f0104920:	eb 16                	jmp    f0104938 <sched_remove_ready+0x96>
f0104922:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104927:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010492a:	c1 e2 04             	shl    $0x4,%edx
f010492d:	01 c2                	add    %eax,%edx
f010492f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104932:	8b 40 48             	mov    0x48(%eax),%eax
f0104935:	89 42 04             	mov    %eax,0x4(%edx)
f0104938:	8b 45 08             	mov    0x8(%ebp),%eax
f010493b:	8b 40 48             	mov    0x48(%eax),%eax
f010493e:	85 c0                	test   %eax,%eax
f0104940:	74 11                	je     f0104953 <sched_remove_ready+0xb1>
f0104942:	8b 45 08             	mov    0x8(%ebp),%eax
f0104945:	8b 40 48             	mov    0x48(%eax),%eax
f0104948:	8b 55 08             	mov    0x8(%ebp),%edx
f010494b:	8b 52 44             	mov    0x44(%edx),%edx
f010494e:	89 50 44             	mov    %edx,0x44(%eax)
f0104951:	eb 15                	jmp    f0104968 <sched_remove_ready+0xc6>
f0104953:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104958:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010495b:	c1 e2 04             	shl    $0x4,%edx
f010495e:	01 c2                	add    %eax,%edx
f0104960:	8b 45 08             	mov    0x8(%ebp),%eax
f0104963:	8b 40 44             	mov    0x44(%eax),%eax
f0104966:	89 02                	mov    %eax,(%edx)
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104972:	8b 45 08             	mov    0x8(%ebp),%eax
f0104975:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010497c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104984:	c1 e2 04             	shl    $0x4,%edx
f0104987:	01 d0                	add    %edx,%eax
f0104989:	8b 50 0c             	mov    0xc(%eax),%edx
f010498c:	4a                   	dec    %edx
f010498d:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104990:	8b 45 08             	mov    0x8(%ebp),%eax
f0104993:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f010499a:	eb 14                	jmp    f01049b0 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010499c:	ff 45 f4             	incl   -0xc(%ebp)
f010499f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01049a4:	0f b6 c0             	movzbl %al,%eax
f01049a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01049aa:	0f 8f 0e ff ff ff    	jg     f01048be <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01049b0:	c9                   	leave  
f01049b1:	c3                   	ret    

f01049b2 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01049b2:	55                   	push   %ebp
f01049b3:	89 e5                	mov    %esp,%ebp
f01049b5:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049bc:	74 1d                	je     f01049db <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f01049be:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f01049c8:	83 ec 08             	sub    $0x8,%esp
f01049cb:	ff 75 08             	pushl  0x8(%ebp)
f01049ce:	68 3c 7b 65 f0       	push   $0xf0657b3c
f01049d3:	e8 39 fa ff ff       	call   f0104411 <enqueue>
f01049d8:	83 c4 10             	add    $0x10,%esp
	}
}
f01049db:	90                   	nop
f01049dc:	c9                   	leave  
f01049dd:	c3                   	ret    

f01049de <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f01049de:	55                   	push   %ebp
f01049df:	89 e5                	mov    %esp,%ebp
f01049e1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e8:	0f 84 92 00 00 00    	je     f0104a80 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01049ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049f2:	75 17                	jne    f0104a0b <sched_remove_new+0x2d>
f01049f4:	83 ec 04             	sub    $0x4,%esp
f01049f7:	68 e8 54 13 f0       	push   $0xf01354e8
f01049fc:	68 09 01 00 00       	push   $0x109
f0104a01:	68 d7 54 13 f0       	push   $0xf01354d7
f0104a06:	e8 f0 b7 ff ff       	call   f01001fb <_panic>
f0104a0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104a11:	85 c0                	test   %eax,%eax
f0104a13:	74 11                	je     f0104a26 <sched_remove_new+0x48>
f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a18:	8b 40 44             	mov    0x44(%eax),%eax
f0104a1b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a1e:	8b 52 48             	mov    0x48(%edx),%edx
f0104a21:	89 50 48             	mov    %edx,0x48(%eax)
f0104a24:	eb 0b                	jmp    f0104a31 <sched_remove_new+0x53>
f0104a26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a29:	8b 40 48             	mov    0x48(%eax),%eax
f0104a2c:	a3 40 7b 65 f0       	mov    %eax,0xf0657b40
f0104a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a34:	8b 40 48             	mov    0x48(%eax),%eax
f0104a37:	85 c0                	test   %eax,%eax
f0104a39:	74 11                	je     f0104a4c <sched_remove_new+0x6e>
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a41:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a44:	8b 52 44             	mov    0x44(%edx),%edx
f0104a47:	89 50 44             	mov    %edx,0x44(%eax)
f0104a4a:	eb 0b                	jmp    f0104a57 <sched_remove_new+0x79>
f0104a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4f:	8b 40 44             	mov    0x44(%eax),%eax
f0104a52:	a3 3c 7b 65 f0       	mov    %eax,0xf0657b3c
f0104a57:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a64:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a6b:	a1 48 7b 65 f0       	mov    0xf0657b48,%eax
f0104a70:	48                   	dec    %eax
f0104a71:	a3 48 7b 65 f0       	mov    %eax,0xf0657b48
		env->env_status = ENV_UNKNOWN;
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104a80:	90                   	nop
f0104a81:	c9                   	leave  
f0104a82:	c3                   	ret    

f0104a83 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104a83:	55                   	push   %ebp
f0104a84:	89 e5                	mov    %esp,%ebp
f0104a86:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a8d:	74 34                	je     f0104ac3 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104a8f:	e8 9e 90 00 00       	call   f010db32 <isBufferingEnabled>
f0104a94:	84 c0                	test   %al,%al
f0104a96:	74 0e                	je     f0104aa6 <sched_insert_exit+0x23>
f0104a98:	83 ec 0c             	sub    $0xc,%esp
f0104a9b:	ff 75 08             	pushl  0x8(%ebp)
f0104a9e:	e8 f4 61 00 00       	call   f010ac97 <cleanup_buffers>
f0104aa3:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104aa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa9:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104ab0:	83 ec 08             	sub    $0x8,%esp
f0104ab3:	ff 75 08             	pushl  0x8(%ebp)
f0104ab6:	68 f4 7a 65 f0       	push   $0xf0657af4
f0104abb:	e8 51 f9 ff ff       	call   f0104411 <enqueue>
f0104ac0:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ac3:	90                   	nop
f0104ac4:	c9                   	leave  
f0104ac5:	c3                   	ret    

f0104ac6 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104ac6:	55                   	push   %ebp
f0104ac7:	89 e5                	mov    %esp,%ebp
f0104ac9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ad0:	0f 84 92 00 00 00    	je     f0104b68 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104ad6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ada:	75 17                	jne    f0104af3 <sched_remove_exit+0x2d>
f0104adc:	83 ec 04             	sub    $0x4,%esp
f0104adf:	68 e8 54 13 f0       	push   $0xf01354e8
f0104ae4:	68 1b 01 00 00       	push   $0x11b
f0104ae9:	68 d7 54 13 f0       	push   $0xf01354d7
f0104aee:	e8 08 b7 ff ff       	call   f01001fb <_panic>
f0104af3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af6:	8b 40 44             	mov    0x44(%eax),%eax
f0104af9:	85 c0                	test   %eax,%eax
f0104afb:	74 11                	je     f0104b0e <sched_remove_exit+0x48>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 44             	mov    0x44(%eax),%eax
f0104b03:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b06:	8b 52 48             	mov    0x48(%edx),%edx
f0104b09:	89 50 48             	mov    %edx,0x48(%eax)
f0104b0c:	eb 0b                	jmp    f0104b19 <sched_remove_exit+0x53>
f0104b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b11:	8b 40 48             	mov    0x48(%eax),%eax
f0104b14:	a3 f8 7a 65 f0       	mov    %eax,0xf0657af8
f0104b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104b1f:	85 c0                	test   %eax,%eax
f0104b21:	74 11                	je     f0104b34 <sched_remove_exit+0x6e>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 48             	mov    0x48(%eax),%eax
f0104b29:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b2c:	8b 52 44             	mov    0x44(%edx),%edx
f0104b2f:	89 50 44             	mov    %edx,0x44(%eax)
f0104b32:	eb 0b                	jmp    f0104b3f <sched_remove_exit+0x79>
f0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b37:	8b 40 44             	mov    0x44(%eax),%eax
f0104b3a:	a3 f4 7a 65 f0       	mov    %eax,0xf0657af4
f0104b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b53:	a1 00 7b 65 f0       	mov    0xf0657b00,%eax
f0104b58:	48                   	dec    %eax
f0104b59:	a3 00 7b 65 f0       	mov    %eax,0xf0657b00
		env->env_status = ENV_UNKNOWN;
f0104b5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b61:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b68:	90                   	nop
f0104b69:	c9                   	leave  
f0104b6a:	c3                   	ret    

f0104b6b <sched_print_all>:

void sched_print_all()
{
f0104b6b:	55                   	push   %ebp
f0104b6c:	89 e5                	mov    %esp,%ebp
f0104b6e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104b71:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b76:	85 c0                	test   %eax,%eax
f0104b78:	74 6c                	je     f0104be6 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104b7a:	83 ec 0c             	sub    $0xc,%esp
f0104b7d:	68 6c 55 13 f0       	push   $0xf013556c
f0104b82:	e8 fb c0 ff ff       	call   f0100c82 <cprintf>
f0104b87:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104b8a:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b92:	eb 29                	jmp    f0104bbd <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b97:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ba0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ba3:	83 ec 04             	sub    $0x4,%esp
f0104ba6:	52                   	push   %edx
f0104ba7:	50                   	push   %eax
f0104ba8:	68 8e 55 13 f0       	push   $0xf013558e
f0104bad:	e8 d0 c0 ff ff       	call   f0100c82 <cprintf>
f0104bb2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104bb5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bba:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc1:	74 08                	je     f0104bcb <sched_print_all+0x60>
f0104bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc6:	8b 40 44             	mov    0x44(%eax),%eax
f0104bc9:	eb 05                	jmp    f0104bd0 <sched_print_all+0x65>
f0104bcb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd0:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104bd5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bda:	85 c0                	test   %eax,%eax
f0104bdc:	75 b6                	jne    f0104b94 <sched_print_all+0x29>
f0104bde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104be2:	75 b0                	jne    f0104b94 <sched_print_all+0x29>
f0104be4:	eb 10                	jmp    f0104bf6 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104be6:	83 ec 0c             	sub    $0xc,%esp
f0104be9:	68 98 55 13 f0       	push   $0xf0135598
f0104bee:	e8 8f c0 ff ff       	call   f0100c82 <cprintf>
f0104bf3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104bf6:	83 ec 0c             	sub    $0xc,%esp
f0104bf9:	68 b4 55 13 f0       	push   $0xf01355b4
f0104bfe:	e8 7f c0 ff ff       	call   f0100c82 <cprintf>
f0104c03:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104c0d:	e9 ca 00 00 00       	jmp    f0104cdc <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104c12:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c1a:	c1 e2 04             	shl    $0x4,%edx
f0104c1d:	01 d0                	add    %edx,%eax
f0104c1f:	8b 00                	mov    (%eax),%eax
f0104c21:	85 c0                	test   %eax,%eax
f0104c23:	0f 84 8d 00 00 00    	je     f0104cb6 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104c29:	83 ec 08             	sub    $0x8,%esp
f0104c2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104c2f:	68 e8 55 13 f0       	push   $0xf01355e8
f0104c34:	e8 49 c0 ff ff       	call   f0100c82 <cprintf>
f0104c39:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c3c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c44:	c1 e2 04             	shl    $0x4,%edx
f0104c47:	01 d0                	add    %edx,%eax
f0104c49:	8b 00                	mov    (%eax),%eax
f0104c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c4e:	eb 34                	jmp    f0104c84 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c53:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c5f:	83 ec 04             	sub    $0x4,%esp
f0104c62:	52                   	push   %edx
f0104c63:	50                   	push   %eax
f0104c64:	68 8e 55 13 f0       	push   $0xf013558e
f0104c69:	e8 14 c0 ff ff       	call   f0100c82 <cprintf>
f0104c6e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c71:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c76:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c79:	c1 e2 04             	shl    $0x4,%edx
f0104c7c:	01 d0                	add    %edx,%eax
f0104c7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c8c:	c1 e2 04             	shl    $0x4,%edx
f0104c8f:	01 d0                	add    %edx,%eax
f0104c91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c95:	74 08                	je     f0104c9f <sched_print_all+0x134>
f0104c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9a:	8b 52 44             	mov    0x44(%edx),%edx
f0104c9d:	eb 05                	jmp    f0104ca4 <sched_print_all+0x139>
f0104c9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0104ca4:	89 50 08             	mov    %edx,0x8(%eax)
f0104ca7:	8b 40 08             	mov    0x8(%eax),%eax
f0104caa:	85 c0                	test   %eax,%eax
f0104cac:	75 a2                	jne    f0104c50 <sched_print_all+0xe5>
f0104cae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb2:	75 9c                	jne    f0104c50 <sched_print_all+0xe5>
f0104cb4:	eb 13                	jmp    f0104cc9 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104cb6:	83 ec 08             	sub    $0x8,%esp
f0104cb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104cbc:	68 10 56 13 f0       	push   $0xf0135610
f0104cc1:	e8 bc bf ff ff       	call   f0100c82 <cprintf>
f0104cc6:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104cc9:	83 ec 0c             	sub    $0xc,%esp
f0104ccc:	68 b4 55 13 f0       	push   $0xf01355b4
f0104cd1:	e8 ac bf ff ff       	call   f0100c82 <cprintf>
f0104cd6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cd9:	ff 45 f0             	incl   -0x10(%ebp)
f0104cdc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104ce1:	0f b6 c0             	movzbl %al,%eax
f0104ce4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104ce7:	0f 8f 25 ff ff ff    	jg     f0104c12 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104ced:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104cf2:	85 c0                	test   %eax,%eax
f0104cf4:	74 6c                	je     f0104d62 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104cf6:	83 ec 0c             	sub    $0xc,%esp
f0104cf9:	68 34 56 13 f0       	push   $0xf0135634
f0104cfe:	e8 7f bf ff ff       	call   f0100c82 <cprintf>
f0104d03:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d06:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104d0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d0e:	eb 29                	jmp    f0104d39 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d13:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d1c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d1f:	83 ec 04             	sub    $0x4,%esp
f0104d22:	52                   	push   %edx
f0104d23:	50                   	push   %eax
f0104d24:	68 8e 55 13 f0       	push   $0xf013558e
f0104d29:	e8 54 bf ff ff       	call   f0100c82 <cprintf>
f0104d2e:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d31:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d36:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d3d:	74 08                	je     f0104d47 <sched_print_all+0x1dc>
f0104d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d42:	8b 40 44             	mov    0x44(%eax),%eax
f0104d45:	eb 05                	jmp    f0104d4c <sched_print_all+0x1e1>
f0104d47:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d4c:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0104d51:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d56:	85 c0                	test   %eax,%eax
f0104d58:	75 b6                	jne    f0104d10 <sched_print_all+0x1a5>
f0104d5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d5e:	75 b0                	jne    f0104d10 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104d60:	eb 10                	jmp    f0104d72 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104d62:	83 ec 0c             	sub    $0xc,%esp
f0104d65:	68 56 56 13 f0       	push   $0xf0135656
f0104d6a:	e8 13 bf ff ff       	call   f0100c82 <cprintf>
f0104d6f:	83 c4 10             	add    $0x10,%esp
	}
}
f0104d72:	90                   	nop
f0104d73:	c9                   	leave  
f0104d74:	c3                   	ret    

f0104d75 <sched_run_all>:

void sched_run_all()
{
f0104d75:	55                   	push   %ebp
f0104d76:	89 e5                	mov    %esp,%ebp
f0104d78:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104d7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104d82:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d8a:	eb 24                	jmp    f0104db0 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104d8c:	83 ec 0c             	sub    $0xc,%esp
f0104d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d92:	e8 47 fc ff ff       	call   f01049de <sched_remove_new>
f0104d97:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104d9a:	83 ec 0c             	sub    $0xc,%esp
f0104d9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104da0:	e8 d0 fa ff ff       	call   f0104875 <sched_insert_ready>
f0104da5:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104da8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104db0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db4:	74 08                	je     f0104dbe <sched_run_all+0x49>
f0104db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db9:	8b 40 44             	mov    0x44(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <sched_run_all+0x4e>
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc3:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104dc8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dcd:	85 c0                	test   %eax,%eax
f0104dcf:	75 bb                	jne    f0104d8c <sched_run_all+0x17>
f0104dd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd5:	75 b5                	jne    f0104d8c <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104dd7:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f0104ddc:	85 c0                	test   %eax,%eax
f0104dde:	75 05                	jne    f0104de5 <sched_run_all+0x70>
		fos_scheduler();
f0104de0:	e8 60 f8 ff ff       	call   f0104645 <fos_scheduler>
}
f0104de5:	90                   	nop
f0104de6:	c9                   	leave  
f0104de7:	c3                   	ret    

f0104de8 <sched_kill_all>:

void sched_kill_all()
{
f0104de8:	55                   	push   %ebp
f0104de9:	89 e5                	mov    %esp,%ebp
f0104deb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104dee:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104df3:	85 c0                	test   %eax,%eax
f0104df5:	0f 84 98 00 00 00    	je     f0104e93 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104dfb:	83 ec 0c             	sub    $0xc,%esp
f0104dfe:	68 74 56 13 f0       	push   $0xf0135674
f0104e03:	e8 7a be ff ff       	call   f0100c82 <cprintf>
f0104e08:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e0b:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e13:	eb 55                	jmp    f0104e6a <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e18:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e21:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e24:	83 ec 04             	sub    $0x4,%esp
f0104e27:	52                   	push   %edx
f0104e28:	50                   	push   %eax
f0104e29:	68 a0 56 13 f0       	push   $0xf01356a0
f0104e2e:	e8 4f be ff ff       	call   f0100c82 <cprintf>
f0104e33:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104e36:	83 ec 0c             	sub    $0xc,%esp
f0104e39:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e3c:	e8 9d fb ff ff       	call   f01049de <sched_remove_new>
f0104e41:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104e44:	83 ec 0c             	sub    $0xc,%esp
f0104e47:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e4a:	e8 77 4a 00 00       	call   f01098c6 <env_free>
f0104e4f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104e52:	83 ec 0c             	sub    $0xc,%esp
f0104e55:	68 b3 56 13 f0       	push   $0xf01356b3
f0104e5a:	e8 23 be ff ff       	call   f0100c82 <cprintf>
f0104e5f:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e62:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e6e:	74 08                	je     f0104e78 <sched_kill_all+0x90>
f0104e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e73:	8b 40 44             	mov    0x44(%eax),%eax
f0104e76:	eb 05                	jmp    f0104e7d <sched_kill_all+0x95>
f0104e78:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e7d:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104e82:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e87:	85 c0                	test   %eax,%eax
f0104e89:	75 8a                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8f:	75 84                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e91:	eb 10                	jmp    f0104ea3 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104e93:	83 ec 0c             	sub    $0xc,%esp
f0104e96:	68 b9 56 13 f0       	push   $0xf01356b9
f0104e9b:	e8 e2 bd ff ff       	call   f0100c82 <cprintf>
f0104ea0:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ea3:	83 ec 0c             	sub    $0xc,%esp
f0104ea6:	68 b4 55 13 f0       	push   $0xf01355b4
f0104eab:	e8 d2 bd ff ff       	call   f0100c82 <cprintf>
f0104eb0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104eb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104eba:	e9 99 01 00 00       	jmp    f0105058 <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ebf:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ec4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ec7:	c1 e2 04             	shl    $0x4,%edx
f0104eca:	01 d0                	add    %edx,%eax
f0104ecc:	8b 00                	mov    (%eax),%eax
f0104ece:	85 c0                	test   %eax,%eax
f0104ed0:	0f 84 5c 01 00 00    	je     f0105032 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104ed6:	83 ec 08             	sub    $0x8,%esp
f0104ed9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104edc:	68 d4 56 13 f0       	push   $0xf01356d4
f0104ee1:	e8 9c bd ff ff       	call   f0100c82 <cprintf>
f0104ee6:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ee9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104eee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ef1:	c1 e2 04             	shl    $0x4,%edx
f0104ef4:	01 d0                	add    %edx,%eax
f0104ef6:	8b 00                	mov    (%eax),%eax
f0104ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104efb:	e9 f8 00 00 00       	jmp    f0104ff8 <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f03:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f0c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f0f:	83 ec 04             	sub    $0x4,%esp
f0104f12:	52                   	push   %edx
f0104f13:	50                   	push   %eax
f0104f14:	68 a0 56 13 f0       	push   $0xf01356a0
f0104f19:	e8 64 bd ff ff       	call   f0100c82 <cprintf>
f0104f1e:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104f21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f25:	75 17                	jne    f0104f3e <sched_kill_all+0x156>
f0104f27:	83 ec 04             	sub    $0x4,%esp
f0104f2a:	68 e8 54 13 f0       	push   $0xf01354e8
f0104f2f:	68 76 01 00 00       	push   $0x176
f0104f34:	68 d7 54 13 f0       	push   $0xf01354d7
f0104f39:	e8 bd b2 ff ff       	call   f01001fb <_panic>
f0104f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f41:	8b 40 44             	mov    0x44(%eax),%eax
f0104f44:	85 c0                	test   %eax,%eax
f0104f46:	74 11                	je     f0104f59 <sched_kill_all+0x171>
f0104f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f51:	8b 52 48             	mov    0x48(%edx),%edx
f0104f54:	89 50 48             	mov    %edx,0x48(%eax)
f0104f57:	eb 16                	jmp    f0104f6f <sched_kill_all+0x187>
f0104f59:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f61:	c1 e2 04             	shl    $0x4,%edx
f0104f64:	01 c2                	add    %eax,%edx
f0104f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f69:	8b 40 48             	mov    0x48(%eax),%eax
f0104f6c:	89 42 04             	mov    %eax,0x4(%edx)
f0104f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f72:	8b 40 48             	mov    0x48(%eax),%eax
f0104f75:	85 c0                	test   %eax,%eax
f0104f77:	74 11                	je     f0104f8a <sched_kill_all+0x1a2>
f0104f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f7c:	8b 40 48             	mov    0x48(%eax),%eax
f0104f7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f82:	8b 52 44             	mov    0x44(%edx),%edx
f0104f85:	89 50 44             	mov    %edx,0x44(%eax)
f0104f88:	eb 15                	jmp    f0104f9f <sched_kill_all+0x1b7>
f0104f8a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f92:	c1 e2 04             	shl    $0x4,%edx
f0104f95:	01 c2                	add    %eax,%edx
f0104f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f9d:	89 02                	mov    %eax,(%edx)
f0104f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fa2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fac:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb3:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fbb:	c1 e2 04             	shl    $0x4,%edx
f0104fbe:	01 d0                	add    %edx,%eax
f0104fc0:	8b 50 0c             	mov    0xc(%eax),%edx
f0104fc3:	4a                   	dec    %edx
f0104fc4:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0104fc7:	83 ec 0c             	sub    $0xc,%esp
f0104fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fcd:	e8 f4 48 00 00       	call   f01098c6 <env_free>
f0104fd2:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104fd5:	83 ec 0c             	sub    $0xc,%esp
f0104fd8:	68 b3 56 13 f0       	push   $0xf01356b3
f0104fdd:	e8 a0 bc ff ff       	call   f0100c82 <cprintf>
f0104fe2:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fe5:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fed:	c1 e2 04             	shl    $0x4,%edx
f0104ff0:	01 d0                	add    %edx,%eax
f0104ff2:	8b 40 08             	mov    0x8(%eax),%eax
f0104ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ff8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ffd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105000:	c1 e2 04             	shl    $0x4,%edx
f0105003:	01 d0                	add    %edx,%eax
f0105005:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105009:	74 08                	je     f0105013 <sched_kill_all+0x22b>
f010500b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010500e:	8b 52 44             	mov    0x44(%edx),%edx
f0105011:	eb 05                	jmp    f0105018 <sched_kill_all+0x230>
f0105013:	ba 00 00 00 00       	mov    $0x0,%edx
f0105018:	89 50 08             	mov    %edx,0x8(%eax)
f010501b:	8b 40 08             	mov    0x8(%eax),%eax
f010501e:	85 c0                	test   %eax,%eax
f0105020:	0f 85 da fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105026:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502a:	0f 85 d0 fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105030:	eb 13                	jmp    f0105045 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105032:	83 ec 08             	sub    $0x8,%esp
f0105035:	ff 75 f0             	pushl  -0x10(%ebp)
f0105038:	68 10 56 13 f0       	push   $0xf0135610
f010503d:	e8 40 bc ff ff       	call   f0100c82 <cprintf>
f0105042:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105045:	83 ec 0c             	sub    $0xc,%esp
f0105048:	68 b4 55 13 f0       	push   $0xf01355b4
f010504d:	e8 30 bc ff ff       	call   f0100c82 <cprintf>
f0105052:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105055:	ff 45 f0             	incl   -0x10(%ebp)
f0105058:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010505d:	0f b6 c0             	movzbl %al,%eax
f0105060:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105063:	0f 8f 56 fe ff ff    	jg     f0104ebf <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105069:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010506e:	85 c0                	test   %eax,%eax
f0105070:	0f 84 98 00 00 00    	je     f010510e <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105076:	83 ec 0c             	sub    $0xc,%esp
f0105079:	68 08 57 13 f0       	push   $0xf0135708
f010507e:	e8 ff bb ff ff       	call   f0100c82 <cprintf>
f0105083:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105086:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010508b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010508e:	eb 55                	jmp    f01050e5 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105093:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010509f:	83 ec 04             	sub    $0x4,%esp
f01050a2:	52                   	push   %edx
f01050a3:	50                   	push   %eax
f01050a4:	68 a0 56 13 f0       	push   $0xf01356a0
f01050a9:	e8 d4 bb ff ff       	call   f0100c82 <cprintf>
f01050ae:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01050b1:	83 ec 0c             	sub    $0xc,%esp
f01050b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01050b7:	e8 0a fa ff ff       	call   f0104ac6 <sched_remove_exit>
f01050bc:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01050bf:	83 ec 0c             	sub    $0xc,%esp
f01050c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01050c5:	e8 fc 47 00 00       	call   f01098c6 <env_free>
f01050ca:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01050cd:	83 ec 0c             	sub    $0xc,%esp
f01050d0:	68 b3 56 13 f0       	push   $0xf01356b3
f01050d5:	e8 a8 bb ff ff       	call   f0100c82 <cprintf>
f01050da:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01050dd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f01050e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e9:	74 08                	je     f01050f3 <sched_kill_all+0x30b>
f01050eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ee:	8b 40 44             	mov    0x44(%eax),%eax
f01050f1:	eb 05                	jmp    f01050f8 <sched_kill_all+0x310>
f01050f3:	b8 00 00 00 00       	mov    $0x0,%eax
f01050f8:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f01050fd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105102:	85 c0                	test   %eax,%eax
f0105104:	75 8a                	jne    f0105090 <sched_kill_all+0x2a8>
f0105106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510a:	75 84                	jne    f0105090 <sched_kill_all+0x2a8>
f010510c:	eb 10                	jmp    f010511e <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010510e:	83 ec 0c             	sub    $0xc,%esp
f0105111:	68 56 56 13 f0       	push   $0xf0135656
f0105116:	e8 67 bb ff ff       	call   f0100c82 <cprintf>
f010511b:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010511e:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105125:	00 00 00 
	fos_scheduler();
f0105128:	e8 18 f5 ff ff       	call   f0104645 <fos_scheduler>

f010512d <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010512d:	55                   	push   %ebp
f010512e:	89 e5                	mov    %esp,%ebp
f0105130:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105133:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105137:	74 0e                	je     f0105147 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105139:	83 ec 0c             	sub    $0xc,%esp
f010513c:	ff 75 08             	pushl  0x8(%ebp)
f010513f:	e8 6e f8 ff ff       	call   f01049b2 <sched_insert_new>
f0105144:	83 c4 10             	add    $0x10,%esp
	}
}
f0105147:	90                   	nop
f0105148:	c9                   	leave  
f0105149:	c3                   	ret    

f010514a <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010514a:	55                   	push   %ebp
f010514b:	89 e5                	mov    %esp,%ebp
f010514d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105157:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010515c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010515f:	eb 3d                	jmp    f010519e <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105161:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105164:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105167:	3b 45 08             	cmp    0x8(%ebp),%eax
f010516a:	75 2a                	jne    f0105196 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010516c:	83 ec 0c             	sub    $0xc,%esp
f010516f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105172:	e8 67 f8 ff ff       	call   f01049de <sched_remove_new>
f0105177:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010517a:	83 ec 0c             	sub    $0xc,%esp
f010517d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105180:	e8 f0 f6 ff ff       	call   f0104875 <sched_insert_ready>
f0105185:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105188:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f010518d:	85 c0                	test   %eax,%eax
f010518f:	75 36                	jne    f01051c7 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105191:	e8 af f4 ff ff       	call   f0104645 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105196:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f010519b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010519e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051a2:	74 08                	je     f01051ac <sched_run_env+0x62>
f01051a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051a7:	8b 40 44             	mov    0x44(%eax),%eax
f01051aa:	eb 05                	jmp    f01051b1 <sched_run_env+0x67>
f01051ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01051b1:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f01051b6:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01051bb:	85 c0                	test   %eax,%eax
f01051bd:	75 a2                	jne    f0105161 <sched_run_env+0x17>
f01051bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c3:	75 9c                	jne    f0105161 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c5:	eb 01                	jmp    f01051c8 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01051c7:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c8:	90                   	nop
f01051c9:	c9                   	leave  
f01051ca:	c3                   	ret    

f01051cb <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01051cb:	55                   	push   %ebp
f01051cc:	89 e5                	mov    %esp,%ebp
f01051ce:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01051d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01051d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01051df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051e3:	75 59                	jne    f010523e <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01051e5:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f01051ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ed:	eb 28                	jmp    f0105217 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01051ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051f2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051f5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051f8:	75 15                	jne    f010520f <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01051fa:	83 ec 0c             	sub    $0xc,%esp
f01051fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105200:	e8 d9 f7 ff ff       	call   f01049de <sched_remove_new>
f0105205:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105208:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010520f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105214:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010521b:	74 08                	je     f0105225 <sched_exit_env+0x5a>
f010521d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105220:	8b 40 44             	mov    0x44(%eax),%eax
f0105223:	eb 05                	jmp    f010522a <sched_exit_env+0x5f>
f0105225:	b8 00 00 00 00       	mov    $0x0,%eax
f010522a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010522f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105234:	85 c0                	test   %eax,%eax
f0105236:	75 b7                	jne    f01051ef <sched_exit_env+0x24>
f0105238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010523c:	75 b1                	jne    f01051ef <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f010523e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105242:	0f 85 67 01 00 00    	jne    f01053af <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105248:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010524f:	e9 47 01 00 00       	jmp    f010539b <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105254:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105259:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010525c:	c1 e2 04             	shl    $0x4,%edx
f010525f:	01 d0                	add    %edx,%eax
f0105261:	8b 00                	mov    (%eax),%eax
f0105263:	85 c0                	test   %eax,%eax
f0105265:	0f 84 27 01 00 00    	je     f0105392 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f010526b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105272:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105277:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010527a:	c1 e2 04             	shl    $0x4,%edx
f010527d:	01 d0                	add    %edx,%eax
f010527f:	8b 00                	mov    (%eax),%eax
f0105281:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105284:	e9 d1 00 00 00       	jmp    f010535a <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105289:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010528c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010528f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105292:	0f 85 af 00 00 00    	jne    f0105347 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105298:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529c:	75 17                	jne    f01052b5 <sched_exit_env+0xea>
f010529e:	83 ec 04             	sub    $0x4,%esp
f01052a1:	68 e8 54 13 f0       	push   $0xf01354e8
f01052a6:	68 e1 01 00 00       	push   $0x1e1
f01052ab:	68 d7 54 13 f0       	push   $0xf01354d7
f01052b0:	e8 46 af ff ff       	call   f01001fb <_panic>
f01052b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052b8:	8b 40 44             	mov    0x44(%eax),%eax
f01052bb:	85 c0                	test   %eax,%eax
f01052bd:	74 11                	je     f01052d0 <sched_exit_env+0x105>
f01052bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c2:	8b 40 44             	mov    0x44(%eax),%eax
f01052c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052c8:	8b 52 48             	mov    0x48(%edx),%edx
f01052cb:	89 50 48             	mov    %edx,0x48(%eax)
f01052ce:	eb 16                	jmp    f01052e6 <sched_exit_env+0x11b>
f01052d0:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01052d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052d8:	c1 e2 04             	shl    $0x4,%edx
f01052db:	01 c2                	add    %eax,%edx
f01052dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e0:	8b 40 48             	mov    0x48(%eax),%eax
f01052e3:	89 42 04             	mov    %eax,0x4(%edx)
f01052e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e9:	8b 40 48             	mov    0x48(%eax),%eax
f01052ec:	85 c0                	test   %eax,%eax
f01052ee:	74 11                	je     f0105301 <sched_exit_env+0x136>
f01052f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f3:	8b 40 48             	mov    0x48(%eax),%eax
f01052f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052f9:	8b 52 44             	mov    0x44(%edx),%edx
f01052fc:	89 50 44             	mov    %edx,0x44(%eax)
f01052ff:	eb 15                	jmp    f0105316 <sched_exit_env+0x14b>
f0105301:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105306:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105309:	c1 e2 04             	shl    $0x4,%edx
f010530c:	01 c2                	add    %eax,%edx
f010530e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105311:	8b 40 44             	mov    0x44(%eax),%eax
f0105314:	89 02                	mov    %eax,(%edx)
f0105316:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105319:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105320:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105323:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010532a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010532f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105332:	c1 e2 04             	shl    $0x4,%edx
f0105335:	01 d0                	add    %edx,%eax
f0105337:	8b 50 0c             	mov    0xc(%eax),%edx
f010533a:	4a                   	dec    %edx
f010533b:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f010533e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105345:	eb 4b                	jmp    f0105392 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105347:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010534c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010534f:	c1 e2 04             	shl    $0x4,%edx
f0105352:	01 d0                	add    %edx,%eax
f0105354:	8b 40 08             	mov    0x8(%eax),%eax
f0105357:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010535f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105362:	c1 e2 04             	shl    $0x4,%edx
f0105365:	01 d0                	add    %edx,%eax
f0105367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010536b:	74 08                	je     f0105375 <sched_exit_env+0x1aa>
f010536d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105370:	8b 52 44             	mov    0x44(%edx),%edx
f0105373:	eb 05                	jmp    f010537a <sched_exit_env+0x1af>
f0105375:	ba 00 00 00 00       	mov    $0x0,%edx
f010537a:	89 50 08             	mov    %edx,0x8(%eax)
f010537d:	8b 40 08             	mov    0x8(%eax),%eax
f0105380:	85 c0                	test   %eax,%eax
f0105382:	0f 85 01 ff ff ff    	jne    f0105289 <sched_exit_env+0xbe>
f0105388:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010538c:	0f 85 f7 fe ff ff    	jne    f0105289 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105392:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105396:	75 16                	jne    f01053ae <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105398:	ff 45 ec             	incl   -0x14(%ebp)
f010539b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01053a0:	0f b6 c0             	movzbl %al,%eax
f01053a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01053a6:	0f 8f a8 fe ff ff    	jg     f0105254 <sched_exit_env+0x89>
f01053ac:	eb 01                	jmp    f01053af <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01053ae:	90                   	nop
		}
	}
	if (!found)
f01053af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053b3:	75 1c                	jne    f01053d1 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01053b5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053bd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053c0:	75 0f                	jne    f01053d1 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01053c2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01053ca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01053d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053d5:	74 2a                	je     f0105401 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01053d7:	83 ec 0c             	sub    $0xc,%esp
f01053da:	ff 75 f4             	pushl  -0xc(%ebp)
f01053dd:	e8 a1 f6 ff ff       	call   f0104a83 <sched_insert_exit>
f01053e2:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01053e5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ea:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053f0:	75 0f                	jne    f0105401 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01053f2:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f01053f9:	00 00 00 
			fos_scheduler();
f01053fc:	e8 44 f2 ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105401:	90                   	nop
f0105402:	c9                   	leave  
f0105403:	c3                   	ret    

f0105404 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105404:	55                   	push   %ebp
f0105405:	89 e5                	mov    %esp,%ebp
f0105407:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010540a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105411:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105418:	e9 37 01 00 00       	jmp    f0105554 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010541d:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105422:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105425:	c1 e2 04             	shl    $0x4,%edx
f0105428:	01 d0                	add    %edx,%eax
f010542a:	8b 00                	mov    (%eax),%eax
f010542c:	85 c0                	test   %eax,%eax
f010542e:	0f 84 1d 01 00 00    	je     f0105551 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f0105434:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010543b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105440:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105443:	c1 e2 04             	shl    $0x4,%edx
f0105446:	01 d0                	add    %edx,%eax
f0105448:	8b 00                	mov    (%eax),%eax
f010544a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010544d:	e9 c7 00 00 00       	jmp    f0105519 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105452:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105456:	75 17                	jne    f010546f <sched_exit_all_ready_envs+0x6b>
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 e8 54 13 f0       	push   $0xf01354e8
f0105460:	68 0c 02 00 00       	push   $0x20c
f0105465:	68 d7 54 13 f0       	push   $0xf01354d7
f010546a:	e8 8c ad ff ff       	call   f01001fb <_panic>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	85 c0                	test   %eax,%eax
f0105477:	74 11                	je     f010548a <sched_exit_all_ready_envs+0x86>
f0105479:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010547c:	8b 40 44             	mov    0x44(%eax),%eax
f010547f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105482:	8b 52 48             	mov    0x48(%edx),%edx
f0105485:	89 50 48             	mov    %edx,0x48(%eax)
f0105488:	eb 16                	jmp    f01054a0 <sched_exit_all_ready_envs+0x9c>
f010548a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010548f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105492:	c1 e2 04             	shl    $0x4,%edx
f0105495:	01 c2                	add    %eax,%edx
f0105497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010549a:	8b 40 48             	mov    0x48(%eax),%eax
f010549d:	89 42 04             	mov    %eax,0x4(%edx)
f01054a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a3:	8b 40 48             	mov    0x48(%eax),%eax
f01054a6:	85 c0                	test   %eax,%eax
f01054a8:	74 11                	je     f01054bb <sched_exit_all_ready_envs+0xb7>
f01054aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ad:	8b 40 48             	mov    0x48(%eax),%eax
f01054b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054b3:	8b 52 44             	mov    0x44(%edx),%edx
f01054b6:	89 50 44             	mov    %edx,0x44(%eax)
f01054b9:	eb 15                	jmp    f01054d0 <sched_exit_all_ready_envs+0xcc>
f01054bb:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054c3:	c1 e2 04             	shl    $0x4,%edx
f01054c6:	01 c2                	add    %eax,%edx
f01054c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054cb:	8b 40 44             	mov    0x44(%eax),%eax
f01054ce:	89 02                	mov    %eax,(%edx)
f01054d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01054da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054dd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01054e4:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054ec:	c1 e2 04             	shl    $0x4,%edx
f01054ef:	01 d0                	add    %edx,%eax
f01054f1:	8b 50 0c             	mov    0xc(%eax),%edx
f01054f4:	4a                   	dec    %edx
f01054f5:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01054f8:	83 ec 0c             	sub    $0xc,%esp
f01054fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01054fe:	e8 80 f5 ff ff       	call   f0104a83 <sched_insert_exit>
f0105503:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105506:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010550b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010550e:	c1 e2 04             	shl    $0x4,%edx
f0105511:	01 d0                	add    %edx,%eax
f0105513:	8b 40 08             	mov    0x8(%eax),%eax
f0105516:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105519:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010551e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105521:	c1 e2 04             	shl    $0x4,%edx
f0105524:	01 d0                	add    %edx,%eax
f0105526:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552a:	74 08                	je     f0105534 <sched_exit_all_ready_envs+0x130>
f010552c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010552f:	8b 52 44             	mov    0x44(%edx),%edx
f0105532:	eb 05                	jmp    f0105539 <sched_exit_all_ready_envs+0x135>
f0105534:	ba 00 00 00 00       	mov    $0x0,%edx
f0105539:	89 50 08             	mov    %edx,0x8(%eax)
f010553c:	8b 40 08             	mov    0x8(%eax),%eax
f010553f:	85 c0                	test   %eax,%eax
f0105541:	0f 85 0b ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>
f0105547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010554b:	0f 85 01 ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105551:	ff 45 f0             	incl   -0x10(%ebp)
f0105554:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0105559:	0f b6 c0             	movzbl %al,%eax
f010555c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010555f:	0f 8f b8 fe ff ff    	jg     f010541d <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105565:	90                   	nop
f0105566:	c9                   	leave  
f0105567:	c3                   	ret    

f0105568 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f0105568:	55                   	push   %ebp
f0105569:	89 e5                	mov    %esp,%ebp
f010556b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010556e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105575:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010557c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105580:	0f 85 a0 00 00 00    	jne    f0105626 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105586:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010558b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010558e:	eb 67                	jmp    f01055f7 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105590:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105593:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105596:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105599:	75 54                	jne    f01055ef <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010559b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01055a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055aa:	83 ec 04             	sub    $0x4,%esp
f01055ad:	52                   	push   %edx
f01055ae:	50                   	push   %eax
f01055af:	68 34 57 13 f0       	push   $0xf0135734
f01055b4:	e8 c9 b6 ff ff       	call   f0100c82 <cprintf>
f01055b9:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01055bc:	83 ec 0c             	sub    $0xc,%esp
f01055bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01055c2:	e8 17 f4 ff ff       	call   f01049de <sched_remove_new>
f01055c7:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01055ca:	83 ec 0c             	sub    $0xc,%esp
f01055cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d0:	e8 f1 42 00 00       	call   f01098c6 <env_free>
f01055d5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01055d8:	83 ec 0c             	sub    $0xc,%esp
f01055db:	68 b3 56 13 f0       	push   $0xf01356b3
f01055e0:	e8 9d b6 ff ff       	call   f0100c82 <cprintf>
f01055e5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01055e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01055ef:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01055f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055fb:	74 08                	je     f0105605 <sched_kill_env+0x9d>
f01055fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105600:	8b 40 44             	mov    0x44(%eax),%eax
f0105603:	eb 05                	jmp    f010560a <sched_kill_env+0xa2>
f0105605:	b8 00 00 00 00       	mov    $0x0,%eax
f010560a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010560f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105614:	85 c0                	test   %eax,%eax
f0105616:	0f 85 74 ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
f010561c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105620:	0f 85 6a ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105626:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010562a:	0f 85 a6 01 00 00    	jne    f01057d6 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105630:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105637:	e9 86 01 00 00       	jmp    f01057c2 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010563c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105641:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105644:	c1 e2 04             	shl    $0x4,%edx
f0105647:	01 d0                	add    %edx,%eax
f0105649:	8b 00                	mov    (%eax),%eax
f010564b:	85 c0                	test   %eax,%eax
f010564d:	0f 84 66 01 00 00    	je     f01057b9 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010565a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010565f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105662:	c1 e2 04             	shl    $0x4,%edx
f0105665:	01 d0                	add    %edx,%eax
f0105667:	8b 00                	mov    (%eax),%eax
f0105669:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010566c:	e9 10 01 00 00       	jmp    f0105781 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105671:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105674:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105677:	3b 45 08             	cmp    0x8(%ebp),%eax
f010567a:	0f 85 ee 00 00 00    	jne    f010576e <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105683:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010568c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010568f:	ff 75 ec             	pushl  -0x14(%ebp)
f0105692:	52                   	push   %edx
f0105693:	50                   	push   %eax
f0105694:	68 5c 57 13 f0       	push   $0xf013575c
f0105699:	e8 e4 b5 ff ff       	call   f0100c82 <cprintf>
f010569e:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01056a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a5:	75 17                	jne    f01056be <sched_kill_env+0x156>
f01056a7:	83 ec 04             	sub    $0x4,%esp
f01056aa:	68 e8 54 13 f0       	push   $0xf01354e8
f01056af:	68 33 02 00 00       	push   $0x233
f01056b4:	68 d7 54 13 f0       	push   $0xf01354d7
f01056b9:	e8 3d ab ff ff       	call   f01001fb <_panic>
f01056be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056c1:	8b 40 44             	mov    0x44(%eax),%eax
f01056c4:	85 c0                	test   %eax,%eax
f01056c6:	74 11                	je     f01056d9 <sched_kill_env+0x171>
f01056c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056cb:	8b 40 44             	mov    0x44(%eax),%eax
f01056ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d1:	8b 52 48             	mov    0x48(%edx),%edx
f01056d4:	89 50 48             	mov    %edx,0x48(%eax)
f01056d7:	eb 16                	jmp    f01056ef <sched_kill_env+0x187>
f01056d9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01056de:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056e1:	c1 e2 04             	shl    $0x4,%edx
f01056e4:	01 c2                	add    %eax,%edx
f01056e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e9:	8b 40 48             	mov    0x48(%eax),%eax
f01056ec:	89 42 04             	mov    %eax,0x4(%edx)
f01056ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f2:	8b 40 48             	mov    0x48(%eax),%eax
f01056f5:	85 c0                	test   %eax,%eax
f01056f7:	74 11                	je     f010570a <sched_kill_env+0x1a2>
f01056f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056fc:	8b 40 48             	mov    0x48(%eax),%eax
f01056ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105702:	8b 52 44             	mov    0x44(%edx),%edx
f0105705:	89 50 44             	mov    %edx,0x44(%eax)
f0105708:	eb 15                	jmp    f010571f <sched_kill_env+0x1b7>
f010570a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010570f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105712:	c1 e2 04             	shl    $0x4,%edx
f0105715:	01 c2                	add    %eax,%edx
f0105717:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010571a:	8b 40 44             	mov    0x44(%eax),%eax
f010571d:	89 02                	mov    %eax,(%edx)
f010571f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105722:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105733:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105738:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010573b:	c1 e2 04             	shl    $0x4,%edx
f010573e:	01 d0                	add    %edx,%eax
f0105740:	8b 50 0c             	mov    0xc(%eax),%edx
f0105743:	4a                   	dec    %edx
f0105744:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105747:	83 ec 0c             	sub    $0xc,%esp
f010574a:	ff 75 f4             	pushl  -0xc(%ebp)
f010574d:	e8 74 41 00 00       	call   f01098c6 <env_free>
f0105752:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105755:	83 ec 0c             	sub    $0xc,%esp
f0105758:	68 b3 56 13 f0       	push   $0xf01356b3
f010575d:	e8 20 b5 ff ff       	call   f0100c82 <cprintf>
f0105762:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105765:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010576c:	eb 4b                	jmp    f01057b9 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010576e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105773:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105776:	c1 e2 04             	shl    $0x4,%edx
f0105779:	01 d0                	add    %edx,%eax
f010577b:	8b 40 08             	mov    0x8(%eax),%eax
f010577e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105781:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105786:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105789:	c1 e2 04             	shl    $0x4,%edx
f010578c:	01 d0                	add    %edx,%eax
f010578e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105792:	74 08                	je     f010579c <sched_kill_env+0x234>
f0105794:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105797:	8b 52 44             	mov    0x44(%edx),%edx
f010579a:	eb 05                	jmp    f01057a1 <sched_kill_env+0x239>
f010579c:	ba 00 00 00 00       	mov    $0x0,%edx
f01057a1:	89 50 08             	mov    %edx,0x8(%eax)
f01057a4:	8b 40 08             	mov    0x8(%eax),%eax
f01057a7:	85 c0                	test   %eax,%eax
f01057a9:	0f 85 c2 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
f01057af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057b3:	0f 85 b8 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01057b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057bd:	75 16                	jne    f01057d5 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01057bf:	ff 45 ec             	incl   -0x14(%ebp)
f01057c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01057c7:	0f b6 c0             	movzbl %al,%eax
f01057ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01057cd:	0f 8f 69 fe ff ff    	jg     f010563c <sched_kill_env+0xd4>
f01057d3:	eb 01                	jmp    f01057d6 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01057d5:	90                   	nop
		}
	}
	if (!found)
f01057d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057da:	0f 85 a7 00 00 00    	jne    f0105887 <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01057e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057e7:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01057ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057ef:	eb 67                	jmp    f0105858 <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01057f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fa:	75 54                	jne    f0105850 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01057fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ff:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105808:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580b:	83 ec 04             	sub    $0x4,%esp
f010580e:	52                   	push   %edx
f010580f:	50                   	push   %eax
f0105810:	68 88 57 13 f0       	push   $0xf0135788
f0105815:	e8 68 b4 ff ff       	call   f0100c82 <cprintf>
f010581a:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010581d:	83 ec 0c             	sub    $0xc,%esp
f0105820:	ff 75 f4             	pushl  -0xc(%ebp)
f0105823:	e8 9e f2 ff ff       	call   f0104ac6 <sched_remove_exit>
f0105828:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010582b:	83 ec 0c             	sub    $0xc,%esp
f010582e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105831:	e8 90 40 00 00       	call   f01098c6 <env_free>
f0105836:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105839:	83 ec 0c             	sub    $0xc,%esp
f010583c:	68 b3 56 13 f0       	push   $0xf01356b3
f0105841:	e8 3c b4 ff ff       	call   f0100c82 <cprintf>
f0105846:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105849:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105850:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585c:	74 08                	je     f0105866 <sched_kill_env+0x2fe>
f010585e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105861:	8b 40 44             	mov    0x44(%eax),%eax
f0105864:	eb 05                	jmp    f010586b <sched_kill_env+0x303>
f0105866:	b8 00 00 00 00       	mov    $0x0,%eax
f010586b:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0105870:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105875:	85 c0                	test   %eax,%eax
f0105877:	0f 85 74 ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
f010587d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105881:	0f 85 6a ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f0105887:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010588b:	0f 85 a0 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105891:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105896:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105899:	3b 45 08             	cmp    0x8(%ebp),%eax
f010589c:	0f 85 8f 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f01058a2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01058a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f01058aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b0:	83 f8 02             	cmp    $0x2,%eax
f01058b3:	74 19                	je     f01058ce <sched_kill_env+0x366>
f01058b5:	68 b0 57 13 f0       	push   $0xf01357b0
f01058ba:	68 d0 57 13 f0       	push   $0xf01357d0
f01058bf:	68 56 02 00 00       	push   $0x256
f01058c4:	68 d7 54 13 f0       	push   $0xf01354d7
f01058c9:	e8 2d a9 ff ff       	call   f01001fb <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01058ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058da:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058dd:	83 ec 04             	sub    $0x4,%esp
f01058e0:	52                   	push   %edx
f01058e1:	50                   	push   %eax
f01058e2:	68 e8 57 13 f0       	push   $0xf01357e8
f01058e7:	e8 96 b3 ff ff       	call   f0100c82 <cprintf>
f01058ec:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01058ef:	83 ec 0c             	sub    $0xc,%esp
f01058f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01058f5:	e8 cc 3f 00 00       	call   f01098c6 <env_free>
f01058fa:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01058fd:	83 ec 0c             	sub    $0xc,%esp
f0105900:	68 b3 56 13 f0       	push   $0xf01356b3
f0105905:	e8 78 b3 ff ff       	call   f0100c82 <cprintf>
f010590a:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010590d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105914:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0105919:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010591c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010591f:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105922:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105929:	00 00 00 
			fos_scheduler();
f010592c:	e8 14 ed ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105931:	90                   	nop
f0105932:	c9                   	leave  
f0105933:	c3                   	ret    

f0105934 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105934:	55                   	push   %ebp
f0105935:	89 e5                	mov    %esp,%ebp
f0105937:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010593a:	83 ec 0c             	sub    $0xc,%esp
f010593d:	6a 01                	push   $0x1
f010593f:	e8 2b 81 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0105944:	83 c4 10             	add    $0x10,%esp
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 05                	je     f0105950 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f010594b:	e8 05 00 00 00       	call   f0105955 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105950:	e8 f0 ec ff ff       	call   f0104645 <fos_scheduler>

f0105955 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105955:	55                   	push   %ebp
f0105956:	89 e5                	mov    %esp,%ebp
f0105958:	53                   	push   %ebx
f0105959:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f010595c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105961:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105964:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105968:	0f 84 cc 01 00 00    	je     f0105b3a <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010596e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105975:	e9 cf 00 00 00       	jmp    f0105a49 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010597a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010597d:	8b 48 78             	mov    0x78(%eax),%ecx
f0105980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105983:	89 d0                	mov    %edx,%eax
f0105985:	01 c0                	add    %eax,%eax
f0105987:	01 d0                	add    %edx,%eax
f0105989:	c1 e0 03             	shl    $0x3,%eax
f010598c:	01 c8                	add    %ecx,%eax
f010598e:	8a 40 04             	mov    0x4(%eax),%al
f0105991:	3c 01                	cmp    $0x1,%al
f0105993:	0f 84 ad 00 00 00    	je     f0105a46 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105999:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010599c:	8b 48 78             	mov    0x78(%eax),%ecx
f010599f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059a2:	89 d0                	mov    %edx,%eax
f01059a4:	01 c0                	add    %eax,%eax
f01059a6:	01 d0                	add    %edx,%eax
f01059a8:	c1 e0 03             	shl    $0x3,%eax
f01059ab:	01 c8                	add    %ecx,%eax
f01059ad:	8b 00                	mov    (%eax),%eax
f01059af:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f01059b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01059b8:	83 ec 08             	sub    $0x8,%esp
f01059bb:	ff 75 e8             	pushl  -0x18(%ebp)
f01059be:	50                   	push   %eax
f01059bf:	e8 0d 22 00 00       	call   f0107bd1 <pt_get_page_permissions>
f01059c4:	83 c4 10             	add    $0x10,%esp
f01059c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f01059ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01059d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059d3:	89 d0                	mov    %edx,%eax
f01059d5:	01 c0                	add    %eax,%eax
f01059d7:	01 d0                	add    %edx,%eax
f01059d9:	c1 e0 03             	shl    $0x3,%eax
f01059dc:	01 c8                	add    %ecx,%eax
f01059de:	8b 40 08             	mov    0x8(%eax),%eax
f01059e1:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f01059e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059e7:	83 e0 20             	and    $0x20,%eax
f01059ea:	85 c0                	test   %eax,%eax
f01059ec:	74 3b                	je     f0105a29 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01059ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01059f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059f7:	89 d0                	mov    %edx,%eax
f01059f9:	01 c0                	add    %eax,%eax
f01059fb:	01 d0                	add    %edx,%eax
f01059fd:	c1 e0 03             	shl    $0x3,%eax
f0105a00:	01 c8                	add    %ecx,%eax
f0105a02:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a05:	c1 ea 02             	shr    $0x2,%edx
f0105a08:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105a0e:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a14:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a17:	6a 20                	push   $0x20
f0105a19:	6a 00                	push   $0x0
f0105a1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a1e:	50                   	push   %eax
f0105a1f:	e8 f9 20 00 00       	call   f0107b1d <pt_set_page_permissions>
f0105a24:	83 c4 10             	add    $0x10,%esp
f0105a27:	eb 1d                	jmp    f0105a46 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a2c:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a32:	89 d0                	mov    %edx,%eax
f0105a34:	01 c0                	add    %eax,%eax
f0105a36:	01 d0                	add    %edx,%eax
f0105a38:	c1 e0 03             	shl    $0x3,%eax
f0105a3b:	01 c8                	add    %ecx,%eax
f0105a3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a40:	c1 ea 02             	shr    $0x2,%edx
f0105a43:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a46:	ff 45 f4             	incl   -0xc(%ebp)
f0105a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a4c:	8b 50 74             	mov    0x74(%eax),%edx
f0105a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a52:	39 c2                	cmp    %eax,%edx
f0105a54:	0f 87 20 ff ff ff    	ja     f010597a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a61:	e9 ca 00 00 00       	jmp    f0105b30 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105a66:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a6c:	89 d0                	mov    %edx,%eax
f0105a6e:	01 c0                	add    %eax,%eax
f0105a70:	01 d0                	add    %edx,%eax
f0105a72:	c1 e0 03             	shl    $0x3,%eax
f0105a75:	01 c8                	add    %ecx,%eax
f0105a77:	83 e8 80             	sub    $0xffffff80,%eax
f0105a7a:	8a 00                	mov    (%eax),%al
f0105a7c:	3c 01                	cmp    $0x1,%al
f0105a7e:	0f 84 a9 00 00 00    	je     f0105b2d <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105a84:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a8a:	89 d0                	mov    %edx,%eax
f0105a8c:	01 c0                	add    %eax,%eax
f0105a8e:	01 d0                	add    %edx,%eax
f0105a90:	c1 e0 03             	shl    $0x3,%eax
f0105a93:	01 c8                	add    %ecx,%eax
f0105a95:	83 c0 7c             	add    $0x7c,%eax
f0105a98:	8b 00                	mov    (%eax),%eax
f0105a9a:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105a9d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105aa0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa3:	89 d0                	mov    %edx,%eax
f0105aa5:	01 c0                	add    %eax,%eax
f0105aa7:	01 d0                	add    %edx,%eax
f0105aa9:	c1 e0 03             	shl    $0x3,%eax
f0105aac:	01 c8                	add    %ecx,%eax
f0105aae:	05 84 00 00 00       	add    $0x84,%eax
f0105ab3:	8b 00                	mov    (%eax),%eax
f0105ab5:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105ab8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105abb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105abe:	83 ec 08             	sub    $0x8,%esp
f0105ac1:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ac4:	50                   	push   %eax
f0105ac5:	e8 26 22 00 00       	call   f0107cf0 <pd_is_table_used>
f0105aca:	83 c4 10             	add    $0x10,%esp
f0105acd:	85 c0                	test   %eax,%eax
f0105acf:	74 3c                	je     f0105b0d <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ad1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ad4:	c1 e8 02             	shr    $0x2,%eax
f0105ad7:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105adc:	89 c1                	mov    %eax,%ecx
f0105ade:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105ae1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ae4:	89 d0                	mov    %edx,%eax
f0105ae6:	01 c0                	add    %eax,%eax
f0105ae8:	01 d0                	add    %edx,%eax
f0105aea:	c1 e0 03             	shl    $0x3,%eax
f0105aed:	01 d8                	add    %ebx,%eax
f0105aef:	05 84 00 00 00       	add    $0x84,%eax
f0105af4:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105af9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105afc:	83 ec 08             	sub    $0x8,%esp
f0105aff:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b02:	50                   	push   %eax
f0105b03:	e8 0c 22 00 00       	call   f0107d14 <pd_set_table_unused>
f0105b08:	83 c4 10             	add    $0x10,%esp
f0105b0b:	eb 20                	jmp    f0105b2d <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b10:	c1 e8 02             	shr    $0x2,%eax
f0105b13:	89 c1                	mov    %eax,%ecx
f0105b15:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b1b:	89 d0                	mov    %edx,%eax
f0105b1d:	01 c0                	add    %eax,%eax
f0105b1f:	01 d0                	add    %edx,%eax
f0105b21:	c1 e0 03             	shl    $0x3,%eax
f0105b24:	01 d8                	add    %ebx,%eax
f0105b26:	05 84 00 00 00       	add    $0x84,%eax
f0105b2b:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b2d:	ff 45 f0             	incl   -0x10(%ebp)
f0105b30:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105b34:	0f 8e 2c ff ff ff    	jle    f0105a66 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105b3a:	90                   	nop
f0105b3b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105b3e:	c9                   	leave  
f0105b3f:	c3                   	ret    

f0105b40 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105b40:	55                   	push   %ebp
f0105b41:	89 e5                	mov    %esp,%ebp
f0105b43:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105b46:	c7 05 0c 72 65 f0 01 	movl   $0x1,0xf065720c
f0105b4d:	00 00 00 
f0105b50:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105b57:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105b5b:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b61:	ee                   	out    %al,(%dx)
f0105b62:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105b69:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105b6d:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105b70:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b73:	ee                   	out    %al,(%dx)
f0105b74:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105b7b:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105b7f:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105b82:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105b85:	ee                   	out    %al,(%dx)
f0105b86:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105b8d:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105b91:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105b94:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105b97:	ee                   	out    %al,(%dx)
f0105b98:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b9f:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105ba3:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105ba6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105ba9:	ee                   	out    %al,(%dx)
f0105baa:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105bb1:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105bb5:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105bb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105bbb:	ee                   	out    %al,(%dx)
f0105bbc:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105bc3:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105bc7:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105bca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105bcd:	ee                   	out    %al,(%dx)
f0105bce:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105bd5:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105bd9:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105bdc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105bdf:	ee                   	out    %al,(%dx)
f0105be0:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105be7:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105beb:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105bee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105bf1:	ee                   	out    %al,(%dx)
f0105bf2:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105bf9:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105bfd:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105c00:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105c03:	ee                   	out    %al,(%dx)
f0105c04:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105c0b:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105c0f:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105c12:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105c15:	ee                   	out    %al,(%dx)
f0105c16:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105c1d:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105c21:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105c24:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105c27:	ee                   	out    %al,(%dx)
f0105c28:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105c2f:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105c33:	8a 45 be             	mov    -0x42(%ebp),%al
f0105c36:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105c39:	ee                   	out    %al,(%dx)
f0105c3a:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105c41:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105c45:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105c48:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105c4b:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105c4c:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c52:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105c56:	74 15                	je     f0105c6d <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105c58:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c5e:	0f b7 c0             	movzwl %ax,%eax
f0105c61:	83 ec 0c             	sub    $0xc,%esp
f0105c64:	50                   	push   %eax
f0105c65:	e8 06 00 00 00       	call   f0105c70 <irq_setmask_8259A>
f0105c6a:	83 c4 10             	add    $0x10,%esp
}
f0105c6d:	90                   	nop
f0105c6e:	c9                   	leave  
f0105c6f:	c3                   	ret    

f0105c70 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105c70:	55                   	push   %ebp
f0105c71:	89 e5                	mov    %esp,%ebp
f0105c73:	83 ec 14             	sub    $0x14,%esp
f0105c76:	8b 45 08             	mov    0x8(%ebp),%eax
f0105c79:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105c7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c80:	66 a3 b0 18 19 f0    	mov    %ax,0xf01918b0
	if (!didinit)
f0105c86:	a1 0c 72 65 f0       	mov    0xf065720c,%eax
f0105c8b:	85 c0                	test   %eax,%eax
f0105c8d:	74 34                	je     f0105cc3 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c92:	0f b6 c0             	movzbl %al,%eax
f0105c95:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105c9c:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c9f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105ca2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105ca5:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ca9:	66 c1 e8 08          	shr    $0x8,%ax
f0105cad:	0f b6 c0             	movzbl %al,%eax
f0105cb0:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105cb7:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105cba:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105cbd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105cc0:	ee                   	out    %al,(%dx)
f0105cc1:	eb 01                	jmp    f0105cc4 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105cc3:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105cc4:	c9                   	leave  
f0105cc5:	c3                   	ret    

f0105cc6 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105cc6:	55                   	push   %ebp
f0105cc7:	89 e5                	mov    %esp,%ebp
f0105cc9:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105ccc:	83 ec 08             	sub    $0x8,%esp
f0105ccf:	68 00 10 00 00       	push   $0x1000
f0105cd4:	68 00 10 00 00       	push   $0x1000
f0105cd9:	e8 6a 02 00 00       	call   f0105f48 <boot_allocate_space>
f0105cde:	83 c4 10             	add    $0x10,%esp
f0105ce1:	a3 7c 7b 65 f0       	mov    %eax,0xf0657b7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105ce6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ceb:	83 ec 04             	sub    $0x4,%esp
f0105cee:	68 00 10 00 00       	push   $0x1000
f0105cf3:	6a 00                	push   $0x0
f0105cf5:	50                   	push   %eax
f0105cf6:	e8 eb b0 02 00       	call   f0130de6 <memset>
f0105cfb:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105cfe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105d06:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105d0d:	77 14                	ja     f0105d23 <initialize_kernel_VM+0x5d>
f0105d0f:	ff 75 e8             	pushl  -0x18(%ebp)
f0105d12:	68 14 58 13 f0       	push   $0xf0135814
f0105d17:	6a 45                	push   $0x45
f0105d19:	68 48 58 13 f0       	push   $0xf0135848
f0105d1e:	e8 d8 a4 ff ff       	call   f01001fb <_panic>
f0105d23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105d26:	05 00 00 00 10       	add    $0x10000000,%eax
f0105d2b:	a3 ac 7b 65 f0       	mov    %eax,0xf0657bac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105d30:	c7 45 e4 00 90 18 f0 	movl   $0xf0189000,-0x1c(%ebp)
f0105d37:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105d3e:	77 14                	ja     f0105d54 <initialize_kernel_VM+0x8e>
f0105d40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105d43:	68 14 58 13 f0       	push   $0xf0135814
f0105d48:	6a 4d                	push   $0x4d
f0105d4a:	68 48 58 13 f0       	push   $0xf0135848
f0105d4f:	e8 a7 a4 ff ff       	call   f01001fb <_panic>
f0105d54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d57:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105d5d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d62:	83 ec 0c             	sub    $0xc,%esp
f0105d65:	6a 02                	push   $0x2
f0105d67:	52                   	push   %edx
f0105d68:	68 00 80 00 00       	push   $0x8000
f0105d6d:	68 00 80 bf ef       	push   $0xefbf8000
f0105d72:	50                   	push   %eax
f0105d73:	e8 31 02 00 00       	call   f0105fa9 <boot_map_range>
f0105d78:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105d7b:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105d82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105d89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d90:	eb 25                	jmp    f0105db7 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105d92:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105d95:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d98:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d9d:	83 ec 04             	sub    $0x4,%esp
f0105da0:	6a 01                	push   $0x1
f0105da2:	52                   	push   %edx
f0105da3:	50                   	push   %eax
f0105da4:	e8 74 02 00 00       	call   f010601d <boot_get_page_table>
f0105da9:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105dac:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105db3:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105db7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dbb:	72 d5                	jb     f0105d92 <initialize_kernel_VM+0xcc>
f0105dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dc1:	77 06                	ja     f0105dc9 <initialize_kernel_VM+0x103>
f0105dc3:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105dc7:	76 c9                	jbe    f0105d92 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105dc9:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f0105dcf:	89 d0                	mov    %edx,%eax
f0105dd1:	01 c0                	add    %eax,%eax
f0105dd3:	01 d0                	add    %edx,%eax
f0105dd5:	c1 e0 03             	shl    $0x3,%eax
f0105dd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105ddb:	83 ec 08             	sub    $0x8,%esp
f0105dde:	68 00 10 00 00       	push   $0x1000
f0105de3:	ff 75 e0             	pushl  -0x20(%ebp)
f0105de6:	e8 5d 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105deb:	83 c4 10             	add    $0x10,%esp
f0105dee:	a3 54 7b 65 f0       	mov    %eax,0xf0657b54
	memset(frames_info, 0, array_size);
f0105df3:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0105df8:	83 ec 04             	sub    $0x4,%esp
f0105dfb:	ff 75 e0             	pushl  -0x20(%ebp)
f0105dfe:	6a 00                	push   $0x0
f0105e00:	50                   	push   %eax
f0105e01:	e8 e0 af 02 00       	call   f0130de6 <memset>
f0105e06:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105e09:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105e10:	83 ec 08             	sub    $0x8,%esp
f0105e13:	68 00 10 00 00       	push   $0x1000
f0105e18:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e1b:	e8 28 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105e20:	83 c4 10             	add    $0x10,%esp
f0105e23:	a3 dc 7a 65 f0       	mov    %eax,0xf0657adc
	memset(disk_frames_info , 0, disk_array_size);
f0105e28:	a1 dc 7a 65 f0       	mov    0xf0657adc,%eax
f0105e2d:	83 ec 04             	sub    $0x4,%esp
f0105e30:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e33:	6a 00                	push   $0x0
f0105e35:	50                   	push   %eax
f0105e36:	e8 ab af 02 00       	call   f0130de6 <memset>
f0105e3b:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105e3e:	e8 d5 04 00 00       	call   f0106318 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105e43:	83 ec 0c             	sub    $0xc,%esp
f0105e46:	68 b1 02 00 00       	push   $0x2b1
f0105e4b:	e8 1a 9b 02 00       	call   f012f96a <nearest_pow2_ceil>
f0105e50:	83 c4 10             	add    $0x10,%esp
f0105e53:	83 ec 04             	sub    $0x4,%esp
f0105e56:	50                   	push   %eax
f0105e57:	68 b1 02 00 00       	push   $0x2b1
f0105e5c:	68 68 58 13 f0       	push   $0xf0135868
f0105e61:	e8 1c ae ff ff       	call   f0100c82 <cprintf>
f0105e66:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105e69:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105e70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105e73:	83 ec 08             	sub    $0x8,%esp
f0105e76:	68 00 10 00 00       	push   $0x1000
f0105e7b:	50                   	push   %eax
f0105e7c:	e8 c7 00 00 00       	call   f0105f48 <boot_allocate_space>
f0105e81:	83 c4 10             	add    $0x10,%esp
f0105e84:	a3 10 72 65 f0       	mov    %eax,0xf0657210
	memset(envs , 0, envs_size);
f0105e89:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e8c:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105e91:	83 ec 04             	sub    $0x4,%esp
f0105e94:	52                   	push   %edx
f0105e95:	6a 00                	push   $0x0
f0105e97:	50                   	push   %eax
f0105e98:	e8 49 af 02 00       	call   f0130de6 <memset>
f0105e9d:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105ea0:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105ea8:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105eaf:	77 17                	ja     f0105ec8 <initialize_kernel_VM+0x202>
f0105eb1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105eb4:	68 14 58 13 f0       	push   $0xf0135814
f0105eb9:	68 96 00 00 00       	push   $0x96
f0105ebe:	68 48 58 13 f0       	push   $0xf0135848
f0105ec3:	e8 33 a3 ff ff       	call   f01001fb <_panic>
f0105ec8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105ecb:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105ed1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105ed4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ed9:	83 ec 0c             	sub    $0xc,%esp
f0105edc:	6a 04                	push   $0x4
f0105ede:	51                   	push   %ecx
f0105edf:	52                   	push   %edx
f0105ee0:	68 00 00 c0 ee       	push   $0xeec00000
f0105ee5:	50                   	push   %eax
f0105ee6:	e8 be 00 00 00       	call   f0105fa9 <boot_map_range>
f0105eeb:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105eee:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ef3:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105ef8:	8b 15 7c 7b 65 f0    	mov    0xf0657b7c,%edx
f0105efe:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105f04:	8b 12                	mov    (%edx),%edx
f0105f06:	83 ca 05             	or     $0x5,%edx
f0105f09:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105f0b:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f10:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105f16:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105f1b:	83 ec 0c             	sub    $0xc,%esp
f0105f1e:	6a 02                	push   $0x2
f0105f20:	6a 00                	push   $0x0
f0105f22:	52                   	push   %edx
f0105f23:	68 00 00 00 f0       	push   $0xf0000000
f0105f28:	50                   	push   %eax
f0105f29:	e8 7b 00 00 00       	call   f0105fa9 <boot_map_range>
f0105f2e:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105f31:	e8 1b a2 02 00       	call   f0130151 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105f36:	c7 05 f0 7a 65 f0 19 	movl   $0x19,0xf0657af0
f0105f3d:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105f40:	e8 d3 02 00 00       	call   f0106218 <turn_on_paging>
}
f0105f45:	90                   	nop
f0105f46:	c9                   	leave  
f0105f47:	c3                   	ret    

f0105f48 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105f48:	55                   	push   %ebp
f0105f49:	89 e5                	mov    %esp,%ebp
f0105f4b:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105f4e:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f53:	85 c0                	test   %eax,%eax
f0105f55:	75 0a                	jne    f0105f61 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105f57:	c7 05 78 7b 65 f0 bc 	movl   $0xf0657cbc,0xf0657b78
f0105f5e:	7c 65 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f64:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105f67:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f6c:	89 c2                	mov    %eax,%edx
f0105f6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105f71:	01 d0                	add    %edx,%eax
f0105f73:	48                   	dec    %eax
f0105f74:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105f77:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f7f:	f7 75 fc             	divl   -0x4(%ebp)
f0105f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f85:	29 d0                	sub    %edx,%eax
f0105f87:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105f8c:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f91:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105f94:	8b 15 78 7b 65 f0    	mov    0xf0657b78,%edx
f0105f9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f9d:	01 d0                	add    %edx,%eax
f0105f9f:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105fa7:	c9                   	leave  
f0105fa8:	c3                   	ret    

f0105fa9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105fa9:	55                   	push   %ebp
f0105faa:	89 e5                	mov    %esp,%ebp
f0105fac:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105faf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105fb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105fbd:	eb 53                	jmp    f0106012 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105fbf:	83 ec 04             	sub    $0x4,%esp
f0105fc2:	6a 01                	push   $0x1
f0105fc4:	ff 75 0c             	pushl  0xc(%ebp)
f0105fc7:	ff 75 08             	pushl  0x8(%ebp)
f0105fca:	e8 4e 00 00 00       	call   f010601d <boot_get_page_table>
f0105fcf:	83 c4 10             	add    $0x10,%esp
f0105fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105fd8:	c1 e8 0c             	shr    $0xc,%eax
f0105fdb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105fe0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fe6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105fed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ff0:	01 c2                	add    %eax,%edx
f0105ff2:	8b 45 18             	mov    0x18(%ebp),%eax
f0105ff5:	0b 45 14             	or     0x14(%ebp),%eax
f0105ff8:	83 c8 01             	or     $0x1,%eax
f0105ffb:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105ffd:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106004:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010600b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106018:	72 a5                	jb     f0105fbf <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010601a:	90                   	nop
f010601b:	c9                   	leave  
f010601c:	c3                   	ret    

f010601d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010601d:	55                   	push   %ebp
f010601e:	89 e5                	mov    %esp,%ebp
f0106020:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106023:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106026:	c1 e8 16             	shr    $0x16,%eax
f0106029:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010602c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010602f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106036:	8b 45 08             	mov    0x8(%ebp),%eax
f0106039:	01 d0                	add    %edx,%eax
f010603b:	8b 00                	mov    (%eax),%eax
f010603d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106040:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106048:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010604b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010604e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106051:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106054:	c1 e8 0c             	shr    $0xc,%eax
f0106057:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010605a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010605f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106062:	72 17                	jb     f010607b <boot_get_page_table+0x5e>
f0106064:	ff 75 e8             	pushl  -0x18(%ebp)
f0106067:	68 90 58 13 f0       	push   $0xf0135890
f010606c:	68 15 01 00 00       	push   $0x115
f0106071:	68 48 58 13 f0       	push   $0xf0135848
f0106076:	e8 80 a1 ff ff       	call   f01001fb <_panic>
f010607b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010607e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106083:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106086:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010608a:	75 72                	jne    f01060fe <boot_get_page_table+0xe1>
	{
		if (create)
f010608c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106090:	74 65                	je     f01060f7 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106092:	83 ec 08             	sub    $0x8,%esp
f0106095:	68 00 10 00 00       	push   $0x1000
f010609a:	68 00 10 00 00       	push   $0x1000
f010609f:	e8 a4 fe ff ff       	call   f0105f48 <boot_allocate_space>
f01060a4:	83 c4 10             	add    $0x10,%esp
f01060a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01060aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01060b0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01060b7:	77 17                	ja     f01060d0 <boot_get_page_table+0xb3>
f01060b9:	ff 75 dc             	pushl  -0x24(%ebp)
f01060bc:	68 14 58 13 f0       	push   $0xf0135814
f01060c1:	68 1b 01 00 00       	push   $0x11b
f01060c6:	68 48 58 13 f0       	push   $0xf0135848
f01060cb:	e8 2b a1 ff ff       	call   f01001fb <_panic>
f01060d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060d3:	05 00 00 00 10       	add    $0x10000000,%eax
f01060d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01060db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01060e8:	01 d0                	add    %edx,%eax
f01060ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01060ed:	83 ca 03             	or     $0x3,%edx
f01060f0:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01060f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060f5:	eb 0a                	jmp    f0106101 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01060f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01060fc:	eb 03                	jmp    f0106101 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01060fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106101:	c9                   	leave  
f0106102:	c3                   	ret    

f0106103 <nvram_read>:


int nvram_read(int r)
{
f0106103:	55                   	push   %ebp
f0106104:	89 e5                	mov    %esp,%ebp
f0106106:	53                   	push   %ebx
f0106107:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010610a:	8b 45 08             	mov    0x8(%ebp),%eax
f010610d:	83 ec 0c             	sub    $0xc,%esp
f0106110:	50                   	push   %eax
f0106111:	e8 e6 de ff ff       	call   f0103ffc <mc146818_read>
f0106116:	83 c4 10             	add    $0x10,%esp
f0106119:	89 c3                	mov    %eax,%ebx
f010611b:	8b 45 08             	mov    0x8(%ebp),%eax
f010611e:	40                   	inc    %eax
f010611f:	83 ec 0c             	sub    $0xc,%esp
f0106122:	50                   	push   %eax
f0106123:	e8 d4 de ff ff       	call   f0103ffc <mc146818_read>
f0106128:	83 c4 10             	add    $0x10,%esp
f010612b:	c1 e0 08             	shl    $0x8,%eax
f010612e:	09 d8                	or     %ebx,%eax
}
f0106130:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106133:	c9                   	leave  
f0106134:	c3                   	ret    

f0106135 <detect_memory>:

void detect_memory()
{
f0106135:	55                   	push   %ebp
f0106136:	89 e5                	mov    %esp,%ebp
f0106138:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f010613b:	83 ec 0c             	sub    $0xc,%esp
f010613e:	6a 15                	push   $0x15
f0106140:	e8 be ff ff ff       	call   f0106103 <nvram_read>
f0106145:	83 c4 10             	add    $0x10,%esp
f0106148:	c1 e0 0a             	shl    $0xa,%eax
f010614b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010614e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106151:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106156:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106159:	83 ec 0c             	sub    $0xc,%esp
f010615c:	6a 17                	push   $0x17
f010615e:	e8 a0 ff ff ff       	call   f0106103 <nvram_read>
f0106163:	83 c4 10             	add    $0x10,%esp
f0106166:	c1 e0 0a             	shl    $0xa,%eax
f0106169:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010616c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010616f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106174:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106177:	83 ec 0c             	sub    $0xc,%esp
f010617a:	6a 34                	push   $0x34
f010617c:	e8 82 ff ff ff       	call   f0106103 <nvram_read>
f0106181:	83 c4 10             	add    $0x10,%esp
f0106184:	c1 e0 10             	shl    $0x10,%eax
f0106187:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010618a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010618d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106192:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106195:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106199:	74 18                	je     f01061b3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010619b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010619e:	05 00 00 00 01       	add    $0x1000000,%eax
f01061a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01061a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061a9:	2d 00 00 10 00       	sub    $0x100000,%eax
f01061ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01061b1:	eb 19                	jmp    f01061cc <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01061b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01061b7:	74 0d                	je     f01061c6 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01061b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061bc:	05 00 00 10 00       	add    $0x100000,%eax
f01061c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01061c4:	eb 06                	jmp    f01061cc <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01061c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01061cc:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01061d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061d6:	c1 e8 0c             	shr    $0xc,%eax
f01061d9:	a3 10 7b 65 f0       	mov    %eax,0xf0657b10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01061de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061e1:	c1 e8 0a             	shr    $0xa,%eax
f01061e4:	83 ec 08             	sub    $0x8,%esp
f01061e7:	50                   	push   %eax
f01061e8:	68 c0 58 13 f0       	push   $0xf01358c0
f01061ed:	e8 90 aa ff ff       	call   f0100c82 <cprintf>
f01061f2:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01061f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f8:	c1 e8 0a             	shr    $0xa,%eax
f01061fb:	89 c2                	mov    %eax,%edx
f01061fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106200:	c1 e8 0a             	shr    $0xa,%eax
f0106203:	83 ec 04             	sub    $0x4,%esp
f0106206:	52                   	push   %edx
f0106207:	50                   	push   %eax
f0106208:	68 e1 58 13 f0       	push   $0xf01358e1
f010620d:	e8 70 aa ff ff       	call   f0100c82 <cprintf>
f0106212:	83 c4 10             	add    $0x10,%esp
}
f0106215:	90                   	nop
f0106216:	c9                   	leave  
f0106217:	c3                   	ret    

f0106218 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106218:	55                   	push   %ebp
f0106219:	89 e5                	mov    %esp,%ebp
f010621b:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f010621e:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106225:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010622c:	eb 24                	jmp    f0106252 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f010622e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106233:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106236:	c1 e2 02             	shl    $0x2,%edx
f0106239:	01 c2                	add    %eax,%edx
f010623b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106240:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106243:	c1 e1 02             	shl    $0x2,%ecx
f0106246:	01 c8                	add    %ecx,%eax
f0106248:	8b 00                	mov    (%eax),%eax
f010624a:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010624c:	ff 45 fc             	incl   -0x4(%ebp)
f010624f:	ff 45 f8             	incl   -0x8(%ebp)
f0106252:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106257:	c1 e8 16             	shr    $0x16,%eax
f010625a:	89 c2                	mov    %eax,%edx
f010625c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010625f:	39 c2                	cmp    %eax,%edx
f0106261:	77 cb                	ja     f010622e <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106263:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0106268:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010626b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010626e:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106271:	0f 20 c0             	mov    %cr0,%eax
f0106274:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106277:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010627a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010627d:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106284:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010628b:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010628e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106291:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106294:	0f 01 15 f0 18 19 f0 	lgdtl  0xf01918f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010629b:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a0:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f01062a2:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a7:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f01062a9:	b8 10 00 00 00       	mov    $0x10,%eax
f01062ae:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01062b0:	b8 10 00 00 00       	mov    $0x10,%eax
f01062b5:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01062b7:	b8 10 00 00 00       	mov    $0x10,%eax
f01062bc:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01062be:	ea c5 62 10 f0 08 00 	ljmp   $0x8,$0xf01062c5
	asm volatile("lldt %%ax" :: "a" (0));
f01062c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01062ca:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01062cd:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01062d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062db:	eb 19                	jmp    f01062f6 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01062dd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01062e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062e5:	c1 e2 02             	shl    $0x2,%edx
f01062e8:	01 d0                	add    %edx,%eax
f01062ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062f0:	ff 45 f4             	incl   -0xc(%ebp)
f01062f3:	ff 45 f0             	incl   -0x10(%ebp)
f01062f6:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f01062fb:	c1 e8 16             	shr    $0x16,%eax
f01062fe:	89 c2                	mov    %eax,%edx
f0106300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106303:	39 c2                	cmp    %eax,%edx
f0106305:	77 d6                	ja     f01062dd <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106307:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010630c:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010630f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106312:	0f 22 d8             	mov    %eax,%cr3
}
f0106315:	90                   	nop
f0106316:	c9                   	leave  
f0106317:	c3                   	ret    

f0106318 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106318:	55                   	push   %ebp
f0106319:	89 e5                	mov    %esp,%ebp
f010631b:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010631e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106323:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106326:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010632d:	77 17                	ja     f0106346 <setup_listing_to_all_page_tables_entries+0x2e>
f010632f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106332:	68 14 58 13 f0       	push   $0xf0135814
f0106337:	68 ab 01 00 00       	push   $0x1ab
f010633c:	68 48 58 13 f0       	push   $0xf0135848
f0106341:	e8 b5 9e ff ff       	call   f01001fb <_panic>
f0106346:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106349:	05 00 00 00 10       	add    $0x10000000,%eax
f010634e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106351:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106356:	05 fc 0e 00 00       	add    $0xefc,%eax
f010635b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010635e:	83 ca 03             	or     $0x3,%edx
f0106361:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106363:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106368:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010636e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106373:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106376:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010637d:	77 17                	ja     f0106396 <setup_listing_to_all_page_tables_entries+0x7e>
f010637f:	ff 75 ec             	pushl  -0x14(%ebp)
f0106382:	68 14 58 13 f0       	push   $0xf0135814
f0106387:	68 b0 01 00 00       	push   $0x1b0
f010638c:	68 48 58 13 f0       	push   $0xf0135848
f0106391:	e8 65 9e ff ff       	call   f01001fb <_panic>
f0106396:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106399:	05 00 00 00 10       	add    $0x10000000,%eax
f010639e:	83 c8 05             	or     $0x5,%eax
f01063a1:	89 02                	mov    %eax,(%edx)

}
f01063a3:	90                   	nop
f01063a4:	c9                   	leave  
f01063a5:	c3                   	ret    

f01063a6 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01063a6:	55                   	push   %ebp
f01063a7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01063a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063ac:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01063b2:	29 d0                	sub    %edx,%eax
f01063b4:	c1 f8 03             	sar    $0x3,%eax
f01063b7:	89 c2                	mov    %eax,%edx
f01063b9:	89 d0                	mov    %edx,%eax
f01063bb:	c1 e0 02             	shl    $0x2,%eax
f01063be:	01 d0                	add    %edx,%eax
f01063c0:	c1 e0 02             	shl    $0x2,%eax
f01063c3:	01 d0                	add    %edx,%eax
f01063c5:	c1 e0 02             	shl    $0x2,%eax
f01063c8:	01 d0                	add    %edx,%eax
f01063ca:	89 c1                	mov    %eax,%ecx
f01063cc:	c1 e1 08             	shl    $0x8,%ecx
f01063cf:	01 c8                	add    %ecx,%eax
f01063d1:	89 c1                	mov    %eax,%ecx
f01063d3:	c1 e1 10             	shl    $0x10,%ecx
f01063d6:	01 c8                	add    %ecx,%eax
f01063d8:	01 c0                	add    %eax,%eax
f01063da:	01 d0                	add    %edx,%eax
}
f01063dc:	5d                   	pop    %ebp
f01063dd:	c3                   	ret    

f01063de <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01063de:	55                   	push   %ebp
f01063df:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01063e1:	ff 75 08             	pushl  0x8(%ebp)
f01063e4:	e8 bd ff ff ff       	call   f01063a6 <to_frame_number>
f01063e9:	83 c4 04             	add    $0x4,%esp
f01063ec:	c1 e0 0c             	shl    $0xc,%eax
}
f01063ef:	c9                   	leave  
f01063f0:	c3                   	ret    

f01063f1 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01063f1:	55                   	push   %ebp
f01063f2:	89 e5                	mov    %esp,%ebp
f01063f4:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01063f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01063fa:	c1 e8 0c             	shr    $0xc,%eax
f01063fd:	89 c2                	mov    %eax,%edx
f01063ff:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106404:	39 c2                	cmp    %eax,%edx
f0106406:	72 14                	jb     f010641c <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106408:	83 ec 04             	sub    $0x4,%esp
f010640b:	68 00 59 13 f0       	push   $0xf0135900
f0106410:	6a 55                	push   $0x55
f0106412:	68 25 59 13 f0       	push   $0xf0135925
f0106417:	e8 df 9d ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f010641c:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106422:	8b 45 08             	mov    0x8(%ebp),%eax
f0106425:	c1 e8 0c             	shr    $0xc,%eax
f0106428:	89 c1                	mov    %eax,%ecx
f010642a:	89 c8                	mov    %ecx,%eax
f010642c:	01 c0                	add    %eax,%eax
f010642e:	01 c8                	add    %ecx,%eax
f0106430:	c1 e0 03             	shl    $0x3,%eax
f0106433:	01 d0                	add    %edx,%eax
}
f0106435:	c9                   	leave  
f0106436:	c3                   	ret    

f0106437 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106437:	55                   	push   %ebp
f0106438:	89 e5                	mov    %esp,%ebp
f010643a:	83 ec 10             	sub    $0x10,%esp
f010643d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106440:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106443:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106446:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106449:	90                   	nop
f010644a:	c9                   	leave  
f010644b:	c3                   	ret    

f010644c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010644c:	55                   	push   %ebp
f010644d:	89 e5                	mov    %esp,%ebp
f010644f:	53                   	push   %ebx
f0106450:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106453:	c7 05 18 7b 65 f0 00 	movl   $0x0,0xf0657b18
f010645a:	00 00 00 
f010645d:	c7 05 1c 7b 65 f0 00 	movl   $0x0,0xf0657b1c
f0106464:	00 00 00 
f0106467:	c7 05 24 7b 65 f0 00 	movl   $0x0,0xf0657b24
f010646e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106471:	c7 05 b8 7a 65 f0 00 	movl   $0x0,0xf0657ab8
f0106478:	00 00 00 
f010647b:	c7 05 bc 7a 65 f0 00 	movl   $0x0,0xf0657abc
f0106482:	00 00 00 
f0106485:	c7 05 c4 7a 65 f0 00 	movl   $0x0,0xf0657ac4
f010648c:	00 00 00 

	frames_info[0].references = 1;
f010648f:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0106494:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010649a:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f010649f:	83 c0 18             	add    $0x18,%eax
f01064a2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01064a8:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f01064ad:	83 c0 30             	add    $0x30,%eax
f01064b0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01064b6:	c7 05 60 7b 65 f0 00 	movl   $0xf0001000,0xf0657b60
f01064bd:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01064c0:	c7 05 84 7b 65 f0 00 	movl   $0xf0002000,0xf0657b84
f01064c7:	20 00 f0 
	i =0;
f01064ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01064d1:	eb 1f                	jmp    f01064f2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01064d3:	8b 15 60 7b 65 f0    	mov    0xf0657b60,%edx
f01064d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064dc:	01 d0                	add    %edx,%eax
f01064de:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01064e1:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01064e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064ea:	01 d0                	add    %edx,%eax
f01064ec:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01064ef:	ff 45 f4             	incl   -0xc(%ebp)
f01064f2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01064f9:	7e d8                	jle    f01064d3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01064fb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106502:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106505:	05 ff ff 09 00       	add    $0x9ffff,%eax
f010650a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010650d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106510:	ba 00 00 00 00       	mov    $0x0,%edx
f0106515:	f7 75 f0             	divl   -0x10(%ebp)
f0106518:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010651b:	29 d0                	sub    %edx,%eax
f010651d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106520:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106527:	e9 e8 00 00 00       	jmp    f0106614 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f010652c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106532:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106535:	89 d0                	mov    %edx,%eax
f0106537:	01 c0                	add    %eax,%eax
f0106539:	01 d0                	add    %edx,%eax
f010653b:	c1 e0 03             	shl    $0x3,%eax
f010653e:	01 c8                	add    %ecx,%eax
f0106540:	83 ec 0c             	sub    $0xc,%esp
f0106543:	50                   	push   %eax
f0106544:	e8 b7 02 00 00       	call   f0106800 <initialize_frame_info>
f0106549:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010654c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106552:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106555:	89 d0                	mov    %edx,%eax
f0106557:	01 c0                	add    %eax,%eax
f0106559:	01 d0                	add    %edx,%eax
f010655b:	c1 e0 03             	shl    $0x3,%eax
f010655e:	01 c8                	add    %ecx,%eax
f0106560:	85 c0                	test   %eax,%eax
f0106562:	75 14                	jne    f0106578 <initialize_paging+0x12c>
f0106564:	83 ec 04             	sub    $0x4,%esp
f0106567:	68 40 59 13 f0       	push   $0xf0135940
f010656c:	6a 5c                	push   $0x5c
f010656e:	68 63 59 13 f0       	push   $0xf0135963
f0106573:	e8 83 9c ff ff       	call   f01001fb <_panic>
f0106578:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010657e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106581:	89 d0                	mov    %edx,%eax
f0106583:	01 c0                	add    %eax,%eax
f0106585:	01 d0                	add    %edx,%eax
f0106587:	c1 e0 03             	shl    $0x3,%eax
f010658a:	01 c8                	add    %ecx,%eax
f010658c:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106592:	89 10                	mov    %edx,(%eax)
f0106594:	8b 00                	mov    (%eax),%eax
f0106596:	85 c0                	test   %eax,%eax
f0106598:	74 1f                	je     f01065b9 <initialize_paging+0x16d>
f010659a:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f01065a0:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f01065a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01065a9:	89 c8                	mov    %ecx,%eax
f01065ab:	01 c0                	add    %eax,%eax
f01065ad:	01 c8                	add    %ecx,%eax
f01065af:	c1 e0 03             	shl    $0x3,%eax
f01065b2:	01 d8                	add    %ebx,%eax
f01065b4:	89 42 04             	mov    %eax,0x4(%edx)
f01065b7:	eb 19                	jmp    f01065d2 <initialize_paging+0x186>
f01065b9:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065c2:	89 d0                	mov    %edx,%eax
f01065c4:	01 c0                	add    %eax,%eax
f01065c6:	01 d0                	add    %edx,%eax
f01065c8:	c1 e0 03             	shl    $0x3,%eax
f01065cb:	01 c8                	add    %ecx,%eax
f01065cd:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01065d2:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065db:	89 d0                	mov    %edx,%eax
f01065dd:	01 c0                	add    %eax,%eax
f01065df:	01 d0                	add    %edx,%eax
f01065e1:	c1 e0 03             	shl    $0x3,%eax
f01065e4:	01 c8                	add    %ecx,%eax
f01065e6:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01065eb:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065f4:	89 d0                	mov    %edx,%eax
f01065f6:	01 c0                	add    %eax,%eax
f01065f8:	01 d0                	add    %edx,%eax
f01065fa:	c1 e0 03             	shl    $0x3,%eax
f01065fd:	01 c8                	add    %ecx,%eax
f01065ff:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106606:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010660b:	40                   	inc    %eax
f010660c:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106611:	ff 45 f4             	incl   -0xc(%ebp)
f0106614:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106617:	85 c0                	test   %eax,%eax
f0106619:	79 05                	jns    f0106620 <initialize_paging+0x1d4>
f010661b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106620:	c1 f8 0c             	sar    $0xc,%eax
f0106623:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106626:	0f 8f 00 ff ff ff    	jg     f010652c <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010662c:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106633:	eb 1d                	jmp    f0106652 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0106635:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010663b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010663e:	89 d0                	mov    %edx,%eax
f0106640:	01 c0                	add    %eax,%eax
f0106642:	01 d0                	add    %edx,%eax
f0106644:	c1 e0 03             	shl    $0x3,%eax
f0106647:	01 c8                	add    %ecx,%eax
f0106649:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010664f:	ff 45 f4             	incl   -0xc(%ebp)
f0106652:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106659:	7e da                	jle    f0106635 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f010665b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106662:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106667:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010666a:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106671:	77 14                	ja     f0106687 <initialize_paging+0x23b>
f0106673:	ff 75 e0             	pushl  -0x20(%ebp)
f0106676:	68 80 59 13 f0       	push   $0xf0135980
f010667b:	6a 64                	push   $0x64
f010667d:	68 63 59 13 f0       	push   $0xf0135963
f0106682:	e8 74 9b ff ff       	call   f01001fb <_panic>
f0106687:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010668a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106693:	01 d0                	add    %edx,%eax
f0106695:	48                   	dec    %eax
f0106696:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106699:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010669c:	ba 00 00 00 00       	mov    $0x0,%edx
f01066a1:	f7 75 e4             	divl   -0x1c(%ebp)
f01066a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066a7:	29 d0                	sub    %edx,%eax
f01066a9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066ac:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01066b3:	eb 1d                	jmp    f01066d2 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01066b5:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01066bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066be:	89 d0                	mov    %edx,%eax
f01066c0:	01 c0                	add    %eax,%eax
f01066c2:	01 d0                	add    %edx,%eax
f01066c4:	c1 e0 03             	shl    $0x3,%eax
f01066c7:	01 c8                	add    %ecx,%eax
f01066c9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066cf:	ff 45 f4             	incl   -0xc(%ebp)
f01066d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066d5:	85 c0                	test   %eax,%eax
f01066d7:	79 05                	jns    f01066de <initialize_paging+0x292>
f01066d9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066de:	c1 f8 0c             	sar    $0xc,%eax
f01066e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066e4:	7f cf                	jg     f01066b5 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01066e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066e9:	85 c0                	test   %eax,%eax
f01066eb:	79 05                	jns    f01066f2 <initialize_paging+0x2a6>
f01066ed:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f2:	c1 f8 0c             	sar    $0xc,%eax
f01066f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01066f8:	e9 e8 00 00 00       	jmp    f01067e5 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01066fd:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106706:	89 d0                	mov    %edx,%eax
f0106708:	01 c0                	add    %eax,%eax
f010670a:	01 d0                	add    %edx,%eax
f010670c:	c1 e0 03             	shl    $0x3,%eax
f010670f:	01 c8                	add    %ecx,%eax
f0106711:	83 ec 0c             	sub    $0xc,%esp
f0106714:	50                   	push   %eax
f0106715:	e8 e6 00 00 00       	call   f0106800 <initialize_frame_info>
f010671a:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010671d:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106723:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106726:	89 d0                	mov    %edx,%eax
f0106728:	01 c0                	add    %eax,%eax
f010672a:	01 d0                	add    %edx,%eax
f010672c:	c1 e0 03             	shl    $0x3,%eax
f010672f:	01 c8                	add    %ecx,%eax
f0106731:	85 c0                	test   %eax,%eax
f0106733:	75 14                	jne    f0106749 <initialize_paging+0x2fd>
f0106735:	83 ec 04             	sub    $0x4,%esp
f0106738:	68 40 59 13 f0       	push   $0xf0135940
f010673d:	6a 70                	push   $0x70
f010673f:	68 63 59 13 f0       	push   $0xf0135963
f0106744:	e8 b2 9a ff ff       	call   f01001fb <_panic>
f0106749:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010674f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106752:	89 d0                	mov    %edx,%eax
f0106754:	01 c0                	add    %eax,%eax
f0106756:	01 d0                	add    %edx,%eax
f0106758:	c1 e0 03             	shl    $0x3,%eax
f010675b:	01 c8                	add    %ecx,%eax
f010675d:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106763:	89 10                	mov    %edx,(%eax)
f0106765:	8b 00                	mov    (%eax),%eax
f0106767:	85 c0                	test   %eax,%eax
f0106769:	74 1f                	je     f010678a <initialize_paging+0x33e>
f010676b:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106771:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f0106777:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010677a:	89 c8                	mov    %ecx,%eax
f010677c:	01 c0                	add    %eax,%eax
f010677e:	01 c8                	add    %ecx,%eax
f0106780:	c1 e0 03             	shl    $0x3,%eax
f0106783:	01 d8                	add    %ebx,%eax
f0106785:	89 42 04             	mov    %eax,0x4(%edx)
f0106788:	eb 19                	jmp    f01067a3 <initialize_paging+0x357>
f010678a:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106793:	89 d0                	mov    %edx,%eax
f0106795:	01 c0                	add    %eax,%eax
f0106797:	01 d0                	add    %edx,%eax
f0106799:	c1 e0 03             	shl    $0x3,%eax
f010679c:	01 c8                	add    %ecx,%eax
f010679e:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01067a3:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067ac:	89 d0                	mov    %edx,%eax
f01067ae:	01 c0                	add    %eax,%eax
f01067b0:	01 d0                	add    %edx,%eax
f01067b2:	c1 e0 03             	shl    $0x3,%eax
f01067b5:	01 c8                	add    %ecx,%eax
f01067b7:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01067bc:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c5:	89 d0                	mov    %edx,%eax
f01067c7:	01 c0                	add    %eax,%eax
f01067c9:	01 d0                	add    %edx,%eax
f01067cb:	c1 e0 03             	shl    $0x3,%eax
f01067ce:	01 c8                	add    %ecx,%eax
f01067d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01067d7:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01067dc:	40                   	inc    %eax
f01067dd:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067e2:	ff 45 f4             	incl   -0xc(%ebp)
f01067e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067e8:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01067ed:	39 c2                	cmp    %eax,%edx
f01067ef:	0f 82 08 ff ff ff    	jb     f01066fd <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01067f5:	e8 36 c9 ff ff       	call   f0103130 <initialize_disk_page_file>
}
f01067fa:	90                   	nop
f01067fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01067fe:	c9                   	leave  
f01067ff:	c3                   	ret    

f0106800 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106800:	55                   	push   %ebp
f0106801:	89 e5                	mov    %esp,%ebp
f0106803:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106806:	83 ec 04             	sub    $0x4,%esp
f0106809:	6a 18                	push   $0x18
f010680b:	6a 00                	push   $0x0
f010680d:	ff 75 08             	pushl  0x8(%ebp)
f0106810:	e8 d1 a5 02 00       	call   f0130de6 <memset>
f0106815:	83 c4 10             	add    $0x10,%esp
}
f0106818:	90                   	nop
f0106819:	c9                   	leave  
f010681a:	c3                   	ret    

f010681b <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f010681b:	55                   	push   %ebp
f010681c:	89 e5                	mov    %esp,%ebp
f010681e:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106821:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106827:	8b 45 08             	mov    0x8(%ebp),%eax
f010682a:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010682c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106833:	8b 45 08             	mov    0x8(%ebp),%eax
f0106836:	8b 00                	mov    (%eax),%eax
f0106838:	85 c0                	test   %eax,%eax
f010683a:	75 17                	jne    f0106853 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010683c:	83 ec 04             	sub    $0x4,%esp
f010683f:	68 b4 59 13 f0       	push   $0xf01359b4
f0106844:	68 99 00 00 00       	push   $0x99
f0106849:	68 63 59 13 f0       	push   $0xf0135963
f010684e:	e8 a8 99 ff ff       	call   f01001fb <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106853:	8b 45 08             	mov    0x8(%ebp),%eax
f0106856:	8b 00                	mov    (%eax),%eax
f0106858:	85 c0                	test   %eax,%eax
f010685a:	75 17                	jne    f0106873 <allocate_frame+0x58>
f010685c:	83 ec 04             	sub    $0x4,%esp
f010685f:	68 01 5a 13 f0       	push   $0xf0135a01
f0106864:	68 9c 00 00 00       	push   $0x9c
f0106869:	68 63 59 13 f0       	push   $0xf0135963
f010686e:	e8 88 99 ff ff       	call   f01001fb <_panic>
f0106873:	8b 45 08             	mov    0x8(%ebp),%eax
f0106876:	8b 00                	mov    (%eax),%eax
f0106878:	8b 00                	mov    (%eax),%eax
f010687a:	85 c0                	test   %eax,%eax
f010687c:	74 14                	je     f0106892 <allocate_frame+0x77>
f010687e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106881:	8b 00                	mov    (%eax),%eax
f0106883:	8b 00                	mov    (%eax),%eax
f0106885:	8b 55 08             	mov    0x8(%ebp),%edx
f0106888:	8b 12                	mov    (%edx),%edx
f010688a:	8b 52 04             	mov    0x4(%edx),%edx
f010688d:	89 50 04             	mov    %edx,0x4(%eax)
f0106890:	eb 0d                	jmp    f010689f <allocate_frame+0x84>
f0106892:	8b 45 08             	mov    0x8(%ebp),%eax
f0106895:	8b 00                	mov    (%eax),%eax
f0106897:	8b 40 04             	mov    0x4(%eax),%eax
f010689a:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010689f:	8b 45 08             	mov    0x8(%ebp),%eax
f01068a2:	8b 00                	mov    (%eax),%eax
f01068a4:	8b 40 04             	mov    0x4(%eax),%eax
f01068a7:	85 c0                	test   %eax,%eax
f01068a9:	74 13                	je     f01068be <allocate_frame+0xa3>
f01068ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ae:	8b 00                	mov    (%eax),%eax
f01068b0:	8b 40 04             	mov    0x4(%eax),%eax
f01068b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01068b6:	8b 12                	mov    (%edx),%edx
f01068b8:	8b 12                	mov    (%edx),%edx
f01068ba:	89 10                	mov    %edx,(%eax)
f01068bc:	eb 0c                	jmp    f01068ca <allocate_frame+0xaf>
f01068be:	8b 45 08             	mov    0x8(%ebp),%eax
f01068c1:	8b 00                	mov    (%eax),%eax
f01068c3:	8b 00                	mov    (%eax),%eax
f01068c5:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01068ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01068cd:	8b 00                	mov    (%eax),%eax
f01068cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01068d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01068d8:	8b 00                	mov    (%eax),%eax
f01068da:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068e1:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01068e6:	48                   	dec    %eax
f01068e7:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01068ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ef:	8b 00                	mov    (%eax),%eax
f01068f1:	8a 40 14             	mov    0x14(%eax),%al
f01068f4:	84 c0                	test   %al,%al
f01068f6:	74 20                	je     f0106918 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01068f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fb:	8b 00                	mov    (%eax),%eax
f01068fd:	8b 50 0c             	mov    0xc(%eax),%edx
f0106900:	8b 45 08             	mov    0x8(%ebp),%eax
f0106903:	8b 00                	mov    (%eax),%eax
f0106905:	8b 40 10             	mov    0x10(%eax),%eax
f0106908:	8b 40 5c             	mov    0x5c(%eax),%eax
f010690b:	83 ec 08             	sub    $0x8,%esp
f010690e:	52                   	push   %edx
f010690f:	50                   	push   %eax
f0106910:	e8 17 13 00 00       	call   f0107c2c <pt_clear_page_table_entry>
f0106915:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0106918:	8b 45 08             	mov    0x8(%ebp),%eax
f010691b:	8b 00                	mov    (%eax),%eax
f010691d:	83 ec 0c             	sub    $0xc,%esp
f0106920:	50                   	push   %eax
f0106921:	e8 da fe ff ff       	call   f0106800 <initialize_frame_info>
f0106926:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010692e:	c9                   	leave  
f010692f:	c3                   	ret    

f0106930 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106930:	55                   	push   %ebp
f0106931:	89 e5                	mov    %esp,%ebp
f0106933:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106936:	83 ec 0c             	sub    $0xc,%esp
f0106939:	ff 75 08             	pushl  0x8(%ebp)
f010693c:	e8 bf fe ff ff       	call   f0106800 <initialize_frame_info>
f0106941:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106944:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106948:	75 17                	jne    f0106961 <free_frame+0x31>
f010694a:	83 ec 04             	sub    $0x4,%esp
f010694d:	68 40 59 13 f0       	push   $0xf0135940
f0106952:	68 b9 00 00 00       	push   $0xb9
f0106957:	68 63 59 13 f0       	push   $0xf0135963
f010695c:	e8 9a 98 ff ff       	call   f01001fb <_panic>
f0106961:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106967:	8b 45 08             	mov    0x8(%ebp),%eax
f010696a:	89 10                	mov    %edx,(%eax)
f010696c:	8b 45 08             	mov    0x8(%ebp),%eax
f010696f:	8b 00                	mov    (%eax),%eax
f0106971:	85 c0                	test   %eax,%eax
f0106973:	74 0d                	je     f0106982 <free_frame+0x52>
f0106975:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f010697a:	8b 55 08             	mov    0x8(%ebp),%edx
f010697d:	89 50 04             	mov    %edx,0x4(%eax)
f0106980:	eb 08                	jmp    f010698a <free_frame+0x5a>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010698a:	8b 45 08             	mov    0x8(%ebp),%eax
f010698d:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f0106992:	8b 45 08             	mov    0x8(%ebp),%eax
f0106995:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010699c:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01069a1:	40                   	inc    %eax
f01069a2:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f01069a7:	90                   	nop
f01069a8:	c9                   	leave  
f01069a9:	c3                   	ret    

f01069aa <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01069aa:	55                   	push   %ebp
f01069ab:	89 e5                	mov    %esp,%ebp
f01069ad:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01069b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b3:	8b 40 08             	mov    0x8(%eax),%eax
f01069b6:	48                   	dec    %eax
f01069b7:	8b 55 08             	mov    0x8(%ebp),%edx
f01069ba:	66 89 42 08          	mov    %ax,0x8(%edx)
f01069be:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c1:	8b 40 08             	mov    0x8(%eax),%eax
f01069c4:	66 85 c0             	test   %ax,%ax
f01069c7:	75 0e                	jne    f01069d7 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01069c9:	83 ec 0c             	sub    $0xc,%esp
f01069cc:	ff 75 08             	pushl  0x8(%ebp)
f01069cf:	e8 5c ff ff ff       	call   f0106930 <free_frame>
f01069d4:	83 c4 10             	add    $0x10,%esp
}
f01069d7:	90                   	nop
f01069d8:	c9                   	leave  
f01069d9:	c3                   	ret    

f01069da <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01069da:	55                   	push   %ebp
f01069db:	89 e5                	mov    %esp,%ebp
f01069dd:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e3:	c1 e8 16             	shr    $0x16,%eax
f01069e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01069ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f0:	01 d0                	add    %edx,%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01069f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069fa:	83 e0 01             	and    $0x1,%eax
f01069fd:	85 c0                	test   %eax,%eax
f01069ff:	74 74                	je     f0106a75 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106a01:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106a08:	77 1d                	ja     f0106a27 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a12:	83 ec 0c             	sub    $0xc,%esp
f0106a15:	50                   	push   %eax
f0106a16:	e8 cc 0f 00 00       	call   f01079e7 <kheap_virtual_address>
f0106a1b:	83 c4 10             	add    $0x10,%esp
f0106a1e:	89 c2                	mov    %eax,%edx
f0106a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a23:	89 10                	mov    %edx,(%eax)
f0106a25:	eb 44                	jmp    f0106a6b <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106a32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a35:	c1 e8 0c             	shr    $0xc,%eax
f0106a38:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a3b:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106a40:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106a43:	72 17                	jb     f0106a5c <get_page_table+0x82>
f0106a45:	ff 75 f0             	pushl  -0x10(%ebp)
f0106a48:	68 20 5a 13 f0       	push   $0xf0135a20
f0106a4d:	68 e2 00 00 00       	push   $0xe2
f0106a52:	68 63 59 13 f0       	push   $0xf0135963
f0106a57:	e8 9f 97 ff ff       	call   f01001fb <_panic>
f0106a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a5f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a64:	89 c2                	mov    %eax,%edx
f0106a66:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a69:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106a6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a70:	e9 b9 00 00 00       	jmp    f0106b2e <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106a75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106a79:	0f 84 a1 00 00 00    	je     f0106b20 <get_page_table+0x146>
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106a85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106a88:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106a8b:	83 ec 0c             	sub    $0xc,%esp
f0106a8e:	6a 00                	push   $0x0
f0106a90:	e8 c1 59 00 00       	call   f010c456 <fault_handler>
f0106a95:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a9b:	c1 e8 16             	shr    $0x16,%eax
f0106a9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa8:	01 d0                	add    %edx,%eax
f0106aaa:	8b 00                	mov    (%eax),%eax
f0106aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106aaf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ab6:	77 1d                	ja     f0106ad5 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106abb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ac0:	83 ec 0c             	sub    $0xc,%esp
f0106ac3:	50                   	push   %eax
f0106ac4:	e8 1e 0f 00 00       	call   f01079e7 <kheap_virtual_address>
f0106ac9:	83 c4 10             	add    $0x10,%esp
f0106acc:	89 c2                	mov    %eax,%edx
f0106ace:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ad1:	89 10                	mov    %edx,(%eax)
f0106ad3:	eb 44                	jmp    f0106b19 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106add:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ae3:	c1 e8 0c             	shr    $0xc,%eax
f0106ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106ae9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106aee:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106af1:	72 17                	jb     f0106b0a <get_page_table+0x130>
f0106af3:	ff 75 e8             	pushl  -0x18(%ebp)
f0106af6:	68 20 5a 13 f0       	push   $0xf0135a20
f0106afb:	68 fa 00 00 00       	push   $0xfa
f0106b00:	68 63 59 13 f0       	push   $0xf0135963
f0106b05:	e8 f1 96 ff ff       	call   f01001fb <_panic>
f0106b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b0d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b12:	89 c2                	mov    %eax,%edx
f0106b14:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b17:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106b19:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b1e:	eb 0e                	jmp    f0106b2e <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106b20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106b29:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106b2e:	c9                   	leave  
f0106b2f:	c3                   	ret    

f0106b30 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106b30:	55                   	push   %ebp
f0106b31:	89 e5                	mov    %esp,%ebp
f0106b33:	53                   	push   %ebx
f0106b34:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106b37:	83 ec 0c             	sub    $0xc,%esp
f0106b3a:	68 00 10 00 00       	push   $0x1000
f0106b3f:	e8 ba 0c 00 00       	call   f01077fe <kmalloc>
f0106b44:	83 c4 10             	add    $0x10,%esp
f0106b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106b4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b4e:	75 17                	jne    f0106b67 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106b50:	83 ec 04             	sub    $0x4,%esp
f0106b53:	68 4f 5a 13 f0       	push   $0xf0135a4f
f0106b58:	68 18 01 00 00       	push   $0x118
f0106b5d:	68 63 59 13 f0       	push   $0xf0135963
f0106b62:	e8 94 96 ff ff       	call   f01001fb <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106b67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b6a:	c1 e8 16             	shr    $0x16,%eax
f0106b6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b77:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b7d:	83 ec 0c             	sub    $0xc,%esp
f0106b80:	50                   	push   %eax
f0106b81:	e8 8d 0e 00 00       	call   f0107a13 <kheap_physical_address>
f0106b86:	83 c4 10             	add    $0x10,%esp
f0106b89:	83 c8 07             	or     $0x7,%eax
f0106b8c:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106b8e:	83 ec 04             	sub    $0x4,%esp
f0106b91:	68 00 10 00 00       	push   $0x1000
f0106b96:	6a 00                	push   $0x0
f0106b98:	ff 75 f4             	pushl  -0xc(%ebp)
f0106b9b:	e8 46 a2 02 00       	call   f0130de6 <memset>
f0106ba0:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106ba3:	0f 20 d8             	mov    %cr3,%eax
f0106ba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106ba9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bac:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106bb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106bb5:	c9                   	leave  
f0106bb6:	c3                   	ret    

f0106bb7 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106bb7:	55                   	push   %ebp
f0106bb8:	89 e5                	mov    %esp,%ebp
f0106bba:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106bbd:	83 ec 0c             	sub    $0xc,%esp
f0106bc0:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106bc3:	50                   	push   %eax
f0106bc4:	e8 52 fc ff ff       	call   f010681b <allocate_frame>
f0106bc9:	83 c4 10             	add    $0x10,%esp
f0106bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bd2:	83 ec 0c             	sub    $0xc,%esp
f0106bd5:	50                   	push   %eax
f0106bd6:	e8 03 f8 ff ff       	call   f01063de <to_physical_address>
f0106bdb:	83 c4 10             	add    $0x10,%esp
f0106bde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106be4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106be7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bea:	c1 e8 0c             	shr    $0xc,%eax
f0106bed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bf0:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106bf5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106bf8:	72 17                	jb     f0106c11 <__static_cpt+0x5a>
f0106bfa:	ff 75 ec             	pushl  -0x14(%ebp)
f0106bfd:	68 20 5a 13 f0       	push   $0xf0135a20
f0106c02:	68 30 01 00 00       	push   $0x130
f0106c07:	68 63 59 13 f0       	push   $0xf0135963
f0106c0c:	e8 ea 95 ff ff       	call   f01001fb <_panic>
f0106c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c14:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c19:	89 c2                	mov    %eax,%edx
f0106c1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c1e:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106c20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c23:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2c:	c1 e8 16             	shr    $0x16,%eax
f0106c2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c39:	01 d0                	add    %edx,%eax
f0106c3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3e:	83 ca 07             	or     $0x7,%edx
f0106c41:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106c43:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c46:	8b 00                	mov    (%eax),%eax
f0106c48:	83 ec 04             	sub    $0x4,%esp
f0106c4b:	68 00 10 00 00       	push   $0x1000
f0106c50:	6a 00                	push   $0x0
f0106c52:	50                   	push   %eax
f0106c53:	e8 8e a1 02 00       	call   f0130de6 <memset>
f0106c58:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c5b:	0f 20 d8             	mov    %cr3,%eax
f0106c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106c64:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106c67:	90                   	nop
f0106c68:	c9                   	leave  
f0106c69:	c3                   	ret    

f0106c6a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106c6a:	55                   	push   %ebp
f0106c6b:	89 e5                	mov    %esp,%ebp
f0106c6d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106c70:	ff 75 0c             	pushl  0xc(%ebp)
f0106c73:	e8 66 f7 ff ff       	call   f01063de <to_physical_address>
f0106c78:	83 c4 04             	add    $0x4,%esp
f0106c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106c7e:	83 ec 04             	sub    $0x4,%esp
f0106c81:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106c84:	50                   	push   %eax
f0106c85:	ff 75 10             	pushl  0x10(%ebp)
f0106c88:	ff 75 08             	pushl  0x8(%ebp)
f0106c8b:	e8 4a fd ff ff       	call   f01069da <get_page_table>
f0106c90:	83 c4 10             	add    $0x10,%esp
f0106c93:	83 f8 01             	cmp    $0x1,%eax
f0106c96:	75 1b                	jne    f0106cb3 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106c98:	83 ec 08             	sub    $0x8,%esp
f0106c9b:	ff 75 10             	pushl  0x10(%ebp)
f0106c9e:	ff 75 08             	pushl  0x8(%ebp)
f0106ca1:	e8 8a fe ff ff       	call   f0106b30 <create_page_table>
f0106ca6:	83 c4 10             	add    $0x10,%esp
f0106ca9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106cac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106cb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cb6:	8b 55 10             	mov    0x10(%ebp),%edx
f0106cb9:	c1 ea 0c             	shr    $0xc,%edx
f0106cbc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cc2:	c1 e2 02             	shl    $0x2,%edx
f0106cc5:	01 d0                	add    %edx,%eax
f0106cc7:	8b 00                	mov    (%eax),%eax
f0106cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ccc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccf:	83 e0 01             	and    $0x1,%eax
f0106cd2:	85 c0                	test   %eax,%eax
f0106cd4:	74 25                	je     f0106cfb <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106cde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106ce1:	75 07                	jne    f0106cea <map_frame+0x80>
			return 0;
f0106ce3:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ce8:	eb 43                	jmp    f0106d2d <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106cea:	83 ec 08             	sub    $0x8,%esp
f0106ced:	ff 75 10             	pushl  0x10(%ebp)
f0106cf0:	ff 75 08             	pushl  0x8(%ebp)
f0106cf3:	e8 a7 00 00 00       	call   f0106d9f <unmap_frame>
f0106cf8:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cfe:	8b 40 08             	mov    0x8(%eax),%eax
f0106d01:	40                   	inc    %eax
f0106d02:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d05:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d0c:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d0f:	c1 ea 0c             	shr    $0xc,%edx
f0106d12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d18:	c1 e2 02             	shl    $0x2,%edx
f0106d1b:	01 c2                	add    %eax,%edx
f0106d1d:	8b 45 14             	mov    0x14(%ebp),%eax
f0106d20:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106d23:	83 c8 01             	or     $0x1,%eax
f0106d26:	89 02                	mov    %eax,(%edx)

	return 0;
f0106d28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d2d:	c9                   	leave  
f0106d2e:	c3                   	ret    

f0106d2f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106d2f:	55                   	push   %ebp
f0106d30:	89 e5                	mov    %esp,%ebp
f0106d32:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106d35:	83 ec 04             	sub    $0x4,%esp
f0106d38:	ff 75 10             	pushl  0x10(%ebp)
f0106d3b:	ff 75 0c             	pushl  0xc(%ebp)
f0106d3e:	ff 75 08             	pushl  0x8(%ebp)
f0106d41:	e8 94 fc ff ff       	call   f01069da <get_page_table>
f0106d46:	83 c4 10             	add    $0x10,%esp
f0106d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106d4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d4f:	8b 00                	mov    (%eax),%eax
f0106d51:	85 c0                	test   %eax,%eax
f0106d53:	74 43                	je     f0106d98 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d58:	c1 e8 0c             	shr    $0xc,%eax
f0106d5b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106d63:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d6b:	c1 e2 02             	shl    $0x2,%edx
f0106d6e:	01 d0                	add    %edx,%eax
f0106d70:	8b 00                	mov    (%eax),%eax
f0106d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106d75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106d79:	74 16                	je     f0106d91 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d83:	83 ec 0c             	sub    $0xc,%esp
f0106d86:	50                   	push   %eax
f0106d87:	e8 65 f6 ff ff       	call   f01063f1 <to_frame_info>
f0106d8c:	83 c4 10             	add    $0x10,%esp
f0106d8f:	eb 0c                	jmp    f0106d9d <get_frame_info+0x6e>
		}
		return 0;
f0106d91:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d96:	eb 05                	jmp    f0106d9d <get_frame_info+0x6e>
	}
	return 0;
f0106d98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d9d:	c9                   	leave  
f0106d9e:	c3                   	ret    

f0106d9f <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106d9f:	55                   	push   %ebp
f0106da0:	89 e5                	mov    %esp,%ebp
f0106da2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106da5:	83 ec 04             	sub    $0x4,%esp
f0106da8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106dab:	50                   	push   %eax
f0106dac:	ff 75 0c             	pushl  0xc(%ebp)
f0106daf:	ff 75 08             	pushl  0x8(%ebp)
f0106db2:	e8 78 ff ff ff       	call   f0106d2f <get_frame_info>
f0106db7:	83 c4 10             	add    $0x10,%esp
f0106dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106dc1:	74 60                	je     f0106e23 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc6:	8a 40 14             	mov    0x14(%eax),%al
f0106dc9:	84 c0                	test   %al,%al
f0106dcb:	74 1c                	je     f0106de9 <unmap_frame+0x4a>
f0106dcd:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106dd4:	77 13                	ja     f0106de9 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106dd6:	83 ec 08             	sub    $0x8,%esp
f0106dd9:	ff 75 0c             	pushl  0xc(%ebp)
f0106ddc:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0106de1:	e8 9c 9e ff ff       	call   f0100c82 <cprintf>
f0106de6:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106de9:	83 ec 0c             	sub    $0xc,%esp
f0106dec:	ff 75 f4             	pushl  -0xc(%ebp)
f0106def:	e8 b6 fb ff ff       	call   f01069aa <decrement_references>
f0106df4:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106dfd:	c1 ea 0c             	shr    $0xc,%edx
f0106e00:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e06:	c1 e2 02             	shl    $0x2,%edx
f0106e09:	01 d0                	add    %edx,%eax
f0106e0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106e11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e14:	83 ec 08             	sub    $0x8,%esp
f0106e17:	50                   	push   %eax
f0106e18:	ff 75 08             	pushl  0x8(%ebp)
f0106e1b:	e8 17 f6 ff ff       	call   f0106437 <tlb_invalidate>
f0106e20:	83 c4 10             	add    $0x10,%esp
	}
}
f0106e23:	90                   	nop
f0106e24:	c9                   	leave  
f0106e25:	c3                   	ret    

f0106e26 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106e26:	55                   	push   %ebp
f0106e27:	89 e5                	mov    %esp,%ebp
f0106e29:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106e2c:	ff 75 0c             	pushl  0xc(%ebp)
f0106e2f:	e8 aa f5 ff ff       	call   f01063de <to_physical_address>
f0106e34:	83 c4 04             	add    $0x4,%esp
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	c1 e8 16             	shr    $0x16,%eax
f0106e40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e4a:	01 d0                	add    %edx,%eax
f0106e4c:	8b 00                	mov    (%eax),%eax
f0106e4e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106e51:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106e58:	77 19                	ja     f0106e73 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e62:	83 ec 0c             	sub    $0xc,%esp
f0106e65:	50                   	push   %eax
f0106e66:	e8 7c 0b 00 00       	call   f01079e7 <kheap_virtual_address>
f0106e6b:	83 c4 10             	add    $0x10,%esp
f0106e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106e71:	eb 40                	jmp    f0106eb3 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e81:	c1 e8 0c             	shr    $0xc,%eax
f0106e84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106e87:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106e8c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106e8f:	72 17                	jb     f0106ea8 <loadtime_map_frame+0x82>
f0106e91:	ff 75 e8             	pushl  -0x18(%ebp)
f0106e94:	68 20 5a 13 f0       	push   $0xf0135a20
f0106e99:	68 e6 01 00 00       	push   $0x1e6
f0106e9e:	68 63 59 13 f0       	push   $0xf0135963
f0106ea3:	e8 53 93 ff ff       	call   f01001fb <_panic>
f0106ea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106eab:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106eb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106eb7:	75 14                	jne    f0106ecd <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106eb9:	83 ec 08             	sub    $0x8,%esp
f0106ebc:	ff 75 10             	pushl  0x10(%ebp)
f0106ebf:	ff 75 08             	pushl  0x8(%ebp)
f0106ec2:	e8 69 fc ff ff       	call   f0106b30 <create_page_table>
f0106ec7:	83 c4 10             	add    $0x10,%esp
f0106eca:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ed0:	8b 40 08             	mov    0x8(%eax),%eax
f0106ed3:	40                   	inc    %eax
f0106ed4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106edb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ede:	c1 e8 0c             	shr    $0xc,%eax
f0106ee1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106ee6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ef0:	01 c2                	add    %eax,%edx
f0106ef2:	8b 45 14             	mov    0x14(%ebp),%eax
f0106ef5:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106ef8:	83 c8 01             	or     $0x1,%eax
f0106efb:	89 02                	mov    %eax,(%edx)

	return 0;
f0106efd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106f02:	c9                   	leave  
f0106f03:	c3                   	ret    

f0106f04 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106f04:	55                   	push   %ebp
f0106f05:	89 e5                	mov    %esp,%ebp
f0106f07:	57                   	push   %edi
f0106f08:	56                   	push   %esi
f0106f09:	53                   	push   %ebx
f0106f0a:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106f0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106f14:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106f1b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106f22:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f0106f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f2a:	eb 1a                	jmp    f0106f46 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f2f:	8a 40 14             	mov    0x14(%eax),%al
f0106f32:	84 c0                	test   %al,%al
f0106f34:	74 05                	je     f0106f3b <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106f36:	ff 45 e8             	incl   -0x18(%ebp)
f0106f39:	eb 03                	jmp    f0106f3e <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106f3b:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106f3e:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f4a:	74 07                	je     f0106f53 <calculate_available_frames+0x4f>
f0106f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f4f:	8b 00                	mov    (%eax),%eax
f0106f51:	eb 05                	jmp    f0106f58 <calculate_available_frames+0x54>
f0106f53:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f58:	a3 20 7b 65 f0       	mov    %eax,0xf0657b20
f0106f5d:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f62:	85 c0                	test   %eax,%eax
f0106f64:	75 c6                	jne    f0106f2c <calculate_available_frames+0x28>
f0106f66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f6a:	75 c0                	jne    f0106f2c <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f6c:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f0106f71:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f74:	eb 0b                	jmp    f0106f81 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106f76:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f79:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f85:	74 07                	je     f0106f8e <calculate_available_frames+0x8a>
f0106f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8a:	8b 00                	mov    (%eax),%eax
f0106f8c:	eb 05                	jmp    f0106f93 <calculate_available_frames+0x8f>
f0106f8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f93:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f0106f98:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f9d:	85 c0                	test   %eax,%eax
f0106f9f:	75 d5                	jne    f0106f76 <calculate_available_frames+0x72>
f0106fa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fa5:	75 cf                	jne    f0106f76 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106fa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106faa:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106fb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fbc:	89 c3                	mov    %eax,%ebx
f0106fbe:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106fc1:	ba 03 00 00 00       	mov    $0x3,%edx
f0106fc6:	89 df                	mov    %ebx,%edi
f0106fc8:	89 c6                	mov    %eax,%esi
f0106fca:	89 d1                	mov    %edx,%ecx
f0106fcc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fd1:	83 c4 20             	add    $0x20,%esp
f0106fd4:	5b                   	pop    %ebx
f0106fd5:	5e                   	pop    %esi
f0106fd6:	5f                   	pop    %edi
f0106fd7:	5d                   	pop    %ebp
f0106fd8:	c2 04 00             	ret    $0x4

f0106fdb <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe1:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106fe7:	29 d0                	sub    %edx,%eax
f0106fe9:	c1 f8 03             	sar    $0x3,%eax
f0106fec:	89 c2                	mov    %eax,%edx
f0106fee:	89 d0                	mov    %edx,%eax
f0106ff0:	c1 e0 02             	shl    $0x2,%eax
f0106ff3:	01 d0                	add    %edx,%eax
f0106ff5:	c1 e0 02             	shl    $0x2,%eax
f0106ff8:	01 d0                	add    %edx,%eax
f0106ffa:	c1 e0 02             	shl    $0x2,%eax
f0106ffd:	01 d0                	add    %edx,%eax
f0106fff:	89 c1                	mov    %eax,%ecx
f0107001:	c1 e1 08             	shl    $0x8,%ecx
f0107004:	01 c8                	add    %ecx,%eax
f0107006:	89 c1                	mov    %eax,%ecx
f0107008:	c1 e1 10             	shl    $0x10,%ecx
f010700b:	01 c8                	add    %ecx,%eax
f010700d:	01 c0                	add    %eax,%eax
f010700f:	01 d0                	add    %edx,%eax
}
f0107011:	5d                   	pop    %ebp
f0107012:	c3                   	ret    

f0107013 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107013:	55                   	push   %ebp
f0107014:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107016:	ff 75 08             	pushl  0x8(%ebp)
f0107019:	e8 bd ff ff ff       	call   f0106fdb <to_frame_number>
f010701e:	83 c4 04             	add    $0x4,%esp
f0107021:	c1 e0 0c             	shl    $0xc,%eax
}
f0107024:	c9                   	leave  
f0107025:	c3                   	ret    

f0107026 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107026:	55                   	push   %ebp
f0107027:	89 e5                	mov    %esp,%ebp
f0107029:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f010702c:	8b 45 08             	mov    0x8(%ebp),%eax
f010702f:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107034:	8b 55 08             	mov    0x8(%ebp),%edx
f0107037:	89 d0                	mov    %edx,%eax
f0107039:	c1 e0 02             	shl    $0x2,%eax
f010703c:	01 d0                	add    %edx,%eax
f010703e:	c1 e0 02             	shl    $0x2,%eax
f0107041:	01 d0                	add    %edx,%eax
f0107043:	c1 e0 02             	shl    $0x2,%eax
f0107046:	83 ec 0c             	sub    $0xc,%esp
f0107049:	50                   	push   %eax
f010704a:	e8 af 07 00 00       	call   f01077fe <kmalloc>
f010704f:	83 c4 10             	add    $0x10,%esp
f0107052:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
	if (shares == NULL)
f0107057:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010705c:	85 c0                	test   %eax,%eax
f010705e:	75 14                	jne    f0107074 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107060:	83 ec 04             	sub    $0x4,%esp
f0107063:	68 90 5a 13 f0       	push   $0xf0135a90
f0107068:	6a 21                	push   $0x21
f010706a:	68 d4 5a 13 f0       	push   $0xf0135ad4
f010706f:	e8 87 91 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010707b:	eb 4b                	jmp    f01070c8 <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010707d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107086:	89 d0                	mov    %edx,%eax
f0107088:	c1 e0 02             	shl    $0x2,%eax
f010708b:	01 d0                	add    %edx,%eax
f010708d:	c1 e0 02             	shl    $0x2,%eax
f0107090:	01 d0                	add    %edx,%eax
f0107092:	c1 e0 02             	shl    $0x2,%eax
f0107095:	01 c8                	add    %ecx,%eax
f0107097:	83 ec 04             	sub    $0x4,%esp
f010709a:	6a 54                	push   $0x54
f010709c:	6a 00                	push   $0x0
f010709e:	50                   	push   %eax
f010709f:	e8 42 9d 02 00       	call   f0130de6 <memset>
f01070a4:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f01070a7:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070b0:	89 d0                	mov    %edx,%eax
f01070b2:	c1 e0 02             	shl    $0x2,%eax
f01070b5:	01 d0                	add    %edx,%eax
f01070b7:	c1 e0 02             	shl    $0x2,%eax
f01070ba:	01 d0                	add    %edx,%eax
f01070bc:	c1 e0 02             	shl    $0x2,%eax
f01070bf:	01 c8                	add    %ecx,%eax
f01070c1:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01070c5:	ff 45 f4             	incl   -0xc(%ebp)
f01070c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070cb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01070d0:	39 c2                	cmp    %eax,%edx
f01070d2:	72 a9                	jb     f010707d <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01070d4:	90                   	nop
f01070d5:	c9                   	leave  
f01070d6:	c3                   	ret    

f01070d7 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01070d7:	55                   	push   %ebp
f01070d8:	89 e5                	mov    %esp,%ebp
f01070da:	53                   	push   %ebx
f01070db:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01070de:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01070e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01070ec:	eb 2c                	jmp    f010711a <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01070ee:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01070f7:	89 d0                	mov    %edx,%eax
f01070f9:	c1 e0 02             	shl    $0x2,%eax
f01070fc:	01 d0                	add    %edx,%eax
f01070fe:	c1 e0 02             	shl    $0x2,%eax
f0107101:	01 d0                	add    %edx,%eax
f0107103:	c1 e0 02             	shl    $0x2,%eax
f0107106:	01 c8                	add    %ecx,%eax
f0107108:	8a 40 4d             	mov    0x4d(%eax),%al
f010710b:	84 c0                	test   %al,%al
f010710d:	74 08                	je     f0107117 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f010710f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107115:	eb 0f                	jmp    f0107126 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107117:	ff 45 f0             	incl   -0x10(%ebp)
f010711a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010711d:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107122:	39 c2                	cmp    %eax,%edx
f0107124:	72 c8                	jb     f01070ee <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107126:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010712a:	75 50                	jne    f010717c <allocate_share_object+0xa5>
	{
		//try to increase double the size of the "shares" array
#if USE_KHEAP
		{
			shares = krealloc(shares, 2*MAX_SHARES);
f010712c:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107131:	01 c0                	add    %eax,%eax
f0107133:	89 c2                	mov    %eax,%edx
f0107135:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010713a:	83 ec 08             	sub    $0x8,%esp
f010713d:	52                   	push   %edx
f010713e:	50                   	push   %eax
f010713f:	e8 71 09 00 00       	call   f0107ab5 <krealloc>
f0107144:	83 c4 10             	add    $0x10,%esp
f0107147:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
			if (shares == NULL)
f010714c:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f0107151:	85 c0                	test   %eax,%eax
f0107153:	75 13                	jne    f0107168 <allocate_share_object+0x91>
			{
				*allocatedObject = NULL;
f0107155:	8b 45 08             	mov    0x8(%ebp),%eax
f0107158:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SHARE;
f010715e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107163:	e9 e8 00 00 00       	jmp    f0107250 <allocate_share_object+0x179>
			}
			else
			{
				sharedObjectID = MAX_SHARES;
f0107168:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f010716d:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SHARES *= 2;
f0107170:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107175:	01 c0                	add    %eax,%eax
f0107177:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010717c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107182:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107185:	89 d0                	mov    %edx,%eax
f0107187:	c1 e0 02             	shl    $0x2,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	c1 e0 02             	shl    $0x2,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	c1 e0 02             	shl    $0x2,%eax
f0107194:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107197:	8b 45 08             	mov    0x8(%ebp),%eax
f010719a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010719c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a5:	89 d0                	mov    %edx,%eax
f01071a7:	c1 e0 02             	shl    $0x2,%eax
f01071aa:	01 d0                	add    %edx,%eax
f01071ac:	c1 e0 02             	shl    $0x2,%eax
f01071af:	01 d0                	add    %edx,%eax
f01071b1:	c1 e0 02             	shl    $0x2,%eax
f01071b4:	01 c8                	add    %ecx,%eax
f01071b6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = kmalloc(PAGE_SIZE);
f01071ba:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071c3:	89 d0                	mov    %edx,%eax
f01071c5:	c1 e0 02             	shl    $0x2,%eax
f01071c8:	01 d0                	add    %edx,%eax
f01071ca:	c1 e0 02             	shl    $0x2,%eax
f01071cd:	01 d0                	add    %edx,%eax
f01071cf:	c1 e0 02             	shl    $0x2,%eax
f01071d2:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f01071d5:	83 ec 0c             	sub    $0xc,%esp
f01071d8:	68 00 10 00 00       	push   $0x1000
f01071dd:	e8 1c 06 00 00       	call   f01077fe <kmalloc>
f01071e2:	83 c4 10             	add    $0x10,%esp
f01071e5:	89 43 50             	mov    %eax,0x50(%ebx)
		if (shares[sharedObjectID].framesStorage == NULL)
f01071e8:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071f1:	89 d0                	mov    %edx,%eax
f01071f3:	c1 e0 02             	shl    $0x2,%eax
f01071f6:	01 d0                	add    %edx,%eax
f01071f8:	c1 e0 02             	shl    $0x2,%eax
f01071fb:	01 d0                	add    %edx,%eax
f01071fd:	c1 e0 02             	shl    $0x2,%eax
f0107200:	01 c8                	add    %ecx,%eax
f0107202:	8b 40 50             	mov    0x50(%eax),%eax
f0107205:	85 c0                	test   %eax,%eax
f0107207:	75 14                	jne    f010721d <allocate_share_object+0x146>
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
f0107209:	83 ec 04             	sub    $0x4,%esp
f010720c:	68 f8 5a 13 f0       	push   $0xf0135af8
f0107211:	6a 63                	push   $0x63
f0107213:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107218:	e8 de 8f ff ff       	call   f01001fb <_panic>
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010721d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107223:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107226:	89 d0                	mov    %edx,%eax
f0107228:	c1 e0 02             	shl    $0x2,%eax
f010722b:	01 d0                	add    %edx,%eax
f010722d:	c1 e0 02             	shl    $0x2,%eax
f0107230:	01 d0                	add    %edx,%eax
f0107232:	c1 e0 02             	shl    $0x2,%eax
f0107235:	01 c8                	add    %ecx,%eax
f0107237:	8b 40 50             	mov    0x50(%eax),%eax
f010723a:	83 ec 04             	sub    $0x4,%esp
f010723d:	68 00 10 00 00       	push   $0x1000
f0107242:	6a 00                	push   $0x0
f0107244:	50                   	push   %eax
f0107245:	e8 9c 9b 02 00       	call   f0130de6 <memset>
f010724a:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010724d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107250:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107253:	c9                   	leave  
f0107254:	c3                   	ret    

f0107255 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107255:	55                   	push   %ebp
f0107256:	89 e5                	mov    %esp,%ebp
f0107258:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010725b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107262:	eb 7b                	jmp    f01072df <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107264:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010726a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726d:	89 d0                	mov    %edx,%eax
f010726f:	c1 e0 02             	shl    $0x2,%eax
f0107272:	01 d0                	add    %edx,%eax
f0107274:	c1 e0 02             	shl    $0x2,%eax
f0107277:	01 d0                	add    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 c8                	add    %ecx,%eax
f010727e:	8a 40 4d             	mov    0x4d(%eax),%al
f0107281:	84 c0                	test   %al,%al
f0107283:	75 56                	jne    f01072db <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107285:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010728b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010728e:	89 d0                	mov    %edx,%eax
f0107290:	c1 e0 02             	shl    $0x2,%eax
f0107293:	01 d0                	add    %edx,%eax
f0107295:	c1 e0 02             	shl    $0x2,%eax
f0107298:	01 d0                	add    %edx,%eax
f010729a:	c1 e0 02             	shl    $0x2,%eax
f010729d:	01 c8                	add    %ecx,%eax
f010729f:	8b 00                	mov    (%eax),%eax
f01072a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072a4:	75 36                	jne    f01072dc <get_share_object_ID+0x87>
f01072a6:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01072ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072af:	89 d0                	mov    %edx,%eax
f01072b1:	c1 e0 02             	shl    $0x2,%eax
f01072b4:	01 d0                	add    %edx,%eax
f01072b6:	c1 e0 02             	shl    $0x2,%eax
f01072b9:	01 d0                	add    %edx,%eax
f01072bb:	c1 e0 02             	shl    $0x2,%eax
f01072be:	01 c8                	add    %ecx,%eax
f01072c0:	83 c0 04             	add    $0x4,%eax
f01072c3:	83 ec 08             	sub    $0x8,%esp
f01072c6:	50                   	push   %eax
f01072c7:	ff 75 0c             	pushl  0xc(%ebp)
f01072ca:	e8 35 9a 02 00       	call   f0130d04 <strcmp>
f01072cf:	83 c4 10             	add    $0x10,%esp
f01072d2:	85 c0                	test   %eax,%eax
f01072d4:	75 06                	jne    f01072dc <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f01072d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d9:	eb 19                	jmp    f01072f4 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f01072db:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f01072dc:	ff 45 f4             	incl   -0xc(%ebp)
f01072df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072e2:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01072e7:	39 c2                	cmp    %eax,%edx
f01072e9:	0f 82 75 ff ff ff    	jb     f0107264 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f01072ef:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01072f4:	c9                   	leave  
f01072f5:	c3                   	ret    

f01072f6 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01072f6:	55                   	push   %ebp
f01072f7:	89 e5                	mov    %esp,%ebp
f01072f9:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01072fc:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107301:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107304:	72 0a                	jb     f0107310 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107306:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010730b:	e9 9f 00 00 00       	jmp    f01073af <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107310:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107316:	8b 55 08             	mov    0x8(%ebp),%edx
f0107319:	89 d0                	mov    %edx,%eax
f010731b:	c1 e0 02             	shl    $0x2,%eax
f010731e:	01 d0                	add    %edx,%eax
f0107320:	c1 e0 02             	shl    $0x2,%eax
f0107323:	01 d0                	add    %edx,%eax
f0107325:	c1 e0 02             	shl    $0x2,%eax
f0107328:	01 c8                	add    %ecx,%eax
f010732a:	8b 40 50             	mov    0x50(%eax),%eax
f010732d:	83 ec 0c             	sub    $0xc,%esp
f0107330:	50                   	push   %eax
f0107331:	e8 52 01 00 00       	call   f0107488 <clear_frames_storage>
f0107336:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107339:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010733f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107342:	89 d0                	mov    %edx,%eax
f0107344:	c1 e0 02             	shl    $0x2,%eax
f0107347:	01 d0                	add    %edx,%eax
f0107349:	c1 e0 02             	shl    $0x2,%eax
f010734c:	01 d0                	add    %edx,%eax
f010734e:	c1 e0 02             	shl    $0x2,%eax
f0107351:	01 c8                	add    %ecx,%eax
f0107353:	8b 40 50             	mov    0x50(%eax),%eax
f0107356:	83 ec 0c             	sub    $0xc,%esp
f0107359:	50                   	push   %eax
f010735a:	e8 61 05 00 00       	call   f01078c0 <kfree>
f010735f:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107362:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107368:	8b 55 08             	mov    0x8(%ebp),%edx
f010736b:	89 d0                	mov    %edx,%eax
f010736d:	c1 e0 02             	shl    $0x2,%eax
f0107370:	01 d0                	add    %edx,%eax
f0107372:	c1 e0 02             	shl    $0x2,%eax
f0107375:	01 d0                	add    %edx,%eax
f0107377:	c1 e0 02             	shl    $0x2,%eax
f010737a:	01 c8                	add    %ecx,%eax
f010737c:	83 ec 04             	sub    $0x4,%esp
f010737f:	6a 54                	push   $0x54
f0107381:	6a 00                	push   $0x0
f0107383:	50                   	push   %eax
f0107384:	e8 5d 9a 02 00       	call   f0130de6 <memset>
f0107389:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010738c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107392:	8b 55 08             	mov    0x8(%ebp),%edx
f0107395:	89 d0                	mov    %edx,%eax
f0107397:	c1 e0 02             	shl    $0x2,%eax
f010739a:	01 d0                	add    %edx,%eax
f010739c:	c1 e0 02             	shl    $0x2,%eax
f010739f:	01 d0                	add    %edx,%eax
f01073a1:	c1 e0 02             	shl    $0x2,%eax
f01073a4:	01 c8                	add    %ecx,%eax
f01073a6:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073af:	c9                   	leave  
f01073b0:	c3                   	ret    

f01073b1 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01073b1:	55                   	push   %ebp
f01073b2:	89 e5                	mov    %esp,%ebp
f01073b4:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01073b7:	83 ec 0c             	sub    $0xc,%esp
f01073ba:	68 00 10 00 00       	push   $0x1000
f01073bf:	e8 3a 04 00 00       	call   f01077fe <kmalloc>
f01073c4:	83 c4 10             	add    $0x10,%esp
f01073c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01073ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01073ce:	75 17                	jne    f01073e7 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01073d0:	83 ec 04             	sub    $0x4,%esp
f01073d3:	68 32 5b 13 f0       	push   $0xf0135b32
f01073d8:	68 a9 00 00 00       	push   $0xa9
f01073dd:	68 d4 5a 13 f0       	push   $0xf0135ad4
f01073e2:	e8 14 8e ff ff       	call   f01001fb <_panic>
	}
	return frames_storage;
f01073e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01073ea:	c9                   	leave  
f01073eb:	c3                   	ret    

f01073ec <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f01073ec:	55                   	push   %ebp
f01073ed:	89 e5                	mov    %esp,%ebp
f01073ef:	53                   	push   %ebx
f01073f0:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01073f3:	8b 45 10             	mov    0x10(%ebp),%eax
f01073f6:	c1 e0 0c             	shl    $0xc,%eax
f01073f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01073fc:	83 ec 04             	sub    $0x4,%esp
f01073ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107402:	50                   	push   %eax
f0107403:	ff 75 f4             	pushl  -0xc(%ebp)
f0107406:	ff 75 08             	pushl  0x8(%ebp)
f0107409:	e8 cc f5 ff ff       	call   f01069da <get_page_table>
f010740e:	83 c4 10             	add    $0x10,%esp
f0107411:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107414:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107418:	75 14                	jne    f010742e <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010741a:	83 ec 08             	sub    $0x8,%esp
f010741d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107420:	ff 75 08             	pushl  0x8(%ebp)
f0107423:	e8 08 f7 ff ff       	call   f0106b30 <create_page_table>
f0107428:	83 c4 10             	add    $0x10,%esp
f010742b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010742e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107431:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107434:	c1 ea 0c             	shr    $0xc,%edx
f0107437:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010743d:	c1 e2 02             	shl    $0x2,%edx
f0107440:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 0c             	pushl  0xc(%ebp)
f0107449:	e8 c5 fb ff ff       	call   f0107013 <to_physical_address>
f010744e:	83 c4 10             	add    $0x10,%esp
f0107451:	83 c8 01             	or     $0x1,%eax
f0107454:	89 03                	mov    %eax,(%ebx)
}
f0107456:	90                   	nop
f0107457:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010745a:	c9                   	leave  
f010745b:	c3                   	ret    

f010745c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010745c:	55                   	push   %ebp
f010745d:	89 e5                	mov    %esp,%ebp
f010745f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107462:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107465:	c1 e0 0c             	shl    $0xc,%eax
f0107468:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f010746b:	83 ec 04             	sub    $0x4,%esp
f010746e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107471:	50                   	push   %eax
f0107472:	ff 75 f4             	pushl  -0xc(%ebp)
f0107475:	ff 75 08             	pushl  0x8(%ebp)
f0107478:	e8 b2 f8 ff ff       	call   f0106d2f <get_frame_info>
f010747d:	83 c4 10             	add    $0x10,%esp
f0107480:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107483:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107486:	c9                   	leave  
f0107487:	c3                   	ret    

f0107488 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107488:	55                   	push   %ebp
f0107489:	89 e5                	mov    %esp,%ebp
f010748b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f010748e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107495:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010749c:	eb 5b                	jmp    f01074f9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010749e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ab:	01 d0                	add    %edx,%eax
f01074ad:	8b 00                	mov    (%eax),%eax
f01074af:	85 c0                	test   %eax,%eax
f01074b1:	74 43                	je     f01074f6 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01074b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	01 d0                	add    %edx,%eax
f01074c2:	8b 00                	mov    (%eax),%eax
f01074c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074c9:	83 ec 0c             	sub    $0xc,%esp
f01074cc:	50                   	push   %eax
f01074cd:	e8 15 05 00 00       	call   f01079e7 <kheap_virtual_address>
f01074d2:	83 c4 10             	add    $0x10,%esp
f01074d5:	83 ec 0c             	sub    $0xc,%esp
f01074d8:	50                   	push   %eax
f01074d9:	e8 e2 03 00 00       	call   f01078c0 <kfree>
f01074de:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f01074e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ee:	01 d0                	add    %edx,%eax
f01074f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074f6:	ff 45 f4             	incl   -0xc(%ebp)
f01074f9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107500:	7e 9c                	jle    f010749e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107502:	90                   	nop
f0107503:	c9                   	leave  
f0107504:	c3                   	ret    

f0107505 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107505:	55                   	push   %ebp
f0107506:	89 e5                	mov    %esp,%ebp
f0107508:	83 ec 18             	sub    $0x18,%esp
f010750b:	8b 45 14             	mov    0x14(%ebp),%eax
f010750e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f0107511:	83 ec 04             	sub    $0x4,%esp
f0107514:	68 50 5b 13 f0       	push   $0xf0135b50
f0107519:	68 fa 00 00 00       	push   $0xfa
f010751e:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107523:	e8 d3 8c ff ff       	call   f01001fb <_panic>

f0107528 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107528:	55                   	push   %ebp
f0107529:	89 e5                	mov    %esp,%ebp
f010752b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f010752e:	83 ec 04             	sub    $0x4,%esp
f0107531:	68 84 5b 13 f0       	push   $0xf0135b84
f0107536:	68 0c 01 00 00       	push   $0x10c
f010753b:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107540:	e8 b6 8c ff ff       	call   f01001fb <_panic>

f0107545 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107545:	55                   	push   %ebp
f0107546:	89 e5                	mov    %esp,%ebp
f0107548:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f010754b:	83 ec 04             	sub    $0x4,%esp
f010754e:	68 b8 5b 13 f0       	push   $0xf0135bb8
f0107553:	68 1b 01 00 00       	push   $0x11b
f0107558:	68 d4 5a 13 f0       	push   $0xf0135ad4
f010755d:	e8 99 8c ff ff       	call   f01001fb <_panic>

f0107562 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107562:	55                   	push   %ebp
f0107563:	89 e5                	mov    %esp,%ebp
f0107565:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f0107568:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f0107570:	83 ec 04             	sub    $0x4,%esp
f0107573:	68 e8 5b 13 f0       	push   $0xf0135be8
f0107578:	68 33 01 00 00       	push   $0x133
f010757d:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107582:	e8 74 8c ff ff       	call   f01001fb <_panic>

f0107587 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107587:	55                   	push   %ebp
f0107588:	89 e5                	mov    %esp,%ebp
f010758a:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f010758f:	83 f8 01             	cmp    $0x1,%eax
f0107592:	75 04                	jne    f0107598 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107594:	b0 01                	mov    $0x1,%al
f0107596:	eb 02                	jmp    f010759a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107598:	b0 00                	mov    $0x0,%al
f010759a:	5d                   	pop    %ebp
f010759b:	c3                   	ret    

f010759c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01075a4:	83 f8 02             	cmp    $0x2,%eax
f01075a7:	75 04                	jne    f01075ad <isKHeapPlacementStrategyBESTFIT+0x11>
f01075a9:	b0 01                	mov    $0x1,%al
f01075ab:	eb 02                	jmp    f01075af <isKHeapPlacementStrategyBESTFIT+0x13>
f01075ad:	b0 00                	mov    $0x0,%al
f01075af:	5d                   	pop    %ebp
f01075b0:	c3                   	ret    

f01075b1 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01075b1:	55                   	push   %ebp
f01075b2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01075b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01075b7:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01075bd:	29 d0                	sub    %edx,%eax
f01075bf:	c1 f8 03             	sar    $0x3,%eax
f01075c2:	89 c2                	mov    %eax,%edx
f01075c4:	89 d0                	mov    %edx,%eax
f01075c6:	c1 e0 02             	shl    $0x2,%eax
f01075c9:	01 d0                	add    %edx,%eax
f01075cb:	c1 e0 02             	shl    $0x2,%eax
f01075ce:	01 d0                	add    %edx,%eax
f01075d0:	c1 e0 02             	shl    $0x2,%eax
f01075d3:	01 d0                	add    %edx,%eax
f01075d5:	89 c1                	mov    %eax,%ecx
f01075d7:	c1 e1 08             	shl    $0x8,%ecx
f01075da:	01 c8                	add    %ecx,%eax
f01075dc:	89 c1                	mov    %eax,%ecx
f01075de:	c1 e1 10             	shl    $0x10,%ecx
f01075e1:	01 c8                	add    %ecx,%eax
f01075e3:	01 c0                	add    %eax,%eax
f01075e5:	01 d0                	add    %edx,%eax
}
f01075e7:	5d                   	pop    %ebp
f01075e8:	c3                   	ret    

f01075e9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01075e9:	55                   	push   %ebp
f01075ea:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01075ec:	ff 75 08             	pushl  0x8(%ebp)
f01075ef:	e8 bd ff ff ff       	call   f01075b1 <to_frame_number>
f01075f4:	83 c4 04             	add    $0x4,%esp
f01075f7:	c1 e0 0c             	shl    $0xc,%eax
}
f01075fa:	c9                   	leave  
f01075fb:	c3                   	ret    

f01075fc <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01075fc:	55                   	push   %ebp
f01075fd:	89 e5                	mov    %esp,%ebp
f01075ff:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107602:	8b 45 08             	mov    0x8(%ebp),%eax
f0107605:	c1 e8 0c             	shr    $0xc,%eax
f0107608:	89 c2                	mov    %eax,%edx
f010760a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010760f:	39 c2                	cmp    %eax,%edx
f0107611:	72 14                	jb     f0107627 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107613:	83 ec 04             	sub    $0x4,%esp
f0107616:	68 18 5c 13 f0       	push   $0xf0135c18
f010761b:	6a 55                	push   $0x55
f010761d:	68 3d 5c 13 f0       	push   $0xf0135c3d
f0107622:	e8 d4 8b ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0107627:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010762d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107630:	c1 e8 0c             	shr    $0xc,%eax
f0107633:	89 c1                	mov    %eax,%ecx
f0107635:	89 c8                	mov    %ecx,%eax
f0107637:	01 c0                	add    %eax,%eax
f0107639:	01 c8                	add    %ecx,%eax
f010763b:	c1 e0 03             	shl    $0x3,%eax
f010763e:	01 d0                	add    %edx,%eax
}
f0107640:	c9                   	leave  
f0107641:	c3                   	ret    

f0107642 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107642:	55                   	push   %ebp
f0107643:	89 e5                	mov    %esp,%ebp
f0107645:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f0107648:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010764f:	00 00 00 
f0107652:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f0107659:	00 00 00 
f010765c:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f0107663:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0107666:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010766d:	00 00 00 
f0107670:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f0107677:	00 00 00 
f010767a:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f0107681:	00 00 00 
	uint32 arr_size = 0;
f0107684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f010768b:	c7 05 04 7b 65 f0 ff 	movl   $0x9fff,0xf0657b04
f0107692:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107695:	c7 05 d8 7a 65 f0 00 	movl   $0xf6000000,0xf0657ad8
f010769c:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f010769f:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01076a6:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076ab:	c1 e0 04             	shl    $0x4,%eax
f01076ae:	89 c2                	mov    %eax,%edx
f01076b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076b3:	01 d0                	add    %edx,%eax
f01076b5:	48                   	dec    %eax
f01076b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01076b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01076c1:	f7 75 f0             	divl   -0x10(%ebp)
f01076c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076c7:	29 d0                	sub    %edx,%eax
f01076c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f01076cc:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01076d1:	6a 03                	push   $0x3
f01076d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01076d6:	68 00 00 00 f6       	push   $0xf6000000
f01076db:	50                   	push   %eax
f01076dc:	e8 b4 13 00 00       	call   f0108a95 <allocate_chunk>
f01076e1:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01076e4:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076e9:	83 ec 0c             	sub    $0xc,%esp
f01076ec:	50                   	push   %eax
f01076ed:	e8 70 a0 02 00       	call   f0131762 <initialize_MemBlocksList>
f01076f2:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f01076f5:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01076fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f01076fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107700:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107706:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107709:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f010770c:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107711:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107714:	89 c2                	mov    %eax,%edx
f0107716:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107719:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f010771c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107720:	75 14                	jne    f0107736 <initialize_dyn_block_system+0xf4>
f0107722:	83 ec 04             	sub    $0x4,%esp
f0107725:	68 57 5c 13 f0       	push   $0xf0135c57
f010772a:	6a 30                	push   $0x30
f010772c:	68 75 5c 13 f0       	push   $0xf0135c75
f0107731:	e8 c5 8a ff ff       	call   f01001fb <_panic>
f0107736:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107739:	8b 00                	mov    (%eax),%eax
f010773b:	85 c0                	test   %eax,%eax
f010773d:	74 10                	je     f010774f <initialize_dyn_block_system+0x10d>
f010773f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107742:	8b 00                	mov    (%eax),%eax
f0107744:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107747:	8b 52 04             	mov    0x4(%edx),%edx
f010774a:	89 50 04             	mov    %edx,0x4(%eax)
f010774d:	eb 0b                	jmp    f010775a <initialize_dyn_block_system+0x118>
f010774f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107752:	8b 40 04             	mov    0x4(%eax),%eax
f0107755:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f010775a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010775d:	8b 40 04             	mov    0x4(%eax),%eax
f0107760:	85 c0                	test   %eax,%eax
f0107762:	74 0f                	je     f0107773 <initialize_dyn_block_system+0x131>
f0107764:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107767:	8b 40 04             	mov    0x4(%eax),%eax
f010776a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010776d:	8b 12                	mov    (%edx),%edx
f010776f:	89 10                	mov    %edx,(%eax)
f0107771:	eb 0a                	jmp    f010777d <initialize_dyn_block_system+0x13b>
f0107773:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107776:	8b 00                	mov    (%eax),%eax
f0107778:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f010777d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107780:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107786:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107789:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107790:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0107795:	48                   	dec    %eax
f0107796:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f010779b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010779f:	75 14                	jne    f01077b5 <initialize_dyn_block_system+0x173>
f01077a1:	83 ec 04             	sub    $0x4,%esp
f01077a4:	68 88 5c 13 f0       	push   $0xf0135c88
f01077a9:	6a 32                	push   $0x32
f01077ab:	68 75 5c 13 f0       	push   $0xf0135c75
f01077b0:	e8 46 8a ff ff       	call   f01001fb <_panic>
f01077b5:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f01077bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077be:	89 10                	mov    %edx,(%eax)
f01077c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c3:	8b 00                	mov    (%eax),%eax
f01077c5:	85 c0                	test   %eax,%eax
f01077c7:	74 0d                	je     f01077d6 <initialize_dyn_block_system+0x194>
f01077c9:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01077ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 08                	jmp    f01077de <initialize_dyn_block_system+0x19c>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01077de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e1:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01077e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01077f0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01077f5:	40                   	inc    %eax
f01077f6:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70

}
f01077fb:	90                   	nop
f01077fc:	c9                   	leave  
f01077fd:	c3                   	ret    

f01077fe <kmalloc>:

void* kmalloc(unsigned int size)
{
f01077fe:	55                   	push   %ebp
f01077ff:	89 e5                	mov    %esp,%ebp
f0107801:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107804:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010780b:	8b 55 08             	mov    0x8(%ebp),%edx
f010780e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107811:	01 d0                	add    %edx,%eax
f0107813:	48                   	dec    %eax
f0107814:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107817:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010781a:	ba 00 00 00 00       	mov    $0x0,%edx
f010781f:	f7 75 f0             	divl   -0x10(%ebp)
f0107822:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107825:	29 d0                	sub    %edx,%eax
f0107827:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f010782a:	e8 58 fd ff ff       	call   f0107587 <isKHeapPlacementStrategyFIRSTFIT>
f010782f:	84 c0                	test   %al,%al
f0107831:	74 13                	je     f0107846 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107833:	83 ec 0c             	sub    $0xc,%esp
f0107836:	ff 75 e8             	pushl  -0x18(%ebp)
f0107839:	e8 e6 a2 02 00       	call   f0131b24 <alloc_block_FF>
f010783e:	83 c4 10             	add    $0x10,%esp
f0107841:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107844:	eb 2d                	jmp    f0107873 <kmalloc+0x75>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107846:	e8 51 fd ff ff       	call   f010759c <isKHeapPlacementStrategyBESTFIT>
f010784b:	84 c0                	test   %al,%al
f010784d:	74 13                	je     f0107862 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f010784f:	83 ec 0c             	sub    $0xc,%esp
f0107852:	ff 75 e8             	pushl  -0x18(%ebp)
f0107855:	e8 97 a4 02 00       	call   f0131cf1 <alloc_block_BF>
f010785a:	83 c4 10             	add    $0x10,%esp
f010785d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107860:	eb 11                	jmp    f0107873 <kmalloc+0x75>
	else
		mem_block = alloc_block_NF(allocate_size);
f0107862:	83 ec 0c             	sub    $0xc,%esp
f0107865:	ff 75 e8             	pushl  -0x18(%ebp)
f0107868:	e8 95 a6 02 00       	call   f0131f02 <alloc_block_NF>
f010786d:	83 c4 10             	add    $0x10,%esp
f0107870:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107873:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107877:	74 40                	je     f01078b9 <kmalloc+0xbb>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010787c:	8b 50 08             	mov    0x8(%eax),%edx
f010787f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107884:	6a 03                	push   $0x3
f0107886:	ff 75 e8             	pushl  -0x18(%ebp)
f0107889:	52                   	push   %edx
f010788a:	50                   	push   %eax
f010788b:	e8 05 12 00 00       	call   f0108a95 <allocate_chunk>
f0107890:	83 c4 10             	add    $0x10,%esp
f0107893:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107896:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010789a:	75 16                	jne    f01078b2 <kmalloc+0xb4>
		{
			//LIST_INSERT_HEAD(&AllocMemBlocksList, mem_block);
			insert_sorted_allocList(mem_block);
f010789c:	83 ec 0c             	sub    $0xc,%esp
f010789f:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a2:	e8 f0 9f 02 00       	call   f0131897 <insert_sorted_allocList>
f01078a7:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f01078aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078ad:	8b 40 08             	mov    0x8(%eax),%eax
f01078b0:	eb 0c                	jmp    f01078be <kmalloc+0xc0>
		}
		else
			return 	NULL;
f01078b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01078b7:	eb 05                	jmp    f01078be <kmalloc+0xc0>
	}
	return NULL;
f01078b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01078be:	c9                   	leave  
f01078bf:	c3                   	ret    

f01078c0 <kfree>:
void kfree(void* virtual_address)
{
f01078c0:	55                   	push   %ebp
f01078c1:	89 e5                	mov    %esp,%ebp
f01078c3:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f01078c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01078c9:	83 ec 08             	sub    $0x8,%esp
f01078cc:	50                   	push   %eax
f01078cd:	68 c8 7a 65 f0       	push   $0xf0657ac8
f01078d2:	e8 68 9f 02 00       	call   f013183f <find_block>
f01078d7:	83 c4 10             	add    $0x10,%esp
f01078da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f01078dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e1:	0f 84 fd 00 00 00    	je     f01079e4 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f01078e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078eb:	75 14                	jne    f0107901 <kfree+0x41>
f01078ed:	83 ec 04             	sub    $0x4,%esp
f01078f0:	68 57 5c 13 f0       	push   $0xf0135c57
f01078f5:	6a 5b                	push   $0x5b
f01078f7:	68 75 5c 13 f0       	push   $0xf0135c75
f01078fc:	e8 fa 88 ff ff       	call   f01001fb <_panic>
f0107901:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107904:	8b 00                	mov    (%eax),%eax
f0107906:	85 c0                	test   %eax,%eax
f0107908:	74 10                	je     f010791a <kfree+0x5a>
f010790a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010790d:	8b 00                	mov    (%eax),%eax
f010790f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107912:	8b 52 04             	mov    0x4(%edx),%edx
f0107915:	89 50 04             	mov    %edx,0x4(%eax)
f0107918:	eb 0b                	jmp    f0107925 <kfree+0x65>
f010791a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010791d:	8b 40 04             	mov    0x4(%eax),%eax
f0107920:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0107925:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107928:	8b 40 04             	mov    0x4(%eax),%eax
f010792b:	85 c0                	test   %eax,%eax
f010792d:	74 0f                	je     f010793e <kfree+0x7e>
f010792f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107932:	8b 40 04             	mov    0x4(%eax),%eax
f0107935:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107938:	8b 12                	mov    (%edx),%edx
f010793a:	89 10                	mov    %edx,(%eax)
f010793c:	eb 0a                	jmp    f0107948 <kfree+0x88>
f010793e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107941:	8b 00                	mov    (%eax),%eax
f0107943:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0107948:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010794b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107954:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010795b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0107960:	48                   	dec    %eax
f0107961:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107966:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107969:	8b 40 08             	mov    0x8(%eax),%eax
f010796c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010796f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107972:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107977:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f010797a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107984:	8b 50 08             	mov    0x8(%eax),%edx
f0107987:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010798a:	8b 40 0c             	mov    0xc(%eax),%eax
f010798d:	01 c2                	add    %eax,%edx
f010798f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107992:	01 d0                	add    %edx,%eax
f0107994:	48                   	dec    %eax
f0107995:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107998:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010799b:	ba 00 00 00 00       	mov    $0x0,%edx
f01079a0:	f7 75 e4             	divl   -0x1c(%ebp)
f01079a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079a6:	29 d0                	sub    %edx,%eax
f01079a8:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01079b1:	eb 1b                	jmp    f01079ce <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f01079b3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01079b8:	83 ec 08             	sub    $0x8,%esp
f01079bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01079be:	50                   	push   %eax
f01079bf:	e8 db f3 ff ff       	call   f0106d9f <unmap_frame>
f01079c4:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079c7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01079ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079d1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01079d4:	72 dd                	jb     f01079b3 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f01079d6:	83 ec 0c             	sub    $0xc,%esp
f01079d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01079dc:	e8 ee aa 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f01079e1:	83 c4 10             	add    $0x10,%esp
	}
}
f01079e4:	90                   	nop
f01079e5:	c9                   	leave  
f01079e6:	c3                   	ret    

f01079e7 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f01079e7:	55                   	push   %ebp
f01079e8:	89 e5                	mov    %esp,%ebp
f01079ea:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f01079ed:	83 ec 0c             	sub    $0xc,%esp
f01079f0:	ff 75 08             	pushl  0x8(%ebp)
f01079f3:	e8 04 fc ff ff       	call   f01075fc <to_frame_info>
f01079f8:	83 c4 10             	add    $0x10,%esp
f01079fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f01079fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a02:	74 08                	je     f0107a0c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a07:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a0a:	eb 05                	jmp    f0107a11 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a0c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107a11:	c9                   	leave  
f0107a12:	c3                   	ret    

f0107a13 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107a13:	55                   	push   %ebp
f0107a14:	89 e5                	mov    %esp,%ebp
f0107a16:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107a19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107a20:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107a25:	83 ec 04             	sub    $0x4,%esp
f0107a28:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107a2b:	52                   	push   %edx
f0107a2c:	ff 75 08             	pushl  0x8(%ebp)
f0107a2f:	50                   	push   %eax
f0107a30:	e8 fa f2 ff ff       	call   f0106d2f <get_frame_info>
f0107a35:	83 c4 10             	add    $0x10,%esp
f0107a38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107a3b:	83 ec 0c             	sub    $0xc,%esp
f0107a3e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a41:	e8 a3 fb ff ff       	call   f01075e9 <to_physical_address>
f0107a46:	83 c4 10             	add    $0x10,%esp
f0107a49:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107a4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a50:	74 05                	je     f0107a57 <kheap_physical_address+0x44>
		return address_physical;
f0107a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a55:	eb 05                	jmp    f0107a5c <kheap_physical_address+0x49>
	return 0;
f0107a57:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107a5c:	c9                   	leave  
f0107a5d:	c3                   	ret    

f0107a5e <kfreeall>:


void kfreeall()
{
f0107a5e:	55                   	push   %ebp
f0107a5f:	89 e5                	mov    %esp,%ebp
f0107a61:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a64:	83 ec 04             	sub    $0x4,%esp
f0107a67:	68 ab 5c 13 f0       	push   $0xf0135cab
f0107a6c:	68 8a 00 00 00       	push   $0x8a
f0107a71:	68 75 5c 13 f0       	push   $0xf0135c75
f0107a76:	e8 80 87 ff ff       	call   f01001fb <_panic>

f0107a7b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107a7b:	55                   	push   %ebp
f0107a7c:	89 e5                	mov    %esp,%ebp
f0107a7e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a81:	83 ec 04             	sub    $0x4,%esp
f0107a84:	68 ab 5c 13 f0       	push   $0xf0135cab
f0107a89:	68 90 00 00 00       	push   $0x90
f0107a8e:	68 75 5c 13 f0       	push   $0xf0135c75
f0107a93:	e8 63 87 ff ff       	call   f01001fb <_panic>

f0107a98 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107a98:	55                   	push   %ebp
f0107a99:	89 e5                	mov    %esp,%ebp
f0107a9b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a9e:	83 ec 04             	sub    $0x4,%esp
f0107aa1:	68 ab 5c 13 f0       	push   $0xf0135cab
f0107aa6:	68 95 00 00 00       	push   $0x95
f0107aab:	68 75 5c 13 f0       	push   $0xf0135c75
f0107ab0:	e8 46 87 ff ff       	call   f01001fb <_panic>

f0107ab5 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107ab5:	55                   	push   %ebp
f0107ab6:	89 e5                	mov    %esp,%ebp
f0107ab8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107abb:	83 ec 04             	sub    $0x4,%esp
f0107abe:	68 bc 5c 13 f0       	push   $0xf0135cbc
f0107ac3:	68 ac 00 00 00       	push   $0xac
f0107ac8:	68 75 5c 13 f0       	push   $0xf0135c75
f0107acd:	e8 29 87 ff ff       	call   f01001fb <_panic>

f0107ad2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107ad2:	55                   	push   %ebp
f0107ad3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ad8:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0107ade:	29 d0                	sub    %edx,%eax
f0107ae0:	c1 f8 03             	sar    $0x3,%eax
f0107ae3:	89 c2                	mov    %eax,%edx
f0107ae5:	89 d0                	mov    %edx,%eax
f0107ae7:	c1 e0 02             	shl    $0x2,%eax
f0107aea:	01 d0                	add    %edx,%eax
f0107aec:	c1 e0 02             	shl    $0x2,%eax
f0107aef:	01 d0                	add    %edx,%eax
f0107af1:	c1 e0 02             	shl    $0x2,%eax
f0107af4:	01 d0                	add    %edx,%eax
f0107af6:	89 c1                	mov    %eax,%ecx
f0107af8:	c1 e1 08             	shl    $0x8,%ecx
f0107afb:	01 c8                	add    %ecx,%eax
f0107afd:	89 c1                	mov    %eax,%ecx
f0107aff:	c1 e1 10             	shl    $0x10,%ecx
f0107b02:	01 c8                	add    %ecx,%eax
f0107b04:	01 c0                	add    %eax,%eax
f0107b06:	01 d0                	add    %edx,%eax
}
f0107b08:	5d                   	pop    %ebp
f0107b09:	c3                   	ret    

f0107b0a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b0a:	55                   	push   %ebp
f0107b0b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b0d:	ff 75 08             	pushl  0x8(%ebp)
f0107b10:	e8 bd ff ff ff       	call   f0107ad2 <to_frame_number>
f0107b15:	83 c4 04             	add    $0x4,%esp
f0107b18:	c1 e0 0c             	shl    $0xc,%eax
}
f0107b1b:	c9                   	leave  
f0107b1c:	c3                   	ret    

f0107b1d <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107b1d:	55                   	push   %ebp
f0107b1e:	89 e5                	mov    %esp,%ebp
f0107b20:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107b23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107b2a:	83 ec 04             	sub    $0x4,%esp
f0107b2d:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107b30:	50                   	push   %eax
f0107b31:	ff 75 0c             	pushl  0xc(%ebp)
f0107b34:	ff 75 08             	pushl  0x8(%ebp)
f0107b37:	e8 9e ee ff ff       	call   f01069da <get_page_table>
f0107b3c:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	85 c0                	test   %eax,%eax
f0107b44:	74 75                	je     f0107bbb <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b49:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b4c:	c1 ea 0c             	shr    $0xc,%edx
f0107b4f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b55:	c1 e2 02             	shl    $0x2,%edx
f0107b58:	01 d0                	add    %edx,%eax
f0107b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b60:	c1 e9 0c             	shr    $0xc,%ecx
f0107b63:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b69:	c1 e1 02             	shl    $0x2,%ecx
f0107b6c:	01 ca                	add    %ecx,%edx
f0107b6e:	8b 12                	mov    (%edx),%edx
f0107b70:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107b73:	f7 d1                	not    %ecx
f0107b75:	21 ca                	and    %ecx,%edx
f0107b77:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b7c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b7f:	c1 ea 0c             	shr    $0xc,%edx
f0107b82:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b88:	c1 e2 02             	shl    $0x2,%edx
f0107b8b:	01 c2                	add    %eax,%edx
f0107b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b90:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b93:	c1 e9 0c             	shr    $0xc,%ecx
f0107b96:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b9c:	c1 e1 02             	shl    $0x2,%ecx
f0107b9f:	01 c8                	add    %ecx,%eax
f0107ba1:	8b 00                	mov    (%eax),%eax
f0107ba3:	0b 45 10             	or     0x10(%ebp),%eax
f0107ba6:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107bab:	83 ec 08             	sub    $0x8,%esp
f0107bae:	50                   	push   %eax
f0107baf:	6a 00                	push   $0x0
f0107bb1:	e8 81 e8 ff ff       	call   f0106437 <tlb_invalidate>
f0107bb6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107bb9:	eb 14                	jmp    f0107bcf <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107bbb:	83 ec 04             	sub    $0x4,%esp
f0107bbe:	68 e3 5c 13 f0       	push   $0xf0135ce3
f0107bc3:	6a 19                	push   $0x19
f0107bc5:	68 00 5d 13 f0       	push   $0xf0135d00
f0107bca:	e8 2c 86 ff ff       	call   f01001fb <_panic>
	}
}
f0107bcf:	c9                   	leave  
f0107bd0:	c3                   	ret    

f0107bd1 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107bd1:	55                   	push   %ebp
f0107bd2:	89 e5                	mov    %esp,%ebp
f0107bd4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107bd7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bde:	83 ec 04             	sub    $0x4,%esp
f0107be1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107be4:	50                   	push   %eax
f0107be5:	ff 75 0c             	pushl  0xc(%ebp)
f0107be8:	ff 75 08             	pushl  0x8(%ebp)
f0107beb:	e8 ea ed ff ff       	call   f01069da <get_page_table>
f0107bf0:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107bf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bf6:	85 c0                	test   %eax,%eax
f0107bf8:	74 2b                	je     f0107c25 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107bfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bfd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c00:	c1 ea 0c             	shr    $0xc,%edx
f0107c03:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c09:	c1 e2 02             	shl    $0x2,%edx
f0107c0c:	01 d0                	add    %edx,%eax
f0107c0e:	8b 00                	mov    (%eax),%eax
f0107c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107c13:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c1d:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c23:	eb 05                	jmp    f0107c2a <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107c25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107c2a:	c9                   	leave  
f0107c2b:	c3                   	ret    

f0107c2c <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107c2c:	55                   	push   %ebp
f0107c2d:	89 e5                	mov    %esp,%ebp
f0107c2f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c39:	83 ec 04             	sub    $0x4,%esp
f0107c3c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107c3f:	50                   	push   %eax
f0107c40:	ff 75 0c             	pushl  0xc(%ebp)
f0107c43:	ff 75 08             	pushl  0x8(%ebp)
f0107c46:	e8 8f ed ff ff       	call   f01069da <get_page_table>
f0107c4b:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c51:	85 c0                	test   %eax,%eax
f0107c53:	74 2d                	je     f0107c82 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c58:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c5b:	c1 ea 0c             	shr    $0xc,%edx
f0107c5e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c64:	c1 e2 02             	shl    $0x2,%edx
f0107c67:	01 d0                	add    %edx,%eax
f0107c69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c72:	83 ec 08             	sub    $0x8,%esp
f0107c75:	50                   	push   %eax
f0107c76:	6a 00                	push   $0x0
f0107c78:	e8 ba e7 ff ff       	call   f0106437 <tlb_invalidate>
f0107c7d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c80:	eb 14                	jmp    f0107c96 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c82:	83 ec 04             	sub    $0x4,%esp
f0107c85:	68 e3 5c 13 f0       	push   $0xf0135ce3
f0107c8a:	6a 42                	push   $0x42
f0107c8c:	68 00 5d 13 f0       	push   $0xf0135d00
f0107c91:	e8 65 85 ff ff       	call   f01001fb <_panic>
	}
}
f0107c96:	c9                   	leave  
f0107c97:	c3                   	ret    

f0107c98 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107c98:	55                   	push   %ebp
f0107c99:	89 e5                	mov    %esp,%ebp
f0107c9b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ca5:	83 ec 04             	sub    $0x4,%esp
f0107ca8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cab:	50                   	push   %eax
f0107cac:	ff 75 0c             	pushl  0xc(%ebp)
f0107caf:	ff 75 08             	pushl  0x8(%ebp)
f0107cb2:	e8 23 ed ff ff       	call   f01069da <get_page_table>
f0107cb7:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbd:	85 c0                	test   %eax,%eax
f0107cbf:	74 28                	je     f0107ce9 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107cc1:	83 ec 04             	sub    $0x4,%esp
f0107cc4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cc7:	50                   	push   %eax
f0107cc8:	ff 75 0c             	pushl  0xc(%ebp)
f0107ccb:	ff 75 08             	pushl  0x8(%ebp)
f0107cce:	e8 5c f0 ff ff       	call   f0106d2f <get_frame_info>
f0107cd3:	83 c4 10             	add    $0x10,%esp
f0107cd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107cd9:	83 ec 0c             	sub    $0xc,%esp
f0107cdc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cdf:	e8 26 fe ff ff       	call   f0107b0a <to_physical_address>
f0107ce4:	83 c4 10             	add    $0x10,%esp
f0107ce7:	eb 05                	jmp    f0107cee <virtual_to_physical+0x56>
	}
	return -1;
f0107ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107cee:	c9                   	leave  
f0107cef:	c3                   	ret    

f0107cf0 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107cf0:	55                   	push   %ebp
f0107cf1:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107cf6:	c1 e8 16             	shr    $0x16,%eax
f0107cf9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d00:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d03:	01 d0                	add    %edx,%eax
f0107d05:	8b 00                	mov    (%eax),%eax
f0107d07:	83 e0 20             	and    $0x20,%eax
f0107d0a:	85 c0                	test   %eax,%eax
f0107d0c:	0f 95 c0             	setne  %al
f0107d0f:	0f b6 c0             	movzbl %al,%eax
}
f0107d12:	5d                   	pop    %ebp
f0107d13:	c3                   	ret    

f0107d14 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107d14:	55                   	push   %ebp
f0107d15:	89 e5                	mov    %esp,%ebp
f0107d17:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d1d:	c1 e8 16             	shr    $0x16,%eax
f0107d20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d2a:	01 d0                	add    %edx,%eax
f0107d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d2f:	c1 ea 16             	shr    $0x16,%edx
f0107d32:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107d39:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d3c:	01 ca                	add    %ecx,%edx
f0107d3e:	8b 12                	mov    (%edx),%edx
f0107d40:	83 e2 df             	and    $0xffffffdf,%edx
f0107d43:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107d45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d48:	83 ec 08             	sub    $0x8,%esp
f0107d4b:	50                   	push   %eax
f0107d4c:	6a 00                	push   $0x0
f0107d4e:	e8 e4 e6 ff ff       	call   f0106437 <tlb_invalidate>
f0107d53:	83 c4 10             	add    $0x10,%esp
}
f0107d56:	90                   	nop
f0107d57:	c9                   	leave  
f0107d58:	c3                   	ret    

f0107d59 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107d59:	55                   	push   %ebp
f0107d5a:	89 e5                	mov    %esp,%ebp
f0107d5c:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d62:	c1 e8 16             	shr    $0x16,%eax
f0107d65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d6f:	01 d0                	add    %edx,%eax
f0107d71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107d77:	0f 20 d8             	mov    %cr3,%eax
f0107d7a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107d7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107d80:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107d83:	90                   	nop
f0107d84:	c9                   	leave  
f0107d85:	c3                   	ret    

f0107d86 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107d86:	55                   	push   %ebp
f0107d87:	89 e5                	mov    %esp,%ebp
f0107d89:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107d8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107d93:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107d9a:	eb 21                	jmp    f0107dbd <env_page_ws_get_size+0x37>
f0107d9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107da2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107da5:	89 d0                	mov    %edx,%eax
f0107da7:	01 c0                	add    %eax,%eax
f0107da9:	01 d0                	add    %edx,%eax
f0107dab:	c1 e0 03             	shl    $0x3,%eax
f0107dae:	01 c8                	add    %ecx,%eax
f0107db0:	8a 40 04             	mov    0x4(%eax),%al
f0107db3:	84 c0                	test   %al,%al
f0107db5:	75 03                	jne    f0107dba <env_page_ws_get_size+0x34>
f0107db7:	ff 45 f8             	incl   -0x8(%ebp)
f0107dba:	ff 45 fc             	incl   -0x4(%ebp)
f0107dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc0:	8b 50 74             	mov    0x74(%eax),%edx
f0107dc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107dc6:	39 c2                	cmp    %eax,%edx
f0107dc8:	77 d2                	ja     f0107d9c <env_page_ws_get_size+0x16>
	return counter;
f0107dca:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107dcd:	c9                   	leave  
f0107dce:	c3                   	ret    

f0107dcf <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107dcf:	55                   	push   %ebp
f0107dd0:	89 e5                	mov    %esp,%ebp
f0107dd2:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107dd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107ddc:	eb 4c                	jmp    f0107e2a <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107dde:	8b 45 08             	mov    0x8(%ebp),%eax
f0107de1:	8b 48 78             	mov    0x78(%eax),%ecx
f0107de4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107de7:	89 d0                	mov    %edx,%eax
f0107de9:	01 c0                	add    %eax,%eax
f0107deb:	01 d0                	add    %edx,%eax
f0107ded:	c1 e0 03             	shl    $0x3,%eax
f0107df0:	01 c8                	add    %ecx,%eax
f0107df2:	8b 00                	mov    (%eax),%eax
f0107df4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dfa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107dff:	89 c2                	mov    %eax,%edx
f0107e01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e04:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e0f:	39 c2                	cmp    %eax,%edx
f0107e11:	75 14                	jne    f0107e27 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e16:	83 ec 08             	sub    $0x8,%esp
f0107e19:	50                   	push   %eax
f0107e1a:	ff 75 08             	pushl  0x8(%ebp)
f0107e1d:	e8 b9 00 00 00       	call   f0107edb <env_page_ws_clear_entry>
f0107e22:	83 c4 10             	add    $0x10,%esp
			break;
f0107e25:	eb 10                	jmp    f0107e37 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107e27:	ff 45 f4             	incl   -0xc(%ebp)
f0107e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2d:	8b 50 74             	mov    0x74(%eax),%edx
f0107e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e33:	39 c2                	cmp    %eax,%edx
f0107e35:	77 a7                	ja     f0107dde <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107e37:	90                   	nop
f0107e38:	c9                   	leave  
f0107e39:	c3                   	ret    

f0107e3a <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107e3a:	55                   	push   %ebp
f0107e3b:	89 e5                	mov    %esp,%ebp
f0107e3d:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107e40:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e43:	8b 40 74             	mov    0x74(%eax),%eax
f0107e46:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107e49:	77 16                	ja     f0107e61 <env_page_ws_set_entry+0x27>
f0107e4b:	68 1c 5d 13 f0       	push   $0xf0135d1c
f0107e50:	68 52 5d 13 f0       	push   $0xf0135d52
f0107e55:	6a 26                	push   $0x26
f0107e57:	68 68 5d 13 f0       	push   $0xf0135d68
f0107e5c:	e8 9a 83 ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107e61:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107e68:	76 16                	jbe    f0107e80 <env_page_ws_set_entry+0x46>
f0107e6a:	68 88 5d 13 f0       	push   $0xf0135d88
f0107e6f:	68 52 5d 13 f0       	push   $0xf0135d52
f0107e74:	6a 27                	push   $0x27
f0107e76:	68 68 5d 13 f0       	push   $0xf0135d68
f0107e7b:	e8 7b 83 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107e80:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e83:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e86:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e89:	89 d0                	mov    %edx,%eax
f0107e8b:	01 c0                	add    %eax,%eax
f0107e8d:	01 d0                	add    %edx,%eax
f0107e8f:	c1 e0 03             	shl    $0x3,%eax
f0107e92:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107e95:	8b 45 10             	mov    0x10(%ebp),%eax
f0107e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ea3:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea8:	8b 48 78             	mov    0x78(%eax),%ecx
f0107eab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107eae:	89 d0                	mov    %edx,%eax
f0107eb0:	01 c0                	add    %eax,%eax
f0107eb2:	01 d0                	add    %edx,%eax
f0107eb4:	c1 e0 03             	shl    $0x3,%eax
f0107eb7:	01 c8                	add    %ecx,%eax
f0107eb9:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec0:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ec3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ec6:	89 d0                	mov    %edx,%eax
f0107ec8:	01 c0                	add    %eax,%eax
f0107eca:	01 d0                	add    %edx,%eax
f0107ecc:	c1 e0 03             	shl    $0x3,%eax
f0107ecf:	01 c8                	add    %ecx,%eax
f0107ed1:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107ed8:	90                   	nop
}
f0107ed9:	c9                   	leave  
f0107eda:	c3                   	ret    

f0107edb <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107edb:	55                   	push   %ebp
f0107edc:	89 e5                	mov    %esp,%ebp
f0107ede:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ee4:	8b 40 74             	mov    0x74(%eax),%eax
f0107ee7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107eea:	77 16                	ja     f0107f02 <env_page_ws_clear_entry+0x27>
f0107eec:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107ef1:	68 52 5d 13 f0       	push   $0xf0135d52
f0107ef6:	6a 32                	push   $0x32
f0107ef8:	68 68 5d 13 f0       	push   $0xf0135d68
f0107efd:	e8 f9 82 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f05:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f08:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f0b:	89 d0                	mov    %edx,%eax
f0107f0d:	01 c0                	add    %eax,%eax
f0107f0f:	01 d0                	add    %edx,%eax
f0107f11:	c1 e0 03             	shl    $0x3,%eax
f0107f14:	01 c8                	add    %ecx,%eax
f0107f16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f1f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f22:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f25:	89 d0                	mov    %edx,%eax
f0107f27:	01 c0                	add    %eax,%eax
f0107f29:	01 d0                	add    %edx,%eax
f0107f2b:	c1 e0 03             	shl    $0x3,%eax
f0107f2e:	01 c8                	add    %ecx,%eax
f0107f30:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107f34:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f37:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3d:	89 d0                	mov    %edx,%eax
f0107f3f:	01 c0                	add    %eax,%eax
f0107f41:	01 d0                	add    %edx,%eax
f0107f43:	c1 e0 03             	shl    $0x3,%eax
f0107f46:	01 c8                	add    %ecx,%eax
f0107f48:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107f4f:	90                   	nop
f0107f50:	c9                   	leave  
f0107f51:	c3                   	ret    

f0107f52 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107f52:	55                   	push   %ebp
f0107f53:	89 e5                	mov    %esp,%ebp
f0107f55:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f5b:	8b 40 74             	mov    0x74(%eax),%eax
f0107f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f61:	77 16                	ja     f0107f79 <env_page_ws_get_virtual_address+0x27>
f0107f63:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107f68:	68 52 5d 13 f0       	push   $0xf0135d52
f0107f6d:	6a 3a                	push   $0x3a
f0107f6f:	68 68 5d 13 f0       	push   $0xf0135d68
f0107f74:	e8 82 82 ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107f79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f7c:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f82:	89 d0                	mov    %edx,%eax
f0107f84:	01 c0                	add    %eax,%eax
f0107f86:	01 d0                	add    %edx,%eax
f0107f88:	c1 e0 03             	shl    $0x3,%eax
f0107f8b:	01 c8                	add    %ecx,%eax
f0107f8d:	8b 00                	mov    (%eax),%eax
f0107f8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f95:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107f9a:	c9                   	leave  
f0107f9b:	c3                   	ret    

f0107f9c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107f9c:	55                   	push   %ebp
f0107f9d:	89 e5                	mov    %esp,%ebp
f0107f9f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fa5:	8b 40 74             	mov    0x74(%eax),%eax
f0107fa8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107fab:	77 16                	ja     f0107fc3 <env_page_ws_get_time_stamp+0x27>
f0107fad:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107fb2:	68 52 5d 13 f0       	push   $0xf0135d52
f0107fb7:	6a 40                	push   $0x40
f0107fb9:	68 68 5d 13 f0       	push   $0xf0135d68
f0107fbe:	e8 38 82 ff ff       	call   f01001fb <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fc9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcc:	89 d0                	mov    %edx,%eax
f0107fce:	01 c0                	add    %eax,%eax
f0107fd0:	01 d0                	add    %edx,%eax
f0107fd2:	c1 e0 03             	shl    $0x3,%eax
f0107fd5:	01 c8                	add    %ecx,%eax
f0107fd7:	8b 40 08             	mov    0x8(%eax),%eax
}
f0107fda:	c9                   	leave  
f0107fdb:	c3                   	ret    

f0107fdc <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107fdc:	55                   	push   %ebp
f0107fdd:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe2:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fe5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fe8:	89 d0                	mov    %edx,%eax
f0107fea:	01 c0                	add    %eax,%eax
f0107fec:	01 d0                	add    %edx,%eax
f0107fee:	c1 e0 03             	shl    $0x3,%eax
f0107ff1:	01 c8                	add    %ecx,%eax
f0107ff3:	8a 40 04             	mov    0x4(%eax),%al
f0107ff6:	0f b6 c0             	movzbl %al,%eax
}
f0107ff9:	5d                   	pop    %ebp
f0107ffa:	c3                   	ret    

f0107ffb <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107ffb:	55                   	push   %ebp
f0107ffc:	89 e5                	mov    %esp,%ebp
f0107ffe:	53                   	push   %ebx
f0107fff:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108002:	83 ec 0c             	sub    $0xc,%esp
f0108005:	6a 02                	push   $0x2
f0108007:	e8 63 5a 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f010800c:	83 c4 10             	add    $0x10,%esp
f010800f:	85 c0                	test   %eax,%eax
f0108011:	0f 84 fe 00 00 00    	je     f0108115 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108017:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010801e:	83 ec 0c             	sub    $0xc,%esp
f0108021:	68 f4 5d 13 f0       	push   $0xf0135df4
f0108026:	e8 57 8c ff ff       	call   f0100c82 <cprintf>
f010802b:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010802e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108031:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108037:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010803a:	eb 2c                	jmp    f0108068 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010803c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010803f:	8b 10                	mov    (%eax),%edx
f0108041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108044:	8d 48 01             	lea    0x1(%eax),%ecx
f0108047:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010804a:	83 ec 04             	sub    $0x4,%esp
f010804d:	52                   	push   %edx
f010804e:	50                   	push   %eax
f010804f:	68 0e 5e 13 f0       	push   $0xf0135e0e
f0108054:	e8 29 8c ff ff       	call   f0100c82 <cprintf>
f0108059:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010805c:	8b 45 08             	mov    0x8(%ebp),%eax
f010805f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108065:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108068:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010806c:	74 08                	je     f0108076 <env_page_ws_print+0x7b>
f010806e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108071:	8b 40 10             	mov    0x10(%eax),%eax
f0108074:	eb 05                	jmp    f010807b <env_page_ws_print+0x80>
f0108076:	b8 00 00 00 00       	mov    $0x0,%eax
f010807b:	8b 55 08             	mov    0x8(%ebp),%edx
f010807e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108084:	8b 45 08             	mov    0x8(%ebp),%eax
f0108087:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010808d:	85 c0                	test   %eax,%eax
f010808f:	75 ab                	jne    f010803c <env_page_ws_print+0x41>
f0108091:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108095:	75 a5                	jne    f010803c <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108097:	83 ec 0c             	sub    $0xc,%esp
f010809a:	68 16 5e 13 f0       	push   $0xf0135e16
f010809f:	e8 de 8b ff ff       	call   f0100c82 <cprintf>
f01080a4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01080aa:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01080b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080b3:	eb 2c                	jmp    f01080e1 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080b8:	8b 10                	mov    (%eax),%edx
f01080ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080bd:	8d 48 01             	lea    0x1(%eax),%ecx
f01080c0:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080c3:	83 ec 04             	sub    $0x4,%esp
f01080c6:	52                   	push   %edx
f01080c7:	50                   	push   %eax
f01080c8:	68 0e 5e 13 f0       	push   $0xf0135e0e
f01080cd:	e8 b0 8b ff ff       	call   f0100c82 <cprintf>
f01080d2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01080de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080e5:	74 08                	je     f01080ef <env_page_ws_print+0xf4>
f01080e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080ea:	8b 40 10             	mov    0x10(%eax),%eax
f01080ed:	eb 05                	jmp    f01080f4 <env_page_ws_print+0xf9>
f01080ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01080f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01080f7:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f01080fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108100:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108106:	85 c0                	test   %eax,%eax
f0108108:	75 ab                	jne    f01080b5 <env_page_ws_print+0xba>
f010810a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010810e:	75 a5                	jne    f01080b5 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108110:	e9 95 01 00 00       	jmp    f01082aa <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108115:	83 ec 0c             	sub    $0xc,%esp
f0108118:	68 31 5e 13 f0       	push   $0xf0135e31
f010811d:	e8 60 8b ff ff       	call   f0100c82 <cprintf>
f0108122:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108125:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010812c:	e9 6a 01 00 00       	jmp    f010829b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108131:	8b 45 08             	mov    0x8(%ebp),%eax
f0108134:	8b 48 78             	mov    0x78(%eax),%ecx
f0108137:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010813a:	89 d0                	mov    %edx,%eax
f010813c:	01 c0                	add    %eax,%eax
f010813e:	01 d0                	add    %edx,%eax
f0108140:	c1 e0 03             	shl    $0x3,%eax
f0108143:	01 c8                	add    %ecx,%eax
f0108145:	8a 40 04             	mov    0x4(%eax),%al
f0108148:	84 c0                	test   %al,%al
f010814a:	74 43                	je     f010818f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010814c:	83 ec 0c             	sub    $0xc,%esp
f010814f:	68 3b 5e 13 f0       	push   $0xf0135e3b
f0108154:	e8 29 8b ff ff       	call   f0100c82 <cprintf>
f0108159:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010815c:	8b 45 08             	mov    0x8(%ebp),%eax
f010815f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108165:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108168:	75 10                	jne    f010817a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f010816a:	83 ec 0c             	sub    $0xc,%esp
f010816d:	68 4a 5e 13 f0       	push   $0xf0135e4a
f0108172:	e8 0b 8b ff ff       	call   f0100c82 <cprintf>
f0108177:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010817a:	83 ec 0c             	sub    $0xc,%esp
f010817d:	68 50 5e 13 f0       	push   $0xf0135e50
f0108182:	e8 fb 8a ff ff       	call   f0100c82 <cprintf>
f0108187:	83 c4 10             	add    $0x10,%esp
				continue;
f010818a:	e9 09 01 00 00       	jmp    f0108298 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010818f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108192:	8b 48 78             	mov    0x78(%eax),%ecx
f0108195:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108198:	89 d0                	mov    %edx,%eax
f010819a:	01 c0                	add    %eax,%eax
f010819c:	01 d0                	add    %edx,%eax
f010819e:	c1 e0 03             	shl    $0x3,%eax
f01081a1:	01 c8                	add    %ecx,%eax
f01081a3:	8b 00                	mov    (%eax),%eax
f01081a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01081a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ab:	8b 48 78             	mov    0x78(%eax),%ecx
f01081ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081b1:	89 d0                	mov    %edx,%eax
f01081b3:	01 c0                	add    %eax,%eax
f01081b5:	01 d0                	add    %edx,%eax
f01081b7:	c1 e0 03             	shl    $0x3,%eax
f01081ba:	01 c8                	add    %ecx,%eax
f01081bc:	8b 40 08             	mov    0x8(%eax),%eax
f01081bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01081c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01081c8:	83 ec 08             	sub    $0x8,%esp
f01081cb:	ff 75 e8             	pushl  -0x18(%ebp)
f01081ce:	50                   	push   %eax
f01081cf:	e8 fd f9 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01081d4:	83 c4 10             	add    $0x10,%esp
f01081d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01081da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081dd:	83 e0 40             	and    $0x40,%eax
f01081e0:	85 c0                	test   %eax,%eax
f01081e2:	0f 95 c0             	setne  %al
f01081e5:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01081e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081eb:	83 e0 20             	and    $0x20,%eax
f01081ee:	85 c0                	test   %eax,%eax
f01081f0:	0f 95 c0             	setne  %al
f01081f3:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01081f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081f9:	25 00 02 00 00       	and    $0x200,%eax
f01081fe:	85 c0                	test   %eax,%eax
f0108200:	0f 95 c0             	setne  %al
f0108203:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108206:	8b 45 08             	mov    0x8(%ebp),%eax
f0108209:	8b 48 78             	mov    0x78(%eax),%ecx
f010820c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010820f:	89 d0                	mov    %edx,%eax
f0108211:	01 c0                	add    %eax,%eax
f0108213:	01 d0                	add    %edx,%eax
f0108215:	c1 e0 03             	shl    $0x3,%eax
f0108218:	01 c8                	add    %ecx,%eax
f010821a:	8b 00                	mov    (%eax),%eax
f010821c:	83 ec 04             	sub    $0x4,%esp
f010821f:	50                   	push   %eax
f0108220:	ff 75 ec             	pushl  -0x14(%ebp)
f0108223:	68 52 5e 13 f0       	push   $0xf0135e52
f0108228:	e8 55 8a ff ff       	call   f0100c82 <cprintf>
f010822d:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108230:	8b 45 08             	mov    0x8(%ebp),%eax
f0108233:	8b 48 78             	mov    0x78(%eax),%ecx
f0108236:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108239:	89 d0                	mov    %edx,%eax
f010823b:	01 c0                	add    %eax,%eax
f010823d:	01 d0                	add    %edx,%eax
f010823f:	c1 e0 03             	shl    $0x3,%eax
f0108242:	01 c8                	add    %ecx,%eax
f0108244:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108247:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010824b:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010824f:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108253:	83 ec 08             	sub    $0x8,%esp
f0108256:	53                   	push   %ebx
f0108257:	ff 75 e4             	pushl  -0x1c(%ebp)
f010825a:	51                   	push   %ecx
f010825b:	52                   	push   %edx
f010825c:	50                   	push   %eax
f010825d:	68 64 5e 13 f0       	push   $0xf0135e64
f0108262:	e8 1b 8a ff ff       	call   f0100c82 <cprintf>
f0108267:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010826a:	8b 45 08             	mov    0x8(%ebp),%eax
f010826d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108273:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108276:	75 10                	jne    f0108288 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108278:	83 ec 0c             	sub    $0xc,%esp
f010827b:	68 ab 5e 13 f0       	push   $0xf0135eab
f0108280:	e8 fd 89 ff ff       	call   f0100c82 <cprintf>
f0108285:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108288:	83 ec 0c             	sub    $0xc,%esp
f010828b:	68 50 5e 13 f0       	push   $0xf0135e50
f0108290:	e8 ed 89 ff ff       	call   f0100c82 <cprintf>
f0108295:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108298:	ff 45 ec             	incl   -0x14(%ebp)
f010829b:	8b 45 08             	mov    0x8(%ebp),%eax
f010829e:	8b 40 74             	mov    0x74(%eax),%eax
f01082a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01082a4:	0f 87 87 fe ff ff    	ja     f0108131 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01082aa:	90                   	nop
f01082ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01082ae:	c9                   	leave  
f01082af:	c3                   	ret    

f01082b0 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01082b0:	55                   	push   %ebp
f01082b1:	89 e5                	mov    %esp,%ebp
f01082b3:	53                   	push   %ebx
f01082b4:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01082b7:	83 ec 0c             	sub    $0xc,%esp
f01082ba:	68 b0 5e 13 f0       	push   $0xf0135eb0
f01082bf:	e8 be 89 ff ff       	call   f0100c82 <cprintf>
f01082c4:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01082c7:	83 ec 0c             	sub    $0xc,%esp
f01082ca:	68 e5 5e 13 f0       	push   $0xf0135ee5
f01082cf:	e8 ae 89 ff ff       	call   f0100c82 <cprintf>
f01082d4:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01082d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01082de:	e9 10 01 00 00       	jmp    f01083f3 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f01082e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01082e9:	89 d0                	mov    %edx,%eax
f01082eb:	01 c0                	add    %eax,%eax
f01082ed:	01 d0                	add    %edx,%eax
f01082ef:	c1 e0 03             	shl    $0x3,%eax
f01082f2:	01 c8                	add    %ecx,%eax
f01082f4:	83 e8 80             	sub    $0xffffff80,%eax
f01082f7:	8a 00                	mov    (%eax),%al
f01082f9:	84 c0                	test   %al,%al
f01082fb:	74 43                	je     f0108340 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f01082fd:	83 ec 0c             	sub    $0xc,%esp
f0108300:	68 3b 5e 13 f0       	push   $0xf0135e3b
f0108305:	e8 78 89 ff ff       	call   f0100c82 <cprintf>
f010830a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010830d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108310:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108316:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108319:	75 10                	jne    f010832b <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f010831b:	83 ec 0c             	sub    $0xc,%esp
f010831e:	68 4a 5e 13 f0       	push   $0xf0135e4a
f0108323:	e8 5a 89 ff ff       	call   f0100c82 <cprintf>
f0108328:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010832b:	83 ec 0c             	sub    $0xc,%esp
f010832e:	68 50 5e 13 f0       	push   $0xf0135e50
f0108333:	e8 4a 89 ff ff       	call   f0100c82 <cprintf>
f0108338:	83 c4 10             	add    $0x10,%esp
			continue;
f010833b:	e9 b0 00 00 00       	jmp    f01083f0 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108340:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108343:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108346:	89 d0                	mov    %edx,%eax
f0108348:	01 c0                	add    %eax,%eax
f010834a:	01 d0                	add    %edx,%eax
f010834c:	c1 e0 03             	shl    $0x3,%eax
f010834f:	01 c8                	add    %ecx,%eax
f0108351:	83 c0 7c             	add    $0x7c,%eax
f0108354:	8b 00                	mov    (%eax),%eax
f0108356:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010835c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010835f:	89 d0                	mov    %edx,%eax
f0108361:	01 c0                	add    %eax,%eax
f0108363:	01 d0                	add    %edx,%eax
f0108365:	c1 e0 03             	shl    $0x3,%eax
f0108368:	01 c8                	add    %ecx,%eax
f010836a:	83 c0 7c             	add    $0x7c,%eax
f010836d:	8b 00                	mov    (%eax),%eax
f010836f:	83 ec 04             	sub    $0x4,%esp
f0108372:	50                   	push   %eax
f0108373:	ff 75 f4             	pushl  -0xc(%ebp)
f0108376:	68 f0 5e 13 f0       	push   $0xf0135ef0
f010837b:	e8 02 89 ff ff       	call   f0100c82 <cprintf>
f0108380:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108383:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108386:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108389:	89 d0                	mov    %edx,%eax
f010838b:	01 c0                	add    %eax,%eax
f010838d:	01 d0                	add    %edx,%eax
f010838f:	c1 e0 03             	shl    $0x3,%eax
f0108392:	01 c8                	add    %ecx,%eax
f0108394:	05 84 00 00 00       	add    $0x84,%eax
f0108399:	8b 18                	mov    (%eax),%ebx
f010839b:	8b 45 08             	mov    0x8(%ebp),%eax
f010839e:	8b 40 5c             	mov    0x5c(%eax),%eax
f01083a1:	83 ec 08             	sub    $0x8,%esp
f01083a4:	ff 75 f0             	pushl  -0x10(%ebp)
f01083a7:	50                   	push   %eax
f01083a8:	e8 43 f9 ff ff       	call   f0107cf0 <pd_is_table_used>
f01083ad:	83 c4 10             	add    $0x10,%esp
f01083b0:	83 ec 04             	sub    $0x4,%esp
f01083b3:	53                   	push   %ebx
f01083b4:	50                   	push   %eax
f01083b5:	68 08 5f 13 f0       	push   $0xf0135f08
f01083ba:	e8 c3 88 ff ff       	call   f0100c82 <cprintf>
f01083bf:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01083c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083ce:	75 10                	jne    f01083e0 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f01083d0:	83 ec 0c             	sub    $0xc,%esp
f01083d3:	68 ab 5e 13 f0       	push   $0xf0135eab
f01083d8:	e8 a5 88 ff ff       	call   f0100c82 <cprintf>
f01083dd:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01083e0:	83 ec 0c             	sub    $0xc,%esp
f01083e3:	68 50 5e 13 f0       	push   $0xf0135e50
f01083e8:	e8 95 88 ff ff       	call   f0100c82 <cprintf>
f01083ed:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01083f0:	ff 45 f4             	incl   -0xc(%ebp)
f01083f3:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01083f7:	0f 86 e6 fe ff ff    	jbe    f01082e3 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01083fd:	90                   	nop
f01083fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108401:	c9                   	leave  
f0108402:	c3                   	ret    

f0108403 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108403:	55                   	push   %ebp
f0108404:	89 e5                	mov    %esp,%ebp
f0108406:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108409:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108410:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108417:	eb 20                	jmp    f0108439 <env_table_ws_get_size+0x36>
f0108419:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010841c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010841f:	89 d0                	mov    %edx,%eax
f0108421:	01 c0                	add    %eax,%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	c1 e0 03             	shl    $0x3,%eax
f0108428:	01 c8                	add    %ecx,%eax
f010842a:	83 e8 80             	sub    $0xffffff80,%eax
f010842d:	8a 00                	mov    (%eax),%al
f010842f:	84 c0                	test   %al,%al
f0108431:	75 03                	jne    f0108436 <env_table_ws_get_size+0x33>
f0108433:	ff 45 f8             	incl   -0x8(%ebp)
f0108436:	ff 45 fc             	incl   -0x4(%ebp)
f0108439:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010843d:	7e da                	jle    f0108419 <env_table_ws_get_size+0x16>
	return counter;
f010843f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108442:	c9                   	leave  
f0108443:	c3                   	ret    

f0108444 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108444:	55                   	push   %ebp
f0108445:	89 e5                	mov    %esp,%ebp
f0108447:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010844a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108451:	eb 4c                	jmp    f010849f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108453:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108456:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108459:	89 d0                	mov    %edx,%eax
f010845b:	01 c0                	add    %eax,%eax
f010845d:	01 d0                	add    %edx,%eax
f010845f:	c1 e0 03             	shl    $0x3,%eax
f0108462:	01 c8                	add    %ecx,%eax
f0108464:	83 c0 7c             	add    $0x7c,%eax
f0108467:	8b 00                	mov    (%eax),%eax
f0108469:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010846c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108474:	89 c2                	mov    %eax,%edx
f0108476:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108479:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010847c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010847f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108484:	39 c2                	cmp    %eax,%edx
f0108486:	75 14                	jne    f010849c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010848b:	83 ec 08             	sub    $0x8,%esp
f010848e:	50                   	push   %eax
f010848f:	ff 75 08             	pushl  0x8(%ebp)
f0108492:	e8 b8 00 00 00       	call   f010854f <env_table_ws_clear_entry>
f0108497:	83 c4 10             	add    $0x10,%esp
			break;
f010849a:	eb 09                	jmp    f01084a5 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010849c:	ff 45 f4             	incl   -0xc(%ebp)
f010849f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01084a3:	7e ae                	jle    f0108453 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01084a5:	90                   	nop
f01084a6:	c9                   	leave  
f01084a7:	c3                   	ret    

f01084a8 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01084a8:	55                   	push   %ebp
f01084a9:	89 e5                	mov    %esp,%ebp
f01084ab:	53                   	push   %ebx
f01084ac:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01084af:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01084b3:	76 19                	jbe    f01084ce <env_table_ws_set_entry+0x26>
f01084b5:	68 2c 5f 13 f0       	push   $0xf0135f2c
f01084ba:	68 52 5d 13 f0       	push   $0xf0135d52
f01084bf:	68 b6 00 00 00       	push   $0xb6
f01084c4:	68 68 5d 13 f0       	push   $0xf0135d68
f01084c9:	e8 2d 7d ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01084ce:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01084d5:	76 19                	jbe    f01084f0 <env_table_ws_set_entry+0x48>
f01084d7:	68 88 5d 13 f0       	push   $0xf0135d88
f01084dc:	68 52 5d 13 f0       	push   $0xf0135d52
f01084e1:	68 b7 00 00 00       	push   $0xb7
f01084e6:	68 68 5d 13 f0       	push   $0xf0135d68
f01084eb:	e8 0b 7d ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01084f0:	8b 45 10             	mov    0x10(%ebp),%eax
f01084f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01084f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084f9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01084fe:	89 c1                	mov    %eax,%ecx
f0108500:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108503:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108506:	89 d0                	mov    %edx,%eax
f0108508:	01 c0                	add    %eax,%eax
f010850a:	01 d0                	add    %edx,%eax
f010850c:	c1 e0 03             	shl    $0x3,%eax
f010850f:	01 d8                	add    %ebx,%eax
f0108511:	83 c0 7c             	add    $0x7c,%eax
f0108514:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108516:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108519:	8b 55 0c             	mov    0xc(%ebp),%edx
f010851c:	89 d0                	mov    %edx,%eax
f010851e:	01 c0                	add    %eax,%eax
f0108520:	01 d0                	add    %edx,%eax
f0108522:	c1 e0 03             	shl    $0x3,%eax
f0108525:	01 c8                	add    %ecx,%eax
f0108527:	83 e8 80             	sub    $0xffffff80,%eax
f010852a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010852d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108530:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108533:	89 d0                	mov    %edx,%eax
f0108535:	01 c0                	add    %eax,%eax
f0108537:	01 d0                	add    %edx,%eax
f0108539:	c1 e0 03             	shl    $0x3,%eax
f010853c:	01 c8                	add    %ecx,%eax
f010853e:	05 84 00 00 00       	add    $0x84,%eax
f0108543:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108549:	90                   	nop
}
f010854a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010854d:	c9                   	leave  
f010854e:	c3                   	ret    

f010854f <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010854f:	55                   	push   %ebp
f0108550:	89 e5                	mov    %esp,%ebp
f0108552:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108555:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108559:	76 19                	jbe    f0108574 <env_table_ws_clear_entry+0x25>
f010855b:	68 2c 5f 13 f0       	push   $0xf0135f2c
f0108560:	68 52 5d 13 f0       	push   $0xf0135d52
f0108565:	68 c2 00 00 00       	push   $0xc2
f010856a:	68 68 5d 13 f0       	push   $0xf0135d68
f010856f:	e8 87 7c ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108574:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108577:	8b 55 0c             	mov    0xc(%ebp),%edx
f010857a:	89 d0                	mov    %edx,%eax
f010857c:	01 c0                	add    %eax,%eax
f010857e:	01 d0                	add    %edx,%eax
f0108580:	c1 e0 03             	shl    $0x3,%eax
f0108583:	01 c8                	add    %ecx,%eax
f0108585:	83 c0 7c             	add    $0x7c,%eax
f0108588:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010858e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108591:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108594:	89 d0                	mov    %edx,%eax
f0108596:	01 c0                	add    %eax,%eax
f0108598:	01 d0                	add    %edx,%eax
f010859a:	c1 e0 03             	shl    $0x3,%eax
f010859d:	01 c8                	add    %ecx,%eax
f010859f:	83 e8 80             	sub    $0xffffff80,%eax
f01085a2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01085a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ab:	89 d0                	mov    %edx,%eax
f01085ad:	01 c0                	add    %eax,%eax
f01085af:	01 d0                	add    %edx,%eax
f01085b1:	c1 e0 03             	shl    $0x3,%eax
f01085b4:	01 c8                	add    %ecx,%eax
f01085b6:	05 84 00 00 00       	add    $0x84,%eax
f01085bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01085c1:	90                   	nop
f01085c2:	c9                   	leave  
f01085c3:	c3                   	ret    

f01085c4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01085c4:	55                   	push   %ebp
f01085c5:	89 e5                	mov    %esp,%ebp
f01085c7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085ca:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085ce:	76 19                	jbe    f01085e9 <env_table_ws_get_virtual_address+0x25>
f01085d0:	68 2c 5f 13 f0       	push   $0xf0135f2c
f01085d5:	68 52 5d 13 f0       	push   $0xf0135d52
f01085da:	68 ca 00 00 00       	push   $0xca
f01085df:	68 68 5d 13 f0       	push   $0xf0135d68
f01085e4:	e8 12 7c ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01085e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ef:	89 d0                	mov    %edx,%eax
f01085f1:	01 c0                	add    %eax,%eax
f01085f3:	01 d0                	add    %edx,%eax
f01085f5:	c1 e0 03             	shl    $0x3,%eax
f01085f8:	01 c8                	add    %ecx,%eax
f01085fa:	83 c0 7c             	add    $0x7c,%eax
f01085fd:	8b 00                	mov    (%eax),%eax
f01085ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108602:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108605:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010860a:	c9                   	leave  
f010860b:	c3                   	ret    

f010860c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010860c:	55                   	push   %ebp
f010860d:	89 e5                	mov    %esp,%ebp
f010860f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108612:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108616:	76 19                	jbe    f0108631 <env_table_ws_get_time_stamp+0x25>
f0108618:	68 2c 5f 13 f0       	push   $0xf0135f2c
f010861d:	68 52 5d 13 f0       	push   $0xf0135d52
f0108622:	68 d1 00 00 00       	push   $0xd1
f0108627:	68 68 5d 13 f0       	push   $0xf0135d68
f010862c:	e8 ca 7b ff ff       	call   f01001fb <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108631:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108634:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108637:	89 d0                	mov    %edx,%eax
f0108639:	01 c0                	add    %eax,%eax
f010863b:	01 d0                	add    %edx,%eax
f010863d:	c1 e0 03             	shl    $0x3,%eax
f0108640:	01 c8                	add    %ecx,%eax
f0108642:	05 84 00 00 00       	add    $0x84,%eax
f0108647:	8b 00                	mov    (%eax),%eax
}
f0108649:	c9                   	leave  
f010864a:	c3                   	ret    

f010864b <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010864b:	55                   	push   %ebp
f010864c:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010864e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108651:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108654:	89 d0                	mov    %edx,%eax
f0108656:	01 c0                	add    %eax,%eax
f0108658:	01 d0                	add    %edx,%eax
f010865a:	c1 e0 03             	shl    $0x3,%eax
f010865d:	01 c8                	add    %ecx,%eax
f010865f:	83 e8 80             	sub    $0xffffff80,%eax
f0108662:	8a 00                	mov    (%eax),%al
f0108664:	0f b6 c0             	movzbl %al,%eax
}
f0108667:	5d                   	pop    %ebp
f0108668:	c3                   	ret    

f0108669 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108669:	55                   	push   %ebp
f010866a:	89 e5                	mov    %esp,%ebp
f010866c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f010866f:	83 ec 04             	sub    $0x4,%esp
f0108672:	68 60 5f 13 f0       	push   $0xf0135f60
f0108677:	68 e5 00 00 00       	push   $0xe5
f010867c:	68 68 5d 13 f0       	push   $0xf0135d68
f0108681:	e8 75 7b ff ff       	call   f01001fb <_panic>

f0108686 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108686:	55                   	push   %ebp
f0108687:	89 e5                	mov    %esp,%ebp
f0108689:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010868c:	83 ec 04             	sub    $0x4,%esp
f010868f:	68 8c 5f 13 f0       	push   $0xf0135f8c
f0108694:	68 ec 00 00 00       	push   $0xec
f0108699:	68 68 5d 13 f0       	push   $0xf0135d68
f010869e:	e8 58 7b ff ff       	call   f01001fb <_panic>

f01086a3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01086a3:	55                   	push   %ebp
f01086a4:	89 e5                	mov    %esp,%ebp
f01086a6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01086a9:	83 ec 04             	sub    $0x4,%esp
f01086ac:	68 bc 5f 13 f0       	push   $0xf0135fbc
f01086b1:	68 f3 00 00 00       	push   $0xf3
f01086b6:	68 68 5d 13 f0       	push   $0xf0135d68
f01086bb:	e8 3b 7b ff ff       	call   f01001fb <_panic>

f01086c0 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01086c0:	55                   	push   %ebp
f01086c1:	89 e5                	mov    %esp,%ebp
f01086c3:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f01086c6:	8b 45 10             	mov    0x10(%ebp),%eax
f01086c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f01086cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f01086d2:	8b 45 10             	mov    0x10(%ebp),%eax
f01086d5:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086da:	85 c0                	test   %eax,%eax
f01086dc:	74 11                	je     f01086ef <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f01086de:	8b 45 10             	mov    0x10(%ebp),%eax
f01086e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01086e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01086e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01086ec:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f01086ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f2:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086f7:	85 c0                	test   %eax,%eax
f01086f9:	74 11                	je     f010870c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f01086fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108701:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108704:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108709:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010870c:	8b 45 14             	mov    0x14(%ebp),%eax
f010870f:	c1 e0 0c             	shl    $0xc,%eax
f0108712:	89 c2                	mov    %eax,%edx
f0108714:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108717:	01 d0                	add    %edx,%eax
f0108719:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f010871c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010871f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108722:	eb 4b                	jmp    f010876f <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108724:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f010872b:	83 ec 04             	sub    $0x4,%esp
f010872e:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108731:	50                   	push   %eax
f0108732:	ff 75 ec             	pushl  -0x14(%ebp)
f0108735:	ff 75 08             	pushl  0x8(%ebp)
f0108738:	e8 9d e2 ff ff       	call   f01069da <get_page_table>
f010873d:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108740:	83 ec 04             	sub    $0x4,%esp
f0108743:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108746:	50                   	push   %eax
f0108747:	ff 75 ec             	pushl  -0x14(%ebp)
f010874a:	ff 75 08             	pushl  0x8(%ebp)
f010874d:	e8 dd e5 ff ff       	call   f0106d2f <get_frame_info>
f0108752:	83 c4 10             	add    $0x10,%esp
f0108755:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108758:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010875c:	74 0a                	je     f0108768 <cut_paste_pages+0xa8>
			return -1;
f010875e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108763:	e9 d4 00 00 00       	jmp    f010883c <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108768:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010876f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108772:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108775:	72 ad                	jb     f0108724 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108777:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010877a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010877d:	e9 a9 00 00 00       	jmp    f010882b <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108782:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108789:	83 ec 04             	sub    $0x4,%esp
f010878c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010878f:	50                   	push   %eax
f0108790:	ff 75 e8             	pushl  -0x18(%ebp)
f0108793:	ff 75 08             	pushl  0x8(%ebp)
f0108796:	e8 3f e2 ff ff       	call   f01069da <get_page_table>
f010879b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010879e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01087a1:	85 c0                	test   %eax,%eax
f01087a3:	75 14                	jne    f01087b9 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f01087a5:	83 ec 08             	sub    $0x8,%esp
f01087a8:	ff 75 e8             	pushl  -0x18(%ebp)
f01087ab:	ff 75 08             	pushl  0x8(%ebp)
f01087ae:	e8 7d e3 ff ff       	call   f0106b30 <create_page_table>
f01087b3:	83 c4 10             	add    $0x10,%esp
f01087b6:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087b9:	83 ec 04             	sub    $0x4,%esp
f01087bc:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01087bf:	50                   	push   %eax
f01087c0:	ff 75 e8             	pushl  -0x18(%ebp)
f01087c3:	ff 75 08             	pushl  0x8(%ebp)
f01087c6:	e8 64 e5 ff ff       	call   f0106d2f <get_frame_info>
f01087cb:	83 c4 10             	add    $0x10,%esp
f01087ce:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f01087d1:	83 ec 08             	sub    $0x8,%esp
f01087d4:	ff 75 f0             	pushl  -0x10(%ebp)
f01087d7:	ff 75 08             	pushl  0x8(%ebp)
f01087da:	e8 f2 f3 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01087df:	83 c4 10             	add    $0x10,%esp
f01087e2:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f01087e5:	83 ec 08             	sub    $0x8,%esp
f01087e8:	ff 75 f0             	pushl  -0x10(%ebp)
f01087eb:	ff 75 08             	pushl  0x8(%ebp)
f01087ee:	e8 ac e5 ff ff       	call   f0106d9f <unmap_frame>
f01087f3:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f01087f6:	83 ec 0c             	sub    $0xc,%esp
f01087f9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f01087fc:	50                   	push   %eax
f01087fd:	e8 19 e0 ff ff       	call   f010681b <allocate_frame>
f0108802:	83 c4 10             	add    $0x10,%esp
f0108805:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108808:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010880b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010880e:	ff 75 e8             	pushl  -0x18(%ebp)
f0108811:	50                   	push   %eax
f0108812:	ff 75 08             	pushl  0x8(%ebp)
f0108815:	e8 50 e4 ff ff       	call   f0106c6a <map_frame>
f010881a:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f010881d:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108824:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f010882b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010882e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108831:	0f 82 4b ff ff ff    	jb     f0108782 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108837:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010883c:	c9                   	leave  
f010883d:	c3                   	ret    

f010883e <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010883e:	55                   	push   %ebp
f010883f:	89 e5                	mov    %esp,%ebp
f0108841:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108844:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f010884b:	8b 45 10             	mov    0x10(%ebp),%eax
f010884e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108851:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108854:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108857:	8b 45 10             	mov    0x10(%ebp),%eax
f010885a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010885d:	e9 d1 00 00 00       	jmp    f0108933 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108862:	83 ec 04             	sub    $0x4,%esp
f0108865:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108868:	50                   	push   %eax
f0108869:	ff 75 f0             	pushl  -0x10(%ebp)
f010886c:	ff 75 08             	pushl  0x8(%ebp)
f010886f:	e8 66 e1 ff ff       	call   f01069da <get_page_table>
f0108874:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108877:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010887a:	85 c0                	test   %eax,%eax
f010887c:	75 14                	jne    f0108892 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010887e:	83 ec 08             	sub    $0x8,%esp
f0108881:	ff 75 f0             	pushl  -0x10(%ebp)
f0108884:	ff 75 08             	pushl  0x8(%ebp)
f0108887:	e8 a4 e2 ff ff       	call   f0106b30 <create_page_table>
f010888c:	83 c4 10             	add    $0x10,%esp
f010888f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108892:	83 ec 04             	sub    $0x4,%esp
f0108895:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108898:	50                   	push   %eax
f0108899:	ff 75 f0             	pushl  -0x10(%ebp)
f010889c:	ff 75 08             	pushl  0x8(%ebp)
f010889f:	e8 8b e4 ff ff       	call   f0106d2f <get_frame_info>
f01088a4:	83 c4 10             	add    $0x10,%esp
f01088a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f01088aa:	83 ec 08             	sub    $0x8,%esp
f01088ad:	ff 75 f0             	pushl  -0x10(%ebp)
f01088b0:	ff 75 08             	pushl  0x8(%ebp)
f01088b3:	e8 19 f3 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01088b8:	83 c4 10             	add    $0x10,%esp
f01088bb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f01088be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088c1:	85 c0                	test   %eax,%eax
f01088c3:	74 14                	je     f01088d9 <copy_paste_chunk+0x9b>
f01088c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01088c8:	83 e0 02             	and    $0x2,%eax
f01088cb:	85 c0                	test   %eax,%eax
f01088cd:	75 0a                	jne    f01088d9 <copy_paste_chunk+0x9b>
			return -1;
f01088cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01088d4:	e9 a7 00 00 00       	jmp    f0108980 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f01088d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088dc:	85 c0                	test   %eax,%eax
f01088de:	75 45                	jne    f0108925 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f01088e0:	83 ec 08             	sub    $0x8,%esp
f01088e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01088e6:	ff 75 08             	pushl  0x8(%ebp)
f01088e9:	e8 e3 f2 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01088ee:	83 c4 10             	add    $0x10,%esp
f01088f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f01088f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01088f7:	83 e0 04             	and    $0x4,%eax
f01088fa:	83 c8 02             	or     $0x2,%eax
f01088fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108900:	83 ec 0c             	sub    $0xc,%esp
f0108903:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108906:	50                   	push   %eax
f0108907:	e8 0f df ff ff       	call   f010681b <allocate_frame>
f010890c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010890f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108912:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108915:	52                   	push   %edx
f0108916:	ff 75 f0             	pushl  -0x10(%ebp)
f0108919:	50                   	push   %eax
f010891a:	ff 75 08             	pushl  0x8(%ebp)
f010891d:	e8 48 e3 ff ff       	call   f0106c6a <map_frame>
f0108922:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108925:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f010892c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108933:	8b 55 10             	mov    0x10(%ebp),%edx
f0108936:	8b 45 14             	mov    0x14(%ebp),%eax
f0108939:	01 d0                	add    %edx,%eax
f010893b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010893e:	0f 87 1e ff ff ff    	ja     f0108862 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108944:	8b 45 10             	mov    0x10(%ebp),%eax
f0108947:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f010894a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010894d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108950:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108953:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108956:	eb 16                	jmp    f010896e <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108958:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010895b:	8b 10                	mov    (%eax),%edx
f010895d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108960:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108962:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108966:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f010896a:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f010896e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108971:	8b 45 14             	mov    0x14(%ebp),%eax
f0108974:	01 d0                	add    %edx,%eax
f0108976:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108979:	77 dd                	ja     f0108958 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f010897b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108980:	c9                   	leave  
f0108981:	c3                   	ret    

f0108982 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108982:	55                   	push   %ebp
f0108983:	89 e5                	mov    %esp,%ebp
f0108985:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108988:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f010898f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108992:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108995:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108998:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010899d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f01089a0:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01089a7:	8b 55 10             	mov    0x10(%ebp),%edx
f01089aa:	8b 45 14             	mov    0x14(%ebp),%eax
f01089ad:	01 c2                	add    %eax,%edx
f01089af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089b2:	01 d0                	add    %edx,%eax
f01089b4:	48                   	dec    %eax
f01089b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01089c0:	f7 75 e8             	divl   -0x18(%ebp)
f01089c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089c6:	29 d0                	sub    %edx,%eax
f01089c8:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f01089cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089d1:	e9 ac 00 00 00       	jmp    f0108a82 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f01089d6:	83 ec 04             	sub    $0x4,%esp
f01089d9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f01089dc:	50                   	push   %eax
f01089dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01089e0:	ff 75 08             	pushl  0x8(%ebp)
f01089e3:	e8 f2 df ff ff       	call   f01069da <get_page_table>
f01089e8:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f01089eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01089ee:	85 c0                	test   %eax,%eax
f01089f0:	75 14                	jne    f0108a06 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f01089f2:	83 ec 08             	sub    $0x8,%esp
f01089f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01089f8:	ff 75 08             	pushl  0x8(%ebp)
f01089fb:	e8 30 e1 ff ff       	call   f0106b30 <create_page_table>
f0108a00:	83 c4 10             	add    $0x10,%esp
f0108a03:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a06:	83 ec 04             	sub    $0x4,%esp
f0108a09:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a0c:	50                   	push   %eax
f0108a0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a10:	ff 75 08             	pushl  0x8(%ebp)
f0108a13:	e8 17 e3 ff ff       	call   f0106d2f <get_frame_info>
f0108a18:	83 c4 10             	add    $0x10,%esp
f0108a1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108a1e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108a22:	74 07                	je     f0108a2b <share_chunk+0xa9>
           return -1;
f0108a24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108a29:	eb 68                	jmp    f0108a93 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108a2b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108a32:	83 ec 04             	sub    $0x4,%esp
f0108a35:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a38:	50                   	push   %eax
f0108a39:	ff 75 0c             	pushl  0xc(%ebp)
f0108a3c:	ff 75 08             	pushl  0x8(%ebp)
f0108a3f:	e8 96 df ff ff       	call   f01069da <get_page_table>
f0108a44:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108a47:	83 ec 04             	sub    $0x4,%esp
f0108a4a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a4d:	50                   	push   %eax
f0108a4e:	ff 75 0c             	pushl  0xc(%ebp)
f0108a51:	ff 75 08             	pushl  0x8(%ebp)
f0108a54:	e8 d6 e2 ff ff       	call   f0106d2f <get_frame_info>
f0108a59:	83 c4 10             	add    $0x10,%esp
f0108a5c:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108a5f:	8b 45 18             	mov    0x18(%ebp),%eax
f0108a62:	50                   	push   %eax
f0108a63:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a66:	ff 75 d8             	pushl  -0x28(%ebp)
f0108a69:	ff 75 08             	pushl  0x8(%ebp)
f0108a6c:	e8 f9 e1 ff ff       	call   f0106c6a <map_frame>
f0108a71:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108a74:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a7b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a85:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108a88:	0f 82 48 ff ff ff    	jb     f01089d6 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108a8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a93:	c9                   	leave  
f0108a94:	c3                   	ret    

f0108a95 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108a95:	55                   	push   %ebp
f0108a96:	89 e5                	mov    %esp,%ebp
f0108a98:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108a9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108aa2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108aa5:	8b 45 10             	mov    0x10(%ebp),%eax
f0108aa8:	01 d0                	add    %edx,%eax
f0108aaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108aad:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108ab4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108abb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108ac2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108ac9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108acc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108acf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108ad2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108ada:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108ae1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108ae4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108ae7:	01 d0                	add    %edx,%eax
f0108ae9:	48                   	dec    %eax
f0108aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108aed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108af0:	ba 00 00 00 00       	mov    $0x0,%edx
f0108af5:	f7 75 dc             	divl   -0x24(%ebp)
f0108af8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108afb:	29 d0                	sub    %edx,%eax
f0108afd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b06:	e9 9d 00 00 00       	jmp    f0108ba8 <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108b11:	83 ec 04             	sub    $0x4,%esp
f0108b14:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b17:	50                   	push   %eax
f0108b18:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b1b:	ff 75 08             	pushl  0x8(%ebp)
f0108b1e:	e8 b7 de ff ff       	call   f01069da <get_page_table>
f0108b23:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108b26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b29:	85 c0                	test   %eax,%eax
f0108b2b:	75 14                	jne    f0108b41 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108b2d:	83 ec 08             	sub    $0x8,%esp
f0108b30:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b33:	ff 75 08             	pushl  0x8(%ebp)
f0108b36:	e8 f5 df ff ff       	call   f0106b30 <create_page_table>
f0108b3b:	83 c4 10             	add    $0x10,%esp
f0108b3e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108b41:	83 ec 04             	sub    $0x4,%esp
f0108b44:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b47:	50                   	push   %eax
f0108b48:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b4b:	ff 75 08             	pushl  0x8(%ebp)
f0108b4e:	e8 dc e1 ff ff       	call   f0106d2f <get_frame_info>
f0108b53:	83 c4 10             	add    $0x10,%esp
f0108b56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108b59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b5c:	85 c0                	test   %eax,%eax
f0108b5e:	74 07                	je     f0108b67 <allocate_chunk+0xd2>
		{
			return -1;
f0108b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108b65:	eb 52                	jmp    f0108bb9 <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108b67:	83 ec 0c             	sub    $0xc,%esp
f0108b6a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108b6d:	50                   	push   %eax
f0108b6e:	e8 a8 dc ff ff       	call   f010681b <allocate_frame>
f0108b73:	83 c4 10             	add    $0x10,%esp
f0108b76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108b79:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108b7d:	74 22                	je     f0108ba1 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108b7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b82:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108b85:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108b88:	8b 55 14             	mov    0x14(%ebp),%edx
f0108b8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b8e:	52                   	push   %edx
f0108b8f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b92:	50                   	push   %eax
f0108b93:	ff 75 08             	pushl  0x8(%ebp)
f0108b96:	e8 cf e0 ff ff       	call   f0106c6a <map_frame>
f0108b9b:	83 c4 10             	add    $0x10,%esp
f0108b9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108ba1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bab:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108bae:	0f 82 57 ff ff ff    	jb     f0108b0b <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bb9:	c9                   	leave  
f0108bba:	c3                   	ret    

f0108bbb <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bbb:	55                   	push   %ebp
f0108bbc:	89 e5                	mov    %esp,%ebp
f0108bbe:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bc1:	83 ec 04             	sub    $0x4,%esp
f0108bc4:	68 e8 5f 13 f0       	push   $0xf0135fe8
f0108bc9:	68 d2 00 00 00       	push   $0xd2
f0108bce:	68 20 60 13 f0       	push   $0xf0136020
f0108bd3:	e8 23 76 ff ff       	call   f01001fb <_panic>

f0108bd8 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108bd8:	55                   	push   %ebp
f0108bd9:	89 e5                	mov    %esp,%ebp
f0108bdb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0108bde:	83 ec 04             	sub    $0x4,%esp
f0108be1:	68 3c 60 13 f0       	push   $0xf013603c
f0108be6:	68 e1 00 00 00       	push   $0xe1
f0108beb:	68 20 60 13 f0       	push   $0xf0136020
f0108bf0:	e8 06 76 ff ff       	call   f01001fb <_panic>

f0108bf5 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108bf5:	55                   	push   %ebp
f0108bf6:	89 e5                	mov    %esp,%ebp
f0108bf8:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108bfb:	83 ec 04             	sub    $0x4,%esp
f0108bfe:	68 74 60 13 f0       	push   $0xf0136074
f0108c03:	68 f6 00 00 00       	push   $0xf6
f0108c08:	68 20 60 13 f0       	push   $0xf0136020
f0108c0d:	e8 e9 75 ff ff       	call   f01001fb <_panic>

f0108c12 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c12:	55                   	push   %ebp
f0108c13:	89 e5                	mov    %esp,%ebp
f0108c15:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108c18:	83 ec 04             	sub    $0x4,%esp
f0108c1b:	68 a4 60 13 f0       	push   $0xf01360a4
f0108c20:	68 00 01 00 00       	push   $0x100
f0108c25:	68 20 60 13 f0       	push   $0xf0136020
f0108c2a:	e8 cc 75 ff ff       	call   f01001fb <_panic>

f0108c2f <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c2f:	55                   	push   %ebp
f0108c30:	89 e5                	mov    %esp,%ebp
f0108c32:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108c35:	83 ec 04             	sub    $0x4,%esp
f0108c38:	68 d0 60 13 f0       	push   $0xf01360d0
f0108c3d:	68 0e 01 00 00       	push   $0x10e
f0108c42:	68 20 60 13 f0       	push   $0xf0136020
f0108c47:	e8 af 75 ff ff       	call   f01001fb <_panic>

f0108c4c <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c4c:	55                   	push   %ebp
f0108c4d:	89 e5                	mov    %esp,%ebp
f0108c4f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c52:	83 ec 04             	sub    $0x4,%esp
f0108c55:	68 10 61 13 f0       	push   $0xf0136110
f0108c5a:	68 1e 01 00 00       	push   $0x11e
f0108c5f:	68 20 60 13 f0       	push   $0xf0136020
f0108c64:	e8 92 75 ff ff       	call   f01001fb <_panic>

f0108c69 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108c69:	55                   	push   %ebp
f0108c6a:	89 e5                	mov    %esp,%ebp
f0108c6c:	57                   	push   %edi
f0108c6d:	56                   	push   %esi
f0108c6e:	53                   	push   %ebx
f0108c6f:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108c75:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108c7c:	83 ec 0c             	sub    $0xc,%esp
f0108c7f:	ff 75 08             	pushl  0x8(%ebp)
f0108c82:	e8 c2 21 00 00       	call   f010ae49 <get_user_program_info>
f0108c87:	83 c4 10             	add    $0x10,%esp
f0108c8a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108c8d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108c91:	75 0a                	jne    f0108c9d <env_create+0x34>
f0108c93:	b8 00 00 00 00       	mov    $0x0,%eax
f0108c98:	e9 cd 0b 00 00       	jmp    f010986a <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108c9d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ca0:	8b 40 08             	mov    0x8(%eax),%eax
f0108ca3:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108ca6:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108cad:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108cb0:	83 ec 0c             	sub    $0xc,%esp
f0108cb3:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108cb9:	50                   	push   %eax
f0108cba:	e8 d3 0e 00 00       	call   f0109b92 <allocate_environment>
f0108cbf:	83 c4 10             	add    $0x10,%esp
f0108cc2:	85 c0                	test   %eax,%eax
f0108cc4:	79 0a                	jns    f0108cd0 <env_create+0x67>
	{
		return 0;
f0108cc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ccb:	e9 9a 0b 00 00       	jmp    f010986a <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108cd0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108cd3:	8b 00                	mov    (%eax),%eax
f0108cd5:	83 ec 0c             	sub    $0xc,%esp
f0108cd8:	50                   	push   %eax
f0108cd9:	e8 1a 7f 02 00       	call   f0130bf8 <strlen>
f0108cde:	83 c4 10             	add    $0x10,%esp
f0108ce1:	83 f8 3f             	cmp    $0x3f,%eax
f0108ce4:	7f 20                	jg     f0108d06 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108ce6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ce9:	8b 00                	mov    (%eax),%eax
f0108ceb:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108cf1:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108cf7:	83 ec 08             	sub    $0x8,%esp
f0108cfa:	50                   	push   %eax
f0108cfb:	52                   	push   %edx
f0108cfc:	e8 46 7f 02 00       	call   f0130c47 <strcpy>
f0108d01:	83 c4 10             	add    $0x10,%esp
f0108d04:	eb 20                	jmp    f0108d26 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d06:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d09:	8b 00                	mov    (%eax),%eax
f0108d0b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108d11:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108d17:	83 ec 04             	sub    $0x4,%esp
f0108d1a:	6a 3f                	push   $0x3f
f0108d1c:	50                   	push   %eax
f0108d1d:	52                   	push   %edx
f0108d1e:	e8 52 7f 02 00       	call   f0130c75 <strncpy>
f0108d23:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108d26:	e8 42 0f 00 00       	call   f0109c6d <create_user_directory>
f0108d2b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108d2e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108d31:	83 ec 0c             	sub    $0xc,%esp
f0108d34:	50                   	push   %eax
f0108d35:	e8 d9 ec ff ff       	call   f0107a13 <kheap_physical_address>
f0108d3a:	83 c4 10             	add    $0x10,%esp
f0108d3d:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108d40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d46:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d49:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108d4c:	83 ec 0c             	sub    $0xc,%esp
f0108d4f:	6a 02                	push   $0x2
f0108d51:	e8 19 4d 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0108d56:	83 c4 10             	add    $0x10,%esp
f0108d59:	85 c0                	test   %eax,%eax
f0108d5b:	74 21                	je     f0108d7e <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108d5d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d63:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d66:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108d6c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d72:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d75:	2b 55 10             	sub    0x10(%ebp),%edx
f0108d78:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108d7e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108d82:	75 12                	jne    f0108d96 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108d84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d8a:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108d91:	00 00 00 
f0108d94:	eb 0f                	jmp    f0108da5 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108d96:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d9c:	8b 55 14             	mov    0x14(%ebp),%edx
f0108d9f:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108da5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108dab:	83 ec 04             	sub    $0x4,%esp
f0108dae:	ff 75 ac             	pushl  -0x54(%ebp)
f0108db1:	ff 75 b0             	pushl  -0x50(%ebp)
f0108db4:	50                   	push   %eax
f0108db5:	e8 b1 15 00 00       	call   f010a36b <initialize_environment>
f0108dba:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108dbd:	0f 20 d8             	mov    %cr3,%eax
f0108dc0:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108dc3:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108dc6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108dc9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108dcf:	8b 40 60             	mov    0x60(%eax),%eax
f0108dd2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108dd8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108dde:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108de1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108de8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108def:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108df5:	8b 40 74             	mov    0x74(%eax),%eax
f0108df8:	48                   	dec    %eax
f0108df9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108dfc:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108e03:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108e06:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0108e0c:	83 ec 08             	sub    $0x8,%esp
f0108e0f:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e12:	50                   	push   %eax
f0108e13:	e8 66 1d 00 00       	call   f010ab7e <PROGRAM_SEGMENT_FIRST>
f0108e18:	83 c4 0c             	add    $0xc,%esp
f0108e1b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108e21:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0108e27:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108e2c:	89 c7                	mov    %eax,%edi
f0108e2e:	89 d6                	mov    %edx,%esi
f0108e30:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108e32:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108e38:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108e3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e3e:	8b 40 10             	mov    0x10(%eax),%eax
f0108e41:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108e44:	75 07                	jne    f0108e4d <env_create+0x1e4>
f0108e46:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108e4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108e53:	e9 15 03 00 00       	jmp    f010916d <env_create+0x504>
	{
		segment_counter++;
f0108e58:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108e5b:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0108e62:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108e65:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e6b:	83 ec 0c             	sub    $0xc,%esp
f0108e6e:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0108e74:	52                   	push   %edx
f0108e75:	ff 75 dc             	pushl  -0x24(%ebp)
f0108e78:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0108e7e:	52                   	push   %edx
f0108e7f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108e82:	50                   	push   %eax
f0108e83:	e8 02 0e 00 00       	call   f0109c8a <program_segment_alloc_map_copy_workingset>
f0108e88:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108e8b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0108e91:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108e94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e97:	8b 00                	mov    (%eax),%eax
f0108e99:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108e9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e9f:	8b 40 0c             	mov    0xc(%eax),%eax
f0108ea2:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108ea5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108ea8:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0108eab:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108eae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108eb3:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108eb6:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0108ebd:	8b 55 98             	mov    -0x68(%ebp),%edx
f0108ec0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108ec3:	01 d0                	add    %edx,%eax
f0108ec5:	48                   	dec    %eax
f0108ec6:	89 45 88             	mov    %eax,-0x78(%ebp)
f0108ec9:	8b 45 88             	mov    -0x78(%ebp),%eax
f0108ecc:	ba 00 00 00 00       	mov    $0x0,%edx
f0108ed1:	f7 75 8c             	divl   -0x74(%ebp)
f0108ed4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0108ed7:	29 d0                	sub    %edx,%eax
f0108ed9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108edc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108edf:	2b 45 90             	sub    -0x70(%ebp),%eax
f0108ee2:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108ee5:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0108eea:	83 ec 04             	sub    $0x4,%esp
f0108eed:	68 00 10 00 00       	push   $0x1000
f0108ef2:	6a 00                	push   $0x0
f0108ef4:	50                   	push   %eax
f0108ef5:	e8 ec 7e 02 00       	call   f0130de6 <memset>
f0108efa:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108efd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108f00:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108f03:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0108f09:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f0c:	01 d0                	add    %edx,%eax
f0108f0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108f11:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f14:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108f17:	eb 13                	jmp    f0108f2c <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0108f19:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f1c:	8a 10                	mov    (%eax),%dl
f0108f1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f21:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108f23:	ff 45 cc             	incl   -0x34(%ebp)
f0108f26:	ff 45 d4             	incl   -0x2c(%ebp)
f0108f29:	ff 45 d0             	incl   -0x30(%ebp)
f0108f2c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108f2f:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0108f32:	72 e5                	jb     f0108f19 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108f34:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0108f3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f40:	83 ec 04             	sub    $0x4,%esp
f0108f43:	52                   	push   %edx
f0108f44:	ff 75 90             	pushl  -0x70(%ebp)
f0108f47:	50                   	push   %eax
f0108f48:	e8 3c a7 ff ff       	call   f0103689 <pf_add_env_page>
f0108f4d:	83 c4 10             	add    $0x10,%esp
f0108f50:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108f53:	75 17                	jne    f0108f6c <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108f55:	83 ec 04             	sub    $0x4,%esp
f0108f58:	68 3c 61 13 f0       	push   $0xf013613c
f0108f5d:	68 e1 00 00 00       	push   $0xe1
f0108f62:	68 81 61 13 f0       	push   $0xf0136181
f0108f67:	e8 8f 72 ff ff       	call   f01001fb <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108f6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f6f:	8b 50 04             	mov    0x4(%eax),%edx
f0108f72:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f75:	01 d0                	add    %edx,%eax
f0108f77:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0108f7d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108f83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f88:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108f8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f91:	8b 50 04             	mov    0x4(%eax),%edx
f0108f94:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f97:	01 d0                	add    %edx,%eax
f0108f99:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108f9f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108fa2:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108fa5:	eb 43                	jmp    f0108fea <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108fa7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108faa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fb0:	83 ec 04             	sub    $0x4,%esp
f0108fb3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108fb6:	52                   	push   %edx
f0108fb7:	50                   	push   %eax
f0108fb8:	e8 cc a6 ff ff       	call   f0103689 <pf_add_env_page>
f0108fbd:	83 c4 10             	add    $0x10,%esp
f0108fc0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108fc3:	75 17                	jne    f0108fdc <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108fc5:	83 ec 04             	sub    $0x4,%esp
f0108fc8:	68 3c 61 13 f0       	push   $0xf013613c
f0108fcd:	68 ee 00 00 00       	push   $0xee
f0108fd2:	68 81 61 13 f0       	push   $0xf0136181
f0108fd7:	e8 1f 72 ff ff       	call   f01001fb <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108fdc:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108fe3:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108fea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108fed:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0108ff3:	72 b2                	jb     f0108fa7 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108ff5:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0108ffa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108ffd:	83 ec 04             	sub    $0x4,%esp
f0109000:	68 00 10 00 00       	push   $0x1000
f0109005:	6a 00                	push   $0x0
f0109007:	ff 75 d0             	pushl  -0x30(%ebp)
f010900a:	e8 d7 7d 02 00       	call   f0130de6 <memset>
f010900f:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109012:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109018:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010901b:	eb 13                	jmp    f0109030 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f010901d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109020:	8a 10                	mov    (%eax),%dl
f0109022:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109025:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109027:	ff 45 cc             	incl   -0x34(%ebp)
f010902a:	ff 45 d4             	incl   -0x2c(%ebp)
f010902d:	ff 45 d0             	incl   -0x30(%ebp)
f0109030:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109033:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109039:	72 e2                	jb     f010901d <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010903b:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0109041:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109047:	83 ec 04             	sub    $0x4,%esp
f010904a:	52                   	push   %edx
f010904b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109051:	50                   	push   %eax
f0109052:	e8 32 a6 ff ff       	call   f0103689 <pf_add_env_page>
f0109057:	83 c4 10             	add    $0x10,%esp
f010905a:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010905d:	75 17                	jne    f0109076 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010905f:	83 ec 04             	sub    $0x4,%esp
f0109062:	68 3c 61 13 f0       	push   $0xf013613c
f0109067:	68 fd 00 00 00       	push   $0xfd
f010906c:	68 81 61 13 f0       	push   $0xf0136181
f0109071:	e8 85 71 ff ff       	call   f01001fb <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109076:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010907d:	10 00 00 
f0109080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109083:	8b 50 04             	mov    0x4(%eax),%edx
f0109086:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109089:	01 c2                	add    %eax,%edx
f010908b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109091:	01 d0                	add    %edx,%eax
f0109093:	48                   	dec    %eax
f0109094:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010909a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01090a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01090a5:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01090ab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01090b1:	29 d0                	sub    %edx,%eax
f01090b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01090b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090b9:	8b 50 08             	mov    0x8(%eax),%edx
f01090bc:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090bf:	01 d0                	add    %edx,%eax
f01090c1:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01090c4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01090ca:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01090d1:	eb 41                	jmp    f0109114 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01090d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01090d9:	83 ec 04             	sub    $0x4,%esp
f01090dc:	6a 01                	push   $0x1
f01090de:	ff 75 c8             	pushl  -0x38(%ebp)
f01090e1:	50                   	push   %eax
f01090e2:	e8 71 a4 ff ff       	call   f0103558 <pf_add_empty_env_page>
f01090e7:	83 c4 10             	add    $0x10,%esp
f01090ea:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090ed:	75 17                	jne    f0109106 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090ef:	83 ec 04             	sub    $0x4,%esp
f01090f2:	68 3c 61 13 f0       	push   $0xf013613c
f01090f7:	68 0a 01 00 00       	push   $0x10a
f01090fc:	68 81 61 13 f0       	push   $0xf0136181
f0109101:	e8 f5 70 ff ff       	call   f01001fb <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109106:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010910d:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109114:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010911b:	10 00 00 
f010911e:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109124:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010912a:	01 d0                	add    %edx,%eax
f010912c:	48                   	dec    %eax
f010912d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109133:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109139:	ba 00 00 00 00       	mov    $0x0,%edx
f010913e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109144:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010914a:	29 d0                	sub    %edx,%eax
f010914c:	89 c2                	mov    %eax,%edx
f010914e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109151:	39 c2                	cmp    %eax,%edx
f0109153:	0f 87 7a ff ff ff    	ja     f01090d3 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109159:	83 ec 08             	sub    $0x8,%esp
f010915c:	ff 75 b8             	pushl  -0x48(%ebp)
f010915f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109162:	e8 0c 19 00 00       	call   f010aa73 <PROGRAM_SEGMENT_NEXT>
f0109167:	83 c4 10             	add    $0x10,%esp
f010916a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010916d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109171:	0f 85 e1 fc ff ff    	jne    f0108e58 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109177:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010917e:	e9 9d 00 00 00       	jmp    f0109220 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109183:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109189:	8b 48 78             	mov    0x78(%eax),%ecx
f010918c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010918f:	89 d0                	mov    %edx,%eax
f0109191:	01 c0                	add    %eax,%eax
f0109193:	01 d0                	add    %edx,%eax
f0109195:	c1 e0 03             	shl    $0x3,%eax
f0109198:	01 c8                	add    %ecx,%eax
f010919a:	8a 40 04             	mov    0x4(%eax),%al
f010919d:	84 c0                	test   %al,%al
f010919f:	75 7c                	jne    f010921d <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01091a1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091a7:	8b 48 78             	mov    0x78(%eax),%ecx
f01091aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01091ad:	89 d0                	mov    %edx,%eax
f01091af:	01 c0                	add    %eax,%eax
f01091b1:	01 d0                	add    %edx,%eax
f01091b3:	c1 e0 03             	shl    $0x3,%eax
f01091b6:	01 c8                	add    %ecx,%eax
f01091b8:	8b 00                	mov    (%eax),%eax
f01091ba:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01091c0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091c6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01091c9:	83 ec 04             	sub    $0x4,%esp
f01091cc:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01091d2:	52                   	push   %edx
f01091d3:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01091d9:	50                   	push   %eax
f01091da:	e8 fb d7 ff ff       	call   f01069da <get_page_table>
f01091df:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01091e2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01091e8:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01091ee:	c1 ea 0c             	shr    $0xc,%edx
f01091f1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01091f7:	c1 e2 02             	shl    $0x2,%edx
f01091fa:	01 d0                	add    %edx,%eax
f01091fc:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109202:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109208:	c1 e9 0c             	shr    $0xc,%ecx
f010920b:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109211:	c1 e1 02             	shl    $0x2,%ecx
f0109214:	01 ca                	add    %ecx,%edx
f0109216:	8b 12                	mov    (%edx),%edx
f0109218:	83 e2 bf             	and    $0xffffffbf,%edx
f010921b:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010921d:	ff 45 c4             	incl   -0x3c(%ebp)
f0109220:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109226:	8b 50 74             	mov    0x74(%eax),%edx
f0109229:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010922c:	39 c2                	cmp    %eax,%edx
f010922e:	0f 87 4f ff ff ff    	ja     f0109183 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109234:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109237:	8b 50 08             	mov    0x8(%eax),%edx
f010923a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109240:	83 ec 08             	sub    $0x8,%esp
f0109243:	52                   	push   %edx
f0109244:	50                   	push   %eax
f0109245:	e8 73 16 00 00       	call   f010a8bd <set_environment_entry_point>
f010924a:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010924d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109253:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f010925a:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010925d:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109264:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109267:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010926e:	e9 53 05 00 00       	jmp    f01097c6 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109273:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010927a:	00 00 00 
		allocate_frame(&pp);
f010927d:	83 ec 0c             	sub    $0xc,%esp
f0109280:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109286:	50                   	push   %eax
f0109287:	e8 8f d5 ff ff       	call   f010681b <allocate_frame>
f010928c:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010928f:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109295:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010929b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010929e:	6a 06                	push   $0x6
f01092a0:	ff 75 c0             	pushl  -0x40(%ebp)
f01092a3:	52                   	push   %edx
f01092a4:	50                   	push   %eax
f01092a5:	e8 7c db ff ff       	call   f0106e26 <loadtime_map_frame>
f01092aa:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01092ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01092b0:	83 ec 04             	sub    $0x4,%esp
f01092b3:	68 00 10 00 00       	push   $0x1000
f01092b8:	6a 00                	push   $0x0
f01092ba:	50                   	push   %eax
f01092bb:	e8 26 7b 02 00       	call   f0130de6 <memset>
f01092c0:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01092c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092c9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01092cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092d5:	83 ec 04             	sub    $0x4,%esp
f01092d8:	ff 75 c0             	pushl  -0x40(%ebp)
f01092db:	52                   	push   %edx
f01092dc:	50                   	push   %eax
f01092dd:	e8 58 eb ff ff       	call   f0107e3a <env_page_ws_set_entry>
f01092e2:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01092e5:	83 ec 0c             	sub    $0xc,%esp
f01092e8:	6a 02                	push   $0x2
f01092ea:	e8 80 47 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f01092ef:	83 c4 10             	add    $0x10,%esp
f01092f2:	85 c0                	test   %eax,%eax
f01092f4:	0f 84 6b 04 00 00    	je     f0109765 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01092fa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109300:	8b 48 78             	mov    0x78(%eax),%ecx
f0109303:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109309:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010930f:	89 d0                	mov    %edx,%eax
f0109311:	01 c0                	add    %eax,%eax
f0109313:	01 d0                	add    %edx,%eax
f0109315:	c1 e0 03             	shl    $0x3,%eax
f0109318:	01 c8                	add    %ecx,%eax
f010931a:	85 c0                	test   %eax,%eax
f010931c:	75 17                	jne    f0109335 <env_create+0x6cc>
f010931e:	83 ec 04             	sub    $0x4,%esp
f0109321:	68 9e 61 13 f0       	push   $0xf013619e
f0109326:	68 41 01 00 00       	push   $0x141
f010932b:	68 81 61 13 f0       	push   $0xf0136181
f0109330:	e8 c6 6e ff ff       	call   f01001fb <_panic>
f0109335:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010933b:	8b 48 78             	mov    0x78(%eax),%ecx
f010933e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109344:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010934a:	89 d0                	mov    %edx,%eax
f010934c:	01 c0                	add    %eax,%eax
f010934e:	01 d0                	add    %edx,%eax
f0109350:	c1 e0 03             	shl    $0x3,%eax
f0109353:	01 c8                	add    %ecx,%eax
f0109355:	8b 40 10             	mov    0x10(%eax),%eax
f0109358:	85 c0                	test   %eax,%eax
f010935a:	74 4b                	je     f01093a7 <env_create+0x73e>
f010935c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109362:	8b 48 78             	mov    0x78(%eax),%ecx
f0109365:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010936b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109371:	89 d0                	mov    %edx,%eax
f0109373:	01 c0                	add    %eax,%eax
f0109375:	01 d0                	add    %edx,%eax
f0109377:	c1 e0 03             	shl    $0x3,%eax
f010937a:	01 c8                	add    %ecx,%eax
f010937c:	8b 50 10             	mov    0x10(%eax),%edx
f010937f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109385:	8b 58 78             	mov    0x78(%eax),%ebx
f0109388:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010938e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109394:	89 c8                	mov    %ecx,%eax
f0109396:	01 c0                	add    %eax,%eax
f0109398:	01 c8                	add    %ecx,%eax
f010939a:	c1 e0 03             	shl    $0x3,%eax
f010939d:	01 d8                	add    %ebx,%eax
f010939f:	8b 40 14             	mov    0x14(%eax),%eax
f01093a2:	89 42 14             	mov    %eax,0x14(%edx)
f01093a5:	eb 2f                	jmp    f01093d6 <env_create+0x76d>
f01093a7:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093ad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093b3:	8b 58 78             	mov    0x78(%eax),%ebx
f01093b6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093bc:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01093c2:	89 c8                	mov    %ecx,%eax
f01093c4:	01 c0                	add    %eax,%eax
f01093c6:	01 c8                	add    %ecx,%eax
f01093c8:	c1 e0 03             	shl    $0x3,%eax
f01093cb:	01 d8                	add    %ebx,%eax
f01093cd:	8b 40 14             	mov    0x14(%eax),%eax
f01093d0:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01093d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093dc:	8b 48 78             	mov    0x78(%eax),%ecx
f01093df:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093e5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01093eb:	89 d0                	mov    %edx,%eax
f01093ed:	01 c0                	add    %eax,%eax
f01093ef:	01 d0                	add    %edx,%eax
f01093f1:	c1 e0 03             	shl    $0x3,%eax
f01093f4:	01 c8                	add    %ecx,%eax
f01093f6:	8b 40 14             	mov    0x14(%eax),%eax
f01093f9:	85 c0                	test   %eax,%eax
f01093fb:	74 4b                	je     f0109448 <env_create+0x7df>
f01093fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109403:	8b 48 78             	mov    0x78(%eax),%ecx
f0109406:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010940c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109412:	89 d0                	mov    %edx,%eax
f0109414:	01 c0                	add    %eax,%eax
f0109416:	01 d0                	add    %edx,%eax
f0109418:	c1 e0 03             	shl    $0x3,%eax
f010941b:	01 c8                	add    %ecx,%eax
f010941d:	8b 50 14             	mov    0x14(%eax),%edx
f0109420:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109426:	8b 58 78             	mov    0x78(%eax),%ebx
f0109429:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010942f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109435:	89 c8                	mov    %ecx,%eax
f0109437:	01 c0                	add    %eax,%eax
f0109439:	01 c8                	add    %ecx,%eax
f010943b:	c1 e0 03             	shl    $0x3,%eax
f010943e:	01 d8                	add    %ebx,%eax
f0109440:	8b 40 10             	mov    0x10(%eax),%eax
f0109443:	89 42 10             	mov    %eax,0x10(%edx)
f0109446:	eb 2f                	jmp    f0109477 <env_create+0x80e>
f0109448:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010944e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109454:	8b 58 78             	mov    0x78(%eax),%ebx
f0109457:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010945d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109463:	89 c8                	mov    %ecx,%eax
f0109465:	01 c0                	add    %eax,%eax
f0109467:	01 c8                	add    %ecx,%eax
f0109469:	c1 e0 03             	shl    $0x3,%eax
f010946c:	01 d8                	add    %ebx,%eax
f010946e:	8b 40 10             	mov    0x10(%eax),%eax
f0109471:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109477:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010947d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109480:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109486:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010948c:	89 d0                	mov    %edx,%eax
f010948e:	01 c0                	add    %eax,%eax
f0109490:	01 d0                	add    %edx,%eax
f0109492:	c1 e0 03             	shl    $0x3,%eax
f0109495:	01 c8                	add    %ecx,%eax
f0109497:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010949e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094a4:	8b 48 78             	mov    0x78(%eax),%ecx
f01094a7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094ad:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094b3:	89 d0                	mov    %edx,%eax
f01094b5:	01 c0                	add    %eax,%eax
f01094b7:	01 d0                	add    %edx,%eax
f01094b9:	c1 e0 03             	shl    $0x3,%eax
f01094bc:	01 c8                	add    %ecx,%eax
f01094be:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01094c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094cb:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01094d1:	4a                   	dec    %edx
f01094d2:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01094d8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094de:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01094e4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094ea:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01094f0:	39 c2                	cmp    %eax,%edx
f01094f2:	0f 83 39 01 00 00    	jae    f0109631 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094f8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094fe:	8b 48 78             	mov    0x78(%eax),%ecx
f0109501:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109507:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010950d:	89 d0                	mov    %edx,%eax
f010950f:	01 c0                	add    %eax,%eax
f0109511:	01 d0                	add    %edx,%eax
f0109513:	c1 e0 03             	shl    $0x3,%eax
f0109516:	01 c8                	add    %ecx,%eax
f0109518:	85 c0                	test   %eax,%eax
f010951a:	75 17                	jne    f0109533 <env_create+0x8ca>
f010951c:	83 ec 04             	sub    $0x4,%esp
f010951f:	68 bc 61 13 f0       	push   $0xf01361bc
f0109524:	68 46 01 00 00       	push   $0x146
f0109529:	68 81 61 13 f0       	push   $0xf0136181
f010952e:	e8 c8 6c ff ff       	call   f01001fb <_panic>
f0109533:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109539:	8b 48 78             	mov    0x78(%eax),%ecx
f010953c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109542:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109548:	89 d0                	mov    %edx,%eax
f010954a:	01 c0                	add    %eax,%eax
f010954c:	01 d0                	add    %edx,%eax
f010954e:	c1 e0 03             	shl    $0x3,%eax
f0109551:	01 c8                	add    %ecx,%eax
f0109553:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109559:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010955f:	89 50 10             	mov    %edx,0x10(%eax)
f0109562:	8b 40 10             	mov    0x10(%eax),%eax
f0109565:	85 c0                	test   %eax,%eax
f0109567:	74 31                	je     f010959a <env_create+0x931>
f0109569:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010956f:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109575:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957b:	8b 58 78             	mov    0x78(%eax),%ebx
f010957e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109584:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010958a:	89 c8                	mov    %ecx,%eax
f010958c:	01 c0                	add    %eax,%eax
f010958e:	01 c8                	add    %ecx,%eax
f0109590:	c1 e0 03             	shl    $0x3,%eax
f0109593:	01 d8                	add    %ebx,%eax
f0109595:	89 42 14             	mov    %eax,0x14(%edx)
f0109598:	eb 2c                	jmp    f01095c6 <env_create+0x95d>
f010959a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095a6:	8b 58 78             	mov    0x78(%eax),%ebx
f01095a9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095af:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095b5:	89 c8                	mov    %ecx,%eax
f01095b7:	01 c0                	add    %eax,%eax
f01095b9:	01 c8                	add    %ecx,%eax
f01095bb:	c1 e0 03             	shl    $0x3,%eax
f01095be:	01 d8                	add    %ebx,%eax
f01095c0:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01095c6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095cc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d2:	8b 58 78             	mov    0x78(%eax),%ebx
f01095d5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095db:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095e1:	89 c8                	mov    %ecx,%eax
f01095e3:	01 c0                	add    %eax,%eax
f01095e5:	01 c8                	add    %ecx,%eax
f01095e7:	c1 e0 03             	shl    $0x3,%eax
f01095ea:	01 d8                	add    %ebx,%eax
f01095ec:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01095f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095f8:	8b 48 78             	mov    0x78(%eax),%ecx
f01095fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109601:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109607:	89 d0                	mov    %edx,%eax
f0109609:	01 c0                	add    %eax,%eax
f010960b:	01 d0                	add    %edx,%eax
f010960d:	c1 e0 03             	shl    $0x3,%eax
f0109610:	01 c8                	add    %ecx,%eax
f0109612:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109619:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010961f:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109625:	42                   	inc    %edx
f0109626:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010962c:	e9 34 01 00 00       	jmp    f0109765 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109631:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109637:	8b 48 78             	mov    0x78(%eax),%ecx
f010963a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109640:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109646:	89 d0                	mov    %edx,%eax
f0109648:	01 c0                	add    %eax,%eax
f010964a:	01 d0                	add    %edx,%eax
f010964c:	c1 e0 03             	shl    $0x3,%eax
f010964f:	01 c8                	add    %ecx,%eax
f0109651:	85 c0                	test   %eax,%eax
f0109653:	75 17                	jne    f010966c <env_create+0xa03>
f0109655:	83 ec 04             	sub    $0x4,%esp
f0109658:	68 bc 61 13 f0       	push   $0xf01361bc
f010965d:	68 4a 01 00 00       	push   $0x14a
f0109662:	68 81 61 13 f0       	push   $0xf0136181
f0109667:	e8 8f 6b ff ff       	call   f01001fb <_panic>
f010966c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109672:	8b 48 78             	mov    0x78(%eax),%ecx
f0109675:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010967b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109681:	89 d0                	mov    %edx,%eax
f0109683:	01 c0                	add    %eax,%eax
f0109685:	01 d0                	add    %edx,%eax
f0109687:	c1 e0 03             	shl    $0x3,%eax
f010968a:	01 c8                	add    %ecx,%eax
f010968c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109692:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109698:	89 50 10             	mov    %edx,0x10(%eax)
f010969b:	8b 40 10             	mov    0x10(%eax),%eax
f010969e:	85 c0                	test   %eax,%eax
f01096a0:	74 31                	je     f01096d3 <env_create+0xa6a>
f01096a2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096a8:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f01096ae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096b4:	8b 58 78             	mov    0x78(%eax),%ebx
f01096b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096bd:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01096c3:	89 c8                	mov    %ecx,%eax
f01096c5:	01 c0                	add    %eax,%eax
f01096c7:	01 c8                	add    %ecx,%eax
f01096c9:	c1 e0 03             	shl    $0x3,%eax
f01096cc:	01 d8                	add    %ebx,%eax
f01096ce:	89 42 14             	mov    %eax,0x14(%edx)
f01096d1:	eb 2c                	jmp    f01096ff <env_create+0xa96>
f01096d3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096df:	8b 58 78             	mov    0x78(%eax),%ebx
f01096e2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096e8:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01096ee:	89 c8                	mov    %ecx,%eax
f01096f0:	01 c0                	add    %eax,%eax
f01096f2:	01 c8                	add    %ecx,%eax
f01096f4:	c1 e0 03             	shl    $0x3,%eax
f01096f7:	01 d8                	add    %ebx,%eax
f01096f9:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f01096ff:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109705:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010970b:	8b 58 78             	mov    0x78(%eax),%ebx
f010970e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109714:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010971a:	89 c8                	mov    %ecx,%eax
f010971c:	01 c0                	add    %eax,%eax
f010971e:	01 c8                	add    %ecx,%eax
f0109720:	c1 e0 03             	shl    $0x3,%eax
f0109723:	01 d8                	add    %ebx,%eax
f0109725:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f010972b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109731:	8b 48 78             	mov    0x78(%eax),%ecx
f0109734:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010973a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109740:	89 d0                	mov    %edx,%eax
f0109742:	01 c0                	add    %eax,%eax
f0109744:	01 d0                	add    %edx,%eax
f0109746:	c1 e0 03             	shl    $0x3,%eax
f0109749:	01 c8                	add    %ecx,%eax
f010974b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109752:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109758:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010975e:	42                   	inc    %edx
f010975f:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109765:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010976b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109771:	42                   	inc    %edx
f0109772:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109778:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010977e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109784:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010978a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109790:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109793:	ba 00 00 00 00       	mov    $0x0,%edx
f0109798:	f7 f3                	div    %ebx
f010979a:	89 d0                	mov    %edx,%eax
f010979c:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f01097a2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a8:	83 ec 04             	sub    $0x4,%esp
f01097ab:	6a 01                	push   $0x1
f01097ad:	ff 75 c0             	pushl  -0x40(%ebp)
f01097b0:	50                   	push   %eax
f01097b1:	e8 a2 9d ff ff       	call   f0103558 <pf_add_empty_env_page>
f01097b6:	83 c4 10             	add    $0x10,%esp
f01097b9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01097bf:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01097c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01097c9:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f01097cf:	0f 83 9e fa ff ff    	jae    f0109273 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01097d5:	83 ec 0c             	sub    $0xc,%esp
f01097d8:	6a 02                	push   $0x2
f01097da:	e8 90 42 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f01097df:	83 c4 10             	add    $0x10,%esp
f01097e2:	85 c0                	test   %eax,%eax
f01097e4:	74 72                	je     f0109858 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f01097e6:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01097ed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f3:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01097f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01097fc:	eb 2b                	jmp    f0109829 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01097fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109801:	8b 10                	mov    (%eax),%edx
f0109803:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109809:	8b 40 5c             	mov    0x5c(%eax),%eax
f010980c:	6a 01                	push   $0x1
f010980e:	6a 00                	push   $0x0
f0109810:	52                   	push   %edx
f0109811:	50                   	push   %eax
f0109812:	e8 06 e3 ff ff       	call   f0107b1d <pt_set_page_permissions>
f0109817:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f010981a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109820:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109826:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109829:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010982f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109833:	74 08                	je     f010983d <env_create+0xbd4>
f0109835:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109838:	8b 52 10             	mov    0x10(%edx),%edx
f010983b:	eb 05                	jmp    f0109842 <env_create+0xbd9>
f010983d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109842:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109848:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010984e:	85 c0                	test   %eax,%eax
f0109850:	75 ac                	jne    f01097fe <env_create+0xb95>
f0109852:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109856:	75 a6                	jne    f01097fe <env_create+0xb95>
f0109858:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010985b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010985e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109861:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109864:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f010986a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010986d:	5b                   	pop    %ebx
f010986e:	5e                   	pop    %esi
f010986f:	5f                   	pop    %edi
f0109870:	5d                   	pop    %ebp
f0109871:	c3                   	ret    

f0109872 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109872:	55                   	push   %ebp
f0109873:	89 e5                	mov    %esp,%ebp
f0109875:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109878:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010987d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109880:	74 25                	je     f01098a7 <env_run+0x35>
	{
		curenv = e ;
f0109882:	8b 45 08             	mov    0x8(%ebp),%eax
f0109885:	a3 14 72 65 f0       	mov    %eax,0xf0657214
		curenv->env_runs++ ;
f010988a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010988f:	8b 50 58             	mov    0x58(%eax),%edx
f0109892:	42                   	inc    %edx
f0109893:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109896:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010989b:	8b 40 60             	mov    0x60(%eax),%eax
f010989e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01098a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098a4:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f01098a7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01098ac:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01098b3:	e8 7b a8 ff ff       	call   f0104133 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01098b8:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01098bd:	83 ec 0c             	sub    $0xc,%esp
f01098c0:	50                   	push   %eax
f01098c1:	e8 0f 01 00 00       	call   f01099d5 <env_pop_tf>

f01098c6 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01098c6:	55                   	push   %ebp
f01098c7:	89 e5                	mov    %esp,%ebp
f01098c9:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f01098cc:	83 ec 0c             	sub    $0xc,%esp
f01098cf:	ff 75 08             	pushl  0x8(%ebp)
f01098d2:	e8 f5 10 00 00       	call   f010a9cc <unshare_pws_at_user_space>
f01098d7:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f01098da:	83 ec 04             	sub    $0x4,%esp
f01098dd:	68 e0 61 13 f0       	push   $0xf01361e0
f01098e2:	68 9d 01 00 00       	push   $0x19d
f01098e7:	68 81 61 13 f0       	push   $0xf0136181
f01098ec:	e8 0a 69 ff ff       	call   f01001fb <_panic>

f01098f1 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01098f1:	55                   	push   %ebp
f01098f2:	89 e5                	mov    %esp,%ebp
f01098f4:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01098f7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01098fc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01098ff:	83 ec 0c             	sub    $0xc,%esp
f0109902:	50                   	push   %eax
f0109903:	e8 c3 b8 ff ff       	call   f01051cb <sched_exit_env>
f0109908:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010990b:	e8 35 ad ff ff       	call   f0104645 <fos_scheduler>

f0109910 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109910:	55                   	push   %ebp
f0109911:	89 e5                	mov    %esp,%ebp
f0109913:	53                   	push   %ebx
f0109914:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109917:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010991b:	75 15                	jne    f0109932 <envid2env+0x22>
		*env_store = curenv;
f010991d:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f0109923:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109926:	89 10                	mov    %edx,(%eax)
		return 0;
f0109928:	b8 00 00 00 00       	mov    $0x0,%eax
f010992d:	e9 9e 00 00 00       	jmp    f01099d0 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109932:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f0109938:	83 ec 0c             	sub    $0xc,%esp
f010993b:	68 b1 02 00 00       	push   $0x2b1
f0109940:	e8 25 60 02 00       	call   f012f96a <nearest_pow2_ceil>
f0109945:	83 c4 10             	add    $0x10,%esp
f0109948:	8d 50 ff             	lea    -0x1(%eax),%edx
f010994b:	8b 45 08             	mov    0x8(%ebp),%eax
f010994e:	21 c2                	and    %eax,%edx
f0109950:	89 d0                	mov    %edx,%eax
f0109952:	c1 e0 03             	shl    $0x3,%eax
f0109955:	01 d0                	add    %edx,%eax
f0109957:	01 c0                	add    %eax,%eax
f0109959:	01 d0                	add    %edx,%eax
f010995b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109962:	01 d0                	add    %edx,%eax
f0109964:	c1 e0 04             	shl    $0x4,%eax
f0109967:	01 d8                	add    %ebx,%eax
f0109969:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010996c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010996f:	8b 40 54             	mov    0x54(%eax),%eax
f0109972:	85 c0                	test   %eax,%eax
f0109974:	74 0b                	je     f0109981 <envid2env+0x71>
f0109976:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109979:	8b 40 4c             	mov    0x4c(%eax),%eax
f010997c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010997f:	74 10                	je     f0109991 <envid2env+0x81>
		*env_store = 0;
f0109981:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109984:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010998a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010998f:	eb 3f                	jmp    f01099d0 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109991:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109995:	74 2c                	je     f01099c3 <envid2env+0xb3>
f0109997:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010999c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010999f:	74 22                	je     f01099c3 <envid2env+0xb3>
f01099a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099a4:	8b 50 50             	mov    0x50(%eax),%edx
f01099a7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01099ac:	8b 40 4c             	mov    0x4c(%eax),%eax
f01099af:	39 c2                	cmp    %eax,%edx
f01099b1:	74 10                	je     f01099c3 <envid2env+0xb3>
		*env_store = 0;
f01099b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01099bc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01099c1:	eb 0d                	jmp    f01099d0 <envid2env+0xc0>
	}

	*env_store = e;
f01099c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099c9:	89 10                	mov    %edx,(%eax)
	return 0;
f01099cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01099d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01099d3:	c9                   	leave  
f01099d4:	c3                   	ret    

f01099d5 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01099d5:	55                   	push   %ebp
f01099d6:	89 e5                	mov    %esp,%ebp
f01099d8:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01099db:	8b 65 08             	mov    0x8(%ebp),%esp
f01099de:	61                   	popa   
f01099df:	07                   	pop    %es
f01099e0:	1f                   	pop    %ds
f01099e1:	83 c4 08             	add    $0x8,%esp
f01099e4:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01099e5:	83 ec 04             	sub    $0x4,%esp
f01099e8:	68 07 62 13 f0       	push   $0xf0136207
f01099ed:	68 fc 01 00 00       	push   $0x1fc
f01099f2:	68 81 61 13 f0       	push   $0xf0136181
f01099f7:	e8 ff 67 ff ff       	call   f01001fb <_panic>

f01099fc <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01099fc:	55                   	push   %ebp
f01099fd:	89 e5                	mov    %esp,%ebp
f01099ff:	53                   	push   %ebx
f0109a00:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109a03:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109a0a:	e9 73 01 00 00       	jmp    f0109b82 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109a0f:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a18:	89 d0                	mov    %edx,%eax
f0109a1a:	c1 e0 03             	shl    $0x3,%eax
f0109a1d:	01 d0                	add    %edx,%eax
f0109a1f:	01 c0                	add    %eax,%eax
f0109a21:	01 d0                	add    %edx,%eax
f0109a23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a2a:	01 d0                	add    %edx,%eax
f0109a2c:	c1 e0 04             	shl    $0x4,%eax
f0109a2f:	01 c8                	add    %ecx,%eax
f0109a31:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109a38:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a41:	89 d0                	mov    %edx,%eax
f0109a43:	c1 e0 03             	shl    $0x3,%eax
f0109a46:	01 d0                	add    %edx,%eax
f0109a48:	01 c0                	add    %eax,%eax
f0109a4a:	01 d0                	add    %edx,%eax
f0109a4c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a53:	01 d0                	add    %edx,%eax
f0109a55:	c1 e0 04             	shl    $0x4,%eax
f0109a58:	01 c8                	add    %ecx,%eax
f0109a5a:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109a61:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a6a:	89 d0                	mov    %edx,%eax
f0109a6c:	c1 e0 03             	shl    $0x3,%eax
f0109a6f:	01 d0                	add    %edx,%eax
f0109a71:	01 c0                	add    %eax,%eax
f0109a73:	01 d0                	add    %edx,%eax
f0109a75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a7c:	01 d0                	add    %edx,%eax
f0109a7e:	c1 e0 04             	shl    $0x4,%eax
f0109a81:	01 c8                	add    %ecx,%eax
f0109a83:	85 c0                	test   %eax,%eax
f0109a85:	75 17                	jne    f0109a9e <env_init+0xa2>
f0109a87:	83 ec 04             	sub    $0x4,%esp
f0109a8a:	68 bc 61 13 f0       	push   $0xf01361bc
f0109a8f:	68 18 02 00 00       	push   $0x218
f0109a94:	68 81 61 13 f0       	push   $0xf0136181
f0109a99:	e8 5d 67 ff ff       	call   f01001fb <_panic>
f0109a9e:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109aa4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109aa7:	89 d0                	mov    %edx,%eax
f0109aa9:	c1 e0 03             	shl    $0x3,%eax
f0109aac:	01 d0                	add    %edx,%eax
f0109aae:	01 c0                	add    %eax,%eax
f0109ab0:	01 d0                	add    %edx,%eax
f0109ab2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ab9:	01 d0                	add    %edx,%eax
f0109abb:	c1 e0 04             	shl    $0x4,%eax
f0109abe:	01 c8                	add    %ecx,%eax
f0109ac0:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109ac6:	89 50 44             	mov    %edx,0x44(%eax)
f0109ac9:	8b 40 44             	mov    0x44(%eax),%eax
f0109acc:	85 c0                	test   %eax,%eax
f0109ace:	74 2d                	je     f0109afd <env_init+0x101>
f0109ad0:	8b 0d 18 72 65 f0    	mov    0xf0657218,%ecx
f0109ad6:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f0109adc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109adf:	89 d0                	mov    %edx,%eax
f0109ae1:	c1 e0 03             	shl    $0x3,%eax
f0109ae4:	01 d0                	add    %edx,%eax
f0109ae6:	01 c0                	add    %eax,%eax
f0109ae8:	01 d0                	add    %edx,%eax
f0109aea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109af1:	01 d0                	add    %edx,%eax
f0109af3:	c1 e0 04             	shl    $0x4,%eax
f0109af6:	01 d8                	add    %ebx,%eax
f0109af8:	89 41 48             	mov    %eax,0x48(%ecx)
f0109afb:	eb 27                	jmp    f0109b24 <env_init+0x128>
f0109afd:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b06:	89 d0                	mov    %edx,%eax
f0109b08:	c1 e0 03             	shl    $0x3,%eax
f0109b0b:	01 d0                	add    %edx,%eax
f0109b0d:	01 c0                	add    %eax,%eax
f0109b0f:	01 d0                	add    %edx,%eax
f0109b11:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b18:	01 d0                	add    %edx,%eax
f0109b1a:	c1 e0 04             	shl    $0x4,%eax
f0109b1d:	01 c8                	add    %ecx,%eax
f0109b1f:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109b24:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b2d:	89 d0                	mov    %edx,%eax
f0109b2f:	c1 e0 03             	shl    $0x3,%eax
f0109b32:	01 d0                	add    %edx,%eax
f0109b34:	01 c0                	add    %eax,%eax
f0109b36:	01 d0                	add    %edx,%eax
f0109b38:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b3f:	01 d0                	add    %edx,%eax
f0109b41:	c1 e0 04             	shl    $0x4,%eax
f0109b44:	01 c8                	add    %ecx,%eax
f0109b46:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109b4b:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b54:	89 d0                	mov    %edx,%eax
f0109b56:	c1 e0 03             	shl    $0x3,%eax
f0109b59:	01 d0                	add    %edx,%eax
f0109b5b:	01 c0                	add    %eax,%eax
f0109b5d:	01 d0                	add    %edx,%eax
f0109b5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b66:	01 d0                	add    %edx,%eax
f0109b68:	c1 e0 04             	shl    $0x4,%eax
f0109b6b:	01 c8                	add    %ecx,%eax
f0109b6d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109b74:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109b79:	40                   	inc    %eax
f0109b7a:	a3 24 72 65 f0       	mov    %eax,0xf0657224
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109b7f:	ff 4d f4             	decl   -0xc(%ebp)
f0109b82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b86:	0f 89 83 fe ff ff    	jns    f0109a0f <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109b8c:	90                   	nop
f0109b8d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109b90:	c9                   	leave  
f0109b91:	c3                   	ret    

f0109b92 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109b92:	55                   	push   %ebp
f0109b93:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109b95:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109b9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b9e:	89 10                	mov    %edx,(%eax)
f0109ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ba3:	8b 00                	mov    (%eax),%eax
f0109ba5:	85 c0                	test   %eax,%eax
f0109ba7:	75 07                	jne    f0109bb0 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109ba9:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109bae:	eb 11                	jmp    f0109bc1 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109bb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bb3:	8b 00                	mov    (%eax),%eax
f0109bb5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109bbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109bc1:	5d                   	pop    %ebp
f0109bc2:	c3                   	ret    

f0109bc3 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109bc3:	55                   	push   %ebp
f0109bc4:	89 e5                	mov    %esp,%ebp
f0109bc6:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109bc9:	83 ec 04             	sub    $0x4,%esp
f0109bcc:	68 f0 05 00 00       	push   $0x5f0
f0109bd1:	6a 00                	push   $0x0
f0109bd3:	ff 75 08             	pushl  0x8(%ebp)
f0109bd6:	e8 0b 72 02 00       	call   f0130de6 <memset>
f0109bdb:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109bde:	8b 45 08             	mov    0x8(%ebp),%eax
f0109be1:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109be8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109bec:	75 17                	jne    f0109c05 <free_environment+0x42>
f0109bee:	83 ec 04             	sub    $0x4,%esp
f0109bf1:	68 bc 61 13 f0       	push   $0xf01361bc
f0109bf6:	68 35 02 00 00       	push   $0x235
f0109bfb:	68 81 61 13 f0       	push   $0xf0136181
f0109c00:	e8 f6 65 ff ff       	call   f01001fb <_panic>
f0109c05:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c0e:	89 50 44             	mov    %edx,0x44(%eax)
f0109c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c14:	8b 40 44             	mov    0x44(%eax),%eax
f0109c17:	85 c0                	test   %eax,%eax
f0109c19:	74 0d                	je     f0109c28 <free_environment+0x65>
f0109c1b:	a1 18 72 65 f0       	mov    0xf0657218,%eax
f0109c20:	8b 55 08             	mov    0x8(%ebp),%edx
f0109c23:	89 50 48             	mov    %edx,0x48(%eax)
f0109c26:	eb 08                	jmp    f0109c30 <free_environment+0x6d>
f0109c28:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c2b:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109c30:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c33:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109c38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109c42:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109c47:	40                   	inc    %eax
f0109c48:	a3 24 72 65 f0       	mov    %eax,0xf0657224
}
f0109c4d:	90                   	nop
f0109c4e:	c9                   	leave  
f0109c4f:	c3                   	ret    

f0109c50 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109c50:	55                   	push   %ebp
f0109c51:	89 e5                	mov    %esp,%ebp
f0109c53:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f0109c56:	83 ec 04             	sub    $0x4,%esp
f0109c59:	68 14 62 13 f0       	push   $0xf0136214
f0109c5e:	68 3f 02 00 00       	push   $0x23f
f0109c63:	68 81 61 13 f0       	push   $0xf0136181
f0109c68:	e8 8e 65 ff ff       	call   f01001fb <_panic>

f0109c6d <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109c6d:	55                   	push   %ebp
f0109c6e:	89 e5                	mov    %esp,%ebp
f0109c70:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f0109c73:	83 ec 04             	sub    $0x4,%esp
f0109c76:	68 48 62 13 f0       	push   $0xf0136248
f0109c7b:	68 4b 02 00 00       	push   $0x24b
f0109c80:	68 81 61 13 f0       	push   $0xf0136181
f0109c85:	e8 71 65 ff ff       	call   f01001fb <_panic>

f0109c8a <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109c8a:	55                   	push   %ebp
f0109c8b:	89 e5                	mov    %esp,%ebp
f0109c8d:	53                   	push   %ebx
f0109c8e:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109c91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109c94:	8b 40 0c             	mov    0xc(%eax),%eax
f0109c97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109c9d:	8b 40 08             	mov    0x8(%eax),%eax
f0109ca0:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109ca3:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109caa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109cad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109cb0:	01 c2                	add    %eax,%edx
f0109cb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109cb5:	01 d0                	add    %edx,%eax
f0109cb7:	48                   	dec    %eax
f0109cb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109cbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0109cc3:	f7 75 dc             	divl   -0x24(%ebp)
f0109cc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cc9:	29 d0                	sub    %edx,%eax
f0109ccb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109cce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109cd1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109cd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109cd7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109cdf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109ce6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109ced:	8b 45 10             	mov    0x10(%ebp),%eax
f0109cf0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109cf6:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109cfd:	0f 85 c8 05 00 00    	jne    f010a2cb <program_segment_alloc_map_copy_workingset+0x641>
f0109d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d06:	05 5c 05 00 00       	add    $0x55c,%eax
f0109d0b:	83 ec 08             	sub    $0x8,%esp
f0109d0e:	68 7c 62 13 f0       	push   $0xf013627c
f0109d13:	50                   	push   %eax
f0109d14:	e8 eb 6f 02 00       	call   f0130d04 <strcmp>
f0109d19:	83 c4 10             	add    $0x10,%esp
f0109d1c:	85 c0                	test   %eax,%eax
f0109d1e:	0f 84 a7 05 00 00    	je     f010a2cb <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109d24:	8b 45 14             	mov    0x14(%ebp),%eax
f0109d27:	83 f8 06             	cmp    $0x6,%eax
f0109d2a:	76 05                	jbe    f0109d31 <program_segment_alloc_map_copy_workingset+0xa7>
f0109d2c:	b8 06 00 00 00       	mov    $0x6,%eax
f0109d31:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109d34:	e9 92 05 00 00       	jmp    f010a2cb <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109d39:	83 ec 0c             	sub    $0xc,%esp
f0109d3c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109d3f:	50                   	push   %eax
f0109d40:	e8 d6 ca ff ff       	call   f010681b <allocate_frame>
f0109d45:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109d48:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109d4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109d51:	6a 06                	push   $0x6
f0109d53:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d56:	52                   	push   %edx
f0109d57:	50                   	push   %eax
f0109d58:	e8 c9 d0 ff ff       	call   f0106e26 <loadtime_map_frame>
f0109d5d:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109d60:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d63:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d69:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d6f:	89 d0                	mov    %edx,%eax
f0109d71:	01 c0                	add    %eax,%eax
f0109d73:	01 d0                	add    %edx,%eax
f0109d75:	c1 e0 03             	shl    $0x3,%eax
f0109d78:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d7e:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109d80:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d83:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d86:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d89:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d8f:	89 d0                	mov    %edx,%eax
f0109d91:	01 c0                	add    %eax,%eax
f0109d93:	01 d0                	add    %edx,%eax
f0109d95:	c1 e0 03             	shl    $0x3,%eax
f0109d98:	01 c8                	add    %ecx,%eax
f0109d9a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109d9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109da1:	8b 48 78             	mov    0x78(%eax),%ecx
f0109da4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109da7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109dad:	89 d0                	mov    %edx,%eax
f0109daf:	01 c0                	add    %eax,%eax
f0109db1:	01 d0                	add    %edx,%eax
f0109db3:	c1 e0 03             	shl    $0x3,%eax
f0109db6:	01 c8                	add    %ecx,%eax
f0109db8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109dbf:	83 ec 0c             	sub    $0xc,%esp
f0109dc2:	6a 02                	push   $0x2
f0109dc4:	e8 a6 3c 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f0109dc9:	83 c4 10             	add    $0x10,%esp
f0109dcc:	85 c0                	test   %eax,%eax
f0109dce:	0f 84 c8 03 00 00    	je     f010a19c <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd7:	8b 48 78             	mov    0x78(%eax),%ecx
f0109dda:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ddd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109de3:	89 d0                	mov    %edx,%eax
f0109de5:	01 c0                	add    %eax,%eax
f0109de7:	01 d0                	add    %edx,%eax
f0109de9:	c1 e0 03             	shl    $0x3,%eax
f0109dec:	01 c8                	add    %ecx,%eax
f0109dee:	85 c0                	test   %eax,%eax
f0109df0:	75 17                	jne    f0109e09 <program_segment_alloc_map_copy_workingset+0x17f>
f0109df2:	83 ec 04             	sub    $0x4,%esp
f0109df5:	68 9e 61 13 f0       	push   $0xf013619e
f0109dfa:	68 7d 02 00 00       	push   $0x27d
f0109dff:	68 81 61 13 f0       	push   $0xf0136181
f0109e04:	e8 f2 63 ff ff       	call   f01001fb <_panic>
f0109e09:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0c:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e12:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e18:	89 d0                	mov    %edx,%eax
f0109e1a:	01 c0                	add    %eax,%eax
f0109e1c:	01 d0                	add    %edx,%eax
f0109e1e:	c1 e0 03             	shl    $0x3,%eax
f0109e21:	01 c8                	add    %ecx,%eax
f0109e23:	8b 40 10             	mov    0x10(%eax),%eax
f0109e26:	85 c0                	test   %eax,%eax
f0109e28:	74 3f                	je     f0109e69 <program_segment_alloc_map_copy_workingset+0x1df>
f0109e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e33:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e39:	89 d0                	mov    %edx,%eax
f0109e3b:	01 c0                	add    %eax,%eax
f0109e3d:	01 d0                	add    %edx,%eax
f0109e3f:	c1 e0 03             	shl    $0x3,%eax
f0109e42:	01 c8                	add    %ecx,%eax
f0109e44:	8b 50 10             	mov    0x10(%eax),%edx
f0109e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e50:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109e56:	89 c8                	mov    %ecx,%eax
f0109e58:	01 c0                	add    %eax,%eax
f0109e5a:	01 c8                	add    %ecx,%eax
f0109e5c:	c1 e0 03             	shl    $0x3,%eax
f0109e5f:	01 d8                	add    %ebx,%eax
f0109e61:	8b 40 14             	mov    0x14(%eax),%eax
f0109e64:	89 42 14             	mov    %eax,0x14(%edx)
f0109e67:	eb 26                	jmp    f0109e8f <program_segment_alloc_map_copy_workingset+0x205>
f0109e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e6c:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e72:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e78:	89 d0                	mov    %edx,%eax
f0109e7a:	01 c0                	add    %eax,%eax
f0109e7c:	01 d0                	add    %edx,%eax
f0109e7e:	c1 e0 03             	shl    $0x3,%eax
f0109e81:	01 c8                	add    %ecx,%eax
f0109e83:	8b 50 14             	mov    0x14(%eax),%edx
f0109e86:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e89:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f0109e8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e92:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e98:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e9e:	89 d0                	mov    %edx,%eax
f0109ea0:	01 c0                	add    %eax,%eax
f0109ea2:	01 d0                	add    %edx,%eax
f0109ea4:	c1 e0 03             	shl    $0x3,%eax
f0109ea7:	01 c8                	add    %ecx,%eax
f0109ea9:	8b 40 14             	mov    0x14(%eax),%eax
f0109eac:	85 c0                	test   %eax,%eax
f0109eae:	74 3f                	je     f0109eef <program_segment_alloc_map_copy_workingset+0x265>
f0109eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb3:	8b 48 78             	mov    0x78(%eax),%ecx
f0109eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ebf:	89 d0                	mov    %edx,%eax
f0109ec1:	01 c0                	add    %eax,%eax
f0109ec3:	01 d0                	add    %edx,%eax
f0109ec5:	c1 e0 03             	shl    $0x3,%eax
f0109ec8:	01 c8                	add    %ecx,%eax
f0109eca:	8b 50 14             	mov    0x14(%eax),%edx
f0109ecd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed0:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ed3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109edc:	89 c8                	mov    %ecx,%eax
f0109ede:	01 c0                	add    %eax,%eax
f0109ee0:	01 c8                	add    %ecx,%eax
f0109ee2:	c1 e0 03             	shl    $0x3,%eax
f0109ee5:	01 d8                	add    %ebx,%eax
f0109ee7:	8b 40 10             	mov    0x10(%eax),%eax
f0109eea:	89 42 10             	mov    %eax,0x10(%edx)
f0109eed:	eb 26                	jmp    f0109f15 <program_segment_alloc_map_copy_workingset+0x28b>
f0109eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef2:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ef5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109efe:	89 d0                	mov    %edx,%eax
f0109f00:	01 c0                	add    %eax,%eax
f0109f02:	01 d0                	add    %edx,%eax
f0109f04:	c1 e0 03             	shl    $0x3,%eax
f0109f07:	01 c8                	add    %ecx,%eax
f0109f09:	8b 50 10             	mov    0x10(%eax),%edx
f0109f0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f0f:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f0109f15:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f18:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f1e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f24:	89 d0                	mov    %edx,%eax
f0109f26:	01 c0                	add    %eax,%eax
f0109f28:	01 d0                	add    %edx,%eax
f0109f2a:	c1 e0 03             	shl    $0x3,%eax
f0109f2d:	01 c8                	add    %ecx,%eax
f0109f2f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109f36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f39:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f45:	89 d0                	mov    %edx,%eax
f0109f47:	01 c0                	add    %eax,%eax
f0109f49:	01 d0                	add    %edx,%eax
f0109f4b:	c1 e0 03             	shl    $0x3,%eax
f0109f4e:	01 c8                	add    %ecx,%eax
f0109f50:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109f57:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f5a:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f0109f60:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109f63:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f66:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f6f:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f78:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109f7e:	48                   	dec    %eax
f0109f7f:	39 c2                	cmp    %eax,%edx
f0109f81:	0f 83 0d 01 00 00    	jae    f010a094 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109f87:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f8a:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f90:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f96:	89 d0                	mov    %edx,%eax
f0109f98:	01 c0                	add    %eax,%eax
f0109f9a:	01 d0                	add    %edx,%eax
f0109f9c:	c1 e0 03             	shl    $0x3,%eax
f0109f9f:	01 c8                	add    %ecx,%eax
f0109fa1:	85 c0                	test   %eax,%eax
f0109fa3:	75 17                	jne    f0109fbc <program_segment_alloc_map_copy_workingset+0x332>
f0109fa5:	83 ec 04             	sub    $0x4,%esp
f0109fa8:	68 bc 61 13 f0       	push   $0xf01361bc
f0109fad:	68 81 02 00 00       	push   $0x281
f0109fb2:	68 81 61 13 f0       	push   $0xf0136181
f0109fb7:	e8 3f 62 ff ff       	call   f01001fb <_panic>
f0109fbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fbf:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fcb:	89 d0                	mov    %edx,%eax
f0109fcd:	01 c0                	add    %eax,%eax
f0109fcf:	01 d0                	add    %edx,%eax
f0109fd1:	c1 e0 03             	shl    $0x3,%eax
f0109fd4:	01 c8                	add    %ecx,%eax
f0109fd6:	8b 55 08             	mov    0x8(%ebp),%edx
f0109fd9:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109fdf:	89 50 10             	mov    %edx,0x10(%eax)
f0109fe2:	8b 40 10             	mov    0x10(%eax),%eax
f0109fe5:	85 c0                	test   %eax,%eax
f0109fe7:	74 28                	je     f010a011 <program_segment_alloc_map_copy_workingset+0x387>
f0109fe9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fec:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109ff2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff5:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ff8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ffb:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a001:	89 c8                	mov    %ecx,%eax
f010a003:	01 c0                	add    %eax,%eax
f010a005:	01 c8                	add    %ecx,%eax
f010a007:	c1 e0 03             	shl    $0x3,%eax
f010a00a:	01 d8                	add    %ebx,%eax
f010a00c:	89 42 14             	mov    %eax,0x14(%edx)
f010a00f:	eb 24                	jmp    f010a035 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a011:	8b 45 08             	mov    0x8(%ebp),%eax
f010a014:	8b 48 78             	mov    0x78(%eax),%ecx
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a020:	89 d0                	mov    %edx,%eax
f010a022:	01 c0                	add    %eax,%eax
f010a024:	01 d0                	add    %edx,%eax
f010a026:	c1 e0 03             	shl    $0x3,%eax
f010a029:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a02c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02f:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a035:	8b 45 08             	mov    0x8(%ebp),%eax
f010a038:	8b 48 78             	mov    0x78(%eax),%ecx
f010a03b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a03e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a044:	89 d0                	mov    %edx,%eax
f010a046:	01 c0                	add    %eax,%eax
f010a048:	01 d0                	add    %edx,%eax
f010a04a:	c1 e0 03             	shl    $0x3,%eax
f010a04d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a050:	8b 45 08             	mov    0x8(%ebp),%eax
f010a053:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a059:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a05f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a062:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a068:	89 d0                	mov    %edx,%eax
f010a06a:	01 c0                	add    %eax,%eax
f010a06c:	01 d0                	add    %edx,%eax
f010a06e:	c1 e0 03             	shl    $0x3,%eax
f010a071:	01 c8                	add    %ecx,%eax
f010a073:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a07a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07d:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a083:	8d 50 01             	lea    0x1(%eax),%edx
f010a086:	8b 45 08             	mov    0x8(%ebp),%eax
f010a089:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a08f:	e9 08 01 00 00       	jmp    f010a19c <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a094:	8b 45 08             	mov    0x8(%ebp),%eax
f010a097:	8b 48 78             	mov    0x78(%eax),%ecx
f010a09a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a09d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0a3:	89 d0                	mov    %edx,%eax
f010a0a5:	01 c0                	add    %eax,%eax
f010a0a7:	01 d0                	add    %edx,%eax
f010a0a9:	c1 e0 03             	shl    $0x3,%eax
f010a0ac:	01 c8                	add    %ecx,%eax
f010a0ae:	85 c0                	test   %eax,%eax
f010a0b0:	75 17                	jne    f010a0c9 <program_segment_alloc_map_copy_workingset+0x43f>
f010a0b2:	83 ec 04             	sub    $0x4,%esp
f010a0b5:	68 bc 61 13 f0       	push   $0xf01361bc
f010a0ba:	68 86 02 00 00       	push   $0x286
f010a0bf:	68 81 61 13 f0       	push   $0xf0136181
f010a0c4:	e8 32 61 ff ff       	call   f01001fb <_panic>
f010a0c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0cc:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0d8:	89 d0                	mov    %edx,%eax
f010a0da:	01 c0                	add    %eax,%eax
f010a0dc:	01 d0                	add    %edx,%eax
f010a0de:	c1 e0 03             	shl    $0x3,%eax
f010a0e1:	01 c8                	add    %ecx,%eax
f010a0e3:	8b 55 08             	mov    0x8(%ebp),%edx
f010a0e6:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a0ec:	89 50 10             	mov    %edx,0x10(%eax)
f010a0ef:	8b 40 10             	mov    0x10(%eax),%eax
f010a0f2:	85 c0                	test   %eax,%eax
f010a0f4:	74 28                	je     f010a11e <program_segment_alloc_map_copy_workingset+0x494>
f010a0f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f9:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a0ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a102:	8b 58 78             	mov    0x78(%eax),%ebx
f010a105:	8b 45 08             	mov    0x8(%ebp),%eax
f010a108:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a10e:	89 c8                	mov    %ecx,%eax
f010a110:	01 c0                	add    %eax,%eax
f010a112:	01 c8                	add    %ecx,%eax
f010a114:	c1 e0 03             	shl    $0x3,%eax
f010a117:	01 d8                	add    %ebx,%eax
f010a119:	89 42 14             	mov    %eax,0x14(%edx)
f010a11c:	eb 24                	jmp    f010a142 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a11e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a121:	8b 48 78             	mov    0x78(%eax),%ecx
f010a124:	8b 45 08             	mov    0x8(%ebp),%eax
f010a127:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a12d:	89 d0                	mov    %edx,%eax
f010a12f:	01 c0                	add    %eax,%eax
f010a131:	01 d0                	add    %edx,%eax
f010a133:	c1 e0 03             	shl    $0x3,%eax
f010a136:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a139:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13c:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a142:	8b 45 08             	mov    0x8(%ebp),%eax
f010a145:	8b 48 78             	mov    0x78(%eax),%ecx
f010a148:	8b 45 08             	mov    0x8(%ebp),%eax
f010a14b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a151:	89 d0                	mov    %edx,%eax
f010a153:	01 c0                	add    %eax,%eax
f010a155:	01 d0                	add    %edx,%eax
f010a157:	c1 e0 03             	shl    $0x3,%eax
f010a15a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a15d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a160:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a166:	8b 45 08             	mov    0x8(%ebp),%eax
f010a169:	8b 48 78             	mov    0x78(%eax),%ecx
f010a16c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a16f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a175:	89 d0                	mov    %edx,%eax
f010a177:	01 c0                	add    %eax,%eax
f010a179:	01 d0                	add    %edx,%eax
f010a17b:	c1 e0 03             	shl    $0x3,%eax
f010a17e:	01 c8                	add    %ecx,%eax
f010a180:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a187:	8b 45 08             	mov    0x8(%ebp),%eax
f010a18a:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a190:	8d 50 01             	lea    0x1(%eax),%edx
f010a193:	8b 45 08             	mov    0x8(%ebp),%eax
f010a196:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a19c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a1a5:	8d 50 01             	lea    0x1(%eax),%edx
f010a1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ab:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a1b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b4:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a1ba:	8b 55 08             	mov    0x8(%ebp),%edx
f010a1bd:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a1c0:	ba 00 00 00 00       	mov    $0x0,%edx
f010a1c5:	f7 f1                	div    %ecx
f010a1c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ca:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a1d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1d3:	c1 e8 16             	shr    $0x16,%eax
f010a1d6:	89 c2                	mov    %eax,%edx
f010a1d8:	8b 45 18             	mov    0x18(%ebp),%eax
f010a1db:	8b 00                	mov    (%eax),%eax
f010a1dd:	39 c2                	cmp    %eax,%edx
f010a1df:	0f 84 cf 00 00 00    	je     f010a2b4 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a1e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1e8:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a1ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a1f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a1f7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a1fc:	89 c1                	mov    %eax,%ecx
f010a1fe:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a201:	89 d0                	mov    %edx,%eax
f010a203:	01 c0                	add    %eax,%eax
f010a205:	01 d0                	add    %edx,%eax
f010a207:	c1 e0 03             	shl    $0x3,%eax
f010a20a:	01 d8                	add    %ebx,%eax
f010a20c:	83 c0 7c             	add    $0x7c,%eax
f010a20f:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a211:	8b 45 08             	mov    0x8(%ebp),%eax
f010a214:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a21a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a21d:	89 d0                	mov    %edx,%eax
f010a21f:	01 c0                	add    %eax,%eax
f010a221:	01 d0                	add    %edx,%eax
f010a223:	c1 e0 03             	shl    $0x3,%eax
f010a226:	01 c8                	add    %ecx,%eax
f010a228:	83 e8 80             	sub    $0xffffff80,%eax
f010a22b:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a22e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a231:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a237:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a23a:	89 d0                	mov    %edx,%eax
f010a23c:	01 c0                	add    %eax,%eax
f010a23e:	01 d0                	add    %edx,%eax
f010a240:	c1 e0 03             	shl    $0x3,%eax
f010a243:	01 c8                	add    %ecx,%eax
f010a245:	05 84 00 00 00       	add    $0x84,%eax
f010a24a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a250:	8b 45 08             	mov    0x8(%ebp),%eax
f010a253:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a259:	8d 50 01             	lea    0x1(%eax),%edx
f010a25c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25f:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a265:	8b 45 08             	mov    0x8(%ebp),%eax
f010a268:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a26e:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a273:	ba 00 00 00 00       	mov    $0x0,%edx
f010a278:	f7 f1                	div    %ecx
f010a27a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27d:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a283:	8b 45 08             	mov    0x8(%ebp),%eax
f010a286:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a28c:	85 c0                	test   %eax,%eax
f010a28e:	75 17                	jne    f010a2a7 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a290:	83 ec 04             	sub    $0x4,%esp
f010a293:	68 80 62 13 f0       	push   $0xf0136280
f010a298:	68 96 02 00 00       	push   $0x296
f010a29d:	68 81 61 13 f0       	push   $0xf0136181
f010a2a2:	e8 54 5f ff ff       	call   f01001fb <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a2a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2aa:	c1 e8 16             	shr    $0x16,%eax
f010a2ad:	89 c2                	mov    %eax,%edx
f010a2af:	8b 45 18             	mov    0x18(%ebp),%eax
f010a2b2:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a2b4:	8b 45 10             	mov    0x10(%ebp),%eax
f010a2b7:	8b 00                	mov    (%eax),%eax
f010a2b9:	8d 50 01             	lea    0x1(%eax),%edx
f010a2bc:	8b 45 10             	mov    0x10(%ebp),%eax
f010a2bf:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a2c1:	ff 45 f0             	incl   -0x10(%ebp)
f010a2c4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a2cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2ce:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a2d1:	73 0c                	jae    f010a2df <program_segment_alloc_map_copy_workingset+0x655>
f010a2d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a2d6:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a2d9:	0f 82 5a fa ff ff    	jb     f0109d39 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a2df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2e2:	8b 00                	mov    (%eax),%eax
f010a2e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a2e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2ea:	8b 40 0c             	mov    0xc(%eax),%eax
f010a2ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a2f0:	eb 10                	jmp    f010a302 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a2f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a2f5:	8a 10                	mov    (%eax),%dl
f010a2f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a2fa:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a2fc:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a2ff:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a302:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a305:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a308:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a30b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a310:	89 c2                	mov    %eax,%edx
f010a312:	8b 45 10             	mov    0x10(%ebp),%eax
f010a315:	8b 00                	mov    (%eax),%eax
f010a317:	c1 e0 0c             	shl    $0xc,%eax
f010a31a:	01 c2                	add    %eax,%edx
f010a31c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a31f:	39 c2                	cmp    %eax,%edx
f010a321:	76 1d                	jbe    f010a340 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a323:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a326:	8b 50 04             	mov    0x4(%eax),%edx
f010a329:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a32c:	01 c2                	add    %eax,%edx
f010a32e:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a331:	39 c2                	cmp    %eax,%edx
f010a333:	77 bd                	ja     f010a2f2 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a335:	eb 09                	jmp    f010a340 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a337:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a33a:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a33d:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a340:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a343:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a346:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a349:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a34e:	89 c2                	mov    %eax,%edx
f010a350:	8b 45 10             	mov    0x10(%ebp),%eax
f010a353:	8b 00                	mov    (%eax),%eax
f010a355:	c1 e0 0c             	shl    $0xc,%eax
f010a358:	01 c2                	add    %eax,%edx
f010a35a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a35d:	39 c2                	cmp    %eax,%edx
f010a35f:	77 d6                	ja     f010a337 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a361:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a366:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a369:	c9                   	leave  
f010a36a:	c3                   	ret    

f010a36b <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a36b:	55                   	push   %ebp
f010a36c:	89 e5                	mov    %esp,%ebp
f010a36e:	53                   	push   %ebx
f010a36f:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a372:	8b 45 08             	mov    0x8(%ebp),%eax
f010a375:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a378:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a37b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a37e:	8b 55 10             	mov    0x10(%ebp),%edx
f010a381:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a384:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a38b:	eb 17                	jmp    f010a3a4 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a38d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a390:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a393:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a396:	c1 e2 02             	shl    $0x2,%edx
f010a399:	01 d0                	add    %edx,%eax
f010a39b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a3a1:	ff 45 f4             	incl   -0xc(%ebp)
f010a3a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3a7:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a3ac:	76 df                	jbe    f010a38d <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a3ae:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a3b5:	eb 22                	jmp    f010a3d9 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a3b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ba:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a3bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3c0:	c1 e2 02             	shl    $0x2,%edx
f010a3c3:	01 c2                	add    %eax,%edx
f010a3c5:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f010a3ca:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a3cd:	c1 e1 02             	shl    $0x2,%ecx
f010a3d0:	01 c8                	add    %ecx,%eax
f010a3d2:	8b 00                	mov    (%eax),%eax
f010a3d4:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a3d6:	ff 45 f4             	incl   -0xc(%ebp)
f010a3d9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a3e0:	7e d5                	jle    f010a3b7 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a3e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3e5:	8b 40 74             	mov    0x74(%eax),%eax
f010a3e8:	83 ec 08             	sub    $0x8,%esp
f010a3eb:	50                   	push   %eax
f010a3ec:	ff 75 08             	pushl  0x8(%ebp)
f010a3ef:	e8 5c f8 ff ff       	call   f0109c50 <create_user_page_WS>
f010a3f4:	83 c4 10             	add    $0x10,%esp
f010a3f7:	89 c2                	mov    %eax,%edx
f010a3f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3fc:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a3ff:	83 ec 0c             	sub    $0xc,%esp
f010a402:	ff 75 08             	pushl  0x8(%ebp)
f010a405:	e8 f3 04 00 00       	call   f010a8fd <share_pws_at_user_space>
f010a40a:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a40d:	83 ec 0c             	sub    $0xc,%esp
f010a410:	6a 02                	push   $0x2
f010a412:	e8 58 36 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f010a417:	83 c4 10             	add    $0x10,%esp
f010a41a:	85 c0                	test   %eax,%eax
f010a41c:	0f 84 04 01 00 00    	je     f010a526 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a422:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a429:	e9 e7 00 00 00       	jmp    f010a515 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a42e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a431:	8b 48 78             	mov    0x78(%eax),%ecx
f010a434:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a437:	89 d0                	mov    %edx,%eax
f010a439:	01 c0                	add    %eax,%eax
f010a43b:	01 d0                	add    %edx,%eax
f010a43d:	c1 e0 03             	shl    $0x3,%eax
f010a440:	01 c8                	add    %ecx,%eax
f010a442:	85 c0                	test   %eax,%eax
f010a444:	75 17                	jne    f010a45d <initialize_environment+0xf2>
f010a446:	83 ec 04             	sub    $0x4,%esp
f010a449:	68 bc 61 13 f0       	push   $0xf01361bc
f010a44e:	68 f4 02 00 00       	push   $0x2f4
f010a453:	68 81 61 13 f0       	push   $0xf0136181
f010a458:	e8 9e 5d ff ff       	call   f01001fb <_panic>
f010a45d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a460:	8b 48 78             	mov    0x78(%eax),%ecx
f010a463:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a466:	89 d0                	mov    %edx,%eax
f010a468:	01 c0                	add    %eax,%eax
f010a46a:	01 d0                	add    %edx,%eax
f010a46c:	c1 e0 03             	shl    $0x3,%eax
f010a46f:	01 c8                	add    %ecx,%eax
f010a471:	8b 55 08             	mov    0x8(%ebp),%edx
f010a474:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a47a:	89 50 10             	mov    %edx,0x10(%eax)
f010a47d:	8b 40 10             	mov    0x10(%eax),%eax
f010a480:	85 c0                	test   %eax,%eax
f010a482:	74 22                	je     f010a4a6 <initialize_environment+0x13b>
f010a484:	8b 45 08             	mov    0x8(%ebp),%eax
f010a487:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a48d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a490:	8b 58 78             	mov    0x78(%eax),%ebx
f010a493:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a496:	89 c8                	mov    %ecx,%eax
f010a498:	01 c0                	add    %eax,%eax
f010a49a:	01 c8                	add    %ecx,%eax
f010a49c:	c1 e0 03             	shl    $0x3,%eax
f010a49f:	01 d8                	add    %ebx,%eax
f010a4a1:	89 42 14             	mov    %eax,0x14(%edx)
f010a4a4:	eb 1e                	jmp    f010a4c4 <initialize_environment+0x159>
f010a4a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4af:	89 d0                	mov    %edx,%eax
f010a4b1:	01 c0                	add    %eax,%eax
f010a4b3:	01 d0                	add    %edx,%eax
f010a4b5:	c1 e0 03             	shl    $0x3,%eax
f010a4b8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a4bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4be:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a4c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4cd:	89 d0                	mov    %edx,%eax
f010a4cf:	01 c0                	add    %eax,%eax
f010a4d1:	01 d0                	add    %edx,%eax
f010a4d3:	c1 e0 03             	shl    $0x3,%eax
f010a4d6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a4d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4dc:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a4e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4eb:	89 d0                	mov    %edx,%eax
f010a4ed:	01 c0                	add    %eax,%eax
f010a4ef:	01 d0                	add    %edx,%eax
f010a4f1:	c1 e0 03             	shl    $0x3,%eax
f010a4f4:	01 c8                	add    %ecx,%eax
f010a4f6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a4fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a500:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a506:	8d 50 01             	lea    0x1(%eax),%edx
f010a509:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50c:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a512:	ff 45 f0             	incl   -0x10(%ebp)
f010a515:	8b 45 08             	mov    0x8(%ebp),%eax
f010a518:	8b 50 74             	mov    0x74(%eax),%edx
f010a51b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a51e:	39 c2                	cmp    %eax,%edx
f010a520:	0f 87 08 ff ff ff    	ja     f010a42e <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a526:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a52d:	eb 50                	jmp    f010a57f <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a52f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a532:	8b 48 78             	mov    0x78(%eax),%ecx
f010a535:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a538:	89 d0                	mov    %edx,%eax
f010a53a:	01 c0                	add    %eax,%eax
f010a53c:	01 d0                	add    %edx,%eax
f010a53e:	c1 e0 03             	shl    $0x3,%eax
f010a541:	01 c8                	add    %ecx,%eax
f010a543:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a549:	8b 45 08             	mov    0x8(%ebp),%eax
f010a54c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a54f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a552:	89 d0                	mov    %edx,%eax
f010a554:	01 c0                	add    %eax,%eax
f010a556:	01 d0                	add    %edx,%eax
f010a558:	c1 e0 03             	shl    $0x3,%eax
f010a55b:	01 c8                	add    %ecx,%eax
f010a55d:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a561:	8b 45 08             	mov    0x8(%ebp),%eax
f010a564:	8b 48 78             	mov    0x78(%eax),%ecx
f010a567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a56a:	89 d0                	mov    %edx,%eax
f010a56c:	01 c0                	add    %eax,%eax
f010a56e:	01 d0                	add    %edx,%eax
f010a570:	c1 e0 03             	shl    $0x3,%eax
f010a573:	01 c8                	add    %ecx,%eax
f010a575:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a57c:	ff 45 f4             	incl   -0xc(%ebp)
f010a57f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a582:	8b 50 74             	mov    0x74(%eax),%edx
f010a585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a588:	39 c2                	cmp    %eax,%edx
f010a58a:	77 a3                	ja     f010a52f <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a58c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a58f:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a596:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a599:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a5a0:	eb 50                	jmp    f010a5f2 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a5a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a5a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5a8:	89 d0                	mov    %edx,%eax
f010a5aa:	01 c0                	add    %eax,%eax
f010a5ac:	01 d0                	add    %edx,%eax
f010a5ae:	c1 e0 03             	shl    $0x3,%eax
f010a5b1:	01 c8                	add    %ecx,%eax
f010a5b3:	83 c0 7c             	add    $0x7c,%eax
f010a5b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a5bc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a5bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5c2:	89 d0                	mov    %edx,%eax
f010a5c4:	01 c0                	add    %eax,%eax
f010a5c6:	01 d0                	add    %edx,%eax
f010a5c8:	c1 e0 03             	shl    $0x3,%eax
f010a5cb:	01 c8                	add    %ecx,%eax
f010a5cd:	83 e8 80             	sub    $0xffffff80,%eax
f010a5d0:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a5d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a5d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5d9:	89 d0                	mov    %edx,%eax
f010a5db:	01 c0                	add    %eax,%eax
f010a5dd:	01 d0                	add    %edx,%eax
f010a5df:	c1 e0 03             	shl    $0x3,%eax
f010a5e2:	01 c8                	add    %ecx,%eax
f010a5e4:	05 84 00 00 00       	add    $0x84,%eax
f010a5e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a5ef:	ff 45 f4             	incl   -0xc(%ebp)
f010a5f2:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a5f6:	7e aa                	jle    f010a5a2 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a5f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fb:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a602:	00 00 00 

	e->pageFaultsCounter=0;
f010a605:	8b 45 08             	mov    0x8(%ebp),%eax
f010a608:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a60f:	00 00 00 
	e->tableFaultsCounter=0;
f010a612:	8b 45 08             	mov    0x8(%ebp),%eax
f010a615:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a61c:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a61f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a622:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a629:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a62c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a62f:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a636:	00 00 00 

	e->nModifiedPages=0;
f010a639:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63c:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a643:	00 00 00 
	e->nNotModifiedPages=0;
f010a646:	8b 45 08             	mov    0x8(%ebp),%eax
f010a649:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a650:	00 00 00 
	e->nClocks = 0;
f010a653:	8b 45 08             	mov    0x8(%ebp),%eax
f010a656:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a65d:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a660:	8b 45 08             	mov    0x8(%ebp),%eax
f010a663:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a66a:	00 00 00 
	e->nPageOut = 0;
f010a66d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a670:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a677:	00 00 00 
	e->nNewPageAdded = 0;
f010a67a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a67d:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a684:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a687:	83 ec 0c             	sub    $0xc,%esp
f010a68a:	ff 75 08             	pushl  0x8(%ebp)
f010a68d:	e8 09 00 00 00       	call   f010a69b <complete_environment_initialization>
f010a692:	83 c4 10             	add    $0x10,%esp
}
f010a695:	90                   	nop
f010a696:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a699:	c9                   	leave  
f010a69a:	c3                   	ret    

f010a69b <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a69b:	55                   	push   %ebp
f010a69c:	89 e5                	mov    %esp,%ebp
f010a69e:	53                   	push   %ebx
f010a69f:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a6a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a6a8:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a6ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b1:	8b 40 60             	mov    0x60(%eax),%eax
f010a6b4:	83 c8 03             	or     $0x3,%eax
f010a6b7:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a6b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6bc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a6bf:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a6c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c8:	8b 40 60             	mov    0x60(%eax),%eax
f010a6cb:	83 c8 05             	or     $0x5,%eax
f010a6ce:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a6da:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6dd:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a6e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e7:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a6ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f1:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a6f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fb:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a6fe:	83 ec 0c             	sub    $0xc,%esp
f010a701:	68 b1 02 00 00       	push   $0x2b1
f010a706:	e8 94 52 02 00       	call   f012f99f <log2_ceil>
f010a70b:	83 c4 10             	add    $0x10,%esp
f010a70e:	ba 01 00 00 00       	mov    $0x1,%edx
f010a713:	88 c1                	mov    %al,%cl
f010a715:	d3 e2                	shl    %cl,%edx
f010a717:	89 d0                	mov    %edx,%eax
f010a719:	01 d8                	add    %ebx,%eax
f010a71b:	89 c3                	mov    %eax,%ebx
f010a71d:	83 ec 0c             	sub    $0xc,%esp
f010a720:	68 b1 02 00 00       	push   $0x2b1
f010a725:	e8 40 52 02 00       	call   f012f96a <nearest_pow2_ceil>
f010a72a:	83 c4 10             	add    $0x10,%esp
f010a72d:	f7 d8                	neg    %eax
f010a72f:	21 d8                	and    %ebx,%eax
f010a731:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a734:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a738:	7f 1e                	jg     f010a758 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a73a:	83 ec 0c             	sub    $0xc,%esp
f010a73d:	68 b1 02 00 00       	push   $0x2b1
f010a742:	e8 58 52 02 00       	call   f012f99f <log2_ceil>
f010a747:	83 c4 10             	add    $0x10,%esp
f010a74a:	ba 01 00 00 00       	mov    $0x1,%edx
f010a74f:	88 c1                	mov    %al,%cl
f010a751:	d3 e2                	shl    %cl,%edx
f010a753:	89 d0                	mov    %edx,%eax
f010a755:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 15 10 72 65 f0    	mov    0xf0657210,%edx
f010a761:	29 d0                	sub    %edx,%eax
f010a763:	c1 f8 04             	sar    $0x4,%eax
f010a766:	89 c2                	mov    %eax,%edx
f010a768:	89 d0                	mov    %edx,%eax
f010a76a:	c1 e0 03             	shl    $0x3,%eax
f010a76d:	01 d0                	add    %edx,%eax
f010a76f:	01 c0                	add    %eax,%eax
f010a771:	01 d0                	add    %edx,%eax
f010a773:	c1 e0 03             	shl    $0x3,%eax
f010a776:	01 d0                	add    %edx,%eax
f010a778:	89 c1                	mov    %eax,%ecx
f010a77a:	c1 e1 08             	shl    $0x8,%ecx
f010a77d:	01 c8                	add    %ecx,%eax
f010a77f:	01 c0                	add    %eax,%eax
f010a781:	01 d0                	add    %edx,%eax
f010a783:	01 c0                	add    %eax,%eax
f010a785:	01 d0                	add    %edx,%eax
f010a787:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a78e:	01 d0                	add    %edx,%eax
f010a790:	89 c2                	mov    %eax,%edx
f010a792:	c1 e2 09             	shl    $0x9,%edx
f010a795:	29 c2                	sub    %eax,%edx
f010a797:	89 d0                	mov    %edx,%eax
f010a799:	f7 d8                	neg    %eax
f010a79b:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a79e:	89 c2                	mov    %eax,%edx
f010a7a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a3:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a7a6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a7ab:	85 c0                	test   %eax,%eax
f010a7ad:	75 0c                	jne    f010a7bb <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a7af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b2:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a7b9:	eb 0e                	jmp    f010a7c9 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a7bb:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a7c0:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a7c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c6:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a7c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cc:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a7d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d6:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a7dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7e0:	83 ec 04             	sub    $0x4,%esp
f010a7e3:	6a 44                	push   $0x44
f010a7e5:	6a 00                	push   $0x0
f010a7e7:	50                   	push   %eax
f010a7e8:	e8 f9 65 02 00       	call   f0130de6 <memset>
f010a7ed:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a7f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f3:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a802:	8b 45 08             	mov    0x8(%ebp),%eax
f010a805:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a80b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a80e:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a815:	8b 45 08             	mov    0x8(%ebp),%eax
f010a818:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a81e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a821:	8b 40 38             	mov    0x38(%eax),%eax
f010a824:	80 cc 02             	or     $0x2,%ah
f010a827:	89 c2                	mov    %eax,%edx
f010a829:	8b 45 08             	mov    0x8(%ebp),%eax
f010a82c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a82f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a833:	75 17                	jne    f010a84c <complete_environment_initialization+0x1b1>
f010a835:	83 ec 04             	sub    $0x4,%esp
f010a838:	68 9e 61 13 f0       	push   $0xf013619e
f010a83d:	68 58 03 00 00       	push   $0x358
f010a842:	68 81 61 13 f0       	push   $0xf0136181
f010a847:	e8 af 59 ff ff       	call   f01001fb <_panic>
f010a84c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84f:	8b 40 44             	mov    0x44(%eax),%eax
f010a852:	85 c0                	test   %eax,%eax
f010a854:	74 11                	je     f010a867 <complete_environment_initialization+0x1cc>
f010a856:	8b 45 08             	mov    0x8(%ebp),%eax
f010a859:	8b 40 44             	mov    0x44(%eax),%eax
f010a85c:	8b 55 08             	mov    0x8(%ebp),%edx
f010a85f:	8b 52 48             	mov    0x48(%edx),%edx
f010a862:	89 50 48             	mov    %edx,0x48(%eax)
f010a865:	eb 0b                	jmp    f010a872 <complete_environment_initialization+0x1d7>
f010a867:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86a:	8b 40 48             	mov    0x48(%eax),%eax
f010a86d:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f010a872:	8b 45 08             	mov    0x8(%ebp),%eax
f010a875:	8b 40 48             	mov    0x48(%eax),%eax
f010a878:	85 c0                	test   %eax,%eax
f010a87a:	74 11                	je     f010a88d <complete_environment_initialization+0x1f2>
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	8b 40 48             	mov    0x48(%eax),%eax
f010a882:	8b 55 08             	mov    0x8(%ebp),%edx
f010a885:	8b 52 44             	mov    0x44(%edx),%edx
f010a888:	89 50 44             	mov    %edx,0x44(%eax)
f010a88b:	eb 0b                	jmp    f010a898 <complete_environment_initialization+0x1fd>
f010a88d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a890:	8b 40 44             	mov    0x44(%eax),%eax
f010a893:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f010a898:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a8a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a8ac:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f010a8b1:	48                   	dec    %eax
f010a8b2:	a3 24 72 65 f0       	mov    %eax,0xf0657224
	return ;
f010a8b7:	90                   	nop
}
f010a8b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8bb:	c9                   	leave  
f010a8bc:	c3                   	ret    

f010a8bd <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a8bd:	55                   	push   %ebp
f010a8be:	89 e5                	mov    %esp,%ebp
f010a8c0:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a8c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a8c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8cc:	8b 00                	mov    (%eax),%eax
f010a8ce:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a8d3:	74 17                	je     f010a8ec <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a8d5:	83 ec 04             	sub    $0x4,%esp
f010a8d8:	68 23 63 13 f0       	push   $0xf0136323
f010a8dd:	68 64 03 00 00       	push   $0x364
f010a8e2:	68 81 61 13 f0       	push   $0xf0136181
f010a8e7:	e8 0f 59 ff ff       	call   f01001fb <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a8ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8ef:	8b 40 18             	mov    0x18(%eax),%eax
f010a8f2:	89 c2                	mov    %eax,%edx
f010a8f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f7:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a8fa:	90                   	nop
f010a8fb:	c9                   	leave  
f010a8fc:	c3                   	ret    

f010a8fd <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a8fd:	55                   	push   %ebp
f010a8fe:	89 e5                	mov    %esp,%ebp
f010a900:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010a903:	8b 45 08             	mov    0x8(%ebp),%eax
f010a906:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010a90d:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010a910:	8b 45 08             	mov    0x8(%ebp),%eax
f010a913:	8b 40 78             	mov    0x78(%eax),%eax
f010a916:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010a919:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91c:	8b 50 74             	mov    0x74(%eax),%edx
f010a91f:	89 d0                	mov    %edx,%eax
f010a921:	01 c0                	add    %eax,%eax
f010a923:	01 d0                	add    %edx,%eax
f010a925:	c1 e0 03             	shl    $0x3,%eax
f010a928:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010a92b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92e:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a934:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010a937:	8b 45 08             	mov    0x8(%ebp),%eax
f010a93a:	8b 40 78             	mov    0x78(%eax),%eax
f010a93d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a940:	eb 71                	jmp    f010a9b3 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010a942:	83 ec 0c             	sub    $0xc,%esp
f010a945:	ff 75 f4             	pushl  -0xc(%ebp)
f010a948:	e8 c6 d0 ff ff       	call   f0107a13 <kheap_physical_address>
f010a94d:	83 c4 10             	add    $0x10,%esp
f010a950:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010a953:	8b 45 08             	mov    0x8(%ebp),%eax
f010a956:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a959:	83 ec 04             	sub    $0x4,%esp
f010a95c:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010a95f:	52                   	push   %edx
f010a960:	ff 75 f0             	pushl  -0x10(%ebp)
f010a963:	50                   	push   %eax
f010a964:	e8 71 c0 ff ff       	call   f01069da <get_page_table>
f010a969:	83 c4 10             	add    $0x10,%esp
f010a96c:	83 f8 01             	cmp    $0x1,%eax
f010a96f:	75 18                	jne    f010a989 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010a971:	8b 45 08             	mov    0x8(%ebp),%eax
f010a974:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a977:	83 ec 08             	sub    $0x8,%esp
f010a97a:	ff 75 f0             	pushl  -0x10(%ebp)
f010a97d:	50                   	push   %eax
f010a97e:	e8 ad c1 ff ff       	call   f0106b30 <create_page_table>
f010a983:	83 c4 10             	add    $0x10,%esp
f010a986:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010a989:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a98c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a98f:	c1 ea 0c             	shr    $0xc,%edx
f010a992:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a998:	c1 e2 02             	shl    $0x2,%edx
f010a99b:	01 d0                	add    %edx,%eax
f010a99d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a9a0:	83 ca 05             	or     $0x5,%edx
f010a9a3:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010a9a5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a9ac:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010a9b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9b6:	8b 40 78             	mov    0x78(%eax),%eax
f010a9b9:	89 c2                	mov    %eax,%edx
f010a9bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a9be:	01 d0                	add    %edx,%eax
f010a9c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a9c3:	0f 87 79 ff ff ff    	ja     f010a942 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010a9c9:	90                   	nop
f010a9ca:	c9                   	leave  
f010a9cb:	c3                   	ret    

f010a9cc <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010a9cc:	55                   	push   %ebp
f010a9cd:	89 e5                	mov    %esp,%ebp
f010a9cf:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d5:	8b 50 74             	mov    0x74(%eax),%edx
f010a9d8:	89 d0                	mov    %edx,%eax
f010a9da:	01 c0                	add    %eax,%eax
f010a9dc:	01 d0                	add    %edx,%eax
f010a9de:	c1 e0 03             	shl    $0x3,%eax
f010a9e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010a9e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e7:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a9ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010a9f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f3:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a9f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010a9fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9ff:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010aa04:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010aa07:	eb 46                	jmp    f010aa4f <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010aa09:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa0f:	83 ec 04             	sub    $0x4,%esp
f010aa12:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010aa15:	52                   	push   %edx
f010aa16:	ff 75 f4             	pushl  -0xc(%ebp)
f010aa19:	50                   	push   %eax
f010aa1a:	e8 bb bf ff ff       	call   f01069da <get_page_table>
f010aa1f:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010aa22:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aa25:	83 ec 0c             	sub    $0xc,%esp
f010aa28:	50                   	push   %eax
f010aa29:	e8 92 ce ff ff       	call   f01078c0 <kfree>
f010aa2e:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010aa31:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa34:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa3a:	c1 ea 16             	shr    $0x16,%edx
f010aa3d:	c1 e2 02             	shl    $0x2,%edx
f010aa40:	01 d0                	add    %edx,%eax
f010aa42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010aa48:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010aa4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa52:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aa58:	89 c2                	mov    %eax,%edx
f010aa5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa5d:	01 d0                	add    %edx,%eax
f010aa5f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aa62:	77 a5                	ja     f010aa09 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aa64:	0f 20 d8             	mov    %cr3,%eax
f010aa67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010aa6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa6d:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010aa70:	90                   	nop
f010aa71:	c9                   	leave  
f010aa72:	c3                   	ret    

f010aa73 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010aa73:	55                   	push   %ebp
f010aa74:	89 e5                	mov    %esp,%ebp
f010aa76:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010aa79:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7c:	8b 40 10             	mov    0x10(%eax),%eax
f010aa7f:	8d 48 01             	lea    0x1(%eax),%ecx
f010aa82:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa85:	89 4a 10             	mov    %ecx,0x10(%edx)
f010aa88:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010aa8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010aa91:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa94:	8b 00                	mov    (%eax),%eax
f010aa96:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aa9b:	74 17                	je     f010aab4 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010aa9d:	83 ec 04             	sub    $0x4,%esp
f010aaa0:	68 23 63 13 f0       	push   $0xf0136323
f010aaa5:	68 ae 03 00 00       	push   $0x3ae
f010aaaa:	68 81 61 13 f0       	push   $0xf0136181
f010aaaf:	e8 47 57 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010aab4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aab7:	8b 50 1c             	mov    0x1c(%eax),%edx
f010aaba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aabd:	01 d0                	add    %edx,%eax
f010aabf:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010aac2:	eb 0f                	jmp    f010aad3 <PROGRAM_SEGMENT_NEXT+0x60>
f010aac4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac7:	8b 40 10             	mov    0x10(%eax),%eax
f010aaca:	8d 50 01             	lea    0x1(%eax),%edx
f010aacd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad0:	89 50 10             	mov    %edx,0x10(%eax)
f010aad3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad6:	8b 40 10             	mov    0x10(%eax),%eax
f010aad9:	c1 e0 05             	shl    $0x5,%eax
f010aadc:	89 c2                	mov    %eax,%edx
f010aade:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aae1:	01 d0                	add    %edx,%eax
f010aae3:	8b 00                	mov    (%eax),%eax
f010aae5:	83 f8 01             	cmp    $0x1,%eax
f010aae8:	74 13                	je     f010aafd <PROGRAM_SEGMENT_NEXT+0x8a>
f010aaea:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaed:	8b 50 10             	mov    0x10(%eax),%edx
f010aaf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aaf3:	8b 40 2c             	mov    0x2c(%eax),%eax
f010aaf6:	0f b7 c0             	movzwl %ax,%eax
f010aaf9:	39 c2                	cmp    %eax,%edx
f010aafb:	72 c7                	jb     f010aac4 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010aafd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab00:	8b 40 10             	mov    0x10(%eax),%eax
f010ab03:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ab06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab09:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ab0c:	0f b7 c0             	movzwl %ax,%eax
f010ab0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ab12:	7e 63                	jle    f010ab77 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ab14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab17:	c1 e0 05             	shl    $0x5,%eax
f010ab1a:	89 c2                	mov    %eax,%edx
f010ab1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab1f:	01 d0                	add    %edx,%eax
f010ab21:	8b 50 04             	mov    0x4(%eax),%edx
f010ab24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab27:	01 c2                	add    %eax,%edx
f010ab29:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab2c:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ab2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab31:	c1 e0 05             	shl    $0x5,%eax
f010ab34:	89 c2                	mov    %eax,%edx
f010ab36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab39:	01 d0                	add    %edx,%eax
f010ab3b:	8b 50 14             	mov    0x14(%eax),%edx
f010ab3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab41:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ab44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab47:	c1 e0 05             	shl    $0x5,%eax
f010ab4a:	89 c2                	mov    %eax,%edx
f010ab4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab4f:	01 d0                	add    %edx,%eax
f010ab51:	8b 50 10             	mov    0x10(%eax),%edx
f010ab54:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab57:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ab5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5d:	c1 e0 05             	shl    $0x5,%eax
f010ab60:	89 c2                	mov    %eax,%edx
f010ab62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab65:	01 d0                	add    %edx,%eax
f010ab67:	8b 40 08             	mov    0x8(%eax),%eax
f010ab6a:	89 c2                	mov    %eax,%edx
f010ab6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab6f:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ab72:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab75:	eb 05                	jmp    f010ab7c <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ab77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ab7c:	c9                   	leave  
f010ab7d:	c3                   	ret    

f010ab7e <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ab7e:	55                   	push   %ebp
f010ab7f:	89 e5                	mov    %esp,%ebp
f010ab81:	57                   	push   %edi
f010ab82:	56                   	push   %esi
f010ab83:	53                   	push   %ebx
f010ab84:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ab87:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab97:	8b 00                	mov    (%eax),%eax
f010ab99:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab9e:	74 17                	je     f010abb7 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010aba0:	83 ec 04             	sub    $0x4,%esp
f010aba3:	68 23 63 13 f0       	push   $0xf0136323
f010aba8:	68 ca 03 00 00       	push   $0x3ca
f010abad:	68 81 61 13 f0       	push   $0xf0136181
f010abb2:	e8 44 56 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010abb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abba:	8b 50 1c             	mov    0x1c(%eax),%edx
f010abbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abc0:	01 d0                	add    %edx,%eax
f010abc2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010abc5:	eb 07                	jmp    f010abce <PROGRAM_SEGMENT_FIRST+0x50>
f010abc7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abca:	40                   	inc    %eax
f010abcb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010abce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abd1:	c1 e0 05             	shl    $0x5,%eax
f010abd4:	89 c2                	mov    %eax,%edx
f010abd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010abd9:	01 d0                	add    %edx,%eax
f010abdb:	8b 00                	mov    (%eax),%eax
f010abdd:	83 f8 01             	cmp    $0x1,%eax
f010abe0:	74 10                	je     f010abf2 <PROGRAM_SEGMENT_FIRST+0x74>
f010abe2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010abe5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abe8:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abeb:	0f b7 c0             	movzwl %ax,%eax
f010abee:	39 c2                	cmp    %eax,%edx
f010abf0:	72 d5                	jb     f010abc7 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010abf2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abf5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010abf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abfb:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abfe:	0f b7 c0             	movzwl %ax,%eax
f010ac01:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ac04:	7e 68                	jle    f010ac6e <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac06:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac09:	c1 e0 05             	shl    $0x5,%eax
f010ac0c:	89 c2                	mov    %eax,%edx
f010ac0e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac11:	01 d0                	add    %edx,%eax
f010ac13:	8b 50 04             	mov    0x4(%eax),%edx
f010ac16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac19:	01 d0                	add    %edx,%eax
f010ac1b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ac1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac21:	c1 e0 05             	shl    $0x5,%eax
f010ac24:	89 c2                	mov    %eax,%edx
f010ac26:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac29:	01 d0                	add    %edx,%eax
f010ac2b:	8b 40 14             	mov    0x14(%eax),%eax
f010ac2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ac31:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac34:	c1 e0 05             	shl    $0x5,%eax
f010ac37:	89 c2                	mov    %eax,%edx
f010ac39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac3c:	01 d0                	add    %edx,%eax
f010ac3e:	8b 40 10             	mov    0x10(%eax),%eax
f010ac41:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ac44:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac47:	c1 e0 05             	shl    $0x5,%eax
f010ac4a:	89 c2                	mov    %eax,%edx
f010ac4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac4f:	01 d0                	add    %edx,%eax
f010ac51:	8b 40 08             	mov    0x8(%eax),%eax
f010ac54:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ac57:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac5a:	89 c3                	mov    %eax,%ebx
f010ac5c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ac5f:	ba 05 00 00 00       	mov    $0x5,%edx
f010ac64:	89 df                	mov    %ebx,%edi
f010ac66:	89 c6                	mov    %eax,%esi
f010ac68:	89 d1                	mov    %edx,%ecx
f010ac6a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ac6c:	eb 1c                	jmp    f010ac8a <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ac6e:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ac75:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac78:	89 c3                	mov    %eax,%ebx
f010ac7a:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ac7d:	ba 05 00 00 00       	mov    $0x5,%edx
f010ac82:	89 df                	mov    %ebx,%edi
f010ac84:	89 c6                	mov    %eax,%esi
f010ac86:	89 d1                	mov    %edx,%ecx
f010ac88:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ac8a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ac90:	5b                   	pop    %ebx
f010ac91:	5e                   	pop    %esi
f010ac92:	5f                   	pop    %edi
f010ac93:	5d                   	pop    %ebp
f010ac94:	c2 04 00             	ret    $0x4

f010ac97 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010ac97:	55                   	push   %ebp
f010ac98:	89 e5                	mov    %esp,%ebp
f010ac9a:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ac9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010aca4:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f010aca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010acac:	e9 c3 00 00 00       	jmp    f010ad74 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010acb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acb4:	8b 40 10             	mov    0x10(%eax),%eax
f010acb7:	3b 45 08             	cmp    0x8(%ebp),%eax
f010acba:	0f 85 ac 00 00 00    	jne    f010ad6c <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010acc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acc3:	8b 50 0c             	mov    0xc(%eax),%edx
f010acc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acc9:	8b 40 10             	mov    0x10(%eax),%eax
f010accc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010accf:	83 ec 08             	sub    $0x8,%esp
f010acd2:	52                   	push   %edx
f010acd3:	50                   	push   %eax
f010acd4:	e8 53 cf ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f010acd9:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010acdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ace0:	75 17                	jne    f010acf9 <cleanup_buffers+0x62>
f010ace2:	83 ec 04             	sub    $0x4,%esp
f010ace5:	68 9e 61 13 f0       	push   $0xf013619e
f010acea:	68 f1 03 00 00       	push   $0x3f1
f010acef:	68 81 61 13 f0       	push   $0xf0136181
f010acf4:	e8 02 55 ff ff       	call   f01001fb <_panic>
f010acf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acfc:	8b 00                	mov    (%eax),%eax
f010acfe:	85 c0                	test   %eax,%eax
f010ad00:	74 10                	je     f010ad12 <cleanup_buffers+0x7b>
f010ad02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad05:	8b 00                	mov    (%eax),%eax
f010ad07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad0a:	8b 52 04             	mov    0x4(%edx),%edx
f010ad0d:	89 50 04             	mov    %edx,0x4(%eax)
f010ad10:	eb 0b                	jmp    f010ad1d <cleanup_buffers+0x86>
f010ad12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad15:	8b 40 04             	mov    0x4(%eax),%eax
f010ad18:	a3 bc 7a 65 f0       	mov    %eax,0xf0657abc
f010ad1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad20:	8b 40 04             	mov    0x4(%eax),%eax
f010ad23:	85 c0                	test   %eax,%eax
f010ad25:	74 0f                	je     f010ad36 <cleanup_buffers+0x9f>
f010ad27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad2a:	8b 40 04             	mov    0x4(%eax),%eax
f010ad2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad30:	8b 12                	mov    (%edx),%edx
f010ad32:	89 10                	mov    %edx,(%eax)
f010ad34:	eb 0a                	jmp    f010ad40 <cleanup_buffers+0xa9>
f010ad36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad39:	8b 00                	mov    (%eax),%eax
f010ad3b:	a3 b8 7a 65 f0       	mov    %eax,0xf0657ab8
f010ad40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ad49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ad53:	a1 c4 7a 65 f0       	mov    0xf0657ac4,%eax
f010ad58:	48                   	dec    %eax
f010ad59:	a3 c4 7a 65 f0       	mov    %eax,0xf0657ac4

			free_frame(ptr_fi);
f010ad5e:	83 ec 0c             	sub    $0xc,%esp
f010ad61:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad64:	e8 c7 bb ff ff       	call   f0106930 <free_frame>
f010ad69:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ad6c:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010ad71:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ad74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad78:	74 07                	je     f010ad81 <cleanup_buffers+0xea>
f010ad7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad7d:	8b 00                	mov    (%eax),%eax
f010ad7f:	eb 05                	jmp    f010ad86 <cleanup_buffers+0xef>
f010ad81:	b8 00 00 00 00       	mov    $0x0,%eax
f010ad86:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f010ad8b:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010ad90:	85 c0                	test   %eax,%eax
f010ad92:	0f 85 19 ff ff ff    	jne    f010acb1 <cleanup_buffers+0x1a>
f010ad98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad9c:	0f 85 0f ff ff ff    	jne    f010acb1 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010ada2:	90                   	nop
f010ada3:	c9                   	leave  
f010ada4:	c3                   	ret    

f010ada5 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010ada5:	55                   	push   %ebp
f010ada6:	89 e5                	mov    %esp,%ebp
f010ada8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010adab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010adaf:	7e 06                	jle    f010adb7 <set_program_priority+0x12>
f010adb1:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010adb5:	7e 14                	jle    f010adcb <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010adb7:	83 ec 04             	sub    $0x4,%esp
f010adba:	68 3c 63 13 f0       	push   $0xf013633c
f010adbf:	6a 10                	push   $0x10
f010adc1:	68 60 63 13 f0       	push   $0xf0136360
f010adc6:	e8 30 54 ff ff       	call   f01001fb <_panic>
		return;
	}
	if(env == NULL)
f010adcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010adcf:	74 75                	je     f010ae46 <set_program_priority+0xa1>
		return;
	switch(priority)
f010add1:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010add5:	77 56                	ja     f010ae2d <set_program_priority+0x88>
f010add7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010adda:	c1 e0 02             	shl    $0x2,%eax
f010addd:	05 9c 63 13 f0       	add    $0xf013639c,%eax
f010ade2:	8b 00                	mov    (%eax),%eax
f010ade4:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010ade6:	83 ec 08             	sub    $0x8,%esp
f010ade9:	6a 01                	push   $0x1
f010adeb:	ff 75 08             	pushl  0x8(%ebp)
f010adee:	e8 b0 d8 ff ff       	call   f01086a3 <half_WS_Size>
f010adf3:	83 c4 10             	add    $0x10,%esp
			break;
f010adf6:	eb 35                	jmp    f010ae2d <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010adf8:	83 ec 08             	sub    $0x8,%esp
f010adfb:	6a 00                	push   $0x0
f010adfd:	ff 75 08             	pushl  0x8(%ebp)
f010ae00:	e8 9e d8 ff ff       	call   f01086a3 <half_WS_Size>
f010ae05:	83 c4 10             	add    $0x10,%esp
			break;
f010ae08:	eb 23                	jmp    f010ae2d <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010ae0a:	83 ec 08             	sub    $0x8,%esp
f010ae0d:	6a 01                	push   $0x1
f010ae0f:	ff 75 08             	pushl  0x8(%ebp)
f010ae12:	e8 6f d8 ff ff       	call   f0108686 <double_WS_Size>
f010ae17:	83 c4 10             	add    $0x10,%esp
			break;
f010ae1a:	eb 11                	jmp    f010ae2d <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010ae1c:	83 ec 08             	sub    $0x8,%esp
f010ae1f:	6a 00                	push   $0x0
f010ae21:	ff 75 08             	pushl  0x8(%ebp)
f010ae24:	e8 5d d8 ff ff       	call   f0108686 <double_WS_Size>
f010ae29:	83 c4 10             	add    $0x10,%esp
			break;
f010ae2c:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010ae2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae30:	8b 40 74             	mov    0x74(%eax),%eax
f010ae33:	83 ec 08             	sub    $0x8,%esp
f010ae36:	50                   	push   %eax
f010ae37:	68 7d 63 13 f0       	push   $0xf013637d
f010ae3c:	e8 41 5e ff ff       	call   f0100c82 <cprintf>
f010ae41:	83 c4 10             	add    $0x10,%esp
f010ae44:	eb 01                	jmp    f010ae47 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010ae46:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010ae47:	c9                   	leave  
f010ae48:	c3                   	ret    

f010ae49 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010ae49:	55                   	push   %ebp
f010ae4a:	89 e5                	mov    %esp,%ebp
f010ae4c:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ae4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ae56:	eb 29                	jmp    f010ae81 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010ae58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae5b:	89 d0                	mov    %edx,%eax
f010ae5d:	01 c0                	add    %eax,%eax
f010ae5f:	01 d0                	add    %edx,%eax
f010ae61:	c1 e0 02             	shl    $0x2,%eax
f010ae64:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010ae69:	8b 00                	mov    (%eax),%eax
f010ae6b:	83 ec 08             	sub    $0x8,%esp
f010ae6e:	50                   	push   %eax
f010ae6f:	ff 75 08             	pushl  0x8(%ebp)
f010ae72:	e8 8d 5e 02 00       	call   f0130d04 <strcmp>
f010ae77:	83 c4 10             	add    $0x10,%esp
f010ae7a:	85 c0                	test   %eax,%eax
f010ae7c:	74 0f                	je     f010ae8d <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ae7e:	ff 45 f4             	incl   -0xc(%ebp)
f010ae81:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010ae86:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ae89:	7c cd                	jl     f010ae58 <get_user_program_info+0xf>
f010ae8b:	eb 01                	jmp    f010ae8e <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010ae8d:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010ae8e:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010ae93:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ae96:	75 1a                	jne    f010aeb2 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010ae98:	83 ec 08             	sub    $0x8,%esp
f010ae9b:	ff 75 08             	pushl  0x8(%ebp)
f010ae9e:	68 c9 6d 13 f0       	push   $0xf0136dc9
f010aea3:	e8 da 5d ff ff       	call   f0100c82 <cprintf>
f010aea8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aeab:	b8 00 00 00 00       	mov    $0x0,%eax
f010aeb0:	eb 11                	jmp    f010aec3 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010aeb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeb5:	89 d0                	mov    %edx,%eax
f010aeb7:	01 c0                	add    %eax,%eax
f010aeb9:	01 d0                	add    %edx,%eax
f010aebb:	c1 e0 02             	shl    $0x2,%eax
f010aebe:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010aec3:	c9                   	leave  
f010aec4:	c3                   	ret    

f010aec5 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010aec5:	55                   	push   %ebp
f010aec6:	89 e5                	mov    %esp,%ebp
f010aec8:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aecb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aed2:	eb 30                	jmp    f010af04 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010aed4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aed7:	89 d0                	mov    %edx,%eax
f010aed9:	01 c0                	add    %eax,%eax
f010aedb:	01 d0                	add    %edx,%eax
f010aedd:	c1 e0 02             	shl    $0x2,%eax
f010aee0:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010aee5:	8b 00                	mov    (%eax),%eax
f010aee7:	8b 55 08             	mov    0x8(%ebp),%edx
f010aeea:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010aef0:	83 ec 08             	sub    $0x8,%esp
f010aef3:	50                   	push   %eax
f010aef4:	52                   	push   %edx
f010aef5:	e8 0a 5e 02 00       	call   f0130d04 <strcmp>
f010aefa:	83 c4 10             	add    $0x10,%esp
f010aefd:	85 c0                	test   %eax,%eax
f010aeff:	74 0f                	je     f010af10 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af01:	ff 45 f4             	incl   -0xc(%ebp)
f010af04:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af09:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af0c:	7c c6                	jl     f010aed4 <get_user_program_info_by_env+0xf>
f010af0e:	eb 01                	jmp    f010af11 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010af10:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af11:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af16:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af19:	75 17                	jne    f010af32 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010af1b:	83 ec 0c             	sub    $0xc,%esp
f010af1e:	68 e4 6d 13 f0       	push   $0xf0136de4
f010af23:	e8 5a 5d ff ff       	call   f0100c82 <cprintf>
f010af28:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af2b:	b8 00 00 00 00       	mov    $0x0,%eax
f010af30:	eb 11                	jmp    f010af43 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010af32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af35:	89 d0                	mov    %edx,%eax
f010af37:	01 c0                	add    %eax,%eax
f010af39:	01 d0                	add    %edx,%eax
f010af3b:	c1 e0 02             	shl    $0x2,%eax
f010af3e:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010af43:	c9                   	leave  
f010af44:	c3                   	ret    

f010af45 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010af45:	55                   	push   %ebp
f010af46:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010af48:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4b:	83 f8 13             	cmp    $0x13,%eax
f010af4e:	77 0c                	ja     f010af5c <trapname+0x17>
		return excnames[trapno];
f010af50:	8b 45 08             	mov    0x8(%ebp),%eax
f010af53:	8b 04 85 60 71 13 f0 	mov    -0xfec8ea0(,%eax,4),%eax
f010af5a:	eb 12                	jmp    f010af6e <trapname+0x29>
	if (trapno == T_SYSCALL)
f010af5c:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010af60:	75 07                	jne    f010af69 <trapname+0x24>
		return "System call";
f010af62:	b8 00 6e 13 f0       	mov    $0xf0136e00,%eax
f010af67:	eb 05                	jmp    f010af6e <trapname+0x29>
	return "(unknown trap)";
f010af69:	b8 0c 6e 13 f0       	mov    $0xf0136e0c,%eax
}
f010af6e:	5d                   	pop    %ebp
f010af6f:	c3                   	ret    

f010af70 <idt_init>:


void
idt_init(void)
{
f010af70:	55                   	push   %ebp
f010af71:	89 e5                	mov    %esp,%ebp
f010af73:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010af76:	b8 74 c5 10 f0       	mov    $0xf010c574,%eax
f010af7b:	66 a3 b0 72 65 f0    	mov    %ax,0xf06572b0
f010af81:	66 c7 05 b2 72 65 f0 	movw   $0x8,0xf06572b2
f010af88:	08 00 
f010af8a:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010af8f:	83 e0 e0             	and    $0xffffffe0,%eax
f010af92:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010af97:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010af9c:	83 e0 1f             	and    $0x1f,%eax
f010af9f:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010afa4:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afa9:	83 e0 f0             	and    $0xfffffff0,%eax
f010afac:	83 c8 0e             	or     $0xe,%eax
f010afaf:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afb4:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afb9:	83 e0 ef             	and    $0xffffffef,%eax
f010afbc:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afc1:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afc6:	83 e0 9f             	and    $0xffffff9f,%eax
f010afc9:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afce:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afd3:	83 c8 80             	or     $0xffffff80,%eax
f010afd6:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afdb:	b8 74 c5 10 f0       	mov    $0xf010c574,%eax
f010afe0:	c1 e8 10             	shr    $0x10,%eax
f010afe3:	66 a3 b6 72 65 f0    	mov    %ax,0xf06572b6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010afe9:	b8 7c c5 10 f0       	mov    $0xf010c57c,%eax
f010afee:	66 a3 c0 73 65 f0    	mov    %ax,0xf06573c0
f010aff4:	66 c7 05 c2 73 65 f0 	movw   $0x8,0xf06573c2
f010affb:	08 00 
f010affd:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b002:	83 e0 e0             	and    $0xffffffe0,%eax
f010b005:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b00a:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b00f:	83 e0 1f             	and    $0x1f,%eax
f010b012:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b017:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b01c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b01f:	83 c8 0e             	or     $0xe,%eax
f010b022:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b027:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b02c:	83 e0 ef             	and    $0xffffffef,%eax
f010b02f:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b034:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b039:	83 c8 60             	or     $0x60,%eax
f010b03c:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b041:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b046:	83 c8 80             	or     $0xffffff80,%eax
f010b049:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b04e:	b8 7c c5 10 f0       	mov    $0xf010c57c,%eax
f010b053:	c1 e8 10             	shr    $0x10,%eax
f010b056:	66 a3 c6 73 65 f0    	mov    %ax,0xf06573c6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b05c:	b8 86 c5 10 f0       	mov    $0xf010c586,%eax
f010b061:	66 a3 80 72 65 f0    	mov    %ax,0xf0657280
f010b067:	66 c7 05 82 72 65 f0 	movw   $0x8,0xf0657282
f010b06e:	08 00 
f010b070:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b075:	83 e0 e0             	and    $0xffffffe0,%eax
f010b078:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b07d:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b082:	83 e0 1f             	and    $0x1f,%eax
f010b085:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b08a:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b08f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b092:	83 c8 0e             	or     $0xe,%eax
f010b095:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b09a:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b09f:	83 e0 ef             	and    $0xffffffef,%eax
f010b0a2:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b0a7:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b0ac:	83 e0 9f             	and    $0xffffff9f,%eax
f010b0af:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b0b4:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b0b9:	83 c8 80             	or     $0xffffff80,%eax
f010b0bc:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b0c1:	b8 86 c5 10 f0       	mov    $0xf010c586,%eax
f010b0c6:	c1 e8 10             	shr    $0x10,%eax
f010b0c9:	66 a3 86 72 65 f0    	mov    %ax,0xf0657286


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b0cf:	b8 8e c5 10 f0       	mov    $0xf010c58e,%eax
f010b0d4:	66 a3 40 72 65 f0    	mov    %ax,0xf0657240
f010b0da:	66 c7 05 42 72 65 f0 	movw   $0x8,0xf0657242
f010b0e1:	08 00 
f010b0e3:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b0e8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0eb:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b0f0:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b0f5:	83 e0 1f             	and    $0x1f,%eax
f010b0f8:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b0fd:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b102:	83 e0 f0             	and    $0xfffffff0,%eax
f010b105:	83 c8 0e             	or     $0xe,%eax
f010b108:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b10d:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b112:	83 e0 ef             	and    $0xffffffef,%eax
f010b115:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b11a:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b11f:	83 c8 60             	or     $0x60,%eax
f010b122:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b127:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b12c:	83 c8 80             	or     $0xffffff80,%eax
f010b12f:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b134:	b8 8e c5 10 f0       	mov    $0xf010c58e,%eax
f010b139:	c1 e8 10             	shr    $0x10,%eax
f010b13c:	66 a3 46 72 65 f0    	mov    %ax,0xf0657246
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b142:	b8 98 c5 10 f0       	mov    $0xf010c598,%eax
f010b147:	66 a3 48 72 65 f0    	mov    %ax,0xf0657248
f010b14d:	66 c7 05 4a 72 65 f0 	movw   $0x8,0xf065724a
f010b154:	08 00 
f010b156:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b15b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b15e:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b163:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b168:	83 e0 1f             	and    $0x1f,%eax
f010b16b:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b170:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b175:	83 c8 0f             	or     $0xf,%eax
f010b178:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b17d:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b182:	83 e0 ef             	and    $0xffffffef,%eax
f010b185:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b18a:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b18f:	83 c8 60             	or     $0x60,%eax
f010b192:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b197:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b19c:	83 c8 80             	or     $0xffffff80,%eax
f010b19f:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b1a4:	b8 98 c5 10 f0       	mov    $0xf010c598,%eax
f010b1a9:	c1 e8 10             	shr    $0x10,%eax
f010b1ac:	66 a3 4e 72 65 f0    	mov    %ax,0xf065724e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b1b2:	b8 a2 c5 10 f0       	mov    $0xf010c5a2,%eax
f010b1b7:	66 a3 50 72 65 f0    	mov    %ax,0xf0657250
f010b1bd:	66 c7 05 52 72 65 f0 	movw   $0x8,0xf0657252
f010b1c4:	08 00 
f010b1c6:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b1cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1ce:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b1d3:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b1d8:	83 e0 1f             	and    $0x1f,%eax
f010b1db:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b1e0:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b1e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1e8:	83 c8 0e             	or     $0xe,%eax
f010b1eb:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b1f0:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b1f5:	83 e0 ef             	and    $0xffffffef,%eax
f010b1f8:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b1fd:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b202:	83 c8 60             	or     $0x60,%eax
f010b205:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b20a:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b20f:	83 c8 80             	or     $0xffffff80,%eax
f010b212:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b217:	b8 a2 c5 10 f0       	mov    $0xf010c5a2,%eax
f010b21c:	c1 e8 10             	shr    $0x10,%eax
f010b21f:	66 a3 56 72 65 f0    	mov    %ax,0xf0657256
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b225:	b8 ac c5 10 f0       	mov    $0xf010c5ac,%eax
f010b22a:	66 a3 58 72 65 f0    	mov    %ax,0xf0657258
f010b230:	66 c7 05 5a 72 65 f0 	movw   $0x8,0xf065725a
f010b237:	08 00 
f010b239:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b23e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b241:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b246:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b24b:	83 e0 1f             	and    $0x1f,%eax
f010b24e:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b253:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b258:	83 c8 0f             	or     $0xf,%eax
f010b25b:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b260:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b265:	83 e0 ef             	and    $0xffffffef,%eax
f010b268:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b26d:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b272:	83 c8 60             	or     $0x60,%eax
f010b275:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b27a:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b27f:	83 c8 80             	or     $0xffffff80,%eax
f010b282:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b287:	b8 ac c5 10 f0       	mov    $0xf010c5ac,%eax
f010b28c:	c1 e8 10             	shr    $0x10,%eax
f010b28f:	66 a3 5e 72 65 f0    	mov    %ax,0xf065725e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b295:	b8 b6 c5 10 f0       	mov    $0xf010c5b6,%eax
f010b29a:	66 a3 60 72 65 f0    	mov    %ax,0xf0657260
f010b2a0:	66 c7 05 62 72 65 f0 	movw   $0x8,0xf0657262
f010b2a7:	08 00 
f010b2a9:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b2ae:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2b1:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b2b6:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b2bb:	83 e0 1f             	and    $0x1f,%eax
f010b2be:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b2c3:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2c8:	83 c8 0f             	or     $0xf,%eax
f010b2cb:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2d0:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2d5:	83 e0 ef             	and    $0xffffffef,%eax
f010b2d8:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2dd:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2e2:	83 c8 60             	or     $0x60,%eax
f010b2e5:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2ea:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2ef:	83 c8 80             	or     $0xffffff80,%eax
f010b2f2:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2f7:	b8 b6 c5 10 f0       	mov    $0xf010c5b6,%eax
f010b2fc:	c1 e8 10             	shr    $0x10,%eax
f010b2ff:	66 a3 66 72 65 f0    	mov    %ax,0xf0657266
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b305:	b8 c0 c5 10 f0       	mov    $0xf010c5c0,%eax
f010b30a:	66 a3 68 72 65 f0    	mov    %ax,0xf0657268
f010b310:	66 c7 05 6a 72 65 f0 	movw   $0x8,0xf065726a
f010b317:	08 00 
f010b319:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b31e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b321:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b326:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b32b:	83 e0 1f             	and    $0x1f,%eax
f010b32e:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b333:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b338:	83 e0 f0             	and    $0xfffffff0,%eax
f010b33b:	83 c8 0e             	or     $0xe,%eax
f010b33e:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b343:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b348:	83 e0 ef             	and    $0xffffffef,%eax
f010b34b:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b350:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b355:	83 c8 60             	or     $0x60,%eax
f010b358:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b35d:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b362:	83 c8 80             	or     $0xffffff80,%eax
f010b365:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b36a:	b8 c0 c5 10 f0       	mov    $0xf010c5c0,%eax
f010b36f:	c1 e8 10             	shr    $0x10,%eax
f010b372:	66 a3 6e 72 65 f0    	mov    %ax,0xf065726e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b378:	b8 ca c5 10 f0       	mov    $0xf010c5ca,%eax
f010b37d:	66 a3 70 72 65 f0    	mov    %ax,0xf0657270
f010b383:	66 c7 05 72 72 65 f0 	movw   $0x8,0xf0657272
f010b38a:	08 00 
f010b38c:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b391:	83 e0 e0             	and    $0xffffffe0,%eax
f010b394:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b399:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b39e:	83 e0 1f             	and    $0x1f,%eax
f010b3a1:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b3a6:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3ab:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3ae:	83 c8 0e             	or     $0xe,%eax
f010b3b1:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3b6:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3bb:	83 e0 ef             	and    $0xffffffef,%eax
f010b3be:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3c3:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3c8:	83 c8 60             	or     $0x60,%eax
f010b3cb:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3d0:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3d5:	83 c8 80             	or     $0xffffff80,%eax
f010b3d8:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3dd:	b8 ca c5 10 f0       	mov    $0xf010c5ca,%eax
f010b3e2:	c1 e8 10             	shr    $0x10,%eax
f010b3e5:	66 a3 76 72 65 f0    	mov    %ax,0xf0657276
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b3eb:	b8 d4 c5 10 f0       	mov    $0xf010c5d4,%eax
f010b3f0:	66 a3 78 72 65 f0    	mov    %ax,0xf0657278
f010b3f6:	66 c7 05 7a 72 65 f0 	movw   $0x8,0xf065727a
f010b3fd:	08 00 
f010b3ff:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b404:	83 e0 e0             	and    $0xffffffe0,%eax
f010b407:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b40c:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b411:	83 e0 1f             	and    $0x1f,%eax
f010b414:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b419:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b41e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b421:	83 c8 0e             	or     $0xe,%eax
f010b424:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b429:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b42e:	83 e0 ef             	and    $0xffffffef,%eax
f010b431:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b436:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b43b:	83 c8 60             	or     $0x60,%eax
f010b43e:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b443:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b448:	83 c8 80             	or     $0xffffff80,%eax
f010b44b:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b450:	b8 d4 c5 10 f0       	mov    $0xf010c5d4,%eax
f010b455:	c1 e8 10             	shr    $0x10,%eax
f010b458:	66 a3 7e 72 65 f0    	mov    %ax,0xf065727e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b45e:	b8 de c5 10 f0       	mov    $0xf010c5de,%eax
f010b463:	66 a3 90 72 65 f0    	mov    %ax,0xf0657290
f010b469:	66 c7 05 92 72 65 f0 	movw   $0x8,0xf0657292
f010b470:	08 00 
f010b472:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b477:	83 e0 e0             	and    $0xffffffe0,%eax
f010b47a:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b47f:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b484:	83 e0 1f             	and    $0x1f,%eax
f010b487:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b48c:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b491:	83 e0 f0             	and    $0xfffffff0,%eax
f010b494:	83 c8 0e             	or     $0xe,%eax
f010b497:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b49c:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b4a1:	83 e0 ef             	and    $0xffffffef,%eax
f010b4a4:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b4a9:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b4ae:	83 c8 60             	or     $0x60,%eax
f010b4b1:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b4b6:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b4bb:	83 c8 80             	or     $0xffffff80,%eax
f010b4be:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b4c3:	b8 de c5 10 f0       	mov    $0xf010c5de,%eax
f010b4c8:	c1 e8 10             	shr    $0x10,%eax
f010b4cb:	66 a3 96 72 65 f0    	mov    %ax,0xf0657296
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b4d1:	b8 e6 c5 10 f0       	mov    $0xf010c5e6,%eax
f010b4d6:	66 a3 98 72 65 f0    	mov    %ax,0xf0657298
f010b4dc:	66 c7 05 9a 72 65 f0 	movw   $0x8,0xf065729a
f010b4e3:	08 00 
f010b4e5:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b4ea:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4ed:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b4f2:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b4f7:	83 e0 1f             	and    $0x1f,%eax
f010b4fa:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b4ff:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b504:	83 e0 f0             	and    $0xfffffff0,%eax
f010b507:	83 c8 0e             	or     $0xe,%eax
f010b50a:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b50f:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b514:	83 e0 ef             	and    $0xffffffef,%eax
f010b517:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b51c:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b521:	83 c8 60             	or     $0x60,%eax
f010b524:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b529:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b52e:	83 c8 80             	or     $0xffffff80,%eax
f010b531:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b536:	b8 e6 c5 10 f0       	mov    $0xf010c5e6,%eax
f010b53b:	c1 e8 10             	shr    $0x10,%eax
f010b53e:	66 a3 9e 72 65 f0    	mov    %ax,0xf065729e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b544:	b8 ea c5 10 f0       	mov    $0xf010c5ea,%eax
f010b549:	66 a3 a0 72 65 f0    	mov    %ax,0xf06572a0
f010b54f:	66 c7 05 a2 72 65 f0 	movw   $0x8,0xf06572a2
f010b556:	08 00 
f010b558:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b55d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b560:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b565:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b56a:	83 e0 1f             	and    $0x1f,%eax
f010b56d:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b572:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b577:	83 e0 f0             	and    $0xfffffff0,%eax
f010b57a:	83 c8 0e             	or     $0xe,%eax
f010b57d:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b582:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b587:	83 e0 ef             	and    $0xffffffef,%eax
f010b58a:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b58f:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b594:	83 c8 60             	or     $0x60,%eax
f010b597:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b59c:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b5a1:	83 c8 80             	or     $0xffffff80,%eax
f010b5a4:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b5a9:	b8 ea c5 10 f0       	mov    $0xf010c5ea,%eax
f010b5ae:	c1 e8 10             	shr    $0x10,%eax
f010b5b1:	66 a3 a6 72 65 f0    	mov    %ax,0xf06572a6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b5b7:	b8 ee c5 10 f0       	mov    $0xf010c5ee,%eax
f010b5bc:	66 a3 a8 72 65 f0    	mov    %ax,0xf06572a8
f010b5c2:	66 c7 05 aa 72 65 f0 	movw   $0x8,0xf06572aa
f010b5c9:	08 00 
f010b5cb:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b5d0:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5d3:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b5d8:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b5dd:	83 e0 1f             	and    $0x1f,%eax
f010b5e0:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b5e5:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b5ea:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5ed:	83 c8 0e             	or     $0xe,%eax
f010b5f0:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b5f5:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b5fa:	83 e0 ef             	and    $0xffffffef,%eax
f010b5fd:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b602:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b607:	83 c8 60             	or     $0x60,%eax
f010b60a:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b60f:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b614:	83 c8 80             	or     $0xffffff80,%eax
f010b617:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b61c:	b8 ee c5 10 f0       	mov    $0xf010c5ee,%eax
f010b621:	c1 e8 10             	shr    $0x10,%eax
f010b624:	66 a3 ae 72 65 f0    	mov    %ax,0xf06572ae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b62a:	b8 f2 c5 10 f0       	mov    $0xf010c5f2,%eax
f010b62f:	66 a3 c0 72 65 f0    	mov    %ax,0xf06572c0
f010b635:	66 c7 05 c2 72 65 f0 	movw   $0x8,0xf06572c2
f010b63c:	08 00 
f010b63e:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b643:	83 e0 e0             	and    $0xffffffe0,%eax
f010b646:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b64b:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b650:	83 e0 1f             	and    $0x1f,%eax
f010b653:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b658:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b65d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b660:	83 c8 0e             	or     $0xe,%eax
f010b663:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b668:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b66d:	83 e0 ef             	and    $0xffffffef,%eax
f010b670:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b675:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b67a:	83 c8 60             	or     $0x60,%eax
f010b67d:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b682:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b687:	83 c8 80             	or     $0xffffff80,%eax
f010b68a:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b68f:	b8 f2 c5 10 f0       	mov    $0xf010c5f2,%eax
f010b694:	c1 e8 10             	shr    $0x10,%eax
f010b697:	66 a3 c6 72 65 f0    	mov    %ax,0xf06572c6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b69d:	b8 f8 c5 10 f0       	mov    $0xf010c5f8,%eax
f010b6a2:	66 a3 c8 72 65 f0    	mov    %ax,0xf06572c8
f010b6a8:	66 c7 05 ca 72 65 f0 	movw   $0x8,0xf06572ca
f010b6af:	08 00 
f010b6b1:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b6b6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6b9:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b6be:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b6c3:	83 e0 1f             	and    $0x1f,%eax
f010b6c6:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b6cb:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6d0:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6d3:	83 c8 0e             	or     $0xe,%eax
f010b6d6:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6db:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6e0:	83 e0 ef             	and    $0xffffffef,%eax
f010b6e3:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6e8:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6ed:	83 c8 60             	or     $0x60,%eax
f010b6f0:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6f5:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6fa:	83 c8 80             	or     $0xffffff80,%eax
f010b6fd:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b702:	b8 f8 c5 10 f0       	mov    $0xf010c5f8,%eax
f010b707:	c1 e8 10             	shr    $0x10,%eax
f010b70a:	66 a3 ce 72 65 f0    	mov    %ax,0xf06572ce
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b710:	b8 fc c5 10 f0       	mov    $0xf010c5fc,%eax
f010b715:	66 a3 d0 72 65 f0    	mov    %ax,0xf06572d0
f010b71b:	66 c7 05 d2 72 65 f0 	movw   $0x8,0xf06572d2
f010b722:	08 00 
f010b724:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b729:	83 e0 e0             	and    $0xffffffe0,%eax
f010b72c:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b731:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b736:	83 e0 1f             	and    $0x1f,%eax
f010b739:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b73e:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b743:	83 e0 f0             	and    $0xfffffff0,%eax
f010b746:	83 c8 0e             	or     $0xe,%eax
f010b749:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b74e:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b753:	83 e0 ef             	and    $0xffffffef,%eax
f010b756:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b75b:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b760:	83 c8 60             	or     $0x60,%eax
f010b763:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b768:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b76d:	83 c8 80             	or     $0xffffff80,%eax
f010b770:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b775:	b8 fc c5 10 f0       	mov    $0xf010c5fc,%eax
f010b77a:	c1 e8 10             	shr    $0x10,%eax
f010b77d:	66 a3 d6 72 65 f0    	mov    %ax,0xf06572d6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b783:	b8 02 c6 10 f0       	mov    $0xf010c602,%eax
f010b788:	66 a3 d8 72 65 f0    	mov    %ax,0xf06572d8
f010b78e:	66 c7 05 da 72 65 f0 	movw   $0x8,0xf06572da
f010b795:	08 00 
f010b797:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b79c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b79f:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b7a4:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b7a9:	83 e0 1f             	and    $0x1f,%eax
f010b7ac:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b7b1:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7b9:	83 c8 0e             	or     $0xe,%eax
f010b7bc:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7c1:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7c6:	83 e0 ef             	and    $0xffffffef,%eax
f010b7c9:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7ce:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7d3:	83 c8 60             	or     $0x60,%eax
f010b7d6:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7db:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7e0:	83 c8 80             	or     $0xffffff80,%eax
f010b7e3:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7e8:	b8 02 c6 10 f0       	mov    $0xf010c602,%eax
f010b7ed:	c1 e8 10             	shr    $0x10,%eax
f010b7f0:	66 a3 de 72 65 f0    	mov    %ax,0xf06572de


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b7f6:	b8 08 c6 10 f0       	mov    $0xf010c608,%eax
f010b7fb:	66 a3 40 73 65 f0    	mov    %ax,0xf0657340
f010b801:	66 c7 05 42 73 65 f0 	movw   $0x8,0xf0657342
f010b808:	08 00 
f010b80a:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b80f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b812:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b817:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b81c:	83 e0 1f             	and    $0x1f,%eax
f010b81f:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b824:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b829:	83 e0 f0             	and    $0xfffffff0,%eax
f010b82c:	83 c8 0e             	or     $0xe,%eax
f010b82f:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b834:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b839:	83 e0 ef             	and    $0xffffffef,%eax
f010b83c:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b841:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b846:	83 c8 60             	or     $0x60,%eax
f010b849:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b84e:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b853:	83 c8 80             	or     $0xffffff80,%eax
f010b856:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b85b:	b8 08 c6 10 f0       	mov    $0xf010c608,%eax
f010b860:	c1 e8 10             	shr    $0x10,%eax
f010b863:	66 a3 46 73 65 f0    	mov    %ax,0xf0657346
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b869:	b8 0e c6 10 f0       	mov    $0xf010c60e,%eax
f010b86e:	66 a3 48 73 65 f0    	mov    %ax,0xf0657348
f010b874:	66 c7 05 4a 73 65 f0 	movw   $0x8,0xf065734a
f010b87b:	08 00 
f010b87d:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010b882:	83 e0 e0             	and    $0xffffffe0,%eax
f010b885:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010b88a:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010b88f:	83 e0 1f             	and    $0x1f,%eax
f010b892:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010b897:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b89c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b89f:	83 c8 0e             	or     $0xe,%eax
f010b8a2:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8a7:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b8ac:	83 e0 ef             	and    $0xffffffef,%eax
f010b8af:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8b4:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b8b9:	83 c8 60             	or     $0x60,%eax
f010b8bc:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8c1:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b8c6:	83 c8 80             	or     $0xffffff80,%eax
f010b8c9:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8ce:	b8 0e c6 10 f0       	mov    $0xf010c60e,%eax
f010b8d3:	c1 e8 10             	shr    $0x10,%eax
f010b8d6:	66 a3 4e 73 65 f0    	mov    %ax,0xf065734e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b8dc:	b8 14 c6 10 f0       	mov    $0xf010c614,%eax
f010b8e1:	66 a3 50 73 65 f0    	mov    %ax,0xf0657350
f010b8e7:	66 c7 05 52 73 65 f0 	movw   $0x8,0xf0657352
f010b8ee:	08 00 
f010b8f0:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010b8f5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8f8:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010b8fd:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010b902:	83 e0 1f             	and    $0x1f,%eax
f010b905:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010b90a:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b90f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b912:	83 c8 0e             	or     $0xe,%eax
f010b915:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b91a:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b91f:	83 e0 ef             	and    $0xffffffef,%eax
f010b922:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b927:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b92c:	83 c8 60             	or     $0x60,%eax
f010b92f:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b934:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b939:	83 c8 80             	or     $0xffffff80,%eax
f010b93c:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b941:	b8 14 c6 10 f0       	mov    $0xf010c614,%eax
f010b946:	c1 e8 10             	shr    $0x10,%eax
f010b949:	66 a3 56 73 65 f0    	mov    %ax,0xf0657356
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b94f:	b8 1a c6 10 f0       	mov    $0xf010c61a,%eax
f010b954:	66 a3 58 73 65 f0    	mov    %ax,0xf0657358
f010b95a:	66 c7 05 5a 73 65 f0 	movw   $0x8,0xf065735a
f010b961:	08 00 
f010b963:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010b968:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96b:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010b970:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010b975:	83 e0 1f             	and    $0x1f,%eax
f010b978:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010b97d:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b982:	83 e0 f0             	and    $0xfffffff0,%eax
f010b985:	83 c8 0e             	or     $0xe,%eax
f010b988:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b98d:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b992:	83 e0 ef             	and    $0xffffffef,%eax
f010b995:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b99a:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b99f:	83 c8 60             	or     $0x60,%eax
f010b9a2:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b9a7:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b9ac:	83 c8 80             	or     $0xffffff80,%eax
f010b9af:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b9b4:	b8 1a c6 10 f0       	mov    $0xf010c61a,%eax
f010b9b9:	c1 e8 10             	shr    $0x10,%eax
f010b9bc:	66 a3 5e 73 65 f0    	mov    %ax,0xf065735e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b9c2:	b8 20 c6 10 f0       	mov    $0xf010c620,%eax
f010b9c7:	66 a3 60 73 65 f0    	mov    %ax,0xf0657360
f010b9cd:	66 c7 05 62 73 65 f0 	movw   $0x8,0xf0657362
f010b9d4:	08 00 
f010b9d6:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010b9db:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9de:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010b9e3:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010b9e8:	83 e0 1f             	and    $0x1f,%eax
f010b9eb:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010b9f0:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010b9f5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9f8:	83 c8 0e             	or     $0xe,%eax
f010b9fb:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba00:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba05:	83 e0 ef             	and    $0xffffffef,%eax
f010ba08:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba0d:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba12:	83 c8 60             	or     $0x60,%eax
f010ba15:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba1a:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba1f:	83 c8 80             	or     $0xffffff80,%eax
f010ba22:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba27:	b8 20 c6 10 f0       	mov    $0xf010c620,%eax
f010ba2c:	c1 e8 10             	shr    $0x10,%eax
f010ba2f:	66 a3 66 73 65 f0    	mov    %ax,0xf0657366
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010ba35:	b8 26 c6 10 f0       	mov    $0xf010c626,%eax
f010ba3a:	66 a3 68 73 65 f0    	mov    %ax,0xf0657368
f010ba40:	66 c7 05 6a 73 65 f0 	movw   $0x8,0xf065736a
f010ba47:	08 00 
f010ba49:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010ba4e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba51:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010ba56:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010ba5b:	83 e0 1f             	and    $0x1f,%eax
f010ba5e:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010ba63:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba68:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6b:	83 c8 0e             	or     $0xe,%eax
f010ba6e:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba73:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba78:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7b:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba80:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba85:	83 c8 60             	or     $0x60,%eax
f010ba88:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba8d:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba92:	83 c8 80             	or     $0xffffff80,%eax
f010ba95:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba9a:	b8 26 c6 10 f0       	mov    $0xf010c626,%eax
f010ba9f:	c1 e8 10             	shr    $0x10,%eax
f010baa2:	66 a3 6e 73 65 f0    	mov    %ax,0xf065736e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010baa8:	b8 2c c6 10 f0       	mov    $0xf010c62c,%eax
f010baad:	66 a3 70 73 65 f0    	mov    %ax,0xf0657370
f010bab3:	66 c7 05 72 73 65 f0 	movw   $0x8,0xf0657372
f010baba:	08 00 
f010babc:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bac1:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac4:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bac9:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bace:	83 e0 1f             	and    $0x1f,%eax
f010bad1:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bad6:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010badb:	83 e0 f0             	and    $0xfffffff0,%eax
f010bade:	83 c8 0e             	or     $0xe,%eax
f010bae1:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bae6:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010baeb:	83 e0 ef             	and    $0xffffffef,%eax
f010baee:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010baf3:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010baf8:	83 c8 60             	or     $0x60,%eax
f010bafb:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb00:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bb05:	83 c8 80             	or     $0xffffff80,%eax
f010bb08:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb0d:	b8 2c c6 10 f0       	mov    $0xf010c62c,%eax
f010bb12:	c1 e8 10             	shr    $0x10,%eax
f010bb15:	66 a3 76 73 65 f0    	mov    %ax,0xf0657376
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bb1b:	b8 32 c6 10 f0       	mov    $0xf010c632,%eax
f010bb20:	66 a3 78 73 65 f0    	mov    %ax,0xf0657378
f010bb26:	66 c7 05 7a 73 65 f0 	movw   $0x8,0xf065737a
f010bb2d:	08 00 
f010bb2f:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bb34:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb37:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bb3c:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bb41:	83 e0 1f             	and    $0x1f,%eax
f010bb44:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bb49:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb4e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb51:	83 c8 0e             	or     $0xe,%eax
f010bb54:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb59:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb5e:	83 e0 ef             	and    $0xffffffef,%eax
f010bb61:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb66:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb6b:	83 c8 60             	or     $0x60,%eax
f010bb6e:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb73:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb78:	83 c8 80             	or     $0xffffff80,%eax
f010bb7b:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb80:	b8 32 c6 10 f0       	mov    $0xf010c632,%eax
f010bb85:	c1 e8 10             	shr    $0x10,%eax
f010bb88:	66 a3 7e 73 65 f0    	mov    %ax,0xf065737e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bb8e:	b8 38 c6 10 f0       	mov    $0xf010c638,%eax
f010bb93:	66 a3 80 73 65 f0    	mov    %ax,0xf0657380
f010bb99:	66 c7 05 82 73 65 f0 	movw   $0x8,0xf0657382
f010bba0:	08 00 
f010bba2:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bba7:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbaa:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bbaf:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bbb4:	83 e0 1f             	and    $0x1f,%eax
f010bbb7:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bbbc:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbc1:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc4:	83 c8 0e             	or     $0xe,%eax
f010bbc7:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbcc:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbd1:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd4:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbd9:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbde:	83 c8 60             	or     $0x60,%eax
f010bbe1:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbe6:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbeb:	83 c8 80             	or     $0xffffff80,%eax
f010bbee:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbf3:	b8 38 c6 10 f0       	mov    $0xf010c638,%eax
f010bbf8:	c1 e8 10             	shr    $0x10,%eax
f010bbfb:	66 a3 86 73 65 f0    	mov    %ax,0xf0657386
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc01:	b8 3e c6 10 f0       	mov    $0xf010c63e,%eax
f010bc06:	66 a3 88 73 65 f0    	mov    %ax,0xf0657388
f010bc0c:	66 c7 05 8a 73 65 f0 	movw   $0x8,0xf065738a
f010bc13:	08 00 
f010bc15:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bc1a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc1d:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bc22:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bc27:	83 e0 1f             	and    $0x1f,%eax
f010bc2a:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bc2f:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc34:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc37:	83 c8 0e             	or     $0xe,%eax
f010bc3a:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc3f:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc44:	83 e0 ef             	and    $0xffffffef,%eax
f010bc47:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc4c:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc51:	83 c8 60             	or     $0x60,%eax
f010bc54:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc59:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc5e:	83 c8 80             	or     $0xffffff80,%eax
f010bc61:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc66:	b8 3e c6 10 f0       	mov    $0xf010c63e,%eax
f010bc6b:	c1 e8 10             	shr    $0x10,%eax
f010bc6e:	66 a3 8e 73 65 f0    	mov    %ax,0xf065738e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bc74:	b8 44 c6 10 f0       	mov    $0xf010c644,%eax
f010bc79:	66 a3 90 73 65 f0    	mov    %ax,0xf0657390
f010bc7f:	66 c7 05 92 73 65 f0 	movw   $0x8,0xf0657392
f010bc86:	08 00 
f010bc88:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010bc8d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc90:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010bc95:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010bc9a:	83 e0 1f             	and    $0x1f,%eax
f010bc9d:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010bca2:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bca7:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcaa:	83 c8 0e             	or     $0xe,%eax
f010bcad:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bcb2:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bcb7:	83 e0 ef             	and    $0xffffffef,%eax
f010bcba:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bcbf:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bcc4:	83 c8 60             	or     $0x60,%eax
f010bcc7:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bccc:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bcd1:	83 c8 80             	or     $0xffffff80,%eax
f010bcd4:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bcd9:	b8 44 c6 10 f0       	mov    $0xf010c644,%eax
f010bcde:	c1 e8 10             	shr    $0x10,%eax
f010bce1:	66 a3 96 73 65 f0    	mov    %ax,0xf0657396
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bce7:	b8 4a c6 10 f0       	mov    $0xf010c64a,%eax
f010bcec:	66 a3 98 73 65 f0    	mov    %ax,0xf0657398
f010bcf2:	66 c7 05 9a 73 65 f0 	movw   $0x8,0xf065739a
f010bcf9:	08 00 
f010bcfb:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010bd00:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd03:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010bd08:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010bd0d:	83 e0 1f             	and    $0x1f,%eax
f010bd10:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010bd15:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd1a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd1d:	83 c8 0e             	or     $0xe,%eax
f010bd20:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd25:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd2a:	83 e0 ef             	and    $0xffffffef,%eax
f010bd2d:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd32:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd37:	83 c8 60             	or     $0x60,%eax
f010bd3a:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd3f:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd44:	83 c8 80             	or     $0xffffff80,%eax
f010bd47:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd4c:	b8 4a c6 10 f0       	mov    $0xf010c64a,%eax
f010bd51:	c1 e8 10             	shr    $0x10,%eax
f010bd54:	66 a3 9e 73 65 f0    	mov    %ax,0xf065739e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bd5a:	b8 50 c6 10 f0       	mov    $0xf010c650,%eax
f010bd5f:	66 a3 a0 73 65 f0    	mov    %ax,0xf06573a0
f010bd65:	66 c7 05 a2 73 65 f0 	movw   $0x8,0xf06573a2
f010bd6c:	08 00 
f010bd6e:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010bd73:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd76:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010bd7b:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010bd80:	83 e0 1f             	and    $0x1f,%eax
f010bd83:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010bd88:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bd8d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd90:	83 c8 0e             	or     $0xe,%eax
f010bd93:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bd98:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bd9d:	83 e0 ef             	and    $0xffffffef,%eax
f010bda0:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bda5:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bdaa:	83 c8 60             	or     $0x60,%eax
f010bdad:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bdb2:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bdb7:	83 c8 80             	or     $0xffffff80,%eax
f010bdba:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bdbf:	b8 50 c6 10 f0       	mov    $0xf010c650,%eax
f010bdc4:	c1 e8 10             	shr    $0x10,%eax
f010bdc7:	66 a3 a6 73 65 f0    	mov    %ax,0xf06573a6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010bdcd:	b8 56 c6 10 f0       	mov    $0xf010c656,%eax
f010bdd2:	66 a3 a8 73 65 f0    	mov    %ax,0xf06573a8
f010bdd8:	66 c7 05 aa 73 65 f0 	movw   $0x8,0xf06573aa
f010bddf:	08 00 
f010bde1:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010bde6:	83 e0 e0             	and    $0xffffffe0,%eax
f010bde9:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010bdee:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010bdf3:	83 e0 1f             	and    $0x1f,%eax
f010bdf6:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010bdfb:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be00:	83 e0 f0             	and    $0xfffffff0,%eax
f010be03:	83 c8 0e             	or     $0xe,%eax
f010be06:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be0b:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be10:	83 e0 ef             	and    $0xffffffef,%eax
f010be13:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be18:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be1d:	83 c8 60             	or     $0x60,%eax
f010be20:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be25:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be2a:	83 c8 80             	or     $0xffffff80,%eax
f010be2d:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be32:	b8 56 c6 10 f0       	mov    $0xf010c656,%eax
f010be37:	c1 e8 10             	shr    $0x10,%eax
f010be3a:	66 a3 ae 73 65 f0    	mov    %ax,0xf06573ae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010be40:	b8 5c c6 10 f0       	mov    $0xf010c65c,%eax
f010be45:	66 a3 b0 73 65 f0    	mov    %ax,0xf06573b0
f010be4b:	66 c7 05 b2 73 65 f0 	movw   $0x8,0xf06573b2
f010be52:	08 00 
f010be54:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010be59:	83 e0 e0             	and    $0xffffffe0,%eax
f010be5c:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010be61:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010be66:	83 e0 1f             	and    $0x1f,%eax
f010be69:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010be6e:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be73:	83 e0 f0             	and    $0xfffffff0,%eax
f010be76:	83 c8 0e             	or     $0xe,%eax
f010be79:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be7e:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be83:	83 e0 ef             	and    $0xffffffef,%eax
f010be86:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be8b:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be90:	83 c8 60             	or     $0x60,%eax
f010be93:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be98:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be9d:	83 c8 80             	or     $0xffffff80,%eax
f010bea0:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010bea5:	b8 5c c6 10 f0       	mov    $0xf010c65c,%eax
f010beaa:	c1 e8 10             	shr    $0x10,%eax
f010bead:	66 a3 b6 73 65 f0    	mov    %ax,0xf06573b6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010beb3:	b8 62 c6 10 f0       	mov    $0xf010c662,%eax
f010beb8:	66 a3 b8 73 65 f0    	mov    %ax,0xf06573b8
f010bebe:	66 c7 05 ba 73 65 f0 	movw   $0x8,0xf06573ba
f010bec5:	08 00 
f010bec7:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010becc:	83 e0 e0             	and    $0xffffffe0,%eax
f010becf:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010bed4:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010bed9:	83 e0 1f             	and    $0x1f,%eax
f010bedc:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010bee1:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bee6:	83 e0 f0             	and    $0xfffffff0,%eax
f010bee9:	83 c8 0e             	or     $0xe,%eax
f010beec:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bef1:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bef6:	83 e0 ef             	and    $0xffffffef,%eax
f010bef9:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010befe:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bf03:	83 c8 60             	or     $0x60,%eax
f010bf06:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf0b:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bf10:	83 c8 80             	or     $0xffffff80,%eax
f010bf13:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf18:	b8 62 c6 10 f0       	mov    $0xf010c662,%eax
f010bf1d:	c1 e8 10             	shr    $0x10,%eax
f010bf20:	66 a3 be 73 65 f0    	mov    %ax,0xf06573be



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bf26:	c7 05 44 7a 65 f0 00 	movl   $0xefc00000,0xf0657a44
f010bf2d:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bf30:	66 c7 05 48 7a 65 f0 	movw   $0x10,0xf0657a48
f010bf37:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bf39:	66 c7 05 e8 18 19 f0 	movw   $0x68,0xf01918e8
f010bf40:	68 00 
f010bf42:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bf47:	66 a3 ea 18 19 f0    	mov    %ax,0xf01918ea
f010bf4d:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bf52:	c1 e8 10             	shr    $0x10,%eax
f010bf55:	a2 ec 18 19 f0       	mov    %al,0xf01918ec
f010bf5a:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf5f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf62:	83 c8 09             	or     $0x9,%eax
f010bf65:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf6a:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf6f:	83 c8 10             	or     $0x10,%eax
f010bf72:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf77:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf7c:	83 e0 9f             	and    $0xffffff9f,%eax
f010bf7f:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf84:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf89:	83 c8 80             	or     $0xffffff80,%eax
f010bf8c:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf91:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bf96:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf99:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bf9e:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfa3:	83 e0 ef             	and    $0xffffffef,%eax
f010bfa6:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfab:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfb0:	83 e0 df             	and    $0xffffffdf,%eax
f010bfb3:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfb8:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfbd:	83 c8 40             	or     $0x40,%eax
f010bfc0:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfc5:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfca:	83 e0 7f             	and    $0x7f,%eax
f010bfcd:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfd2:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bfd7:	c1 e8 18             	shr    $0x18,%eax
f010bfda:	a2 ef 18 19 f0       	mov    %al,0xf01918ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010bfdf:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bfe4:	83 e0 ef             	and    $0xffffffef,%eax
f010bfe7:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bfec:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010bff2:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010bff6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010bff9:	0f 01 1d c8 1c 19 f0 	lidtl  0xf0191cc8
}
f010c000:	90                   	nop
f010c001:	c9                   	leave  
f010c002:	c3                   	ret    

f010c003 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c003:	55                   	push   %ebp
f010c004:	89 e5                	mov    %esp,%ebp
f010c006:	53                   	push   %ebx
f010c007:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c00a:	83 ec 08             	sub    $0x8,%esp
f010c00d:	ff 75 08             	pushl  0x8(%ebp)
f010c010:	68 1b 6e 13 f0       	push   $0xf0136e1b
f010c015:	e8 68 4c ff ff       	call   f0100c82 <cprintf>
f010c01a:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c01d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c020:	83 ec 0c             	sub    $0xc,%esp
f010c023:	50                   	push   %eax
f010c024:	e8 fd 00 00 00       	call   f010c126 <print_regs>
f010c029:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c02c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c02f:	8b 40 20             	mov    0x20(%eax),%eax
f010c032:	0f b7 c0             	movzwl %ax,%eax
f010c035:	83 ec 08             	sub    $0x8,%esp
f010c038:	50                   	push   %eax
f010c039:	68 2d 6e 13 f0       	push   $0xf0136e2d
f010c03e:	e8 3f 4c ff ff       	call   f0100c82 <cprintf>
f010c043:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c046:	8b 45 08             	mov    0x8(%ebp),%eax
f010c049:	8b 40 24             	mov    0x24(%eax),%eax
f010c04c:	0f b7 c0             	movzwl %ax,%eax
f010c04f:	83 ec 08             	sub    $0x8,%esp
f010c052:	50                   	push   %eax
f010c053:	68 40 6e 13 f0       	push   $0xf0136e40
f010c058:	e8 25 4c ff ff       	call   f0100c82 <cprintf>
f010c05d:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c060:	8b 45 08             	mov    0x8(%ebp),%eax
f010c063:	8b 58 28             	mov    0x28(%eax),%ebx
f010c066:	8b 45 08             	mov    0x8(%ebp),%eax
f010c069:	8b 40 28             	mov    0x28(%eax),%eax
f010c06c:	83 ec 0c             	sub    $0xc,%esp
f010c06f:	50                   	push   %eax
f010c070:	e8 d0 ee ff ff       	call   f010af45 <trapname>
f010c075:	83 c4 10             	add    $0x10,%esp
f010c078:	89 c2                	mov    %eax,%edx
f010c07a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c07d:	8b 40 28             	mov    0x28(%eax),%eax
f010c080:	53                   	push   %ebx
f010c081:	52                   	push   %edx
f010c082:	50                   	push   %eax
f010c083:	68 53 6e 13 f0       	push   $0xf0136e53
f010c088:	e8 f5 4b ff ff       	call   f0100c82 <cprintf>
f010c08d:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c090:	8b 45 08             	mov    0x8(%ebp),%eax
f010c093:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c096:	83 ec 08             	sub    $0x8,%esp
f010c099:	50                   	push   %eax
f010c09a:	68 6a 6e 13 f0       	push   $0xf0136e6a
f010c09f:	e8 de 4b ff ff       	call   f0100c82 <cprintf>
f010c0a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c0a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0aa:	8b 40 30             	mov    0x30(%eax),%eax
f010c0ad:	83 ec 08             	sub    $0x8,%esp
f010c0b0:	50                   	push   %eax
f010c0b1:	68 79 6e 13 f0       	push   $0xf0136e79
f010c0b6:	e8 c7 4b ff ff       	call   f0100c82 <cprintf>
f010c0bb:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c0be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c1:	8b 40 34             	mov    0x34(%eax),%eax
f010c0c4:	0f b7 c0             	movzwl %ax,%eax
f010c0c7:	83 ec 08             	sub    $0x8,%esp
f010c0ca:	50                   	push   %eax
f010c0cb:	68 88 6e 13 f0       	push   $0xf0136e88
f010c0d0:	e8 ad 4b ff ff       	call   f0100c82 <cprintf>
f010c0d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c0d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0db:	8b 40 38             	mov    0x38(%eax),%eax
f010c0de:	83 ec 08             	sub    $0x8,%esp
f010c0e1:	50                   	push   %eax
f010c0e2:	68 9b 6e 13 f0       	push   $0xf0136e9b
f010c0e7:	e8 96 4b ff ff       	call   f0100c82 <cprintf>
f010c0ec:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c0ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f2:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c0f5:	83 ec 08             	sub    $0x8,%esp
f010c0f8:	50                   	push   %eax
f010c0f9:	68 aa 6e 13 f0       	push   $0xf0136eaa
f010c0fe:	e8 7f 4b ff ff       	call   f0100c82 <cprintf>
f010c103:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c106:	8b 45 08             	mov    0x8(%ebp),%eax
f010c109:	8b 40 40             	mov    0x40(%eax),%eax
f010c10c:	0f b7 c0             	movzwl %ax,%eax
f010c10f:	83 ec 08             	sub    $0x8,%esp
f010c112:	50                   	push   %eax
f010c113:	68 b9 6e 13 f0       	push   $0xf0136eb9
f010c118:	e8 65 4b ff ff       	call   f0100c82 <cprintf>
f010c11d:	83 c4 10             	add    $0x10,%esp
}
f010c120:	90                   	nop
f010c121:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c124:	c9                   	leave  
f010c125:	c3                   	ret    

f010c126 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c126:	55                   	push   %ebp
f010c127:	89 e5                	mov    %esp,%ebp
f010c129:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c12c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c12f:	8b 00                	mov    (%eax),%eax
f010c131:	83 ec 08             	sub    $0x8,%esp
f010c134:	50                   	push   %eax
f010c135:	68 cc 6e 13 f0       	push   $0xf0136ecc
f010c13a:	e8 43 4b ff ff       	call   f0100c82 <cprintf>
f010c13f:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c142:	8b 45 08             	mov    0x8(%ebp),%eax
f010c145:	8b 40 04             	mov    0x4(%eax),%eax
f010c148:	83 ec 08             	sub    $0x8,%esp
f010c14b:	50                   	push   %eax
f010c14c:	68 db 6e 13 f0       	push   $0xf0136edb
f010c151:	e8 2c 4b ff ff       	call   f0100c82 <cprintf>
f010c156:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c159:	8b 45 08             	mov    0x8(%ebp),%eax
f010c15c:	8b 40 08             	mov    0x8(%eax),%eax
f010c15f:	83 ec 08             	sub    $0x8,%esp
f010c162:	50                   	push   %eax
f010c163:	68 ea 6e 13 f0       	push   $0xf0136eea
f010c168:	e8 15 4b ff ff       	call   f0100c82 <cprintf>
f010c16d:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c170:	8b 45 08             	mov    0x8(%ebp),%eax
f010c173:	8b 40 0c             	mov    0xc(%eax),%eax
f010c176:	83 ec 08             	sub    $0x8,%esp
f010c179:	50                   	push   %eax
f010c17a:	68 f9 6e 13 f0       	push   $0xf0136ef9
f010c17f:	e8 fe 4a ff ff       	call   f0100c82 <cprintf>
f010c184:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c187:	8b 45 08             	mov    0x8(%ebp),%eax
f010c18a:	8b 40 10             	mov    0x10(%eax),%eax
f010c18d:	83 ec 08             	sub    $0x8,%esp
f010c190:	50                   	push   %eax
f010c191:	68 08 6f 13 f0       	push   $0xf0136f08
f010c196:	e8 e7 4a ff ff       	call   f0100c82 <cprintf>
f010c19b:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c19e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1a1:	8b 40 14             	mov    0x14(%eax),%eax
f010c1a4:	83 ec 08             	sub    $0x8,%esp
f010c1a7:	50                   	push   %eax
f010c1a8:	68 17 6f 13 f0       	push   $0xf0136f17
f010c1ad:	e8 d0 4a ff ff       	call   f0100c82 <cprintf>
f010c1b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c1b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1b8:	8b 40 18             	mov    0x18(%eax),%eax
f010c1bb:	83 ec 08             	sub    $0x8,%esp
f010c1be:	50                   	push   %eax
f010c1bf:	68 26 6f 13 f0       	push   $0xf0136f26
f010c1c4:	e8 b9 4a ff ff       	call   f0100c82 <cprintf>
f010c1c9:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c1cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1cf:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c1d2:	83 ec 08             	sub    $0x8,%esp
f010c1d5:	50                   	push   %eax
f010c1d6:	68 35 6f 13 f0       	push   $0xf0136f35
f010c1db:	e8 a2 4a ff ff       	call   f0100c82 <cprintf>
f010c1e0:	83 c4 10             	add    $0x10,%esp
}
f010c1e3:	90                   	nop
f010c1e4:	c9                   	leave  
f010c1e5:	c3                   	ret    

f010c1e6 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c1e6:	55                   	push   %ebp
f010c1e7:	89 e5                	mov    %esp,%ebp
f010c1e9:	57                   	push   %edi
f010c1ea:	56                   	push   %esi
f010c1eb:	53                   	push   %ebx
f010c1ec:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c1ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1f2:	8b 40 28             	mov    0x28(%eax),%eax
f010c1f5:	83 f8 0e             	cmp    $0xe,%eax
f010c1f8:	75 29                	jne    f010c223 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c1fa:	83 ec 0c             	sub    $0xc,%esp
f010c1fd:	6a 01                	push   $0x1
f010c1ff:	e8 6b 18 00 00       	call   f010da6f <isPageReplacmentAlgorithmLRU>
f010c204:	83 c4 10             	add    $0x10,%esp
f010c207:	85 c0                	test   %eax,%eax
f010c209:	74 05                	je     f010c210 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c20b:	e8 45 97 ff ff       	call   f0105955 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c210:	83 ec 0c             	sub    $0xc,%esp
f010c213:	ff 75 08             	pushl  0x8(%ebp)
f010c216:	e8 3b 02 00 00       	call   f010c456 <fault_handler>
f010c21b:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c21e:	e9 a5 00 00 00       	jmp    f010c2c8 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c223:	8b 45 08             	mov    0x8(%ebp),%eax
f010c226:	8b 40 28             	mov    0x28(%eax),%eax
f010c229:	83 f8 30             	cmp    $0x30,%eax
f010c22c:	75 42                	jne    f010c270 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c22e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c231:	8b 78 04             	mov    0x4(%eax),%edi
f010c234:	8b 45 08             	mov    0x8(%ebp),%eax
f010c237:	8b 30                	mov    (%eax),%esi
f010c239:	8b 45 08             	mov    0x8(%ebp),%eax
f010c23c:	8b 58 10             	mov    0x10(%eax),%ebx
f010c23f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c242:	8b 48 18             	mov    0x18(%eax),%ecx
f010c245:	8b 45 08             	mov    0x8(%ebp),%eax
f010c248:	8b 50 14             	mov    0x14(%eax),%edx
f010c24b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c24e:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c251:	83 ec 08             	sub    $0x8,%esp
f010c254:	57                   	push   %edi
f010c255:	56                   	push   %esi
f010c256:	53                   	push   %ebx
f010c257:	51                   	push   %ecx
f010c258:	52                   	push   %edx
f010c259:	50                   	push   %eax
f010c25a:	e8 5b 0f 00 00       	call   f010d1ba <syscall>
f010c25f:	83 c4 20             	add    $0x20,%esp
f010c262:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c265:	8b 45 08             	mov    0x8(%ebp),%eax
f010c268:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c26b:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c26e:	eb 58                	jmp    f010c2c8 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c270:	8b 45 08             	mov    0x8(%ebp),%eax
f010c273:	8b 40 28             	mov    0x28(%eax),%eax
f010c276:	83 f8 08             	cmp    $0x8,%eax
f010c279:	75 17                	jne    f010c292 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c27b:	83 ec 04             	sub    $0x4,%esp
f010c27e:	68 44 6f 13 f0       	push   $0xf0136f44
f010c283:	68 e7 00 00 00       	push   $0xe7
f010c288:	68 53 6f 13 f0       	push   $0xf0136f53
f010c28d:	e8 69 3f ff ff       	call   f01001fb <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c292:	8b 45 08             	mov    0x8(%ebp),%eax
f010c295:	8b 40 28             	mov    0x28(%eax),%eax
f010c298:	83 f8 20             	cmp    $0x20,%eax
f010c29b:	75 07                	jne    f010c2a4 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c29d:	e8 92 96 ff ff       	call   f0105934 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c2a2:	eb 24                	jmp    f010c2c8 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c2a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a7:	8b 40 34             	mov    0x34(%eax),%eax
f010c2aa:	66 83 f8 08          	cmp    $0x8,%ax
f010c2ae:	75 17                	jne    f010c2c7 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c2b0:	83 ec 04             	sub    $0x4,%esp
f010c2b3:	68 64 6f 13 f0       	push   $0xf0136f64
f010c2b8:	68 f4 00 00 00       	push   $0xf4
f010c2bd:	68 53 6f 13 f0       	push   $0xf0136f53
f010c2c2:	e8 34 3f ff ff       	call   f01001fb <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010c2c7:	90                   	nop
		}
	}
	return;
}
f010c2c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c2cb:	5b                   	pop    %ebx
f010c2cc:	5e                   	pop    %esi
f010c2cd:	5f                   	pop    %edi
f010c2ce:	5d                   	pop    %ebp
f010c2cf:	c3                   	ret    

f010c2d0 <trap>:

void trap(struct Trapframe *tf)
{
f010c2d0:	55                   	push   %ebp
f010c2d1:	89 e5                	mov    %esp,%ebp
f010c2d3:	57                   	push   %edi
f010c2d4:	56                   	push   %esi
f010c2d5:	53                   	push   %ebx
f010c2d6:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c2d9:	e8 2a 7e ff ff       	call   f0104108 <kclock_stop>

	int userTrap = 0;
f010c2de:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c2e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e8:	8b 40 34             	mov    0x34(%eax),%eax
f010c2eb:	0f b7 c0             	movzwl %ax,%eax
f010c2ee:	83 e0 03             	and    $0x3,%eax
f010c2f1:	83 f8 03             	cmp    $0x3,%eax
f010c2f4:	75 49                	jne    f010c33f <trap+0x6f>
		assert(curenv);
f010c2f6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c2fb:	85 c0                	test   %eax,%eax
f010c2fd:	75 19                	jne    f010c318 <trap+0x48>
f010c2ff:	68 7d 6f 13 f0       	push   $0xf0136f7d
f010c304:	68 84 6f 13 f0       	push   $0xf0136f84
f010c309:	68 04 01 00 00       	push   $0x104
f010c30e:	68 53 6f 13 f0       	push   $0xf0136f53
f010c313:	e8 e3 3e ff ff       	call   f01001fb <_panic>
		curenv->env_tf = *tf;
f010c318:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c31e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c321:	89 c3                	mov    %eax,%ebx
f010c323:	b8 11 00 00 00       	mov    $0x11,%eax
f010c328:	89 d7                	mov    %edx,%edi
f010c32a:	89 de                	mov    %ebx,%esi
f010c32c:	89 c1                	mov    %eax,%ecx
f010c32e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c330:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c335:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c338:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c33f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c342:	8b 40 28             	mov    0x28(%eax),%eax
f010c345:	83 f8 20             	cmp    $0x20,%eax
f010c348:	75 40                	jne    f010c38a <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c34a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c34e:	0f 84 a6 00 00 00    	je     f010c3fa <trap+0x12a>
		{
			assert(curenv);
f010c354:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c359:	85 c0                	test   %eax,%eax
f010c35b:	75 19                	jne    f010c376 <trap+0xa6>
f010c35d:	68 7d 6f 13 f0       	push   $0xf0136f7d
f010c362:	68 84 6f 13 f0       	push   $0xf0136f84
f010c367:	68 10 01 00 00       	push   $0x110
f010c36c:	68 53 6f 13 f0       	push   $0xf0136f53
f010c371:	e8 85 3e ff ff       	call   f01001fb <_panic>
			curenv->nClocks++ ;
f010c376:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c37b:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c381:	42                   	inc    %edx
f010c382:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c388:	eb 70                	jmp    f010c3fa <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c38d:	8b 40 28             	mov    0x28(%eax),%eax
f010c390:	83 f8 0e             	cmp    $0xe,%eax
f010c393:	75 65                	jne    f010c3fa <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c395:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c39a:	84 c0                	test   %al,%al
f010c39c:	74 5c                	je     f010c3fa <trap+0x12a>
			if (userTrap){
f010c39e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3a2:	74 2c                	je     f010c3d0 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c3a4:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c3a9:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c3af:	8b 52 30             	mov    0x30(%edx),%edx
f010c3b2:	89 d1                	mov    %edx,%ecx
f010c3b4:	8a 15 a8 7a 65 f0    	mov    0xf0657aa8,%dl
f010c3ba:	0f b6 d2             	movzbl %dl,%edx
f010c3bd:	01 ca                	add    %ecx,%edx
f010c3bf:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c3c2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c3c7:	83 ec 0c             	sub    $0xc,%esp
f010c3ca:	50                   	push   %eax
f010c3cb:	e8 a2 d4 ff ff       	call   f0109872 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c3d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d3:	8b 40 30             	mov    0x30(%eax),%eax
f010c3d6:	89 c2                	mov    %eax,%edx
f010c3d8:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c3dd:	0f b6 c0             	movzbl %al,%eax
f010c3e0:	01 d0                	add    %edx,%eax
f010c3e2:	89 c2                	mov    %eax,%edx
f010c3e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3e7:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c3ea:	e8 44 7d ff ff       	call   f0104133 <kclock_resume>
				env_pop_tf(tf);
f010c3ef:	83 ec 0c             	sub    $0xc,%esp
f010c3f2:	ff 75 08             	pushl  0x8(%ebp)
f010c3f5:	e8 db d5 ff ff       	call   f01099d5 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c3fa:	83 ec 0c             	sub    $0xc,%esp
f010c3fd:	ff 75 08             	pushl  0x8(%ebp)
f010c400:	e8 e1 fd ff ff       	call   f010c1e6 <trap_dispatch>
f010c405:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c408:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c40c:	74 3d                	je     f010c44b <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c40e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c413:	85 c0                	test   %eax,%eax
f010c415:	74 0d                	je     f010c424 <trap+0x154>
f010c417:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c41c:	8b 40 54             	mov    0x54(%eax),%eax
f010c41f:	83 f8 02             	cmp    $0x2,%eax
f010c422:	74 19                	je     f010c43d <trap+0x16d>
f010c424:	68 9c 6f 13 f0       	push   $0xf0136f9c
f010c429:	68 84 6f 13 f0       	push   $0xf0136f84
f010c42e:	68 25 01 00 00       	push   $0x125
f010c433:	68 53 6f 13 f0       	push   $0xf0136f53
f010c438:	e8 be 3d ff ff       	call   f01001fb <_panic>
		env_run(curenv);
f010c43d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c442:	83 ec 0c             	sub    $0xc,%esp
f010c445:	50                   	push   %eax
f010c446:	e8 27 d4 ff ff       	call   f0109872 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c44b:	83 ec 0c             	sub    $0xc,%esp
f010c44e:	ff 75 08             	pushl  0x8(%ebp)
f010c451:	e8 7f d5 ff ff       	call   f01099d5 <env_pop_tf>

f010c456 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010c456:	55                   	push   %ebp
f010c457:	89 e5                	mov    %esp,%ebp
f010c459:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c45c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c463:	8b 45 08             	mov    0x8(%ebp),%eax
f010c466:	8b 40 34             	mov    0x34(%eax),%eax
f010c469:	0f b7 c0             	movzwl %ax,%eax
f010c46c:	83 e0 03             	and    $0x3,%eax
f010c46f:	83 f8 03             	cmp    $0x3,%eax
f010c472:	75 07                	jne    f010c47b <fault_handler+0x25>
		userTrap = 1;
f010c474:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c47b:	0f 20 d0             	mov    %cr2,%eax
f010c47e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010c481:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c484:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c487:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c48b:	75 29                	jne    f010c4b6 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c48d:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c494:	77 40                	ja     f010c4d6 <fault_handler+0x80>
f010c496:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c49d:	76 37                	jbe    f010c4d6 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010c49f:	83 ec 04             	sub    $0x4,%esp
f010c4a2:	68 cc 6f 13 f0       	push   $0xf0136fcc
f010c4a7:	68 42 01 00 00       	push   $0x142
f010c4ac:	68 53 6f 13 f0       	push   $0xf0136f53
f010c4b1:	e8 45 3d ff ff       	call   f01001fb <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c4b6:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c4bd:	76 17                	jbe    f010c4d6 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010c4bf:	83 ec 04             	sub    $0x4,%esp
f010c4c2:	68 f0 6f 13 f0       	push   $0xf0136ff0
f010c4c7:	68 48 01 00 00       	push   $0x148
f010c4cc:	68 53 6f 13 f0       	push   $0xf0136f53
f010c4d1:	e8 25 3d ff ff       	call   f01001fb <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c4d6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4db:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c4de:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4e3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c4e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c4e9:	c1 ea 16             	shr    $0x16,%edx
f010c4ec:	c1 e2 02             	shl    $0x2,%edx
f010c4ef:	01 d0                	add    %edx,%eax
f010c4f1:	8b 00                	mov    (%eax),%eax
f010c4f3:	83 e0 01             	and    $0x1,%eax
f010c4f6:	85 c0                	test   %eax,%eax
f010c4f8:	75 28                	jne    f010c522 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c4fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4fd:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c503:	8d 50 01             	lea    0x1(%eax),%edx
f010c506:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c509:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c50f:	83 ec 08             	sub    $0x8,%esp
f010c512:	ff 75 ec             	pushl  -0x14(%ebp)
f010c515:	ff 75 e8             	pushl  -0x18(%ebp)
f010c518:	e8 37 16 00 00       	call   f010db54 <table_fault_handler>
f010c51d:	83 c4 10             	add    $0x10,%esp
f010c520:	eb 42                	jmp    f010c564 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c522:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c525:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c52b:	8d 50 01             	lea    0x1(%eax),%edx
f010c52e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c531:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c537:	e8 f6 15 00 00       	call   f010db32 <isBufferingEnabled>
f010c53c:	84 c0                	test   %al,%al
f010c53e:	74 13                	je     f010c553 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c540:	83 ec 08             	sub    $0x8,%esp
f010c543:	ff 75 ec             	pushl  -0x14(%ebp)
f010c546:	ff 75 e8             	pushl  -0x18(%ebp)
f010c549:	e8 41 16 00 00       	call   f010db8f <__page_fault_handler_with_buffering>
f010c54e:	83 c4 10             	add    $0x10,%esp
f010c551:	eb 11                	jmp    f010c564 <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c553:	83 ec 08             	sub    $0x8,%esp
f010c556:	ff 75 ec             	pushl  -0x14(%ebp)
f010c559:	ff 75 e8             	pushl  -0x18(%ebp)
f010c55c:	e8 14 16 00 00       	call   f010db75 <page_fault_handler>
f010c561:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c564:	0f 20 d8             	mov    %cr3,%eax
f010c567:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c56a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c56d:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c570:	90                   	nop
f010c571:	c9                   	leave  
f010c572:	c3                   	ret    
f010c573:	90                   	nop

f010c574 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c574:	6a 0e                	push   $0xe
f010c576:	e9 ed 00 00 00       	jmp    f010c668 <_alltraps>
f010c57b:	90                   	nop

f010c57c <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c57c:	6a 00                	push   $0x0
f010c57e:	6a 30                	push   $0x30
f010c580:	e9 e3 00 00 00       	jmp    f010c668 <_alltraps>
f010c585:	90                   	nop

f010c586 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c586:	6a 08                	push   $0x8
f010c588:	e9 db 00 00 00       	jmp    f010c668 <_alltraps>
f010c58d:	90                   	nop

f010c58e <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c58e:	6a 00                	push   $0x0
f010c590:	6a 00                	push   $0x0
f010c592:	e9 d1 00 00 00       	jmp    f010c668 <_alltraps>
f010c597:	90                   	nop

f010c598 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c598:	6a 00                	push   $0x0
f010c59a:	6a 01                	push   $0x1
f010c59c:	e9 c7 00 00 00       	jmp    f010c668 <_alltraps>
f010c5a1:	90                   	nop

f010c5a2 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c5a2:	6a 00                	push   $0x0
f010c5a4:	6a 02                	push   $0x2
f010c5a6:	e9 bd 00 00 00       	jmp    f010c668 <_alltraps>
f010c5ab:	90                   	nop

f010c5ac <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c5ac:	6a 00                	push   $0x0
f010c5ae:	6a 03                	push   $0x3
f010c5b0:	e9 b3 00 00 00       	jmp    f010c668 <_alltraps>
f010c5b5:	90                   	nop

f010c5b6 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c5b6:	6a 00                	push   $0x0
f010c5b8:	6a 04                	push   $0x4
f010c5ba:	e9 a9 00 00 00       	jmp    f010c668 <_alltraps>
f010c5bf:	90                   	nop

f010c5c0 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c5c0:	6a 00                	push   $0x0
f010c5c2:	6a 05                	push   $0x5
f010c5c4:	e9 9f 00 00 00       	jmp    f010c668 <_alltraps>
f010c5c9:	90                   	nop

f010c5ca <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c5ca:	6a 00                	push   $0x0
f010c5cc:	6a 06                	push   $0x6
f010c5ce:	e9 95 00 00 00       	jmp    f010c668 <_alltraps>
f010c5d3:	90                   	nop

f010c5d4 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c5d4:	6a 00                	push   $0x0
f010c5d6:	6a 07                	push   $0x7
f010c5d8:	e9 8b 00 00 00       	jmp    f010c668 <_alltraps>
f010c5dd:	90                   	nop

f010c5de <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c5de:	6a 0a                	push   $0xa
f010c5e0:	e9 83 00 00 00       	jmp    f010c668 <_alltraps>
f010c5e5:	90                   	nop

f010c5e6 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c5e6:	6a 0b                	push   $0xb
f010c5e8:	eb 7e                	jmp    f010c668 <_alltraps>

f010c5ea <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c5ea:	6a 0c                	push   $0xc
f010c5ec:	eb 7a                	jmp    f010c668 <_alltraps>

f010c5ee <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c5ee:	6a 0d                	push   $0xd
f010c5f0:	eb 76                	jmp    f010c668 <_alltraps>

f010c5f2 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c5f2:	6a 00                	push   $0x0
f010c5f4:	6a 10                	push   $0x10
f010c5f6:	eb 70                	jmp    f010c668 <_alltraps>

f010c5f8 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c5f8:	6a 11                	push   $0x11
f010c5fa:	eb 6c                	jmp    f010c668 <_alltraps>

f010c5fc <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c5fc:	6a 00                	push   $0x0
f010c5fe:	6a 12                	push   $0x12
f010c600:	eb 66                	jmp    f010c668 <_alltraps>

f010c602 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c602:	6a 00                	push   $0x0
f010c604:	6a 13                	push   $0x13
f010c606:	eb 60                	jmp    f010c668 <_alltraps>

f010c608 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c608:	6a 00                	push   $0x0
f010c60a:	6a 20                	push   $0x20
f010c60c:	eb 5a                	jmp    f010c668 <_alltraps>

f010c60e <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c60e:	6a 00                	push   $0x0
f010c610:	6a 21                	push   $0x21
f010c612:	eb 54                	jmp    f010c668 <_alltraps>

f010c614 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c614:	6a 00                	push   $0x0
f010c616:	6a 22                	push   $0x22
f010c618:	eb 4e                	jmp    f010c668 <_alltraps>

f010c61a <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c61a:	6a 00                	push   $0x0
f010c61c:	6a 23                	push   $0x23
f010c61e:	eb 48                	jmp    f010c668 <_alltraps>

f010c620 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c620:	6a 00                	push   $0x0
f010c622:	6a 24                	push   $0x24
f010c624:	eb 42                	jmp    f010c668 <_alltraps>

f010c626 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c626:	6a 00                	push   $0x0
f010c628:	6a 25                	push   $0x25
f010c62a:	eb 3c                	jmp    f010c668 <_alltraps>

f010c62c <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c62c:	6a 00                	push   $0x0
f010c62e:	6a 26                	push   $0x26
f010c630:	eb 36                	jmp    f010c668 <_alltraps>

f010c632 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c632:	6a 00                	push   $0x0
f010c634:	6a 27                	push   $0x27
f010c636:	eb 30                	jmp    f010c668 <_alltraps>

f010c638 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c638:	6a 00                	push   $0x0
f010c63a:	6a 28                	push   $0x28
f010c63c:	eb 2a                	jmp    f010c668 <_alltraps>

f010c63e <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c63e:	6a 00                	push   $0x0
f010c640:	6a 29                	push   $0x29
f010c642:	eb 24                	jmp    f010c668 <_alltraps>

f010c644 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c644:	6a 00                	push   $0x0
f010c646:	6a 2a                	push   $0x2a
f010c648:	eb 1e                	jmp    f010c668 <_alltraps>

f010c64a <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c64a:	6a 00                	push   $0x0
f010c64c:	6a 2b                	push   $0x2b
f010c64e:	eb 18                	jmp    f010c668 <_alltraps>

f010c650 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c650:	6a 00                	push   $0x0
f010c652:	6a 2c                	push   $0x2c
f010c654:	eb 12                	jmp    f010c668 <_alltraps>

f010c656 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c656:	6a 00                	push   $0x0
f010c658:	6a 2d                	push   $0x2d
f010c65a:	eb 0c                	jmp    f010c668 <_alltraps>

f010c65c <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c65c:	6a 00                	push   $0x0
f010c65e:	6a 2e                	push   $0x2e
f010c660:	eb 06                	jmp    f010c668 <_alltraps>

f010c662 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c662:	6a 00                	push   $0x0
f010c664:	6a 2f                	push   $0x2f
f010c666:	eb 00                	jmp    f010c668 <_alltraps>

f010c668 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c668:	1e                   	push   %ds
push %es
f010c669:	06                   	push   %es
pushal
f010c66a:	60                   	pusha  

mov $(GD_KD), %ax
f010c66b:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c66f:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c671:	8e c0                	mov    %eax,%es

push %esp
f010c673:	54                   	push   %esp

call trap
f010c674:	e8 57 fc ff ff       	call   f010c2d0 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c679:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c67a:	61                   	popa   
pop %es
f010c67b:	07                   	pop    %es
pop %ds
f010c67c:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c67d:	83 c4 08             	add    $0x8,%esp

iret
f010c680:	cf                   	iret   

f010c681 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c681:	55                   	push   %ebp
f010c682:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c684:	8b 45 08             	mov    0x8(%ebp),%eax
f010c687:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010c68d:	29 d0                	sub    %edx,%eax
f010c68f:	c1 f8 03             	sar    $0x3,%eax
f010c692:	89 c2                	mov    %eax,%edx
f010c694:	89 d0                	mov    %edx,%eax
f010c696:	c1 e0 02             	shl    $0x2,%eax
f010c699:	01 d0                	add    %edx,%eax
f010c69b:	c1 e0 02             	shl    $0x2,%eax
f010c69e:	01 d0                	add    %edx,%eax
f010c6a0:	c1 e0 02             	shl    $0x2,%eax
f010c6a3:	01 d0                	add    %edx,%eax
f010c6a5:	89 c1                	mov    %eax,%ecx
f010c6a7:	c1 e1 08             	shl    $0x8,%ecx
f010c6aa:	01 c8                	add    %ecx,%eax
f010c6ac:	89 c1                	mov    %eax,%ecx
f010c6ae:	c1 e1 10             	shl    $0x10,%ecx
f010c6b1:	01 c8                	add    %ecx,%eax
f010c6b3:	01 c0                	add    %eax,%eax
f010c6b5:	01 d0                	add    %edx,%eax
}
f010c6b7:	5d                   	pop    %ebp
f010c6b8:	c3                   	ret    

f010c6b9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c6b9:	55                   	push   %ebp
f010c6ba:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c6bc:	ff 75 08             	pushl  0x8(%ebp)
f010c6bf:	e8 bd ff ff ff       	call   f010c681 <to_frame_number>
f010c6c4:	83 c4 04             	add    $0x4,%esp
f010c6c7:	c1 e0 0c             	shl    $0xc,%eax
}
f010c6ca:	c9                   	leave  
f010c6cb:	c3                   	ret    

f010c6cc <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c6cc:	55                   	push   %ebp
f010c6cd:	89 e5                	mov    %esp,%ebp
f010c6cf:	83 ec 18             	sub    $0x18,%esp
f010c6d2:	8b 45 10             	mov    0x10(%ebp),%eax
f010c6d5:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c6d8:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c6dc:	74 26                	je     f010c704 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c6de:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c6e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c6e6:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c6ec:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c6f2:	83 ec 04             	sub    $0x4,%esp
f010c6f5:	50                   	push   %eax
f010c6f6:	52                   	push   %edx
f010c6f7:	68 b0 71 13 f0       	push   $0xf01371b0
f010c6fc:	e8 81 45 ff ff       	call   f0100c82 <cprintf>
f010c701:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c704:	83 ec 04             	sub    $0x4,%esp
f010c707:	ff 75 08             	pushl  0x8(%ebp)
f010c70a:	ff 75 0c             	pushl  0xc(%ebp)
f010c70d:	68 b9 71 13 f0       	push   $0xf01371b9
f010c712:	e8 6b 45 ff ff       	call   f0100c82 <cprintf>
f010c717:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c71a:	90                   	nop
f010c71b:	c9                   	leave  
f010c71c:	c3                   	ret    

f010c71d <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c71d:	55                   	push   %ebp
f010c71e:	89 e5                	mov    %esp,%ebp
f010c720:	83 ec 18             	sub    $0x18,%esp
f010c723:	8b 45 08             	mov    0x8(%ebp),%eax
f010c726:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c729:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c72d:	83 ec 08             	sub    $0x8,%esp
f010c730:	50                   	push   %eax
f010c731:	68 be 71 13 f0       	push   $0xf01371be
f010c736:	e8 47 45 ff ff       	call   f0100c82 <cprintf>
f010c73b:	83 c4 10             	add    $0x10,%esp
}
f010c73e:	90                   	nop
f010c73f:	c9                   	leave  
f010c740:	c3                   	ret    

f010c741 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c741:	55                   	push   %ebp
f010c742:	89 e5                	mov    %esp,%ebp
f010c744:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c747:	e8 70 43 ff ff       	call   f0100abc <cons_getc2>
f010c74c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c74f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c752:	c9                   	leave  
f010c753:	c3                   	ret    

f010c754 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c754:	55                   	push   %ebp
f010c755:	89 e5                	mov    %esp,%ebp
f010c757:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c75a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c75f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c762:	83 ec 0c             	sub    $0xc,%esp
f010c765:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c768:	50                   	push   %eax
f010c769:	e8 ad a0 ff ff       	call   f010681b <allocate_frame>
f010c76e:	83 c4 10             	add    $0x10,%esp
f010c771:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c774:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c778:	75 08                	jne    f010c782 <__sys_allocate_page+0x2e>
		return r ;
f010c77a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c77d:	e9 e9 00 00 00       	jmp    f010c86b <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c782:	8b 45 08             	mov    0x8(%ebp),%eax
f010c785:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c78a:	77 0c                	ja     f010c798 <__sys_allocate_page+0x44>
f010c78c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c78f:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c794:	85 c0                	test   %eax,%eax
f010c796:	74 0a                	je     f010c7a2 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c798:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c79d:	e9 c9 00 00 00       	jmp    f010c86b <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c7a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7a5:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c7aa:	83 f8 04             	cmp    $0x4,%eax
f010c7ad:	74 0a                	je     f010c7b9 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c7af:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c7b4:	e9 b2 00 00 00       	jmp    f010c86b <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c7b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7bc:	83 ec 0c             	sub    $0xc,%esp
f010c7bf:	50                   	push   %eax
f010c7c0:	e8 f4 fe ff ff       	call   f010c6b9 <to_physical_address>
f010c7c5:	83 c4 10             	add    $0x10,%esp
f010c7c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010c7cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c7ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c7d1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c7d4:	6a 02                	push   $0x2
f010c7d6:	68 00 00 80 ef       	push   $0xef800000
f010c7db:	52                   	push   %edx
f010c7dc:	50                   	push   %eax
f010c7dd:	e8 88 a4 ff ff       	call   f0106c6a <map_frame>
f010c7e2:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010c7e5:	83 ec 04             	sub    $0x4,%esp
f010c7e8:	68 00 10 00 00       	push   $0x1000
f010c7ed:	6a 00                	push   $0x0
f010c7ef:	68 00 00 80 ef       	push   $0xef800000
f010c7f4:	e8 ed 45 02 00       	call   f0130de6 <memset>
f010c7f9:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010c7fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c7ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c802:	8b 40 08             	mov    0x8(%eax),%eax
f010c805:	40                   	inc    %eax
f010c806:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010c80a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c80d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c810:	83 ec 08             	sub    $0x8,%esp
f010c813:	68 00 00 80 ef       	push   $0xef800000
f010c818:	50                   	push   %eax
f010c819:	e8 81 a5 ff ff       	call   f0106d9f <unmap_frame>
f010c81e:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010c821:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c824:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c827:	8b 40 08             	mov    0x8(%eax),%eax
f010c82a:	48                   	dec    %eax
f010c82b:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c82f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c832:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c838:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c83b:	ff 75 0c             	pushl  0xc(%ebp)
f010c83e:	51                   	push   %ecx
f010c83f:	52                   	push   %edx
f010c840:	50                   	push   %eax
f010c841:	e8 24 a4 ff ff       	call   f0106c6a <map_frame>
f010c846:	83 c4 10             	add    $0x10,%esp
f010c849:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c84c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c850:	75 14                	jne    f010c866 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010c852:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c855:	83 ec 0c             	sub    $0xc,%esp
f010c858:	50                   	push   %eax
f010c859:	e8 4c a1 ff ff       	call   f01069aa <decrement_references>
f010c85e:	83 c4 10             	add    $0x10,%esp
		return r;
f010c861:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c864:	eb 05                	jmp    f010c86b <__sys_allocate_page+0x117>
	}
	return 0 ;
f010c866:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c86b:	c9                   	leave  
f010c86c:	c3                   	ret    

f010c86d <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c86d:	55                   	push   %ebp
f010c86e:	89 e5                	mov    %esp,%ebp
f010c870:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c873:	83 ec 04             	sub    $0x4,%esp
f010c876:	68 c1 71 13 f0       	push   $0xf01371c1
f010c87b:	68 b3 00 00 00       	push   $0xb3
f010c880:	68 df 71 13 f0       	push   $0xf01371df
f010c885:	e8 71 39 ff ff       	call   f01001fb <_panic>

f010c88a <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c88a:	55                   	push   %ebp
f010c88b:	89 e5                	mov    %esp,%ebp
f010c88d:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c890:	83 ec 04             	sub    $0x4,%esp
f010c893:	68 f4 71 13 f0       	push   $0xf01371f4
f010c898:	68 c3 00 00 00       	push   $0xc3
f010c89d:	68 df 71 13 f0       	push   $0xf01371df
f010c8a2:	e8 54 39 ff ff       	call   f01001fb <_panic>

f010c8a7 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c8a7:	55                   	push   %ebp
f010c8a8:	89 e5                	mov    %esp,%ebp
f010c8aa:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c8ad:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c8b2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c8b5:	83 ec 04             	sub    $0x4,%esp
f010c8b8:	ff 75 0c             	pushl  0xc(%ebp)
f010c8bb:	ff 75 08             	pushl  0x8(%ebp)
f010c8be:	50                   	push   %eax
f010c8bf:	e8 14 c3 ff ff       	call   f0108bd8 <calculate_required_frames>
f010c8c4:	83 c4 10             	add    $0x10,%esp
}
f010c8c7:	c9                   	leave  
f010c8c8:	c3                   	ret    

f010c8c9 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c8c9:	55                   	push   %ebp
f010c8ca:	89 e5                	mov    %esp,%ebp
f010c8cc:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c8cf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c8d2:	83 ec 0c             	sub    $0xc,%esp
f010c8d5:	50                   	push   %eax
f010c8d6:	e8 29 a6 ff ff       	call   f0106f04 <calculate_available_frames>
f010c8db:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c8de:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c8e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c8e4:	01 d0                	add    %edx,%eax
}
f010c8e6:	c9                   	leave  
f010c8e7:	c3                   	ret    

f010c8e8 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c8e8:	55                   	push   %ebp
f010c8e9:	89 e5                	mov    %esp,%ebp
f010c8eb:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c8ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c8f1:	83 ec 0c             	sub    $0xc,%esp
f010c8f4:	50                   	push   %eax
f010c8f5:	e8 0a a6 ff ff       	call   f0106f04 <calculate_available_frames>
f010c8fa:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c8fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c900:	c9                   	leave  
f010c901:	c3                   	ret    

f010c902 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c902:	55                   	push   %ebp
f010c903:	89 e5                	mov    %esp,%ebp
f010c905:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c908:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c90b:	83 ec 0c             	sub    $0xc,%esp
f010c90e:	50                   	push   %eax
f010c90f:	e8 f0 a5 ff ff       	call   f0106f04 <calculate_available_frames>
f010c914:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c917:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c91a:	c9                   	leave  
f010c91b:	c3                   	ret    

f010c91c <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c91c:	55                   	push   %ebp
f010c91d:	89 e5                	mov    %esp,%ebp
f010c91f:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c922:	83 ec 0c             	sub    $0xc,%esp
f010c925:	ff 75 08             	pushl  0x8(%ebp)
f010c928:	e8 d6 31 02 00       	call   f012fb03 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c92d:	83 c4 10             	add    $0x10,%esp
}
f010c930:	c9                   	leave  
f010c931:	c3                   	ret    

f010c932 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c932:	55                   	push   %ebp
f010c933:	89 e5                	mov    %esp,%ebp
f010c935:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c938:	e8 1e 31 02 00       	call   f012fa5b <scarce_memory>
}
f010c93d:	90                   	nop
f010c93e:	c9                   	leave  
f010c93f:	c3                   	ret    

f010c940 <sys_clearFFL>:

void sys_clearFFL()
{
f010c940:	55                   	push   %ebp
f010c941:	89 e5                	mov    %esp,%ebp
f010c943:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c946:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010c94b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c94e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c955:	eb 12                	jmp    f010c969 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c957:	83 ec 0c             	sub    $0xc,%esp
f010c95a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c95d:	50                   	push   %eax
f010c95e:	e8 b8 9e ff ff       	call   f010681b <allocate_frame>
f010c963:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c966:	ff 45 f4             	incl   -0xc(%ebp)
f010c969:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c96c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c96f:	7c e6                	jl     f010c957 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c971:	90                   	nop
f010c972:	c9                   	leave  
f010c973:	c3                   	ret    

f010c974 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c974:	55                   	push   %ebp
f010c975:	89 e5                	mov    %esp,%ebp
f010c977:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c97a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c97f:	83 ec 0c             	sub    $0xc,%esp
f010c982:	50                   	push   %eax
f010c983:	e8 14 73 ff ff       	call   f0103c9c <pf_calculate_allocated_pages>
f010c988:	83 c4 10             	add    $0x10,%esp
}
f010c98b:	c9                   	leave  
f010c98c:	c3                   	ret    

f010c98d <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c98d:	55                   	push   %ebp
f010c98e:	89 e5                	mov    %esp,%ebp
f010c990:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c993:	e8 9a 11 00 00       	call   f010db32 <isBufferingEnabled>
f010c998:	84 c0                	test   %al,%al
f010c99a:	74 19                	je     f010c9b5 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c99c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9a1:	83 ec 04             	sub    $0x4,%esp
f010c9a4:	ff 75 0c             	pushl  0xc(%ebp)
f010c9a7:	ff 75 08             	pushl  0x8(%ebp)
f010c9aa:	50                   	push   %eax
f010c9ab:	e8 7f c2 ff ff       	call   f0108c2f <__free_user_mem_with_buffering>
f010c9b0:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c9b3:	eb 18                	jmp    f010c9cd <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c9b5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9ba:	83 ec 04             	sub    $0x4,%esp
f010c9bd:	ff 75 0c             	pushl  0xc(%ebp)
f010c9c0:	ff 75 08             	pushl  0x8(%ebp)
f010c9c3:	50                   	push   %eax
f010c9c4:	e8 49 c2 ff ff       	call   f0108c12 <free_user_mem>
f010c9c9:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c9cc:	90                   	nop
}
f010c9cd:	c9                   	leave  
f010c9ce:	c3                   	ret    

f010c9cf <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c9cf:	55                   	push   %ebp
f010c9d0:	89 e5                	mov    %esp,%ebp
f010c9d2:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c9d5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9da:	83 ec 04             	sub    $0x4,%esp
f010c9dd:	ff 75 0c             	pushl  0xc(%ebp)
f010c9e0:	ff 75 08             	pushl  0x8(%ebp)
f010c9e3:	50                   	push   %eax
f010c9e4:	e8 0c c2 ff ff       	call   f0108bf5 <allocate_user_mem>
f010c9e9:	83 c4 10             	add    $0x10,%esp
	return;
f010c9ec:	90                   	nop
}
f010c9ed:	c9                   	leave  
f010c9ee:	c3                   	ret    

f010c9ef <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c9ef:	55                   	push   %ebp
f010c9f0:	89 e5                	mov    %esp,%ebp
f010c9f2:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c9f5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9fa:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c9fd:	ff 75 10             	pushl  0x10(%ebp)
f010ca00:	ff 75 0c             	pushl  0xc(%ebp)
f010ca03:	ff 75 08             	pushl  0x8(%ebp)
f010ca06:	50                   	push   %eax
f010ca07:	e8 89 c0 ff ff       	call   f0108a95 <allocate_chunk>
f010ca0c:	83 c4 10             	add    $0x10,%esp
	return;
f010ca0f:	90                   	nop
}
f010ca10:	c9                   	leave  
f010ca11:	c3                   	ret    

f010ca12 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010ca12:	55                   	push   %ebp
f010ca13:	89 e5                	mov    %esp,%ebp
f010ca15:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010ca18:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca1d:	ff 75 10             	pushl  0x10(%ebp)
f010ca20:	ff 75 0c             	pushl  0xc(%ebp)
f010ca23:	ff 75 08             	pushl  0x8(%ebp)
f010ca26:	50                   	push   %eax
f010ca27:	e8 20 c2 ff ff       	call   f0108c4c <move_user_mem>
f010ca2c:	83 c4 10             	add    $0x10,%esp
	return;
f010ca2f:	90                   	nop
}
f010ca30:	c9                   	leave  
f010ca31:	c3                   	ret    

f010ca32 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010ca32:	55                   	push   %ebp
f010ca33:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010ca35:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
}
f010ca3a:	5d                   	pop    %ebp
f010ca3b:	c3                   	ret    

f010ca3c <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010ca3c:	55                   	push   %ebp
f010ca3d:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010ca3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca42:	a3 30 7b 65 f0       	mov    %eax,0xf0657b30
}
f010ca47:	90                   	nop
f010ca48:	5d                   	pop    %ebp
f010ca49:	c3                   	ret    

f010ca4a <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010ca4a:	55                   	push   %ebp
f010ca4b:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010ca4d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca52:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010ca58:	8b 52 38             	mov    0x38(%edx),%edx
f010ca5b:	80 e6 fd             	and    $0xfd,%dh
f010ca5e:	89 50 38             	mov    %edx,0x38(%eax)
}
f010ca61:	90                   	nop
f010ca62:	5d                   	pop    %ebp
f010ca63:	c3                   	ret    

f010ca64 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010ca64:	55                   	push   %ebp
f010ca65:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010ca67:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca6c:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010ca72:	8b 52 38             	mov    0x38(%edx),%edx
f010ca75:	80 ce 02             	or     $0x2,%dh
f010ca78:	89 50 38             	mov    %edx,0x38(%eax)
}
f010ca7b:	90                   	nop
f010ca7c:	5d                   	pop    %ebp
f010ca7d:	c3                   	ret    

f010ca7e <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010ca7e:	55                   	push   %ebp
f010ca7f:	89 e5                	mov    %esp,%ebp
f010ca81:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010ca84:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca89:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ca8c:	83 ec 04             	sub    $0x4,%esp
f010ca8f:	ff 75 0c             	pushl  0xc(%ebp)
f010ca92:	ff 75 08             	pushl  0x8(%ebp)
f010ca95:	50                   	push   %eax
f010ca96:	e8 b0 14 00 00       	call   f010df4b <createSemaphore>
f010ca9b:	83 c4 10             	add    $0x10,%esp
}
f010ca9e:	c9                   	leave  
f010ca9f:	c3                   	ret    

f010caa0 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010caa0:	55                   	push   %ebp
f010caa1:	89 e5                	mov    %esp,%ebp
f010caa3:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010caa6:	83 ec 08             	sub    $0x8,%esp
f010caa9:	ff 75 0c             	pushl  0xc(%ebp)
f010caac:	ff 75 08             	pushl  0x8(%ebp)
f010caaf:	e8 b4 14 00 00       	call   f010df68 <waitSemaphore>
f010cab4:	83 c4 10             	add    $0x10,%esp
}
f010cab7:	90                   	nop
f010cab8:	c9                   	leave  
f010cab9:	c3                   	ret    

f010caba <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010caba:	55                   	push   %ebp
f010cabb:	89 e5                	mov    %esp,%ebp
f010cabd:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cac0:	83 ec 08             	sub    $0x8,%esp
f010cac3:	ff 75 0c             	pushl  0xc(%ebp)
f010cac6:	ff 75 08             	pushl  0x8(%ebp)
f010cac9:	e8 b7 14 00 00       	call   f010df85 <signalSemaphore>
f010cace:	83 c4 10             	add    $0x10,%esp
}
f010cad1:	90                   	nop
f010cad2:	c9                   	leave  
f010cad3:	c3                   	ret    

f010cad4 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cad4:	55                   	push   %ebp
f010cad5:	89 e5                	mov    %esp,%ebp
f010cad7:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cada:	83 ec 08             	sub    $0x8,%esp
f010cadd:	ff 75 0c             	pushl  0xc(%ebp)
f010cae0:	ff 75 08             	pushl  0x8(%ebp)
f010cae3:	e8 db 12 00 00       	call   f010ddc3 <get_semaphore_object_ID>
f010cae8:	83 c4 10             	add    $0x10,%esp
f010caeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010caee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010caf2:	78 0c                	js     f010cb00 <sys_getSemaphoreValue+0x2c>
f010caf4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010caf7:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010cafc:	39 c2                	cmp    %eax,%edx
f010cafe:	72 19                	jb     f010cb19 <sys_getSemaphoreValue+0x45>
f010cb00:	68 14 72 13 f0       	push   $0xf0137214
f010cb05:	68 39 72 13 f0       	push   $0xf0137239
f010cb0a:	68 4a 01 00 00       	push   $0x14a
f010cb0f:	68 df 71 13 f0       	push   $0xf01371df
f010cb14:	e8 e2 36 ff ff       	call   f01001fb <_panic>

	return semaphores[semID].value ;
f010cb19:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010cb1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cb22:	89 d0                	mov    %edx,%eax
f010cb24:	c1 e0 02             	shl    $0x2,%eax
f010cb27:	01 d0                	add    %edx,%eax
f010cb29:	01 c0                	add    %eax,%eax
f010cb2b:	01 d0                	add    %edx,%eax
f010cb2d:	01 c0                	add    %eax,%eax
f010cb2f:	01 d0                	add    %edx,%eax
f010cb31:	c1 e0 02             	shl    $0x2,%eax
f010cb34:	01 c8                	add    %ecx,%eax
f010cb36:	8b 40 54             	mov    0x54(%eax),%eax
}
f010cb39:	c9                   	leave  
f010cb3a:	c3                   	ret    

f010cb3b <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cb3b:	55                   	push   %ebp
f010cb3c:	89 e5                	mov    %esp,%ebp
f010cb3e:	83 ec 18             	sub    $0x18,%esp
f010cb41:	8b 45 10             	mov    0x10(%ebp),%eax
f010cb44:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cb47:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cb4b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb50:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb53:	83 ec 0c             	sub    $0xc,%esp
f010cb56:	ff 75 14             	pushl  0x14(%ebp)
f010cb59:	52                   	push   %edx
f010cb5a:	ff 75 0c             	pushl  0xc(%ebp)
f010cb5d:	ff 75 08             	pushl  0x8(%ebp)
f010cb60:	50                   	push   %eax
f010cb61:	e8 9f a9 ff ff       	call   f0107505 <createSharedObject>
f010cb66:	83 c4 20             	add    $0x20,%esp
}
f010cb69:	c9                   	leave  
f010cb6a:	c3                   	ret    

f010cb6b <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cb6b:	55                   	push   %ebp
f010cb6c:	89 e5                	mov    %esp,%ebp
f010cb6e:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cb71:	83 ec 08             	sub    $0x8,%esp
f010cb74:	ff 75 0c             	pushl  0xc(%ebp)
f010cb77:	ff 75 08             	pushl  0x8(%ebp)
f010cb7a:	e8 a9 a9 ff ff       	call   f0107528 <getSizeOfSharedObject>
f010cb7f:	83 c4 10             	add    $0x10,%esp
}
f010cb82:	c9                   	leave  
f010cb83:	c3                   	ret    

f010cb84 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cb84:	55                   	push   %ebp
f010cb85:	89 e5                	mov    %esp,%ebp
f010cb87:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cb8a:	83 ec 04             	sub    $0x4,%esp
f010cb8d:	ff 75 10             	pushl  0x10(%ebp)
f010cb90:	ff 75 0c             	pushl  0xc(%ebp)
f010cb93:	ff 75 08             	pushl  0x8(%ebp)
f010cb96:	e8 aa a9 ff ff       	call   f0107545 <getSharedObject>
f010cb9b:	83 c4 10             	add    $0x10,%esp
}
f010cb9e:	c9                   	leave  
f010cb9f:	c3                   	ret    

f010cba0 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cba0:	55                   	push   %ebp
f010cba1:	89 e5                	mov    %esp,%ebp
f010cba3:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cba6:	83 ec 08             	sub    $0x8,%esp
f010cba9:	ff 75 0c             	pushl  0xc(%ebp)
f010cbac:	ff 75 08             	pushl  0x8(%ebp)
f010cbaf:	e8 ae a9 ff ff       	call   f0107562 <freeSharedObject>
f010cbb4:	83 c4 10             	add    $0x10,%esp
}
f010cbb7:	c9                   	leave  
f010cbb8:	c3                   	ret    

f010cbb9 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cbb9:	55                   	push   %ebp
f010cbba:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010cbbc:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
}
f010cbc1:	5d                   	pop    %ebp
f010cbc2:	c3                   	ret    

f010cbc3 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010cbc3:	55                   	push   %ebp
f010cbc4:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010cbc6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbcb:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cbce:	5d                   	pop    %ebp
f010cbcf:	c3                   	ret    

f010cbd0 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cbd0:	55                   	push   %ebp
f010cbd1:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cbd3:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbd8:	89 c2                	mov    %eax,%edx
f010cbda:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f010cbdf:	29 c2                	sub    %eax,%edx
f010cbe1:	89 d0                	mov    %edx,%eax
f010cbe3:	c1 f8 04             	sar    $0x4,%eax
f010cbe6:	89 c2                	mov    %eax,%edx
f010cbe8:	89 d0                	mov    %edx,%eax
f010cbea:	c1 e0 03             	shl    $0x3,%eax
f010cbed:	01 d0                	add    %edx,%eax
f010cbef:	01 c0                	add    %eax,%eax
f010cbf1:	01 d0                	add    %edx,%eax
f010cbf3:	c1 e0 03             	shl    $0x3,%eax
f010cbf6:	01 d0                	add    %edx,%eax
f010cbf8:	89 c1                	mov    %eax,%ecx
f010cbfa:	c1 e1 08             	shl    $0x8,%ecx
f010cbfd:	01 c8                	add    %ecx,%eax
f010cbff:	01 c0                	add    %eax,%eax
f010cc01:	01 d0                	add    %edx,%eax
f010cc03:	01 c0                	add    %eax,%eax
f010cc05:	01 d0                	add    %edx,%eax
f010cc07:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cc0e:	01 d0                	add    %edx,%eax
f010cc10:	89 c2                	mov    %eax,%edx
f010cc12:	c1 e2 09             	shl    $0x9,%edx
f010cc15:	29 c2                	sub    %eax,%edx
f010cc17:	89 d0                	mov    %edx,%eax
f010cc19:	f7 d8                	neg    %eax
}
f010cc1b:	5d                   	pop    %ebp
f010cc1c:	c3                   	ret    

f010cc1d <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cc1d:	55                   	push   %ebp
f010cc1e:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cc20:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc25:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cc28:	5d                   	pop    %ebp
f010cc29:	c3                   	ret    

f010cc2a <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cc2a:	55                   	push   %ebp
f010cc2b:	89 e5                	mov    %esp,%ebp
f010cc2d:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cc30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cc34:	75 0a                	jne    f010cc40 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cc36:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cc3e:	eb 22                	jmp    f010cc62 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cc40:	83 ec 04             	sub    $0x4,%esp
f010cc43:	6a 00                	push   $0x0
f010cc45:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cc48:	50                   	push   %eax
f010cc49:	ff 75 08             	pushl  0x8(%ebp)
f010cc4c:	e8 bf cc ff ff       	call   f0109910 <envid2env>
f010cc51:	83 c4 10             	add    $0x10,%esp
f010cc54:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cc57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc5b:	79 05                	jns    f010cc62 <sys_destroy_env+0x38>
	{
		return r;
f010cc5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc60:	eb 5e                	jmp    f010ccc0 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cc62:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cc65:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc6a:	39 c2                	cmp    %eax,%edx
f010cc6c:	75 1b                	jne    f010cc89 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cc6e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc73:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc76:	83 ec 08             	sub    $0x8,%esp
f010cc79:	50                   	push   %eax
f010cc7a:	68 4e 72 13 f0       	push   $0xf013724e
f010cc7f:	e8 fe 3f ff ff       	call   f0100c82 <cprintf>
f010cc84:	83 c4 10             	add    $0x10,%esp
f010cc87:	eb 20                	jmp    f010cca9 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cc89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc8c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cc8f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc94:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc97:	83 ec 04             	sub    $0x4,%esp
f010cc9a:	52                   	push   %edx
f010cc9b:	50                   	push   %eax
f010cc9c:	68 69 72 13 f0       	push   $0xf0137269
f010cca1:	e8 dc 3f ff ff       	call   f0100c82 <cprintf>
f010cca6:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ccac:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ccaf:	83 ec 0c             	sub    $0xc,%esp
f010ccb2:	50                   	push   %eax
f010ccb3:	e8 b0 88 ff ff       	call   f0105568 <sched_kill_env>
f010ccb8:	83 c4 10             	add    $0x10,%esp

	return 0;
f010ccbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ccc0:	c9                   	leave  
f010ccc1:	c3                   	ret    

f010ccc2 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010ccc2:	55                   	push   %ebp
f010ccc3:	89 e5                	mov    %esp,%ebp
f010ccc5:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010ccc8:	e8 24 cc ff ff       	call   f01098f1 <env_exit>
	//env_run_cmd_prmpt();
}
f010cccd:	90                   	nop
f010ccce:	c9                   	leave  
f010cccf:	c3                   	ret    

f010ccd0 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ccd0:	55                   	push   %ebp
f010ccd1:	89 e5                	mov    %esp,%ebp
f010ccd3:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010ccd6:	ff 75 14             	pushl  0x14(%ebp)
f010ccd9:	ff 75 10             	pushl  0x10(%ebp)
f010ccdc:	ff 75 0c             	pushl  0xc(%ebp)
f010ccdf:	ff 75 08             	pushl  0x8(%ebp)
f010cce2:	e8 82 bf ff ff       	call   f0108c69 <env_create>
f010cce7:	83 c4 10             	add    $0x10,%esp
f010ccea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ccf1:	75 07                	jne    f010ccfa <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ccf3:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ccf8:	eb 14                	jmp    f010cd0e <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ccfa:	83 ec 0c             	sub    $0xc,%esp
f010ccfd:	ff 75 f4             	pushl  -0xc(%ebp)
f010cd00:	e8 28 84 ff ff       	call   f010512d <sched_new_env>
f010cd05:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010cd08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd0b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cd0e:	c9                   	leave  
f010cd0f:	c3                   	ret    

f010cd10 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cd10:	55                   	push   %ebp
f010cd11:	89 e5                	mov    %esp,%ebp
f010cd13:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cd16:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd19:	83 ec 0c             	sub    $0xc,%esp
f010cd1c:	50                   	push   %eax
f010cd1d:	e8 28 84 ff ff       	call   f010514a <sched_run_env>
f010cd22:	83 c4 10             	add    $0x10,%esp
}
f010cd25:	90                   	nop
f010cd26:	c9                   	leave  
f010cd27:	c3                   	ret    

f010cd28 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cd28:	55                   	push   %ebp
f010cd29:	89 e5                	mov    %esp,%ebp
f010cd2b:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010cd2e:	0f 31                	rdtsc  
f010cd30:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cd33:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010cd36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cd3c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cd3f:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010cd42:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cd45:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cd48:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cd4b:	89 01                	mov    %eax,(%ecx)
f010cd4d:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010cd50:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd53:	c9                   	leave  
f010cd54:	c2 04 00             	ret    $0x4

f010cd57 <sys_rcr2>:

uint32 sys_rcr2()
{
f010cd57:	55                   	push   %ebp
f010cd58:	89 e5                	mov    %esp,%ebp
f010cd5a:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cd5d:	0f 20 d0             	mov    %cr2,%eax
f010cd60:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010cd63:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010cd66:	90                   	nop
}
f010cd67:	c9                   	leave  
f010cd68:	c3                   	ret    

f010cd69 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010cd69:	55                   	push   %ebp
f010cd6a:	89 e5                	mov    %esp,%ebp
f010cd6c:	83 ec 04             	sub    $0x4,%esp
f010cd6f:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd72:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010cd75:	8a 45 fc             	mov    -0x4(%ebp),%al
f010cd78:	a2 a8 7a 65 f0       	mov    %al,0xf0657aa8
}
f010cd7d:	90                   	nop
f010cd7e:	c9                   	leave  
f010cd7f:	c3                   	ret    

f010cd80 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010cd80:	55                   	push   %ebp
f010cd81:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010cd83:	c7 05 b0 7c 65 f0 00 	movl   $0x0,0xf0657cb0
f010cd8a:	00 00 00 
}
f010cd8d:	90                   	nop
f010cd8e:	5d                   	pop    %ebp
f010cd8f:	c3                   	ret    

f010cd90 <inctst>:
void inctst()
{
f010cd90:	55                   	push   %ebp
f010cd91:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010cd93:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010cd98:	40                   	inc    %eax
f010cd99:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
}
f010cd9e:	90                   	nop
f010cd9f:	5d                   	pop    %ebp
f010cda0:	c3                   	ret    

f010cda1 <gettst>:
uint32 gettst()
{
f010cda1:	55                   	push   %ebp
f010cda2:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010cda4:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
}
f010cda9:	5d                   	pop    %ebp
f010cdaa:	c3                   	ret    

f010cdab <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010cdab:	55                   	push   %ebp
f010cdac:	89 e5                	mov    %esp,%ebp
f010cdae:	83 ec 28             	sub    $0x28,%esp
f010cdb1:	8b 45 14             	mov    0x14(%ebp),%eax
f010cdb4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010cdb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010cdbe:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010cdc2:	83 f8 65             	cmp    $0x65,%eax
f010cdc5:	74 5d                	je     f010ce24 <tst+0x79>
f010cdc7:	83 f8 65             	cmp    $0x65,%eax
f010cdca:	7f 0a                	jg     f010cdd6 <tst+0x2b>
f010cdcc:	83 f8 62             	cmp    $0x62,%eax
f010cdcf:	74 73                	je     f010ce44 <tst+0x99>
f010cdd1:	e9 91 00 00 00       	jmp    f010ce67 <tst+0xbc>
f010cdd6:	83 f8 67             	cmp    $0x67,%eax
f010cdd9:	74 29                	je     f010ce04 <tst+0x59>
f010cddb:	83 f8 6c             	cmp    $0x6c,%eax
f010cdde:	0f 85 83 00 00 00    	jne    f010ce67 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010cde4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cde7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cdea:	73 09                	jae    f010cdf5 <tst+0x4a>
			chk = 1;
f010cdec:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cdf3:	eb 68                	jmp    f010ce5d <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010cdf5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010cdf9:	74 62                	je     f010ce5d <tst+0xb2>
			chk = 1;
f010cdfb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce02:	eb 59                	jmp    f010ce5d <tst+0xb2>
	case 'g':
		if (n > v1)
f010ce04:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce07:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce0a:	76 09                	jbe    f010ce15 <tst+0x6a>
			chk = 1;
f010ce0c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ce13:	eb 4b                	jmp    f010ce60 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010ce15:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ce19:	74 45                	je     f010ce60 <tst+0xb5>
			chk = 1;
f010ce1b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce22:	eb 3c                	jmp    f010ce60 <tst+0xb5>
	case 'e':
		if (n == v1)
f010ce24:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce27:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce2a:	75 09                	jne    f010ce35 <tst+0x8a>
			chk = 1;
f010ce2c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ce33:	eb 2e                	jmp    f010ce63 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010ce35:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ce39:	74 28                	je     f010ce63 <tst+0xb8>
			chk = 1;
f010ce3b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce42:	eb 1f                	jmp    f010ce63 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010ce44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce47:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce4a:	72 1a                	jb     f010ce66 <tst+0xbb>
f010ce4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce4f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce52:	77 12                	ja     f010ce66 <tst+0xbb>
			chk = 1;
f010ce54:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce5b:	eb 09                	jmp    f010ce66 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ce5d:	90                   	nop
f010ce5e:	eb 07                	jmp    f010ce67 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ce60:	90                   	nop
f010ce61:	eb 04                	jmp    f010ce67 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ce63:	90                   	nop
f010ce64:	eb 01                	jmp    f010ce67 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010ce66:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010ce67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ce6b:	75 17                	jne    f010ce84 <tst+0xd9>
f010ce6d:	83 ec 04             	sub    $0x4,%esp
f010ce70:	68 81 72 13 f0       	push   $0xf0137281
f010ce75:	68 00 02 00 00       	push   $0x200
f010ce7a:	68 df 71 13 f0       	push   $0xf01371df
f010ce7f:	e8 77 33 ff ff       	call   f01001fb <_panic>
	tstcnt++ ;
f010ce84:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010ce89:	40                   	inc    %eax
f010ce8a:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
	return;
f010ce8f:	90                   	nop
}
f010ce90:	c9                   	leave  
f010ce91:	c3                   	ret    

f010ce92 <chktst>:

void chktst(uint32 n)
{
f010ce92:	55                   	push   %ebp
f010ce93:	89 e5                	mov    %esp,%ebp
f010ce95:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010ce98:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010ce9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cea0:	75 12                	jne    f010ceb4 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010cea2:	83 ec 0c             	sub    $0xc,%esp
f010cea5:	68 94 72 13 f0       	push   $0xf0137294
f010ceaa:	e8 d3 3d ff ff       	call   f0100c82 <cprintf>
f010ceaf:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010ceb2:	eb 17                	jmp    f010cecb <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010ceb4:	83 ec 04             	sub    $0x4,%esp
f010ceb7:	68 c0 72 13 f0       	push   $0xf01372c0
f010cebc:	68 0a 02 00 00       	push   $0x20a
f010cec1:	68 df 71 13 f0       	push   $0xf01371df
f010cec6:	e8 30 33 ff ff       	call   f01001fb <_panic>
}
f010cecb:	c9                   	leave  
f010cecc:	c3                   	ret    

f010cecd <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010cecd:	55                   	push   %ebp
f010cece:	89 e5                	mov    %esp,%ebp
f010ced0:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010ced3:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ced8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010cedb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010cee2:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010cee9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ceed:	0f 84 a5 00 00 00    	je     f010cf98 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010cef3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cefa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cefd:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010cf03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf06:	eb 4a                	jmp    f010cf52 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010cf08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf0b:	8b 00                	mov    (%eax),%eax
f010cf0d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cf10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cf18:	89 c2                	mov    %eax,%edx
f010cf1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf1d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cf24:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf27:	01 c8                	add    %ecx,%eax
f010cf29:	8b 00                	mov    (%eax),%eax
f010cf2b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cf2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cf31:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cf36:	39 c2                	cmp    %eax,%edx
f010cf38:	74 09                	je     f010cf43 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010cf3a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010cf41:	eb 3e                	jmp    f010cf81 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010cf43:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cf46:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf49:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010cf4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf56:	74 08                	je     f010cf60 <sys_check_LRU_lists+0x93>
f010cf58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf5b:	8b 40 10             	mov    0x10(%eax),%eax
f010cf5e:	eb 05                	jmp    f010cf65 <sys_check_LRU_lists+0x98>
f010cf60:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf65:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf68:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010cf6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf71:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010cf77:	85 c0                	test   %eax,%eax
f010cf79:	75 8d                	jne    f010cf08 <sys_check_LRU_lists+0x3b>
f010cf7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf7f:	75 87                	jne    f010cf08 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010cf81:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf84:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010cf8a:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf8d:	39 c2                	cmp    %eax,%edx
f010cf8f:	74 07                	je     f010cf98 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010cf91:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010cf98:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010cf9c:	0f 84 a5 00 00 00    	je     f010d047 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010cfa2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cfa9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfac:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010cfb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cfb5:	eb 4a                	jmp    f010d001 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010cfb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfba:	8b 00                	mov    (%eax),%eax
f010cfbc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cfbf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cfc2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cfc7:	89 c2                	mov    %eax,%edx
f010cfc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cfcc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cfd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfd6:	01 c8                	add    %ecx,%eax
f010cfd8:	8b 00                	mov    (%eax),%eax
f010cfda:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010cfdd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cfe0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cfe5:	39 c2                	cmp    %eax,%edx
f010cfe7:	74 09                	je     f010cff2 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010cfe9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010cff0:	eb 3e                	jmp    f010d030 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010cff2:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cff8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010cffe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d001:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d005:	74 08                	je     f010d00f <sys_check_LRU_lists+0x142>
f010d007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d00a:	8b 40 10             	mov    0x10(%eax),%eax
f010d00d:	eb 05                	jmp    f010d014 <sys_check_LRU_lists+0x147>
f010d00f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d014:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d017:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d01d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d020:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d026:	85 c0                	test   %eax,%eax
f010d028:	75 8d                	jne    f010cfb7 <sys_check_LRU_lists+0xea>
f010d02a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d02e:	75 87                	jne    f010cfb7 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d030:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d033:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d039:	8b 45 14             	mov    0x14(%ebp),%eax
f010d03c:	39 c2                	cmp    %eax,%edx
f010d03e:	74 07                	je     f010d047 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d040:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d047:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d04a:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d04d:	c9                   	leave  
f010d04e:	c3                   	ret    

f010d04f <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d04f:	55                   	push   %ebp
f010d050:	89 e5                	mov    %esp,%ebp
f010d052:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d055:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010d05a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d05d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d064:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d067:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d06d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d070:	eb 65                	jmp    f010d0d7 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d072:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d079:	eb 3a                	jmp    f010d0b5 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d07b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d07e:	8b 00                	mov    (%eax),%eax
f010d080:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d083:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d086:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d08b:	89 c2                	mov    %eax,%edx
f010d08d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d090:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d097:	8b 45 08             	mov    0x8(%ebp),%eax
f010d09a:	01 c8                	add    %ecx,%eax
f010d09c:	8b 00                	mov    (%eax),%eax
f010d09e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d0a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d0a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d0a9:	39 c2                	cmp    %eax,%edx
f010d0ab:	75 05                	jne    f010d0b2 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d0ad:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d0b0:	eb 0b                	jmp    f010d0bd <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d0b2:	ff 45 f4             	incl   -0xc(%ebp)
f010d0b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0b8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0bb:	7c be                	jl     f010d07b <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d0bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d0c1:	7e 08                	jle    f010d0cb <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d0c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d0c6:	e9 ed 00 00 00       	jmp    f010d1b8 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d0cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0ce:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d0d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d0d7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d0db:	74 08                	je     f010d0e5 <sys_check_LRU_lists_free+0x96>
f010d0dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d0e0:	8b 40 10             	mov    0x10(%eax),%eax
f010d0e3:	eb 05                	jmp    f010d0ea <sys_check_LRU_lists_free+0x9b>
f010d0e5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d0ed:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d0f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0f6:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d0fc:	85 c0                	test   %eax,%eax
f010d0fe:	0f 85 6e ff ff ff    	jne    f010d072 <sys_check_LRU_lists_free+0x23>
f010d104:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d108:	0f 85 64 ff ff ff    	jne    f010d072 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d10e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d111:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d117:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d11a:	eb 62                	jmp    f010d17e <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d11c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d123:	eb 3a                	jmp    f010d15f <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d125:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d128:	8b 00                	mov    (%eax),%eax
f010d12a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d12d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d130:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d135:	89 c2                	mov    %eax,%edx
f010d137:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d13a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d141:	8b 45 08             	mov    0x8(%ebp),%eax
f010d144:	01 c8                	add    %ecx,%eax
f010d146:	8b 00                	mov    (%eax),%eax
f010d148:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d14b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d14e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d153:	39 c2                	cmp    %eax,%edx
f010d155:	75 05                	jne    f010d15c <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d157:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d15a:	eb 0b                	jmp    f010d167 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d15c:	ff 45 f0             	incl   -0x10(%ebp)
f010d15f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d162:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d165:	7c be                	jl     f010d125 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d167:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d16b:	7e 05                	jle    f010d172 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d16d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d170:	eb 46                	jmp    f010d1b8 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d172:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d175:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d17b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d17e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d182:	74 08                	je     f010d18c <sys_check_LRU_lists_free+0x13d>
f010d184:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d187:	8b 40 10             	mov    0x10(%eax),%eax
f010d18a:	eb 05                	jmp    f010d191 <sys_check_LRU_lists_free+0x142>
f010d18c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d191:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d194:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d19a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d19d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d1a3:	85 c0                	test   %eax,%eax
f010d1a5:	0f 85 71 ff ff ff    	jne    f010d11c <sys_check_LRU_lists_free+0xcd>
f010d1ab:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d1af:	0f 85 67 ff ff ff    	jne    f010d11c <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d1b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d1b8:	c9                   	leave  
f010d1b9:	c3                   	ret    

f010d1ba <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d1ba:	55                   	push   %ebp
f010d1bb:	89 e5                	mov    %esp,%ebp
f010d1bd:	56                   	push   %esi
f010d1be:	53                   	push   %ebx
f010d1bf:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d1c2:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d1c6:	0f 87 0e 04 00 00    	ja     f010d5da <syscall+0x420>
f010d1cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1cf:	c1 e0 02             	shl    $0x2,%eax
f010d1d2:	05 dc 72 13 f0       	add    $0xf01372dc,%eax
f010d1d7:	8b 00                	mov    (%eax),%eax
f010d1d9:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d1db:	8b 45 14             	mov    0x14(%ebp),%eax
f010d1de:	0f b6 d0             	movzbl %al,%edx
f010d1e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1e4:	83 ec 04             	sub    $0x4,%esp
f010d1e7:	52                   	push   %edx
f010d1e8:	ff 75 10             	pushl  0x10(%ebp)
f010d1eb:	50                   	push   %eax
f010d1ec:	e8 db f4 ff ff       	call   f010c6cc <sys_cputs>
f010d1f1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1f4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1f9:	e9 e1 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d1fe:	e8 3e f5 ff ff       	call   f010c741 <sys_cgetc>
f010d203:	e9 d7 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d208:	83 ec 08             	sub    $0x8,%esp
f010d20b:	ff 75 10             	pushl  0x10(%ebp)
f010d20e:	ff 75 0c             	pushl  0xc(%ebp)
f010d211:	e8 91 f6 ff ff       	call   f010c8a7 <sys_calculate_required_frames>
f010d216:	83 c4 10             	add    $0x10,%esp
f010d219:	e9 c1 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d21e:	e8 a6 f6 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f010d223:	e9 b7 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d228:	e8 bb f6 ff ff       	call   f010c8e8 <sys_calculate_modified_frames>
f010d22d:	e9 ad 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d232:	e8 cb f6 ff ff       	call   f010c902 <sys_calculate_notmod_frames>
f010d237:	e9 a3 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d23c:	e8 33 f7 ff ff       	call   f010c974 <sys_pf_calculate_allocated_pages>
f010d241:	e9 99 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d246:	83 ec 0c             	sub    $0xc,%esp
f010d249:	ff 75 0c             	pushl  0xc(%ebp)
f010d24c:	e8 cb f6 ff ff       	call   f010c91c <sys_calculate_pages_tobe_removed_ready_exit>
f010d251:	83 c4 10             	add    $0x10,%esp
f010d254:	e9 86 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d259:	e8 d4 f6 ff ff       	call   f010c932 <sys_scarce_memory>
		return 0;
f010d25e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d263:	e9 77 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d268:	83 ec 08             	sub    $0x8,%esp
f010d26b:	ff 75 10             	pushl  0x10(%ebp)
f010d26e:	ff 75 0c             	pushl  0xc(%ebp)
f010d271:	e8 17 f7 ff ff       	call   f010c98d <sys_free_user_mem>
f010d276:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d279:	b8 00 00 00 00       	mov    $0x0,%eax
f010d27e:	e9 5c 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d283:	8b 55 10             	mov    0x10(%ebp),%edx
f010d286:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d289:	83 ec 08             	sub    $0x8,%esp
f010d28c:	52                   	push   %edx
f010d28d:	50                   	push   %eax
f010d28e:	e8 c1 f4 ff ff       	call   f010c754 <__sys_allocate_page>
f010d293:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d296:	b8 00 00 00 00       	mov    $0x0,%eax
f010d29b:	e9 3f 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d2a0:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d2a3:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d2a6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d2a9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2af:	83 ec 0c             	sub    $0xc,%esp
f010d2b2:	56                   	push   %esi
f010d2b3:	53                   	push   %ebx
f010d2b4:	51                   	push   %ecx
f010d2b5:	52                   	push   %edx
f010d2b6:	50                   	push   %eax
f010d2b7:	e8 b1 f5 ff ff       	call   f010c86d <__sys_map_frame>
f010d2bc:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d2bf:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2c4:	e9 16 03 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d2c9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2cf:	83 ec 08             	sub    $0x8,%esp
f010d2d2:	52                   	push   %edx
f010d2d3:	50                   	push   %eax
f010d2d4:	e8 b1 f5 ff ff       	call   f010c88a <__sys_unmap_frame>
f010d2d9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e1:	e9 f9 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d2e6:	83 ec 04             	sub    $0x4,%esp
f010d2e9:	ff 75 14             	pushl  0x14(%ebp)
f010d2ec:	ff 75 10             	pushl  0x10(%ebp)
f010d2ef:	ff 75 0c             	pushl  0xc(%ebp)
f010d2f2:	e8 f8 f6 ff ff       	call   f010c9ef <sys_allocate_chunk>
f010d2f7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2fa:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2ff:	e9 db 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d304:	e8 41 f7 ff ff       	call   f010ca4a <sys_disable_interrupt>
		return 0;
f010d309:	b8 00 00 00 00       	mov    $0x0,%eax
f010d30e:	e9 cc 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d313:	e8 4c f7 ff ff       	call   f010ca64 <sys_enable_interrupt>
		return 0;
f010d318:	b8 00 00 00 00       	mov    $0x0,%eax
f010d31d:	e9 bd 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d322:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d325:	0f be c0             	movsbl %al,%eax
f010d328:	83 ec 0c             	sub    $0xc,%esp
f010d32b:	50                   	push   %eax
f010d32c:	e8 ec f3 ff ff       	call   f010c71d <sys_cputc>
f010d331:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d334:	b8 00 00 00 00       	mov    $0x0,%eax
f010d339:	e9 a1 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d33e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d341:	0f be c0             	movsbl %al,%eax
f010d344:	83 ec 0c             	sub    $0xc,%esp
f010d347:	50                   	push   %eax
f010d348:	e8 f3 f5 ff ff       	call   f010c940 <sys_clearFFL>
f010d34d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d350:	b8 00 00 00 00       	mov    $0x0,%eax
f010d355:	e9 85 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d35a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d35d:	83 ec 08             	sub    $0x8,%esp
f010d360:	ff 75 10             	pushl  0x10(%ebp)
f010d363:	50                   	push   %eax
f010d364:	e8 15 f7 ff ff       	call   f010ca7e <sys_createSemaphore>
f010d369:	83 c4 10             	add    $0x10,%esp
f010d36c:	e9 6e 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d371:	8b 55 10             	mov    0x10(%ebp),%edx
f010d374:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d377:	83 ec 08             	sub    $0x8,%esp
f010d37a:	52                   	push   %edx
f010d37b:	50                   	push   %eax
f010d37c:	e8 1f f7 ff ff       	call   f010caa0 <sys_waitSemaphore>
f010d381:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d384:	b8 00 00 00 00       	mov    $0x0,%eax
f010d389:	e9 51 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d38e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d391:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d394:	83 ec 08             	sub    $0x8,%esp
f010d397:	52                   	push   %edx
f010d398:	50                   	push   %eax
f010d399:	e8 1c f7 ff ff       	call   f010caba <sys_signalSemaphore>
f010d39e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d3a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d3a6:	e9 34 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d3ab:	8b 55 10             	mov    0x10(%ebp),%edx
f010d3ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3b1:	83 ec 08             	sub    $0x8,%esp
f010d3b4:	52                   	push   %edx
f010d3b5:	50                   	push   %eax
f010d3b6:	e8 19 f7 ff ff       	call   f010cad4 <sys_getSemaphoreValue>
f010d3bb:	83 c4 10             	add    $0x10,%esp
f010d3be:	e9 1c 02 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d3c3:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d3c6:	8b 45 14             	mov    0x14(%ebp),%eax
f010d3c9:	0f b6 d0             	movzbl %al,%edx
f010d3cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3cf:	51                   	push   %ecx
f010d3d0:	52                   	push   %edx
f010d3d1:	ff 75 10             	pushl  0x10(%ebp)
f010d3d4:	50                   	push   %eax
f010d3d5:	e8 61 f7 ff ff       	call   f010cb3b <sys_createSharedObject>
f010d3da:	83 c4 10             	add    $0x10,%esp
f010d3dd:	e9 fd 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d3e2:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d3e5:	8b 55 10             	mov    0x10(%ebp),%edx
f010d3e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3eb:	83 ec 04             	sub    $0x4,%esp
f010d3ee:	51                   	push   %ecx
f010d3ef:	52                   	push   %edx
f010d3f0:	50                   	push   %eax
f010d3f1:	e8 8e f7 ff ff       	call   f010cb84 <sys_getSharedObject>
f010d3f6:	83 c4 10             	add    $0x10,%esp
f010d3f9:	e9 e1 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d3fe:	8b 55 10             	mov    0x10(%ebp),%edx
f010d401:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d404:	83 ec 08             	sub    $0x8,%esp
f010d407:	52                   	push   %edx
f010d408:	50                   	push   %eax
f010d409:	e8 92 f7 ff ff       	call   f010cba0 <sys_freeSharedObject>
f010d40e:	83 c4 10             	add    $0x10,%esp
f010d411:	e9 c9 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d416:	8b 55 10             	mov    0x10(%ebp),%edx
f010d419:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d41c:	83 ec 08             	sub    $0x8,%esp
f010d41f:	52                   	push   %edx
f010d420:	50                   	push   %eax
f010d421:	e8 45 f7 ff ff       	call   f010cb6b <sys_getSizeOfSharedObject>
f010d426:	83 c4 10             	add    $0x10,%esp
f010d429:	e9 b1 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d42e:	e8 86 f7 ff ff       	call   f010cbb9 <sys_getMaxShares>
f010d433:	e9 a7 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d438:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d43b:	ff 75 18             	pushl  0x18(%ebp)
f010d43e:	ff 75 14             	pushl  0x14(%ebp)
f010d441:	ff 75 10             	pushl  0x10(%ebp)
f010d444:	50                   	push   %eax
f010d445:	e8 86 f8 ff ff       	call   f010ccd0 <sys_create_env>
f010d44a:	83 c4 10             	add    $0x10,%esp
f010d44d:	e9 8d 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d452:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d455:	83 ec 0c             	sub    $0xc,%esp
f010d458:	50                   	push   %eax
f010d459:	e8 b2 f8 ff ff       	call   f010cd10 <sys_run_env>
f010d45e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d461:	b8 00 00 00 00       	mov    $0x0,%eax
f010d466:	e9 74 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d46b:	e8 60 f7 ff ff       	call   f010cbd0 <sys_getenvindex>
f010d470:	e9 6a 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d475:	e8 49 f7 ff ff       	call   f010cbc3 <sys_getenvid>
f010d47a:	e9 60 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d47f:	e8 99 f7 ff ff       	call   f010cc1d <sys_getparentenvid>
f010d484:	e9 56 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d489:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d48c:	83 ec 0c             	sub    $0xc,%esp
f010d48f:	50                   	push   %eax
f010d490:	e8 95 f7 ff ff       	call   f010cc2a <sys_destroy_env>
f010d495:	83 c4 10             	add    $0x10,%esp
f010d498:	e9 42 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d49d:	e8 20 f8 ff ff       	call   f010ccc2 <sys_exit_env>
		return 0;
f010d4a2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4a7:	e9 33 01 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d4ac:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d4af:	83 ec 0c             	sub    $0xc,%esp
f010d4b2:	50                   	push   %eax
f010d4b3:	e8 70 f8 ff ff       	call   f010cd28 <sys_get_virtual_time>
f010d4b8:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d4bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4be:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d4c1:	8b 45 10             	mov    0x10(%ebp),%eax
f010d4c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d4c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4cd:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d4cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d4d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4d5:	89 10                	mov    %edx,(%eax)
		return 0;
f010d4d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4dc:	e9 fe 00 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d4e1:	83 ec 04             	sub    $0x4,%esp
f010d4e4:	ff 75 14             	pushl  0x14(%ebp)
f010d4e7:	ff 75 10             	pushl  0x10(%ebp)
f010d4ea:	ff 75 0c             	pushl  0xc(%ebp)
f010d4ed:	e8 20 f5 ff ff       	call   f010ca12 <sys_move_user_mem>
f010d4f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4f5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4fa:	e9 e0 00 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d4ff:	e8 53 f8 ff ff       	call   f010cd57 <sys_rcr2>
f010d504:	e9 d6 00 00 00       	jmp    f010d5df <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d509:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d50c:	0f b6 c0             	movzbl %al,%eax
f010d50f:	83 ec 0c             	sub    $0xc,%esp
f010d512:	50                   	push   %eax
f010d513:	e8 51 f8 ff ff       	call   f010cd69 <sys_bypassPageFault>
f010d518:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d51b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d520:	e9 ba 00 00 00       	jmp    f010d5df <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d525:	e8 56 f8 ff ff       	call   f010cd80 <rsttst>
		return 0;
f010d52a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d52f:	e9 ab 00 00 00       	jmp    f010d5df <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d534:	e8 57 f8 ff ff       	call   f010cd90 <inctst>
		return 0;
f010d539:	b8 00 00 00 00       	mov    $0x0,%eax
f010d53e:	e9 9c 00 00 00       	jmp    f010d5df <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d543:	83 ec 0c             	sub    $0xc,%esp
f010d546:	ff 75 0c             	pushl  0xc(%ebp)
f010d549:	e8 44 f9 ff ff       	call   f010ce92 <chktst>
f010d54e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d551:	b8 00 00 00 00       	mov    $0x0,%eax
f010d556:	e9 84 00 00 00       	jmp    f010d5df <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d55b:	e8 41 f8 ff ff       	call   f010cda1 <gettst>
f010d560:	eb 7d                	jmp    f010d5df <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d562:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d565:	8b 45 18             	mov    0x18(%ebp),%eax
f010d568:	0f be c0             	movsbl %al,%eax
f010d56b:	83 ec 0c             	sub    $0xc,%esp
f010d56e:	52                   	push   %edx
f010d56f:	50                   	push   %eax
f010d570:	ff 75 14             	pushl  0x14(%ebp)
f010d573:	ff 75 10             	pushl  0x10(%ebp)
f010d576:	ff 75 0c             	pushl  0xc(%ebp)
f010d579:	e8 2d f8 ff ff       	call   f010cdab <tst>
f010d57e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d581:	b8 00 00 00 00       	mov    $0x0,%eax
f010d586:	eb 57                	jmp    f010d5df <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d588:	e8 a5 f4 ff ff       	call   f010ca32 <sys_get_heap_strategy>
f010d58d:	eb 50                	jmp    f010d5df <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d58f:	83 ec 0c             	sub    $0xc,%esp
f010d592:	ff 75 0c             	pushl  0xc(%ebp)
f010d595:	e8 a2 f4 ff ff       	call   f010ca3c <sys_set_uheap_strategy>
f010d59a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d59d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5a2:	eb 3b                	jmp    f010d5df <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d5a4:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d5a7:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d5aa:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5b0:	53                   	push   %ebx
f010d5b1:	51                   	push   %ecx
f010d5b2:	52                   	push   %edx
f010d5b3:	50                   	push   %eax
f010d5b4:	e8 14 f9 ff ff       	call   f010cecd <sys_check_LRU_lists>
f010d5b9:	83 c4 10             	add    $0x10,%esp
f010d5bc:	eb 21                	jmp    f010d5df <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d5be:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5c4:	83 ec 08             	sub    $0x8,%esp
f010d5c7:	52                   	push   %edx
f010d5c8:	50                   	push   %eax
f010d5c9:	e8 81 fa ff ff       	call   f010d04f <sys_check_LRU_lists_free>
f010d5ce:	83 c4 10             	add    $0x10,%esp
f010d5d1:	eb 0c                	jmp    f010d5df <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d5d3:	b8 03 00 00 00       	mov    $0x3,%eax
f010d5d8:	eb 05                	jmp    f010d5df <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d5da:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d5df:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d5e2:	5b                   	pop    %ebx
f010d5e3:	5e                   	pop    %esi
f010d5e4:	5d                   	pop    %ebp
f010d5e5:	c3                   	ret    

f010d5e6 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d5e6:	55                   	push   %ebp
f010d5e7:	89 e5                	mov    %esp,%ebp
f010d5e9:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d5ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5ef:	8b 00                	mov    (%eax),%eax
f010d5f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d5f4:	8b 45 10             	mov    0x10(%ebp),%eax
f010d5f7:	8b 00                	mov    (%eax),%eax
f010d5f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d5fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d603:	e9 ca 00 00 00       	jmp    f010d6d2 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d608:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d60b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d60e:	01 d0                	add    %edx,%eax
f010d610:	89 c2                	mov    %eax,%edx
f010d612:	c1 ea 1f             	shr    $0x1f,%edx
f010d615:	01 d0                	add    %edx,%eax
f010d617:	d1 f8                	sar    %eax
f010d619:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d61c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d61f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d622:	eb 03                	jmp    f010d627 <stab_binsearch+0x41>
			m--;
f010d624:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d627:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d62a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d62d:	7c 1e                	jl     f010d64d <stab_binsearch+0x67>
f010d62f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d632:	89 d0                	mov    %edx,%eax
f010d634:	01 c0                	add    %eax,%eax
f010d636:	01 d0                	add    %edx,%eax
f010d638:	c1 e0 02             	shl    $0x2,%eax
f010d63b:	89 c2                	mov    %eax,%edx
f010d63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d640:	01 d0                	add    %edx,%eax
f010d642:	8a 40 04             	mov    0x4(%eax),%al
f010d645:	0f b6 c0             	movzbl %al,%eax
f010d648:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d64b:	75 d7                	jne    f010d624 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d64d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d650:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d653:	7d 09                	jge    f010d65e <stab_binsearch+0x78>
			l = true_m + 1;
f010d655:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d658:	40                   	inc    %eax
f010d659:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d65c:	eb 74                	jmp    f010d6d2 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d65e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d665:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d668:	89 d0                	mov    %edx,%eax
f010d66a:	01 c0                	add    %eax,%eax
f010d66c:	01 d0                	add    %edx,%eax
f010d66e:	c1 e0 02             	shl    $0x2,%eax
f010d671:	89 c2                	mov    %eax,%edx
f010d673:	8b 45 08             	mov    0x8(%ebp),%eax
f010d676:	01 d0                	add    %edx,%eax
f010d678:	8b 40 08             	mov    0x8(%eax),%eax
f010d67b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d67e:	73 11                	jae    f010d691 <stab_binsearch+0xab>
			*region_left = m;
f010d680:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d683:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d686:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d688:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d68b:	40                   	inc    %eax
f010d68c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d68f:	eb 41                	jmp    f010d6d2 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d691:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d694:	89 d0                	mov    %edx,%eax
f010d696:	01 c0                	add    %eax,%eax
f010d698:	01 d0                	add    %edx,%eax
f010d69a:	c1 e0 02             	shl    $0x2,%eax
f010d69d:	89 c2                	mov    %eax,%edx
f010d69f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6a2:	01 d0                	add    %edx,%eax
f010d6a4:	8b 40 08             	mov    0x8(%eax),%eax
f010d6a7:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d6aa:	76 14                	jbe    f010d6c0 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d6ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6af:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d6b2:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6b5:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d6b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6ba:	48                   	dec    %eax
f010d6bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d6be:	eb 12                	jmp    f010d6d2 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d6c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d6c6:	89 10                	mov    %edx,(%eax)
			l = m;
f010d6c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d6ce:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d6d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d6d5:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d6d8:	0f 8e 2a ff ff ff    	jle    f010d608 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d6de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d6e2:	75 0f                	jne    f010d6f3 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d6e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6e7:	8b 00                	mov    (%eax),%eax
f010d6e9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d6ec:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6ef:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d6f1:	eb 3d                	jmp    f010d730 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d6f3:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6f6:	8b 00                	mov    (%eax),%eax
f010d6f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d6fb:	eb 03                	jmp    f010d700 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d6fd:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d700:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d703:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d705:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d708:	7d 1e                	jge    f010d728 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d70a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d70d:	89 d0                	mov    %edx,%eax
f010d70f:	01 c0                	add    %eax,%eax
f010d711:	01 d0                	add    %edx,%eax
f010d713:	c1 e0 02             	shl    $0x2,%eax
f010d716:	89 c2                	mov    %eax,%edx
f010d718:	8b 45 08             	mov    0x8(%ebp),%eax
f010d71b:	01 d0                	add    %edx,%eax
f010d71d:	8a 40 04             	mov    0x4(%eax),%al
f010d720:	0f b6 c0             	movzbl %al,%eax
f010d723:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d726:	75 d5                	jne    f010d6fd <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d728:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d72b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d72e:	89 10                	mov    %edx,(%eax)
	}
}
f010d730:	90                   	nop
f010d731:	c9                   	leave  
f010d732:	c3                   	ret    

f010d733 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d733:	55                   	push   %ebp
f010d734:	89 e5                	mov    %esp,%ebp
f010d736:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d739:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d73c:	c7 00 a0 73 13 f0    	movl   $0xf01373a0,(%eax)
	info->eip_line = 0;
f010d742:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d745:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d74c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d74f:	c7 40 08 a0 73 13 f0 	movl   $0xf01373a0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d756:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d759:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d760:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d763:	8b 55 08             	mov    0x8(%ebp),%edx
f010d766:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d769:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d76c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d773:	8b 45 08             	mov    0x8(%ebp),%eax
f010d776:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d77b:	76 1e                	jbe    f010d79b <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d77d:	c7 45 f4 10 d0 13 f0 	movl   $0xf013d010,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d784:	c7 45 f0 a4 bf 17 f0 	movl   $0xf017bfa4,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d78b:	c7 45 ec a5 bf 17 f0 	movl   $0xf017bfa5,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d792:	c7 45 e8 2f 8a 18 f0 	movl   $0xf0188a2f,-0x18(%ebp)
f010d799:	eb 2a                	jmp    f010d7c5 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d79b:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d7a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7a5:	8b 00                	mov    (%eax),%eax
f010d7a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d7aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7ad:	8b 40 04             	mov    0x4(%eax),%eax
f010d7b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d7b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7b6:	8b 40 08             	mov    0x8(%eax),%eax
f010d7b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d7bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7bf:	8b 40 0c             	mov    0xc(%eax),%eax
f010d7c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d7c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7c8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d7cb:	76 0a                	jbe    f010d7d7 <debuginfo_eip+0xa4>
f010d7cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7d0:	48                   	dec    %eax
f010d7d1:	8a 00                	mov    (%eax),%al
f010d7d3:	84 c0                	test   %al,%al
f010d7d5:	74 0a                	je     f010d7e1 <debuginfo_eip+0xae>
		return -1;
f010d7d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d7dc:	e9 01 02 00 00       	jmp    f010d9e2 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d7e1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d7e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d7eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7ee:	29 c2                	sub    %eax,%edx
f010d7f0:	89 d0                	mov    %edx,%eax
f010d7f2:	c1 f8 02             	sar    $0x2,%eax
f010d7f5:	89 c2                	mov    %eax,%edx
f010d7f7:	89 d0                	mov    %edx,%eax
f010d7f9:	c1 e0 02             	shl    $0x2,%eax
f010d7fc:	01 d0                	add    %edx,%eax
f010d7fe:	c1 e0 02             	shl    $0x2,%eax
f010d801:	01 d0                	add    %edx,%eax
f010d803:	c1 e0 02             	shl    $0x2,%eax
f010d806:	01 d0                	add    %edx,%eax
f010d808:	89 c1                	mov    %eax,%ecx
f010d80a:	c1 e1 08             	shl    $0x8,%ecx
f010d80d:	01 c8                	add    %ecx,%eax
f010d80f:	89 c1                	mov    %eax,%ecx
f010d811:	c1 e1 10             	shl    $0x10,%ecx
f010d814:	01 c8                	add    %ecx,%eax
f010d816:	01 c0                	add    %eax,%eax
f010d818:	01 d0                	add    %edx,%eax
f010d81a:	48                   	dec    %eax
f010d81b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d81e:	ff 75 08             	pushl  0x8(%ebp)
f010d821:	6a 64                	push   $0x64
f010d823:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d826:	50                   	push   %eax
f010d827:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d82a:	50                   	push   %eax
f010d82b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d82e:	e8 b3 fd ff ff       	call   f010d5e6 <stab_binsearch>
f010d833:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d836:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d839:	85 c0                	test   %eax,%eax
f010d83b:	75 0a                	jne    f010d847 <debuginfo_eip+0x114>
		return -1;
f010d83d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d842:	e9 9b 01 00 00       	jmp    f010d9e2 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d847:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d84a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d84d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d850:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d853:	ff 75 08             	pushl  0x8(%ebp)
f010d856:	6a 24                	push   $0x24
f010d858:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d85b:	50                   	push   %eax
f010d85c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d85f:	50                   	push   %eax
f010d860:	ff 75 f4             	pushl  -0xc(%ebp)
f010d863:	e8 7e fd ff ff       	call   f010d5e6 <stab_binsearch>
f010d868:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d86b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d86e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d871:	39 c2                	cmp    %eax,%edx
f010d873:	0f 8f 86 00 00 00    	jg     f010d8ff <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d879:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d87c:	89 c2                	mov    %eax,%edx
f010d87e:	89 d0                	mov    %edx,%eax
f010d880:	01 c0                	add    %eax,%eax
f010d882:	01 d0                	add    %edx,%eax
f010d884:	c1 e0 02             	shl    $0x2,%eax
f010d887:	89 c2                	mov    %eax,%edx
f010d889:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d88c:	01 d0                	add    %edx,%eax
f010d88e:	8b 00                	mov    (%eax),%eax
f010d890:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d893:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d896:	29 d1                	sub    %edx,%ecx
f010d898:	89 ca                	mov    %ecx,%edx
f010d89a:	39 d0                	cmp    %edx,%eax
f010d89c:	73 22                	jae    f010d8c0 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d89e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d8a1:	89 c2                	mov    %eax,%edx
f010d8a3:	89 d0                	mov    %edx,%eax
f010d8a5:	01 c0                	add    %eax,%eax
f010d8a7:	01 d0                	add    %edx,%eax
f010d8a9:	c1 e0 02             	shl    $0x2,%eax
f010d8ac:	89 c2                	mov    %eax,%edx
f010d8ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8b1:	01 d0                	add    %edx,%eax
f010d8b3:	8b 10                	mov    (%eax),%edx
f010d8b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8b8:	01 c2                	add    %eax,%edx
f010d8ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8bd:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d8c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d8c3:	89 c2                	mov    %eax,%edx
f010d8c5:	89 d0                	mov    %edx,%eax
f010d8c7:	01 c0                	add    %eax,%eax
f010d8c9:	01 d0                	add    %edx,%eax
f010d8cb:	c1 e0 02             	shl    $0x2,%eax
f010d8ce:	89 c2                	mov    %eax,%edx
f010d8d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8d3:	01 d0                	add    %edx,%eax
f010d8d5:	8b 50 08             	mov    0x8(%eax),%edx
f010d8d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8db:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d8de:	8b 55 08             	mov    0x8(%ebp),%edx
f010d8e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8e4:	8b 40 10             	mov    0x10(%eax),%eax
f010d8e7:	29 c2                	sub    %eax,%edx
f010d8e9:	89 d0                	mov    %edx,%eax
f010d8eb:	c1 f8 02             	sar    $0x2,%eax
f010d8ee:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d8f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d8f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d8f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d8fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d8fd:	eb 15                	jmp    f010d914 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d8ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d902:	8b 55 08             	mov    0x8(%ebp),%edx
f010d905:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d908:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d90b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d90e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d911:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d914:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d917:	8b 40 08             	mov    0x8(%eax),%eax
f010d91a:	83 ec 08             	sub    $0x8,%esp
f010d91d:	6a 3a                	push   $0x3a
f010d91f:	50                   	push   %eax
f010d920:	e8 95 34 02 00       	call   f0130dba <strfind>
f010d925:	83 c4 10             	add    $0x10,%esp
f010d928:	89 c2                	mov    %eax,%edx
f010d92a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d92d:	8b 40 08             	mov    0x8(%eax),%eax
f010d930:	29 c2                	sub    %eax,%edx
f010d932:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d935:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d938:	eb 03                	jmp    f010d93d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d93a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d93d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d940:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d943:	7c 4e                	jl     f010d993 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d945:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d948:	89 d0                	mov    %edx,%eax
f010d94a:	01 c0                	add    %eax,%eax
f010d94c:	01 d0                	add    %edx,%eax
f010d94e:	c1 e0 02             	shl    $0x2,%eax
f010d951:	89 c2                	mov    %eax,%edx
f010d953:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d956:	01 d0                	add    %edx,%eax
f010d958:	8a 40 04             	mov    0x4(%eax),%al
f010d95b:	3c 84                	cmp    $0x84,%al
f010d95d:	74 34                	je     f010d993 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d95f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d962:	89 d0                	mov    %edx,%eax
f010d964:	01 c0                	add    %eax,%eax
f010d966:	01 d0                	add    %edx,%eax
f010d968:	c1 e0 02             	shl    $0x2,%eax
f010d96b:	89 c2                	mov    %eax,%edx
f010d96d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d970:	01 d0                	add    %edx,%eax
f010d972:	8a 40 04             	mov    0x4(%eax),%al
f010d975:	3c 64                	cmp    $0x64,%al
f010d977:	75 c1                	jne    f010d93a <debuginfo_eip+0x207>
f010d979:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d97c:	89 d0                	mov    %edx,%eax
f010d97e:	01 c0                	add    %eax,%eax
f010d980:	01 d0                	add    %edx,%eax
f010d982:	c1 e0 02             	shl    $0x2,%eax
f010d985:	89 c2                	mov    %eax,%edx
f010d987:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d98a:	01 d0                	add    %edx,%eax
f010d98c:	8b 40 08             	mov    0x8(%eax),%eax
f010d98f:	85 c0                	test   %eax,%eax
f010d991:	74 a7                	je     f010d93a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d993:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d996:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d999:	7c 42                	jl     f010d9dd <debuginfo_eip+0x2aa>
f010d99b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d99e:	89 d0                	mov    %edx,%eax
f010d9a0:	01 c0                	add    %eax,%eax
f010d9a2:	01 d0                	add    %edx,%eax
f010d9a4:	c1 e0 02             	shl    $0x2,%eax
f010d9a7:	89 c2                	mov    %eax,%edx
f010d9a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9ac:	01 d0                	add    %edx,%eax
f010d9ae:	8b 00                	mov    (%eax),%eax
f010d9b0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d9b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d9b6:	29 d1                	sub    %edx,%ecx
f010d9b8:	89 ca                	mov    %ecx,%edx
f010d9ba:	39 d0                	cmp    %edx,%eax
f010d9bc:	73 1f                	jae    f010d9dd <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d9be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d9c1:	89 d0                	mov    %edx,%eax
f010d9c3:	01 c0                	add    %eax,%eax
f010d9c5:	01 d0                	add    %edx,%eax
f010d9c7:	c1 e0 02             	shl    $0x2,%eax
f010d9ca:	89 c2                	mov    %eax,%edx
f010d9cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9cf:	01 d0                	add    %edx,%eax
f010d9d1:	8b 10                	mov    (%eax),%edx
f010d9d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9d6:	01 c2                	add    %eax,%edx
f010d9d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9db:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d9dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9e2:	c9                   	leave  
f010d9e3:	c3                   	ret    

f010d9e4 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d9e4:	55                   	push   %ebp
f010d9e5:	89 e5                	mov    %esp,%ebp
f010d9e7:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d9ea:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d9ee:	74 1c                	je     f010da0c <setPageReplacmentAlgorithmLRU+0x28>
f010d9f0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d9f4:	74 16                	je     f010da0c <setPageReplacmentAlgorithmLRU+0x28>
f010d9f6:	68 ac 73 13 f0       	push   $0xf01373ac
f010d9fb:	68 f6 73 13 f0       	push   $0xf01373f6
f010da00:	6a 18                	push   $0x18
f010da02:	68 0b 74 13 f0       	push   $0xf013740b
f010da07:	e8 ef 27 ff ff       	call   f01001fb <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010da0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010da0f:	a3 88 7b 65 f0       	mov    %eax,0xf0657b88
}
f010da14:	90                   	nop
f010da15:	c9                   	leave  
f010da16:	c3                   	ret    

f010da17 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010da17:	55                   	push   %ebp
f010da18:	89 e5                	mov    %esp,%ebp
f010da1a:	c7 05 88 7b 65 f0 03 	movl   $0x3,0xf0657b88
f010da21:	00 00 00 
f010da24:	90                   	nop
f010da25:	5d                   	pop    %ebp
f010da26:	c3                   	ret    

f010da27 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010da27:	55                   	push   %ebp
f010da28:	89 e5                	mov    %esp,%ebp
f010da2a:	c7 05 88 7b 65 f0 04 	movl   $0x4,0xf0657b88
f010da31:	00 00 00 
f010da34:	90                   	nop
f010da35:	5d                   	pop    %ebp
f010da36:	c3                   	ret    

f010da37 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010da37:	55                   	push   %ebp
f010da38:	89 e5                	mov    %esp,%ebp
f010da3a:	c7 05 88 7b 65 f0 05 	movl   $0x5,0xf0657b88
f010da41:	00 00 00 
f010da44:	90                   	nop
f010da45:	5d                   	pop    %ebp
f010da46:	c3                   	ret    

f010da47 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010da47:	55                   	push   %ebp
f010da48:	89 e5                	mov    %esp,%ebp
f010da4a:	c7 05 88 7b 65 f0 07 	movl   $0x7,0xf0657b88
f010da51:	00 00 00 
f010da54:	90                   	nop
f010da55:	5d                   	pop    %ebp
f010da56:	c3                   	ret    

f010da57 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010da57:	55                   	push   %ebp
f010da58:	89 e5                	mov    %esp,%ebp
f010da5a:	c7 05 88 7b 65 f0 06 	movl   $0x6,0xf0657b88
f010da61:	00 00 00 
f010da64:	8b 45 08             	mov    0x8(%ebp),%eax
f010da67:	a3 e4 7a 65 f0       	mov    %eax,0xf0657ae4
f010da6c:	90                   	nop
f010da6d:	5d                   	pop    %ebp
f010da6e:	c3                   	ret    

f010da6f <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010da6f:	55                   	push   %ebp
f010da70:	89 e5                	mov    %esp,%ebp
f010da72:	8b 15 88 7b 65 f0    	mov    0xf0657b88,%edx
f010da78:	8b 45 08             	mov    0x8(%ebp),%eax
f010da7b:	39 c2                	cmp    %eax,%edx
f010da7d:	0f 94 c0             	sete   %al
f010da80:	0f b6 c0             	movzbl %al,%eax
f010da83:	5d                   	pop    %ebp
f010da84:	c3                   	ret    

f010da85 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010da85:	55                   	push   %ebp
f010da86:	89 e5                	mov    %esp,%ebp
f010da88:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010da8d:	83 f8 03             	cmp    $0x3,%eax
f010da90:	75 07                	jne    f010da99 <isPageReplacmentAlgorithmCLOCK+0x14>
f010da92:	b8 01 00 00 00       	mov    $0x1,%eax
f010da97:	eb 05                	jmp    f010da9e <isPageReplacmentAlgorithmCLOCK+0x19>
f010da99:	b8 00 00 00 00       	mov    $0x0,%eax
f010da9e:	5d                   	pop    %ebp
f010da9f:	c3                   	ret    

f010daa0 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010daa0:	55                   	push   %ebp
f010daa1:	89 e5                	mov    %esp,%ebp
f010daa3:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010daa8:	83 f8 04             	cmp    $0x4,%eax
f010daab:	75 07                	jne    f010dab4 <isPageReplacmentAlgorithmFIFO+0x14>
f010daad:	b8 01 00 00 00       	mov    $0x1,%eax
f010dab2:	eb 05                	jmp    f010dab9 <isPageReplacmentAlgorithmFIFO+0x19>
f010dab4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dab9:	5d                   	pop    %ebp
f010daba:	c3                   	ret    

f010dabb <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dabb:	55                   	push   %ebp
f010dabc:	89 e5                	mov    %esp,%ebp
f010dabe:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dac3:	83 f8 05             	cmp    $0x5,%eax
f010dac6:	75 07                	jne    f010dacf <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dac8:	b8 01 00 00 00       	mov    $0x1,%eax
f010dacd:	eb 05                	jmp    f010dad4 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dacf:	b8 00 00 00 00       	mov    $0x0,%eax
f010dad4:	5d                   	pop    %ebp
f010dad5:	c3                   	ret    

f010dad6 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010dad6:	55                   	push   %ebp
f010dad7:	89 e5                	mov    %esp,%ebp
f010dad9:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dade:	83 f8 07             	cmp    $0x7,%eax
f010dae1:	75 07                	jne    f010daea <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010dae3:	b8 01 00 00 00       	mov    $0x1,%eax
f010dae8:	eb 05                	jmp    f010daef <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010daea:	b8 00 00 00 00       	mov    $0x0,%eax
f010daef:	5d                   	pop    %ebp
f010daf0:	c3                   	ret    

f010daf1 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010daf1:	55                   	push   %ebp
f010daf2:	89 e5                	mov    %esp,%ebp
f010daf4:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010daf9:	83 f8 06             	cmp    $0x6,%eax
f010dafc:	75 07                	jne    f010db05 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010dafe:	b8 01 00 00 00       	mov    $0x1,%eax
f010db03:	eb 05                	jmp    f010db0a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010db05:	b8 00 00 00 00       	mov    $0x0,%eax
f010db0a:	5d                   	pop    %ebp
f010db0b:	c3                   	ret    

f010db0c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010db0c:	55                   	push   %ebp
f010db0d:	89 e5                	mov    %esp,%ebp
f010db0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010db12:	a3 50 7b 65 f0       	mov    %eax,0xf0657b50
f010db17:	90                   	nop
f010db18:	5d                   	pop    %ebp
f010db19:	c3                   	ret    

f010db1a <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010db1a:	55                   	push   %ebp
f010db1b:	89 e5                	mov    %esp,%ebp
f010db1d:	a1 50 7b 65 f0       	mov    0xf0657b50,%eax
f010db22:	5d                   	pop    %ebp
f010db23:	c3                   	ret    

f010db24 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010db24:	55                   	push   %ebp
f010db25:	89 e5                	mov    %esp,%ebp
f010db27:	8b 45 08             	mov    0x8(%ebp),%eax
f010db2a:	a3 90 7b 65 f0       	mov    %eax,0xf0657b90
f010db2f:	90                   	nop
f010db30:	5d                   	pop    %ebp
f010db31:	c3                   	ret    

f010db32 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010db32:	55                   	push   %ebp
f010db33:	89 e5                	mov    %esp,%ebp
f010db35:	a1 90 7b 65 f0       	mov    0xf0657b90,%eax
f010db3a:	5d                   	pop    %ebp
f010db3b:	c3                   	ret    

f010db3c <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010db3c:	55                   	push   %ebp
f010db3d:	89 e5                	mov    %esp,%ebp
f010db3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010db42:	a3 b0 7b 65 f0       	mov    %eax,0xf0657bb0
f010db47:	90                   	nop
f010db48:	5d                   	pop    %ebp
f010db49:	c3                   	ret    

f010db4a <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010db4a:	55                   	push   %ebp
f010db4b:	89 e5                	mov    %esp,%ebp
f010db4d:	a1 b0 7b 65 f0       	mov    0xf0657bb0,%eax
f010db52:	5d                   	pop    %ebp
f010db53:	c3                   	ret    

f010db54 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010db54:	55                   	push   %ebp
f010db55:	89 e5                	mov    %esp,%ebp
f010db57:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010db5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010db5d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010db60:	83 ec 08             	sub    $0x8,%esp
f010db63:	ff 75 0c             	pushl  0xc(%ebp)
f010db66:	50                   	push   %eax
f010db67:	e8 c4 8f ff ff       	call   f0106b30 <create_page_table>
f010db6c:	83 c4 10             	add    $0x10,%esp
f010db6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010db72:	90                   	nop
f010db73:	c9                   	leave  
f010db74:	c3                   	ret    

f010db75 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010db75:	55                   	push   %ebp
f010db76:	89 e5                	mov    %esp,%ebp
f010db78:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010db7b:	83 ec 04             	sub    $0x4,%esp
f010db7e:	68 28 74 13 f0       	push   $0xf0137428
f010db83:	6a 50                	push   $0x50
f010db85:	68 0b 74 13 f0       	push   $0xf013740b
f010db8a:	e8 6c 26 ff ff       	call   f01001fb <_panic>

f010db8f <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010db8f:	55                   	push   %ebp
f010db90:	89 e5                	mov    %esp,%ebp
f010db92:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010db95:	83 ec 04             	sub    $0x4,%esp
f010db98:	68 5c 74 13 f0       	push   $0xf013745c
f010db9d:	6a 57                	push   $0x57
f010db9f:	68 0b 74 13 f0       	push   $0xf013740b
f010dba4:	e8 52 26 ff ff       	call   f01001fb <_panic>

f010dba9 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010dba9:	55                   	push   %ebp
f010dbaa:	89 e5                	mov    %esp,%ebp
f010dbac:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010dbaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbb2:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010dbb7:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbba:	89 d0                	mov    %edx,%eax
f010dbbc:	c1 e0 02             	shl    $0x2,%eax
f010dbbf:	01 d0                	add    %edx,%eax
f010dbc1:	01 c0                	add    %eax,%eax
f010dbc3:	01 d0                	add    %edx,%eax
f010dbc5:	01 c0                	add    %eax,%eax
f010dbc7:	01 d0                	add    %edx,%eax
f010dbc9:	c1 e0 02             	shl    $0x2,%eax
f010dbcc:	83 ec 0c             	sub    $0xc,%esp
f010dbcf:	50                   	push   %eax
f010dbd0:	e8 29 9c ff ff       	call   f01077fe <kmalloc>
f010dbd5:	83 c4 10             	add    $0x10,%esp
f010dbd8:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
	if (semaphores == NULL)
f010dbdd:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dbe2:	85 c0                	test   %eax,%eax
f010dbe4:	75 14                	jne    f010dbfa <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010dbe6:	83 ec 04             	sub    $0x4,%esp
f010dbe9:	68 a0 74 13 f0       	push   $0xf01374a0
f010dbee:	6a 1e                	push   $0x1e
f010dbf0:	68 e0 74 13 f0       	push   $0xf01374e0
f010dbf5:	e8 01 26 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dbfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dc01:	e9 bd 00 00 00       	jmp    f010dcc3 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010dc06:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc0f:	89 d0                	mov    %edx,%eax
f010dc11:	c1 e0 02             	shl    $0x2,%eax
f010dc14:	01 d0                	add    %edx,%eax
f010dc16:	01 c0                	add    %eax,%eax
f010dc18:	01 d0                	add    %edx,%eax
f010dc1a:	01 c0                	add    %eax,%eax
f010dc1c:	01 d0                	add    %edx,%eax
f010dc1e:	c1 e0 02             	shl    $0x2,%eax
f010dc21:	01 c8                	add    %ecx,%eax
f010dc23:	83 ec 04             	sub    $0x4,%esp
f010dc26:	6a 5c                	push   $0x5c
f010dc28:	6a 00                	push   $0x0
f010dc2a:	50                   	push   %eax
f010dc2b:	e8 b6 31 02 00       	call   f0130de6 <memset>
f010dc30:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010dc33:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc3c:	89 d0                	mov    %edx,%eax
f010dc3e:	c1 e0 02             	shl    $0x2,%eax
f010dc41:	01 d0                	add    %edx,%eax
f010dc43:	01 c0                	add    %eax,%eax
f010dc45:	01 d0                	add    %edx,%eax
f010dc47:	01 c0                	add    %eax,%eax
f010dc49:	01 d0                	add    %edx,%eax
f010dc4b:	c1 e0 02             	shl    $0x2,%eax
f010dc4e:	01 c8                	add    %ecx,%eax
f010dc50:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010dc54:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc5d:	89 d0                	mov    %edx,%eax
f010dc5f:	c1 e0 02             	shl    $0x2,%eax
f010dc62:	01 d0                	add    %edx,%eax
f010dc64:	01 c0                	add    %eax,%eax
f010dc66:	01 d0                	add    %edx,%eax
f010dc68:	01 c0                	add    %eax,%eax
f010dc6a:	01 d0                	add    %edx,%eax
f010dc6c:	c1 e0 02             	shl    $0x2,%eax
f010dc6f:	01 c8                	add    %ecx,%eax
f010dc71:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010dc78:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc81:	89 d0                	mov    %edx,%eax
f010dc83:	c1 e0 02             	shl    $0x2,%eax
f010dc86:	01 d0                	add    %edx,%eax
f010dc88:	01 c0                	add    %eax,%eax
f010dc8a:	01 d0                	add    %edx,%eax
f010dc8c:	01 c0                	add    %eax,%eax
f010dc8e:	01 d0                	add    %edx,%eax
f010dc90:	c1 e0 02             	shl    $0x2,%eax
f010dc93:	01 c8                	add    %ecx,%eax
f010dc95:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010dc9c:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dca2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dca5:	89 d0                	mov    %edx,%eax
f010dca7:	c1 e0 02             	shl    $0x2,%eax
f010dcaa:	01 d0                	add    %edx,%eax
f010dcac:	01 c0                	add    %eax,%eax
f010dcae:	01 d0                	add    %edx,%eax
f010dcb0:	01 c0                	add    %eax,%eax
f010dcb2:	01 d0                	add    %edx,%eax
f010dcb4:	c1 e0 02             	shl    $0x2,%eax
f010dcb7:	01 c8                	add    %ecx,%eax
f010dcb9:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dcc0:	ff 45 f4             	incl   -0xc(%ebp)
f010dcc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dcc6:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dccb:	39 c2                	cmp    %eax,%edx
f010dccd:	0f 82 33 ff ff ff    	jb     f010dc06 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010dcd3:	90                   	nop
f010dcd4:	c9                   	leave  
f010dcd5:	c3                   	ret    

f010dcd6 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010dcd6:	55                   	push   %ebp
f010dcd7:	89 e5                	mov    %esp,%ebp
f010dcd9:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010dcdc:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dce3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010dcea:	eb 2f                	jmp    f010dd1b <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010dcec:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dcf2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dcf5:	89 d0                	mov    %edx,%eax
f010dcf7:	c1 e0 02             	shl    $0x2,%eax
f010dcfa:	01 d0                	add    %edx,%eax
f010dcfc:	01 c0                	add    %eax,%eax
f010dcfe:	01 d0                	add    %edx,%eax
f010dd00:	01 c0                	add    %eax,%eax
f010dd02:	01 d0                	add    %edx,%eax
f010dd04:	c1 e0 02             	shl    $0x2,%eax
f010dd07:	01 c8                	add    %ecx,%eax
f010dd09:	8a 40 58             	mov    0x58(%eax),%al
f010dd0c:	84 c0                	test   %al,%al
f010dd0e:	74 08                	je     f010dd18 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010dd10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd13:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010dd16:	eb 0f                	jmp    f010dd27 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dd18:	ff 45 f0             	incl   -0x10(%ebp)
f010dd1b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd1e:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd23:	39 c2                	cmp    %eax,%edx
f010dd25:	72 c5                	jb     f010dcec <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010dd27:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010dd2b:	75 4d                	jne    f010dd7a <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010dd2d:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd32:	01 c0                	add    %eax,%eax
f010dd34:	89 c2                	mov    %eax,%edx
f010dd36:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dd3b:	83 ec 08             	sub    $0x8,%esp
f010dd3e:	52                   	push   %edx
f010dd3f:	50                   	push   %eax
f010dd40:	e8 70 9d ff ff       	call   f0107ab5 <krealloc>
f010dd45:	83 c4 10             	add    $0x10,%esp
f010dd48:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
			if (semaphores == NULL)
f010dd4d:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dd52:	85 c0                	test   %eax,%eax
f010dd54:	75 10                	jne    f010dd66 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010dd56:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010dd5f:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010dd64:	eb 5b                	jmp    f010ddc1 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010dd66:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010dd6e:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd73:	01 c0                	add    %eax,%eax
f010dd75:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010dd7a:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd83:	89 d0                	mov    %edx,%eax
f010dd85:	c1 e0 02             	shl    $0x2,%eax
f010dd88:	01 d0                	add    %edx,%eax
f010dd8a:	01 c0                	add    %eax,%eax
f010dd8c:	01 d0                	add    %edx,%eax
f010dd8e:	01 c0                	add    %eax,%eax
f010dd90:	01 d0                	add    %edx,%eax
f010dd92:	c1 e0 02             	shl    $0x2,%eax
f010dd95:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010dd98:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd9b:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010dd9d:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dda3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dda6:	89 d0                	mov    %edx,%eax
f010dda8:	c1 e0 02             	shl    $0x2,%eax
f010ddab:	01 d0                	add    %edx,%eax
f010ddad:	01 c0                	add    %eax,%eax
f010ddaf:	01 d0                	add    %edx,%eax
f010ddb1:	01 c0                	add    %eax,%eax
f010ddb3:	01 d0                	add    %edx,%eax
f010ddb5:	c1 e0 02             	shl    $0x2,%eax
f010ddb8:	01 c8                	add    %ecx,%eax
f010ddba:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010ddbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ddc1:	c9                   	leave  
f010ddc2:	c3                   	ret    

f010ddc3 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010ddc3:	55                   	push   %ebp
f010ddc4:	89 e5                	mov    %esp,%ebp
f010ddc6:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010ddc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010ddd0:	e9 84 00 00 00       	jmp    f010de59 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010ddd5:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dddb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddde:	89 d0                	mov    %edx,%eax
f010dde0:	c1 e0 02             	shl    $0x2,%eax
f010dde3:	01 d0                	add    %edx,%eax
f010dde5:	01 c0                	add    %eax,%eax
f010dde7:	01 d0                	add    %edx,%eax
f010dde9:	01 c0                	add    %eax,%eax
f010ddeb:	01 d0                	add    %edx,%eax
f010dded:	c1 e0 02             	shl    $0x2,%eax
f010ddf0:	01 c8                	add    %ecx,%eax
f010ddf2:	8a 40 58             	mov    0x58(%eax),%al
f010ddf5:	84 c0                	test   %al,%al
f010ddf7:	75 5c                	jne    f010de55 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010ddf9:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010ddff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de02:	89 d0                	mov    %edx,%eax
f010de04:	c1 e0 02             	shl    $0x2,%eax
f010de07:	01 d0                	add    %edx,%eax
f010de09:	01 c0                	add    %eax,%eax
f010de0b:	01 d0                	add    %edx,%eax
f010de0d:	01 c0                	add    %eax,%eax
f010de0f:	01 d0                	add    %edx,%eax
f010de11:	c1 e0 02             	shl    $0x2,%eax
f010de14:	01 c8                	add    %ecx,%eax
f010de16:	8b 00                	mov    (%eax),%eax
f010de18:	3b 45 08             	cmp    0x8(%ebp),%eax
f010de1b:	75 39                	jne    f010de56 <get_semaphore_object_ID+0x93>
f010de1d:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de26:	89 d0                	mov    %edx,%eax
f010de28:	c1 e0 02             	shl    $0x2,%eax
f010de2b:	01 d0                	add    %edx,%eax
f010de2d:	01 c0                	add    %eax,%eax
f010de2f:	01 d0                	add    %edx,%eax
f010de31:	01 c0                	add    %eax,%eax
f010de33:	01 d0                	add    %edx,%eax
f010de35:	c1 e0 02             	shl    $0x2,%eax
f010de38:	01 c8                	add    %ecx,%eax
f010de3a:	83 c0 04             	add    $0x4,%eax
f010de3d:	83 ec 08             	sub    $0x8,%esp
f010de40:	50                   	push   %eax
f010de41:	ff 75 0c             	pushl  0xc(%ebp)
f010de44:	e8 bb 2e 02 00       	call   f0130d04 <strcmp>
f010de49:	83 c4 10             	add    $0x10,%esp
f010de4c:	85 c0                	test   %eax,%eax
f010de4e:	75 06                	jne    f010de56 <get_semaphore_object_ID+0x93>
		{
			return i;
f010de50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de53:	eb 19                	jmp    f010de6e <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010de55:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010de56:	ff 45 f4             	incl   -0xc(%ebp)
f010de59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de5c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010de61:	39 c2                	cmp    %eax,%edx
f010de63:	0f 82 6c ff ff ff    	jb     f010ddd5 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010de69:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010de6e:	c9                   	leave  
f010de6f:	c3                   	ret    

f010de70 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010de70:	55                   	push   %ebp
f010de71:	89 e5                	mov    %esp,%ebp
f010de73:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010de76:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010de7b:	39 45 08             	cmp    %eax,0x8(%ebp)
f010de7e:	72 0a                	jb     f010de8a <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010de80:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010de85:	e9 bf 00 00 00       	jmp    f010df49 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010de8a:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de90:	8b 55 08             	mov    0x8(%ebp),%edx
f010de93:	89 d0                	mov    %edx,%eax
f010de95:	c1 e0 02             	shl    $0x2,%eax
f010de98:	01 d0                	add    %edx,%eax
f010de9a:	01 c0                	add    %eax,%eax
f010de9c:	01 d0                	add    %edx,%eax
f010de9e:	01 c0                	add    %eax,%eax
f010dea0:	01 d0                	add    %edx,%eax
f010dea2:	c1 e0 02             	shl    $0x2,%eax
f010dea5:	01 c8                	add    %ecx,%eax
f010dea7:	83 ec 04             	sub    $0x4,%esp
f010deaa:	6a 5c                	push   $0x5c
f010deac:	6a 00                	push   $0x0
f010deae:	50                   	push   %eax
f010deaf:	e8 32 2f 02 00       	call   f0130de6 <memset>
f010deb4:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010deb7:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010debd:	8b 55 08             	mov    0x8(%ebp),%edx
f010dec0:	89 d0                	mov    %edx,%eax
f010dec2:	c1 e0 02             	shl    $0x2,%eax
f010dec5:	01 d0                	add    %edx,%eax
f010dec7:	01 c0                	add    %eax,%eax
f010dec9:	01 d0                	add    %edx,%eax
f010decb:	01 c0                	add    %eax,%eax
f010decd:	01 d0                	add    %edx,%eax
f010decf:	c1 e0 02             	shl    $0x2,%eax
f010ded2:	01 c8                	add    %ecx,%eax
f010ded4:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010ded8:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dede:	8b 55 08             	mov    0x8(%ebp),%edx
f010dee1:	89 d0                	mov    %edx,%eax
f010dee3:	c1 e0 02             	shl    $0x2,%eax
f010dee6:	01 d0                	add    %edx,%eax
f010dee8:	01 c0                	add    %eax,%eax
f010deea:	01 d0                	add    %edx,%eax
f010deec:	01 c0                	add    %eax,%eax
f010deee:	01 d0                	add    %edx,%eax
f010def0:	c1 e0 02             	shl    $0x2,%eax
f010def3:	01 c8                	add    %ecx,%eax
f010def5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010defc:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df02:	8b 55 08             	mov    0x8(%ebp),%edx
f010df05:	89 d0                	mov    %edx,%eax
f010df07:	c1 e0 02             	shl    $0x2,%eax
f010df0a:	01 d0                	add    %edx,%eax
f010df0c:	01 c0                	add    %eax,%eax
f010df0e:	01 d0                	add    %edx,%eax
f010df10:	01 c0                	add    %eax,%eax
f010df12:	01 d0                	add    %edx,%eax
f010df14:	c1 e0 02             	shl    $0x2,%eax
f010df17:	01 c8                	add    %ecx,%eax
f010df19:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010df20:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df26:	8b 55 08             	mov    0x8(%ebp),%edx
f010df29:	89 d0                	mov    %edx,%eax
f010df2b:	c1 e0 02             	shl    $0x2,%eax
f010df2e:	01 d0                	add    %edx,%eax
f010df30:	01 c0                	add    %eax,%eax
f010df32:	01 d0                	add    %edx,%eax
f010df34:	01 c0                	add    %eax,%eax
f010df36:	01 d0                	add    %edx,%eax
f010df38:	c1 e0 02             	shl    $0x2,%eax
f010df3b:	01 c8                	add    %ecx,%eax
f010df3d:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010df44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df49:	c9                   	leave  
f010df4a:	c3                   	ret    

f010df4b <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010df4b:	55                   	push   %ebp
f010df4c:	89 e5                	mov    %esp,%ebp
f010df4e:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010df51:	83 ec 04             	sub    $0x4,%esp
f010df54:	68 00 75 13 f0       	push   $0xf0137500
f010df59:	68 94 00 00 00       	push   $0x94
f010df5e:	68 e0 74 13 f0       	push   $0xf01374e0
f010df63:	e8 93 22 ff ff       	call   f01001fb <_panic>

f010df68 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010df68:	55                   	push   %ebp
f010df69:	89 e5                	mov    %esp,%ebp
f010df6b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010df6e:	83 ec 04             	sub    $0x4,%esp
f010df71:	68 30 75 13 f0       	push   $0xf0137530
f010df76:	68 a6 00 00 00       	push   $0xa6
f010df7b:	68 e0 74 13 f0       	push   $0xf01374e0
f010df80:	e8 76 22 ff ff       	call   f01001fb <_panic>

f010df85 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010df85:	55                   	push   %ebp
f010df86:	89 e5                	mov    %esp,%ebp
f010df88:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010df8b:	83 ec 04             	sub    $0x4,%esp
f010df8e:	68 5c 75 13 f0       	push   $0xf013755c
f010df93:	68 ba 00 00 00       	push   $0xba
f010df98:	68 e0 74 13 f0       	push   $0xf01374e0
f010df9d:	e8 59 22 ff ff       	call   f01001fb <_panic>

f010dfa2 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010dfa2:	55                   	push   %ebp
f010dfa3:	89 e5                	mov    %esp,%ebp
f010dfa5:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010dfa8:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dfaf:	83 ec 0c             	sub    $0xc,%esp
f010dfb2:	ff 75 ec             	pushl  -0x14(%ebp)
f010dfb5:	e8 a8 37 02 00       	call   f0131762 <initialize_MemBlocksList>
f010dfba:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010dfbd:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010dfc2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dfc5:	74 17                	je     f010dfde <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010dfc7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010dfcc:	50                   	push   %eax
f010dfcd:	68 a0 75 13 f0       	push   $0xf01375a0
f010dfd2:	6a 1f                	push   $0x1f
f010dfd4:	68 f4 75 13 f0       	push   $0xf01375f4
f010dfd9:	e8 1d 22 ff ff       	call   f01001fb <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010dfde:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010dfe3:	85 c0                	test   %eax,%eax
f010dfe5:	74 17                	je     f010dffe <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010dfe7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010dfec:	50                   	push   %eax
f010dfed:	68 18 76 13 f0       	push   $0xf0137618
f010dff2:	6a 26                	push   $0x26
f010dff4:	68 f4 75 13 f0       	push   $0xf01375f4
f010dff9:	e8 fd 21 ff ff       	call   f01001fb <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010dffe:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e003:	85 c0                	test   %eax,%eax
f010e005:	74 17                	je     f010e01e <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e007:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e00c:	50                   	push   %eax
f010e00d:	68 68 76 13 f0       	push   $0xf0137668
f010e012:	6a 2c                	push   $0x2c
f010e014:	68 f4 75 13 f0       	push   $0xf01375f4
f010e019:	e8 dd 21 ff ff       	call   f01001fb <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e01e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e025:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e02c:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f010e031:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e034:	eb 29                	jmp    f010e05f <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e036:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e039:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e03c:	8b 50 0c             	mov    0xc(%eax),%edx
f010e03f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e042:	8b 40 08             	mov    0x8(%eax),%eax
f010e045:	83 ec 04             	sub    $0x4,%esp
f010e048:	52                   	push   %edx
f010e049:	50                   	push   %eax
f010e04a:	68 b8 76 13 f0       	push   $0xf01376b8
f010e04f:	e8 2e 2c ff ff       	call   f0100c82 <cprintf>
f010e054:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e057:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e05c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e05f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e063:	74 07                	je     f010e06c <test_initialize_MemBlocksList+0xca>
f010e065:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e068:	8b 00                	mov    (%eax),%eax
f010e06a:	eb 05                	jmp    f010e071 <test_initialize_MemBlocksList+0xcf>
f010e06c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e071:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f010e076:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e07b:	85 c0                	test   %eax,%eax
f010e07d:	75 b7                	jne    f010e036 <test_initialize_MemBlocksList+0x94>
f010e07f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e083:	75 b1                	jne    f010e036 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e085:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e08a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e08d:	74 14                	je     f010e0a3 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e08f:	83 ec 04             	sub    $0x4,%esp
f010e092:	68 d8 76 13 f0       	push   $0xf01376d8
f010e097:	6a 38                	push   $0x38
f010e099:	68 f4 75 13 f0       	push   $0xf01375f4
f010e09e:	e8 58 21 ff ff       	call   f01001fb <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e0a3:	83 ec 0c             	sub    $0xc,%esp
f010e0a6:	68 30 77 13 f0       	push   $0xf0137730
f010e0ab:	e8 d2 2b ff ff       	call   f0100c82 <cprintf>
f010e0b0:	83 c4 10             	add    $0x10,%esp
}
f010e0b3:	90                   	nop
f010e0b4:	c9                   	leave  
f010e0b5:	c3                   	ret    

f010e0b6 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e0b6:	55                   	push   %ebp
f010e0b7:	89 e5                	mov    %esp,%ebp
f010e0b9:	57                   	push   %edi
f010e0ba:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e0c0:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e0c7:	83 ec 0c             	sub    $0xc,%esp
f010e0ca:	ff 75 f4             	pushl  -0xc(%ebp)
f010e0cd:	e8 90 36 02 00       	call   f0131762 <initialize_MemBlocksList>
f010e0d2:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e0d5:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e0dc:	00 00 00 
f010e0df:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e0e6:	00 00 00 
f010e0e9:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e0f0:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e0f3:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e0fa:	00 00 00 
f010e0fd:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e104:	00 00 00 
f010e107:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e10e:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e111:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e114:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e119:	b8 00 00 00 00       	mov    $0x0,%eax
f010e11e:	89 d7                	mov    %edx,%edi
f010e120:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e122:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e125:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e12a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e12f:	89 d7                	mov    %edx,%edi
f010e131:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e133:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e13a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e141:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e148:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e14f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e152:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e155:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e158:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e15b:	83 ec 0c             	sub    $0xc,%esp
f010e15e:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e161:	50                   	push   %eax
f010e162:	e8 30 37 02 00       	call   f0131897 <insert_sorted_allocList>
f010e167:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e16a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e171:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e176:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e179:	74 14                	je     f010e18f <test_insert_sorted_allocList+0xd9>
f010e17b:	83 ec 04             	sub    $0x4,%esp
f010e17e:	68 7c 77 13 f0       	push   $0xf013777c
f010e183:	6a 56                	push   $0x56
f010e185:	68 f4 75 13 f0       	push   $0xf01375f4
f010e18a:	e8 6c 20 ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e18f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e194:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e197:	74 14                	je     f010e1ad <test_insert_sorted_allocList+0xf7>
f010e199:	83 ec 04             	sub    $0x4,%esp
f010e19c:	68 c8 77 13 f0       	push   $0xf01377c8
f010e1a1:	6a 59                	push   $0x59
f010e1a3:	68 f4 75 13 f0       	push   $0xf01375f4
f010e1a8:	e8 4e 20 ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e1ad:	83 ec 0c             	sub    $0xc,%esp
f010e1b0:	ff 75 f0             	pushl  -0x10(%ebp)
f010e1b3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e1b6:	50                   	push   %eax
f010e1b7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e1ba:	50                   	push   %eax
f010e1bb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e1be:	50                   	push   %eax
f010e1bf:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e1c4:	e8 7d 26 00 00       	call   f0110846 <check_list_data>
f010e1c9:	83 c4 20             	add    $0x20,%esp
f010e1cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e1cf:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e1d3:	74 14                	je     f010e1e9 <test_insert_sorted_allocList+0x133>
f010e1d5:	83 ec 04             	sub    $0x4,%esp
f010e1d8:	68 18 78 13 f0       	push   $0xf0137818
f010e1dd:	6a 5d                	push   $0x5d
f010e1df:	68 f4 75 13 f0       	push   $0xf01375f4
f010e1e4:	e8 12 20 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e1e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e1ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e1ef:	74 14                	je     f010e205 <test_insert_sorted_allocList+0x14f>
f010e1f1:	83 ec 04             	sub    $0x4,%esp
f010e1f4:	68 68 78 13 f0       	push   $0xf0137868
f010e1f9:	6a 5e                	push   $0x5e
f010e1fb:	68 f4 75 13 f0       	push   $0xf01375f4
f010e200:	e8 f6 1f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e205:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e20c:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e213:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e216:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e219:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e21c:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e21f:	83 ec 0c             	sub    $0xc,%esp
f010e222:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e225:	50                   	push   %eax
f010e226:	e8 6c 36 02 00       	call   f0131897 <insert_sorted_allocList>
f010e22b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e22e:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e235:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e23a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e23d:	74 14                	je     f010e253 <test_insert_sorted_allocList+0x19d>
f010e23f:	83 ec 04             	sub    $0x4,%esp
f010e242:	68 7c 77 13 f0       	push   $0xf013777c
f010e247:	6a 6d                	push   $0x6d
f010e249:	68 f4 75 13 f0       	push   $0xf01375f4
f010e24e:	e8 a8 1f ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e253:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e258:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e25b:	74 14                	je     f010e271 <test_insert_sorted_allocList+0x1bb>
f010e25d:	83 ec 04             	sub    $0x4,%esp
f010e260:	68 c8 77 13 f0       	push   $0xf01377c8
f010e265:	6a 70                	push   $0x70
f010e267:	68 f4 75 13 f0       	push   $0xf01375f4
f010e26c:	e8 8a 1f ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e271:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e278:	83 ec 0c             	sub    $0xc,%esp
f010e27b:	ff 75 f0             	pushl  -0x10(%ebp)
f010e27e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e281:	50                   	push   %eax
f010e282:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e285:	50                   	push   %eax
f010e286:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e289:	50                   	push   %eax
f010e28a:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e28f:	e8 b2 25 00 00       	call   f0110846 <check_list_data>
f010e294:	83 c4 20             	add    $0x20,%esp
f010e297:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e29a:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e29e:	74 14                	je     f010e2b4 <test_insert_sorted_allocList+0x1fe>
f010e2a0:	83 ec 04             	sub    $0x4,%esp
f010e2a3:	68 18 78 13 f0       	push   $0xf0137818
f010e2a8:	6a 75                	push   $0x75
f010e2aa:	68 f4 75 13 f0       	push   $0xf01375f4
f010e2af:	e8 47 1f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e2b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e2b7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e2ba:	74 14                	je     f010e2d0 <test_insert_sorted_allocList+0x21a>
f010e2bc:	83 ec 04             	sub    $0x4,%esp
f010e2bf:	68 68 78 13 f0       	push   $0xf0137868
f010e2c4:	6a 76                	push   $0x76
f010e2c6:	68 f4 75 13 f0       	push   $0xf01375f4
f010e2cb:	e8 2b 1f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e2d0:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e2d7:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e2de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e2e1:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e2e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e2e7:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e2ea:	83 ec 0c             	sub    $0xc,%esp
f010e2ed:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e2f0:	50                   	push   %eax
f010e2f1:	e8 a1 35 02 00       	call   f0131897 <insert_sorted_allocList>
f010e2f6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e2f9:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e300:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e305:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e308:	74 17                	je     f010e321 <test_insert_sorted_allocList+0x26b>
f010e30a:	83 ec 04             	sub    $0x4,%esp
f010e30d:	68 7c 77 13 f0       	push   $0xf013777c
f010e312:	68 85 00 00 00       	push   $0x85
f010e317:	68 f4 75 13 f0       	push   $0xf01375f4
f010e31c:	e8 da 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e321:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e326:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e329:	74 17                	je     f010e342 <test_insert_sorted_allocList+0x28c>
f010e32b:	83 ec 04             	sub    $0x4,%esp
f010e32e:	68 b4 78 13 f0       	push   $0xf01378b4
f010e333:	68 88 00 00 00       	push   $0x88
f010e338:	68 f4 75 13 f0       	push   $0xf01375f4
f010e33d:	e8 b9 1e ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e342:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e349:	83 ec 0c             	sub    $0xc,%esp
f010e34c:	ff 75 f0             	pushl  -0x10(%ebp)
f010e34f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e352:	50                   	push   %eax
f010e353:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e356:	50                   	push   %eax
f010e357:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e35a:	50                   	push   %eax
f010e35b:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e360:	e8 e1 24 00 00       	call   f0110846 <check_list_data>
f010e365:	83 c4 20             	add    $0x20,%esp
f010e368:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e36b:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e36f:	74 17                	je     f010e388 <test_insert_sorted_allocList+0x2d2>
f010e371:	83 ec 04             	sub    $0x4,%esp
f010e374:	68 18 78 13 f0       	push   $0xf0137818
f010e379:	68 8d 00 00 00       	push   $0x8d
f010e37e:	68 f4 75 13 f0       	push   $0xf01375f4
f010e383:	e8 73 1e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e388:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e38b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e38e:	74 17                	je     f010e3a7 <test_insert_sorted_allocList+0x2f1>
f010e390:	83 ec 04             	sub    $0x4,%esp
f010e393:	68 68 78 13 f0       	push   $0xf0137868
f010e398:	68 8e 00 00 00       	push   $0x8e
f010e39d:	68 f4 75 13 f0       	push   $0xf01375f4
f010e3a2:	e8 54 1e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e3a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e3ae:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e3b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e3b8:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e3bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e3be:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e3c1:	83 ec 0c             	sub    $0xc,%esp
f010e3c4:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e3c7:	50                   	push   %eax
f010e3c8:	e8 ca 34 02 00       	call   f0131897 <insert_sorted_allocList>
f010e3cd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e3d0:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e3d7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e3dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e3df:	74 17                	je     f010e3f8 <test_insert_sorted_allocList+0x342>
f010e3e1:	83 ec 04             	sub    $0x4,%esp
f010e3e4:	68 7c 77 13 f0       	push   $0xf013777c
f010e3e9:	68 9c 00 00 00       	push   $0x9c
f010e3ee:	68 f4 75 13 f0       	push   $0xf01375f4
f010e3f3:	e8 03 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e3f8:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e3fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e400:	74 17                	je     f010e419 <test_insert_sorted_allocList+0x363>
f010e402:	83 ec 04             	sub    $0x4,%esp
f010e405:	68 c8 77 13 f0       	push   $0xf01377c8
f010e40a:	68 9f 00 00 00       	push   $0x9f
f010e40f:	68 f4 75 13 f0       	push   $0xf01375f4
f010e414:	e8 e2 1d ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e419:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e420:	83 ec 0c             	sub    $0xc,%esp
f010e423:	ff 75 f0             	pushl  -0x10(%ebp)
f010e426:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e429:	50                   	push   %eax
f010e42a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e42d:	50                   	push   %eax
f010e42e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e431:	50                   	push   %eax
f010e432:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e437:	e8 0a 24 00 00       	call   f0110846 <check_list_data>
f010e43c:	83 c4 20             	add    $0x20,%esp
f010e43f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e442:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e446:	74 17                	je     f010e45f <test_insert_sorted_allocList+0x3a9>
f010e448:	83 ec 04             	sub    $0x4,%esp
f010e44b:	68 18 78 13 f0       	push   $0xf0137818
f010e450:	68 a4 00 00 00       	push   $0xa4
f010e455:	68 f4 75 13 f0       	push   $0xf01375f4
f010e45a:	e8 9c 1d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e45f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e462:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e465:	74 17                	je     f010e47e <test_insert_sorted_allocList+0x3c8>
f010e467:	83 ec 04             	sub    $0x4,%esp
f010e46a:	68 68 78 13 f0       	push   $0xf0137868
f010e46f:	68 a5 00 00 00       	push   $0xa5
f010e474:	68 f4 75 13 f0       	push   $0xf01375f4
f010e479:	e8 7d 1d ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010e47e:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010e485:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010e48c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e48f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010e495:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e498:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010e49e:	83 ec 0c             	sub    $0xc,%esp
f010e4a1:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010e4a7:	50                   	push   %eax
f010e4a8:	e8 ea 33 02 00       	call   f0131897 <insert_sorted_allocList>
f010e4ad:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010e4b0:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e4b7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e4bc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e4bf:	74 17                	je     f010e4d8 <test_insert_sorted_allocList+0x422>
f010e4c1:	83 ec 04             	sub    $0x4,%esp
f010e4c4:	68 7c 77 13 f0       	push   $0xf013777c
f010e4c9:	68 b3 00 00 00       	push   $0xb3
f010e4ce:	68 f4 75 13 f0       	push   $0xf01375f4
f010e4d3:	e8 23 1d ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e4d8:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e4dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e4e0:	74 17                	je     f010e4f9 <test_insert_sorted_allocList+0x443>
f010e4e2:	83 ec 04             	sub    $0x4,%esp
f010e4e5:	68 c8 77 13 f0       	push   $0xf01377c8
f010e4ea:	68 b6 00 00 00       	push   $0xb6
f010e4ef:	68 f4 75 13 f0       	push   $0xf01375f4
f010e4f4:	e8 02 1d ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e4f9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e500:	83 ec 0c             	sub    $0xc,%esp
f010e503:	ff 75 f0             	pushl  -0x10(%ebp)
f010e506:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e509:	50                   	push   %eax
f010e50a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e50d:	50                   	push   %eax
f010e50e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e511:	50                   	push   %eax
f010e512:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e517:	e8 2a 23 00 00       	call   f0110846 <check_list_data>
f010e51c:	83 c4 20             	add    $0x20,%esp
f010e51f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e522:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e526:	74 17                	je     f010e53f <test_insert_sorted_allocList+0x489>
f010e528:	83 ec 04             	sub    $0x4,%esp
f010e52b:	68 18 78 13 f0       	push   $0xf0137818
f010e530:	68 bb 00 00 00       	push   $0xbb
f010e535:	68 f4 75 13 f0       	push   $0xf01375f4
f010e53a:	e8 bc 1c ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e53f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e542:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e545:	74 17                	je     f010e55e <test_insert_sorted_allocList+0x4a8>
f010e547:	83 ec 04             	sub    $0x4,%esp
f010e54a:	68 68 78 13 f0       	push   $0xf0137868
f010e54f:	68 bc 00 00 00       	push   $0xbc
f010e554:	68 f4 75 13 f0       	push   $0xf01375f4
f010e559:	e8 9d 1c ff ff       	call   f01001fb <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010e55e:	83 ec 0c             	sub    $0xc,%esp
f010e561:	68 04 79 13 f0       	push   $0xf0137904
f010e566:	e8 17 27 ff ff       	call   f0100c82 <cprintf>
f010e56b:	83 c4 10             	add    $0x10,%esp
}
f010e56e:	90                   	nop
f010e56f:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010e572:	c9                   	leave  
f010e573:	c3                   	ret    

f010e574 <test_find_block>:

void test_find_block()
{
f010e574:	55                   	push   %ebp
f010e575:	89 e5                	mov    %esp,%ebp
f010e577:	57                   	push   %edi
f010e578:	56                   	push   %esi
f010e579:	53                   	push   %ebx
f010e57a:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010e580:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e587:	83 ec 0c             	sub    $0xc,%esp
f010e58a:	ff 75 e0             	pushl  -0x20(%ebp)
f010e58d:	e8 d0 31 02 00       	call   f0131762 <initialize_MemBlocksList>
f010e592:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010e595:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e59c:	00 00 00 
f010e59f:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e5a6:	00 00 00 
f010e5a9:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e5b0:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010e5b3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e5b6:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f010e5bb:	ba 06 00 00 00       	mov    $0x6,%edx
f010e5c0:	89 c7                	mov    %eax,%edi
f010e5c2:	89 de                	mov    %ebx,%esi
f010e5c4:	89 d1                	mov    %edx,%ecx
f010e5c6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010e5c8:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010e5cb:	bb 94 7a 13 f0       	mov    $0xf0137a94,%ebx
f010e5d0:	ba 06 00 00 00       	mov    $0x6,%edx
f010e5d5:	89 c7                	mov    %eax,%edi
f010e5d7:	89 de                	mov    %ebx,%esi
f010e5d9:	89 d1                	mov    %edx,%ecx
f010e5db:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e5dd:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e5e4:	00 00 00 
f010e5e7:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e5ee:	00 00 00 
f010e5f1:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e5f8:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e5fb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e602:	e9 5f 01 00 00       	jmp    f010e766 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e60a:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e60e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e611:	c1 e2 04             	shl    $0x4,%edx
f010e614:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e617:	01 da                	add    %ebx,%edx
f010e619:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e61f:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e621:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e624:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e628:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e62b:	c1 e2 04             	shl    $0x4,%edx
f010e62e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e631:	01 f2                	add    %esi,%edx
f010e633:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e639:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e63b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e63f:	0f 85 92 00 00 00    	jne    f010e6d7 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e645:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e64a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e64d:	c1 e2 04             	shl    $0x4,%edx
f010e650:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e653:	01 fa                	add    %edi,%edx
f010e655:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e65b:	89 02                	mov    %eax,(%edx)
f010e65d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e660:	c1 e0 04             	shl    $0x4,%eax
f010e663:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e666:	01 d8                	add    %ebx,%eax
f010e668:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e66d:	8b 00                	mov    (%eax),%eax
f010e66f:	85 c0                	test   %eax,%eax
f010e671:	74 18                	je     f010e68b <test_find_block+0x117>
f010e673:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e678:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e67e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e681:	c1 e1 04             	shl    $0x4,%ecx
f010e684:	01 ca                	add    %ecx,%edx
f010e686:	89 50 04             	mov    %edx,0x4(%eax)
f010e689:	eb 13                	jmp    f010e69e <test_find_block+0x12a>
f010e68b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e691:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e694:	c1 e2 04             	shl    $0x4,%edx
f010e697:	01 d0                	add    %edx,%eax
f010e699:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e69e:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e6a4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e6a7:	c1 e2 04             	shl    $0x4,%edx
f010e6aa:	01 d0                	add    %edx,%eax
f010e6ac:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e6b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e6b4:	c1 e0 04             	shl    $0x4,%eax
f010e6b7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e6ba:	01 f0                	add    %esi,%eax
f010e6bc:	2d 98 00 00 00       	sub    $0x98,%eax
f010e6c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e6c7:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e6cc:	40                   	inc    %eax
f010e6cd:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
f010e6d2:	e9 8c 00 00 00       	jmp    f010e763 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e6d7:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e6dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e6df:	c1 e2 04             	shl    $0x4,%edx
f010e6e2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e6e5:	01 fa                	add    %edi,%edx
f010e6e7:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e6ed:	89 02                	mov    %eax,(%edx)
f010e6ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e6f2:	c1 e0 04             	shl    $0x4,%eax
f010e6f5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e6f8:	01 d8                	add    %ebx,%eax
f010e6fa:	2d 98 00 00 00       	sub    $0x98,%eax
f010e6ff:	8b 00                	mov    (%eax),%eax
f010e701:	85 c0                	test   %eax,%eax
f010e703:	74 17                	je     f010e71c <test_find_block+0x1a8>
f010e705:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e70a:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e710:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e713:	c1 e1 04             	shl    $0x4,%ecx
f010e716:	01 ca                	add    %ecx,%edx
f010e718:	89 10                	mov    %edx,(%eax)
f010e71a:	eb 13                	jmp    f010e72f <test_find_block+0x1bb>
f010e71c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e722:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e725:	c1 e2 04             	shl    $0x4,%edx
f010e728:	01 d0                	add    %edx,%eax
f010e72a:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e72f:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e735:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e738:	c1 e2 04             	shl    $0x4,%edx
f010e73b:	01 d0                	add    %edx,%eax
f010e73d:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e742:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e745:	c1 e0 04             	shl    $0x4,%eax
f010e748:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e74b:	01 f0                	add    %esi,%eax
f010e74d:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e752:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e758:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e75d:	40                   	inc    %eax
f010e75e:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e763:	ff 45 e4             	incl   -0x1c(%ebp)
f010e766:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010e76a:	0f 8e 97 fe ff ff    	jle    f010e607 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010e770:	83 ec 08             	sub    $0x8,%esp
f010e773:	68 00 10 00 00       	push   $0x1000
f010e778:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e77d:	e8 bd 30 02 00       	call   f013183f <find_block>
f010e782:	83 c4 10             	add    $0x10,%esp
f010e785:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010e788:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e78c:	74 17                	je     f010e7a5 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010e78e:	83 ec 04             	sub    $0x4,%esp
f010e791:	68 44 79 13 f0       	push   $0xf0137944
f010e796:	68 de 00 00 00       	push   $0xde
f010e79b:	68 f4 75 13 f0       	push   $0xf01375f4
f010e7a0:	e8 56 1a ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010e7a5:	83 ec 08             	sub    $0x8,%esp
f010e7a8:	6a 00                	push   $0x0
f010e7aa:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e7af:	e8 8b 30 02 00       	call   f013183f <find_block>
f010e7b4:	83 c4 10             	add    $0x10,%esp
f010e7b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010e7ba:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e7be:	74 17                	je     f010e7d7 <test_find_block+0x263>
f010e7c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7c3:	8b 40 0c             	mov    0xc(%eax),%eax
f010e7c6:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e7cb:	75 0a                	jne    f010e7d7 <test_find_block+0x263>
f010e7cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7d0:	8b 40 08             	mov    0x8(%eax),%eax
f010e7d3:	85 c0                	test   %eax,%eax
f010e7d5:	74 17                	je     f010e7ee <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e7d7:	83 ec 04             	sub    $0x4,%esp
f010e7da:	68 a8 79 13 f0       	push   $0xf01379a8
f010e7df:	68 e3 00 00 00       	push   $0xe3
f010e7e4:	68 f4 75 13 f0       	push   $0xf01375f4
f010e7e9:	e8 0d 1a ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010e7ee:	83 ec 08             	sub    $0x8,%esp
f010e7f1:	68 00 70 00 00       	push   $0x7000
f010e7f6:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e7fb:	e8 3f 30 02 00       	call   f013183f <find_block>
f010e800:	83 c4 10             	add    $0x10,%esp
f010e803:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010e806:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e80a:	74 1a                	je     f010e826 <test_find_block+0x2b2>
f010e80c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e80f:	8b 40 0c             	mov    0xc(%eax),%eax
f010e812:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e817:	75 0d                	jne    f010e826 <test_find_block+0x2b2>
f010e819:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e81c:	8b 40 08             	mov    0x8(%eax),%eax
f010e81f:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e824:	74 17                	je     f010e83d <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e826:	83 ec 04             	sub    $0x4,%esp
f010e829:	68 a8 79 13 f0       	push   $0xf01379a8
f010e82e:	68 e8 00 00 00       	push   $0xe8
f010e833:	68 f4 75 13 f0       	push   $0xf01375f4
f010e838:	e8 be 19 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010e83d:	83 ec 08             	sub    $0x8,%esp
f010e840:	68 00 a4 01 00       	push   $0x1a400
f010e845:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e84a:	e8 f0 2f 02 00       	call   f013183f <find_block>
f010e84f:	83 c4 10             	add    $0x10,%esp
f010e852:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010e855:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e859:	74 1a                	je     f010e875 <test_find_block+0x301>
f010e85b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e85e:	8b 40 0c             	mov    0xc(%eax),%eax
f010e861:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e866:	75 0d                	jne    f010e875 <test_find_block+0x301>
f010e868:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e86b:	8b 40 08             	mov    0x8(%eax),%eax
f010e86e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e873:	74 17                	je     f010e88c <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e875:	83 ec 04             	sub    $0x4,%esp
f010e878:	68 a8 79 13 f0       	push   $0xf01379a8
f010e87d:	68 ed 00 00 00       	push   $0xed
f010e882:	68 f4 75 13 f0       	push   $0xf01375f4
f010e887:	e8 6f 19 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010e88c:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e891:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e894:	75 09                	jne    f010e89f <test_find_block+0x32b>
f010e896:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e89b:	85 c0                	test   %eax,%eax
f010e89d:	74 17                	je     f010e8b6 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010e89f:	83 ec 04             	sub    $0x4,%esp
f010e8a2:	68 dc 79 13 f0       	push   $0xf01379dc
f010e8a7:	68 f2 00 00 00       	push   $0xf2
f010e8ac:	68 f4 75 13 f0       	push   $0xf01375f4
f010e8b1:	e8 45 19 ff ff       	call   f01001fb <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010e8b6:	83 ec 0c             	sub    $0xc,%esp
f010e8b9:	68 40 7a 13 f0       	push   $0xf0137a40
f010e8be:	e8 bf 23 ff ff       	call   f0100c82 <cprintf>
f010e8c3:	83 c4 10             	add    $0x10,%esp
}
f010e8c6:	90                   	nop
f010e8c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e8ca:	5b                   	pop    %ebx
f010e8cb:	5e                   	pop    %esi
f010e8cc:	5f                   	pop    %edi
f010e8cd:	5d                   	pop    %ebp
f010e8ce:	c3                   	ret    

f010e8cf <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e8cf:	55                   	push   %ebp
f010e8d0:	89 e5                	mov    %esp,%ebp
f010e8d2:	57                   	push   %edi
f010e8d3:	56                   	push   %esi
f010e8d4:	53                   	push   %ebx
f010e8d5:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e8db:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e8e2:	83 ec 0c             	sub    $0xc,%esp
f010e8e5:	ff 75 e0             	pushl  -0x20(%ebp)
f010e8e8:	e8 75 2e 02 00       	call   f0131762 <initialize_MemBlocksList>
f010e8ed:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e8f0:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e8f7:	00 00 00 
f010e8fa:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e901:	00 00 00 
f010e904:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e90b:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e90e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e911:	bb 20 7d 13 f0       	mov    $0xf0137d20,%ebx
f010e916:	ba 08 00 00 00       	mov    $0x8,%edx
f010e91b:	89 c7                	mov    %eax,%edi
f010e91d:	89 de                	mov    %ebx,%esi
f010e91f:	89 d1                	mov    %edx,%ecx
f010e921:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e923:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e926:	bb 40 7d 13 f0       	mov    $0xf0137d40,%ebx
f010e92b:	ba 08 00 00 00       	mov    $0x8,%edx
f010e930:	89 c7                	mov    %eax,%edi
f010e932:	89 de                	mov    %ebx,%esi
f010e934:	89 d1                	mov    %edx,%ecx
f010e936:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e938:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e93f:	00 00 00 
f010e942:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e949:	00 00 00 
f010e94c:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e953:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e956:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e95d:	e9 5f 01 00 00       	jmp    f010eac1 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e962:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e965:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e969:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e96c:	c1 e2 04             	shl    $0x4,%edx
f010e96f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e972:	01 da                	add    %ebx,%edx
f010e974:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e97a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e97c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e97f:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e983:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e986:	c1 e2 04             	shl    $0x4,%edx
f010e989:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e98c:	01 f2                	add    %esi,%edx
f010e98e:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e994:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e996:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e99a:	0f 85 92 00 00 00    	jne    f010ea32 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e9a0:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010e9a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9a8:	c1 e2 04             	shl    $0x4,%edx
f010e9ab:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e9ae:	01 fa                	add    %edi,%edx
f010e9b0:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e9b6:	89 02                	mov    %eax,(%edx)
f010e9b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9bb:	c1 e0 04             	shl    $0x4,%eax
f010e9be:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e9c1:	01 d8                	add    %ebx,%eax
f010e9c3:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e9c8:	8b 00                	mov    (%eax),%eax
f010e9ca:	85 c0                	test   %eax,%eax
f010e9cc:	74 18                	je     f010e9e6 <test_alloc_block_FF+0x117>
f010e9ce:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010e9d3:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e9d9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e9dc:	c1 e1 04             	shl    $0x4,%ecx
f010e9df:	01 ca                	add    %ecx,%edx
f010e9e1:	89 50 04             	mov    %edx,0x4(%eax)
f010e9e4:	eb 13                	jmp    f010e9f9 <test_alloc_block_FF+0x12a>
f010e9e6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e9ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9ef:	c1 e2 04             	shl    $0x4,%edx
f010e9f2:	01 d0                	add    %edx,%eax
f010e9f4:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010e9f9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e9ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea02:	c1 e2 04             	shl    $0x4,%edx
f010ea05:	01 d0                	add    %edx,%eax
f010ea07:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ea0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea0f:	c1 e0 04             	shl    $0x4,%eax
f010ea12:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ea15:	01 f0                	add    %esi,%eax
f010ea17:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ea1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ea22:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ea27:	40                   	inc    %eax
f010ea28:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010ea2d:	e9 8c 00 00 00       	jmp    f010eabe <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ea32:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ea37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea3a:	c1 e2 04             	shl    $0x4,%edx
f010ea3d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ea40:	01 fa                	add    %edi,%edx
f010ea42:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ea48:	89 02                	mov    %eax,(%edx)
f010ea4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea4d:	c1 e0 04             	shl    $0x4,%eax
f010ea50:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ea53:	01 d8                	add    %ebx,%eax
f010ea55:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ea5a:	8b 00                	mov    (%eax),%eax
f010ea5c:	85 c0                	test   %eax,%eax
f010ea5e:	74 17                	je     f010ea77 <test_alloc_block_FF+0x1a8>
f010ea60:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ea65:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ea6b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ea6e:	c1 e1 04             	shl    $0x4,%ecx
f010ea71:	01 ca                	add    %ecx,%edx
f010ea73:	89 10                	mov    %edx,(%eax)
f010ea75:	eb 13                	jmp    f010ea8a <test_alloc_block_FF+0x1bb>
f010ea77:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ea7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea80:	c1 e2 04             	shl    $0x4,%edx
f010ea83:	01 d0                	add    %edx,%eax
f010ea85:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ea8a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ea90:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea93:	c1 e2 04             	shl    $0x4,%edx
f010ea96:	01 d0                	add    %edx,%eax
f010ea98:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ea9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eaa0:	c1 e0 04             	shl    $0x4,%eax
f010eaa3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eaa6:	01 f0                	add    %esi,%eax
f010eaa8:	2d d4 00 00 00       	sub    $0xd4,%eax
f010eaad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eab3:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eab8:	40                   	inc    %eax
f010eab9:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010eabe:	ff 45 e4             	incl   -0x1c(%ebp)
f010eac1:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010eac5:	0f 8e 97 fe ff ff    	jle    f010e962 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010eacb:	83 ec 0c             	sub    $0xc,%esp
f010eace:	68 00 00 30 00       	push   $0x300000
f010ead3:	e8 4c 30 02 00       	call   f0131b24 <alloc_block_FF>
f010ead8:	83 c4 10             	add    $0x10,%esp
f010eadb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010eade:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eae2:	74 17                	je     f010eafb <test_alloc_block_FF+0x22c>
f010eae4:	83 ec 04             	sub    $0x4,%esp
f010eae7:	68 ac 7a 13 f0       	push   $0xf0137aac
f010eaec:	68 15 01 00 00       	push   $0x115
f010eaf1:	68 f4 75 13 f0       	push   $0xf01375f4
f010eaf6:	e8 00 17 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eafb:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010eb00:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb03:	75 13                	jne    f010eb18 <test_alloc_block_FF+0x249>
f010eb05:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eb0a:	83 f8 08             	cmp    $0x8,%eax
f010eb0d:	75 09                	jne    f010eb18 <test_alloc_block_FF+0x249>
f010eb0f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010eb14:	85 c0                	test   %eax,%eax
f010eb16:	74 17                	je     f010eb2f <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010eb18:	83 ec 04             	sub    $0x4,%esp
f010eb1b:	68 20 7b 13 f0       	push   $0xf0137b20
f010eb20:	68 19 01 00 00       	push   $0x119
f010eb25:	68 f4 75 13 f0       	push   $0xf01375f4
f010eb2a:	e8 cc 16 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010eb2f:	83 ec 0c             	sub    $0xc,%esp
f010eb32:	68 00 24 00 00       	push   $0x2400
f010eb37:	e8 e8 2f 02 00       	call   f0131b24 <alloc_block_FF>
f010eb3c:	83 c4 10             	add    $0x10,%esp
f010eb3f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010eb42:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb46:	74 1a                	je     f010eb62 <test_alloc_block_FF+0x293>
f010eb48:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb4b:	8b 40 0c             	mov    0xc(%eax),%eax
f010eb4e:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010eb53:	75 0d                	jne    f010eb62 <test_alloc_block_FF+0x293>
f010eb55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb58:	8b 40 08             	mov    0x8(%eax),%eax
f010eb5b:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010eb60:	74 17                	je     f010eb79 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010eb62:	83 ec 04             	sub    $0x4,%esp
f010eb65:	68 98 7b 13 f0       	push   $0xf0137b98
f010eb6a:	68 21 01 00 00       	push   $0x121
f010eb6f:	68 f4 75 13 f0       	push   $0xf01375f4
f010eb74:	e8 82 16 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eb79:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010eb7e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb81:	75 13                	jne    f010eb96 <test_alloc_block_FF+0x2c7>
f010eb83:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eb88:	83 f8 07             	cmp    $0x7,%eax
f010eb8b:	75 09                	jne    f010eb96 <test_alloc_block_FF+0x2c7>
f010eb8d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010eb92:	85 c0                	test   %eax,%eax
f010eb94:	74 17                	je     f010ebad <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eb96:	83 ec 04             	sub    $0x4,%esp
f010eb99:	68 dc 7b 13 f0       	push   $0xf0137bdc
f010eb9e:	68 25 01 00 00       	push   $0x125
f010eba3:	68 f4 75 13 f0       	push   $0xf01375f4
f010eba8:	e8 4e 16 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ebad:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ebb4:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010ebb7:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010ebbe:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ebc5:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ebcc:	83 ec 0c             	sub    $0xc,%esp
f010ebcf:	ff 75 d8             	pushl  -0x28(%ebp)
f010ebd2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ebd8:	50                   	push   %eax
f010ebd9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ebdc:	50                   	push   %eax
f010ebdd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ebe0:	50                   	push   %eax
f010ebe1:	68 64 7b 65 f0       	push   $0xf0657b64
f010ebe6:	e8 5b 1c 00 00       	call   f0110846 <check_list_data>
f010ebeb:	83 c4 20             	add    $0x20,%esp
f010ebee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ebf1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ebf5:	74 17                	je     f010ec0e <test_alloc_block_FF+0x33f>
f010ebf7:	83 ec 04             	sub    $0x4,%esp
f010ebfa:	68 40 7c 13 f0       	push   $0xf0137c40
f010ebff:	68 2d 01 00 00       	push   $0x12d
f010ec04:	68 f4 75 13 f0       	push   $0xf01375f4
f010ec09:	e8 ed 15 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010ec0e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ec14:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ec17:	74 17                	je     f010ec30 <test_alloc_block_FF+0x361>
f010ec19:	83 ec 04             	sub    $0x4,%esp
f010ec1c:	68 8c 7c 13 f0       	push   $0xf0137c8c
f010ec21:	68 2e 01 00 00       	push   $0x12e
f010ec26:	68 f4 75 13 f0       	push   $0xf01375f4
f010ec2b:	e8 cb 15 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010ec30:	83 ec 0c             	sub    $0xc,%esp
f010ec33:	68 00 00 10 00       	push   $0x100000
f010ec38:	e8 e7 2e 02 00       	call   f0131b24 <alloc_block_FF>
f010ec3d:	83 c4 10             	add    $0x10,%esp
f010ec40:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010ec43:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ec47:	74 1a                	je     f010ec63 <test_alloc_block_FF+0x394>
f010ec49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec4c:	8b 40 0c             	mov    0xc(%eax),%eax
f010ec4f:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010ec54:	75 0d                	jne    f010ec63 <test_alloc_block_FF+0x394>
f010ec56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec59:	8b 40 08             	mov    0x8(%eax),%eax
f010ec5c:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ec61:	74 17                	je     f010ec7a <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ec63:	83 ec 04             	sub    $0x4,%esp
f010ec66:	68 98 7b 13 f0       	push   $0xf0137b98
f010ec6b:	68 36 01 00 00       	push   $0x136
f010ec70:	68 f4 75 13 f0       	push   $0xf01375f4
f010ec75:	e8 81 15 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec7a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ec7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ec82:	4a                   	dec    %edx
f010ec83:	39 d0                	cmp    %edx,%eax
f010ec85:	75 13                	jne    f010ec9a <test_alloc_block_FF+0x3cb>
f010ec87:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ec8c:	83 f8 07             	cmp    $0x7,%eax
f010ec8f:	75 09                	jne    f010ec9a <test_alloc_block_FF+0x3cb>
f010ec91:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ec96:	85 c0                	test   %eax,%eax
f010ec98:	74 17                	je     f010ecb1 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec9a:	83 ec 04             	sub    $0x4,%esp
f010ec9d:	68 dc 7b 13 f0       	push   $0xf0137bdc
f010eca2:	68 3a 01 00 00       	push   $0x13a
f010eca7:	68 f4 75 13 f0       	push   $0xf01375f4
f010ecac:	e8 4a 15 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ecb1:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ecb8:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010ecbb:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ecc2:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ecc9:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ecd0:	83 ec 0c             	sub    $0xc,%esp
f010ecd3:	ff 75 d8             	pushl  -0x28(%ebp)
f010ecd6:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ecdc:	50                   	push   %eax
f010ecdd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ece0:	50                   	push   %eax
f010ece1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ece4:	50                   	push   %eax
f010ece5:	68 64 7b 65 f0       	push   $0xf0657b64
f010ecea:	e8 57 1b 00 00       	call   f0110846 <check_list_data>
f010ecef:	83 c4 20             	add    $0x20,%esp
f010ecf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ecf5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ecf9:	74 17                	je     f010ed12 <test_alloc_block_FF+0x443>
f010ecfb:	83 ec 04             	sub    $0x4,%esp
f010ecfe:	68 40 7c 13 f0       	push   $0xf0137c40
f010ed03:	68 42 01 00 00       	push   $0x142
f010ed08:	68 f4 75 13 f0       	push   $0xf01375f4
f010ed0d:	e8 e9 14 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010ed12:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ed18:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ed1b:	74 17                	je     f010ed34 <test_alloc_block_FF+0x465>
f010ed1d:	83 ec 04             	sub    $0x4,%esp
f010ed20:	68 8c 7c 13 f0       	push   $0xf0137c8c
f010ed25:	68 43 01 00 00       	push   $0x143
f010ed2a:	68 f4 75 13 f0       	push   $0xf01375f4
f010ed2f:	e8 c7 14 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010ed34:	83 ec 0c             	sub    $0xc,%esp
f010ed37:	68 d8 7c 13 f0       	push   $0xf0137cd8
f010ed3c:	e8 41 1f ff ff       	call   f0100c82 <cprintf>
f010ed41:	83 c4 10             	add    $0x10,%esp
}
f010ed44:	90                   	nop
f010ed45:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ed48:	5b                   	pop    %ebx
f010ed49:	5e                   	pop    %esi
f010ed4a:	5f                   	pop    %edi
f010ed4b:	5d                   	pop    %ebp
f010ed4c:	c3                   	ret    

f010ed4d <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ed4d:	55                   	push   %ebp
f010ed4e:	89 e5                	mov    %esp,%ebp
f010ed50:	57                   	push   %edi
f010ed51:	56                   	push   %esi
f010ed52:	53                   	push   %ebx
f010ed53:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010ed59:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ed60:	83 ec 0c             	sub    $0xc,%esp
f010ed63:	ff 75 e0             	pushl  -0x20(%ebp)
f010ed66:	e8 f7 29 02 00       	call   f0131762 <initialize_MemBlocksList>
f010ed6b:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ed6e:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010ed75:	00 00 00 
f010ed78:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010ed7f:	00 00 00 
f010ed82:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010ed89:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010ed8c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ed8f:	bb 54 7f 13 f0       	mov    $0xf0137f54,%ebx
f010ed94:	ba 07 00 00 00       	mov    $0x7,%edx
f010ed99:	89 c7                	mov    %eax,%edi
f010ed9b:	89 de                	mov    %ebx,%esi
f010ed9d:	89 d1                	mov    %edx,%ecx
f010ed9f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010eda1:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010eda4:	bb 70 7f 13 f0       	mov    $0xf0137f70,%ebx
f010eda9:	ba 07 00 00 00       	mov    $0x7,%edx
f010edae:	89 c7                	mov    %eax,%edi
f010edb0:	89 de                	mov    %ebx,%esi
f010edb2:	89 d1                	mov    %edx,%ecx
f010edb4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010edb6:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010edbd:	00 00 00 
f010edc0:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010edc7:	00 00 00 
f010edca:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010edd1:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010edd4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010eddb:	e9 5f 01 00 00       	jmp    f010ef3f <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010ede0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ede3:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010ede7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010edea:	c1 e2 04             	shl    $0x4,%edx
f010eded:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010edf0:	01 da                	add    %ebx,%edx
f010edf2:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010edf8:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010edfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010edfd:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010ee01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee04:	c1 e2 04             	shl    $0x4,%edx
f010ee07:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ee0a:	01 f2                	add    %esi,%edx
f010ee0c:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010ee12:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ee14:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ee18:	0f 85 92 00 00 00    	jne    f010eeb0 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ee1e:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010ee23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee26:	c1 e2 04             	shl    $0x4,%edx
f010ee29:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ee2c:	01 fa                	add    %edi,%edx
f010ee2e:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010ee34:	89 02                	mov    %eax,(%edx)
f010ee36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee39:	c1 e0 04             	shl    $0x4,%eax
f010ee3c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ee3f:	01 d8                	add    %ebx,%eax
f010ee41:	2d bc 00 00 00       	sub    $0xbc,%eax
f010ee46:	8b 00                	mov    (%eax),%eax
f010ee48:	85 c0                	test   %eax,%eax
f010ee4a:	74 18                	je     f010ee64 <test_alloc_block_BF+0x117>
f010ee4c:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010ee51:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010ee57:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ee5a:	c1 e1 04             	shl    $0x4,%ecx
f010ee5d:	01 ca                	add    %ecx,%edx
f010ee5f:	89 50 04             	mov    %edx,0x4(%eax)
f010ee62:	eb 13                	jmp    f010ee77 <test_alloc_block_BF+0x12a>
f010ee64:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ee6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee6d:	c1 e2 04             	shl    $0x4,%edx
f010ee70:	01 d0                	add    %edx,%eax
f010ee72:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ee77:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ee7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee80:	c1 e2 04             	shl    $0x4,%edx
f010ee83:	01 d0                	add    %edx,%eax
f010ee85:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ee8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee8d:	c1 e0 04             	shl    $0x4,%eax
f010ee90:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ee93:	01 f0                	add    %esi,%eax
f010ee95:	2d b8 00 00 00       	sub    $0xb8,%eax
f010ee9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eea0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eea5:	40                   	inc    %eax
f010eea6:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010eeab:	e9 8c 00 00 00       	jmp    f010ef3c <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010eeb0:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010eeb5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eeb8:	c1 e2 04             	shl    $0x4,%edx
f010eebb:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eebe:	01 fa                	add    %edi,%edx
f010eec0:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010eec6:	89 02                	mov    %eax,(%edx)
f010eec8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eecb:	c1 e0 04             	shl    $0x4,%eax
f010eece:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eed1:	01 d8                	add    %ebx,%eax
f010eed3:	2d b8 00 00 00       	sub    $0xb8,%eax
f010eed8:	8b 00                	mov    (%eax),%eax
f010eeda:	85 c0                	test   %eax,%eax
f010eedc:	74 17                	je     f010eef5 <test_alloc_block_BF+0x1a8>
f010eede:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010eee3:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010eee9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eeec:	c1 e1 04             	shl    $0x4,%ecx
f010eeef:	01 ca                	add    %ecx,%edx
f010eef1:	89 10                	mov    %edx,(%eax)
f010eef3:	eb 13                	jmp    f010ef08 <test_alloc_block_BF+0x1bb>
f010eef5:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010eefb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eefe:	c1 e2 04             	shl    $0x4,%edx
f010ef01:	01 d0                	add    %edx,%eax
f010ef03:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ef08:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ef0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef11:	c1 e2 04             	shl    $0x4,%edx
f010ef14:	01 d0                	add    %edx,%eax
f010ef16:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ef1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef1e:	c1 e0 04             	shl    $0x4,%eax
f010ef21:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef24:	01 f0                	add    %esi,%eax
f010ef26:	2d bc 00 00 00       	sub    $0xbc,%eax
f010ef2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ef31:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ef36:	40                   	inc    %eax
f010ef37:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010ef3c:	ff 45 e4             	incl   -0x1c(%ebp)
f010ef3f:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010ef43:	0f 8e 97 fe ff ff    	jle    f010ede0 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010ef49:	83 ec 0c             	sub    $0xc,%esp
f010ef4c:	68 00 00 40 00       	push   $0x400000
f010ef51:	e8 9b 2d 02 00       	call   f0131cf1 <alloc_block_BF>
f010ef56:	83 c4 10             	add    $0x10,%esp
f010ef59:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010ef5c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef60:	74 17                	je     f010ef79 <test_alloc_block_BF+0x22c>
f010ef62:	83 ec 04             	sub    $0x4,%esp
f010ef65:	68 60 7d 13 f0       	push   $0xf0137d60
f010ef6a:	68 66 01 00 00       	push   $0x166
f010ef6f:	68 f4 75 13 f0       	push   $0xf01375f4
f010ef74:	e8 82 12 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ef79:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ef7e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ef81:	75 13                	jne    f010ef96 <test_alloc_block_BF+0x249>
f010ef83:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ef88:	83 f8 07             	cmp    $0x7,%eax
f010ef8b:	75 09                	jne    f010ef96 <test_alloc_block_BF+0x249>
f010ef8d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ef92:	85 c0                	test   %eax,%eax
f010ef94:	74 17                	je     f010efad <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ef96:	83 ec 04             	sub    $0x4,%esp
f010ef99:	68 20 7b 13 f0       	push   $0xf0137b20
f010ef9e:	68 6a 01 00 00       	push   $0x16a
f010efa3:	68 f4 75 13 f0       	push   $0xf01375f4
f010efa8:	e8 4e 12 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010efad:	83 ec 0c             	sub    $0xc,%esp
f010efb0:	68 00 00 10 00       	push   $0x100000
f010efb5:	e8 37 2d 02 00       	call   f0131cf1 <alloc_block_BF>
f010efba:	83 c4 10             	add    $0x10,%esp
f010efbd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010efc0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010efc4:	74 1a                	je     f010efe0 <test_alloc_block_BF+0x293>
f010efc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010efc9:	8b 40 0c             	mov    0xc(%eax),%eax
f010efcc:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010efd1:	75 0d                	jne    f010efe0 <test_alloc_block_BF+0x293>
f010efd3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010efd6:	8b 40 08             	mov    0x8(%eax),%eax
f010efd9:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010efde:	74 17                	je     f010eff7 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010efe0:	83 ec 04             	sub    $0x4,%esp
f010efe3:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010efe8:	68 72 01 00 00       	push   $0x172
f010efed:	68 f4 75 13 f0       	push   $0xf01375f4
f010eff2:	e8 04 12 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eff7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010effc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010efff:	75 13                	jne    f010f014 <test_alloc_block_BF+0x2c7>
f010f001:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f006:	83 f8 06             	cmp    $0x6,%eax
f010f009:	75 09                	jne    f010f014 <test_alloc_block_BF+0x2c7>
f010f00b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f010:	85 c0                	test   %eax,%eax
f010f012:	74 17                	je     f010f02b <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f014:	83 ec 04             	sub    $0x4,%esp
f010f017:	68 18 7e 13 f0       	push   $0xf0137e18
f010f01c:	68 76 01 00 00       	push   $0x176
f010f021:	68 f4 75 13 f0       	push   $0xf01375f4
f010f026:	e8 d0 11 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f02b:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f032:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f035:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f03c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f043:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f04a:	83 ec 0c             	sub    $0xc,%esp
f010f04d:	ff 75 d8             	pushl  -0x28(%ebp)
f010f050:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f056:	50                   	push   %eax
f010f057:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f05a:	50                   	push   %eax
f010f05b:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f05e:	50                   	push   %eax
f010f05f:	68 64 7b 65 f0       	push   $0xf0657b64
f010f064:	e8 dd 17 00 00       	call   f0110846 <check_list_data>
f010f069:	83 c4 20             	add    $0x20,%esp
f010f06c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f06f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f073:	74 17                	je     f010f08c <test_alloc_block_BF+0x33f>
f010f075:	83 ec 04             	sub    $0x4,%esp
f010f078:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f07d:	68 7e 01 00 00       	push   $0x17e
f010f082:	68 f4 75 13 f0       	push   $0xf01375f4
f010f087:	e8 6f 11 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f08c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f092:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f095:	74 17                	je     f010f0ae <test_alloc_block_BF+0x361>
f010f097:	83 ec 04             	sub    $0x4,%esp
f010f09a:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f09f:	68 7f 01 00 00       	push   $0x17f
f010f0a4:	68 f4 75 13 f0       	push   $0xf01375f4
f010f0a9:	e8 4d 11 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f0ae:	83 ec 0c             	sub    $0xc,%esp
f010f0b1:	68 00 00 10 00       	push   $0x100000
f010f0b6:	e8 36 2c 02 00       	call   f0131cf1 <alloc_block_BF>
f010f0bb:	83 c4 10             	add    $0x10,%esp
f010f0be:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f0c1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f0c5:	74 1a                	je     f010f0e1 <test_alloc_block_BF+0x394>
f010f0c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0ca:	8b 40 0c             	mov    0xc(%eax),%eax
f010f0cd:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f0d2:	75 0d                	jne    f010f0e1 <test_alloc_block_BF+0x394>
f010f0d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0d7:	8b 40 08             	mov    0x8(%eax),%eax
f010f0da:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f0df:	74 17                	je     f010f0f8 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f0e1:	83 ec 04             	sub    $0x4,%esp
f010f0e4:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010f0e9:	68 87 01 00 00       	push   $0x187
f010f0ee:	68 f4 75 13 f0       	push   $0xf01375f4
f010f0f3:	e8 03 11 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f0f8:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f0fd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f100:	4a                   	dec    %edx
f010f101:	39 d0                	cmp    %edx,%eax
f010f103:	75 13                	jne    f010f118 <test_alloc_block_BF+0x3cb>
f010f105:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f10a:	83 f8 06             	cmp    $0x6,%eax
f010f10d:	75 09                	jne    f010f118 <test_alloc_block_BF+0x3cb>
f010f10f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f114:	85 c0                	test   %eax,%eax
f010f116:	74 17                	je     f010f12f <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f118:	83 ec 04             	sub    $0x4,%esp
f010f11b:	68 18 7e 13 f0       	push   $0xf0137e18
f010f120:	68 8b 01 00 00       	push   $0x18b
f010f125:	68 f4 75 13 f0       	push   $0xf01375f4
f010f12a:	e8 cc 10 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f12f:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f136:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f139:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f140:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f147:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f14e:	83 ec 0c             	sub    $0xc,%esp
f010f151:	ff 75 d8             	pushl  -0x28(%ebp)
f010f154:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f15a:	50                   	push   %eax
f010f15b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f15e:	50                   	push   %eax
f010f15f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f162:	50                   	push   %eax
f010f163:	68 64 7b 65 f0       	push   $0xf0657b64
f010f168:	e8 d9 16 00 00       	call   f0110846 <check_list_data>
f010f16d:	83 c4 20             	add    $0x20,%esp
f010f170:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f173:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f177:	74 17                	je     f010f190 <test_alloc_block_BF+0x443>
f010f179:	83 ec 04             	sub    $0x4,%esp
f010f17c:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f181:	68 93 01 00 00       	push   $0x193
f010f186:	68 f4 75 13 f0       	push   $0xf01375f4
f010f18b:	e8 6b 10 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f190:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f196:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f199:	74 17                	je     f010f1b2 <test_alloc_block_BF+0x465>
f010f19b:	83 ec 04             	sub    $0x4,%esp
f010f19e:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f1a3:	68 94 01 00 00       	push   $0x194
f010f1a8:	68 f4 75 13 f0       	push   $0xf01375f4
f010f1ad:	e8 49 10 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f1b2:	83 ec 0c             	sub    $0xc,%esp
f010f1b5:	68 00 0c 00 00       	push   $0xc00
f010f1ba:	e8 32 2b 02 00       	call   f0131cf1 <alloc_block_BF>
f010f1bf:	83 c4 10             	add    $0x10,%esp
f010f1c2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f1c5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f1c9:	74 1a                	je     f010f1e5 <test_alloc_block_BF+0x498>
f010f1cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1ce:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1d1:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f1d6:	75 0d                	jne    f010f1e5 <test_alloc_block_BF+0x498>
f010f1d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1db:	8b 40 08             	mov    0x8(%eax),%eax
f010f1de:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f1e3:	74 17                	je     f010f1fc <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f1e5:	83 ec 04             	sub    $0x4,%esp
f010f1e8:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010f1ed:	68 9c 01 00 00       	push   $0x19c
f010f1f2:	68 f4 75 13 f0       	push   $0xf01375f4
f010f1f7:	e8 ff 0f ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f1fc:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f201:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f204:	83 ea 02             	sub    $0x2,%edx
f010f207:	39 d0                	cmp    %edx,%eax
f010f209:	75 13                	jne    f010f21e <test_alloc_block_BF+0x4d1>
f010f20b:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f210:	83 f8 06             	cmp    $0x6,%eax
f010f213:	75 09                	jne    f010f21e <test_alloc_block_BF+0x4d1>
f010f215:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f21a:	85 c0                	test   %eax,%eax
f010f21c:	74 17                	je     f010f235 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f21e:	83 ec 04             	sub    $0x4,%esp
f010f221:	68 18 7e 13 f0       	push   $0xf0137e18
f010f226:	68 a0 01 00 00       	push   $0x1a0
f010f22b:	68 f4 75 13 f0       	push   $0xf01375f4
f010f230:	e8 c6 0f ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f235:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f23c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f23f:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f246:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f24d:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f254:	83 ec 0c             	sub    $0xc,%esp
f010f257:	ff 75 d8             	pushl  -0x28(%ebp)
f010f25a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f260:	50                   	push   %eax
f010f261:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f264:	50                   	push   %eax
f010f265:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f268:	50                   	push   %eax
f010f269:	68 64 7b 65 f0       	push   $0xf0657b64
f010f26e:	e8 d3 15 00 00       	call   f0110846 <check_list_data>
f010f273:	83 c4 20             	add    $0x20,%esp
f010f276:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f279:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f27d:	74 17                	je     f010f296 <test_alloc_block_BF+0x549>
f010f27f:	83 ec 04             	sub    $0x4,%esp
f010f282:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f287:	68 a8 01 00 00       	push   $0x1a8
f010f28c:	68 f4 75 13 f0       	push   $0xf01375f4
f010f291:	e8 65 0f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f296:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f29c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f29f:	74 17                	je     f010f2b8 <test_alloc_block_BF+0x56b>
f010f2a1:	83 ec 04             	sub    $0x4,%esp
f010f2a4:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f2a9:	68 a9 01 00 00       	push   $0x1a9
f010f2ae:	68 f4 75 13 f0       	push   $0xf01375f4
f010f2b3:	e8 43 0f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f2b8:	83 ec 0c             	sub    $0xc,%esp
f010f2bb:	68 00 08 00 00       	push   $0x800
f010f2c0:	e8 2c 2a 02 00       	call   f0131cf1 <alloc_block_BF>
f010f2c5:	83 c4 10             	add    $0x10,%esp
f010f2c8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f2cb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f2cf:	74 17                	je     f010f2e8 <test_alloc_block_BF+0x59b>
f010f2d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2d4:	8b 40 0c             	mov    0xc(%eax),%eax
f010f2d7:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f2dc:	75 0a                	jne    f010f2e8 <test_alloc_block_BF+0x59b>
f010f2de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2e1:	8b 40 08             	mov    0x8(%eax),%eax
f010f2e4:	85 c0                	test   %eax,%eax
f010f2e6:	74 17                	je     f010f2ff <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f2e8:	83 ec 04             	sub    $0x4,%esp
f010f2eb:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010f2f0:	68 b1 01 00 00       	push   $0x1b1
f010f2f5:	68 f4 75 13 f0       	push   $0xf01375f4
f010f2fa:	e8 fc 0e ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2ff:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f304:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f307:	83 ea 02             	sub    $0x2,%edx
f010f30a:	39 d0                	cmp    %edx,%eax
f010f30c:	75 13                	jne    f010f321 <test_alloc_block_BF+0x5d4>
f010f30e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f313:	83 f8 05             	cmp    $0x5,%eax
f010f316:	75 09                	jne    f010f321 <test_alloc_block_BF+0x5d4>
f010f318:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f31d:	85 c0                	test   %eax,%eax
f010f31f:	74 17                	je     f010f338 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f321:	83 ec 04             	sub    $0x4,%esp
f010f324:	68 18 7e 13 f0       	push   $0xf0137e18
f010f329:	68 b5 01 00 00       	push   $0x1b5
f010f32e:	68 f4 75 13 f0       	push   $0xf01375f4
f010f333:	e8 c3 0e ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f338:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f33f:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f342:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f349:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f350:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f357:	83 ec 0c             	sub    $0xc,%esp
f010f35a:	ff 75 d8             	pushl  -0x28(%ebp)
f010f35d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f363:	50                   	push   %eax
f010f364:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f367:	50                   	push   %eax
f010f368:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f36b:	50                   	push   %eax
f010f36c:	68 64 7b 65 f0       	push   $0xf0657b64
f010f371:	e8 d0 14 00 00       	call   f0110846 <check_list_data>
f010f376:	83 c4 20             	add    $0x20,%esp
f010f379:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f37c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f380:	74 17                	je     f010f399 <test_alloc_block_BF+0x64c>
f010f382:	83 ec 04             	sub    $0x4,%esp
f010f385:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f38a:	68 bd 01 00 00       	push   $0x1bd
f010f38f:	68 f4 75 13 f0       	push   $0xf01375f4
f010f394:	e8 62 0e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f399:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f39f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f3a2:	74 17                	je     f010f3bb <test_alloc_block_BF+0x66e>
f010f3a4:	83 ec 04             	sub    $0x4,%esp
f010f3a7:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f3ac:	68 be 01 00 00       	push   $0x1be
f010f3b1:	68 f4 75 13 f0       	push   $0xf01375f4
f010f3b6:	e8 40 0e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f3bb:	83 ec 0c             	sub    $0xc,%esp
f010f3be:	68 14 7f 13 f0       	push   $0xf0137f14
f010f3c3:	e8 ba 18 ff ff       	call   f0100c82 <cprintf>
f010f3c8:	83 c4 10             	add    $0x10,%esp
}
f010f3cb:	90                   	nop
f010f3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f3cf:	5b                   	pop    %ebx
f010f3d0:	5e                   	pop    %esi
f010f3d1:	5f                   	pop    %edi
f010f3d2:	5d                   	pop    %ebp
f010f3d3:	c3                   	ret    

f010f3d4 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f3d4:	55                   	push   %ebp
f010f3d5:	89 e5                	mov    %esp,%ebp
f010f3d7:	57                   	push   %edi
f010f3d8:	56                   	push   %esi
f010f3d9:	53                   	push   %ebx
f010f3da:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f3e0:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f3e7:	83 ec 0c             	sub    $0xc,%esp
f010f3ea:	ff 75 e0             	pushl  -0x20(%ebp)
f010f3ed:	e8 70 23 02 00       	call   f0131762 <initialize_MemBlocksList>
f010f3f2:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f3f5:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010f3fc:	00 00 00 
f010f3ff:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010f406:	00 00 00 
f010f409:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010f410:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f413:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f416:	bb 20 7d 13 f0       	mov    $0xf0137d20,%ebx
f010f41b:	ba 08 00 00 00       	mov    $0x8,%edx
f010f420:	89 c7                	mov    %eax,%edi
f010f422:	89 de                	mov    %ebx,%esi
f010f424:	89 d1                	mov    %edx,%ecx
f010f426:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010f428:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f42b:	bb 80 81 13 f0       	mov    $0xf0138180,%ebx
f010f430:	ba 08 00 00 00       	mov    $0x8,%edx
f010f435:	89 c7                	mov    %eax,%edi
f010f437:	89 de                	mov    %ebx,%esi
f010f439:	89 d1                	mov    %edx,%ecx
f010f43b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f43d:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010f444:	00 00 00 
f010f447:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010f44e:	00 00 00 
f010f451:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010f458:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f45b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f462:	e9 5f 01 00 00       	jmp    f010f5c6 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f467:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f46a:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f46e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f471:	c1 e2 04             	shl    $0x4,%edx
f010f474:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f477:	01 da                	add    %ebx,%edx
f010f479:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f47f:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f481:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f484:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f488:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f48b:	c1 e2 04             	shl    $0x4,%edx
f010f48e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f491:	01 f2                	add    %esi,%edx
f010f493:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f499:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f49b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f49f:	0f 85 92 00 00 00    	jne    f010f537 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f4a5:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f4aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4ad:	c1 e2 04             	shl    $0x4,%edx
f010f4b0:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4b3:	01 fa                	add    %edi,%edx
f010f4b5:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f4bb:	89 02                	mov    %eax,(%edx)
f010f4bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4c0:	c1 e0 04             	shl    $0x4,%eax
f010f4c3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4c6:	01 d8                	add    %ebx,%eax
f010f4c8:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f4cd:	8b 00                	mov    (%eax),%eax
f010f4cf:	85 c0                	test   %eax,%eax
f010f4d1:	74 18                	je     f010f4eb <test_alloc_block_NF+0x117>
f010f4d3:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f4d8:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f4de:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f4e1:	c1 e1 04             	shl    $0x4,%ecx
f010f4e4:	01 ca                	add    %ecx,%edx
f010f4e6:	89 50 04             	mov    %edx,0x4(%eax)
f010f4e9:	eb 13                	jmp    f010f4fe <test_alloc_block_NF+0x12a>
f010f4eb:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f4f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4f4:	c1 e2 04             	shl    $0x4,%edx
f010f4f7:	01 d0                	add    %edx,%eax
f010f4f9:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f4fe:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f504:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f507:	c1 e2 04             	shl    $0x4,%edx
f010f50a:	01 d0                	add    %edx,%eax
f010f50c:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f511:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f514:	c1 e0 04             	shl    $0x4,%eax
f010f517:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f51a:	01 f0                	add    %esi,%eax
f010f51c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f521:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f527:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f52c:	40                   	inc    %eax
f010f52d:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010f532:	e9 8c 00 00 00       	jmp    f010f5c3 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f537:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f53c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f53f:	c1 e2 04             	shl    $0x4,%edx
f010f542:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f545:	01 fa                	add    %edi,%edx
f010f547:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f54d:	89 02                	mov    %eax,(%edx)
f010f54f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f552:	c1 e0 04             	shl    $0x4,%eax
f010f555:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f558:	01 d8                	add    %ebx,%eax
f010f55a:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f55f:	8b 00                	mov    (%eax),%eax
f010f561:	85 c0                	test   %eax,%eax
f010f563:	74 17                	je     f010f57c <test_alloc_block_NF+0x1a8>
f010f565:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f56a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f570:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f573:	c1 e1 04             	shl    $0x4,%ecx
f010f576:	01 ca                	add    %ecx,%edx
f010f578:	89 10                	mov    %edx,(%eax)
f010f57a:	eb 13                	jmp    f010f58f <test_alloc_block_NF+0x1bb>
f010f57c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f582:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f585:	c1 e2 04             	shl    $0x4,%edx
f010f588:	01 d0                	add    %edx,%eax
f010f58a:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f58f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f595:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f598:	c1 e2 04             	shl    $0x4,%edx
f010f59b:	01 d0                	add    %edx,%eax
f010f59d:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f5a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5a5:	c1 e0 04             	shl    $0x4,%eax
f010f5a8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f5ab:	01 f0                	add    %esi,%eax
f010f5ad:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f5b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f5b8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f5bd:	40                   	inc    %eax
f010f5be:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f5c3:	ff 45 e4             	incl   -0x1c(%ebp)
f010f5c6:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f5ca:	0f 8e 97 fe ff ff    	jle    f010f467 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010f5d0:	83 ec 0c             	sub    $0xc,%esp
f010f5d3:	68 00 00 a0 00       	push   $0xa00000
f010f5d8:	e8 25 29 02 00       	call   f0131f02 <alloc_block_NF>
f010f5dd:	83 c4 10             	add    $0x10,%esp
f010f5e0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f5e3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5e7:	74 17                	je     f010f600 <test_alloc_block_NF+0x22c>
f010f5e9:	83 ec 04             	sub    $0x4,%esp
f010f5ec:	68 8c 7f 13 f0       	push   $0xf0137f8c
f010f5f1:	68 e1 01 00 00       	push   $0x1e1
f010f5f6:	68 f4 75 13 f0       	push   $0xf01375f4
f010f5fb:	e8 fb 0b ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f600:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f605:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f608:	75 13                	jne    f010f61d <test_alloc_block_NF+0x249>
f010f60a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f60f:	83 f8 08             	cmp    $0x8,%eax
f010f612:	75 09                	jne    f010f61d <test_alloc_block_NF+0x249>
f010f614:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f619:	85 c0                	test   %eax,%eax
f010f61b:	74 17                	je     f010f634 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f61d:	83 ec 04             	sub    $0x4,%esp
f010f620:	68 20 7b 13 f0       	push   $0xf0137b20
f010f625:	68 e5 01 00 00       	push   $0x1e5
f010f62a:	68 f4 75 13 f0       	push   $0xf01375f4
f010f62f:	e8 c7 0b ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f634:	83 ec 0c             	sub    $0xc,%esp
f010f637:	68 00 28 00 00       	push   $0x2800
f010f63c:	e8 c1 28 02 00       	call   f0131f02 <alloc_block_NF>
f010f641:	83 c4 10             	add    $0x10,%esp
f010f644:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f647:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f64b:	74 1a                	je     f010f667 <test_alloc_block_NF+0x293>
f010f64d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f650:	8b 40 0c             	mov    0xc(%eax),%eax
f010f653:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f658:	75 0d                	jne    f010f667 <test_alloc_block_NF+0x293>
f010f65a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f65d:	8b 40 08             	mov    0x8(%eax),%eax
f010f660:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f665:	74 17                	je     f010f67e <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f667:	83 ec 04             	sub    $0x4,%esp
f010f66a:	68 00 80 13 f0       	push   $0xf0138000
f010f66f:	68 ed 01 00 00       	push   $0x1ed
f010f674:	68 f4 75 13 f0       	push   $0xf01375f4
f010f679:	e8 7d 0b ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f67e:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f683:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f686:	75 13                	jne    f010f69b <test_alloc_block_NF+0x2c7>
f010f688:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f68d:	83 f8 07             	cmp    $0x7,%eax
f010f690:	75 09                	jne    f010f69b <test_alloc_block_NF+0x2c7>
f010f692:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f697:	85 c0                	test   %eax,%eax
f010f699:	74 17                	je     f010f6b2 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f69b:	83 ec 04             	sub    $0x4,%esp
f010f69e:	68 44 80 13 f0       	push   $0xf0138044
f010f6a3:	68 f1 01 00 00       	push   $0x1f1
f010f6a8:	68 f4 75 13 f0       	push   $0xf01375f4
f010f6ad:	e8 49 0b ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f6b2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f6b9:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f6bc:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f6c3:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f6ca:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f6d1:	83 ec 0c             	sub    $0xc,%esp
f010f6d4:	ff 75 d8             	pushl  -0x28(%ebp)
f010f6d7:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f6dd:	50                   	push   %eax
f010f6de:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f6e1:	50                   	push   %eax
f010f6e2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f6e5:	50                   	push   %eax
f010f6e6:	68 64 7b 65 f0       	push   $0xf0657b64
f010f6eb:	e8 56 11 00 00       	call   f0110846 <check_list_data>
f010f6f0:	83 c4 20             	add    $0x20,%esp
f010f6f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f6f6:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f6fa:	74 17                	je     f010f713 <test_alloc_block_NF+0x33f>
f010f6fc:	83 ec 04             	sub    $0x4,%esp
f010f6ff:	68 a8 80 13 f0       	push   $0xf01380a8
f010f704:	68 f9 01 00 00       	push   $0x1f9
f010f709:	68 f4 75 13 f0       	push   $0xf01375f4
f010f70e:	e8 e8 0a ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f713:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f719:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f71c:	74 17                	je     f010f735 <test_alloc_block_NF+0x361>
f010f71e:	83 ec 04             	sub    $0x4,%esp
f010f721:	68 f4 80 13 f0       	push   $0xf01380f4
f010f726:	68 fa 01 00 00       	push   $0x1fa
f010f72b:	68 f4 75 13 f0       	push   $0xf01375f4
f010f730:	e8 c6 0a ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010f735:	83 ec 0c             	sub    $0xc,%esp
f010f738:	68 00 00 20 00       	push   $0x200000
f010f73d:	e8 c0 27 02 00       	call   f0131f02 <alloc_block_NF>
f010f742:	83 c4 10             	add    $0x10,%esp
f010f745:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010f748:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f74c:	74 1a                	je     f010f768 <test_alloc_block_NF+0x394>
f010f74e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f751:	8b 40 0c             	mov    0xc(%eax),%eax
f010f754:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f759:	75 0d                	jne    f010f768 <test_alloc_block_NF+0x394>
f010f75b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f75e:	8b 40 08             	mov    0x8(%eax),%eax
f010f761:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f766:	74 17                	je     f010f77f <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f768:	83 ec 04             	sub    $0x4,%esp
f010f76b:	68 00 80 13 f0       	push   $0xf0138000
f010f770:	68 03 02 00 00       	push   $0x203
f010f775:	68 f4 75 13 f0       	push   $0xf01375f4
f010f77a:	e8 7c 0a ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f77f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f784:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f787:	75 13                	jne    f010f79c <test_alloc_block_NF+0x3c8>
f010f789:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f78e:	83 f8 06             	cmp    $0x6,%eax
f010f791:	75 09                	jne    f010f79c <test_alloc_block_NF+0x3c8>
f010f793:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f798:	85 c0                	test   %eax,%eax
f010f79a:	74 17                	je     f010f7b3 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f79c:	83 ec 04             	sub    $0x4,%esp
f010f79f:	68 44 80 13 f0       	push   $0xf0138044
f010f7a4:	68 07 02 00 00       	push   $0x207
f010f7a9:	68 f4 75 13 f0       	push   $0xf01375f4
f010f7ae:	e8 48 0a ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f7b3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f7ba:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f7bd:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010f7c4:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010f7cb:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f7d2:	83 ec 0c             	sub    $0xc,%esp
f010f7d5:	ff 75 d8             	pushl  -0x28(%ebp)
f010f7d8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f7de:	50                   	push   %eax
f010f7df:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f7e2:	50                   	push   %eax
f010f7e3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f7e6:	50                   	push   %eax
f010f7e7:	68 64 7b 65 f0       	push   $0xf0657b64
f010f7ec:	e8 55 10 00 00       	call   f0110846 <check_list_data>
f010f7f1:	83 c4 20             	add    $0x20,%esp
f010f7f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f7f7:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f7fb:	74 17                	je     f010f814 <test_alloc_block_NF+0x440>
f010f7fd:	83 ec 04             	sub    $0x4,%esp
f010f800:	68 a8 80 13 f0       	push   $0xf01380a8
f010f805:	68 0f 02 00 00       	push   $0x20f
f010f80a:	68 f4 75 13 f0       	push   $0xf01375f4
f010f80f:	e8 e7 09 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f814:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f81a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f81d:	74 17                	je     f010f836 <test_alloc_block_NF+0x462>
f010f81f:	83 ec 04             	sub    $0x4,%esp
f010f822:	68 f4 80 13 f0       	push   $0xf01380f4
f010f827:	68 10 02 00 00       	push   $0x210
f010f82c:	68 f4 75 13 f0       	push   $0xf01375f4
f010f831:	e8 c5 09 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010f836:	83 ec 0c             	sub    $0xc,%esp
f010f839:	68 00 00 08 00       	push   $0x80000
f010f83e:	e8 bf 26 02 00       	call   f0131f02 <alloc_block_NF>
f010f843:	83 c4 10             	add    $0x10,%esp
f010f846:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010f849:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f84d:	74 1a                	je     f010f869 <test_alloc_block_NF+0x495>
f010f84f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f852:	8b 40 0c             	mov    0xc(%eax),%eax
f010f855:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010f85a:	75 0d                	jne    f010f869 <test_alloc_block_NF+0x495>
f010f85c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f85f:	8b 40 08             	mov    0x8(%eax),%eax
f010f862:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f867:	74 17                	je     f010f880 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f869:	83 ec 04             	sub    $0x4,%esp
f010f86c:	68 00 80 13 f0       	push   $0xf0138000
f010f871:	68 19 02 00 00       	push   $0x219
f010f876:	68 f4 75 13 f0       	push   $0xf01375f4
f010f87b:	e8 7b 09 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f880:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f885:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f888:	4a                   	dec    %edx
f010f889:	39 d0                	cmp    %edx,%eax
f010f88b:	75 13                	jne    f010f8a0 <test_alloc_block_NF+0x4cc>
f010f88d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f892:	83 f8 06             	cmp    $0x6,%eax
f010f895:	75 09                	jne    f010f8a0 <test_alloc_block_NF+0x4cc>
f010f897:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f89c:	85 c0                	test   %eax,%eax
f010f89e:	74 17                	je     f010f8b7 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f8a0:	83 ec 04             	sub    $0x4,%esp
f010f8a3:	68 44 80 13 f0       	push   $0xf0138044
f010f8a8:	68 1d 02 00 00       	push   $0x21d
f010f8ad:	68 f4 75 13 f0       	push   $0xf01375f4
f010f8b2:	e8 44 09 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f8b7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f8be:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f8c1:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010f8c8:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010f8cf:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f8d6:	83 ec 0c             	sub    $0xc,%esp
f010f8d9:	ff 75 d8             	pushl  -0x28(%ebp)
f010f8dc:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f8e2:	50                   	push   %eax
f010f8e3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8e6:	50                   	push   %eax
f010f8e7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f8ea:	50                   	push   %eax
f010f8eb:	68 64 7b 65 f0       	push   $0xf0657b64
f010f8f0:	e8 51 0f 00 00       	call   f0110846 <check_list_data>
f010f8f5:	83 c4 20             	add    $0x20,%esp
f010f8f8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f8fb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f8ff:	74 17                	je     f010f918 <test_alloc_block_NF+0x544>
f010f901:	83 ec 04             	sub    $0x4,%esp
f010f904:	68 a8 80 13 f0       	push   $0xf01380a8
f010f909:	68 25 02 00 00       	push   $0x225
f010f90e:	68 f4 75 13 f0       	push   $0xf01375f4
f010f913:	e8 e3 08 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f918:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f91e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f921:	74 17                	je     f010f93a <test_alloc_block_NF+0x566>
f010f923:	83 ec 04             	sub    $0x4,%esp
f010f926:	68 f4 80 13 f0       	push   $0xf01380f4
f010f92b:	68 26 02 00 00       	push   $0x226
f010f930:	68 f4 75 13 f0       	push   $0xf01375f4
f010f935:	e8 c1 08 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f93a:	83 ec 0c             	sub    $0xc,%esp
f010f93d:	68 00 fc 07 00       	push   $0x7fc00
f010f942:	e8 bb 25 02 00       	call   f0131f02 <alloc_block_NF>
f010f947:	83 c4 10             	add    $0x10,%esp
f010f94a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f94d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f951:	74 1a                	je     f010f96d <test_alloc_block_NF+0x599>
f010f953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f956:	8b 40 0c             	mov    0xc(%eax),%eax
f010f959:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f95e:	75 0d                	jne    f010f96d <test_alloc_block_NF+0x599>
f010f960:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f963:	8b 40 08             	mov    0x8(%eax),%eax
f010f966:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f96b:	74 17                	je     f010f984 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f96d:	83 ec 04             	sub    $0x4,%esp
f010f970:	68 00 80 13 f0       	push   $0xf0138000
f010f975:	68 2f 02 00 00       	push   $0x22f
f010f97a:	68 f4 75 13 f0       	push   $0xf01375f4
f010f97f:	e8 77 08 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f984:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f989:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f98c:	83 ea 02             	sub    $0x2,%edx
f010f98f:	39 d0                	cmp    %edx,%eax
f010f991:	75 13                	jne    f010f9a6 <test_alloc_block_NF+0x5d2>
f010f993:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f998:	83 f8 06             	cmp    $0x6,%eax
f010f99b:	75 09                	jne    f010f9a6 <test_alloc_block_NF+0x5d2>
f010f99d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f9a2:	85 c0                	test   %eax,%eax
f010f9a4:	74 17                	je     f010f9bd <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f9a6:	83 ec 04             	sub    $0x4,%esp
f010f9a9:	68 44 80 13 f0       	push   $0xf0138044
f010f9ae:	68 33 02 00 00       	push   $0x233
f010f9b3:	68 f4 75 13 f0       	push   $0xf01375f4
f010f9b8:	e8 3e 08 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f9bd:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f9c4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f9c7:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010f9ce:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010f9d5:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9dc:	83 ec 0c             	sub    $0xc,%esp
f010f9df:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9e2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9e8:	50                   	push   %eax
f010f9e9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9ec:	50                   	push   %eax
f010f9ed:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9f0:	50                   	push   %eax
f010f9f1:	68 64 7b 65 f0       	push   $0xf0657b64
f010f9f6:	e8 4b 0e 00 00       	call   f0110846 <check_list_data>
f010f9fb:	83 c4 20             	add    $0x20,%esp
f010f9fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa01:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa05:	74 17                	je     f010fa1e <test_alloc_block_NF+0x64a>
f010fa07:	83 ec 04             	sub    $0x4,%esp
f010fa0a:	68 a8 80 13 f0       	push   $0xf01380a8
f010fa0f:	68 3b 02 00 00       	push   $0x23b
f010fa14:	68 f4 75 13 f0       	push   $0xf01375f4
f010fa19:	e8 dd 07 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa1e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fa24:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa27:	74 17                	je     f010fa40 <test_alloc_block_NF+0x66c>
f010fa29:	83 ec 04             	sub    $0x4,%esp
f010fa2c:	68 f4 80 13 f0       	push   $0xf01380f4
f010fa31:	68 3c 02 00 00       	push   $0x23c
f010fa36:	68 f4 75 13 f0       	push   $0xf01375f4
f010fa3b:	e8 bb 07 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010fa40:	83 ec 0c             	sub    $0xc,%esp
f010fa43:	68 00 0c 00 00       	push   $0xc00
f010fa48:	e8 b5 24 02 00       	call   f0131f02 <alloc_block_NF>
f010fa4d:	83 c4 10             	add    $0x10,%esp
f010fa50:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010fa53:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa57:	74 17                	je     f010fa70 <test_alloc_block_NF+0x69c>
f010fa59:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa5c:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa5f:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fa64:	75 0a                	jne    f010fa70 <test_alloc_block_NF+0x69c>
f010fa66:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa69:	8b 40 08             	mov    0x8(%eax),%eax
f010fa6c:	85 c0                	test   %eax,%eax
f010fa6e:	74 17                	je     f010fa87 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fa70:	83 ec 04             	sub    $0x4,%esp
f010fa73:	68 00 80 13 f0       	push   $0xf0138000
f010fa78:	68 45 02 00 00       	push   $0x245
f010fa7d:	68 f4 75 13 f0       	push   $0xf01375f4
f010fa82:	e8 74 07 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa87:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fa8c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa8f:	83 ea 02             	sub    $0x2,%edx
f010fa92:	39 d0                	cmp    %edx,%eax
f010fa94:	75 13                	jne    f010faa9 <test_alloc_block_NF+0x6d5>
f010fa96:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fa9b:	83 f8 05             	cmp    $0x5,%eax
f010fa9e:	75 09                	jne    f010faa9 <test_alloc_block_NF+0x6d5>
f010faa0:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010faa5:	85 c0                	test   %eax,%eax
f010faa7:	74 17                	je     f010fac0 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010faa9:	83 ec 04             	sub    $0x4,%esp
f010faac:	68 44 80 13 f0       	push   $0xf0138044
f010fab1:	68 49 02 00 00       	push   $0x249
f010fab6:	68 f4 75 13 f0       	push   $0xf01375f4
f010fabb:	e8 3b 07 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fac0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fac7:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010faca:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010fad1:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010fad8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fadf:	83 ec 0c             	sub    $0xc,%esp
f010fae2:	ff 75 d8             	pushl  -0x28(%ebp)
f010fae5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010faeb:	50                   	push   %eax
f010faec:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010faef:	50                   	push   %eax
f010faf0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010faf3:	50                   	push   %eax
f010faf4:	68 64 7b 65 f0       	push   $0xf0657b64
f010faf9:	e8 48 0d 00 00       	call   f0110846 <check_list_data>
f010fafe:	83 c4 20             	add    $0x20,%esp
f010fb01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb04:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb08:	74 17                	je     f010fb21 <test_alloc_block_NF+0x74d>
f010fb0a:	83 ec 04             	sub    $0x4,%esp
f010fb0d:	68 a8 80 13 f0       	push   $0xf01380a8
f010fb12:	68 51 02 00 00       	push   $0x251
f010fb17:	68 f4 75 13 f0       	push   $0xf01375f4
f010fb1c:	e8 da 06 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb21:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fb27:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb2a:	74 17                	je     f010fb43 <test_alloc_block_NF+0x76f>
f010fb2c:	83 ec 04             	sub    $0x4,%esp
f010fb2f:	68 f4 80 13 f0       	push   $0xf01380f4
f010fb34:	68 52 02 00 00       	push   $0x252
f010fb39:	68 f4 75 13 f0       	push   $0xf01375f4
f010fb3e:	e8 b8 06 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010fb43:	83 ec 0c             	sub    $0xc,%esp
f010fb46:	68 00 04 00 00       	push   $0x400
f010fb4b:	e8 b2 23 02 00       	call   f0131f02 <alloc_block_NF>
f010fb50:	83 c4 10             	add    $0x10,%esp
f010fb53:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010fb56:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb5a:	74 1a                	je     f010fb76 <test_alloc_block_NF+0x7a2>
f010fb5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb5f:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb62:	3d 00 04 00 00       	cmp    $0x400,%eax
f010fb67:	75 0d                	jne    f010fb76 <test_alloc_block_NF+0x7a2>
f010fb69:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb6c:	8b 40 08             	mov    0x8(%eax),%eax
f010fb6f:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010fb74:	74 17                	je     f010fb8d <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fb76:	83 ec 04             	sub    $0x4,%esp
f010fb79:	68 00 80 13 f0       	push   $0xf0138000
f010fb7e:	68 5b 02 00 00       	push   $0x25b
f010fb83:	68 f4 75 13 f0       	push   $0xf01375f4
f010fb88:	e8 6e 06 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb8d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fb92:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb95:	83 ea 03             	sub    $0x3,%edx
f010fb98:	39 d0                	cmp    %edx,%eax
f010fb9a:	75 13                	jne    f010fbaf <test_alloc_block_NF+0x7db>
f010fb9c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fba1:	83 f8 05             	cmp    $0x5,%eax
f010fba4:	75 09                	jne    f010fbaf <test_alloc_block_NF+0x7db>
f010fba6:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fbab:	85 c0                	test   %eax,%eax
f010fbad:	74 17                	je     f010fbc6 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fbaf:	83 ec 04             	sub    $0x4,%esp
f010fbb2:	68 44 80 13 f0       	push   $0xf0138044
f010fbb7:	68 5f 02 00 00       	push   $0x25f
f010fbbc:	68 f4 75 13 f0       	push   $0xf01375f4
f010fbc1:	e8 35 06 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fbc6:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fbcd:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fbd0:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010fbd7:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010fbde:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fbe5:	83 ec 0c             	sub    $0xc,%esp
f010fbe8:	ff 75 d8             	pushl  -0x28(%ebp)
f010fbeb:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fbf1:	50                   	push   %eax
f010fbf2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbf5:	50                   	push   %eax
f010fbf6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fbf9:	50                   	push   %eax
f010fbfa:	68 64 7b 65 f0       	push   $0xf0657b64
f010fbff:	e8 42 0c 00 00       	call   f0110846 <check_list_data>
f010fc04:	83 c4 20             	add    $0x20,%esp
f010fc07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc0a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc0e:	74 17                	je     f010fc27 <test_alloc_block_NF+0x853>
f010fc10:	83 ec 04             	sub    $0x4,%esp
f010fc13:	68 a8 80 13 f0       	push   $0xf01380a8
f010fc18:	68 67 02 00 00       	push   $0x267
f010fc1d:	68 f4 75 13 f0       	push   $0xf01375f4
f010fc22:	e8 d4 05 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc27:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fc2d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc30:	74 17                	je     f010fc49 <test_alloc_block_NF+0x875>
f010fc32:	83 ec 04             	sub    $0x4,%esp
f010fc35:	68 f4 80 13 f0       	push   $0xf01380f4
f010fc3a:	68 68 02 00 00       	push   $0x268
f010fc3f:	68 f4 75 13 f0       	push   $0xf01375f4
f010fc44:	e8 b2 05 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010fc49:	83 ec 0c             	sub    $0xc,%esp
f010fc4c:	68 40 81 13 f0       	push   $0xf0138140
f010fc51:	e8 2c 10 ff ff       	call   f0100c82 <cprintf>
f010fc56:	83 c4 10             	add    $0x10,%esp

}
f010fc59:	90                   	nop
f010fc5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fc5d:	5b                   	pop    %ebx
f010fc5e:	5e                   	pop    %esi
f010fc5f:	5f                   	pop    %edi
f010fc60:	5d                   	pop    %ebp
f010fc61:	c3                   	ret    

f010fc62 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010fc62:	55                   	push   %ebp
f010fc63:	89 e5                	mov    %esp,%ebp
f010fc65:	57                   	push   %edi
f010fc66:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010fc6c:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fc73:	83 ec 0c             	sub    $0xc,%esp
f010fc76:	ff 75 f4             	pushl  -0xc(%ebp)
f010fc79:	e8 e4 1a 02 00       	call   f0131762 <initialize_MemBlocksList>
f010fc7e:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fc81:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010fc88:	00 00 00 
f010fc8b:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010fc92:	00 00 00 
f010fc95:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010fc9c:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010fc9f:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010fca6:	00 00 00 
f010fca9:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010fcb0:	00 00 00 
f010fcb3:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010fcba:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010fcbd:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010fcc0:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fcc5:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcca:	89 d7                	mov    %edx,%edi
f010fccc:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010fcce:	8d 55 98             	lea    -0x68(%ebp),%edx
f010fcd1:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fcd6:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcdb:	89 d7                	mov    %edx,%edi
f010fcdd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010fcdf:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010fce6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010fced:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010fcf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcf7:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010fcfe:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fcff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd02:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fd09:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fd0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd0d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fd11:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010fd14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd17:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fd1b:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010fd1e:	83 ec 0c             	sub    $0xc,%esp
f010fd21:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010fd24:	50                   	push   %eax
f010fd25:	e8 a5 27 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f010fd2a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010fd2d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fd32:	85 c0                	test   %eax,%eax
f010fd34:	75 14                	jne    f010fd4a <test_insert_sorted_with_merge_freeList+0xe8>
f010fd36:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fd3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fd3e:	75 0a                	jne    f010fd4a <test_insert_sorted_with_merge_freeList+0xe8>
f010fd40:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fd45:	83 f8 01             	cmp    $0x1,%eax
f010fd48:	74 17                	je     f010fd61 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd4a:	83 ec 04             	sub    $0x4,%esp
f010fd4d:	68 a0 81 13 f0       	push   $0xf01381a0
f010fd52:	68 88 02 00 00       	push   $0x288
f010fd57:	68 f4 75 13 f0       	push   $0xf01375f4
f010fd5c:	e8 9a 04 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the free list content
	size = 0;
f010fd61:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010fd68:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fd6f:	83 ec 0c             	sub    $0xc,%esp
f010fd72:	ff 75 f0             	pushl  -0x10(%ebp)
f010fd75:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd78:	50                   	push   %eax
f010fd79:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fd7c:	50                   	push   %eax
f010fd7d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fd80:	50                   	push   %eax
f010fd81:	68 64 7b 65 f0       	push   $0xf0657b64
f010fd86:	e8 bb 0a 00 00       	call   f0110846 <check_list_data>
f010fd8b:	83 c4 20             	add    $0x20,%esp
f010fd8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fd91:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd95:	74 17                	je     f010fdae <test_insert_sorted_with_merge_freeList+0x14c>
f010fd97:	83 ec 04             	sub    $0x4,%esp
f010fd9a:	68 0c 82 13 f0       	push   $0xf013820c
f010fd9f:	68 8e 02 00 00       	push   $0x28e
f010fda4:	68 f4 75 13 f0       	push   $0xf01375f4
f010fda9:	e8 4d 04 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fdae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fdb1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fdb4:	74 17                	je     f010fdcd <test_insert_sorted_with_merge_freeList+0x16b>
f010fdb6:	83 ec 04             	sub    $0x4,%esp
f010fdb9:	68 60 82 13 f0       	push   $0xf0138260
f010fdbe:	68 8f 02 00 00       	push   $0x28f
f010fdc3:	68 f4 75 13 f0       	push   $0xf01375f4
f010fdc8:	e8 2e 04 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010fdcd:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010fdd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdd7:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010fdde:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010fddf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fde2:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010fde9:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fdea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fded:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fdf1:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010fdf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdfa:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdfe:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010fe01:	83 ec 0c             	sub    $0xc,%esp
f010fe04:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010fe0a:	50                   	push   %eax
f010fe0b:	e8 bf 26 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f010fe10:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010fe13:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fe18:	85 c0                	test   %eax,%eax
f010fe1a:	75 14                	jne    f010fe30 <test_insert_sorted_with_merge_freeList+0x1ce>
f010fe1c:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fe21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fe24:	75 0a                	jne    f010fe30 <test_insert_sorted_with_merge_freeList+0x1ce>
f010fe26:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fe2b:	83 f8 02             	cmp    $0x2,%eax
f010fe2e:	74 17                	je     f010fe47 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe30:	83 ec 04             	sub    $0x4,%esp
f010fe33:	68 a0 81 13 f0       	push   $0xf01381a0
f010fe38:	68 9e 02 00 00       	push   $0x29e
f010fe3d:	68 f4 75 13 f0       	push   $0xf01375f4
f010fe42:	e8 b4 03 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fe47:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010fe4e:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fe55:	83 ec 0c             	sub    $0xc,%esp
f010fe58:	ff 75 f0             	pushl  -0x10(%ebp)
f010fe5b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe5e:	50                   	push   %eax
f010fe5f:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fe62:	50                   	push   %eax
f010fe63:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fe66:	50                   	push   %eax
f010fe67:	68 64 7b 65 f0       	push   $0xf0657b64
f010fe6c:	e8 d5 09 00 00       	call   f0110846 <check_list_data>
f010fe71:	83 c4 20             	add    $0x20,%esp
f010fe74:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fe77:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fe7b:	74 17                	je     f010fe94 <test_insert_sorted_with_merge_freeList+0x232>
f010fe7d:	83 ec 04             	sub    $0x4,%esp
f010fe80:	68 0c 82 13 f0       	push   $0xf013820c
f010fe85:	68 a4 02 00 00       	push   $0x2a4
f010fe8a:	68 f4 75 13 f0       	push   $0xf01375f4
f010fe8f:	e8 67 03 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fe94:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fe97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fe9a:	74 17                	je     f010feb3 <test_insert_sorted_with_merge_freeList+0x251>
f010fe9c:	83 ec 04             	sub    $0x4,%esp
f010fe9f:	68 60 82 13 f0       	push   $0xf0138260
f010fea4:	68 a5 02 00 00       	push   $0x2a5
f010fea9:	68 f4 75 13 f0       	push   $0xf01375f4
f010feae:	e8 48 03 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010feb3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010feba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010febd:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010fec4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fec8:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fecf:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fed0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fed3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fed7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010fedd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fee0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fee4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010feea:	83 ec 0c             	sub    $0xc,%esp
f010feed:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010fef3:	50                   	push   %eax
f010fef4:	e8 d6 25 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f010fef9:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010fefc:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ff01:	85 c0                	test   %eax,%eax
f010ff03:	75 14                	jne    f010ff19 <test_insert_sorted_with_merge_freeList+0x2b7>
f010ff05:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ff0a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ff0d:	75 0a                	jne    f010ff19 <test_insert_sorted_with_merge_freeList+0x2b7>
f010ff0f:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ff14:	83 f8 03             	cmp    $0x3,%eax
f010ff17:	74 17                	je     f010ff30 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff19:	83 ec 04             	sub    $0x4,%esp
f010ff1c:	68 a0 81 13 f0       	push   $0xf01381a0
f010ff21:	68 b4 02 00 00       	push   $0x2b4
f010ff26:	68 f4 75 13 f0       	push   $0xf01375f4
f010ff2b:	e8 cb 02 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ff30:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010ff37:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ff3e:	83 ec 0c             	sub    $0xc,%esp
f010ff41:	ff 75 f0             	pushl  -0x10(%ebp)
f010ff44:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff47:	50                   	push   %eax
f010ff48:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ff4b:	50                   	push   %eax
f010ff4c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ff4f:	50                   	push   %eax
f010ff50:	68 64 7b 65 f0       	push   $0xf0657b64
f010ff55:	e8 ec 08 00 00       	call   f0110846 <check_list_data>
f010ff5a:	83 c4 20             	add    $0x20,%esp
f010ff5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ff60:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff64:	74 17                	je     f010ff7d <test_insert_sorted_with_merge_freeList+0x31b>
f010ff66:	83 ec 04             	sub    $0x4,%esp
f010ff69:	68 0c 82 13 f0       	push   $0xf013820c
f010ff6e:	68 ba 02 00 00       	push   $0x2ba
f010ff73:	68 f4 75 13 f0       	push   $0xf01375f4
f010ff78:	e8 7e 02 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ff7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ff80:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ff83:	74 17                	je     f010ff9c <test_insert_sorted_with_merge_freeList+0x33a>
f010ff85:	83 ec 04             	sub    $0x4,%esp
f010ff88:	68 60 82 13 f0       	push   $0xf0138260
f010ff8d:	68 bb 02 00 00       	push   $0x2bb
f010ff92:	68 f4 75 13 f0       	push   $0xf01375f4
f010ff97:	e8 5f 02 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010ff9c:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010ffa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffa6:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010ffad:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010ffae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffb1:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010ffb8:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ffb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffbc:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ffc0:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010ffc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffc9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ffcd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010ffd3:	83 ec 0c             	sub    $0xc,%esp
f010ffd6:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010ffdc:	50                   	push   %eax
f010ffdd:	e8 ed 24 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f010ffe2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010ffe5:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ffea:	85 c0                	test   %eax,%eax
f010ffec:	75 14                	jne    f0110002 <test_insert_sorted_with_merge_freeList+0x3a0>
f010ffee:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fff3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fff6:	75 0a                	jne    f0110002 <test_insert_sorted_with_merge_freeList+0x3a0>
f010fff8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fffd:	83 f8 04             	cmp    $0x4,%eax
f0110000:	74 17                	je     f0110019 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110002:	83 ec 04             	sub    $0x4,%esp
f0110005:	68 a0 81 13 f0       	push   $0xf01381a0
f011000a:	68 ca 02 00 00       	push   $0x2ca
f011000f:	68 f4 75 13 f0       	push   $0xf01375f4
f0110014:	e8 e2 01 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110019:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110020:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110027:	83 ec 0c             	sub    $0xc,%esp
f011002a:	ff 75 f0             	pushl  -0x10(%ebp)
f011002d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110030:	50                   	push   %eax
f0110031:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110034:	50                   	push   %eax
f0110035:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110038:	50                   	push   %eax
f0110039:	68 64 7b 65 f0       	push   $0xf0657b64
f011003e:	e8 03 08 00 00       	call   f0110846 <check_list_data>
f0110043:	83 c4 20             	add    $0x20,%esp
f0110046:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110049:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011004d:	74 17                	je     f0110066 <test_insert_sorted_with_merge_freeList+0x404>
f011004f:	83 ec 04             	sub    $0x4,%esp
f0110052:	68 0c 82 13 f0       	push   $0xf013820c
f0110057:	68 d0 02 00 00       	push   $0x2d0
f011005c:	68 f4 75 13 f0       	push   $0xf01375f4
f0110061:	e8 95 01 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110066:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110069:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011006c:	74 17                	je     f0110085 <test_insert_sorted_with_merge_freeList+0x423>
f011006e:	83 ec 04             	sub    $0x4,%esp
f0110071:	68 60 82 13 f0       	push   $0xf0138260
f0110076:	68 d1 02 00 00       	push   $0x2d1
f011007b:	68 f4 75 13 f0       	push   $0xf01375f4
f0110080:	e8 76 01 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110085:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f011008c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011008f:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110096:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110097:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011009a:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f01100a1:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01100a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100a5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01100a9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f01100af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100b2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01100b6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f01100bc:	83 ec 0c             	sub    $0xc,%esp
f01100bf:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01100c5:	50                   	push   %eax
f01100c6:	e8 04 24 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f01100cb:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01100ce:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01100d3:	85 c0                	test   %eax,%eax
f01100d5:	75 17                	jne    f01100ee <test_insert_sorted_with_merge_freeList+0x48c>
f01100d7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01100dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01100df:	42                   	inc    %edx
f01100e0:	39 d0                	cmp    %edx,%eax
f01100e2:	75 0a                	jne    f01100ee <test_insert_sorted_with_merge_freeList+0x48c>
f01100e4:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01100e9:	83 f8 04             	cmp    $0x4,%eax
f01100ec:	74 17                	je     f0110105 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100ee:	83 ec 04             	sub    $0x4,%esp
f01100f1:	68 a0 81 13 f0       	push   $0xf01381a0
f01100f6:	68 e3 02 00 00       	push   $0x2e3
f01100fb:	68 f4 75 13 f0       	push   $0xf01375f4
f0110100:	e8 f6 00 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110105:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011010c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110113:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110116:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110119:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011011c:	48                   	dec    %eax
f011011d:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110121:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110124:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110128:	01 c8                	add    %ecx,%eax
f011012a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011012e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110131:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110138:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110139:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011013c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110143:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110144:	83 ec 0c             	sub    $0xc,%esp
f0110147:	ff 75 f0             	pushl  -0x10(%ebp)
f011014a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011014d:	50                   	push   %eax
f011014e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110151:	50                   	push   %eax
f0110152:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110155:	50                   	push   %eax
f0110156:	68 64 7b 65 f0       	push   $0xf0657b64
f011015b:	e8 e6 06 00 00       	call   f0110846 <check_list_data>
f0110160:	83 c4 20             	add    $0x20,%esp
f0110163:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110166:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011016a:	74 17                	je     f0110183 <test_insert_sorted_with_merge_freeList+0x521>
f011016c:	83 ec 04             	sub    $0x4,%esp
f011016f:	68 0c 82 13 f0       	push   $0xf013820c
f0110174:	68 ec 02 00 00       	push   $0x2ec
f0110179:	68 f4 75 13 f0       	push   $0xf01375f4
f011017e:	e8 78 00 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110183:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110186:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110189:	74 17                	je     f01101a2 <test_insert_sorted_with_merge_freeList+0x540>
f011018b:	83 ec 04             	sub    $0x4,%esp
f011018e:	68 60 82 13 f0       	push   $0xf0138260
f0110193:	68 ed 02 00 00       	push   $0x2ed
f0110198:	68 f4 75 13 f0       	push   $0xf01375f4
f011019d:	e8 59 00 ff ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01101a2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01101a9:	83 ec 0c             	sub    $0xc,%esp
f01101ac:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101af:	50                   	push   %eax
f01101b0:	e8 5d 07 00 00       	call   f0110912 <check_avaliable_list_data>
f01101b5:	83 c4 10             	add    $0x10,%esp
f01101b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01101bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01101be:	8d 50 01             	lea    0x1(%eax),%edx
f01101c1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01101c4:	39 c2                	cmp    %eax,%edx
f01101c6:	74 17                	je     f01101df <test_insert_sorted_with_merge_freeList+0x57d>
f01101c8:	83 ec 04             	sub    $0x4,%esp
f01101cb:	68 b4 82 13 f0       	push   $0xf01382b4
f01101d0:	68 f2 02 00 00       	push   $0x2f2
f01101d5:	68 f4 75 13 f0       	push   $0xf01375f4
f01101da:	e8 1c 00 ff ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01101df:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101e3:	74 17                	je     f01101fc <test_insert_sorted_with_merge_freeList+0x59a>
f01101e5:	83 ec 04             	sub    $0x4,%esp
f01101e8:	68 0c 83 13 f0       	push   $0xf013830c
f01101ed:	68 f3 02 00 00       	push   $0x2f3
f01101f2:	68 f4 75 13 f0       	push   $0xf01375f4
f01101f7:	e8 ff ff fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f01101fc:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110203:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110206:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f011020d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011020e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110211:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110218:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110219:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011021c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110220:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110226:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110229:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011022d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110233:	83 ec 0c             	sub    $0xc,%esp
f0110236:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011023c:	50                   	push   %eax
f011023d:	e8 8d 22 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f0110242:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110245:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f011024a:	85 c0                	test   %eax,%eax
f011024c:	75 19                	jne    f0110267 <test_insert_sorted_with_merge_freeList+0x605>
f011024e:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110253:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110256:	83 c2 02             	add    $0x2,%edx
f0110259:	39 d0                	cmp    %edx,%eax
f011025b:	75 0a                	jne    f0110267 <test_insert_sorted_with_merge_freeList+0x605>
f011025d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110262:	83 f8 04             	cmp    $0x4,%eax
f0110265:	74 17                	je     f011027e <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110267:	83 ec 04             	sub    $0x4,%esp
f011026a:	68 a0 81 13 f0       	push   $0xf01381a0
f011026f:	68 05 03 00 00       	push   $0x305
f0110274:	68 f4 75 13 f0       	push   $0xf01375f4
f0110279:	e8 7d ff fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011027e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110285:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f011028c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011028f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110292:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110295:	48                   	dec    %eax
f0110296:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011029a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011029d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01102a1:	01 c8                	add    %ecx,%eax
f01102a3:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01102a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102aa:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01102b1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01102b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102b5:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01102bc:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01102bd:	83 ec 0c             	sub    $0xc,%esp
f01102c0:	ff 75 f0             	pushl  -0x10(%ebp)
f01102c3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01102c6:	50                   	push   %eax
f01102c7:	8d 45 98             	lea    -0x68(%ebp),%eax
f01102ca:	50                   	push   %eax
f01102cb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01102ce:	50                   	push   %eax
f01102cf:	68 64 7b 65 f0       	push   $0xf0657b64
f01102d4:	e8 6d 05 00 00       	call   f0110846 <check_list_data>
f01102d9:	83 c4 20             	add    $0x20,%esp
f01102dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01102df:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01102e3:	74 17                	je     f01102fc <test_insert_sorted_with_merge_freeList+0x69a>
f01102e5:	83 ec 04             	sub    $0x4,%esp
f01102e8:	68 0c 82 13 f0       	push   $0xf013820c
f01102ed:	68 0e 03 00 00       	push   $0x30e
f01102f2:	68 f4 75 13 f0       	push   $0xf01375f4
f01102f7:	e8 ff fe fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01102fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01102ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110302:	74 17                	je     f011031b <test_insert_sorted_with_merge_freeList+0x6b9>
f0110304:	83 ec 04             	sub    $0x4,%esp
f0110307:	68 60 82 13 f0       	push   $0xf0138260
f011030c:	68 0f 03 00 00       	push   $0x30f
f0110311:	68 f4 75 13 f0       	push   $0xf01375f4
f0110316:	e8 e0 fe fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011031b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110322:	83 ec 0c             	sub    $0xc,%esp
f0110325:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110328:	50                   	push   %eax
f0110329:	e8 e4 05 00 00       	call   f0110912 <check_avaliable_list_data>
f011032e:	83 c4 10             	add    $0x10,%esp
f0110331:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110334:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110337:	8d 50 02             	lea    0x2(%eax),%edx
f011033a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011033d:	39 c2                	cmp    %eax,%edx
f011033f:	74 17                	je     f0110358 <test_insert_sorted_with_merge_freeList+0x6f6>
f0110341:	83 ec 04             	sub    $0x4,%esp
f0110344:	68 b4 82 13 f0       	push   $0xf01382b4
f0110349:	68 14 03 00 00       	push   $0x314
f011034e:	68 f4 75 13 f0       	push   $0xf01375f4
f0110353:	e8 a3 fe fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110358:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011035c:	74 17                	je     f0110375 <test_insert_sorted_with_merge_freeList+0x713>
f011035e:	83 ec 04             	sub    $0x4,%esp
f0110361:	68 0c 83 13 f0       	push   $0xf013830c
f0110366:	68 15 03 00 00       	push   $0x315
f011036b:	68 f4 75 13 f0       	push   $0xf01375f4
f0110370:	e8 86 fe fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110375:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011037c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011037f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110386:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110387:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011038a:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110391:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110392:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110395:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110399:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f011039f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103a2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01103a6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f01103ac:	83 ec 0c             	sub    $0xc,%esp
f01103af:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01103b5:	50                   	push   %eax
f01103b6:	e8 14 21 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f01103bb:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01103be:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01103c3:	85 c0                	test   %eax,%eax
f01103c5:	75 19                	jne    f01103e0 <test_insert_sorted_with_merge_freeList+0x77e>
f01103c7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01103cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01103cf:	83 c2 03             	add    $0x3,%edx
f01103d2:	39 d0                	cmp    %edx,%eax
f01103d4:	75 0a                	jne    f01103e0 <test_insert_sorted_with_merge_freeList+0x77e>
f01103d6:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01103db:	83 f8 04             	cmp    $0x4,%eax
f01103de:	74 17                	je     f01103f7 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01103e0:	83 ec 04             	sub    $0x4,%esp
f01103e3:	68 a0 81 13 f0       	push   $0xf01381a0
f01103e8:	68 28 03 00 00       	push   $0x328
f01103ed:	68 f4 75 13 f0       	push   $0xf01375f4
f01103f2:	e8 04 fe fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01103f7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01103fe:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110405:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110408:	8d 50 01             	lea    0x1(%eax),%edx
f011040b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011040e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110412:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110416:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110419:	8d 50 01             	lea    0x1(%eax),%edx
f011041c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011041f:	40                   	inc    %eax
f0110420:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110427:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011042b:	01 c8                	add    %ecx,%eax
f011042d:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110431:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110434:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011043b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011043c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011043f:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110446:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110447:	83 ec 0c             	sub    $0xc,%esp
f011044a:	ff 75 f0             	pushl  -0x10(%ebp)
f011044d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110450:	50                   	push   %eax
f0110451:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110454:	50                   	push   %eax
f0110455:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110458:	50                   	push   %eax
f0110459:	68 64 7b 65 f0       	push   $0xf0657b64
f011045e:	e8 e3 03 00 00       	call   f0110846 <check_list_data>
f0110463:	83 c4 20             	add    $0x20,%esp
f0110466:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110469:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011046d:	74 17                	je     f0110486 <test_insert_sorted_with_merge_freeList+0x824>
f011046f:	83 ec 04             	sub    $0x4,%esp
f0110472:	68 0c 82 13 f0       	push   $0xf013820c
f0110477:	68 32 03 00 00       	push   $0x332
f011047c:	68 f4 75 13 f0       	push   $0xf01375f4
f0110481:	e8 75 fd fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110486:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110489:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011048c:	74 17                	je     f01104a5 <test_insert_sorted_with_merge_freeList+0x843>
f011048e:	83 ec 04             	sub    $0x4,%esp
f0110491:	68 60 82 13 f0       	push   $0xf0138260
f0110496:	68 33 03 00 00       	push   $0x333
f011049b:	68 f4 75 13 f0       	push   $0xf01375f4
f01104a0:	e8 56 fd fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01104a5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01104ac:	83 ec 0c             	sub    $0xc,%esp
f01104af:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104b2:	50                   	push   %eax
f01104b3:	e8 5a 04 00 00       	call   f0110912 <check_avaliable_list_data>
f01104b8:	83 c4 10             	add    $0x10,%esp
f01104bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01104be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01104c1:	8d 50 03             	lea    0x3(%eax),%edx
f01104c4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01104c7:	39 c2                	cmp    %eax,%edx
f01104c9:	74 17                	je     f01104e2 <test_insert_sorted_with_merge_freeList+0x880>
f01104cb:	83 ec 04             	sub    $0x4,%esp
f01104ce:	68 b4 82 13 f0       	push   $0xf01382b4
f01104d3:	68 38 03 00 00       	push   $0x338
f01104d8:	68 f4 75 13 f0       	push   $0xf01375f4
f01104dd:	e8 19 fd fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01104e2:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104e6:	74 17                	je     f01104ff <test_insert_sorted_with_merge_freeList+0x89d>
f01104e8:	83 ec 04             	sub    $0x4,%esp
f01104eb:	68 0c 83 13 f0       	push   $0xf013830c
f01104f0:	68 39 03 00 00       	push   $0x339
f01104f5:	68 f4 75 13 f0       	push   $0xf01375f4
f01104fa:	e8 fc fc fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f01104ff:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110506:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110509:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110510:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110511:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110514:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011051b:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011051c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011051f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110523:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110529:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011052c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110530:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110536:	83 ec 0c             	sub    $0xc,%esp
f0110539:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011053f:	50                   	push   %eax
f0110540:	e8 8a 1f 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f0110545:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110548:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f011054d:	85 c0                	test   %eax,%eax
f011054f:	75 19                	jne    f011056a <test_insert_sorted_with_merge_freeList+0x908>
f0110551:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110559:	83 c2 04             	add    $0x4,%edx
f011055c:	39 d0                	cmp    %edx,%eax
f011055e:	75 0a                	jne    f011056a <test_insert_sorted_with_merge_freeList+0x908>
f0110560:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110565:	83 f8 04             	cmp    $0x4,%eax
f0110568:	74 17                	je     f0110581 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011056a:	83 ec 04             	sub    $0x4,%esp
f011056d:	68 a0 81 13 f0       	push   $0xf01381a0
f0110572:	68 4c 03 00 00       	push   $0x34c
f0110577:	68 f4 75 13 f0       	push   $0xf01375f4
f011057c:	e8 7a fc fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110581:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110588:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f011058f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110592:	8d 50 01             	lea    0x1(%eax),%edx
f0110595:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110598:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011059c:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f01105a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a3:	8d 50 01             	lea    0x1(%eax),%edx
f01105a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a9:	40                   	inc    %eax
f01105aa:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01105ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105b1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105b5:	01 c8                	add    %ecx,%eax
f01105b7:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01105bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105be:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01105c5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01105c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105c9:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01105d0:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01105d1:	83 ec 0c             	sub    $0xc,%esp
f01105d4:	ff 75 f0             	pushl  -0x10(%ebp)
f01105d7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105da:	50                   	push   %eax
f01105db:	8d 45 98             	lea    -0x68(%ebp),%eax
f01105de:	50                   	push   %eax
f01105df:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01105e2:	50                   	push   %eax
f01105e3:	68 64 7b 65 f0       	push   $0xf0657b64
f01105e8:	e8 59 02 00 00       	call   f0110846 <check_list_data>
f01105ed:	83 c4 20             	add    $0x20,%esp
f01105f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01105f3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01105f7:	74 17                	je     f0110610 <test_insert_sorted_with_merge_freeList+0x9ae>
f01105f9:	83 ec 04             	sub    $0x4,%esp
f01105fc:	68 0c 82 13 f0       	push   $0xf013820c
f0110601:	68 56 03 00 00       	push   $0x356
f0110606:	68 f4 75 13 f0       	push   $0xf01375f4
f011060b:	e8 eb fb fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110610:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110613:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110616:	74 17                	je     f011062f <test_insert_sorted_with_merge_freeList+0x9cd>
f0110618:	83 ec 04             	sub    $0x4,%esp
f011061b:	68 60 82 13 f0       	push   $0xf0138260
f0110620:	68 57 03 00 00       	push   $0x357
f0110625:	68 f4 75 13 f0       	push   $0xf01375f4
f011062a:	e8 cc fb fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011062f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110636:	83 ec 0c             	sub    $0xc,%esp
f0110639:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011063c:	50                   	push   %eax
f011063d:	e8 d0 02 00 00       	call   f0110912 <check_avaliable_list_data>
f0110642:	83 c4 10             	add    $0x10,%esp
f0110645:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110648:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011064b:	8d 50 04             	lea    0x4(%eax),%edx
f011064e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110651:	39 c2                	cmp    %eax,%edx
f0110653:	74 17                	je     f011066c <test_insert_sorted_with_merge_freeList+0xa0a>
f0110655:	83 ec 04             	sub    $0x4,%esp
f0110658:	68 b4 82 13 f0       	push   $0xf01382b4
f011065d:	68 5c 03 00 00       	push   $0x35c
f0110662:	68 f4 75 13 f0       	push   $0xf01375f4
f0110667:	e8 8f fb fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011066c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110670:	74 17                	je     f0110689 <test_insert_sorted_with_merge_freeList+0xa27>
f0110672:	83 ec 04             	sub    $0x4,%esp
f0110675:	68 0c 83 13 f0       	push   $0xf013830c
f011067a:	68 5d 03 00 00       	push   $0x35d
f011067f:	68 f4 75 13 f0       	push   $0xf01375f4
f0110684:	e8 72 fb fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0110689:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110690:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110693:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f011069a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f011069b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011069e:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f01106a5:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01106a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106a9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106ad:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f01106b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106b6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106ba:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01106c0:	83 ec 0c             	sub    $0xc,%esp
f01106c3:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01106c9:	50                   	push   %eax
f01106ca:	e8 00 1e 02 00       	call   f01324cf <insert_sorted_with_merge_freeList>
f01106cf:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01106d2:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01106d7:	85 c0                	test   %eax,%eax
f01106d9:	75 19                	jne    f01106f4 <test_insert_sorted_with_merge_freeList+0xa92>
f01106db:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01106e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01106e3:	83 c2 06             	add    $0x6,%edx
f01106e6:	39 d0                	cmp    %edx,%eax
f01106e8:	75 0a                	jne    f01106f4 <test_insert_sorted_with_merge_freeList+0xa92>
f01106ea:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01106ef:	83 f8 03             	cmp    $0x3,%eax
f01106f2:	74 17                	je     f011070b <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106f4:	83 ec 04             	sub    $0x4,%esp
f01106f7:	68 a0 81 13 f0       	push   $0xf01381a0
f01106fc:	68 70 03 00 00       	push   $0x370
f0110701:	68 f4 75 13 f0       	push   $0xf01375f4
f0110706:	e8 f0 fa fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011070b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110712:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0110719:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011071c:	48                   	dec    %eax
f011071d:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110724:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110725:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110728:	8d 50 ff             	lea    -0x1(%eax),%edx
f011072b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011072e:	48                   	dec    %eax
f011072f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110736:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011073a:	01 c1                	add    %eax,%ecx
f011073c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011073f:	40                   	inc    %eax
f0110740:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110744:	01 c8                	add    %ecx,%eax
f0110746:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011074a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011074d:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110754:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110755:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110758:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011075f:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110760:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110763:	40                   	inc    %eax
f0110764:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011076b:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f011076c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011076f:	40                   	inc    %eax
f0110770:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110777:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110778:	83 ec 0c             	sub    $0xc,%esp
f011077b:	ff 75 f0             	pushl  -0x10(%ebp)
f011077e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110781:	50                   	push   %eax
f0110782:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110785:	50                   	push   %eax
f0110786:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110789:	50                   	push   %eax
f011078a:	68 64 7b 65 f0       	push   $0xf0657b64
f011078f:	e8 b2 00 00 00       	call   f0110846 <check_list_data>
f0110794:	83 c4 20             	add    $0x20,%esp
f0110797:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011079a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011079e:	74 17                	je     f01107b7 <test_insert_sorted_with_merge_freeList+0xb55>
f01107a0:	83 ec 04             	sub    $0x4,%esp
f01107a3:	68 0c 82 13 f0       	push   $0xf013820c
f01107a8:	68 7c 03 00 00       	push   $0x37c
f01107ad:	68 f4 75 13 f0       	push   $0xf01375f4
f01107b2:	e8 44 fa fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01107b7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01107bd:	74 17                	je     f01107d6 <test_insert_sorted_with_merge_freeList+0xb74>
f01107bf:	83 ec 04             	sub    $0x4,%esp
f01107c2:	68 60 82 13 f0       	push   $0xf0138260
f01107c7:	68 7d 03 00 00       	push   $0x37d
f01107cc:	68 f4 75 13 f0       	push   $0xf01375f4
f01107d1:	e8 25 fa fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01107d6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01107dd:	83 ec 0c             	sub    $0xc,%esp
f01107e0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107e3:	50                   	push   %eax
f01107e4:	e8 29 01 00 00       	call   f0110912 <check_avaliable_list_data>
f01107e9:	83 c4 10             	add    $0x10,%esp
f01107ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01107f2:	8d 50 06             	lea    0x6(%eax),%edx
f01107f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107f8:	39 c2                	cmp    %eax,%edx
f01107fa:	74 17                	je     f0110813 <test_insert_sorted_with_merge_freeList+0xbb1>
f01107fc:	83 ec 04             	sub    $0x4,%esp
f01107ff:	68 b4 82 13 f0       	push   $0xf01382b4
f0110804:	68 82 03 00 00       	push   $0x382
f0110809:	68 f4 75 13 f0       	push   $0xf01375f4
f011080e:	e8 e8 f9 fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110813:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110817:	74 17                	je     f0110830 <test_insert_sorted_with_merge_freeList+0xbce>
f0110819:	83 ec 04             	sub    $0x4,%esp
f011081c:	68 0c 83 13 f0       	push   $0xf013830c
f0110821:	68 83 03 00 00       	push   $0x383
f0110826:	68 f4 75 13 f0       	push   $0xf01375f4
f011082b:	e8 cb f9 fe ff       	call   f01001fb <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110830:	83 ec 0c             	sub    $0xc,%esp
f0110833:	68 68 83 13 f0       	push   $0xf0138368
f0110838:	e8 45 04 ff ff       	call   f0100c82 <cprintf>
f011083d:	83 c4 10             	add    $0x10,%esp

}
f0110840:	90                   	nop
f0110841:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0110844:	c9                   	leave  
f0110845:	c3                   	ret    

f0110846 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0110846:	55                   	push   %ebp
f0110847:	89 e5                	mov    %esp,%ebp
f0110849:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011084c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110853:	8b 45 14             	mov    0x14(%ebp),%eax
f0110856:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f011085c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110863:	8b 45 08             	mov    0x8(%ebp),%eax
f0110866:	8b 00                	mov    (%eax),%eax
f0110868:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011086b:	eb 6e                	jmp    f01108db <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f011086d:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110870:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110873:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011087a:	8b 45 10             	mov    0x10(%ebp),%eax
f011087d:	01 d0                	add    %edx,%eax
f011087f:	8b 00                	mov    (%eax),%eax
f0110881:	85 c0                	test   %eax,%eax
f0110883:	74 e8                	je     f011086d <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0110885:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110888:	8b 50 08             	mov    0x8(%eax),%edx
f011088b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011088e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0110895:	8b 45 0c             	mov    0xc(%ebp),%eax
f0110898:	01 c8                	add    %ecx,%eax
f011089a:	8b 00                	mov    (%eax),%eax
f011089c:	39 c2                	cmp    %eax,%edx
f011089e:	75 1b                	jne    f01108bb <check_list_data+0x75>
f01108a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01108a3:	8b 50 0c             	mov    0xc(%eax),%edx
f01108a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01108a9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01108b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01108b3:	01 c8                	add    %ecx,%eax
f01108b5:	8b 00                	mov    (%eax),%eax
f01108b7:	39 c2                	cmp    %eax,%edx
f01108b9:	74 07                	je     f01108c2 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01108bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01108c0:	eb 4e                	jmp    f0110910 <check_list_data+0xca>
		}
		(*size)++;
f01108c2:	8b 45 14             	mov    0x14(%ebp),%eax
f01108c5:	8b 00                	mov    (%eax),%eax
f01108c7:	8d 50 01             	lea    0x1(%eax),%edx
f01108ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01108cd:	89 10                	mov    %edx,(%eax)
		i++;
f01108cf:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01108d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01108d5:	8b 40 08             	mov    0x8(%eax),%eax
f01108d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01108db:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01108df:	74 07                	je     f01108e8 <check_list_data+0xa2>
f01108e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01108e4:	8b 00                	mov    (%eax),%eax
f01108e6:	eb 05                	jmp    f01108ed <check_list_data+0xa7>
f01108e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01108ed:	8b 55 08             	mov    0x8(%ebp),%edx
f01108f0:	89 42 08             	mov    %eax,0x8(%edx)
f01108f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01108f6:	8b 40 08             	mov    0x8(%eax),%eax
f01108f9:	85 c0                	test   %eax,%eax
f01108fb:	0f 85 6f ff ff ff    	jne    f0110870 <check_list_data+0x2a>
f0110901:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110905:	0f 85 65 ff ff ff    	jne    f0110870 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f011090b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110910:	c9                   	leave  
f0110911:	c3                   	ret    

f0110912 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110912:	55                   	push   %ebp
f0110913:	89 e5                	mov    %esp,%ebp
f0110915:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110918:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011091f:	8b 45 08             	mov    0x8(%ebp),%eax
f0110922:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110928:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f011092d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110930:	eb 30                	jmp    f0110962 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110932:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110935:	8b 40 08             	mov    0x8(%eax),%eax
f0110938:	85 c0                	test   %eax,%eax
f011093a:	75 0a                	jne    f0110946 <check_avaliable_list_data+0x34>
f011093c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011093f:	8b 40 0c             	mov    0xc(%eax),%eax
f0110942:	85 c0                	test   %eax,%eax
f0110944:	74 07                	je     f011094d <check_avaliable_list_data+0x3b>
		{
			return 0;
f0110946:	b8 00 00 00 00       	mov    $0x0,%eax
f011094b:	eb 40                	jmp    f011098d <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f011094d:	8b 45 08             	mov    0x8(%ebp),%eax
f0110950:	8b 00                	mov    (%eax),%eax
f0110952:	8d 50 01             	lea    0x1(%eax),%edx
f0110955:	8b 45 08             	mov    0x8(%ebp),%eax
f0110958:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011095a:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f011095f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110962:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110966:	74 07                	je     f011096f <check_avaliable_list_data+0x5d>
f0110968:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011096b:	8b 00                	mov    (%eax),%eax
f011096d:	eb 05                	jmp    f0110974 <check_avaliable_list_data+0x62>
f011096f:	b8 00 00 00 00       	mov    $0x0,%eax
f0110974:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f0110979:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f011097e:	85 c0                	test   %eax,%eax
f0110980:	75 b0                	jne    f0110932 <check_avaliable_list_data+0x20>
f0110982:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110986:	75 aa                	jne    f0110932 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0110988:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011098d:	c9                   	leave  
f011098e:	c3                   	ret    

f011098f <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f011098f:	55                   	push   %ebp
f0110990:	89 e5                	mov    %esp,%ebp
f0110992:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0110995:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f011099c:	8b 45 08             	mov    0x8(%ebp),%eax
f011099f:	8b 00                	mov    (%eax),%eax
f01109a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01109a4:	eb 27                	jmp    f01109cd <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01109a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109a9:	8b 50 0c             	mov    0xc(%eax),%edx
f01109ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109af:	8b 40 08             	mov    0x8(%eax),%eax
f01109b2:	83 ec 04             	sub    $0x4,%esp
f01109b5:	52                   	push   %edx
f01109b6:	50                   	push   %eax
f01109b7:	68 b8 76 13 f0       	push   $0xf01376b8
f01109bc:	e8 c1 02 ff ff       	call   f0100c82 <cprintf>
f01109c1:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01109c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01109c7:	8b 40 08             	mov    0x8(%eax),%eax
f01109ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01109cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01109d1:	74 07                	je     f01109da <show_list_content+0x4b>
f01109d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109d6:	8b 00                	mov    (%eax),%eax
f01109d8:	eb 05                	jmp    f01109df <show_list_content+0x50>
f01109da:	b8 00 00 00 00       	mov    $0x0,%eax
f01109df:	8b 55 08             	mov    0x8(%ebp),%edx
f01109e2:	89 42 08             	mov    %eax,0x8(%edx)
f01109e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01109e8:	8b 40 08             	mov    0x8(%eax),%eax
f01109eb:	85 c0                	test   %eax,%eax
f01109ed:	75 b7                	jne    f01109a6 <show_list_content+0x17>
f01109ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01109f3:	75 b1                	jne    f01109a6 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01109f5:	90                   	nop
f01109f6:	c9                   	leave  
f01109f7:	c3                   	ret    

f01109f8 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01109f8:	55                   	push   %ebp
f01109f9:	89 e5                	mov    %esp,%ebp
f01109fb:	57                   	push   %edi
f01109fc:	56                   	push   %esi
f01109fd:	53                   	push   %ebx
f01109fe:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110a04:	83 ec 0c             	sub    $0xc,%esp
f0110a07:	68 bc 83 13 f0       	push   $0xf01383bc
f0110a0c:	e8 71 02 ff ff       	call   f0100c82 <cprintf>
f0110a11:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110a14:	83 ec 0c             	sub    $0xc,%esp
f0110a17:	68 e0 83 13 f0       	push   $0xf01383e0
f0110a1c:	e8 61 02 ff ff       	call   f0100c82 <cprintf>
f0110a21:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110a24:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110a2b:	83 ec 0c             	sub    $0xc,%esp
f0110a2e:	68 fc 83 13 f0       	push   $0xf01383fc
f0110a33:	e8 4a 02 ff ff       	call   f0100c82 <cprintf>
f0110a38:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110a3b:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110a3e:	bb b6 84 13 f0       	mov    $0xf01384b6,%ebx
f0110a43:	ba 03 00 00 00       	mov    $0x3,%edx
f0110a48:	89 c7                	mov    %eax,%edi
f0110a4a:	89 de                	mov    %ebx,%esi
f0110a4c:	89 d1                	mov    %edx,%ecx
f0110a4e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110a50:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110a53:	b9 16 00 00 00       	mov    $0x16,%ecx
f0110a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a5d:	89 d7                	mov    %edx,%edi
f0110a5f:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110a61:	83 ec 0c             	sub    $0xc,%esp
f0110a64:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110a67:	50                   	push   %eax
f0110a68:	e8 77 02 ff ff       	call   f0100ce4 <execute_command>
f0110a6d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110a70:	83 ec 0c             	sub    $0xc,%esp
f0110a73:	68 2a 84 13 f0       	push   $0xf013842a
f0110a78:	e8 05 02 ff ff       	call   f0100c82 <cprintf>
f0110a7d:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110a80:	83 ec 0c             	sub    $0xc,%esp
f0110a83:	68 40 84 13 f0       	push   $0xf0138440
f0110a88:	e8 f5 01 ff ff       	call   f0100c82 <cprintf>
f0110a8d:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0110a90:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0110a97:	65 00 00 
f0110a9a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0110aa0:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110aa5:	b8 00 00 00 00       	mov    $0x0,%eax
f0110aaa:	89 d7                	mov    %edx,%edi
f0110aac:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0110aae:	83 ec 0c             	sub    $0xc,%esp
f0110ab1:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110ab7:	50                   	push   %eax
f0110ab8:	e8 27 02 ff ff       	call   f0100ce4 <execute_command>
f0110abd:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110ac0:	83 ec 0c             	sub    $0xc,%esp
f0110ac3:	68 2a 84 13 f0       	push   $0xf013842a
f0110ac8:	e8 b5 01 ff ff       	call   f0100c82 <cprintf>
f0110acd:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110ad0:	83 ec 0c             	sub    $0xc,%esp
f0110ad3:	68 68 84 13 f0       	push   $0xf0138468
f0110ad8:	e8 a5 01 ff ff       	call   f0100c82 <cprintf>
f0110add:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110ae0:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0110ae7:	75 00 00 
f0110aea:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110af0:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110af5:	b8 00 00 00 00       	mov    $0x0,%eax
f0110afa:	89 d7                	mov    %edx,%edi
f0110afc:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110afe:	83 ec 0c             	sub    $0xc,%esp
f0110b01:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0110b07:	50                   	push   %eax
f0110b08:	e8 d7 01 ff ff       	call   f0100ce4 <execute_command>
f0110b0d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110b10:	83 ec 0c             	sub    $0xc,%esp
f0110b13:	68 2a 84 13 f0       	push   $0xf013842a
f0110b18:	e8 65 01 ff ff       	call   f0100c82 <cprintf>
f0110b1d:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110b20:	83 ec 0c             	sub    $0xc,%esp
f0110b23:	68 90 84 13 f0       	push   $0xf0138490
f0110b28:	e8 55 01 ff ff       	call   f0100c82 <cprintf>
f0110b2d:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110b30:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0110b37:	6d 6d 00 
f0110b3a:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110b40:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110b45:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b4a:	89 d7                	mov    %edx,%edi
f0110b4c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110b4e:	83 ec 0c             	sub    $0xc,%esp
f0110b51:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0110b57:	50                   	push   %eax
f0110b58:	e8 87 01 ff ff       	call   f0100ce4 <execute_command>
f0110b5d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110b60:	83 ec 0c             	sub    $0xc,%esp
f0110b63:	68 2a 84 13 f0       	push   $0xf013842a
f0110b68:	e8 15 01 ff ff       	call   f0100c82 <cprintf>
f0110b6d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110b70:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110b75:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110b78:	5b                   	pop    %ebx
f0110b79:	5e                   	pop    %esi
f0110b7a:	5f                   	pop    %edi
f0110b7b:	5d                   	pop    %ebp
f0110b7c:	c3                   	ret    

f0110b7d <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0110b7d:	55                   	push   %ebp
f0110b7e:	89 e5                	mov    %esp,%ebp
f0110b80:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0110b83:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110b8a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110b91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110b98:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110b9d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ba0:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ba3:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ba6:	50                   	push   %eax
f0110ba7:	e8 71 6f ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110bac:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110baf:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110bb4:	ff 75 ec             	pushl  -0x14(%ebp)
f0110bb7:	ff 75 f0             	pushl  -0x10(%ebp)
f0110bba:	ff 75 f4             	pushl  -0xc(%ebp)
f0110bbd:	50                   	push   %eax
f0110bbe:	e8 9e 4e 00 00       	call   f0115a61 <CP>
f0110bc3:	83 c4 10             	add    $0x10,%esp
f0110bc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110bc9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110bcd:	74 14                	je     f0110be3 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0110bcf:	83 ec 04             	sub    $0x4,%esp
f0110bd2:	68 1c 85 13 f0       	push   $0xf013851c
f0110bd7:	6a 5a                	push   $0x5a
f0110bd9:	68 3e 85 13 f0       	push   $0xf013853e
f0110bde:	e8 18 f6 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110be3:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110bea:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110bf1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110bf8:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110bfd:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c00:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c03:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c06:	50                   	push   %eax
f0110c07:	e8 11 6f ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110c0c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c0f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c14:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c17:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c1d:	50                   	push   %eax
f0110c1e:	e8 3e 4e 00 00       	call   f0115a61 <CP>
f0110c23:	83 c4 10             	add    $0x10,%esp
f0110c26:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110c29:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c2d:	74 14                	je     f0110c43 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110c2f:	83 ec 04             	sub    $0x4,%esp
f0110c32:	68 5c 85 13 f0       	push   $0xf013855c
f0110c37:	6a 66                	push   $0x66
f0110c39:	68 3e 85 13 f0       	push   $0xf013853e
f0110c3e:	e8 b8 f5 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0110c43:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110c4a:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110c51:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c58:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c5d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c60:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c63:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c66:	50                   	push   %eax
f0110c67:	e8 b1 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110c6c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c6f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c74:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c77:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c7d:	50                   	push   %eax
f0110c7e:	e8 de 4d 00 00       	call   f0115a61 <CP>
f0110c83:	83 c4 10             	add    $0x10,%esp
f0110c86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110c89:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c8d:	74 14                	je     f0110ca3 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0110c8f:	83 ec 04             	sub    $0x4,%esp
f0110c92:	68 80 85 13 f0       	push   $0xf0138580
f0110c97:	6a 71                	push   $0x71
f0110c99:	68 3e 85 13 f0       	push   $0xf013853e
f0110c9e:	e8 58 f5 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0110ca3:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0110caa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0110cb1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110cb8:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110cbd:	ff 75 ec             	pushl  -0x14(%ebp)
f0110cc0:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0110cc6:	50                   	push   %eax
f0110cc7:	e8 51 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110ccc:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110ccf:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110cd4:	ff 75 ec             	pushl  -0x14(%ebp)
f0110cd7:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cda:	ff 75 f4             	pushl  -0xc(%ebp)
f0110cdd:	50                   	push   %eax
f0110cde:	e8 7e 4d 00 00       	call   f0115a61 <CP>
f0110ce3:	83 c4 10             	add    $0x10,%esp
f0110ce6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110ce9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ced:	74 14                	je     f0110d03 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110cef:	83 ec 04             	sub    $0x4,%esp
f0110cf2:	68 a4 85 13 f0       	push   $0xf01385a4
f0110cf7:	6a 7d                	push   $0x7d
f0110cf9:	68 3e 85 13 f0       	push   $0xf013853e
f0110cfe:	e8 f8 f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110d03:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110d0a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110d11:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d18:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d1d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d20:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d23:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d26:	50                   	push   %eax
f0110d27:	e8 f1 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110d2c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d2f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d34:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d37:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d3d:	50                   	push   %eax
f0110d3e:	e8 1e 4d 00 00       	call   f0115a61 <CP>
f0110d43:	83 c4 10             	add    $0x10,%esp
f0110d46:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110d49:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d4d:	74 17                	je     f0110d66 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110d4f:	83 ec 04             	sub    $0x4,%esp
f0110d52:	68 c8 85 13 f0       	push   $0xf01385c8
f0110d57:	68 89 00 00 00       	push   $0x89
f0110d5c:	68 3e 85 13 f0       	push   $0xf013853e
f0110d61:	e8 95 f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110d66:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0110d6d:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0110d74:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d7b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d80:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d83:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d86:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d89:	50                   	push   %eax
f0110d8a:	e8 8e 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110d8f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d92:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d97:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d9a:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110da0:	50                   	push   %eax
f0110da1:	e8 bb 4c 00 00       	call   f0115a61 <CP>
f0110da6:	83 c4 10             	add    $0x10,%esp
f0110da9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110dac:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110db0:	74 17                	je     f0110dc9 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0110db2:	83 ec 04             	sub    $0x4,%esp
f0110db5:	68 ec 85 13 f0       	push   $0xf01385ec
f0110dba:	68 95 00 00 00       	push   $0x95
f0110dbf:	68 3e 85 13 f0       	push   $0xf013853e
f0110dc4:	e8 32 f4 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0110dc9:	83 ec 0c             	sub    $0xc,%esp
f0110dcc:	68 18 86 13 f0       	push   $0xf0138618
f0110dd1:	e8 ac fe fe ff       	call   f0100c82 <cprintf>
f0110dd6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110dd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110dde:	c9                   	leave  
f0110ddf:	c3                   	ret    

f0110de0 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0110de0:	55                   	push   %ebp
f0110de1:	89 e5                	mov    %esp,%ebp
f0110de3:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110de6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110ded:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110df4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110dfb:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e00:	ff 75 ec             	pushl  -0x14(%ebp)
f0110e03:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e06:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e09:	50                   	push   %eax
f0110e0a:	e8 0e 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110e0f:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110e12:	83 ec 04             	sub    $0x4,%esp
f0110e15:	68 68 86 13 f0       	push   $0xf0138668
f0110e1a:	68 a2 00 00 00       	push   $0xa2
f0110e1f:	68 3e 85 13 f0       	push   $0xf013853e
f0110e24:	e8 d2 f3 fe ff       	call   f01001fb <_panic>

f0110e29 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110e29:	55                   	push   %ebp
f0110e2a:	89 e5                	mov    %esp,%ebp
f0110e2c:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110e2f:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110e36:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e3b:	83 ec 08             	sub    $0x8,%esp
f0110e3e:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e41:	50                   	push   %eax
f0110e42:	e8 8a 6d ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110e47:	83 c4 10             	add    $0x10,%esp
f0110e4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110e4d:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110e51:	74 17                	je     f0110e6a <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110e53:	83 ec 04             	sub    $0x4,%esp
f0110e56:	68 04 87 13 f0       	push   $0xf0138704
f0110e5b:	68 b0 00 00 00       	push   $0xb0
f0110e60:	68 3e 85 13 f0       	push   $0xf013853e
f0110e65:	e8 91 f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110e6a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110e71:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e76:	83 ec 08             	sub    $0x8,%esp
f0110e79:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e7c:	50                   	push   %eax
f0110e7d:	e8 4f 6d ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110e82:	83 c4 10             	add    $0x10,%esp
f0110e85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0110e88:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e8c:	74 17                	je     f0110ea5 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0110e8e:	83 ec 04             	sub    $0x4,%esp
f0110e91:	68 28 87 13 f0       	push   $0xf0138728
f0110e96:	68 b8 00 00 00       	push   $0xb8
f0110e9b:	68 3e 85 13 f0       	push   $0xf013853e
f0110ea0:	e8 56 f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0110ea5:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110eac:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110eb1:	83 ec 08             	sub    $0x8,%esp
f0110eb4:	ff 75 f4             	pushl  -0xc(%ebp)
f0110eb7:	50                   	push   %eax
f0110eb8:	e8 14 6d ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110ebd:	83 c4 10             	add    $0x10,%esp
f0110ec0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110ec3:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110ec7:	74 17                	je     f0110ee0 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0110ec9:	83 ec 04             	sub    $0x4,%esp
f0110ecc:	68 4c 87 13 f0       	push   $0xf013874c
f0110ed1:	68 c0 00 00 00       	push   $0xc0
f0110ed6:	68 3e 85 13 f0       	push   $0xf013853e
f0110edb:	e8 1b f3 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF1000000;
f0110ee0:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110ee7:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110eec:	83 ec 08             	sub    $0x8,%esp
f0110eef:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ef2:	50                   	push   %eax
f0110ef3:	e8 d9 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110ef8:	83 c4 10             	add    $0x10,%esp
f0110efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110efe:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110f02:	74 17                	je     f0110f1b <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110f04:	83 ec 04             	sub    $0x4,%esp
f0110f07:	68 70 87 13 f0       	push   $0xf0138770
f0110f0c:	68 c7 00 00 00       	push   $0xc7
f0110f11:	68 3e 85 13 f0       	push   $0xf013853e
f0110f16:	e8 e0 f2 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f0110f1b:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110f22:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f27:	83 ec 08             	sub    $0x8,%esp
f0110f2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f2d:	50                   	push   %eax
f0110f2e:	e8 9e 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110f33:	83 c4 10             	add    $0x10,%esp
f0110f36:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110f39:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110f3d:	74 17                	je     f0110f56 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110f3f:	83 ec 04             	sub    $0x4,%esp
f0110f42:	68 94 87 13 f0       	push   $0xf0138794
f0110f47:	68 ce 00 00 00       	push   $0xce
f0110f4c:	68 3e 85 13 f0       	push   $0xf013853e
f0110f51:	e8 a5 f2 fe ff       	call   f01001fb <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110f56:	83 ec 0c             	sub    $0xc,%esp
f0110f59:	68 b8 87 13 f0       	push   $0xf01387b8
f0110f5e:	e8 1f fd fe ff       	call   f0100c82 <cprintf>
f0110f63:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110f66:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110f6b:	c9                   	leave  
f0110f6c:	c3                   	ret    

f0110f6d <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0110f6d:	55                   	push   %ebp
f0110f6e:	89 e5                	mov    %esp,%ebp
f0110f70:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0110f73:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110f7a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f7f:	83 ec 08             	sub    $0x8,%esp
f0110f82:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f85:	50                   	push   %eax
f0110f86:	e8 a1 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0110f8b:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0110f8e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f93:	83 ec 08             	sub    $0x8,%esp
f0110f96:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f99:	50                   	push   %eax
f0110f9a:	e8 1e 4a 00 00       	call   f01159bd <CE>
f0110f9f:	83 c4 10             	add    $0x10,%esp
f0110fa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110fa5:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110fa9:	74 17                	je     f0110fc2 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0110fab:	83 ec 04             	sub    $0x4,%esp
f0110fae:	68 00 88 13 f0       	push   $0xf0138800
f0110fb3:	68 de 00 00 00       	push   $0xde
f0110fb8:	68 3e 85 13 f0       	push   $0xf013853e
f0110fbd:	e8 39 f2 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f0110fc2:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110fc9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110fce:	83 ec 08             	sub    $0x8,%esp
f0110fd1:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fd4:	50                   	push   %eax
f0110fd5:	e8 52 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0110fda:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110fdd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110fe2:	83 ec 08             	sub    $0x8,%esp
f0110fe5:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fe8:	50                   	push   %eax
f0110fe9:	e8 cf 49 00 00       	call   f01159bd <CE>
f0110fee:	83 c4 10             	add    $0x10,%esp
f0110ff1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110ff4:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110ff8:	74 17                	je     f0111011 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0110ffa:	83 ec 04             	sub    $0x4,%esp
f0110ffd:	68 2c 88 13 f0       	push   $0xf013882c
f0111002:	68 e6 00 00 00       	push   $0xe6
f0111007:	68 3e 85 13 f0       	push   $0xf013853e
f011100c:	e8 ea f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0111011:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111018:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011101d:	83 ec 08             	sub    $0x8,%esp
f0111020:	ff 75 f4             	pushl  -0xc(%ebp)
f0111023:	50                   	push   %eax
f0111024:	e8 03 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0111029:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011102c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111031:	83 ec 08             	sub    $0x8,%esp
f0111034:	ff 75 f4             	pushl  -0xc(%ebp)
f0111037:	50                   	push   %eax
f0111038:	e8 80 49 00 00       	call   f01159bd <CE>
f011103d:	83 c4 10             	add    $0x10,%esp
f0111040:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111043:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111047:	74 17                	je     f0111060 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111049:	83 ec 04             	sub    $0x4,%esp
f011104c:	68 58 88 13 f0       	push   $0xf0138858
f0111051:	68 ee 00 00 00       	push   $0xee
f0111056:	68 3e 85 13 f0       	push   $0xf013853e
f011105b:	e8 9b f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0000000;
f0111060:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111067:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011106c:	83 ec 08             	sub    $0x8,%esp
f011106f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111072:	50                   	push   %eax
f0111073:	e8 b4 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0111078:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011107b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111080:	83 ec 08             	sub    $0x8,%esp
f0111083:	ff 75 f4             	pushl  -0xc(%ebp)
f0111086:	50                   	push   %eax
f0111087:	e8 31 49 00 00       	call   f01159bd <CE>
f011108c:	83 c4 10             	add    $0x10,%esp
f011108f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111092:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111096:	74 17                	je     f01110af <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111098:	83 ec 04             	sub    $0x4,%esp
f011109b:	68 84 88 13 f0       	push   $0xf0138884
f01110a0:	68 f6 00 00 00       	push   $0xf6
f01110a5:	68 3e 85 13 f0       	push   $0xf013853e
f01110aa:	e8 4c f1 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01110af:	83 ec 0c             	sub    $0xc,%esp
f01110b2:	68 b0 88 13 f0       	push   $0xf01388b0
f01110b7:	e8 c6 fb fe ff       	call   f0100c82 <cprintf>
f01110bc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01110bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01110c4:	c9                   	leave  
f01110c5:	c3                   	ret    

f01110c6 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01110c6:	55                   	push   %ebp
f01110c7:	89 e5                	mov    %esp,%ebp
f01110c9:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01110cc:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01110d3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01110d8:	83 ec 08             	sub    $0x8,%esp
f01110db:	ff 75 f4             	pushl  -0xc(%ebp)
f01110de:	50                   	push   %eax
f01110df:	e8 48 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f01110e4:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01110e7:	83 ec 04             	sub    $0x4,%esp
f01110ea:	68 fc 88 13 f0       	push   $0xf01388fc
f01110ef:	68 01 01 00 00       	push   $0x101
f01110f4:	68 3e 85 13 f0       	push   $0xf013853e
f01110f9:	e8 fd f0 fe ff       	call   f01001fb <_panic>

f01110fe <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f01110fe:	55                   	push   %ebp
f01110ff:	89 e5                	mov    %esp,%ebp
f0111101:	57                   	push   %edi
f0111102:	56                   	push   %esi
f0111103:	53                   	push   %ebx
f0111104:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011110a:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111111:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111118:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011111d:	83 ec 0c             	sub    $0xc,%esp
f0111120:	50                   	push   %eax
f0111121:	e8 79 49 00 00       	call   f0115a9f <ClearUserSpace>
f0111126:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111129:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111130:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111135:	83 ec 08             	sub    $0x8,%esp
f0111138:	ff 75 dc             	pushl  -0x24(%ebp)
f011113b:	50                   	push   %eax
f011113c:	e8 57 6b ff ff       	call   f0107c98 <virtual_to_physical>
f0111141:	83 c4 10             	add    $0x10,%esp
f0111144:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111147:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f011114b:	74 17                	je     f0111164 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f011114d:	83 ec 04             	sub    $0x4,%esp
f0111150:	68 94 89 13 f0       	push   $0xf0138994
f0111155:	68 16 01 00 00       	push   $0x116
f011115a:	68 3e 85 13 f0       	push   $0xf013853e
f011115f:	e8 97 f0 fe ff       	call   f01001fb <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111164:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011116b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111170:	83 ec 08             	sub    $0x8,%esp
f0111173:	ff 75 dc             	pushl  -0x24(%ebp)
f0111176:	50                   	push   %eax
f0111177:	e8 1c 6b ff ff       	call   f0107c98 <virtual_to_physical>
f011117c:	83 c4 10             	add    $0x10,%esp
f011117f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111182:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111187:	83 ec 08             	sub    $0x8,%esp
f011118a:	ff 75 dc             	pushl  -0x24(%ebp)
f011118d:	50                   	push   %eax
f011118e:	e8 0b 48 00 00       	call   f011599e <CA>
f0111193:	83 c4 10             	add    $0x10,%esp
f0111196:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111199:	74 17                	je     f01111b2 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f011119b:	83 ec 04             	sub    $0x4,%esp
f011119e:	68 cc 89 13 f0       	push   $0xf01389cc
f01111a3:	68 1f 01 00 00       	push   $0x11f
f01111a8:	68 3e 85 13 f0       	push   $0xf013853e
f01111ad:	e8 49 f0 fe ff       	call   f01001fb <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01111b2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01111b8:	bb 98 8b 13 f0       	mov    $0xf0138b98,%ebx
f01111bd:	ba 0d 00 00 00       	mov    $0xd,%edx
f01111c2:	89 c7                	mov    %eax,%edi
f01111c4:	89 de                	mov    %ebx,%esi
f01111c6:	89 d1                	mov    %edx,%ecx
f01111c8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01111ca:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01111cd:	b9 57 00 00 00       	mov    $0x57,%ecx
f01111d2:	b0 00                	mov    $0x0,%al
f01111d4:	89 d7                	mov    %edx,%edi
f01111d6:	f3 aa                	rep stos %al,%es:(%edi)
f01111d8:	83 ec 0c             	sub    $0xc,%esp
f01111db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01111e1:	50                   	push   %eax
f01111e2:	e8 fd fa fe ff       	call   f0100ce4 <execute_command>
f01111e7:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f01111ea:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01111f1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111f6:	83 ec 08             	sub    $0x8,%esp
f01111f9:	ff 75 dc             	pushl  -0x24(%ebp)
f01111fc:	50                   	push   %eax
f01111fd:	e8 96 6a ff ff       	call   f0107c98 <virtual_to_physical>
f0111202:	83 c4 10             	add    $0x10,%esp
f0111205:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111208:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011120d:	83 ec 08             	sub    $0x8,%esp
f0111210:	ff 75 dc             	pushl  -0x24(%ebp)
f0111213:	50                   	push   %eax
f0111214:	e8 85 47 00 00       	call   f011599e <CA>
f0111219:	83 c4 10             	add    $0x10,%esp
f011121c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011121f:	74 17                	je     f0111238 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111221:	83 ec 04             	sub    $0x4,%esp
f0111224:	68 04 8a 13 f0       	push   $0xf0138a04
f0111229:	68 28 01 00 00       	push   $0x128
f011122e:	68 3e 85 13 f0       	push   $0xf013853e
f0111233:	e8 c3 ef fe ff       	call   f01001fb <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111238:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011123e:	bb fc 8b 13 f0       	mov    $0xf0138bfc,%ebx
f0111243:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111248:	89 c7                	mov    %eax,%edi
f011124a:	89 de                	mov    %ebx,%esi
f011124c:	89 d1                	mov    %edx,%ecx
f011124e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111250:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111256:	b9 57 00 00 00       	mov    $0x57,%ecx
f011125b:	b0 00                	mov    $0x0,%al
f011125d:	89 d7                	mov    %edx,%edi
f011125f:	f3 aa                	rep stos %al,%es:(%edi)
f0111261:	83 ec 0c             	sub    $0xc,%esp
f0111264:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011126a:	50                   	push   %eax
f011126b:	e8 74 fa fe ff       	call   f0100ce4 <execute_command>
f0111270:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111273:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011127a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011127f:	83 ec 08             	sub    $0x8,%esp
f0111282:	ff 75 dc             	pushl  -0x24(%ebp)
f0111285:	50                   	push   %eax
f0111286:	e8 0d 6a ff ff       	call   f0107c98 <virtual_to_physical>
f011128b:	83 c4 10             	add    $0x10,%esp
f011128e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111291:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111296:	83 ec 08             	sub    $0x8,%esp
f0111299:	ff 75 dc             	pushl  -0x24(%ebp)
f011129c:	50                   	push   %eax
f011129d:	e8 fc 46 00 00       	call   f011599e <CA>
f01112a2:	83 c4 10             	add    $0x10,%esp
f01112a5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01112a8:	74 17                	je     f01112c1 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01112aa:	83 ec 04             	sub    $0x4,%esp
f01112ad:	68 3c 8a 13 f0       	push   $0xf0138a3c
f01112b2:	68 31 01 00 00       	push   $0x131
f01112b7:	68 3e 85 13 f0       	push   $0xf013853e
f01112bc:	e8 3a ef fe ff       	call   f01001fb <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01112c1:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01112c7:	bb 60 8c 13 f0       	mov    $0xf0138c60,%ebx
f01112cc:	ba 0d 00 00 00       	mov    $0xd,%edx
f01112d1:	89 c7                	mov    %eax,%edi
f01112d3:	89 de                	mov    %ebx,%esi
f01112d5:	89 d1                	mov    %edx,%ecx
f01112d7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01112d9:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01112df:	b9 57 00 00 00       	mov    $0x57,%ecx
f01112e4:	b0 00                	mov    $0x0,%al
f01112e6:	89 d7                	mov    %edx,%edi
f01112e8:	f3 aa                	rep stos %al,%es:(%edi)
f01112ea:	83 ec 0c             	sub    $0xc,%esp
f01112ed:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01112f3:	50                   	push   %eax
f01112f4:	e8 eb f9 fe ff       	call   f0100ce4 <execute_command>
f01112f9:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01112fc:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111303:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111308:	83 ec 08             	sub    $0x8,%esp
f011130b:	ff 75 dc             	pushl  -0x24(%ebp)
f011130e:	50                   	push   %eax
f011130f:	e8 84 69 ff ff       	call   f0107c98 <virtual_to_physical>
f0111314:	83 c4 10             	add    $0x10,%esp
f0111317:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011131a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011131f:	83 ec 08             	sub    $0x8,%esp
f0111322:	ff 75 dc             	pushl  -0x24(%ebp)
f0111325:	50                   	push   %eax
f0111326:	e8 73 46 00 00       	call   f011599e <CA>
f011132b:	83 c4 10             	add    $0x10,%esp
f011132e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111331:	74 17                	je     f011134a <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111333:	83 ec 04             	sub    $0x4,%esp
f0111336:	68 74 8a 13 f0       	push   $0xf0138a74
f011133b:	68 3a 01 00 00       	push   $0x13a
f0111340:	68 3e 85 13 f0       	push   $0xf013853e
f0111345:	e8 b1 ee fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001000;
f011134a:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111351:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111356:	83 ec 08             	sub    $0x8,%esp
f0111359:	ff 75 dc             	pushl  -0x24(%ebp)
f011135c:	50                   	push   %eax
f011135d:	e8 36 69 ff ff       	call   f0107c98 <virtual_to_physical>
f0111362:	83 c4 10             	add    $0x10,%esp
f0111365:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111368:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011136d:	83 ec 08             	sub    $0x8,%esp
f0111370:	ff 75 dc             	pushl  -0x24(%ebp)
f0111373:	50                   	push   %eax
f0111374:	e8 25 46 00 00       	call   f011599e <CA>
f0111379:	83 c4 10             	add    $0x10,%esp
f011137c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011137f:	74 17                	je     f0111398 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111381:	83 ec 04             	sub    $0x4,%esp
f0111384:	68 ac 8a 13 f0       	push   $0xf0138aac
f0111389:	68 42 01 00 00       	push   $0x142
f011138e:	68 3e 85 13 f0       	push   $0xf013853e
f0111393:	e8 63 ee fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001005;
f0111398:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011139f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01113a4:	83 ec 08             	sub    $0x8,%esp
f01113a7:	ff 75 dc             	pushl  -0x24(%ebp)
f01113aa:	50                   	push   %eax
f01113ab:	e8 e8 68 ff ff       	call   f0107c98 <virtual_to_physical>
f01113b0:	83 c4 10             	add    $0x10,%esp
f01113b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01113b6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01113bb:	83 ec 08             	sub    $0x8,%esp
f01113be:	ff 75 dc             	pushl  -0x24(%ebp)
f01113c1:	50                   	push   %eax
f01113c2:	e8 d7 45 00 00       	call   f011599e <CA>
f01113c7:	83 c4 10             	add    $0x10,%esp
f01113ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01113cd:	74 17                	je     f01113e6 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01113cf:	83 ec 04             	sub    $0x4,%esp
f01113d2:	68 e4 8a 13 f0       	push   $0xf0138ae4
f01113d7:	68 4a 01 00 00       	push   $0x14a
f01113dc:	68 3e 85 13 f0       	push   $0xf013853e
f01113e1:	e8 15 ee fe ff       	call   f01001fb <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01113e6:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01113ec:	bb c4 8c 13 f0       	mov    $0xf0138cc4,%ebx
f01113f1:	ba 0e 00 00 00       	mov    $0xe,%edx
f01113f6:	89 c7                	mov    %eax,%edi
f01113f8:	89 de                	mov    %ebx,%esi
f01113fa:	89 d1                	mov    %edx,%ecx
f01113fc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01113fe:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111404:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111409:	b0 00                	mov    $0x0,%al
f011140b:	89 d7                	mov    %edx,%edi
f011140d:	f3 aa                	rep stos %al,%es:(%edi)
f011140f:	83 ec 0c             	sub    $0xc,%esp
f0111412:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111418:	50                   	push   %eax
f0111419:	e8 c6 f8 fe ff       	call   f0100ce4 <execute_command>
f011141e:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111421:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111428:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011142d:	83 ec 08             	sub    $0x8,%esp
f0111430:	ff 75 dc             	pushl  -0x24(%ebp)
f0111433:	50                   	push   %eax
f0111434:	e8 5f 68 ff ff       	call   f0107c98 <virtual_to_physical>
f0111439:	83 c4 10             	add    $0x10,%esp
f011143c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011143f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111444:	83 ec 08             	sub    $0x8,%esp
f0111447:	ff 75 dc             	pushl  -0x24(%ebp)
f011144a:	50                   	push   %eax
f011144b:	e8 4e 45 00 00       	call   f011599e <CA>
f0111450:	83 c4 10             	add    $0x10,%esp
f0111453:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111456:	74 17                	je     f011146f <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111458:	83 ec 04             	sub    $0x4,%esp
f011145b:	68 1c 8b 13 f0       	push   $0xf0138b1c
f0111460:	68 53 01 00 00       	push   $0x153
f0111465:	68 3e 85 13 f0       	push   $0xf013853e
f011146a:	e8 8c ed fe ff       	call   f01001fb <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f011146f:	83 ec 0c             	sub    $0xc,%esp
f0111472:	68 54 8b 13 f0       	push   $0xf0138b54
f0111477:	e8 06 f8 fe ff       	call   f0100c82 <cprintf>
f011147c:	83 c4 10             	add    $0x10,%esp

	return 0;
f011147f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111484:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111487:	5b                   	pop    %ebx
f0111488:	5e                   	pop    %esi
f0111489:	5f                   	pop    %edi
f011148a:	5d                   	pop    %ebp
f011148b:	c3                   	ret    

f011148c <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f011148c:	55                   	push   %ebp
f011148d:	89 e5                	mov    %esp,%ebp
f011148f:	57                   	push   %edi
f0111490:	56                   	push   %esi
f0111491:	53                   	push   %ebx
f0111492:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111498:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011149e:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f01114a3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01114a8:	89 c7                	mov    %eax,%edi
f01114aa:	89 de                	mov    %ebx,%esi
f01114ac:	89 d1                	mov    %edx,%ecx
f01114ae:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01114b0:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01114b6:	b9 23 00 00 00       	mov    $0x23,%ecx
f01114bb:	b0 00                	mov    $0x0,%al
f01114bd:	89 d7                	mov    %edx,%edi
f01114bf:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01114c1:	6a 00                	push   $0x0
f01114c3:	6a 0a                	push   $0xa
f01114c5:	6a 14                	push   $0x14
f01114c7:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01114cd:	50                   	push   %eax
f01114ce:	e8 96 77 ff ff       	call   f0108c69 <env_create>
f01114d3:	83 c4 10             	add    $0x10,%esp
f01114d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01114d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01114dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01114df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01114e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01114e5:	8b 40 60             	mov    0x60(%eax),%eax
f01114e8:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01114eb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01114ee:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01114f1:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01114f8:	75 70 20 
f01114fb:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111502:	00 00 00 
f0111505:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011150b:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111510:	b8 00 00 00 00       	mov    $0x0,%eax
f0111515:	89 d7                	mov    %edx,%edi
f0111517:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111519:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011151c:	8b 40 4c             	mov    0x4c(%eax),%eax
f011151f:	83 ec 08             	sub    $0x8,%esp
f0111522:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111528:	52                   	push   %edx
f0111529:	50                   	push   %eax
f011152a:	e8 6f fb 01 00       	call   f013109e <ltostr>
f011152f:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111532:	83 ec 04             	sub    $0x4,%esp
f0111535:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011153b:	50                   	push   %eax
f011153c:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111542:	50                   	push   %eax
f0111543:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111549:	50                   	push   %eax
f011154a:	e8 47 fc 01 00       	call   f0131196 <strcconcat>
f011154f:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111552:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111559:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111560:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111567:	83 ec 0c             	sub    $0xc,%esp
f011156a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011156d:	e8 2d 45 00 00       	call   f0115a9f <ClearUserSpace>
f0111572:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111575:	83 ec 04             	sub    $0x4,%esp
f0111578:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011157e:	50                   	push   %eax
f011157f:	68 28 8d 13 f0       	push   $0xf0138d28
f0111584:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011158a:	50                   	push   %eax
f011158b:	e8 06 fc 01 00       	call   f0131196 <strcconcat>
f0111590:	83 c4 10             	add    $0x10,%esp
f0111593:	83 ec 0c             	sub    $0xc,%esp
f0111596:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011159c:	50                   	push   %eax
f011159d:	e8 42 f7 fe ff       	call   f0100ce4 <execute_command>
f01115a2:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01115a5:	83 ec 04             	sub    $0x4,%esp
f01115a8:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01115ae:	50                   	push   %eax
f01115af:	68 33 8d 13 f0       	push   $0xf0138d33
f01115b4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01115ba:	50                   	push   %eax
f01115bb:	e8 d6 fb 01 00       	call   f0131196 <strcconcat>
f01115c0:	83 c4 10             	add    $0x10,%esp
f01115c3:	83 ec 0c             	sub    $0xc,%esp
f01115c6:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01115cc:	50                   	push   %eax
f01115cd:	e8 12 f7 fe ff       	call   f0100ce4 <execute_command>
f01115d2:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01115d5:	83 ec 04             	sub    $0x4,%esp
f01115d8:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01115de:	50                   	push   %eax
f01115df:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01115e4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01115ea:	50                   	push   %eax
f01115eb:	e8 a6 fb 01 00       	call   f0131196 <strcconcat>
f01115f0:	83 c4 10             	add    $0x10,%esp
f01115f3:	83 ec 0c             	sub    $0xc,%esp
f01115f6:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01115fc:	50                   	push   %eax
f01115fd:	e8 e2 f6 fe ff       	call   f0100ce4 <execute_command>
f0111602:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111605:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011160c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011160f:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111612:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111619:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011161c:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011161f:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111626:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111629:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011162c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011162f:	83 ec 08             	sub    $0x8,%esp
f0111632:	50                   	push   %eax
f0111633:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111636:	e8 45 44 00 00       	call   f0115a80 <GP>
f011163b:	83 c4 10             	add    $0x10,%esp
f011163e:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111641:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111648:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011164f:	e8 75 b2 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111654:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0111657:	83 ec 0c             	sub    $0xc,%esp
f011165a:	68 4c 8d 13 f0       	push   $0xf0138d4c
f011165f:	e8 1e f6 fe ff       	call   f0100c82 <cprintf>
f0111664:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0111667:	6a 03                	push   $0x3
f0111669:	68 00 00 90 02       	push   $0x2900000
f011166e:	68 00 00 80 02       	push   $0x2800000
f0111673:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111676:	e8 45 70 ff ff       	call   f01086c0 <cut_paste_pages>
f011167b:	83 c4 10             	add    $0x10,%esp
f011167e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111681:	e8 43 b2 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111686:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0111689:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111690:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111694:	75 08                	jne    f011169e <test_cut_paste_pages+0x212>
f0111696:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111699:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011169c:	74 2b                	je     f01116c9 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011169e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01116a1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01116a4:	83 ec 0c             	sub    $0xc,%esp
f01116a7:	50                   	push   %eax
f01116a8:	ff 75 b4             	pushl  -0x4c(%ebp)
f01116ab:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01116b0:	68 91 01 00 00       	push   $0x191
f01116b5:	68 3e 85 13 f0       	push   $0xf013853e
f01116ba:	e8 c8 ec fe ff       	call   f0100387 <_warn>
f01116bf:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01116c2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01116c9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01116cd:	74 04                	je     f01116d3 <test_cut_paste_pages+0x247>
f01116cf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01116d3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01116da:	83 ec 08             	sub    $0x8,%esp
f01116dd:	6a 00                	push   $0x0
f01116df:	6a 01                	push   $0x1
f01116e1:	6a 00                	push   $0x0
f01116e3:	68 ff 0f 00 00       	push   $0xfff
f01116e8:	ff 75 bc             	pushl  -0x44(%ebp)
f01116eb:	6a 01                	push   $0x1
f01116ed:	68 00 30 00 00       	push   $0x3000
f01116f2:	68 00 00 90 02       	push   $0x2900000
f01116f7:	68 00 00 80 02       	push   $0x2800000
f01116fc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116ff:	e8 cf 43 00 00       	call   f0115ad3 <CCP>
f0111704:	83 c4 30             	add    $0x30,%esp
f0111707:	83 f8 01             	cmp    $0x1,%eax
f011170a:	74 21                	je     f011172d <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011170c:	83 ec 04             	sub    $0x4,%esp
f011170f:	68 d0 8d 13 f0       	push   $0xf0138dd0
f0111714:	68 99 01 00 00       	push   $0x199
f0111719:	68 3e 85 13 f0       	push   $0xf013853e
f011171e:	e8 64 ec fe ff       	call   f0100387 <_warn>
f0111723:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111726:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011172d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111731:	74 04                	je     f0111737 <test_cut_paste_pages+0x2ab>
f0111733:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111737:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011173e:	83 ec 04             	sub    $0x4,%esp
f0111741:	6a 00                	push   $0x0
f0111743:	68 00 00 90 02       	push   $0x2900000
f0111748:	ff 75 d4             	pushl  -0x2c(%ebp)
f011174b:	e8 5f 41 00 00       	call   f01158af <CB>
f0111750:	83 c4 10             	add    $0x10,%esp
f0111753:	85 c0                	test   %eax,%eax
f0111755:	0f 84 f6 00 00 00    	je     f0111851 <test_cut_paste_pages+0x3c5>
f011175b:	83 ec 04             	sub    $0x4,%esp
f011175e:	6a 00                	push   $0x0
f0111760:	68 00 10 90 02       	push   $0x2901000
f0111765:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111768:	e8 42 41 00 00       	call   f01158af <CB>
f011176d:	83 c4 10             	add    $0x10,%esp
f0111770:	85 c0                	test   %eax,%eax
f0111772:	0f 84 d9 00 00 00    	je     f0111851 <test_cut_paste_pages+0x3c5>
f0111778:	83 ec 04             	sub    $0x4,%esp
f011177b:	6a 00                	push   $0x0
f011177d:	68 00 20 90 02       	push   $0x2902000
f0111782:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111785:	e8 25 41 00 00       	call   f01158af <CB>
f011178a:	83 c4 10             	add    $0x10,%esp
f011178d:	85 c0                	test   %eax,%eax
f011178f:	0f 84 bc 00 00 00    	je     f0111851 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0111795:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011179c:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01117a3:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01117aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01117ad:	8a 00                	mov    (%eax),%al
f01117af:	3c 61                	cmp    $0x61,%al
f01117b1:	75 12                	jne    f01117c5 <test_cut_paste_pages+0x339>
f01117b3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117b6:	8a 00                	mov    (%eax),%al
f01117b8:	3c 62                	cmp    $0x62,%al
f01117ba:	75 09                	jne    f01117c5 <test_cut_paste_pages+0x339>
f01117bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117bf:	8a 00                	mov    (%eax),%al
f01117c1:	3c 63                	cmp    $0x63,%al
f01117c3:	74 21                	je     f01117e6 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01117c5:	83 ec 04             	sub    $0x4,%esp
f01117c8:	68 1c 8e 13 f0       	push   $0xf0138e1c
f01117cd:	68 a6 01 00 00       	push   $0x1a6
f01117d2:	68 3e 85 13 f0       	push   $0xf013853e
f01117d7:	e8 ab eb fe ff       	call   f0100387 <_warn>
f01117dc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01117df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01117e6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117ea:	74 04                	je     f01117f0 <test_cut_paste_pages+0x364>
f01117ec:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01117f0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01117f7:	83 ec 04             	sub    $0x4,%esp
f01117fa:	6a 01                	push   $0x1
f01117fc:	68 00 10 90 02       	push   $0x2901000
f0111801:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111804:	e8 a6 40 00 00       	call   f01158af <CB>
f0111809:	83 c4 10             	add    $0x10,%esp
f011180c:	85 c0                	test   %eax,%eax
f011180e:	74 41                	je     f0111851 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111810:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111813:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0111816:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111819:	8a 00                	mov    (%eax),%al
f011181b:	3c 79                	cmp    $0x79,%al
f011181d:	74 21                	je     f0111840 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011181f:	83 ec 04             	sub    $0x4,%esp
f0111822:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111827:	68 b1 01 00 00       	push   $0x1b1
f011182c:	68 3e 85 13 f0       	push   $0xf013853e
f0111831:	e8 51 eb fe ff       	call   f0100387 <_warn>
f0111836:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0111839:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111840:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111844:	74 04                	je     f011184a <test_cut_paste_pages+0x3be>
f0111846:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011184a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111851:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111854:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0111857:	6a 02                	push   $0x2
f0111859:	68 00 f0 bf 02       	push   $0x2bff000
f011185e:	68 00 10 90 02       	push   $0x2901000
f0111863:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111866:	e8 55 6e ff ff       	call   f01086c0 <cut_paste_pages>
f011186b:	83 c4 10             	add    $0x10,%esp
f011186e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111871:	e8 53 b0 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111876:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0111879:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011187d:	75 0b                	jne    f011188a <test_cut_paste_pages+0x3fe>
f011187f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111882:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111885:	83 f8 01             	cmp    $0x1,%eax
f0111888:	74 2b                	je     f01118b5 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011188a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011188d:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111890:	83 ec 0c             	sub    $0xc,%esp
f0111893:	50                   	push   %eax
f0111894:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111897:	68 7c 8d 13 f0       	push   $0xf0138d7c
f011189c:	68 c2 01 00 00       	push   $0x1c2
f01118a1:	68 3e 85 13 f0       	push   $0xf013853e
f01118a6:	e8 dc ea fe ff       	call   f0100387 <_warn>
f01118ab:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01118ae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01118b5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01118b9:	74 04                	je     f01118bf <test_cut_paste_pages+0x433>
f01118bb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01118bf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01118c6:	83 ec 08             	sub    $0x8,%esp
f01118c9:	6a 00                	push   $0x0
f01118cb:	6a 01                	push   $0x1
f01118cd:	6a 00                	push   $0x0
f01118cf:	68 ff 0f 00 00       	push   $0xfff
f01118d4:	ff 75 bc             	pushl  -0x44(%ebp)
f01118d7:	6a 01                	push   $0x1
f01118d9:	68 00 20 00 00       	push   $0x2000
f01118de:	68 00 f0 bf 02       	push   $0x2bff000
f01118e3:	68 00 10 90 02       	push   $0x2901000
f01118e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118eb:	e8 e3 41 00 00       	call   f0115ad3 <CCP>
f01118f0:	83 c4 30             	add    $0x30,%esp
f01118f3:	83 f8 01             	cmp    $0x1,%eax
f01118f6:	74 21                	je     f0111919 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01118f8:	83 ec 04             	sub    $0x4,%esp
f01118fb:	68 d0 8d 13 f0       	push   $0xf0138dd0
f0111900:	68 ca 01 00 00       	push   $0x1ca
f0111905:	68 3e 85 13 f0       	push   $0xf013853e
f011190a:	e8 78 ea fe ff       	call   f0100387 <_warn>
f011190f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111912:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111919:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011191d:	74 04                	je     f0111923 <test_cut_paste_pages+0x497>
f011191f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111923:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011192a:	83 ec 04             	sub    $0x4,%esp
f011192d:	6a 00                	push   $0x0
f011192f:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111934:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111937:	e8 73 3f 00 00       	call   f01158af <CB>
f011193c:	83 c4 10             	add    $0x10,%esp
f011193f:	85 c0                	test   %eax,%eax
f0111941:	74 6b                	je     f01119ae <test_cut_paste_pages+0x522>
f0111943:	83 ec 04             	sub    $0x4,%esp
f0111946:	6a 00                	push   $0x0
f0111948:	68 ff 0f c0 02       	push   $0x2c00fff
f011194d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111950:	e8 5a 3f 00 00       	call   f01158af <CB>
f0111955:	83 c4 10             	add    $0x10,%esp
f0111958:	85 c0                	test   %eax,%eax
f011195a:	74 52                	je     f01119ae <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f011195c:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111963:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011196a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011196d:	8a 00                	mov    (%eax),%al
f011196f:	3c 79                	cmp    $0x79,%al
f0111971:	75 09                	jne    f011197c <test_cut_paste_pages+0x4f0>
f0111973:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111976:	8a 00                	mov    (%eax),%al
f0111978:	3c 63                	cmp    $0x63,%al
f011197a:	74 21                	je     f011199d <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011197c:	83 ec 04             	sub    $0x4,%esp
f011197f:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111984:	68 d6 01 00 00       	push   $0x1d6
f0111989:	68 3e 85 13 f0       	push   $0xf013853e
f011198e:	e8 f4 e9 fe ff       	call   f0100387 <_warn>
f0111993:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111996:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011199d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01119a1:	74 04                	je     f01119a7 <test_cut_paste_pages+0x51b>
f01119a3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01119a7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01119ae:	83 ec 0c             	sub    $0xc,%esp
f01119b1:	68 55 8e 13 f0       	push   $0xf0138e55
f01119b6:	e8 c7 f2 fe ff       	call   f0100c82 <cprintf>
f01119bb:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01119be:	83 ec 0c             	sub    $0xc,%esp
f01119c1:	68 64 8e 13 f0       	push   $0xf0138e64
f01119c6:	e8 b7 f2 fe ff       	call   f0100c82 <cprintf>
f01119cb:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01119ce:	83 ec 04             	sub    $0x4,%esp
f01119d1:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01119d7:	50                   	push   %eax
f01119d8:	68 8d 8e 13 f0       	push   $0xf0138e8d
f01119dd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01119e3:	50                   	push   %eax
f01119e4:	e8 ad f7 01 00       	call   f0131196 <strcconcat>
f01119e9:	83 c4 10             	add    $0x10,%esp
f01119ec:	83 ec 0c             	sub    $0xc,%esp
f01119ef:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01119f5:	50                   	push   %eax
f01119f6:	e8 e9 f2 fe ff       	call   f0100ce4 <execute_command>
f01119fb:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01119fe:	83 ec 04             	sub    $0x4,%esp
f0111a01:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111a07:	50                   	push   %eax
f0111a08:	68 98 8e 13 f0       	push   $0xf0138e98
f0111a0d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a13:	50                   	push   %eax
f0111a14:	e8 7d f7 01 00       	call   f0131196 <strcconcat>
f0111a19:	83 c4 10             	add    $0x10,%esp
f0111a1c:	83 ec 0c             	sub    $0xc,%esp
f0111a1f:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111a25:	50                   	push   %eax
f0111a26:	e8 b9 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a2b:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111a2e:	83 ec 04             	sub    $0x4,%esp
f0111a31:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111a37:	50                   	push   %eax
f0111a38:	68 a3 8e 13 f0       	push   $0xf0138ea3
f0111a3d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a43:	50                   	push   %eax
f0111a44:	e8 4d f7 01 00       	call   f0131196 <strcconcat>
f0111a49:	83 c4 10             	add    $0x10,%esp
f0111a4c:	83 ec 0c             	sub    $0xc,%esp
f0111a4f:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111a55:	50                   	push   %eax
f0111a56:	e8 89 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a5b:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111a5e:	83 ec 04             	sub    $0x4,%esp
f0111a61:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111a67:	50                   	push   %eax
f0111a68:	68 ae 8e 13 f0       	push   $0xf0138eae
f0111a6d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a73:	50                   	push   %eax
f0111a74:	e8 1d f7 01 00       	call   f0131196 <strcconcat>
f0111a79:	83 c4 10             	add    $0x10,%esp
f0111a7c:	83 ec 0c             	sub    $0xc,%esp
f0111a7f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111a85:	50                   	push   %eax
f0111a86:	e8 59 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a8b:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0111a8e:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0111a95:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111a98:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0111a9b:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0111aa2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111aa5:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0111aa8:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0111aaf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ab2:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111ab5:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111abc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111abf:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0111ac2:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111ac9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111acc:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111acf:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111ad6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ad9:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111adc:	83 ec 08             	sub    $0x8,%esp
f0111adf:	68 00 00 c0 01       	push   $0x1c00000
f0111ae4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ae7:	e8 94 3f 00 00       	call   f0115a80 <GP>
f0111aec:	83 c4 10             	add    $0x10,%esp
f0111aef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111af2:	83 ec 08             	sub    $0x8,%esp
f0111af5:	68 00 00 40 01       	push   $0x1400000
f0111afa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111afd:	e8 7e 3f 00 00       	call   f0115a80 <GP>
f0111b02:	83 c4 10             	add    $0x10,%esp
f0111b05:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0111b08:	e8 bc ad ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111b0d:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111b10:	6a 01                	push   $0x1
f0111b12:	68 00 00 40 01       	push   $0x1400000
f0111b17:	68 00 00 c0 01       	push   $0x1c00000
f0111b1c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b1f:	e8 9c 6b ff ff       	call   f01086c0 <cut_paste_pages>
f0111b24:	83 c4 10             	add    $0x10,%esp
f0111b27:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111b2a:	e8 9a ad ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111b2f:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111b32:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111b36:	75 08                	jne    f0111b40 <test_cut_paste_pages+0x6b4>
f0111b38:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b3b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111b3e:	74 2b                	je     f0111b6b <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111b40:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b43:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111b46:	83 ec 0c             	sub    $0xc,%esp
f0111b49:	50                   	push   %eax
f0111b4a:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111b4d:	68 bc 8e 13 f0       	push   $0xf0138ebc
f0111b52:	68 f9 01 00 00       	push   $0x1f9
f0111b57:	68 3e 85 13 f0       	push   $0xf013853e
f0111b5c:	e8 26 e8 fe ff       	call   f0100387 <_warn>
f0111b61:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111b64:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111b6b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b6f:	74 04                	je     f0111b75 <test_cut_paste_pages+0x6e9>
f0111b71:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111b75:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0111b7c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0111b83:	83 ec 08             	sub    $0x8,%esp
f0111b86:	6a 00                	push   $0x0
f0111b88:	68 ff 0f 00 00       	push   $0xfff
f0111b8d:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111b90:	68 ff 0f 00 00       	push   $0xfff
f0111b95:	ff 75 a0             	pushl  -0x60(%ebp)
f0111b98:	6a 01                	push   $0x1
f0111b9a:	68 00 10 00 00       	push   $0x1000
f0111b9f:	68 00 00 40 01       	push   $0x1400000
f0111ba4:	68 00 00 c0 01       	push   $0x1c00000
f0111ba9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111bac:	e8 22 3f 00 00       	call   f0115ad3 <CCP>
f0111bb1:	83 c4 30             	add    $0x30,%esp
f0111bb4:	83 f8 01             	cmp    $0x1,%eax
f0111bb7:	74 28                	je     f0111be1 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111bb9:	83 ec 04             	sub    $0x4,%esp
f0111bbc:	68 d0 8d 13 f0       	push   $0xf0138dd0
f0111bc1:	68 02 02 00 00       	push   $0x202
f0111bc6:	68 3e 85 13 f0       	push   $0xf013853e
f0111bcb:	e8 b7 e7 fe ff       	call   f0100387 <_warn>
f0111bd0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111bd3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111bda:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111be1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111be5:	74 04                	je     f0111beb <test_cut_paste_pages+0x75f>
f0111be7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111beb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111bf2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111bf6:	0f 84 92 00 00 00    	je     f0111c8e <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111bfc:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111c03:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111c0a:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111c11:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111c18:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111c1f:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111c26:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c29:	8a 00                	mov    (%eax),%al
f0111c2b:	3c 61                	cmp    $0x61,%al
f0111c2d:	75 2d                	jne    f0111c5c <test_cut_paste_pages+0x7d0>
f0111c2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c32:	8a 00                	mov    (%eax),%al
f0111c34:	3c 78                	cmp    $0x78,%al
f0111c36:	75 24                	jne    f0111c5c <test_cut_paste_pages+0x7d0>
f0111c38:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111c3b:	8a 00                	mov    (%eax),%al
f0111c3d:	3c 62                	cmp    $0x62,%al
f0111c3f:	75 1b                	jne    f0111c5c <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111c41:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111c44:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111c46:	3c 79                	cmp    $0x79,%al
f0111c48:	75 12                	jne    f0111c5c <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111c4a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111c4d:	8a 00                	mov    (%eax),%al
f0111c4f:	3c 63                	cmp    $0x63,%al
f0111c51:	75 09                	jne    f0111c5c <test_cut_paste_pages+0x7d0>
f0111c53:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111c56:	8a 00                	mov    (%eax),%al
f0111c58:	3c 7a                	cmp    $0x7a,%al
f0111c5a:	74 21                	je     f0111c7d <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111c5c:	83 ec 04             	sub    $0x4,%esp
f0111c5f:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111c64:	68 14 02 00 00       	push   $0x214
f0111c69:	68 3e 85 13 f0       	push   $0xf013853e
f0111c6e:	e8 14 e7 fe ff       	call   f0100387 <_warn>
f0111c73:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111c76:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111c7d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c81:	74 04                	je     f0111c87 <test_cut_paste_pages+0x7fb>
f0111c83:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111c87:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0111c8e:	e8 36 ac ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111c93:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0111c96:	6a 03                	push   $0x3
f0111c98:	68 00 f0 bf 01       	push   $0x1bff000
f0111c9d:	68 00 00 40 01       	push   $0x1400000
f0111ca2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ca5:	e8 16 6a ff ff       	call   f01086c0 <cut_paste_pages>
f0111caa:	83 c4 10             	add    $0x10,%esp
f0111cad:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111cb0:	e8 14 ac ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0111cb5:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111cb8:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111cbc:	75 08                	jne    f0111cc6 <test_cut_paste_pages+0x83a>
f0111cbe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111cc1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111cc4:	74 2b                	je     f0111cf1 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111cc6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111cc9:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111ccc:	83 ec 0c             	sub    $0xc,%esp
f0111ccf:	50                   	push   %eax
f0111cd0:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111cd3:	68 bc 8e 13 f0       	push   $0xf0138ebc
f0111cd8:	68 23 02 00 00       	push   $0x223
f0111cdd:	68 3e 85 13 f0       	push   $0xf013853e
f0111ce2:	e8 a0 e6 fe ff       	call   f0100387 <_warn>
f0111ce7:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111cea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111cf1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111cf5:	74 04                	je     f0111cfb <test_cut_paste_pages+0x86f>
f0111cf7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111cfb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111d02:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111d09:	83 ec 04             	sub    $0x4,%esp
f0111d0c:	6a 00                	push   $0x0
f0111d0e:	68 00 00 40 01       	push   $0x1400000
f0111d13:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d16:	e8 94 3b 00 00       	call   f01158af <CB>
f0111d1b:	83 c4 10             	add    $0x10,%esp
f0111d1e:	83 f8 01             	cmp    $0x1,%eax
f0111d21:	0f 85 80 00 00 00    	jne    f0111da7 <test_cut_paste_pages+0x91b>
f0111d27:	83 ec 04             	sub    $0x4,%esp
f0111d2a:	6a 00                	push   $0x0
f0111d2c:	68 00 10 40 01       	push   $0x1401000
f0111d31:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d34:	e8 76 3b 00 00       	call   f01158af <CB>
f0111d39:	83 c4 10             	add    $0x10,%esp
f0111d3c:	83 f8 01             	cmp    $0x1,%eax
f0111d3f:	75 66                	jne    f0111da7 <test_cut_paste_pages+0x91b>
f0111d41:	83 ec 04             	sub    $0x4,%esp
f0111d44:	6a 00                	push   $0x0
f0111d46:	68 00 20 40 01       	push   $0x1402000
f0111d4b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d4e:	e8 5c 3b 00 00       	call   f01158af <CB>
f0111d53:	83 c4 10             	add    $0x10,%esp
f0111d56:	83 f8 01             	cmp    $0x1,%eax
f0111d59:	75 4c                	jne    f0111da7 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111d5b:	83 ec 04             	sub    $0x4,%esp
f0111d5e:	6a 00                	push   $0x0
f0111d60:	68 00 f0 bf 01       	push   $0x1bff000
f0111d65:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d68:	e8 42 3b 00 00       	call   f01158af <CB>
f0111d6d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111d70:	85 c0                	test   %eax,%eax
f0111d72:	75 33                	jne    f0111da7 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111d74:	83 ec 04             	sub    $0x4,%esp
f0111d77:	6a 00                	push   $0x0
f0111d79:	68 00 00 c0 01       	push   $0x1c00000
f0111d7e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d81:	e8 29 3b 00 00       	call   f01158af <CB>
f0111d86:	83 c4 10             	add    $0x10,%esp
f0111d89:	83 f8 01             	cmp    $0x1,%eax
f0111d8c:	75 19                	jne    f0111da7 <test_cut_paste_pages+0x91b>
f0111d8e:	83 ec 04             	sub    $0x4,%esp
f0111d91:	6a 00                	push   $0x0
f0111d93:	68 00 10 c0 01       	push   $0x1c01000
f0111d98:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d9b:	e8 0f 3b 00 00       	call   f01158af <CB>
f0111da0:	83 c4 10             	add    $0x10,%esp
f0111da3:	85 c0                	test   %eax,%eax
f0111da5:	74 28                	je     f0111dcf <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0111da7:	83 ec 04             	sub    $0x4,%esp
f0111daa:	68 1c 8f 13 f0       	push   $0xf0138f1c
f0111daf:	68 2c 02 00 00       	push   $0x22c
f0111db4:	68 3e 85 13 f0       	push   $0xf013853e
f0111db9:	e8 c9 e5 fe ff       	call   f0100387 <_warn>
f0111dbe:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111dc1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111dc8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111dcf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111dd3:	74 04                	je     f0111dd9 <test_cut_paste_pages+0x94d>
f0111dd5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111dd9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111de0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111de4:	0f 84 99 00 00 00    	je     f0111e83 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0111dea:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111df1:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111df8:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111dff:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111e06:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111e0d:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111e14:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e17:	8a 00                	mov    (%eax),%al
f0111e19:	3c 61                	cmp    $0x61,%al
f0111e1b:	75 2d                	jne    f0111e4a <test_cut_paste_pages+0x9be>
f0111e1d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e20:	8a 00                	mov    (%eax),%al
f0111e22:	3c 78                	cmp    $0x78,%al
f0111e24:	75 24                	jne    f0111e4a <test_cut_paste_pages+0x9be>
f0111e26:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e29:	8a 00                	mov    (%eax),%al
f0111e2b:	3c 62                	cmp    $0x62,%al
f0111e2d:	75 1b                	jne    f0111e4a <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111e2f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111e32:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111e34:	3c 79                	cmp    $0x79,%al
f0111e36:	75 12                	jne    f0111e4a <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111e38:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111e3b:	8a 00                	mov    (%eax),%al
f0111e3d:	3c 63                	cmp    $0x63,%al
f0111e3f:	75 09                	jne    f0111e4a <test_cut_paste_pages+0x9be>
f0111e41:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111e44:	8a 00                	mov    (%eax),%al
f0111e46:	3c 7a                	cmp    $0x7a,%al
f0111e48:	74 28                	je     f0111e72 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0111e4a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111e51:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111e58:	83 ec 04             	sub    $0x4,%esp
f0111e5b:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111e60:	68 40 02 00 00       	push   $0x240
f0111e65:	68 3e 85 13 f0       	push   $0xf013853e
f0111e6a:	e8 18 e5 fe ff       	call   f0100387 <_warn>
f0111e6f:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111e72:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e76:	74 04                	je     f0111e7c <test_cut_paste_pages+0x9f0>
f0111e78:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e7c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0111e83:	83 ec 0c             	sub    $0xc,%esp
f0111e86:	68 55 8f 13 f0       	push   $0xf0138f55
f0111e8b:	e8 f2 ed fe ff       	call   f0100c82 <cprintf>
f0111e90:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0111e93:	83 ec 08             	sub    $0x8,%esp
f0111e96:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111e99:	68 64 8f 13 f0       	push   $0xf0138f64
f0111e9e:	e8 df ed fe ff       	call   f0100c82 <cprintf>
f0111ea3:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0111ea6:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0111eaa:	75 10                	jne    f0111ebc <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0111eac:	83 ec 0c             	sub    $0xc,%esp
f0111eaf:	68 98 8f 13 f0       	push   $0xf0138f98
f0111eb4:	e8 c9 ed fe ff       	call   f0100c82 <cprintf>
f0111eb9:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0111ebc:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0111ec1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111ec4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111ec7:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0111eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ecf:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111ed2:	5b                   	pop    %ebx
f0111ed3:	5e                   	pop    %esi
f0111ed4:	5f                   	pop    %edi
f0111ed5:	5d                   	pop    %ebp
f0111ed6:	c3                   	ret    

f0111ed7 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0111ed7:	55                   	push   %ebp
f0111ed8:	89 e5                	mov    %esp,%ebp
f0111eda:	57                   	push   %edi
f0111edb:	56                   	push   %esi
f0111edc:	53                   	push   %ebx
f0111edd:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111ee3:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111ee9:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0111eee:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ef3:	89 c7                	mov    %eax,%edi
f0111ef5:	89 de                	mov    %ebx,%esi
f0111ef7:	89 d1                	mov    %edx,%ecx
f0111ef9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111efb:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111f01:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111f06:	b0 00                	mov    $0x0,%al
f0111f08:	89 d7                	mov    %edx,%edi
f0111f0a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111f0c:	6a 00                	push   $0x0
f0111f0e:	6a 0a                	push   $0xa
f0111f10:	6a 14                	push   $0x14
f0111f12:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111f18:	50                   	push   %eax
f0111f19:	e8 4b 6d ff ff       	call   f0108c69 <env_create>
f0111f1e:	83 c4 10             	add    $0x10,%esp
f0111f21:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111f24:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f27:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111f2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111f2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f30:	8b 40 60             	mov    0x60(%eax),%eax
f0111f33:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0111f39:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111f3f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111f42:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0111f49:	75 70 20 
f0111f4c:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111f53:	00 00 00 
f0111f56:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111f5c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111f61:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f66:	89 d7                	mov    %edx,%edi
f0111f68:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111f6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f6d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111f70:	83 ec 08             	sub    $0x8,%esp
f0111f73:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0111f79:	52                   	push   %edx
f0111f7a:	50                   	push   %eax
f0111f7b:	e8 1e f1 01 00       	call   f013109e <ltostr>
f0111f80:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111f83:	83 ec 04             	sub    $0x4,%esp
f0111f86:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f8c:	50                   	push   %eax
f0111f8d:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0111f93:	50                   	push   %eax
f0111f94:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0111f9a:	50                   	push   %eax
f0111f9b:	e8 f6 f1 01 00       	call   f0131196 <strcconcat>
f0111fa0:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0111fa3:	83 ec 0c             	sub    $0xc,%esp
f0111fa6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111fa9:	e8 f1 3a 00 00       	call   f0115a9f <ClearUserSpace>
f0111fae:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0111fb1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0111fb8:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0111fbf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0111fc6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0111fcd:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0111fd4:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0111fdb:	83 ec 0c             	sub    $0xc,%esp
f0111fde:	68 0c 90 13 f0       	push   $0xf013900c
f0111fe3:	e8 9a ec fe ff       	call   f0100c82 <cprintf>
f0111fe8:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0111feb:	83 ec 04             	sub    $0x4,%esp
f0111fee:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111ff4:	50                   	push   %eax
f0111ff5:	68 42 90 13 f0       	push   $0xf0139042
f0111ffa:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112000:	50                   	push   %eax
f0112001:	e8 90 f1 01 00       	call   f0131196 <strcconcat>
f0112006:	83 c4 10             	add    $0x10,%esp
f0112009:	83 ec 0c             	sub    $0xc,%esp
f011200c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112012:	50                   	push   %eax
f0112013:	e8 cc ec fe ff       	call   f0100ce4 <execute_command>
f0112018:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f011201b:	83 ec 04             	sub    $0x4,%esp
f011201e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112024:	50                   	push   %eax
f0112025:	68 47 90 13 f0       	push   $0xf0139047
f011202a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112030:	50                   	push   %eax
f0112031:	e8 60 f1 01 00       	call   f0131196 <strcconcat>
f0112036:	83 c4 10             	add    $0x10,%esp
f0112039:	83 ec 0c             	sub    $0xc,%esp
f011203c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112042:	50                   	push   %eax
f0112043:	e8 9c ec fe ff       	call   f0100ce4 <execute_command>
f0112048:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f011204b:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112051:	bb 4d 93 13 f0       	mov    $0xf013934d,%ebx
f0112056:	ba 0f 00 00 00       	mov    $0xf,%edx
f011205b:	89 c7                	mov    %eax,%edi
f011205d:	89 de                	mov    %ebx,%esi
f011205f:	89 d1                	mov    %edx,%ecx
f0112061:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112063:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112069:	b9 55 00 00 00       	mov    $0x55,%ecx
f011206e:	b0 00                	mov    $0x0,%al
f0112070:	89 d7                	mov    %edx,%edi
f0112072:	f3 aa                	rep stos %al,%es:(%edi)
f0112074:	83 ec 0c             	sub    $0xc,%esp
f0112077:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011207d:	50                   	push   %eax
f011207e:	e8 61 ec fe ff       	call   f0100ce4 <execute_command>
f0112083:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112086:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011208c:	bb b1 93 13 f0       	mov    $0xf01393b1,%ebx
f0112091:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112096:	89 c7                	mov    %eax,%edi
f0112098:	89 de                	mov    %ebx,%esi
f011209a:	89 d1                	mov    %edx,%ecx
f011209c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011209e:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01120a4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01120a9:	b0 00                	mov    $0x0,%al
f01120ab:	89 d7                	mov    %edx,%edi
f01120ad:	f3 aa                	rep stos %al,%es:(%edi)
f01120af:	83 ec 0c             	sub    $0xc,%esp
f01120b2:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01120b8:	50                   	push   %eax
f01120b9:	e8 26 ec fe ff       	call   f0100ce4 <execute_command>
f01120be:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01120c1:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01120c7:	bb 15 94 13 f0       	mov    $0xf0139415,%ebx
f01120cc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01120d1:	89 c7                	mov    %eax,%edi
f01120d3:	89 de                	mov    %ebx,%esi
f01120d5:	89 d1                	mov    %edx,%ecx
f01120d7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120d9:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01120df:	b9 55 00 00 00       	mov    $0x55,%ecx
f01120e4:	b0 00                	mov    $0x0,%al
f01120e6:	89 d7                	mov    %edx,%edi
f01120e8:	f3 aa                	rep stos %al,%es:(%edi)
f01120ea:	83 ec 0c             	sub    $0xc,%esp
f01120ed:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01120f3:	50                   	push   %eax
f01120f4:	e8 eb eb fe ff       	call   f0100ce4 <execute_command>
f01120f9:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f01120fc:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112102:	bb 79 94 13 f0       	mov    $0xf0139479,%ebx
f0112107:	ba 0f 00 00 00       	mov    $0xf,%edx
f011210c:	89 c7                	mov    %eax,%edi
f011210e:	89 de                	mov    %ebx,%esi
f0112110:	89 d1                	mov    %edx,%ecx
f0112112:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112114:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011211a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011211f:	b0 00                	mov    $0x0,%al
f0112121:	89 d7                	mov    %edx,%edi
f0112123:	f3 aa                	rep stos %al,%es:(%edi)
f0112125:	83 ec 0c             	sub    $0xc,%esp
f0112128:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011212e:	50                   	push   %eax
f011212f:	e8 b0 eb fe ff       	call   f0100ce4 <execute_command>
f0112134:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112137:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011213d:	bb dd 94 13 f0       	mov    $0xf01394dd,%ebx
f0112142:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112147:	89 c7                	mov    %eax,%edi
f0112149:	89 de                	mov    %ebx,%esi
f011214b:	89 d1                	mov    %edx,%ecx
f011214d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011214f:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112155:	b9 55 00 00 00       	mov    $0x55,%ecx
f011215a:	b0 00                	mov    $0x0,%al
f011215c:	89 d7                	mov    %edx,%edi
f011215e:	f3 aa                	rep stos %al,%es:(%edi)
f0112160:	83 ec 0c             	sub    $0xc,%esp
f0112163:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112169:	50                   	push   %eax
f011216a:	e8 75 eb fe ff       	call   f0100ce4 <execute_command>
f011216f:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112172:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112178:	bb 41 95 13 f0       	mov    $0xf0139541,%ebx
f011217d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112182:	89 c7                	mov    %eax,%edi
f0112184:	89 de                	mov    %ebx,%esi
f0112186:	89 d1                	mov    %edx,%ecx
f0112188:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011218a:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112190:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112195:	b0 00                	mov    $0x0,%al
f0112197:	89 d7                	mov    %edx,%edi
f0112199:	f3 aa                	rep stos %al,%es:(%edi)
f011219b:	83 ec 0c             	sub    $0xc,%esp
f011219e:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01121a4:	50                   	push   %eax
f01121a5:	e8 3a eb fe ff       	call   f0100ce4 <execute_command>
f01121aa:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01121ad:	83 ec 04             	sub    $0x4,%esp
f01121b0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121b6:	50                   	push   %eax
f01121b7:	68 4f 90 13 f0       	push   $0xf013904f
f01121bc:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121c2:	50                   	push   %eax
f01121c3:	e8 ce ef 01 00       	call   f0131196 <strcconcat>
f01121c8:	83 c4 10             	add    $0x10,%esp
f01121cb:	83 ec 0c             	sub    $0xc,%esp
f01121ce:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121d4:	50                   	push   %eax
f01121d5:	e8 0a eb fe ff       	call   f0100ce4 <execute_command>
f01121da:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01121dd:	83 ec 04             	sub    $0x4,%esp
f01121e0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121e6:	50                   	push   %eax
f01121e7:	68 59 90 13 f0       	push   $0xf0139059
f01121ec:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121f2:	50                   	push   %eax
f01121f3:	e8 9e ef 01 00       	call   f0131196 <strcconcat>
f01121f8:	83 c4 10             	add    $0x10,%esp
f01121fb:	83 ec 0c             	sub    $0xc,%esp
f01121fe:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112204:	50                   	push   %eax
f0112205:	e8 da ea fe ff       	call   f0100ce4 <execute_command>
f011220a:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011220d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112213:	bb a5 95 13 f0       	mov    $0xf01395a5,%ebx
f0112218:	ba 0f 00 00 00       	mov    $0xf,%edx
f011221d:	89 c7                	mov    %eax,%edi
f011221f:	89 de                	mov    %ebx,%esi
f0112221:	89 d1                	mov    %edx,%ecx
f0112223:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112225:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011222b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112230:	b0 00                	mov    $0x0,%al
f0112232:	89 d7                	mov    %edx,%edi
f0112234:	f3 aa                	rep stos %al,%es:(%edi)
f0112236:	83 ec 0c             	sub    $0xc,%esp
f0112239:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011223f:	50                   	push   %eax
f0112240:	e8 9f ea fe ff       	call   f0100ce4 <execute_command>
f0112245:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112248:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011224e:	bb 09 96 13 f0       	mov    $0xf0139609,%ebx
f0112253:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112258:	89 c7                	mov    %eax,%edi
f011225a:	89 de                	mov    %ebx,%esi
f011225c:	89 d1                	mov    %edx,%ecx
f011225e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112260:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112266:	b9 55 00 00 00       	mov    $0x55,%ecx
f011226b:	b0 00                	mov    $0x0,%al
f011226d:	89 d7                	mov    %edx,%edi
f011226f:	f3 aa                	rep stos %al,%es:(%edi)
f0112271:	83 ec 0c             	sub    $0xc,%esp
f0112274:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011227a:	50                   	push   %eax
f011227b:	e8 64 ea fe ff       	call   f0100ce4 <execute_command>
f0112280:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112283:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112289:	bb 6d 96 13 f0       	mov    $0xf013966d,%ebx
f011228e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112293:	89 c7                	mov    %eax,%edi
f0112295:	89 de                	mov    %ebx,%esi
f0112297:	89 d1                	mov    %edx,%ecx
f0112299:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011229b:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01122a1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122a6:	b0 00                	mov    $0x0,%al
f01122a8:	89 d7                	mov    %edx,%edi
f01122aa:	f3 aa                	rep stos %al,%es:(%edi)
f01122ac:	83 ec 0c             	sub    $0xc,%esp
f01122af:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01122b5:	50                   	push   %eax
f01122b6:	e8 29 ea fe ff       	call   f0100ce4 <execute_command>
f01122bb:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01122be:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01122c5:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01122cc:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01122d3:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01122da:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01122e1:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01122e8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01122ef:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01122f6:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01122fd:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112304:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011230b:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112312:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112315:	8a 00                	mov    (%eax),%al
f0112317:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011231d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112320:	8a 00                	mov    (%eax),%al
f0112322:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112328:	8b 45 90             	mov    -0x70(%ebp),%eax
f011232b:	8a 00                	mov    (%eax),%al
f011232d:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112333:	e8 91 a5 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112338:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011233b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011233e:	89 d0                	mov    %edx,%eax
f0112340:	01 c0                	add    %eax,%eax
f0112342:	01 d0                	add    %edx,%eax
f0112344:	01 c0                	add    %eax,%eax
f0112346:	50                   	push   %eax
f0112347:	68 00 00 10 00       	push   $0x100000
f011234c:	6a 00                	push   $0x0
f011234e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112351:	e8 e8 64 ff ff       	call   f010883e <copy_paste_chunk>
f0112356:	83 c4 10             	add    $0x10,%esp
f0112359:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011235c:	e8 68 a5 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112361:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112364:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011236b:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f011236f:	75 08                	jne    f0112379 <test_copy_paste_chunk+0x4a2>
f0112371:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112374:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112377:	74 2b                	je     f01123a4 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112379:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011237c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011237f:	83 ec 0c             	sub    $0xc,%esp
f0112382:	50                   	push   %eax
f0112383:	ff 75 88             	pushl  -0x78(%ebp)
f0112386:	68 68 90 13 f0       	push   $0xf0139068
f011238b:	68 93 02 00 00       	push   $0x293
f0112390:	68 3e 85 13 f0       	push   $0xf013853e
f0112395:	e8 ed df fe ff       	call   f0100387 <_warn>
f011239a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011239d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01123a4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123a8:	74 04                	je     f01123ae <test_copy_paste_chunk+0x4d7>
f01123aa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01123ae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01123b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01123b8:	8a 00                	mov    (%eax),%al
f01123ba:	3c 61                	cmp    $0x61,%al
f01123bc:	75 75                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f01123be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01123c1:	8a 00                	mov    (%eax),%al
f01123c3:	3c 78                	cmp    $0x78,%al
f01123c5:	75 6c                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f01123c7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01123ca:	8a 00                	mov    (%eax),%al
f01123cc:	3c 62                	cmp    $0x62,%al
f01123ce:	75 63                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f01123d0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01123d3:	8a 00                	mov    (%eax),%al
f01123d5:	3c 79                	cmp    $0x79,%al
f01123d7:	75 5a                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f01123d9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01123dc:	8a 00                	mov    (%eax),%al
f01123de:	3c 63                	cmp    $0x63,%al
f01123e0:	75 51                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f01123e2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01123e5:	8a 00                	mov    (%eax),%al
f01123e7:	3c 7a                	cmp    $0x7a,%al
f01123e9:	75 48                	jne    f0112433 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01123eb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01123ee:	8a 00                	mov    (%eax),%al
f01123f0:	3c 64                	cmp    $0x64,%al
f01123f2:	75 3f                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f01123f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01123f7:	8a 10                	mov    (%eax),%dl
f01123f9:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01123ff:	38 c2                	cmp    %al,%dl
f0112401:	75 30                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f0112403:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112406:	8a 00                	mov    (%eax),%al
f0112408:	3c 65                	cmp    $0x65,%al
f011240a:	75 27                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f011240c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011240f:	8a 10                	mov    (%eax),%dl
f0112411:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112417:	38 c2                	cmp    %al,%dl
f0112419:	75 18                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f011241b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011241e:	8a 00                	mov    (%eax),%al
f0112420:	3c 66                	cmp    $0x66,%al
f0112422:	75 0f                	jne    f0112433 <test_copy_paste_chunk+0x55c>
f0112424:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112427:	8a 10                	mov    (%eax),%dl
f0112429:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011242f:	38 c2                	cmp    %al,%dl
f0112431:	74 21                	je     f0112454 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112433:	83 ec 04             	sub    $0x4,%esp
f0112436:	68 cc 90 13 f0       	push   $0xf01390cc
f011243b:	68 9c 02 00 00       	push   $0x29c
f0112440:	68 3e 85 13 f0       	push   $0xf013853e
f0112445:	e8 3d df fe ff       	call   f0100387 <_warn>
f011244a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011244d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112454:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112458:	74 04                	je     f011245e <test_copy_paste_chunk+0x587>
f011245a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011245e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112465:	83 ec 0c             	sub    $0xc,%esp
f0112468:	68 06 91 13 f0       	push   $0xf0139106
f011246d:	e8 10 e8 fe ff       	call   f0100c82 <cprintf>
f0112472:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112475:	83 ec 0c             	sub    $0xc,%esp
f0112478:	68 18 91 13 f0       	push   $0xf0139118
f011247d:	e8 00 e8 fe ff       	call   f0100c82 <cprintf>
f0112482:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112485:	83 ec 04             	sub    $0x4,%esp
f0112488:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011248e:	50                   	push   %eax
f011248f:	68 4e 91 13 f0       	push   $0xf013914e
f0112494:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011249a:	50                   	push   %eax
f011249b:	e8 f6 ec 01 00       	call   f0131196 <strcconcat>
f01124a0:	83 c4 10             	add    $0x10,%esp
f01124a3:	83 ec 0c             	sub    $0xc,%esp
f01124a6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01124ac:	50                   	push   %eax
f01124ad:	e8 32 e8 fe ff       	call   f0100ce4 <execute_command>
f01124b2:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01124b5:	83 ec 04             	sub    $0x4,%esp
f01124b8:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01124be:	50                   	push   %eax
f01124bf:	68 58 91 13 f0       	push   $0xf0139158
f01124c4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01124ca:	50                   	push   %eax
f01124cb:	e8 c6 ec 01 00       	call   f0131196 <strcconcat>
f01124d0:	83 c4 10             	add    $0x10,%esp
f01124d3:	83 ec 0c             	sub    $0xc,%esp
f01124d6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01124dc:	50                   	push   %eax
f01124dd:	e8 02 e8 fe ff       	call   f0100ce4 <execute_command>
f01124e2:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01124e5:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01124eb:	bb d1 96 13 f0       	mov    $0xf01396d1,%ebx
f01124f0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01124f5:	89 c7                	mov    %eax,%edi
f01124f7:	89 de                	mov    %ebx,%esi
f01124f9:	89 d1                	mov    %edx,%ecx
f01124fb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01124fd:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112503:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112508:	b0 00                	mov    $0x0,%al
f011250a:	89 d7                	mov    %edx,%edi
f011250c:	f3 aa                	rep stos %al,%es:(%edi)
f011250e:	83 ec 0c             	sub    $0xc,%esp
f0112511:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112517:	50                   	push   %eax
f0112518:	e8 c7 e7 fe ff       	call   f0100ce4 <execute_command>
f011251d:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112520:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112526:	bb 35 97 13 f0       	mov    $0xf0139735,%ebx
f011252b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112530:	89 c7                	mov    %eax,%edi
f0112532:	89 de                	mov    %ebx,%esi
f0112534:	89 d1                	mov    %edx,%ecx
f0112536:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112538:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011253e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112543:	b0 00                	mov    $0x0,%al
f0112545:	89 d7                	mov    %edx,%edi
f0112547:	f3 aa                	rep stos %al,%es:(%edi)
f0112549:	83 ec 0c             	sub    $0xc,%esp
f011254c:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112552:	50                   	push   %eax
f0112553:	e8 8c e7 fe ff       	call   f0100ce4 <execute_command>
f0112558:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011255b:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112561:	bb 99 97 13 f0       	mov    $0xf0139799,%ebx
f0112566:	ba 0f 00 00 00       	mov    $0xf,%edx
f011256b:	89 c7                	mov    %eax,%edi
f011256d:	89 de                	mov    %ebx,%esi
f011256f:	89 d1                	mov    %edx,%ecx
f0112571:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112573:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112579:	b9 55 00 00 00       	mov    $0x55,%ecx
f011257e:	b0 00                	mov    $0x0,%al
f0112580:	89 d7                	mov    %edx,%edi
f0112582:	f3 aa                	rep stos %al,%es:(%edi)
f0112584:	83 ec 0c             	sub    $0xc,%esp
f0112587:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011258d:	50                   	push   %eax
f011258e:	e8 51 e7 fe ff       	call   f0100ce4 <execute_command>
f0112593:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112596:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011259c:	bb fd 97 13 f0       	mov    $0xf01397fd,%ebx
f01125a1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125a6:	89 c7                	mov    %eax,%edi
f01125a8:	89 de                	mov    %ebx,%esi
f01125aa:	89 d1                	mov    %edx,%ecx
f01125ac:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125ae:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01125b4:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125b9:	b0 00                	mov    $0x0,%al
f01125bb:	89 d7                	mov    %edx,%edi
f01125bd:	f3 aa                	rep stos %al,%es:(%edi)
f01125bf:	83 ec 0c             	sub    $0xc,%esp
f01125c2:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01125c8:	50                   	push   %eax
f01125c9:	e8 16 e7 fe ff       	call   f0100ce4 <execute_command>
f01125ce:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01125d1:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01125d7:	bb 61 98 13 f0       	mov    $0xf0139861,%ebx
f01125dc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125e1:	89 c7                	mov    %eax,%edi
f01125e3:	89 de                	mov    %ebx,%esi
f01125e5:	89 d1                	mov    %edx,%ecx
f01125e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125e9:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01125ef:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125f4:	b0 00                	mov    $0x0,%al
f01125f6:	89 d7                	mov    %edx,%edi
f01125f8:	f3 aa                	rep stos %al,%es:(%edi)
f01125fa:	83 ec 0c             	sub    $0xc,%esp
f01125fd:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112603:	50                   	push   %eax
f0112604:	e8 db e6 fe ff       	call   f0100ce4 <execute_command>
f0112609:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011260c:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112612:	bb c5 98 13 f0       	mov    $0xf01398c5,%ebx
f0112617:	ba 0f 00 00 00       	mov    $0xf,%edx
f011261c:	89 c7                	mov    %eax,%edi
f011261e:	89 de                	mov    %ebx,%esi
f0112620:	89 d1                	mov    %edx,%ecx
f0112622:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112624:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011262a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011262f:	b0 00                	mov    $0x0,%al
f0112631:	89 d7                	mov    %edx,%edi
f0112633:	f3 aa                	rep stos %al,%es:(%edi)
f0112635:	83 ec 0c             	sub    $0xc,%esp
f0112638:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011263e:	50                   	push   %eax
f011263f:	e8 a0 e6 fe ff       	call   f0100ce4 <execute_command>
f0112644:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112647:	83 ec 04             	sub    $0x4,%esp
f011264a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112650:	50                   	push   %eax
f0112651:	68 62 91 13 f0       	push   $0xf0139162
f0112656:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011265c:	50                   	push   %eax
f011265d:	e8 34 eb 01 00       	call   f0131196 <strcconcat>
f0112662:	83 c4 10             	add    $0x10,%esp
f0112665:	83 ec 0c             	sub    $0xc,%esp
f0112668:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011266e:	50                   	push   %eax
f011266f:	e8 70 e6 fe ff       	call   f0100ce4 <execute_command>
f0112674:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0112677:	83 ec 04             	sub    $0x4,%esp
f011267a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112680:	50                   	push   %eax
f0112681:	68 6c 91 13 f0       	push   $0xf013916c
f0112686:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011268c:	50                   	push   %eax
f011268d:	e8 04 eb 01 00       	call   f0131196 <strcconcat>
f0112692:	83 c4 10             	add    $0x10,%esp
f0112695:	83 ec 0c             	sub    $0xc,%esp
f0112698:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011269e:	50                   	push   %eax
f011269f:	e8 40 e6 fe ff       	call   f0100ce4 <execute_command>
f01126a4:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01126a7:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01126ad:	bb 29 99 13 f0       	mov    $0xf0139929,%ebx
f01126b2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126b7:	89 c7                	mov    %eax,%edi
f01126b9:	89 de                	mov    %ebx,%esi
f01126bb:	89 d1                	mov    %edx,%ecx
f01126bd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126bf:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01126c5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126ca:	b0 00                	mov    $0x0,%al
f01126cc:	89 d7                	mov    %edx,%edi
f01126ce:	f3 aa                	rep stos %al,%es:(%edi)
f01126d0:	83 ec 0c             	sub    $0xc,%esp
f01126d3:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01126d9:	50                   	push   %eax
f01126da:	e8 05 e6 fe ff       	call   f0100ce4 <execute_command>
f01126df:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01126e2:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01126e8:	bb 8d 99 13 f0       	mov    $0xf013998d,%ebx
f01126ed:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126f2:	89 c7                	mov    %eax,%edi
f01126f4:	89 de                	mov    %ebx,%esi
f01126f6:	89 d1                	mov    %edx,%ecx
f01126f8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126fa:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112700:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112705:	b0 00                	mov    $0x0,%al
f0112707:	89 d7                	mov    %edx,%edi
f0112709:	f3 aa                	rep stos %al,%es:(%edi)
f011270b:	83 ec 0c             	sub    $0xc,%esp
f011270e:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112714:	50                   	push   %eax
f0112715:	e8 ca e5 fe ff       	call   f0100ce4 <execute_command>
f011271a:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011271d:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112723:	bb f1 99 13 f0       	mov    $0xf01399f1,%ebx
f0112728:	ba 0f 00 00 00       	mov    $0xf,%edx
f011272d:	89 c7                	mov    %eax,%edi
f011272f:	89 de                	mov    %ebx,%esi
f0112731:	89 d1                	mov    %edx,%ecx
f0112733:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112735:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011273b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112740:	b0 00                	mov    $0x0,%al
f0112742:	89 d7                	mov    %edx,%edi
f0112744:	f3 aa                	rep stos %al,%es:(%edi)
f0112746:	83 ec 0c             	sub    $0xc,%esp
f0112749:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011274f:	50                   	push   %eax
f0112750:	e8 8f e5 fe ff       	call   f0100ce4 <execute_command>
f0112755:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0112758:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011275f:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112766:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f011276d:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0112774:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f011277b:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112782:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0112789:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112790:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0112797:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f011279e:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01127a5:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01127ac:	8b 45 90             	mov    -0x70(%ebp),%eax
f01127af:	8a 00                	mov    (%eax),%al
f01127b1:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01127b7:	e8 0d a1 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01127bc:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01127bf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01127c2:	89 d0                	mov    %edx,%eax
f01127c4:	01 c0                	add    %eax,%eax
f01127c6:	01 d0                	add    %edx,%eax
f01127c8:	01 c0                	add    %eax,%eax
f01127ca:	50                   	push   %eax
f01127cb:	68 00 00 40 00       	push   $0x400000
f01127d0:	68 00 00 20 00       	push   $0x200000
f01127d5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127d8:	e8 61 60 ff ff       	call   f010883e <copy_paste_chunk>
f01127dd:	83 c4 10             	add    $0x10,%esp
f01127e0:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01127e3:	e8 e1 a0 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01127e8:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01127eb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01127f2:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01127f6:	75 08                	jne    f0112800 <test_copy_paste_chunk+0x929>
f01127f8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01127fb:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01127fe:	74 2b                	je     f011282b <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112800:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112803:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112806:	83 ec 0c             	sub    $0xc,%esp
f0112809:	50                   	push   %eax
f011280a:	ff 75 80             	pushl  -0x80(%ebp)
f011280d:	68 78 91 13 f0       	push   $0xf0139178
f0112812:	68 cc 02 00 00       	push   $0x2cc
f0112817:	68 3e 85 13 f0       	push   $0xf013853e
f011281c:	e8 66 db fe ff       	call   f0100387 <_warn>
f0112821:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112824:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011282b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011282f:	74 04                	je     f0112835 <test_copy_paste_chunk+0x95e>
f0112831:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112835:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011283c:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112843:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112846:	83 ec 08             	sub    $0x8,%esp
f0112849:	6a 01                	push   $0x1
f011284b:	6a 07                	push   $0x7
f011284d:	6a 07                	push   $0x7
f011284f:	6a 07                	push   $0x7
f0112851:	6a 07                	push   $0x7
f0112853:	6a 01                	push   $0x1
f0112855:	68 00 20 00 00       	push   $0x2000
f011285a:	68 00 00 40 00       	push   $0x400000
f011285f:	68 00 00 20 00       	push   $0x200000
f0112864:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112867:	e8 67 32 00 00       	call   f0115ad3 <CCP>
f011286c:	83 c4 30             	add    $0x30,%esp
f011286f:	83 f8 01             	cmp    $0x1,%eax
f0112872:	74 2b                	je     f011289f <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0112874:	83 ec 04             	sub    $0x4,%esp
f0112877:	68 cc 91 13 f0       	push   $0xf01391cc
f011287c:	68 d5 02 00 00       	push   $0x2d5
f0112881:	68 3e 85 13 f0       	push   $0xf013853e
f0112886:	e8 fc da fe ff       	call   f0100387 <_warn>
f011288b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011288e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0112895:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f011289c:	00 00 00 
		}
		if (correct) eval += 5 ;
f011289f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128a3:	74 04                	je     f01128a9 <test_copy_paste_chunk+0x9d2>
f01128a5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01128a9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01128b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128b3:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01128b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128b9:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01128bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01128bf:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01128c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128c5:	8a 00                	mov    (%eax),%al
f01128c7:	3c 61                	cmp    $0x61,%al
f01128c9:	75 69                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f01128cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128ce:	8a 00                	mov    (%eax),%al
f01128d0:	3c 61                	cmp    $0x61,%al
f01128d2:	75 60                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f01128d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128d7:	8a 00                	mov    (%eax),%al
f01128d9:	3c 79                	cmp    $0x79,%al
f01128db:	75 57                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f01128dd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01128e0:	8a 00                	mov    (%eax),%al
f01128e2:	3c 62                	cmp    $0x62,%al
f01128e4:	75 4e                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f01128e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128e9:	8a 00                	mov    (%eax),%al
f01128eb:	3c 63                	cmp    $0x63,%al
f01128ed:	75 45                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f01128ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128f2:	8a 00                	mov    (%eax),%al
f01128f4:	3c 7a                	cmp    $0x7a,%al
f01128f6:	75 3c                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01128f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01128fb:	8a 00                	mov    (%eax),%al
f01128fd:	3c 77                	cmp    $0x77,%al
f01128ff:	75 33                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f0112901:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112904:	8a 00                	mov    (%eax),%al
f0112906:	3c 64                	cmp    $0x64,%al
f0112908:	75 2a                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f011290a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011290d:	8a 00                	mov    (%eax),%al
f011290f:	3c 65                	cmp    $0x65,%al
f0112911:	75 21                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f0112913:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112916:	8a 00                	mov    (%eax),%al
f0112918:	3c 65                	cmp    $0x65,%al
f011291a:	75 18                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f011291c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011291f:	8a 00                	mov    (%eax),%al
f0112921:	3c 66                	cmp    $0x66,%al
f0112923:	75 0f                	jne    f0112934 <test_copy_paste_chunk+0xa5d>
f0112925:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112928:	8a 10                	mov    (%eax),%dl
f011292a:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112930:	38 c2                	cmp    %al,%dl
f0112932:	74 21                	je     f0112955 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112934:	83 ec 04             	sub    $0x4,%esp
f0112937:	68 cc 90 13 f0       	push   $0xf01390cc
f011293c:	68 e3 02 00 00       	push   $0x2e3
f0112941:	68 3e 85 13 f0       	push   $0xf013853e
f0112946:	e8 3c da fe ff       	call   f0100387 <_warn>
f011294b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011294e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112955:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112959:	74 04                	je     f011295f <test_copy_paste_chunk+0xa88>
f011295b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011295f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0112966:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112969:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011296c:	e8 58 9f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112971:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0112974:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112977:	89 c2                	mov    %eax,%edx
f0112979:	01 d2                	add    %edx,%edx
f011297b:	01 d0                	add    %edx,%eax
f011297d:	50                   	push   %eax
f011297e:	68 00 08 20 00       	push   $0x200800
f0112983:	68 00 08 40 00       	push   $0x400800
f0112988:	ff 75 d4             	pushl  -0x2c(%ebp)
f011298b:	e8 ae 5e ff ff       	call   f010883e <copy_paste_chunk>
f0112990:	83 c4 10             	add    $0x10,%esp
f0112993:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112996:	e8 2e 9f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011299b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011299e:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01129a2:	75 08                	jne    f01129ac <test_copy_paste_chunk+0xad5>
f01129a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01129a7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01129aa:	74 2b                	je     f01129d7 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01129ac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01129af:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01129b2:	83 ec 0c             	sub    $0xc,%esp
f01129b5:	50                   	push   %eax
f01129b6:	ff 75 80             	pushl  -0x80(%ebp)
f01129b9:	68 78 91 13 f0       	push   $0xf0139178
f01129be:	68 f3 02 00 00       	push   $0x2f3
f01129c3:	68 3e 85 13 f0       	push   $0xf013853e
f01129c8:	e8 ba d9 fe ff       	call   f0100387 <_warn>
f01129cd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01129d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01129d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129db:	74 04                	je     f01129e1 <test_copy_paste_chunk+0xb0a>
f01129dd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01129e8:	83 ec 08             	sub    $0x8,%esp
f01129eb:	6a 01                	push   $0x1
f01129ed:	6a 07                	push   $0x7
f01129ef:	6a 07                	push   $0x7
f01129f1:	6a 07                	push   $0x7
f01129f3:	6a 07                	push   $0x7
f01129f5:	6a 01                	push   $0x1
f01129f7:	68 00 20 00 00       	push   $0x2000
f01129fc:	68 00 00 20 00       	push   $0x200000
f0112a01:	68 00 00 40 00       	push   $0x400000
f0112a06:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a09:	e8 c5 30 00 00       	call   f0115ad3 <CCP>
f0112a0e:	83 c4 30             	add    $0x30,%esp
f0112a11:	83 f8 01             	cmp    $0x1,%eax
f0112a14:	74 21                	je     f0112a37 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112a16:	83 ec 04             	sub    $0x4,%esp
f0112a19:	68 18 92 13 f0       	push   $0xf0139218
f0112a1e:	68 fb 02 00 00       	push   $0x2fb
f0112a23:	68 3e 85 13 f0       	push   $0xf013853e
f0112a28:	e8 5a d9 fe ff       	call   f0100387 <_warn>
f0112a2d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a30:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112a37:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a3b:	74 04                	je     f0112a41 <test_copy_paste_chunk+0xb6a>
f0112a3d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a41:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112a48:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a4b:	8a 00                	mov    (%eax),%al
f0112a4d:	3c 61                	cmp    $0x61,%al
f0112a4f:	75 69                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a51:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a54:	8a 00                	mov    (%eax),%al
f0112a56:	3c 61                	cmp    $0x61,%al
f0112a58:	75 60                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a5a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112a5d:	8a 00                	mov    (%eax),%al
f0112a5f:	3c 79                	cmp    $0x79,%al
f0112a61:	75 57                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a63:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112a66:	8a 00                	mov    (%eax),%al
f0112a68:	3c 62                	cmp    $0x62,%al
f0112a6a:	75 4e                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a6c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a6f:	8a 00                	mov    (%eax),%al
f0112a71:	3c 7a                	cmp    $0x7a,%al
f0112a73:	75 45                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a75:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a78:	8a 00                	mov    (%eax),%al
f0112a7a:	3c 7a                	cmp    $0x7a,%al
f0112a7c:	75 3c                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112a7e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a81:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112a83:	3c 64                	cmp    $0x64,%al
f0112a85:	75 33                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112a87:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112a8a:	8a 00                	mov    (%eax),%al
f0112a8c:	3c 64                	cmp    $0x64,%al
f0112a8e:	75 2a                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a90:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a93:	8a 00                	mov    (%eax),%al
f0112a95:	3c 65                	cmp    $0x65,%al
f0112a97:	75 21                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112a99:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a9c:	8a 00                	mov    (%eax),%al
f0112a9e:	3c 78                	cmp    $0x78,%al
f0112aa0:	75 18                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112aa2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112aa5:	8a 00                	mov    (%eax),%al
f0112aa7:	3c 66                	cmp    $0x66,%al
f0112aa9:	75 0f                	jne    f0112aba <test_copy_paste_chunk+0xbe3>
f0112aab:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112aae:	8a 10                	mov    (%eax),%dl
f0112ab0:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112ab6:	38 c2                	cmp    %al,%dl
f0112ab8:	74 21                	je     f0112adb <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112aba:	83 ec 04             	sub    $0x4,%esp
f0112abd:	68 cc 90 13 f0       	push   $0xf01390cc
f0112ac2:	68 04 03 00 00       	push   $0x304
f0112ac7:	68 3e 85 13 f0       	push   $0xf013853e
f0112acc:	e8 b6 d8 fe ff       	call   f0100387 <_warn>
f0112ad1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ad4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112adb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112adf:	74 04                	je     f0112ae5 <test_copy_paste_chunk+0xc0e>
f0112ae1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ae5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112aec:	83 ec 0c             	sub    $0xc,%esp
f0112aef:	68 63 92 13 f0       	push   $0xf0139263
f0112af4:	e8 89 e1 fe ff       	call   f0100c82 <cprintf>
f0112af9:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112afc:	83 ec 0c             	sub    $0xc,%esp
f0112aff:	68 74 92 13 f0       	push   $0xf0139274
f0112b04:	e8 79 e1 fe ff       	call   f0100c82 <cprintf>
f0112b09:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112b0c:	83 ec 04             	sub    $0x4,%esp
f0112b0f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b15:	50                   	push   %eax
f0112b16:	68 a8 92 13 f0       	push   $0xf01392a8
f0112b1b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b21:	50                   	push   %eax
f0112b22:	e8 6f e6 01 00       	call   f0131196 <strcconcat>
f0112b27:	83 c4 10             	add    $0x10,%esp
f0112b2a:	83 ec 0c             	sub    $0xc,%esp
f0112b2d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b33:	50                   	push   %eax
f0112b34:	e8 ab e1 fe ff       	call   f0100ce4 <execute_command>
f0112b39:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112b3c:	83 ec 04             	sub    $0x4,%esp
f0112b3f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b45:	50                   	push   %eax
f0112b46:	68 b2 92 13 f0       	push   $0xf01392b2
f0112b4b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b51:	50                   	push   %eax
f0112b52:	e8 3f e6 01 00       	call   f0131196 <strcconcat>
f0112b57:	83 c4 10             	add    $0x10,%esp
f0112b5a:	83 ec 0c             	sub    $0xc,%esp
f0112b5d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b63:	50                   	push   %eax
f0112b64:	e8 7b e1 fe ff       	call   f0100ce4 <execute_command>
f0112b69:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0112b6c:	83 ec 04             	sub    $0x4,%esp
f0112b6f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b75:	50                   	push   %eax
f0112b76:	68 bc 92 13 f0       	push   $0xf01392bc
f0112b7b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b81:	50                   	push   %eax
f0112b82:	e8 0f e6 01 00       	call   f0131196 <strcconcat>
f0112b87:	83 c4 10             	add    $0x10,%esp
f0112b8a:	83 ec 0c             	sub    $0xc,%esp
f0112b8d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b93:	50                   	push   %eax
f0112b94:	e8 4b e1 fe ff       	call   f0100ce4 <execute_command>
f0112b99:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0112b9c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112ba2:	bb 55 9a 13 f0       	mov    $0xf0139a55,%ebx
f0112ba7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bac:	89 c7                	mov    %eax,%edi
f0112bae:	89 de                	mov    %ebx,%esi
f0112bb0:	89 d1                	mov    %edx,%ecx
f0112bb2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bb4:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112bba:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bbf:	b0 00                	mov    $0x0,%al
f0112bc1:	89 d7                	mov    %edx,%edi
f0112bc3:	f3 aa                	rep stos %al,%es:(%edi)
f0112bc5:	83 ec 0c             	sub    $0xc,%esp
f0112bc8:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bce:	50                   	push   %eax
f0112bcf:	e8 10 e1 fe ff       	call   f0100ce4 <execute_command>
f0112bd4:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0112bd7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112bdd:	bb b9 9a 13 f0       	mov    $0xf0139ab9,%ebx
f0112be2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112be7:	89 c7                	mov    %eax,%edi
f0112be9:	89 de                	mov    %ebx,%esi
f0112beb:	89 d1                	mov    %edx,%ecx
f0112bed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112bef:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112bf5:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bfa:	b0 00                	mov    $0x0,%al
f0112bfc:	89 d7                	mov    %edx,%edi
f0112bfe:	f3 aa                	rep stos %al,%es:(%edi)
f0112c00:	83 ec 0c             	sub    $0xc,%esp
f0112c03:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112c09:	50                   	push   %eax
f0112c0a:	e8 d5 e0 fe ff       	call   f0100ce4 <execute_command>
f0112c0f:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112c12:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c18:	bb 1d 9b 13 f0       	mov    $0xf0139b1d,%ebx
f0112c1d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c22:	89 c7                	mov    %eax,%edi
f0112c24:	89 de                	mov    %ebx,%esi
f0112c26:	89 d1                	mov    %edx,%ecx
f0112c28:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c2a:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112c30:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c35:	b0 00                	mov    $0x0,%al
f0112c37:	89 d7                	mov    %edx,%edi
f0112c39:	f3 aa                	rep stos %al,%es:(%edi)
f0112c3b:	83 ec 0c             	sub    $0xc,%esp
f0112c3e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c44:	50                   	push   %eax
f0112c45:	e8 9a e0 fe ff       	call   f0100ce4 <execute_command>
f0112c4a:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112c4d:	e8 77 9c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112c52:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112c55:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112c58:	89 d0                	mov    %edx,%eax
f0112c5a:	01 c0                	add    %eax,%eax
f0112c5c:	01 d0                	add    %edx,%eax
f0112c5e:	c1 e0 02             	shl    $0x2,%eax
f0112c61:	50                   	push   %eax
f0112c62:	68 00 00 90 00       	push   $0x900000
f0112c67:	68 00 00 80 00       	push   $0x800000
f0112c6c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c6f:	e8 ca 5b ff ff       	call   f010883e <copy_paste_chunk>
f0112c74:	83 c4 10             	add    $0x10,%esp
f0112c77:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112c7d:	e8 47 9c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112c82:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112c85:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112c8c:	75 0b                	jne    f0112c99 <test_copy_paste_chunk+0xdc2>
f0112c8e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c91:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112c94:	83 f8 03             	cmp    $0x3,%eax
f0112c97:	74 2e                	je     f0112cc7 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112c99:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c9c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112c9f:	83 ec 0c             	sub    $0xc,%esp
f0112ca2:	50                   	push   %eax
f0112ca3:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112ca9:	68 78 91 13 f0       	push   $0xf0139178
f0112cae:	68 22 03 00 00       	push   $0x322
f0112cb3:	68 3e 85 13 f0       	push   $0xf013853e
f0112cb8:	e8 ca d6 fe ff       	call   f0100387 <_warn>
f0112cbd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112cc0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112cc7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ccb:	74 04                	je     f0112cd1 <test_copy_paste_chunk+0xdfa>
f0112ccd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cd1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0112cd8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112cdf:	83 ec 08             	sub    $0x8,%esp
f0112ce2:	6a 01                	push   $0x1
f0112ce4:	6a 07                	push   $0x7
f0112ce6:	6a 07                	push   $0x7
f0112ce8:	6a 07                	push   $0x7
f0112cea:	6a 07                	push   $0x7
f0112cec:	6a 01                	push   $0x1
f0112cee:	68 00 30 00 00       	push   $0x3000
f0112cf3:	68 00 00 90 00       	push   $0x900000
f0112cf8:	68 00 00 80 00       	push   $0x800000
f0112cfd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d00:	e8 ce 2d 00 00       	call   f0115ad3 <CCP>
f0112d05:	83 c4 30             	add    $0x30,%esp
f0112d08:	83 f8 01             	cmp    $0x1,%eax
f0112d0b:	74 28                	je     f0112d35 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112d0d:	83 ec 04             	sub    $0x4,%esp
f0112d10:	68 18 92 13 f0       	push   $0xf0139218
f0112d15:	68 2b 03 00 00       	push   $0x32b
f0112d1a:	68 3e 85 13 f0       	push   $0xf013853e
f0112d1f:	e8 63 d6 fe ff       	call   f0100387 <_warn>
f0112d24:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d27:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112d2e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112d35:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d39:	74 04                	je     f0112d3f <test_copy_paste_chunk+0xe68>
f0112d3b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d3f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112d46:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112d4a:	0f 84 9e 00 00 00    	je     f0112dee <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112d50:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0112d57:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112d5e:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112d65:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0112d6c:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0112d73:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0112d7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d7d:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0112d80:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d83:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0112d86:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d89:	8a 00                	mov    (%eax),%al
f0112d8b:	3c 61                	cmp    $0x61,%al
f0112d8d:	75 2d                	jne    f0112dbc <test_copy_paste_chunk+0xee5>
f0112d8f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d92:	8a 00                	mov    (%eax),%al
f0112d94:	3c 61                	cmp    $0x61,%al
f0112d96:	75 24                	jne    f0112dbc <test_copy_paste_chunk+0xee5>
f0112d98:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d9b:	8a 00                	mov    (%eax),%al
f0112d9d:	3c 79                	cmp    $0x79,%al
f0112d9f:	75 1b                	jne    f0112dbc <test_copy_paste_chunk+0xee5>
f0112da1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112da4:	8a 00                	mov    (%eax),%al
f0112da6:	3c 62                	cmp    $0x62,%al
f0112da8:	75 12                	jne    f0112dbc <test_copy_paste_chunk+0xee5>
f0112daa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112dad:	8a 00                	mov    (%eax),%al
f0112daf:	3c 63                	cmp    $0x63,%al
f0112db1:	75 09                	jne    f0112dbc <test_copy_paste_chunk+0xee5>
f0112db3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112db6:	8a 00                	mov    (%eax),%al
f0112db8:	3c 7a                	cmp    $0x7a,%al
f0112dba:	74 21                	je     f0112ddd <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112dbc:	83 ec 04             	sub    $0x4,%esp
f0112dbf:	68 cc 90 13 f0       	push   $0xf01390cc
f0112dc4:	68 3d 03 00 00       	push   $0x33d
f0112dc9:	68 3e 85 13 f0       	push   $0xf013853e
f0112dce:	e8 b4 d5 fe ff       	call   f0100387 <_warn>
f0112dd3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112dd6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112ddd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112de1:	74 04                	je     f0112de7 <test_copy_paste_chunk+0xf10>
f0112de3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0112de7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112dee:	e8 d6 9a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112df3:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112df6:	6a 00                	push   $0x0
f0112df8:	6a 02                	push   $0x2
f0112dfa:	68 00 10 90 00       	push   $0x901000
f0112dff:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e02:	e8 59 2b 00 00       	call   f0115960 <SB>
f0112e07:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0112e0a:	6a 00                	push   $0x0
f0112e0c:	6a 02                	push   $0x2
f0112e0e:	68 00 20 90 00       	push   $0x902000
f0112e13:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e16:	e8 45 2b 00 00       	call   f0115960 <SB>
f0112e1b:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112e1e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112e21:	c1 e0 03             	shl    $0x3,%eax
f0112e24:	50                   	push   %eax
f0112e25:	68 00 f0 bf 00       	push   $0xbff000
f0112e2a:	68 00 10 90 00       	push   $0x901000
f0112e2f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e32:	e8 07 5a ff ff       	call   f010883e <copy_paste_chunk>
f0112e37:	83 c4 10             	add    $0x10,%esp
f0112e3a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e40:	e8 84 9a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0112e45:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112e48:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112e4f:	75 0b                	jne    f0112e5c <test_copy_paste_chunk+0xf85>
f0112e51:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e54:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e57:	83 f8 03             	cmp    $0x3,%eax
f0112e5a:	74 2e                	je     f0112e8a <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112e5c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e5f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e62:	83 ec 0c             	sub    $0xc,%esp
f0112e65:	50                   	push   %eax
f0112e66:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112e6c:	68 78 91 13 f0       	push   $0xf0139178
f0112e71:	68 4d 03 00 00       	push   $0x34d
f0112e76:	68 3e 85 13 f0       	push   $0xf013853e
f0112e7b:	e8 07 d5 fe ff       	call   f0100387 <_warn>
f0112e80:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e83:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112e8a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e8e:	74 04                	je     f0112e94 <test_copy_paste_chunk+0xfbd>
f0112e90:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112e94:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0112e9b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0112ea2:	83 ec 08             	sub    $0x8,%esp
f0112ea5:	6a 01                	push   $0x1
f0112ea7:	6a 07                	push   $0x7
f0112ea9:	6a 03                	push   $0x3
f0112eab:	6a 07                	push   $0x7
f0112ead:	6a 03                	push   $0x3
f0112eaf:	6a 01                	push   $0x1
f0112eb1:	68 00 20 00 00       	push   $0x2000
f0112eb6:	68 00 f0 bf 00       	push   $0xbff000
f0112ebb:	68 00 10 90 00       	push   $0x901000
f0112ec0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ec3:	e8 0b 2c 00 00       	call   f0115ad3 <CCP>
f0112ec8:	83 c4 30             	add    $0x30,%esp
f0112ecb:	83 f8 01             	cmp    $0x1,%eax
f0112ece:	74 28                	je     f0112ef8 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112ed0:	83 ec 04             	sub    $0x4,%esp
f0112ed3:	68 18 92 13 f0       	push   $0xf0139218
f0112ed8:	68 56 03 00 00       	push   $0x356
f0112edd:	68 3e 85 13 f0       	push   $0xf013853e
f0112ee2:	e8 a0 d4 fe ff       	call   f0100387 <_warn>
f0112ee7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112eea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112ef1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0112ef8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112efc:	74 04                	je     f0112f02 <test_copy_paste_chunk+0x102b>
f0112efe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f02:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112f09:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112f0d:	74 72                	je     f0112f81 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112f0f:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112f16:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112f1d:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112f24:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0112f2b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f2e:	8a 00                	mov    (%eax),%al
f0112f30:	3c 62                	cmp    $0x62,%al
f0112f32:	75 1b                	jne    f0112f4f <test_copy_paste_chunk+0x1078>
f0112f34:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f37:	8a 00                	mov    (%eax),%al
f0112f39:	3c 62                	cmp    $0x62,%al
f0112f3b:	75 12                	jne    f0112f4f <test_copy_paste_chunk+0x1078>
f0112f3d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f40:	8a 00                	mov    (%eax),%al
f0112f42:	3c 7a                	cmp    $0x7a,%al
f0112f44:	75 09                	jne    f0112f4f <test_copy_paste_chunk+0x1078>
f0112f46:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112f49:	8a 00                	mov    (%eax),%al
f0112f4b:	3c 7a                	cmp    $0x7a,%al
f0112f4d:	74 21                	je     f0112f70 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112f4f:	83 ec 04             	sub    $0x4,%esp
f0112f52:	68 cc 90 13 f0       	push   $0xf01390cc
f0112f57:	68 62 03 00 00       	push   $0x362
f0112f5c:	68 3e 85 13 f0       	push   $0xf013853e
f0112f61:	e8 21 d4 fe ff       	call   f0100387 <_warn>
f0112f66:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112f69:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112f70:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f74:	74 04                	je     f0112f7a <test_copy_paste_chunk+0x10a3>
f0112f76:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112f7a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112f81:	83 ec 0c             	sub    $0xc,%esp
f0112f84:	68 c6 92 13 f0       	push   $0xf01392c6
f0112f89:	e8 f4 dc fe ff       	call   f0100c82 <cprintf>
f0112f8e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0112f91:	83 ec 08             	sub    $0x8,%esp
f0112f94:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112f97:	68 d8 92 13 f0       	push   $0xf01392d8
f0112f9c:	e8 e1 dc fe ff       	call   f0100c82 <cprintf>
f0112fa1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112fa4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112fa8:	75 10                	jne    f0112fba <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0112faa:	83 ec 0c             	sub    $0xc,%esp
f0112fad:	68 0c 93 13 f0       	push   $0xf013930c
f0112fb2:	e8 cb dc fe ff       	call   f0100c82 <cprintf>
f0112fb7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112fba:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0112fbf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112fc2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112fc5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112fc8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112fcd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112fd0:	5b                   	pop    %ebx
f0112fd1:	5e                   	pop    %esi
f0112fd2:	5f                   	pop    %edi
f0112fd3:	5d                   	pop    %ebp
f0112fd4:	c3                   	ret    

f0112fd5 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0112fd5:	55                   	push   %ebp
f0112fd6:	89 e5                	mov    %esp,%ebp
f0112fd8:	57                   	push   %edi
f0112fd9:	56                   	push   %esi
f0112fda:	53                   	push   %ebx
f0112fdb:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112fe1:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112fe7:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0112fec:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ff1:	89 c7                	mov    %eax,%edi
f0112ff3:	89 de                	mov    %ebx,%esi
f0112ff5:	89 d1                	mov    %edx,%ecx
f0112ff7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ff9:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112fff:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113004:	b0 00                	mov    $0x0,%al
f0113006:	89 d7                	mov    %edx,%edi
f0113008:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011300a:	6a 00                	push   $0x0
f011300c:	6a 0a                	push   $0xa
f011300e:	6a 14                	push   $0x14
f0113010:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113016:	50                   	push   %eax
f0113017:	e8 4d 5c ff ff       	call   f0108c69 <env_create>
f011301c:	83 c4 10             	add    $0x10,%esp
f011301f:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113022:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113025:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113028:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f011302b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011302e:	8b 40 60             	mov    0x60(%eax),%eax
f0113031:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113034:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113037:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011303a:	83 ec 0c             	sub    $0xc,%esp
f011303d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113040:	e8 5a 2a 00 00       	call   f0115a9f <ClearUserSpace>
f0113045:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113048:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011304f:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113056:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011305d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113061:	83 ec 0c             	sub    $0xc,%esp
f0113064:	68 84 9b 13 f0       	push   $0xf0139b84
f0113069:	e8 14 dc fe ff       	call   f0100c82 <cprintf>
f011306e:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113071:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113078:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f011307f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113082:	8a 00                	mov    (%eax),%al
f0113084:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f011308a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011308d:	8a 00                	mov    (%eax),%al
f011308f:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113095:	e8 2f 98 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011309a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f011309d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01130a0:	89 d0                	mov    %edx,%eax
f01130a2:	01 c0                	add    %eax,%eax
f01130a4:	01 d0                	add    %edx,%eax
f01130a6:	01 c0                	add    %eax,%eax
f01130a8:	83 ec 0c             	sub    $0xc,%esp
f01130ab:	6a 02                	push   $0x2
f01130ad:	50                   	push   %eax
f01130ae:	68 00 40 10 f0       	push   $0xf0104000
f01130b3:	68 00 00 10 f0       	push   $0xf0100000
f01130b8:	ff 75 cc             	pushl  -0x34(%ebp)
f01130bb:	e8 c2 58 ff ff       	call   f0108982 <share_chunk>
f01130c0:	83 c4 20             	add    $0x20,%esp
f01130c3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01130c6:	e8 fe 97 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01130cb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01130ce:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01130d2:	75 08                	jne    f01130dc <test_share_chunk+0x107>
f01130d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130d7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01130da:	74 28                	je     f0113104 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01130dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130df:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01130e2:	83 ec 0c             	sub    $0xc,%esp
f01130e5:	50                   	push   %eax
f01130e6:	ff 75 b0             	pushl  -0x50(%ebp)
f01130e9:	68 b0 9b 13 f0       	push   $0xf0139bb0
f01130ee:	68 9e 03 00 00       	push   $0x39e
f01130f3:	68 3e 85 13 f0       	push   $0xf013853e
f01130f8:	e8 8a d2 fe ff       	call   f0100387 <_warn>
f01130fd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113100:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113104:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113108:	74 04                	je     f011310e <test_share_chunk+0x139>
f011310a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011310e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113112:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113115:	c1 e0 03             	shl    $0x3,%eax
f0113118:	83 ec 08             	sub    $0x8,%esp
f011311b:	68 fd 00 00 00       	push   $0xfd
f0113120:	6a 07                	push   $0x7
f0113122:	6a 03                	push   $0x3
f0113124:	6a 07                	push   $0x7
f0113126:	6a 03                	push   $0x3
f0113128:	6a 01                	push   $0x1
f011312a:	50                   	push   %eax
f011312b:	68 00 40 10 f0       	push   $0xf0104000
f0113130:	68 00 00 10 f0       	push   $0xf0100000
f0113135:	ff 75 cc             	pushl  -0x34(%ebp)
f0113138:	e8 96 29 00 00       	call   f0115ad3 <CCP>
f011313d:	83 c4 30             	add    $0x30,%esp
f0113140:	85 c0                	test   %eax,%eax
f0113142:	75 1e                	jne    f0113162 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113144:	83 ec 04             	sub    $0x4,%esp
f0113147:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011314c:	68 a6 03 00 00       	push   $0x3a6
f0113151:	68 3e 85 13 f0       	push   $0xf013853e
f0113156:	e8 2c d2 fe ff       	call   f0100387 <_warn>
f011315b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011315e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113162:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113166:	74 04                	je     f011316c <test_share_chunk+0x197>
f0113168:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f011316c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011316f:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113172:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113175:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113178:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011317b:	8a 00                	mov    (%eax),%al
f011317d:	3c 41                	cmp    $0x41,%al
f011317f:	75 09                	jne    f011318a <test_share_chunk+0x1b5>
f0113181:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113184:	8a 00                	mov    (%eax),%al
f0113186:	3c 42                	cmp    $0x42,%al
f0113188:	74 1e                	je     f01131a8 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011318a:	83 ec 04             	sub    $0x4,%esp
f011318d:	68 54 9c 13 f0       	push   $0xf0139c54
f0113192:	68 b0 03 00 00       	push   $0x3b0
f0113197:	68 3e 85 13 f0       	push   $0xf013853e
f011319c:	e8 e6 d1 fe ff       	call   f0100387 <_warn>
f01131a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01131a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131ac:	74 04                	je     f01131b2 <test_share_chunk+0x1dd>
f01131ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01131b6:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01131bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131bf:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01131c1:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01131c7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131ca:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01131cc:	83 ec 0c             	sub    $0xc,%esp
f01131cf:	68 89 9c 13 f0       	push   $0xf0139c89
f01131d4:	e8 a9 da fe ff       	call   f0100c82 <cprintf>
f01131d9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01131dc:	83 ec 0c             	sub    $0xc,%esp
f01131df:	68 98 9c 13 f0       	push   $0xf0139c98
f01131e4:	e8 99 da fe ff       	call   f0100c82 <cprintf>
f01131e9:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131ec:	e8 d8 96 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01131f1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01131f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131f7:	c1 e0 05             	shl    $0x5,%eax
f01131fa:	83 ec 0c             	sub    $0xc,%esp
f01131fd:	68 02 0e 00 00       	push   $0xe02
f0113202:	50                   	push   %eax
f0113203:	68 00 00 00 40       	push   $0x40000000
f0113208:	68 00 00 00 f0       	push   $0xf0000000
f011320d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113210:	e8 6d 57 ff ff       	call   f0108982 <share_chunk>
f0113215:	83 c4 20             	add    $0x20,%esp
f0113218:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011321b:	e8 a9 96 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113220:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113223:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113227:	75 1f                	jne    f0113248 <test_share_chunk+0x273>
f0113229:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011322c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011322f:	89 c1                	mov    %eax,%ecx
f0113231:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113234:	c1 e0 05             	shl    $0x5,%eax
f0113237:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011323a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113241:	99                   	cltd   
f0113242:	f7 fb                	idiv   %ebx
f0113244:	39 c1                	cmp    %eax,%ecx
f0113246:	74 28                	je     f0113270 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113248:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011324b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011324e:	83 ec 0c             	sub    $0xc,%esp
f0113251:	50                   	push   %eax
f0113252:	ff 75 a8             	pushl  -0x58(%ebp)
f0113255:	68 d4 9c 13 f0       	push   $0xf0139cd4
f011325a:	68 c8 03 00 00       	push   $0x3c8
f011325f:	68 3e 85 13 f0       	push   $0xf013853e
f0113264:	e8 1e d1 fe ff       	call   f0100387 <_warn>
f0113269:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011326c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113270:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113274:	74 04                	je     f011327a <test_share_chunk+0x2a5>
f0113276:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011327a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011327e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113285:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113288:	c1 e0 05             	shl    $0x5,%eax
f011328b:	83 ec 08             	sub    $0x8,%esp
f011328e:	6a 02                	push   $0x2
f0113290:	6a 07                	push   $0x7
f0113292:	6a 03                	push   $0x3
f0113294:	68 07 0e 00 00       	push   $0xe07
f0113299:	68 03 0e 00 00       	push   $0xe03
f011329e:	6a ff                	push   $0xffffffff
f01132a0:	50                   	push   %eax
f01132a1:	68 00 00 00 40       	push   $0x40000000
f01132a6:	68 00 00 00 f0       	push   $0xf0000000
f01132ab:	ff 75 cc             	pushl  -0x34(%ebp)
f01132ae:	e8 20 28 00 00       	call   f0115ad3 <CCP>
f01132b3:	83 c4 30             	add    $0x30,%esp
f01132b6:	85 c0                	test   %eax,%eax
f01132b8:	75 25                	jne    f01132df <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01132ba:	83 ec 04             	sub    $0x4,%esp
f01132bd:	68 0c 9c 13 f0       	push   $0xf0139c0c
f01132c2:	68 d1 03 00 00       	push   $0x3d1
f01132c7:	68 3e 85 13 f0       	push   $0xf013853e
f01132cc:	e8 b6 d0 fe ff       	call   f0100387 <_warn>
f01132d1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01132d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01132df:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132e2:	89 d0                	mov    %edx,%eax
f01132e4:	01 c0                	add    %eax,%eax
f01132e6:	01 d0                	add    %edx,%eax
f01132e8:	c1 e0 02             	shl    $0x2,%eax
f01132eb:	83 ec 08             	sub    $0x8,%esp
f01132ee:	6a 02                	push   $0x2
f01132f0:	6a 07                	push   $0x7
f01132f2:	6a 03                	push   $0x3
f01132f4:	68 07 0e 00 00       	push   $0xe07
f01132f9:	68 03 0e 00 00       	push   $0xe03
f01132fe:	6a 02                	push   $0x2
f0113300:	50                   	push   %eax
f0113301:	68 00 00 00 40       	push   $0x40000000
f0113306:	68 00 00 00 f0       	push   $0xf0000000
f011330b:	ff 75 cc             	pushl  -0x34(%ebp)
f011330e:	e8 c0 27 00 00       	call   f0115ad3 <CCP>
f0113313:	83 c4 30             	add    $0x30,%esp
f0113316:	85 c0                	test   %eax,%eax
f0113318:	75 1e                	jne    f0113338 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011331a:	83 ec 04             	sub    $0x4,%esp
f011331d:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113322:	68 d8 03 00 00       	push   $0x3d8
f0113327:	68 3e 85 13 f0       	push   $0xf013853e
f011332c:	e8 56 d0 fe ff       	call   f0100387 <_warn>
f0113331:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113334:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113338:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011333c:	74 04                	je     f0113342 <test_share_chunk+0x36d>
f011333e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113342:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113346:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f011334b:	05 00 00 00 10       	add    $0x10000000,%eax
f0113350:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113353:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113356:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f011335b:	83 ec 08             	sub    $0x8,%esp
f011335e:	6a 02                	push   $0x2
f0113360:	6a 07                	push   $0x7
f0113362:	6a 03                	push   $0x3
f0113364:	68 07 0e 00 00       	push   $0xe07
f0113369:	68 03 0e 00 00       	push   $0xe03
f011336e:	6a 02                	push   $0x2
f0113370:	50                   	push   %eax
f0113371:	68 00 00 0a 40       	push   $0x400a0000
f0113376:	68 00 00 0a f0       	push   $0xf00a0000
f011337b:	ff 75 cc             	pushl  -0x34(%ebp)
f011337e:	e8 50 27 00 00       	call   f0115ad3 <CCP>
f0113383:	83 c4 30             	add    $0x30,%esp
f0113386:	85 c0                	test   %eax,%eax
f0113388:	75 1e                	jne    f01133a8 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011338a:	83 ec 04             	sub    $0x4,%esp
f011338d:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113392:	68 e2 03 00 00       	push   $0x3e2
f0113397:	68 3e 85 13 f0       	push   $0xf013853e
f011339c:	e8 e6 cf fe ff       	call   f0100387 <_warn>
f01133a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01133a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01133a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133ac:	74 04                	je     f01133b2 <test_share_chunk+0x3dd>
f01133ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01133b6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01133ba:	0f 84 a4 00 00 00    	je     f0113464 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01133c0:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01133c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133ca:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01133cd:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01133d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133d7:	8a 00                	mov    (%eax),%al
f01133d9:	3c 41                	cmp    $0x41,%al
f01133db:	75 09                	jne    f01133e6 <test_share_chunk+0x411>
f01133dd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01133e0:	8a 00                	mov    (%eax),%al
f01133e2:	3c 41                	cmp    $0x41,%al
f01133e4:	74 1e                	je     f0113404 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01133e6:	83 ec 04             	sub    $0x4,%esp
f01133e9:	68 54 9c 13 f0       	push   $0xf0139c54
f01133ee:	68 ef 03 00 00       	push   $0x3ef
f01133f3:	68 3e 85 13 f0       	push   $0xf013853e
f01133f8:	e8 8a cf fe ff       	call   f0100387 <_warn>
f01133fd:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113400:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113404:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113408:	74 04                	je     f011340e <test_share_chunk+0x439>
f011340a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011340e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113412:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113419:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011341c:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011341f:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113426:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113429:	8a 00                	mov    (%eax),%al
f011342b:	3c 43                	cmp    $0x43,%al
f011342d:	75 09                	jne    f0113438 <test_share_chunk+0x463>
f011342f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113432:	8a 00                	mov    (%eax),%al
f0113434:	3c 43                	cmp    $0x43,%al
f0113436:	74 1e                	je     f0113456 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113438:	83 ec 04             	sub    $0x4,%esp
f011343b:	68 54 9c 13 f0       	push   $0xf0139c54
f0113440:	68 fa 03 00 00       	push   $0x3fa
f0113445:	68 3e 85 13 f0       	push   $0xf013853e
f011344a:	e8 38 cf fe ff       	call   f0100387 <_warn>
f011344f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113452:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113456:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011345a:	74 04                	je     f0113460 <test_share_chunk+0x48b>
f011345c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113460:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113464:	83 ec 0c             	sub    $0xc,%esp
f0113467:	68 63 92 13 f0       	push   $0xf0139263
f011346c:	e8 11 d8 fe ff       	call   f0100c82 <cprintf>
f0113471:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113474:	83 ec 0c             	sub    $0xc,%esp
f0113477:	68 24 9d 13 f0       	push   $0xf0139d24
f011347c:	e8 01 d8 fe ff       	call   f0100c82 <cprintf>
f0113481:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113484:	e8 40 94 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113489:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f011348c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011348f:	89 d0                	mov    %edx,%eax
f0113491:	c1 e0 03             	shl    $0x3,%eax
f0113494:	01 d0                	add    %edx,%eax
f0113496:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011349d:	01 d0                	add    %edx,%eax
f011349f:	c1 e0 03             	shl    $0x3,%eax
f01134a2:	83 ec 0c             	sub    $0xc,%esp
f01134a5:	6a 06                	push   $0x6
f01134a7:	50                   	push   %eax
f01134a8:	6a 00                	push   $0x0
f01134aa:	68 00 00 00 40       	push   $0x40000000
f01134af:	ff 75 cc             	pushl  -0x34(%ebp)
f01134b2:	e8 cb 54 ff ff       	call   f0108982 <share_chunk>
f01134b7:	83 c4 20             	add    $0x20,%esp
f01134ba:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01134bd:	e8 07 94 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01134c2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01134c5:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01134c9:	75 0b                	jne    f01134d6 <test_share_chunk+0x501>
f01134cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01134ce:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01134d1:	83 f8 01             	cmp    $0x1,%eax
f01134d4:	74 28                	je     f01134fe <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01134d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01134d9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01134dc:	83 ec 0c             	sub    $0xc,%esp
f01134df:	50                   	push   %eax
f01134e0:	ff 75 a0             	pushl  -0x60(%ebp)
f01134e3:	68 d4 9c 13 f0       	push   $0xf0139cd4
f01134e8:	68 10 04 00 00       	push   $0x410
f01134ed:	68 3e 85 13 f0       	push   $0xf013853e
f01134f2:	e8 90 ce fe ff       	call   f0100387 <_warn>
f01134f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01134fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01134fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113502:	74 04                	je     f0113508 <test_share_chunk+0x533>
f0113504:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113508:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011350c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113513:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113516:	05 00 80 02 00       	add    $0x28000,%eax
f011351b:	c1 e0 02             	shl    $0x2,%eax
f011351e:	83 ec 08             	sub    $0x8,%esp
f0113521:	6a 02                	push   $0x2
f0113523:	6a 07                	push   $0x7
f0113525:	6a 03                	push   $0x3
f0113527:	6a 07                	push   $0x7
f0113529:	6a 07                	push   $0x7
f011352b:	6a ff                	push   $0xffffffff
f011352d:	50                   	push   %eax
f011352e:	6a 00                	push   $0x0
f0113530:	68 00 00 00 40       	push   $0x40000000
f0113535:	ff 75 cc             	pushl  -0x34(%ebp)
f0113538:	e8 96 25 00 00       	call   f0115ad3 <CCP>
f011353d:	83 c4 30             	add    $0x30,%esp
f0113540:	85 c0                	test   %eax,%eax
f0113542:	75 25                	jne    f0113569 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113544:	83 ec 04             	sub    $0x4,%esp
f0113547:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011354c:	68 19 04 00 00       	push   $0x419
f0113551:	68 3e 85 13 f0       	push   $0xf013853e
f0113556:	e8 2c ce fe ff       	call   f0100387 <_warn>
f011355b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011355e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113562:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113569:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011356c:	89 d0                	mov    %edx,%eax
f011356e:	01 c0                	add    %eax,%eax
f0113570:	01 d0                	add    %edx,%eax
f0113572:	c1 e0 02             	shl    $0x2,%eax
f0113575:	83 ec 08             	sub    $0x8,%esp
f0113578:	6a 02                	push   $0x2
f011357a:	6a 07                	push   $0x7
f011357c:	6a 03                	push   $0x3
f011357e:	6a 07                	push   $0x7
f0113580:	6a 07                	push   $0x7
f0113582:	6a 03                	push   $0x3
f0113584:	50                   	push   %eax
f0113585:	6a 00                	push   $0x0
f0113587:	68 00 00 00 40       	push   $0x40000000
f011358c:	ff 75 cc             	pushl  -0x34(%ebp)
f011358f:	e8 3f 25 00 00       	call   f0115ad3 <CCP>
f0113594:	83 c4 30             	add    $0x30,%esp
f0113597:	85 c0                	test   %eax,%eax
f0113599:	75 1e                	jne    f01135b9 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011359b:	83 ec 04             	sub    $0x4,%esp
f011359e:	68 0c 9c 13 f0       	push   $0xf0139c0c
f01135a3:	68 20 04 00 00       	push   $0x420
f01135a8:	68 3e 85 13 f0       	push   $0xf013853e
f01135ad:	e8 d5 cd fe ff       	call   f0100387 <_warn>
f01135b2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01135b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01135b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01135bd:	74 04                	je     f01135c3 <test_share_chunk+0x5ee>
f01135bf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01135c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01135c7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135ca:	89 d0                	mov    %edx,%eax
f01135cc:	01 c0                	add    %eax,%eax
f01135ce:	01 d0                	add    %edx,%eax
f01135d0:	c1 e0 02             	shl    $0x2,%eax
f01135d3:	f7 d8                	neg    %eax
f01135d5:	05 00 00 0a 00       	add    $0xa0000,%eax
f01135da:	83 ec 08             	sub    $0x8,%esp
f01135dd:	6a 02                	push   $0x2
f01135df:	6a 07                	push   $0x7
f01135e1:	6a 03                	push   $0x3
f01135e3:	6a 07                	push   $0x7
f01135e5:	6a 07                	push   $0x7
f01135e7:	6a 02                	push   $0x2
f01135e9:	50                   	push   %eax
f01135ea:	68 00 30 00 00       	push   $0x3000
f01135ef:	68 00 30 00 40       	push   $0x40003000
f01135f4:	ff 75 cc             	pushl  -0x34(%ebp)
f01135f7:	e8 d7 24 00 00       	call   f0115ad3 <CCP>
f01135fc:	83 c4 30             	add    $0x30,%esp
f01135ff:	85 c0                	test   %eax,%eax
f0113601:	75 1e                	jne    f0113621 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113603:	83 ec 04             	sub    $0x4,%esp
f0113606:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011360b:	68 28 04 00 00       	push   $0x428
f0113610:	68 3e 85 13 f0       	push   $0xf013853e
f0113615:	e8 6d cd fe ff       	call   f0100387 <_warn>
f011361a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011361d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113621:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113625:	74 04                	je     f011362b <test_share_chunk+0x656>
f0113627:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011362b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011362f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113632:	c1 e0 02             	shl    $0x2,%eax
f0113635:	83 ec 08             	sub    $0x8,%esp
f0113638:	6a 02                	push   $0x2
f011363a:	6a 07                	push   $0x7
f011363c:	6a 03                	push   $0x3
f011363e:	6a 07                	push   $0x7
f0113640:	6a 07                	push   $0x7
f0113642:	6a 03                	push   $0x3
f0113644:	50                   	push   %eax
f0113645:	68 00 00 0a 00       	push   $0xa0000
f011364a:	68 00 00 0a 40       	push   $0x400a0000
f011364f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113652:	e8 7c 24 00 00       	call   f0115ad3 <CCP>
f0113657:	83 c4 30             	add    $0x30,%esp
f011365a:	85 c0                	test   %eax,%eax
f011365c:	75 1e                	jne    f011367c <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011365e:	83 ec 04             	sub    $0x4,%esp
f0113661:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113666:	68 30 04 00 00       	push   $0x430
f011366b:	68 3e 85 13 f0       	push   $0xf013853e
f0113670:	e8 12 cd fe ff       	call   f0100387 <_warn>
f0113675:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113678:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011367c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113680:	74 04                	je     f0113686 <test_share_chunk+0x6b1>
f0113682:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113686:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011368a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011368e:	0f 84 92 00 00 00    	je     f0113726 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113694:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f011369b:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01136a2:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01136a9:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01136b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01136b3:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01136b6:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01136bd:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01136c4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136c7:	8a 00                	mov    (%eax),%al
f01136c9:	3c 41                	cmp    $0x41,%al
f01136cb:	75 2d                	jne    f01136fa <test_share_chunk+0x725>
f01136cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136d0:	8a 00                	mov    (%eax),%al
f01136d2:	3c 41                	cmp    $0x41,%al
f01136d4:	75 24                	jne    f01136fa <test_share_chunk+0x725>
f01136d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01136d9:	8a 00                	mov    (%eax),%al
f01136db:	3c 41                	cmp    $0x41,%al
f01136dd:	75 1b                	jne    f01136fa <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01136df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01136e2:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01136e4:	3c 44                	cmp    $0x44,%al
f01136e6:	75 12                	jne    f01136fa <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01136e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01136eb:	8a 00                	mov    (%eax),%al
f01136ed:	3c 44                	cmp    $0x44,%al
f01136ef:	75 09                	jne    f01136fa <test_share_chunk+0x725>
f01136f1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01136f4:	8a 00                	mov    (%eax),%al
f01136f6:	3c 44                	cmp    $0x44,%al
f01136f8:	74 1e                	je     f0113718 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01136fa:	83 ec 04             	sub    $0x4,%esp
f01136fd:	68 54 9c 13 f0       	push   $0xf0139c54
f0113702:	68 42 04 00 00       	push   $0x442
f0113707:	68 3e 85 13 f0       	push   $0xf013853e
f011370c:	e8 76 cc fe ff       	call   f0100387 <_warn>
f0113711:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113714:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113718:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011371c:	74 04                	je     f0113722 <test_share_chunk+0x74d>
f011371e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113722:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113726:	83 ec 0c             	sub    $0xc,%esp
f0113729:	68 c6 92 13 f0       	push   $0xf01392c6
f011372e:	e8 4f d5 fe ff       	call   f0100c82 <cprintf>
f0113733:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113736:	83 ec 0c             	sub    $0xc,%esp
f0113739:	68 60 9d 13 f0       	push   $0xf0139d60
f011373e:	e8 3f d5 fe ff       	call   f0100c82 <cprintf>
f0113743:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113746:	e8 7e 91 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011374b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011374e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113751:	89 d0                	mov    %edx,%eax
f0113753:	01 c0                	add    %eax,%eax
f0113755:	01 d0                	add    %edx,%eax
f0113757:	01 c0                	add    %eax,%eax
f0113759:	01 d0                	add    %edx,%eax
f011375b:	83 ec 0c             	sub    $0xc,%esp
f011375e:	6a 04                	push   $0x4
f0113760:	50                   	push   %eax
f0113761:	68 00 fc 3f 00       	push   $0x3ffc00
f0113766:	68 00 fc 09 00       	push   $0x9fc00
f011376b:	ff 75 cc             	pushl  -0x34(%ebp)
f011376e:	e8 0f 52 ff ff       	call   f0108982 <share_chunk>
f0113773:	83 c4 20             	add    $0x20,%esp
f0113776:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113779:	e8 4b 91 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011377e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113781:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0113785:	75 0b                	jne    f0113792 <test_share_chunk+0x7bd>
f0113787:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011378a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011378d:	83 f8 01             	cmp    $0x1,%eax
f0113790:	74 28                	je     f01137ba <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113792:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113795:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113798:	83 ec 0c             	sub    $0xc,%esp
f011379b:	50                   	push   %eax
f011379c:	ff 75 8c             	pushl  -0x74(%ebp)
f011379f:	68 d4 9c 13 f0       	push   $0xf0139cd4
f01137a4:	68 58 04 00 00       	push   $0x458
f01137a9:	68 3e 85 13 f0       	push   $0xf013853e
f01137ae:	e8 d4 cb fe ff       	call   f0100387 <_warn>
f01137b3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137b6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01137ba:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137be:	74 04                	je     f01137c4 <test_share_chunk+0x7ef>
f01137c0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137c4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01137c8:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01137cf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01137d2:	89 d0                	mov    %edx,%eax
f01137d4:	01 c0                	add    %eax,%eax
f01137d6:	01 d0                	add    %edx,%eax
f01137d8:	c1 e0 02             	shl    $0x2,%eax
f01137db:	83 ec 08             	sub    $0x8,%esp
f01137de:	6a 02                	push   $0x2
f01137e0:	6a 07                	push   $0x7
f01137e2:	6a 07                	push   $0x7
f01137e4:	6a 07                	push   $0x7
f01137e6:	6a 05                	push   $0x5
f01137e8:	6a ff                	push   $0xffffffff
f01137ea:	50                   	push   %eax
f01137eb:	68 00 f0 3f 00       	push   $0x3ff000
f01137f0:	68 00 f0 09 00       	push   $0x9f000
f01137f5:	ff 75 cc             	pushl  -0x34(%ebp)
f01137f8:	e8 d6 22 00 00       	call   f0115ad3 <CCP>
f01137fd:	83 c4 30             	add    $0x30,%esp
f0113800:	85 c0                	test   %eax,%eax
f0113802:	75 25                	jne    f0113829 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113804:	83 ec 04             	sub    $0x4,%esp
f0113807:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011380c:	68 61 04 00 00       	push   $0x461
f0113811:	68 3e 85 13 f0       	push   $0xf013853e
f0113816:	e8 6c cb fe ff       	call   f0100387 <_warn>
f011381b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011381e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113822:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0113829:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011382d:	74 04                	je     f0113833 <test_share_chunk+0x85e>
f011382f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113833:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113837:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011383a:	c1 e0 02             	shl    $0x2,%eax
f011383d:	83 ec 08             	sub    $0x8,%esp
f0113840:	6a 02                	push   $0x2
f0113842:	6a 07                	push   $0x7
f0113844:	6a 07                	push   $0x7
f0113846:	6a 07                	push   $0x7
f0113848:	6a 05                	push   $0x5
f011384a:	6a 03                	push   $0x3
f011384c:	50                   	push   %eax
f011384d:	68 00 f0 3f 00       	push   $0x3ff000
f0113852:	68 00 f0 09 00       	push   $0x9f000
f0113857:	ff 75 cc             	pushl  -0x34(%ebp)
f011385a:	e8 74 22 00 00       	call   f0115ad3 <CCP>
f011385f:	83 c4 30             	add    $0x30,%esp
f0113862:	85 c0                	test   %eax,%eax
f0113864:	75 1e                	jne    f0113884 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113866:	83 ec 04             	sub    $0x4,%esp
f0113869:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011386e:	68 6a 04 00 00       	push   $0x46a
f0113873:	68 3e 85 13 f0       	push   $0xf013853e
f0113878:	e8 0a cb fe ff       	call   f0100387 <_warn>
f011387d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113880:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113884:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113888:	74 04                	je     f011388e <test_share_chunk+0x8b9>
f011388a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011388e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113892:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113895:	c1 e0 03             	shl    $0x3,%eax
f0113898:	83 ec 08             	sub    $0x8,%esp
f011389b:	6a 02                	push   $0x2
f011389d:	6a 07                	push   $0x7
f011389f:	6a 07                	push   $0x7
f01138a1:	6a 07                	push   $0x7
f01138a3:	6a 05                	push   $0x5
f01138a5:	6a 04                	push   $0x4
f01138a7:	50                   	push   %eax
f01138a8:	68 00 00 40 00       	push   $0x400000
f01138ad:	68 00 00 0a 00       	push   $0xa0000
f01138b2:	ff 75 cc             	pushl  -0x34(%ebp)
f01138b5:	e8 19 22 00 00       	call   f0115ad3 <CCP>
f01138ba:	83 c4 30             	add    $0x30,%esp
f01138bd:	85 c0                	test   %eax,%eax
f01138bf:	75 1e                	jne    f01138df <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01138c1:	83 ec 04             	sub    $0x4,%esp
f01138c4:	68 0c 9c 13 f0       	push   $0xf0139c0c
f01138c9:	68 72 04 00 00       	push   $0x472
f01138ce:	68 3e 85 13 f0       	push   $0xf013853e
f01138d3:	e8 af ca fe ff       	call   f0100387 <_warn>
f01138d8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01138df:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138e3:	74 04                	je     f01138e9 <test_share_chunk+0x914>
f01138e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01138ed:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01138f1:	0f 84 b2 00 00 00    	je     f01139a9 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01138f7:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01138fe:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0113905:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011390c:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113913:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f011391a:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113921:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0113928:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011392f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113932:	8a 00                	mov    (%eax),%al
f0113934:	3c 44                	cmp    $0x44,%al
f0113936:	75 45                	jne    f011397d <test_share_chunk+0x9a8>
f0113938:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011393b:	8a 00                	mov    (%eax),%al
f011393d:	3c 44                	cmp    $0x44,%al
f011393f:	75 3c                	jne    f011397d <test_share_chunk+0x9a8>
f0113941:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113944:	8a 00                	mov    (%eax),%al
f0113946:	3c 44                	cmp    $0x44,%al
f0113948:	75 33                	jne    f011397d <test_share_chunk+0x9a8>
f011394a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011394d:	8a 00                	mov    (%eax),%al
f011394f:	3c 44                	cmp    $0x44,%al
f0113951:	75 2a                	jne    f011397d <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113953:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113956:	8a 10                	mov    (%eax),%dl
f0113958:	8b 45 90             	mov    -0x70(%ebp),%eax
f011395b:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011395d:	38 c2                	cmp    %al,%dl
f011395f:	75 1c                	jne    f011397d <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113961:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113964:	8a 10                	mov    (%eax),%dl
f0113966:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113969:	8a 00                	mov    (%eax),%al
f011396b:	38 c2                	cmp    %al,%dl
f011396d:	75 0e                	jne    f011397d <test_share_chunk+0x9a8>
f011396f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113972:	8a 10                	mov    (%eax),%dl
f0113974:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113977:	8a 00                	mov    (%eax),%al
f0113979:	38 c2                	cmp    %al,%dl
f011397b:	74 1e                	je     f011399b <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011397d:	83 ec 04             	sub    $0x4,%esp
f0113980:	68 54 9c 13 f0       	push   $0xf0139c54
f0113985:	68 87 04 00 00       	push   $0x487
f011398a:	68 3e 85 13 f0       	push   $0xf013853e
f011398f:	e8 f3 c9 fe ff       	call   f0100387 <_warn>
f0113994:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113997:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011399b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011399f:	74 04                	je     f01139a5 <test_share_chunk+0x9d0>
f01139a1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01139a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01139a9:	83 ec 0c             	sub    $0xc,%esp
f01139ac:	68 98 9d 13 f0       	push   $0xf0139d98
f01139b1:	e8 cc d2 fe ff       	call   f0100c82 <cprintf>
f01139b6:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01139b9:	83 ec 08             	sub    $0x8,%esp
f01139bc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01139bf:	68 a8 9d 13 f0       	push   $0xf0139da8
f01139c4:	e8 b9 d2 fe ff       	call   f0100c82 <cprintf>
f01139c9:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01139cc:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01139d0:	75 10                	jne    f01139e2 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01139d2:	83 ec 0c             	sub    $0xc,%esp
f01139d5:	68 d8 9d 13 f0       	push   $0xf0139dd8
f01139da:	e8 a3 d2 fe ff       	call   f0100c82 <cprintf>
f01139df:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01139e2:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f01139e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01139ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01139ed:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01139f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01139f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01139f8:	5b                   	pop    %ebx
f01139f9:	5e                   	pop    %esi
f01139fa:	5f                   	pop    %edi
f01139fb:	5d                   	pop    %ebp
f01139fc:	c3                   	ret    

f01139fd <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01139fd:	55                   	push   %ebp
f01139fe:	89 e5                	mov    %esp,%ebp
f0113a00:	57                   	push   %edi
f0113a01:	56                   	push   %esi
f0113a02:	53                   	push   %ebx
f0113a03:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113a09:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113a0f:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0113a14:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a19:	89 c7                	mov    %eax,%edi
f0113a1b:	89 de                	mov    %ebx,%esi
f0113a1d:	89 d1                	mov    %edx,%ecx
f0113a1f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a21:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113a27:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113a2c:	b0 00                	mov    $0x0,%al
f0113a2e:	89 d7                	mov    %edx,%edi
f0113a30:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113a32:	6a 00                	push   $0x0
f0113a34:	6a 0a                	push   $0xa
f0113a36:	6a 14                	push   $0x14
f0113a38:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113a3e:	50                   	push   %eax
f0113a3f:	e8 25 52 ff ff       	call   f0108c69 <env_create>
f0113a44:	83 c4 10             	add    $0x10,%esp
f0113a47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113a4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113a4d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113a50:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113a53:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113a56:	8b 40 60             	mov    0x60(%eax),%eax
f0113a59:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113a5c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113a5f:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113a62:	83 ec 0c             	sub    $0xc,%esp
f0113a65:	ff 75 d0             	pushl  -0x30(%ebp)
f0113a68:	e8 32 20 00 00       	call   f0115a9f <ClearUserSpace>
f0113a6d:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113a70:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113a77:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113a7e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113a85:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0113a89:	83 ec 0c             	sub    $0xc,%esp
f0113a8c:	68 14 9e 13 f0       	push   $0xf0139e14
f0113a91:	e8 ec d1 fe ff       	call   f0100c82 <cprintf>
f0113a96:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0113a99:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0113aa0:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0113aa7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113aaa:	8a 00                	mov    (%eax),%al
f0113aac:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0113ab2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ab5:	8a 00                	mov    (%eax),%al
f0113ab7:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0113abd:	83 ec 08             	sub    $0x8,%esp
f0113ac0:	68 00 f0 bf ef       	push   $0xefbff000
f0113ac5:	ff 75 d0             	pushl  -0x30(%ebp)
f0113ac8:	e8 b3 1f 00 00       	call   f0115a80 <GP>
f0113acd:	83 c4 10             	add    $0x10,%esp
f0113ad0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ad3:	e8 f1 8d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113ad8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113adb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113ade:	c1 e0 02             	shl    $0x2,%eax
f0113ae1:	6a 02                	push   $0x2
f0113ae3:	50                   	push   %eax
f0113ae4:	68 00 f0 bf ef       	push   $0xefbff000
f0113ae9:	ff 75 d0             	pushl  -0x30(%ebp)
f0113aec:	e8 a4 4f ff ff       	call   f0108a95 <allocate_chunk>
f0113af1:	83 c4 10             	add    $0x10,%esp
f0113af4:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113af7:	e8 cd 8d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113afc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113aff:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113b03:	75 08                	jne    f0113b0d <test_allocate_chunk+0x110>
f0113b05:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b08:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113b0b:	74 2a                	je     f0113b37 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113b0d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b10:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b13:	83 ec 08             	sub    $0x8,%esp
f0113b16:	6a 00                	push   $0x0
f0113b18:	50                   	push   %eax
f0113b19:	ff 75 b0             	pushl  -0x50(%ebp)
f0113b1c:	68 40 9e 13 f0       	push   $0xf0139e40
f0113b21:	68 c3 04 00 00       	push   $0x4c3
f0113b26:	68 3e 85 13 f0       	push   $0xf013853e
f0113b2b:	e8 57 c8 fe ff       	call   f0100387 <_warn>
f0113b30:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113b37:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b3b:	74 04                	je     f0113b41 <test_allocate_chunk+0x144>
f0113b3d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113b41:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b45:	e8 7f 8d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113b4a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113b4d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113b50:	01 c0                	add    %eax,%eax
f0113b52:	89 c1                	mov    %eax,%ecx
f0113b54:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113b57:	89 d0                	mov    %edx,%eax
f0113b59:	c1 e0 02             	shl    $0x2,%eax
f0113b5c:	01 d0                	add    %edx,%eax
f0113b5e:	f7 d8                	neg    %eax
f0113b60:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0113b65:	6a 02                	push   $0x2
f0113b67:	51                   	push   %ecx
f0113b68:	50                   	push   %eax
f0113b69:	ff 75 d0             	pushl  -0x30(%ebp)
f0113b6c:	e8 24 4f ff ff       	call   f0108a95 <allocate_chunk>
f0113b71:	83 c4 10             	add    $0x10,%esp
f0113b74:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b77:	e8 4d 8d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113b7c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113b7f:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113b83:	75 08                	jne    f0113b8d <test_allocate_chunk+0x190>
f0113b85:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b88:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113b8b:	74 2a                	je     f0113bb7 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113b8d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b90:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b93:	83 ec 08             	sub    $0x8,%esp
f0113b96:	6a 00                	push   $0x0
f0113b98:	50                   	push   %eax
f0113b99:	ff 75 b0             	pushl  -0x50(%ebp)
f0113b9c:	68 40 9e 13 f0       	push   $0xf0139e40
f0113ba1:	68 d1 04 00 00       	push   $0x4d1
f0113ba6:	68 3e 85 13 f0       	push   $0xf013853e
f0113bab:	e8 d7 c7 fe ff       	call   f0100387 <_warn>
f0113bb0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bb3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113bb7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bbb:	74 04                	je     f0113bc1 <test_allocate_chunk+0x1c4>
f0113bbd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113bc1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0113bc5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113bc8:	c1 e0 02             	shl    $0x2,%eax
f0113bcb:	83 ec 08             	sub    $0x8,%esp
f0113bce:	6a 03                	push   $0x3
f0113bd0:	6a 00                	push   $0x0
f0113bd2:	6a 00                	push   $0x0
f0113bd4:	68 ff 0f 00 00       	push   $0xfff
f0113bd9:	ff 75 b8             	pushl  -0x48(%ebp)
f0113bdc:	6a 01                	push   $0x1
f0113bde:	50                   	push   %eax
f0113bdf:	68 00 f0 bf ef       	push   $0xefbff000
f0113be4:	6a 00                	push   $0x0
f0113be6:	ff 75 d0             	pushl  -0x30(%ebp)
f0113be9:	e8 e5 1e 00 00       	call   f0115ad3 <CCP>
f0113bee:	83 c4 30             	add    $0x30,%esp
f0113bf1:	85 c0                	test   %eax,%eax
f0113bf3:	75 1e                	jne    f0113c13 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113bf5:	83 ec 04             	sub    $0x4,%esp
f0113bf8:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0113bfd:	68 d9 04 00 00       	push   $0x4d9
f0113c02:	68 3e 85 13 f0       	push   $0xf013853e
f0113c07:	e8 7b c7 fe ff       	call   f0100387 <_warn>
f0113c0c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c0f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c13:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c17:	74 04                	je     f0113c1d <test_allocate_chunk+0x220>
f0113c19:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c1d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113c21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c24:	8a 10                	mov    (%eax),%dl
f0113c26:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113c2c:	38 c2                	cmp    %al,%dl
f0113c2e:	75 0f                	jne    f0113c3f <test_allocate_chunk+0x242>
f0113c30:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c33:	8a 10                	mov    (%eax),%dl
f0113c35:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113c3b:	38 c2                	cmp    %al,%dl
f0113c3d:	74 1e                	je     f0113c5d <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113c3f:	83 ec 04             	sub    $0x4,%esp
f0113c42:	68 f4 9e 13 f0       	push   $0xf0139ef4
f0113c47:	68 e1 04 00 00       	push   $0x4e1
f0113c4c:	68 3e 85 13 f0       	push   $0xf013853e
f0113c51:	e8 31 c7 fe ff       	call   f0100387 <_warn>
f0113c56:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c59:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c5d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c61:	74 04                	je     f0113c67 <test_allocate_chunk+0x26a>
f0113c63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c67:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113c6b:	83 ec 0c             	sub    $0xc,%esp
f0113c6e:	68 89 9c 13 f0       	push   $0xf0139c89
f0113c73:	e8 0a d0 fe ff       	call   f0100c82 <cprintf>
f0113c78:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0113c7b:	83 ec 0c             	sub    $0xc,%esp
f0113c7e:	68 2c 9f 13 f0       	push   $0xf0139f2c
f0113c83:	e8 fa cf fe ff       	call   f0100c82 <cprintf>
f0113c88:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c8b:	e8 39 8c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113c90:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113c93:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c96:	c1 e0 05             	shl    $0x5,%eax
f0113c99:	68 02 0e 00 00       	push   $0xe02
f0113c9e:	50                   	push   %eax
f0113c9f:	6a 00                	push   $0x0
f0113ca1:	ff 75 d0             	pushl  -0x30(%ebp)
f0113ca4:	e8 ec 4d ff ff       	call   f0108a95 <allocate_chunk>
f0113ca9:	83 c4 10             	add    $0x10,%esp
f0113cac:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113caf:	e8 15 8c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113cb4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0113cb7:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113cbb:	75 36                	jne    f0113cf3 <test_allocate_chunk+0x2f6>
f0113cbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113cc0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113cc3:	89 c1                	mov    %eax,%ecx
f0113cc5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cc8:	c1 e0 05             	shl    $0x5,%eax
f0113ccb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cce:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113cd5:	99                   	cltd   
f0113cd6:	f7 fe                	idiv   %esi
f0113cd8:	89 c3                	mov    %eax,%ebx
f0113cda:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cdd:	c1 e0 05             	shl    $0x5,%eax
f0113ce0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113ce3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113cea:	99                   	cltd   
f0113ceb:	f7 fe                	idiv   %esi
f0113ced:	01 d8                	add    %ebx,%eax
f0113cef:	39 c1                	cmp    %eax,%ecx
f0113cf1:	74 54                	je     f0113d47 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113cf3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cf6:	c1 e0 05             	shl    $0x5,%eax
f0113cf9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cfc:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113d03:	99                   	cltd   
f0113d04:	f7 ff                	idiv   %edi
f0113d06:	89 c1                	mov    %eax,%ecx
f0113d08:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d0b:	c1 e0 05             	shl    $0x5,%eax
f0113d0e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113d11:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113d18:	99                   	cltd   
f0113d19:	f7 fe                	idiv   %esi
f0113d1b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113d1e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d21:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d24:	83 ec 08             	sub    $0x8,%esp
f0113d27:	52                   	push   %edx
f0113d28:	50                   	push   %eax
f0113d29:	ff 75 a8             	pushl  -0x58(%ebp)
f0113d2c:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0113d31:	68 f6 04 00 00       	push   $0x4f6
f0113d36:	68 3e 85 13 f0       	push   $0xf013853e
f0113d3b:	e8 47 c6 fe ff       	call   f0100387 <_warn>
f0113d40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d47:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d4b:	74 04                	je     f0113d51 <test_allocate_chunk+0x354>
f0113d4d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d51:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113d55:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113d5c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d5f:	c1 e0 05             	shl    $0x5,%eax
f0113d62:	83 ec 08             	sub    $0x8,%esp
f0113d65:	6a 03                	push   $0x3
f0113d67:	6a 00                	push   $0x0
f0113d69:	6a 00                	push   $0x0
f0113d6b:	68 07 0e 00 00       	push   $0xe07
f0113d70:	68 03 0e 00 00       	push   $0xe03
f0113d75:	6a 01                	push   $0x1
f0113d77:	50                   	push   %eax
f0113d78:	6a 00                	push   $0x0
f0113d7a:	6a 00                	push   $0x0
f0113d7c:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d7f:	e8 4f 1d 00 00       	call   f0115ad3 <CCP>
f0113d84:	83 c4 30             	add    $0x30,%esp
f0113d87:	85 c0                	test   %eax,%eax
f0113d89:	75 25                	jne    f0113db0 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113d8b:	83 ec 04             	sub    $0x4,%esp
f0113d8e:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0113d93:	68 ff 04 00 00       	push   $0x4ff
f0113d98:	68 3e 85 13 f0       	push   $0xf013853e
f0113d9d:	e8 e5 c5 fe ff       	call   f0100387 <_warn>
f0113da2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113da5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113da9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113db0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113db4:	74 04                	je     f0113dba <test_allocate_chunk+0x3bd>
f0113db6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113dba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113dbe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113dc2:	74 5a                	je     f0113e1e <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0113dc4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113dc7:	01 c0                	add    %eax,%eax
f0113dc9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113dcc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113dcf:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0113dd2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113dd5:	01 c0                	add    %eax,%eax
f0113dd7:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113dda:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ddd:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113de0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113de3:	8a 00                	mov    (%eax),%al
f0113de5:	3c 4b                	cmp    $0x4b,%al
f0113de7:	75 09                	jne    f0113df2 <test_allocate_chunk+0x3f5>
f0113de9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dec:	8a 00                	mov    (%eax),%al
f0113dee:	3c 4d                	cmp    $0x4d,%al
f0113df0:	74 1e                	je     f0113e10 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113df2:	83 ec 04             	sub    $0x4,%esp
f0113df5:	68 f4 9e 13 f0       	push   $0xf0139ef4
f0113dfa:	68 0d 05 00 00       	push   $0x50d
f0113dff:	68 3e 85 13 f0       	push   $0xf013853e
f0113e04:	e8 7e c5 fe ff       	call   f0100387 <_warn>
f0113e09:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e0c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113e10:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e14:	74 04                	je     f0113e1a <test_allocate_chunk+0x41d>
f0113e16:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e1a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113e1e:	83 ec 0c             	sub    $0xc,%esp
f0113e21:	68 63 92 13 f0       	push   $0xf0139263
f0113e26:	e8 57 ce fe ff       	call   f0100c82 <cprintf>
f0113e2b:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113e2e:	83 ec 0c             	sub    $0xc,%esp
f0113e31:	68 cc 9f 13 f0       	push   $0xf0139fcc
f0113e36:	e8 47 ce fe ff       	call   f0100c82 <cprintf>
f0113e3b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e3e:	e8 86 8a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113e43:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113e46:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e49:	c1 e0 06             	shl    $0x6,%eax
f0113e4c:	89 c2                	mov    %eax,%edx
f0113e4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e51:	c1 e0 05             	shl    $0x5,%eax
f0113e54:	6a 00                	push   $0x0
f0113e56:	52                   	push   %edx
f0113e57:	50                   	push   %eax
f0113e58:	ff 75 d0             	pushl  -0x30(%ebp)
f0113e5b:	e8 35 4c ff ff       	call   f0108a95 <allocate_chunk>
f0113e60:	83 c4 10             	add    $0x10,%esp
f0113e63:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e66:	e8 5e 8a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113e6b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0113e6e:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113e72:	75 36                	jne    f0113eaa <test_allocate_chunk+0x4ad>
f0113e74:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e77:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e7a:	89 c1                	mov    %eax,%ecx
f0113e7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e7f:	c1 e0 06             	shl    $0x6,%eax
f0113e82:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e85:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113e8c:	99                   	cltd   
f0113e8d:	f7 ff                	idiv   %edi
f0113e8f:	89 c3                	mov    %eax,%ebx
f0113e91:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e94:	c1 e0 06             	shl    $0x6,%eax
f0113e97:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113e9a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ea1:	99                   	cltd   
f0113ea2:	f7 fe                	idiv   %esi
f0113ea4:	01 d8                	add    %ebx,%eax
f0113ea6:	39 c1                	cmp    %eax,%ecx
f0113ea8:	74 54                	je     f0113efe <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0113eaa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ead:	c1 e0 06             	shl    $0x6,%eax
f0113eb0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113eb3:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113eba:	99                   	cltd   
f0113ebb:	f7 fb                	idiv   %ebx
f0113ebd:	89 c1                	mov    %eax,%ecx
f0113ebf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ec2:	c1 e0 06             	shl    $0x6,%eax
f0113ec5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113ec8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113ecf:	99                   	cltd   
f0113ed0:	f7 ff                	idiv   %edi
f0113ed2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113ed5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ed8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113edb:	83 ec 08             	sub    $0x8,%esp
f0113ede:	52                   	push   %edx
f0113edf:	50                   	push   %eax
f0113ee0:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113ee3:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0113ee8:	68 23 05 00 00       	push   $0x523
f0113eed:	68 3e 85 13 f0       	push   $0xf013853e
f0113ef2:	e8 90 c4 fe ff       	call   f0100387 <_warn>
f0113ef7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113efa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113efe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f02:	74 04                	je     f0113f08 <test_allocate_chunk+0x50b>
f0113f04:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f08:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113f0c:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113f13:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f16:	c1 e0 06             	shl    $0x6,%eax
f0113f19:	89 c2                	mov    %eax,%edx
f0113f1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f1e:	c1 e0 05             	shl    $0x5,%eax
f0113f21:	83 ec 08             	sub    $0x8,%esp
f0113f24:	6a 03                	push   $0x3
f0113f26:	6a 00                	push   $0x0
f0113f28:	6a 00                	push   $0x0
f0113f2a:	68 07 0e 00 00       	push   $0xe07
f0113f2f:	6a 01                	push   $0x1
f0113f31:	6a 01                	push   $0x1
f0113f33:	52                   	push   %edx
f0113f34:	50                   	push   %eax
f0113f35:	6a 00                	push   $0x0
f0113f37:	ff 75 d0             	pushl  -0x30(%ebp)
f0113f3a:	e8 94 1b 00 00       	call   f0115ad3 <CCP>
f0113f3f:	83 c4 30             	add    $0x30,%esp
f0113f42:	85 c0                	test   %eax,%eax
f0113f44:	75 25                	jne    f0113f6b <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113f46:	83 ec 04             	sub    $0x4,%esp
f0113f49:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0113f4e:	68 2c 05 00 00       	push   $0x52c
f0113f53:	68 3e 85 13 f0       	push   $0xf013853e
f0113f58:	e8 2a c4 fe ff       	call   f0100387 <_warn>
f0113f5d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f60:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113f64:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0113f6b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f6f:	74 04                	je     f0113f75 <test_allocate_chunk+0x578>
f0113f71:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f75:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0113f79:	83 ec 0c             	sub    $0xc,%esp
f0113f7c:	68 c6 92 13 f0       	push   $0xf01392c6
f0113f81:	e8 fc cc fe ff       	call   f0100c82 <cprintf>
f0113f86:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0113f89:	83 ec 0c             	sub    $0xc,%esp
f0113f8c:	68 0c a0 13 f0       	push   $0xf013a00c
f0113f91:	e8 ec cc fe ff       	call   f0100c82 <cprintf>
f0113f96:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f99:	e8 2b 89 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113f9e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0113fa1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fa4:	c1 e0 06             	shl    $0x6,%eax
f0113fa7:	68 06 0e 00 00       	push   $0xe06
f0113fac:	50                   	push   %eax
f0113fad:	68 00 00 00 80       	push   $0x80000000
f0113fb2:	ff 75 d0             	pushl  -0x30(%ebp)
f0113fb5:	e8 db 4a ff ff       	call   f0108a95 <allocate_chunk>
f0113fba:	83 c4 10             	add    $0x10,%esp
f0113fbd:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113fc0:	e8 04 89 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0113fc5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0113fc8:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0113fcc:	75 36                	jne    f0114004 <test_allocate_chunk+0x607>
f0113fce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fd1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113fd4:	89 c1                	mov    %eax,%ecx
f0113fd6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fd9:	c1 e0 06             	shl    $0x6,%eax
f0113fdc:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113fdf:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113fe6:	99                   	cltd   
f0113fe7:	f7 fb                	idiv   %ebx
f0113fe9:	89 c3                	mov    %eax,%ebx
f0113feb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fee:	c1 e0 06             	shl    $0x6,%eax
f0113ff1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113ff4:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ffb:	99                   	cltd   
f0113ffc:	f7 fe                	idiv   %esi
f0113ffe:	01 d8                	add    %ebx,%eax
f0114000:	39 c1                	cmp    %eax,%ecx
f0114002:	74 54                	je     f0114058 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114004:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114007:	c1 e0 06             	shl    $0x6,%eax
f011400a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011400d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114014:	99                   	cltd   
f0114015:	f7 ff                	idiv   %edi
f0114017:	89 c1                	mov    %eax,%ecx
f0114019:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011401c:	c1 e0 06             	shl    $0x6,%eax
f011401f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114022:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114029:	99                   	cltd   
f011402a:	f7 fb                	idiv   %ebx
f011402c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011402f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114032:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114035:	83 ec 08             	sub    $0x8,%esp
f0114038:	52                   	push   %edx
f0114039:	50                   	push   %eax
f011403a:	ff 75 9c             	pushl  -0x64(%ebp)
f011403d:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0114042:	68 42 05 00 00       	push   $0x542
f0114047:	68 3e 85 13 f0       	push   $0xf013853e
f011404c:	e8 36 c3 fe ff       	call   f0100387 <_warn>
f0114051:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114054:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114058:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011405c:	74 04                	je     f0114062 <test_allocate_chunk+0x665>
f011405e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114062:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114066:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011406d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114070:	c1 e0 06             	shl    $0x6,%eax
f0114073:	83 ec 08             	sub    $0x8,%esp
f0114076:	6a 03                	push   $0x3
f0114078:	6a 00                	push   $0x0
f011407a:	6a 00                	push   $0x0
f011407c:	68 07 0e 00 00       	push   $0xe07
f0114081:	68 07 0e 00 00       	push   $0xe07
f0114086:	6a 01                	push   $0x1
f0114088:	50                   	push   %eax
f0114089:	68 00 00 00 80       	push   $0x80000000
f011408e:	6a 00                	push   $0x0
f0114090:	ff 75 d0             	pushl  -0x30(%ebp)
f0114093:	e8 3b 1a 00 00       	call   f0115ad3 <CCP>
f0114098:	83 c4 30             	add    $0x30,%esp
f011409b:	85 c0                	test   %eax,%eax
f011409d:	75 25                	jne    f01140c4 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011409f:	83 ec 04             	sub    $0x4,%esp
f01140a2:	68 a8 9e 13 f0       	push   $0xf0139ea8
f01140a7:	68 4b 05 00 00       	push   $0x54b
f01140ac:	68 3e 85 13 f0       	push   $0xf013853e
f01140b1:	e8 d1 c2 fe ff       	call   f0100387 <_warn>
f01140b6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140bd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01140c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140c8:	74 04                	je     f01140ce <test_allocate_chunk+0x6d1>
f01140ca:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01140ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01140d2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01140d6:	74 6f                	je     f0114147 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01140d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01140db:	01 c0                	add    %eax,%eax
f01140dd:	05 00 00 00 80       	add    $0x80000000,%eax
f01140e2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01140e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140e8:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f01140eb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140ee:	89 d0                	mov    %edx,%eax
f01140f0:	c1 e0 02             	shl    $0x2,%eax
f01140f3:	01 d0                	add    %edx,%eax
f01140f5:	01 c0                	add    %eax,%eax
f01140f7:	01 d0                	add    %edx,%eax
f01140f9:	01 c0                	add    %eax,%eax
f01140fb:	05 00 00 00 80       	add    $0x80000000,%eax
f0114100:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114103:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114106:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114109:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011410c:	8a 00                	mov    (%eax),%al
f011410e:	3c 4b                	cmp    $0x4b,%al
f0114110:	75 09                	jne    f011411b <test_allocate_chunk+0x71e>
f0114112:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114115:	8a 00                	mov    (%eax),%al
f0114117:	3c 4d                	cmp    $0x4d,%al
f0114119:	74 1e                	je     f0114139 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011411b:	83 ec 04             	sub    $0x4,%esp
f011411e:	68 f4 9e 13 f0       	push   $0xf0139ef4
f0114123:	68 59 05 00 00       	push   $0x559
f0114128:	68 3e 85 13 f0       	push   $0xf013853e
f011412d:	e8 55 c2 fe ff       	call   f0100387 <_warn>
f0114132:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114135:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114139:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011413d:	74 04                	je     f0114143 <test_allocate_chunk+0x746>
f011413f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114143:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114147:	83 ec 0c             	sub    $0xc,%esp
f011414a:	68 98 9d 13 f0       	push   $0xf0139d98
f011414f:	e8 2e cb fe ff       	call   f0100c82 <cprintf>
f0114154:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114157:	83 ec 0c             	sub    $0xc,%esp
f011415a:	68 48 a0 13 f0       	push   $0xf013a048
f011415f:	e8 1e cb fe ff       	call   f0100c82 <cprintf>
f0114164:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114167:	e8 5d 87 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011416c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f011416f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114172:	89 d0                	mov    %edx,%eax
f0114174:	01 c0                	add    %eax,%eax
f0114176:	01 d0                	add    %edx,%eax
f0114178:	01 c0                	add    %eax,%eax
f011417a:	01 d0                	add    %edx,%eax
f011417c:	68 04 0e 00 00       	push   $0xe04
f0114181:	50                   	push   %eax
f0114182:	68 00 fc 3f 40       	push   $0x403ffc00
f0114187:	ff 75 d0             	pushl  -0x30(%ebp)
f011418a:	e8 06 49 ff ff       	call   f0108a95 <allocate_chunk>
f011418f:	83 c4 10             	add    $0x10,%esp
f0114192:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114195:	e8 2f 87 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011419a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f011419d:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01141a1:	75 0b                	jne    f01141ae <test_allocate_chunk+0x7b1>
f01141a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141a6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141a9:	83 f8 05             	cmp    $0x5,%eax
f01141ac:	74 2a                	je     f01141d8 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01141ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141b1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141b4:	83 ec 08             	sub    $0x8,%esp
f01141b7:	6a 05                	push   $0x5
f01141b9:	50                   	push   %eax
f01141ba:	ff 75 98             	pushl  -0x68(%ebp)
f01141bd:	68 6c 9f 13 f0       	push   $0xf0139f6c
f01141c2:	68 70 05 00 00       	push   $0x570
f01141c7:	68 3e 85 13 f0       	push   $0xf013853e
f01141cc:	e8 b6 c1 fe ff       	call   f0100387 <_warn>
f01141d1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141d4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141d8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141dc:	74 04                	je     f01141e2 <test_allocate_chunk+0x7e5>
f01141de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141e2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01141e6:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01141ed:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01141f0:	89 d0                	mov    %edx,%eax
f01141f2:	01 c0                	add    %eax,%eax
f01141f4:	01 d0                	add    %edx,%eax
f01141f6:	c1 e0 02             	shl    $0x2,%eax
f01141f9:	83 ec 08             	sub    $0x8,%esp
f01141fc:	6a 03                	push   $0x3
f01141fe:	6a 00                	push   $0x0
f0114200:	6a 00                	push   $0x0
f0114202:	68 07 0e 00 00       	push   $0xe07
f0114207:	68 05 0e 00 00       	push   $0xe05
f011420c:	6a 01                	push   $0x1
f011420e:	50                   	push   %eax
f011420f:	68 00 f0 3f 40       	push   $0x403ff000
f0114214:	6a 00                	push   $0x0
f0114216:	ff 75 d0             	pushl  -0x30(%ebp)
f0114219:	e8 b5 18 00 00       	call   f0115ad3 <CCP>
f011421e:	83 c4 30             	add    $0x30,%esp
f0114221:	85 c0                	test   %eax,%eax
f0114223:	75 25                	jne    f011424a <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114225:	83 ec 04             	sub    $0x4,%esp
f0114228:	68 a8 9e 13 f0       	push   $0xf0139ea8
f011422d:	68 79 05 00 00       	push   $0x579
f0114232:	68 3e 85 13 f0       	push   $0xf013853e
f0114237:	e8 4b c1 fe ff       	call   f0100387 <_warn>
f011423c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011423f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114243:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f011424a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011424e:	74 04                	je     f0114254 <test_allocate_chunk+0x857>
f0114250:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114254:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114258:	83 ec 0c             	sub    $0xc,%esp
f011425b:	68 7f a0 13 f0       	push   $0xf013a07f
f0114260:	e8 1d ca fe ff       	call   f0100c82 <cprintf>
f0114265:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114268:	83 ec 08             	sub    $0x8,%esp
f011426b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011426e:	68 90 a0 13 f0       	push   $0xf013a090
f0114273:	e8 0a ca fe ff       	call   f0100c82 <cprintf>
f0114278:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011427b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011427f:	75 10                	jne    f0114291 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114281:	83 ec 0c             	sub    $0xc,%esp
f0114284:	68 c4 a0 13 f0       	push   $0xf013a0c4
f0114289:	e8 f4 c9 fe ff       	call   f0100c82 <cprintf>
f011428e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114291:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0114296:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114299:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011429c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011429f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01142a4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01142a7:	5b                   	pop    %ebx
f01142a8:	5e                   	pop    %esi
f01142a9:	5f                   	pop    %edi
f01142aa:	5d                   	pop    %ebp
f01142ab:	c3                   	ret    

f01142ac <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01142ac:	55                   	push   %ebp
f01142ad:	89 e5                	mov    %esp,%ebp
f01142af:	57                   	push   %edi
f01142b0:	56                   	push   %esi
f01142b1:	53                   	push   %ebx
f01142b2:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01142b8:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01142bb:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f01142c0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01142c5:	89 c7                	mov    %eax,%edi
f01142c7:	89 de                	mov    %ebx,%esi
f01142c9:	89 d1                	mov    %edx,%ecx
f01142cb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01142cd:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01142d0:	b9 23 00 00 00       	mov    $0x23,%ecx
f01142d5:	b0 00                	mov    $0x0,%al
f01142d7:	89 d7                	mov    %edx,%edi
f01142d9:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01142db:	6a 00                	push   $0x0
f01142dd:	6a 0a                	push   $0xa
f01142df:	6a 14                	push   $0x14
f01142e1:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01142e4:	50                   	push   %eax
f01142e5:	e8 7f 49 ff ff       	call   f0108c69 <env_create>
f01142ea:	83 c4 10             	add    $0x10,%esp
f01142ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01142f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142f3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01142f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01142f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142fc:	8b 40 60             	mov    0x60(%eax),%eax
f01142ff:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114302:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114305:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114308:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011430f:	75 70 20 
f0114312:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114319:	00 00 00 
f011431c:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011431f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114324:	b8 00 00 00 00       	mov    $0x0,%eax
f0114329:	89 d7                	mov    %edx,%edi
f011432b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011432d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114330:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114333:	83 ec 08             	sub    $0x8,%esp
f0114336:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011433c:	52                   	push   %edx
f011433d:	50                   	push   %eax
f011433e:	e8 5b cd 01 00       	call   f013109e <ltostr>
f0114343:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114346:	83 ec 04             	sub    $0x4,%esp
f0114349:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011434f:	50                   	push   %eax
f0114350:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114356:	50                   	push   %eax
f0114357:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011435d:	50                   	push   %eax
f011435e:	e8 33 ce 01 00       	call   f0131196 <strcconcat>
f0114363:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114366:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011436d:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114374:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011437b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114382:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114386:	83 ec 0c             	sub    $0xc,%esp
f0114389:	ff 75 d8             	pushl  -0x28(%ebp)
f011438c:	e8 0e 17 00 00       	call   f0115a9f <ClearUserSpace>
f0114391:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114394:	83 ec 0c             	sub    $0xc,%esp
f0114397:	68 04 a1 13 f0       	push   $0xf013a104
f011439c:	e8 e1 c8 fe ff       	call   f0100c82 <cprintf>
f01143a1:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01143a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01143a7:	c1 e0 03             	shl    $0x3,%eax
f01143aa:	83 ec 04             	sub    $0x4,%esp
f01143ad:	50                   	push   %eax
f01143ae:	6a 00                	push   $0x0
f01143b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01143b3:	e8 20 48 ff ff       	call   f0108bd8 <calculate_required_frames>
f01143b8:	83 c4 10             	add    $0x10,%esp
f01143bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01143be:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01143c2:	74 23                	je     f01143e7 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01143c4:	83 ec 0c             	sub    $0xc,%esp
f01143c7:	6a 03                	push   $0x3
f01143c9:	ff 75 c8             	pushl  -0x38(%ebp)
f01143cc:	68 38 a1 13 f0       	push   $0xf013a138
f01143d1:	68 b2 05 00 00       	push   $0x5b2
f01143d6:	68 3e 85 13 f0       	push   $0xf013853e
f01143db:	e8 a7 bf fe ff       	call   f0100387 <_warn>
f01143e0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143e3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143e7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143eb:	74 04                	je     f01143f1 <test_calculate_required_frames+0x145>
f01143ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143f1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01143f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01143f8:	c1 e0 02             	shl    $0x2,%eax
f01143fb:	83 ec 04             	sub    $0x4,%esp
f01143fe:	50                   	push   %eax
f01143ff:	6a 00                	push   $0x0
f0114401:	ff 75 d8             	pushl  -0x28(%ebp)
f0114404:	e8 cf 47 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114409:	83 c4 10             	add    $0x10,%esp
f011440c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011440f:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114416:	74 26                	je     f011443e <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114418:	83 ec 0c             	sub    $0xc,%esp
f011441b:	68 01 04 00 00       	push   $0x401
f0114420:	ff 75 c8             	pushl  -0x38(%ebp)
f0114423:	68 38 a1 13 f0       	push   $0xf013a138
f0114428:	68 bc 05 00 00       	push   $0x5bc
f011442d:	68 3e 85 13 f0       	push   $0xf013853e
f0114432:	e8 50 bf fe ff       	call   f0100387 <_warn>
f0114437:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011443a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011443e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114442:	74 04                	je     f0114448 <test_calculate_required_frames+0x19c>
f0114444:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114448:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011444c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011444f:	c1 e0 0a             	shl    $0xa,%eax
f0114452:	83 ec 04             	sub    $0x4,%esp
f0114455:	50                   	push   %eax
f0114456:	6a 00                	push   $0x0
f0114458:	ff 75 d8             	pushl  -0x28(%ebp)
f011445b:	e8 78 47 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114460:	83 c4 10             	add    $0x10,%esp
f0114463:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114466:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114469:	c1 e0 0a             	shl    $0xa,%eax
f011446c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011446f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114476:	99                   	cltd   
f0114477:	f7 fb                	idiv   %ebx
f0114479:	89 c1                	mov    %eax,%ecx
f011447b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011447e:	c1 e0 0a             	shl    $0xa,%eax
f0114481:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114484:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011448b:	99                   	cltd   
f011448c:	f7 fe                	idiv   %esi
f011448e:	01 c8                	add    %ecx,%eax
f0114490:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114493:	74 4c                	je     f01144e1 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114495:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114498:	c1 e0 0a             	shl    $0xa,%eax
f011449b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011449e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01144a5:	99                   	cltd   
f01144a6:	f7 fb                	idiv   %ebx
f01144a8:	89 c1                	mov    %eax,%ecx
f01144aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01144ad:	c1 e0 0a             	shl    $0xa,%eax
f01144b0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01144b3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01144ba:	99                   	cltd   
f01144bb:	f7 fe                	idiv   %esi
f01144bd:	01 c8                	add    %ecx,%eax
f01144bf:	83 ec 0c             	sub    $0xc,%esp
f01144c2:	50                   	push   %eax
f01144c3:	ff 75 c8             	pushl  -0x38(%ebp)
f01144c6:	68 38 a1 13 f0       	push   $0xf013a138
f01144cb:	68 c6 05 00 00       	push   $0x5c6
f01144d0:	68 3e 85 13 f0       	push   $0xf013853e
f01144d5:	e8 ad be fe ff       	call   f0100387 <_warn>
f01144da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144e1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144e5:	74 04                	je     f01144eb <test_calculate_required_frames+0x23f>
f01144e7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144eb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01144ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01144f2:	89 d0                	mov    %edx,%eax
f01144f4:	01 c0                	add    %eax,%eax
f01144f6:	01 d0                	add    %edx,%eax
f01144f8:	01 c0                	add    %eax,%eax
f01144fa:	83 ec 04             	sub    $0x4,%esp
f01144fd:	50                   	push   %eax
f01144fe:	68 00 10 00 00       	push   $0x1000
f0114503:	ff 75 d8             	pushl  -0x28(%ebp)
f0114506:	e8 cd 46 ff ff       	call   f0108bd8 <calculate_required_frames>
f011450b:	83 c4 10             	add    $0x10,%esp
f011450e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114511:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114515:	74 23                	je     f011453a <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114517:	83 ec 0c             	sub    $0xc,%esp
f011451a:	6a 03                	push   $0x3
f011451c:	ff 75 c8             	pushl  -0x38(%ebp)
f011451f:	68 38 a1 13 f0       	push   $0xf013a138
f0114524:	68 d2 05 00 00       	push   $0x5d2
f0114529:	68 3e 85 13 f0       	push   $0xf013853e
f011452e:	e8 54 be fe ff       	call   f0100387 <_warn>
f0114533:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114536:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011453a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011453e:	74 04                	je     f0114544 <test_calculate_required_frames+0x298>
f0114540:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114544:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114548:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011454b:	89 c2                	mov    %eax,%edx
f011454d:	01 d2                	add    %edx,%edx
f011454f:	01 d0                	add    %edx,%eax
f0114551:	83 ec 04             	sub    $0x4,%esp
f0114554:	50                   	push   %eax
f0114555:	68 00 18 00 00       	push   $0x1800
f011455a:	ff 75 d8             	pushl  -0x28(%ebp)
f011455d:	e8 76 46 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114562:	83 c4 10             	add    $0x10,%esp
f0114565:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114568:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011456c:	74 23                	je     f0114591 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011456e:	83 ec 0c             	sub    $0xc,%esp
f0114571:	6a 03                	push   $0x3
f0114573:	ff 75 c8             	pushl  -0x38(%ebp)
f0114576:	68 38 a1 13 f0       	push   $0xf013a138
f011457b:	68 dc 05 00 00       	push   $0x5dc
f0114580:	68 3e 85 13 f0       	push   $0xf013853e
f0114585:	e8 fd bd fe ff       	call   f0100387 <_warn>
f011458a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011458d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114591:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114595:	74 04                	je     f011459b <test_calculate_required_frames+0x2ef>
f0114597:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011459b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011459f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01145a2:	89 d0                	mov    %edx,%eax
f01145a4:	c1 e0 02             	shl    $0x2,%eax
f01145a7:	01 d0                	add    %edx,%eax
f01145a9:	01 c0                	add    %eax,%eax
f01145ab:	83 ec 04             	sub    $0x4,%esp
f01145ae:	50                   	push   %eax
f01145af:	68 00 00 40 00       	push   $0x400000
f01145b4:	ff 75 d8             	pushl  -0x28(%ebp)
f01145b7:	e8 1c 46 ff ff       	call   f0108bd8 <calculate_required_frames>
f01145bc:	83 c4 10             	add    $0x10,%esp
f01145bf:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01145c2:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01145c9:	74 26                	je     f01145f1 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01145cb:	83 ec 0c             	sub    $0xc,%esp
f01145ce:	68 03 0a 00 00       	push   $0xa03
f01145d3:	ff 75 c8             	pushl  -0x38(%ebp)
f01145d6:	68 38 a1 13 f0       	push   $0xf013a138
f01145db:	68 e6 05 00 00       	push   $0x5e6
f01145e0:	68 3e 85 13 f0       	push   $0xf013853e
f01145e5:	e8 9d bd fe ff       	call   f0100387 <_warn>
f01145ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145f5:	74 04                	je     f01145fb <test_calculate_required_frames+0x34f>
f01145f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01145ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114602:	01 c0                	add    %eax,%eax
f0114604:	83 ec 04             	sub    $0x4,%esp
f0114607:	50                   	push   %eax
f0114608:	68 00 00 70 00       	push   $0x700000
f011460d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114610:	e8 c3 45 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114615:	83 c4 10             	add    $0x10,%esp
f0114618:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011461b:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114622:	74 26                	je     f011464a <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114624:	83 ec 0c             	sub    $0xc,%esp
f0114627:	68 02 02 00 00       	push   $0x202
f011462c:	ff 75 c8             	pushl  -0x38(%ebp)
f011462f:	68 38 a1 13 f0       	push   $0xf013a138
f0114634:	68 f2 05 00 00       	push   $0x5f2
f0114639:	68 3e 85 13 f0       	push   $0xf013853e
f011463e:	e8 44 bd fe ff       	call   f0100387 <_warn>
f0114643:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114646:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011464a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011464e:	74 04                	je     f0114654 <test_calculate_required_frames+0x3a8>
f0114650:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114654:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114658:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011465b:	83 ec 04             	sub    $0x4,%esp
f011465e:	50                   	push   %eax
f011465f:	68 ff ff 3f 00       	push   $0x3fffff
f0114664:	ff 75 d8             	pushl  -0x28(%ebp)
f0114667:	e8 6c 45 ff ff       	call   f0108bd8 <calculate_required_frames>
f011466c:	83 c4 10             	add    $0x10,%esp
f011466f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114672:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114676:	74 23                	je     f011469b <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0114678:	83 ec 0c             	sub    $0xc,%esp
f011467b:	6a 04                	push   $0x4
f011467d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114680:	68 38 a1 13 f0       	push   $0xf013a138
f0114685:	68 fc 05 00 00       	push   $0x5fc
f011468a:	68 3e 85 13 f0       	push   $0xf013853e
f011468f:	e8 f3 bc fe ff       	call   f0100387 <_warn>
f0114694:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114697:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011469b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011469f:	74 04                	je     f01146a5 <test_calculate_required_frames+0x3f9>
f01146a1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01146a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01146a9:	83 ec 0c             	sub    $0xc,%esp
f01146ac:	68 89 9c 13 f0       	push   $0xf0139c89
f01146b1:	e8 cc c5 fe ff       	call   f0100c82 <cprintf>
f01146b6:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01146b9:	83 ec 0c             	sub    $0xc,%esp
f01146bc:	68 90 a1 13 f0       	push   $0xf013a190
f01146c1:	e8 bc c5 fe ff       	call   f0100c82 <cprintf>
f01146c6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01146c9:	83 ec 04             	sub    $0x4,%esp
f01146cc:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01146d2:	50                   	push   %eax
f01146d3:	68 42 90 13 f0       	push   $0xf0139042
f01146d8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01146de:	50                   	push   %eax
f01146df:	e8 b2 ca 01 00       	call   f0131196 <strcconcat>
f01146e4:	83 c4 10             	add    $0x10,%esp
f01146e7:	83 ec 0c             	sub    $0xc,%esp
f01146ea:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01146f0:	50                   	push   %eax
f01146f1:	e8 ee c5 fe ff       	call   f0100ce4 <execute_command>
f01146f6:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01146f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01146fc:	c1 e0 03             	shl    $0x3,%eax
f01146ff:	83 ec 04             	sub    $0x4,%esp
f0114702:	50                   	push   %eax
f0114703:	6a 00                	push   $0x0
f0114705:	ff 75 d8             	pushl  -0x28(%ebp)
f0114708:	e8 cb 44 ff ff       	call   f0108bd8 <calculate_required_frames>
f011470d:	83 c4 10             	add    $0x10,%esp
f0114710:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114713:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011471a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011471d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114720:	74 24                	je     f0114746 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114722:	83 ec 0c             	sub    $0xc,%esp
f0114725:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114728:	ff 75 c8             	pushl  -0x38(%ebp)
f011472b:	68 38 a1 13 f0       	push   $0xf013a138
f0114730:	68 10 06 00 00       	push   $0x610
f0114735:	68 3e 85 13 f0       	push   $0xf013853e
f011473a:	e8 48 bc fe ff       	call   f0100387 <_warn>
f011473f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114742:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114746:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011474a:	74 04                	je     f0114750 <test_calculate_required_frames+0x4a4>
f011474c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114750:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114754:	83 ec 04             	sub    $0x4,%esp
f0114757:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011475d:	50                   	push   %eax
f011475e:	68 4f 90 13 f0       	push   $0xf013904f
f0114763:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114769:	50                   	push   %eax
f011476a:	e8 27 ca 01 00       	call   f0131196 <strcconcat>
f011476f:	83 c4 10             	add    $0x10,%esp
f0114772:	83 ec 0c             	sub    $0xc,%esp
f0114775:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011477b:	50                   	push   %eax
f011477c:	e8 63 c5 fe ff       	call   f0100ce4 <execute_command>
f0114781:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114784:	83 ec 04             	sub    $0x4,%esp
f0114787:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011478d:	50                   	push   %eax
f011478e:	68 c4 a1 13 f0       	push   $0xf013a1c4
f0114793:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114799:	50                   	push   %eax
f011479a:	e8 f7 c9 01 00       	call   f0131196 <strcconcat>
f011479f:	83 c4 10             	add    $0x10,%esp
f01147a2:	83 ec 0c             	sub    $0xc,%esp
f01147a5:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01147ab:	50                   	push   %eax
f01147ac:	e8 33 c5 fe ff       	call   f0100ce4 <execute_command>
f01147b1:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01147b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01147b7:	c1 e0 03             	shl    $0x3,%eax
f01147ba:	83 ec 04             	sub    $0x4,%esp
f01147bd:	50                   	push   %eax
f01147be:	6a 00                	push   $0x0
f01147c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01147c3:	e8 10 44 ff ff       	call   f0108bd8 <calculate_required_frames>
f01147c8:	83 c4 10             	add    $0x10,%esp
f01147cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01147ce:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01147d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147d8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01147db:	74 24                	je     f0114801 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01147dd:	83 ec 0c             	sub    $0xc,%esp
f01147e0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01147e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01147e6:	68 38 a1 13 f0       	push   $0xf013a138
f01147eb:	68 1e 06 00 00       	push   $0x61e
f01147f0:	68 3e 85 13 f0       	push   $0xf013853e
f01147f5:	e8 8d bb fe ff       	call   f0100387 <_warn>
f01147fa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114801:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114805:	74 04                	je     f011480b <test_calculate_required_frames+0x55f>
f0114807:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011480b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011480f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114812:	c1 e0 0a             	shl    $0xa,%eax
f0114815:	83 ec 04             	sub    $0x4,%esp
f0114818:	50                   	push   %eax
f0114819:	6a 00                	push   $0x0
f011481b:	ff 75 d8             	pushl  -0x28(%ebp)
f011481e:	e8 b5 43 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114823:	83 c4 10             	add    $0x10,%esp
f0114826:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0114829:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011482c:	c1 e0 0a             	shl    $0xa,%eax
f011482f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114832:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114839:	99                   	cltd   
f011483a:	f7 fb                	idiv   %ebx
f011483c:	89 c1                	mov    %eax,%ecx
f011483e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114841:	c1 e0 0a             	shl    $0xa,%eax
f0114844:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114847:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011484e:	99                   	cltd   
f011484f:	f7 fe                	idiv   %esi
f0114851:	01 c8                	add    %ecx,%eax
f0114853:	83 e8 05             	sub    $0x5,%eax
f0114856:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0114859:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011485c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011485f:	74 24                	je     f0114885 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114861:	83 ec 0c             	sub    $0xc,%esp
f0114864:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114867:	ff 75 c8             	pushl  -0x38(%ebp)
f011486a:	68 38 a1 13 f0       	push   $0xf013a138
f011486f:	68 29 06 00 00       	push   $0x629
f0114874:	68 3e 85 13 f0       	push   $0xf013853e
f0114879:	e8 09 bb fe ff       	call   f0100387 <_warn>
f011487e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114881:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114885:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114889:	74 04                	je     f011488f <test_calculate_required_frames+0x5e3>
f011488b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011488f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114893:	83 ec 04             	sub    $0x4,%esp
f0114896:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011489c:	50                   	push   %eax
f011489d:	68 d0 a1 13 f0       	push   $0xf013a1d0
f01148a2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01148a8:	50                   	push   %eax
f01148a9:	e8 e8 c8 01 00       	call   f0131196 <strcconcat>
f01148ae:	83 c4 10             	add    $0x10,%esp
f01148b1:	83 ec 0c             	sub    $0xc,%esp
f01148b4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01148ba:	50                   	push   %eax
f01148bb:	e8 24 c4 fe ff       	call   f0100ce4 <execute_command>
f01148c0:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01148c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148c6:	89 c2                	mov    %eax,%edx
f01148c8:	01 d2                	add    %edx,%edx
f01148ca:	01 d0                	add    %edx,%eax
f01148cc:	83 ec 04             	sub    $0x4,%esp
f01148cf:	50                   	push   %eax
f01148d0:	68 00 18 00 00       	push   $0x1800
f01148d5:	ff 75 d8             	pushl  -0x28(%ebp)
f01148d8:	e8 fb 42 ff ff       	call   f0108bd8 <calculate_required_frames>
f01148dd:	83 c4 10             	add    $0x10,%esp
f01148e0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01148e3:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01148ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148ed:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01148f0:	74 24                	je     f0114916 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01148f2:	83 ec 0c             	sub    $0xc,%esp
f01148f5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01148f8:	ff 75 c8             	pushl  -0x38(%ebp)
f01148fb:	68 38 a1 13 f0       	push   $0xf013a138
f0114900:	68 38 06 00 00       	push   $0x638
f0114905:	68 3e 85 13 f0       	push   $0xf013853e
f011490a:	e8 78 ba fe ff       	call   f0100387 <_warn>
f011490f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114912:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114916:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011491a:	74 04                	je     f0114920 <test_calculate_required_frames+0x674>
f011491c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114920:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114924:	83 ec 04             	sub    $0x4,%esp
f0114927:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011492d:	50                   	push   %eax
f011492e:	68 a8 92 13 f0       	push   $0xf01392a8
f0114933:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114939:	50                   	push   %eax
f011493a:	e8 57 c8 01 00       	call   f0131196 <strcconcat>
f011493f:	83 c4 10             	add    $0x10,%esp
f0114942:	83 ec 0c             	sub    $0xc,%esp
f0114945:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011494b:	50                   	push   %eax
f011494c:	e8 93 c3 fe ff       	call   f0100ce4 <execute_command>
f0114951:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114954:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114957:	89 d0                	mov    %edx,%eax
f0114959:	c1 e0 02             	shl    $0x2,%eax
f011495c:	01 d0                	add    %edx,%eax
f011495e:	01 c0                	add    %eax,%eax
f0114960:	83 ec 04             	sub    $0x4,%esp
f0114963:	50                   	push   %eax
f0114964:	68 00 00 40 00       	push   $0x400000
f0114969:	ff 75 d8             	pushl  -0x28(%ebp)
f011496c:	e8 67 42 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114971:	83 c4 10             	add    $0x10,%esp
f0114974:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0114977:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011497e:	74 26                	je     f01149a6 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114980:	83 ec 0c             	sub    $0xc,%esp
f0114983:	68 03 0a 00 00       	push   $0xa03
f0114988:	ff 75 c8             	pushl  -0x38(%ebp)
f011498b:	68 38 a1 13 f0       	push   $0xf013a138
f0114990:	68 44 06 00 00       	push   $0x644
f0114995:	68 3e 85 13 f0       	push   $0xf013853e
f011499a:	e8 e8 b9 fe ff       	call   f0100387 <_warn>
f011499f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149a6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149aa:	74 04                	je     f01149b0 <test_calculate_required_frames+0x704>
f01149ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149b0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01149b4:	83 ec 04             	sub    $0x4,%esp
f01149b7:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01149bd:	50                   	push   %eax
f01149be:	68 b2 92 13 f0       	push   $0xf01392b2
f01149c3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149c9:	50                   	push   %eax
f01149ca:	e8 c7 c7 01 00       	call   f0131196 <strcconcat>
f01149cf:	83 c4 10             	add    $0x10,%esp
f01149d2:	83 ec 0c             	sub    $0xc,%esp
f01149d5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01149db:	50                   	push   %eax
f01149dc:	e8 03 c3 fe ff       	call   f0100ce4 <execute_command>
f01149e1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01149e4:	83 ec 04             	sub    $0x4,%esp
f01149e7:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01149ed:	50                   	push   %eax
f01149ee:	68 d8 a1 13 f0       	push   $0xf013a1d8
f01149f3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149f9:	50                   	push   %eax
f01149fa:	e8 97 c7 01 00       	call   f0131196 <strcconcat>
f01149ff:	83 c4 10             	add    $0x10,%esp
f0114a02:	83 ec 0c             	sub    $0xc,%esp
f0114a05:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114a0b:	50                   	push   %eax
f0114a0c:	e8 d3 c2 fe ff       	call   f0100ce4 <execute_command>
f0114a11:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114a14:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a17:	01 c0                	add    %eax,%eax
f0114a19:	83 ec 04             	sub    $0x4,%esp
f0114a1c:	50                   	push   %eax
f0114a1d:	68 00 00 70 00       	push   $0x700000
f0114a22:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a25:	e8 ae 41 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114a2a:	83 c4 10             	add    $0x10,%esp
f0114a2d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114a30:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114a37:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a3a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a3d:	74 24                	je     f0114a63 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114a3f:	83 ec 0c             	sub    $0xc,%esp
f0114a42:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114a45:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a48:	68 38 a1 13 f0       	push   $0xf013a138
f0114a4d:	68 54 06 00 00       	push   $0x654
f0114a52:	68 3e 85 13 f0       	push   $0xf013853e
f0114a57:	e8 2b b9 fe ff       	call   f0100387 <_warn>
f0114a5c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a5f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114a63:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a67:	74 04                	je     f0114a6d <test_calculate_required_frames+0x7c1>
f0114a69:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a6d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114a71:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a74:	83 ec 04             	sub    $0x4,%esp
f0114a77:	50                   	push   %eax
f0114a78:	68 ff ff 3f 00       	push   $0x3fffff
f0114a7d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a80:	e8 53 41 ff ff       	call   f0108bd8 <calculate_required_frames>
f0114a85:	83 c4 10             	add    $0x10,%esp
f0114a88:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0114a8b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0114a92:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a95:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a98:	74 24                	je     f0114abe <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114a9a:	83 ec 0c             	sub    $0xc,%esp
f0114a9d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114aa0:	ff 75 c8             	pushl  -0x38(%ebp)
f0114aa3:	68 38 a1 13 f0       	push   $0xf013a138
f0114aa8:	68 5f 06 00 00       	push   $0x65f
f0114aad:	68 3e 85 13 f0       	push   $0xf013853e
f0114ab2:	e8 d0 b8 fe ff       	call   f0100387 <_warn>
f0114ab7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114aba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114abe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ac2:	74 04                	je     f0114ac8 <test_calculate_required_frames+0x81c>
f0114ac4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ac8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114acc:	83 ec 0c             	sub    $0xc,%esp
f0114acf:	68 63 92 13 f0       	push   $0xf0139263
f0114ad4:	e8 a9 c1 fe ff       	call   f0100c82 <cprintf>
f0114ad9:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114adc:	83 ec 08             	sub    $0x8,%esp
f0114adf:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114ae2:	68 e4 a1 13 f0       	push   $0xf013a1e4
f0114ae7:	e8 96 c1 fe ff       	call   f0100c82 <cprintf>
f0114aec:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114aef:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114af3:	75 10                	jne    f0114b05 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114af5:	83 ec 0c             	sub    $0xc,%esp
f0114af8:	68 24 a2 13 f0       	push   $0xf013a224
f0114afd:	e8 80 c1 fe ff       	call   f0100c82 <cprintf>
f0114b02:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114b05:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0114b0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114b0d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114b10:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114b13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114b18:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114b1b:	5b                   	pop    %ebx
f0114b1c:	5e                   	pop    %esi
f0114b1d:	5f                   	pop    %edi
f0114b1e:	5d                   	pop    %ebp
f0114b1f:	c3                   	ret    

f0114b20 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114b20:	55                   	push   %ebp
f0114b21:	89 e5                	mov    %esp,%ebp
f0114b23:	57                   	push   %edi
f0114b24:	56                   	push   %esi
f0114b25:	53                   	push   %ebx
f0114b26:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114b2c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114b2f:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0114b34:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b39:	89 c7                	mov    %eax,%edi
f0114b3b:	89 de                	mov    %ebx,%esi
f0114b3d:	89 d1                	mov    %edx,%ecx
f0114b3f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b41:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114b44:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114b49:	b0 00                	mov    $0x0,%al
f0114b4b:	89 d7                	mov    %edx,%edi
f0114b4d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114b4f:	6a 00                	push   $0x0
f0114b51:	6a 0a                	push   $0xa
f0114b53:	6a 14                	push   $0x14
f0114b55:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114b58:	50                   	push   %eax
f0114b59:	e8 0b 41 ff ff       	call   f0108c69 <env_create>
f0114b5e:	83 c4 10             	add    $0x10,%esp
f0114b61:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114b64:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b67:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114b6a:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114b6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b70:	8b 40 60             	mov    0x60(%eax),%eax
f0114b73:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114b76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b79:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114b7c:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114b83:	75 70 20 
f0114b86:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114b8d:	00 00 00 
f0114b90:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114b93:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114b98:	b8 00 00 00 00       	mov    $0x0,%eax
f0114b9d:	89 d7                	mov    %edx,%edi
f0114b9f:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114ba1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114ba4:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114ba7:	83 ec 08             	sub    $0x8,%esp
f0114baa:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114bb0:	52                   	push   %edx
f0114bb1:	50                   	push   %eax
f0114bb2:	e8 e7 c4 01 00       	call   f013109e <ltostr>
f0114bb7:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114bba:	83 ec 04             	sub    $0x4,%esp
f0114bbd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114bc3:	50                   	push   %eax
f0114bc4:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114bca:	50                   	push   %eax
f0114bcb:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114bd1:	50                   	push   %eax
f0114bd2:	e8 bf c5 01 00       	call   f0131196 <strcconcat>
f0114bd7:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114bda:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114be1:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114be8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114bef:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114bf3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114bfa:	00 00 00 
	uint32 num_tables = 0;
f0114bfd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114c04:	00 00 00 
	ClearUserSpace(proc_directory);
f0114c07:	83 ec 0c             	sub    $0xc,%esp
f0114c0a:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c0d:	e8 8d 0e 00 00       	call   f0115a9f <ClearUserSpace>
f0114c12:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114c15:	83 ec 0c             	sub    $0xc,%esp
f0114c18:	68 04 a1 13 f0       	push   $0xf013a104
f0114c1d:	e8 60 c0 fe ff       	call   f0100c82 <cprintf>
f0114c22:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114c25:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c28:	c1 e0 03             	shl    $0x3,%eax
f0114c2b:	89 c2                	mov    %eax,%edx
f0114c2d:	83 ec 0c             	sub    $0xc,%esp
f0114c30:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114c36:	50                   	push   %eax
f0114c37:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114c3d:	50                   	push   %eax
f0114c3e:	52                   	push   %edx
f0114c3f:	6a 00                	push   $0x0
f0114c41:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c44:	e8 72 3f ff ff       	call   f0108bbb <calculate_allocated_space>
f0114c49:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114c4c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c52:	85 c0                	test   %eax,%eax
f0114c54:	74 27                	je     f0114c7d <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114c56:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c5c:	83 ec 0c             	sub    $0xc,%esp
f0114c5f:	6a 00                	push   $0x0
f0114c61:	50                   	push   %eax
f0114c62:	68 70 a2 13 f0       	push   $0xf013a270
f0114c67:	68 94 06 00 00       	push   $0x694
f0114c6c:	68 3e 85 13 f0       	push   $0xf013853e
f0114c71:	e8 11 b7 fe ff       	call   f0100387 <_warn>
f0114c76:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c79:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114c7d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c83:	85 c0                	test   %eax,%eax
f0114c85:	74 27                	je     f0114cae <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114c87:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c8d:	83 ec 0c             	sub    $0xc,%esp
f0114c90:	6a 00                	push   $0x0
f0114c92:	50                   	push   %eax
f0114c93:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114c98:	68 99 06 00 00       	push   $0x699
f0114c9d:	68 3e 85 13 f0       	push   $0xf013853e
f0114ca2:	e8 e0 b6 fe ff       	call   f0100387 <_warn>
f0114ca7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114caa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114cae:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cb2:	74 04                	je     f0114cb8 <test_calculate_allocated_space+0x198>
f0114cb4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114cb8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0114cbc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114cc3:	00 00 00 
		num_pages = 0;
f0114cc6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ccd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114cd0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114cd3:	c1 e0 02             	shl    $0x2,%eax
f0114cd6:	89 c2                	mov    %eax,%edx
f0114cd8:	83 ec 0c             	sub    $0xc,%esp
f0114cdb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114ce1:	50                   	push   %eax
f0114ce2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114ce8:	50                   	push   %eax
f0114ce9:	52                   	push   %edx
f0114cea:	6a 00                	push   $0x0
f0114cec:	ff 75 d8             	pushl  -0x28(%ebp)
f0114cef:	e8 c7 3e ff ff       	call   f0108bbb <calculate_allocated_space>
f0114cf4:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114cf7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114cfd:	85 c0                	test   %eax,%eax
f0114cff:	74 27                	je     f0114d28 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114d01:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d07:	83 ec 0c             	sub    $0xc,%esp
f0114d0a:	6a 00                	push   $0x0
f0114d0c:	50                   	push   %eax
f0114d0d:	68 70 a2 13 f0       	push   $0xf013a270
f0114d12:	68 a5 06 00 00       	push   $0x6a5
f0114d17:	68 3e 85 13 f0       	push   $0xf013853e
f0114d1c:	e8 66 b6 fe ff       	call   f0100387 <_warn>
f0114d21:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d24:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114d28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d2e:	85 c0                	test   %eax,%eax
f0114d30:	74 27                	je     f0114d59 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114d32:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d38:	83 ec 0c             	sub    $0xc,%esp
f0114d3b:	6a 00                	push   $0x0
f0114d3d:	50                   	push   %eax
f0114d3e:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114d43:	68 aa 06 00 00       	push   $0x6aa
f0114d48:	68 3e 85 13 f0       	push   $0xf013853e
f0114d4d:	e8 35 b6 fe ff       	call   f0100387 <_warn>
f0114d52:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d55:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d59:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d5d:	74 04                	je     f0114d63 <test_calculate_allocated_space+0x243>
f0114d5f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d63:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114d67:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114d6e:	00 00 00 
		num_pages = 0;
f0114d71:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114d78:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114d7b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d7e:	c1 e0 0a             	shl    $0xa,%eax
f0114d81:	89 c2                	mov    %eax,%edx
f0114d83:	83 ec 0c             	sub    $0xc,%esp
f0114d86:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114d8c:	50                   	push   %eax
f0114d8d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114d93:	50                   	push   %eax
f0114d94:	52                   	push   %edx
f0114d95:	6a 00                	push   $0x0
f0114d97:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d9a:	e8 1c 3e ff ff       	call   f0108bbb <calculate_allocated_space>
f0114d9f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114da2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114da8:	85 c0                	test   %eax,%eax
f0114daa:	74 27                	je     f0114dd3 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114dac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114db2:	83 ec 0c             	sub    $0xc,%esp
f0114db5:	6a 00                	push   $0x0
f0114db7:	50                   	push   %eax
f0114db8:	68 70 a2 13 f0       	push   $0xf013a270
f0114dbd:	68 b6 06 00 00       	push   $0x6b6
f0114dc2:	68 3e 85 13 f0       	push   $0xf013853e
f0114dc7:	e8 bb b5 fe ff       	call   f0100387 <_warn>
f0114dcc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114dcf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114dd3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dd9:	85 c0                	test   %eax,%eax
f0114ddb:	74 27                	je     f0114e04 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114ddd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114de3:	83 ec 0c             	sub    $0xc,%esp
f0114de6:	6a 00                	push   $0x0
f0114de8:	50                   	push   %eax
f0114de9:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114dee:	68 bb 06 00 00       	push   $0x6bb
f0114df3:	68 3e 85 13 f0       	push   $0xf013853e
f0114df8:	e8 8a b5 fe ff       	call   f0100387 <_warn>
f0114dfd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e00:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e04:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e08:	74 04                	je     f0114e0e <test_calculate_allocated_space+0x2ee>
f0114e0a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e0e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114e12:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114e19:	00 00 00 
		num_pages = 0;
f0114e1c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114e23:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114e26:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e29:	89 d0                	mov    %edx,%eax
f0114e2b:	01 c0                	add    %eax,%eax
f0114e2d:	01 d0                	add    %edx,%eax
f0114e2f:	01 c0                	add    %eax,%eax
f0114e31:	05 00 10 00 00       	add    $0x1000,%eax
f0114e36:	89 c2                	mov    %eax,%edx
f0114e38:	83 ec 0c             	sub    $0xc,%esp
f0114e3b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e41:	50                   	push   %eax
f0114e42:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e48:	50                   	push   %eax
f0114e49:	52                   	push   %edx
f0114e4a:	68 00 10 00 00       	push   $0x1000
f0114e4f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e52:	e8 64 3d ff ff       	call   f0108bbb <calculate_allocated_space>
f0114e57:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114e5a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e60:	85 c0                	test   %eax,%eax
f0114e62:	74 27                	je     f0114e8b <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114e64:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e6a:	83 ec 0c             	sub    $0xc,%esp
f0114e6d:	6a 00                	push   $0x0
f0114e6f:	50                   	push   %eax
f0114e70:	68 70 a2 13 f0       	push   $0xf013a270
f0114e75:	68 c8 06 00 00       	push   $0x6c8
f0114e7a:	68 3e 85 13 f0       	push   $0xf013853e
f0114e7f:	e8 03 b5 fe ff       	call   f0100387 <_warn>
f0114e84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114e8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e91:	85 c0                	test   %eax,%eax
f0114e93:	74 27                	je     f0114ebc <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114e95:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e9b:	83 ec 0c             	sub    $0xc,%esp
f0114e9e:	6a 00                	push   $0x0
f0114ea0:	50                   	push   %eax
f0114ea1:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114ea6:	68 cd 06 00 00       	push   $0x6cd
f0114eab:	68 3e 85 13 f0       	push   $0xf013853e
f0114eb0:	e8 d2 b4 fe ff       	call   f0100387 <_warn>
f0114eb5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114eb8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ebc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ec0:	74 04                	je     f0114ec6 <test_calculate_allocated_space+0x3a6>
f0114ec2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ec6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0114eca:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ed1:	00 00 00 
		num_pages = 0;
f0114ed4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114edb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114ede:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ee1:	89 c2                	mov    %eax,%edx
f0114ee3:	01 d2                	add    %edx,%edx
f0114ee5:	01 d0                	add    %edx,%eax
f0114ee7:	05 00 18 00 00       	add    $0x1800,%eax
f0114eec:	89 c2                	mov    %eax,%edx
f0114eee:	83 ec 0c             	sub    $0xc,%esp
f0114ef1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114ef7:	50                   	push   %eax
f0114ef8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114efe:	50                   	push   %eax
f0114eff:	52                   	push   %edx
f0114f00:	68 00 18 00 00       	push   $0x1800
f0114f05:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f08:	e8 ae 3c ff ff       	call   f0108bbb <calculate_allocated_space>
f0114f0d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114f10:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f16:	85 c0                	test   %eax,%eax
f0114f18:	74 27                	je     f0114f41 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114f1a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f20:	83 ec 0c             	sub    $0xc,%esp
f0114f23:	6a 00                	push   $0x0
f0114f25:	50                   	push   %eax
f0114f26:	68 70 a2 13 f0       	push   $0xf013a270
f0114f2b:	68 d9 06 00 00       	push   $0x6d9
f0114f30:	68 3e 85 13 f0       	push   $0xf013853e
f0114f35:	e8 4d b4 fe ff       	call   f0100387 <_warn>
f0114f3a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f3d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114f41:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f47:	85 c0                	test   %eax,%eax
f0114f49:	74 27                	je     f0114f72 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114f4b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f51:	83 ec 0c             	sub    $0xc,%esp
f0114f54:	6a 00                	push   $0x0
f0114f56:	50                   	push   %eax
f0114f57:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114f5c:	68 de 06 00 00       	push   $0x6de
f0114f61:	68 3e 85 13 f0       	push   $0xf013853e
f0114f66:	e8 1c b4 fe ff       	call   f0100387 <_warn>
f0114f6b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f6e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f72:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f76:	74 04                	je     f0114f7c <test_calculate_allocated_space+0x45c>
f0114f78:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f7c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0114f80:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114f87:	00 00 00 
		num_pages = 0;
f0114f8a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114f91:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114f94:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f97:	89 d0                	mov    %edx,%eax
f0114f99:	c1 e0 02             	shl    $0x2,%eax
f0114f9c:	01 d0                	add    %edx,%eax
f0114f9e:	01 c0                	add    %eax,%eax
f0114fa0:	05 00 00 40 00       	add    $0x400000,%eax
f0114fa5:	89 c2                	mov    %eax,%edx
f0114fa7:	83 ec 0c             	sub    $0xc,%esp
f0114faa:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114fb0:	50                   	push   %eax
f0114fb1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114fb7:	50                   	push   %eax
f0114fb8:	52                   	push   %edx
f0114fb9:	68 00 00 40 00       	push   $0x400000
f0114fbe:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fc1:	e8 f5 3b ff ff       	call   f0108bbb <calculate_allocated_space>
f0114fc6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114fc9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fcf:	85 c0                	test   %eax,%eax
f0114fd1:	74 27                	je     f0114ffa <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114fd3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fd9:	83 ec 0c             	sub    $0xc,%esp
f0114fdc:	6a 00                	push   $0x0
f0114fde:	50                   	push   %eax
f0114fdf:	68 70 a2 13 f0       	push   $0xf013a270
f0114fe4:	68 ea 06 00 00       	push   $0x6ea
f0114fe9:	68 3e 85 13 f0       	push   $0xf013853e
f0114fee:	e8 94 b3 fe ff       	call   f0100387 <_warn>
f0114ff3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ff6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114ffa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115000:	85 c0                	test   %eax,%eax
f0115002:	74 27                	je     f011502b <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115004:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011500a:	83 ec 0c             	sub    $0xc,%esp
f011500d:	6a 00                	push   $0x0
f011500f:	50                   	push   %eax
f0115010:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115015:	68 ef 06 00 00       	push   $0x6ef
f011501a:	68 3e 85 13 f0       	push   $0xf013853e
f011501f:	e8 63 b3 fe ff       	call   f0100387 <_warn>
f0115024:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115027:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011502b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011502f:	74 04                	je     f0115035 <test_calculate_allocated_space+0x515>
f0115031:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115035:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115039:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115040:	00 00 00 
		num_pages = 0;
f0115043:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011504a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011504d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115050:	05 00 00 38 00       	add    $0x380000,%eax
f0115055:	01 c0                	add    %eax,%eax
f0115057:	89 c2                	mov    %eax,%edx
f0115059:	83 ec 0c             	sub    $0xc,%esp
f011505c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115062:	50                   	push   %eax
f0115063:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115069:	50                   	push   %eax
f011506a:	52                   	push   %edx
f011506b:	68 00 00 70 00       	push   $0x700000
f0115070:	ff 75 d8             	pushl  -0x28(%ebp)
f0115073:	e8 43 3b ff ff       	call   f0108bbb <calculate_allocated_space>
f0115078:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011507b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115081:	85 c0                	test   %eax,%eax
f0115083:	74 27                	je     f01150ac <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115085:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011508b:	83 ec 0c             	sub    $0xc,%esp
f011508e:	6a 00                	push   $0x0
f0115090:	50                   	push   %eax
f0115091:	68 70 a2 13 f0       	push   $0xf013a270
f0115096:	68 fc 06 00 00       	push   $0x6fc
f011509b:	68 3e 85 13 f0       	push   $0xf013853e
f01150a0:	e8 e2 b2 fe ff       	call   f0100387 <_warn>
f01150a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01150ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150b2:	85 c0                	test   %eax,%eax
f01150b4:	74 27                	je     f01150dd <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01150b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150bc:	83 ec 0c             	sub    $0xc,%esp
f01150bf:	6a 00                	push   $0x0
f01150c1:	50                   	push   %eax
f01150c2:	68 d0 a2 13 f0       	push   $0xf013a2d0
f01150c7:	68 01 07 00 00       	push   $0x701
f01150cc:	68 3e 85 13 f0       	push   $0xf013853e
f01150d1:	e8 b1 b2 fe ff       	call   f0100387 <_warn>
f01150d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01150dd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150e1:	74 04                	je     f01150e7 <test_calculate_allocated_space+0x5c7>
f01150e3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01150e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f01150eb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01150f2:	00 00 00 
		num_pages = 0;
f01150f5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01150fc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01150ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115102:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115107:	89 c2                	mov    %eax,%edx
f0115109:	83 ec 0c             	sub    $0xc,%esp
f011510c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115112:	50                   	push   %eax
f0115113:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115119:	50                   	push   %eax
f011511a:	52                   	push   %edx
f011511b:	68 ff ff 3f 00       	push   $0x3fffff
f0115120:	ff 75 d8             	pushl  -0x28(%ebp)
f0115123:	e8 93 3a ff ff       	call   f0108bbb <calculate_allocated_space>
f0115128:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011512b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115131:	85 c0                	test   %eax,%eax
f0115133:	74 27                	je     f011515c <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115135:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011513b:	83 ec 0c             	sub    $0xc,%esp
f011513e:	6a 00                	push   $0x0
f0115140:	50                   	push   %eax
f0115141:	68 70 a2 13 f0       	push   $0xf013a270
f0115146:	68 0d 07 00 00       	push   $0x70d
f011514b:	68 3e 85 13 f0       	push   $0xf013853e
f0115150:	e8 32 b2 fe ff       	call   f0100387 <_warn>
f0115155:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115158:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011515c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115162:	85 c0                	test   %eax,%eax
f0115164:	74 27                	je     f011518d <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115166:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011516c:	83 ec 0c             	sub    $0xc,%esp
f011516f:	6a 00                	push   $0x0
f0115171:	50                   	push   %eax
f0115172:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115177:	68 12 07 00 00       	push   $0x712
f011517c:	68 3e 85 13 f0       	push   $0xf013853e
f0115181:	e8 01 b2 fe ff       	call   f0100387 <_warn>
f0115186:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115189:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011518d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115191:	74 04                	je     f0115197 <test_calculate_allocated_space+0x677>
f0115193:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115197:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011519b:	83 ec 0c             	sub    $0xc,%esp
f011519e:	68 89 9c 13 f0       	push   $0xf0139c89
f01151a3:	e8 da ba fe ff       	call   f0100c82 <cprintf>
f01151a8:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01151ab:	83 ec 0c             	sub    $0xc,%esp
f01151ae:	68 90 a1 13 f0       	push   $0xf013a190
f01151b3:	e8 ca ba fe ff       	call   f0100c82 <cprintf>
f01151b8:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01151bb:	83 ec 04             	sub    $0x4,%esp
f01151be:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01151c4:	50                   	push   %eax
f01151c5:	68 42 90 13 f0       	push   $0xf0139042
f01151ca:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151d0:	50                   	push   %eax
f01151d1:	e8 c0 bf 01 00       	call   f0131196 <strcconcat>
f01151d6:	83 c4 10             	add    $0x10,%esp
f01151d9:	83 ec 0c             	sub    $0xc,%esp
f01151dc:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01151e2:	50                   	push   %eax
f01151e3:	e8 fc ba fe ff       	call   f0100ce4 <execute_command>
f01151e8:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01151eb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151f2:	00 00 00 
		num_pages = 0;
f01151f5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151fc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01151ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115202:	c1 e0 03             	shl    $0x3,%eax
f0115205:	89 c2                	mov    %eax,%edx
f0115207:	83 ec 0c             	sub    $0xc,%esp
f011520a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115210:	50                   	push   %eax
f0115211:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115217:	50                   	push   %eax
f0115218:	52                   	push   %edx
f0115219:	6a 00                	push   $0x0
f011521b:	ff 75 d8             	pushl  -0x28(%ebp)
f011521e:	e8 98 39 ff ff       	call   f0108bbb <calculate_allocated_space>
f0115223:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115226:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f011522d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115234:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011523a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011523d:	74 28                	je     f0115267 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011523f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115245:	83 ec 0c             	sub    $0xc,%esp
f0115248:	ff 75 c8             	pushl  -0x38(%ebp)
f011524b:	50                   	push   %eax
f011524c:	68 70 a2 13 f0       	push   $0xf013a270
f0115251:	68 29 07 00 00       	push   $0x729
f0115256:	68 3e 85 13 f0       	push   $0xf013853e
f011525b:	e8 27 b1 fe ff       	call   f0100387 <_warn>
f0115260:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115263:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115267:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011526d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115270:	74 28                	je     f011529a <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115272:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115278:	83 ec 0c             	sub    $0xc,%esp
f011527b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011527e:	50                   	push   %eax
f011527f:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115284:	68 2e 07 00 00       	push   $0x72e
f0115289:	68 3e 85 13 f0       	push   $0xf013853e
f011528e:	e8 f4 b0 fe ff       	call   f0100387 <_warn>
f0115293:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115296:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011529a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011529e:	74 04                	je     f01152a4 <test_calculate_allocated_space+0x784>
f01152a0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152a4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01152a8:	83 ec 04             	sub    $0x4,%esp
f01152ab:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01152b1:	50                   	push   %eax
f01152b2:	68 4f 90 13 f0       	push   $0xf013904f
f01152b7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152bd:	50                   	push   %eax
f01152be:	e8 d3 be 01 00       	call   f0131196 <strcconcat>
f01152c3:	83 c4 10             	add    $0x10,%esp
f01152c6:	83 ec 0c             	sub    $0xc,%esp
f01152c9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01152cf:	50                   	push   %eax
f01152d0:	e8 0f ba fe ff       	call   f0100ce4 <execute_command>
f01152d5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01152d8:	83 ec 04             	sub    $0x4,%esp
f01152db:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01152e1:	50                   	push   %eax
f01152e2:	68 c4 a1 13 f0       	push   $0xf013a1c4
f01152e7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152ed:	50                   	push   %eax
f01152ee:	e8 a3 be 01 00       	call   f0131196 <strcconcat>
f01152f3:	83 c4 10             	add    $0x10,%esp
f01152f6:	83 ec 0c             	sub    $0xc,%esp
f01152f9:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01152ff:	50                   	push   %eax
f0115300:	e8 df b9 fe ff       	call   f0100ce4 <execute_command>
f0115305:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115308:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011530f:	00 00 00 
		num_pages = 0;
f0115312:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115319:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f011531c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011531f:	c1 e0 03             	shl    $0x3,%eax
f0115322:	89 c2                	mov    %eax,%edx
f0115324:	83 ec 0c             	sub    $0xc,%esp
f0115327:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011532d:	50                   	push   %eax
f011532e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115334:	50                   	push   %eax
f0115335:	52                   	push   %edx
f0115336:	6a 00                	push   $0x0
f0115338:	ff 75 d8             	pushl  -0x28(%ebp)
f011533b:	e8 7b 38 ff ff       	call   f0108bbb <calculate_allocated_space>
f0115340:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115343:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011534a:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115351:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115357:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011535a:	74 28                	je     f0115384 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011535c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115362:	83 ec 0c             	sub    $0xc,%esp
f0115365:	ff 75 c8             	pushl  -0x38(%ebp)
f0115368:	50                   	push   %eax
f0115369:	68 70 a2 13 f0       	push   $0xf013a270
f011536e:	68 3f 07 00 00       	push   $0x73f
f0115373:	68 3e 85 13 f0       	push   $0xf013853e
f0115378:	e8 0a b0 fe ff       	call   f0100387 <_warn>
f011537d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115380:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115384:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011538a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011538d:	74 28                	je     f01153b7 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011538f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115395:	83 ec 0c             	sub    $0xc,%esp
f0115398:	ff 75 c4             	pushl  -0x3c(%ebp)
f011539b:	50                   	push   %eax
f011539c:	68 d0 a2 13 f0       	push   $0xf013a2d0
f01153a1:	68 44 07 00 00       	push   $0x744
f01153a6:	68 3e 85 13 f0       	push   $0xf013853e
f01153ab:	e8 d7 af fe ff       	call   f0100387 <_warn>
f01153b0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153b3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153b7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153bb:	74 04                	je     f01153c1 <test_calculate_allocated_space+0x8a1>
f01153bd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153c1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01153c5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01153cc:	00 00 00 
		num_pages = 0;
f01153cf:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01153d6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01153d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153dc:	c1 e0 0a             	shl    $0xa,%eax
f01153df:	89 c2                	mov    %eax,%edx
f01153e1:	83 ec 0c             	sub    $0xc,%esp
f01153e4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01153ea:	50                   	push   %eax
f01153eb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01153f1:	50                   	push   %eax
f01153f2:	52                   	push   %edx
f01153f3:	6a 00                	push   $0x0
f01153f5:	ff 75 d8             	pushl  -0x28(%ebp)
f01153f8:	e8 be 37 ff ff       	call   f0108bbb <calculate_allocated_space>
f01153fd:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115400:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115407:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011540e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115414:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115417:	74 28                	je     f0115441 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115419:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011541f:	83 ec 0c             	sub    $0xc,%esp
f0115422:	ff 75 c8             	pushl  -0x38(%ebp)
f0115425:	50                   	push   %eax
f0115426:	68 70 a2 13 f0       	push   $0xf013a270
f011542b:	68 52 07 00 00       	push   $0x752
f0115430:	68 3e 85 13 f0       	push   $0xf013853e
f0115435:	e8 4d af fe ff       	call   f0100387 <_warn>
f011543a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011543d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115441:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115447:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011544a:	74 28                	je     f0115474 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011544c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115452:	83 ec 0c             	sub    $0xc,%esp
f0115455:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115458:	50                   	push   %eax
f0115459:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011545e:	68 57 07 00 00       	push   $0x757
f0115463:	68 3e 85 13 f0       	push   $0xf013853e
f0115468:	e8 1a af fe ff       	call   f0100387 <_warn>
f011546d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115470:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115474:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115478:	74 04                	je     f011547e <test_calculate_allocated_space+0x95e>
f011547a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011547e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115482:	83 ec 04             	sub    $0x4,%esp
f0115485:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011548b:	50                   	push   %eax
f011548c:	68 d0 a1 13 f0       	push   $0xf013a1d0
f0115491:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115497:	50                   	push   %eax
f0115498:	e8 f9 bc 01 00       	call   f0131196 <strcconcat>
f011549d:	83 c4 10             	add    $0x10,%esp
f01154a0:	83 ec 0c             	sub    $0xc,%esp
f01154a3:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01154a9:	50                   	push   %eax
f01154aa:	e8 35 b8 fe ff       	call   f0100ce4 <execute_command>
f01154af:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01154b2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01154b9:	00 00 00 
		num_pages = 0;
f01154bc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154c3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01154c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154c9:	89 c2                	mov    %eax,%edx
f01154cb:	01 d2                	add    %edx,%edx
f01154cd:	01 d0                	add    %edx,%eax
f01154cf:	05 00 18 00 00       	add    $0x1800,%eax
f01154d4:	89 c2                	mov    %eax,%edx
f01154d6:	83 ec 0c             	sub    $0xc,%esp
f01154d9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154df:	50                   	push   %eax
f01154e0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154e6:	50                   	push   %eax
f01154e7:	52                   	push   %edx
f01154e8:	68 00 18 00 00       	push   $0x1800
f01154ed:	ff 75 d8             	pushl  -0x28(%ebp)
f01154f0:	e8 c6 36 ff ff       	call   f0108bbb <calculate_allocated_space>
f01154f5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01154f8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01154ff:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115506:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011550c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011550f:	74 28                	je     f0115539 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115511:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115517:	83 ec 0c             	sub    $0xc,%esp
f011551a:	ff 75 c8             	pushl  -0x38(%ebp)
f011551d:	50                   	push   %eax
f011551e:	68 70 a2 13 f0       	push   $0xf013a270
f0115523:	68 68 07 00 00       	push   $0x768
f0115528:	68 3e 85 13 f0       	push   $0xf013853e
f011552d:	e8 55 ae fe ff       	call   f0100387 <_warn>
f0115532:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115535:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115539:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011553f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115542:	74 28                	je     f011556c <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115544:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011554a:	83 ec 0c             	sub    $0xc,%esp
f011554d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115550:	50                   	push   %eax
f0115551:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115556:	68 6d 07 00 00       	push   $0x76d
f011555b:	68 3e 85 13 f0       	push   $0xf013853e
f0115560:	e8 22 ae fe ff       	call   f0100387 <_warn>
f0115565:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115568:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011556c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115570:	74 04                	je     f0115576 <test_calculate_allocated_space+0xa56>
f0115572:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115576:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011557a:	83 ec 04             	sub    $0x4,%esp
f011557d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115583:	50                   	push   %eax
f0115584:	68 a8 92 13 f0       	push   $0xf01392a8
f0115589:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011558f:	50                   	push   %eax
f0115590:	e8 01 bc 01 00       	call   f0131196 <strcconcat>
f0115595:	83 c4 10             	add    $0x10,%esp
f0115598:	83 ec 0c             	sub    $0xc,%esp
f011559b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01155a1:	50                   	push   %eax
f01155a2:	e8 3d b7 fe ff       	call   f0100ce4 <execute_command>
f01155a7:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01155aa:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01155b1:	00 00 00 
		num_pages = 0;
f01155b4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01155bb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01155be:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01155c1:	89 d0                	mov    %edx,%eax
f01155c3:	c1 e0 02             	shl    $0x2,%eax
f01155c6:	01 d0                	add    %edx,%eax
f01155c8:	01 c0                	add    %eax,%eax
f01155ca:	05 00 00 40 00       	add    $0x400000,%eax
f01155cf:	89 c2                	mov    %eax,%edx
f01155d1:	83 ec 0c             	sub    $0xc,%esp
f01155d4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01155da:	50                   	push   %eax
f01155db:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01155e1:	50                   	push   %eax
f01155e2:	52                   	push   %edx
f01155e3:	68 00 00 40 00       	push   $0x400000
f01155e8:	ff 75 d8             	pushl  -0x28(%ebp)
f01155eb:	e8 cb 35 ff ff       	call   f0108bbb <calculate_allocated_space>
f01155f0:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01155f3:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01155fa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115601:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115607:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011560a:	74 28                	je     f0115634 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011560c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115612:	83 ec 0c             	sub    $0xc,%esp
f0115615:	ff 75 c8             	pushl  -0x38(%ebp)
f0115618:	50                   	push   %eax
f0115619:	68 70 a2 13 f0       	push   $0xf013a270
f011561e:	68 7d 07 00 00       	push   $0x77d
f0115623:	68 3e 85 13 f0       	push   $0xf013853e
f0115628:	e8 5a ad fe ff       	call   f0100387 <_warn>
f011562d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115630:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115634:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011563a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011563d:	74 28                	je     f0115667 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011563f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115645:	83 ec 0c             	sub    $0xc,%esp
f0115648:	ff 75 c4             	pushl  -0x3c(%ebp)
f011564b:	50                   	push   %eax
f011564c:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115651:	68 82 07 00 00       	push   $0x782
f0115656:	68 3e 85 13 f0       	push   $0xf013853e
f011565b:	e8 27 ad fe ff       	call   f0100387 <_warn>
f0115660:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115663:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115667:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011566b:	74 04                	je     f0115671 <test_calculate_allocated_space+0xb51>
f011566d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115671:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115675:	83 ec 04             	sub    $0x4,%esp
f0115678:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011567e:	50                   	push   %eax
f011567f:	68 b2 92 13 f0       	push   $0xf01392b2
f0115684:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011568a:	50                   	push   %eax
f011568b:	e8 06 bb 01 00       	call   f0131196 <strcconcat>
f0115690:	83 c4 10             	add    $0x10,%esp
f0115693:	83 ec 0c             	sub    $0xc,%esp
f0115696:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011569c:	50                   	push   %eax
f011569d:	e8 42 b6 fe ff       	call   f0100ce4 <execute_command>
f01156a2:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01156a5:	83 ec 04             	sub    $0x4,%esp
f01156a8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01156ae:	50                   	push   %eax
f01156af:	68 d8 a1 13 f0       	push   $0xf013a1d8
f01156b4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156ba:	50                   	push   %eax
f01156bb:	e8 d6 ba 01 00       	call   f0131196 <strcconcat>
f01156c0:	83 c4 10             	add    $0x10,%esp
f01156c3:	83 ec 0c             	sub    $0xc,%esp
f01156c6:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01156cc:	50                   	push   %eax
f01156cd:	e8 12 b6 fe ff       	call   f0100ce4 <execute_command>
f01156d2:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01156d5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156dc:	00 00 00 
		num_pages = 0;
f01156df:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156e6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01156e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156ec:	05 00 00 38 00       	add    $0x380000,%eax
f01156f1:	01 c0                	add    %eax,%eax
f01156f3:	89 c2                	mov    %eax,%edx
f01156f5:	83 ec 0c             	sub    $0xc,%esp
f01156f8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01156fe:	50                   	push   %eax
f01156ff:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115705:	50                   	push   %eax
f0115706:	52                   	push   %edx
f0115707:	68 00 00 70 00       	push   $0x700000
f011570c:	ff 75 d8             	pushl  -0x28(%ebp)
f011570f:	e8 a7 34 ff ff       	call   f0108bbb <calculate_allocated_space>
f0115714:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115717:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f011571e:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115725:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011572b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011572e:	74 28                	je     f0115758 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115730:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115736:	83 ec 0c             	sub    $0xc,%esp
f0115739:	ff 75 c8             	pushl  -0x38(%ebp)
f011573c:	50                   	push   %eax
f011573d:	68 70 a2 13 f0       	push   $0xf013a270
f0115742:	68 94 07 00 00       	push   $0x794
f0115747:	68 3e 85 13 f0       	push   $0xf013853e
f011574c:	e8 36 ac fe ff       	call   f0100387 <_warn>
f0115751:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115754:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115758:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011575e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115761:	74 28                	je     f011578b <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115763:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115769:	83 ec 0c             	sub    $0xc,%esp
f011576c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011576f:	50                   	push   %eax
f0115770:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115775:	68 99 07 00 00       	push   $0x799
f011577a:	68 3e 85 13 f0       	push   $0xf013853e
f011577f:	e8 03 ac fe ff       	call   f0100387 <_warn>
f0115784:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115787:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011578b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011578f:	74 04                	je     f0115795 <test_calculate_allocated_space+0xc75>
f0115791:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115795:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0115799:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01157a0:	00 00 00 
		num_pages = 0;
f01157a3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01157aa:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01157ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157b0:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01157b5:	89 c2                	mov    %eax,%edx
f01157b7:	83 ec 0c             	sub    $0xc,%esp
f01157ba:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157c0:	50                   	push   %eax
f01157c1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157c7:	50                   	push   %eax
f01157c8:	52                   	push   %edx
f01157c9:	68 ff ff 3f 00       	push   $0x3fffff
f01157ce:	ff 75 d8             	pushl  -0x28(%ebp)
f01157d1:	e8 e5 33 ff ff       	call   f0108bbb <calculate_allocated_space>
f01157d6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01157d9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01157e0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01157e7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157ed:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01157f0:	74 28                	je     f011581a <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01157f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157f8:	83 ec 0c             	sub    $0xc,%esp
f01157fb:	ff 75 c8             	pushl  -0x38(%ebp)
f01157fe:	50                   	push   %eax
f01157ff:	68 70 a2 13 f0       	push   $0xf013a270
f0115804:	68 a7 07 00 00       	push   $0x7a7
f0115809:	68 3e 85 13 f0       	push   $0xf013853e
f011580e:	e8 74 ab fe ff       	call   f0100387 <_warn>
f0115813:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115816:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011581a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115820:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115823:	74 28                	je     f011584d <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115825:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011582b:	83 ec 0c             	sub    $0xc,%esp
f011582e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115831:	50                   	push   %eax
f0115832:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115837:	68 ac 07 00 00       	push   $0x7ac
f011583c:	68 3e 85 13 f0       	push   $0xf013853e
f0115841:	e8 41 ab fe ff       	call   f0100387 <_warn>
f0115846:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115849:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011584d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115851:	74 04                	je     f0115857 <test_calculate_allocated_space+0xd37>
f0115853:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115857:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011585b:	83 ec 0c             	sub    $0xc,%esp
f011585e:	68 63 92 13 f0       	push   $0xf0139263
f0115863:	e8 1a b4 fe ff       	call   f0100c82 <cprintf>
f0115868:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f011586b:	83 ec 08             	sub    $0x8,%esp
f011586e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115871:	68 2c a3 13 f0       	push   $0xf013a32c
f0115876:	e8 07 b4 fe ff       	call   f0100c82 <cprintf>
f011587b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011587e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115882:	75 10                	jne    f0115894 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0115884:	83 ec 0c             	sub    $0xc,%esp
f0115887:	68 6c a3 13 f0       	push   $0xf013a36c
f011588c:	e8 f1 b3 fe ff       	call   f0100c82 <cprintf>
f0115891:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115894:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0115899:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011589c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011589f:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01158a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01158a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01158aa:	5b                   	pop    %ebx
f01158ab:	5e                   	pop    %esi
f01158ac:	5f                   	pop    %edi
f01158ad:	5d                   	pop    %ebp
f01158ae:	c3                   	ret    

f01158af <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01158af:	55                   	push   %ebp
f01158b0:	89 e5                	mov    %esp,%ebp
f01158b2:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01158b5:	8b 45 10             	mov    0x10(%ebp),%eax
f01158b8:	ba 01 00 00 00       	mov    $0x1,%edx
f01158bd:	88 c1                	mov    %al,%cl
f01158bf:	d3 e2                	shl    %cl,%edx
f01158c1:	89 d0                	mov    %edx,%eax
f01158c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01158c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01158c9:	c1 e8 16             	shr    $0x16,%eax
f01158cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01158d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01158d6:	01 d0                	add    %edx,%eax
f01158d8:	8b 00                	mov    (%eax),%eax
f01158da:	83 e0 01             	and    $0x1,%eax
f01158dd:	85 c0                	test   %eax,%eax
f01158df:	75 07                	jne    f01158e8 <CB+0x39>
f01158e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01158e6:	eb 76                	jmp    f011595e <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01158e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01158eb:	c1 e8 16             	shr    $0x16,%eax
f01158ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01158f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01158f8:	01 d0                	add    %edx,%eax
f01158fa:	8b 00                	mov    (%eax),%eax
f01158fc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115901:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115904:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115907:	c1 e8 0c             	shr    $0xc,%eax
f011590a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011590d:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115912:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0115915:	72 17                	jb     f011592e <CB+0x7f>
f0115917:	ff 75 f0             	pushl  -0x10(%ebp)
f011591a:	68 b8 a3 13 f0       	push   $0xf013a3b8
f011591f:	68 c7 07 00 00       	push   $0x7c7
f0115924:	68 3e 85 13 f0       	push   $0xf013853e
f0115929:	e8 cd a8 fe ff       	call   f01001fb <_panic>
f011592e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115931:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115936:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115939:	8b 45 0c             	mov    0xc(%ebp),%eax
f011593c:	c1 e8 0c             	shr    $0xc,%eax
f011593f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115944:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011594b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011594e:	01 d0                	add    %edx,%eax
f0115950:	8b 00                	mov    (%eax),%eax
f0115952:	23 45 f4             	and    -0xc(%ebp),%eax
f0115955:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115958:	0f 94 c0             	sete   %al
f011595b:	0f b6 c0             	movzbl %al,%eax
}
f011595e:	c9                   	leave  
f011595f:	c3                   	ret    

f0115960 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115960:	55                   	push   %ebp
f0115961:	89 e5                	mov    %esp,%ebp
f0115963:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115966:	68 e7 a3 13 f0       	push   $0xf013a3e7
f011596b:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115970:	68 cc 07 00 00       	push   $0x7cc
f0115975:	68 3e 85 13 f0       	push   $0xf013853e
f011597a:	e8 7c a8 fe ff       	call   f01001fb <_panic>

f011597f <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011597f:	55                   	push   %ebp
f0115980:	89 e5                	mov    %esp,%ebp
f0115982:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115985:	68 e7 a3 13 f0       	push   $0xf013a3e7
f011598a:	68 f6 a3 13 f0       	push   $0xf013a3f6
f011598f:	68 d6 07 00 00       	push   $0x7d6
f0115994:	68 3e 85 13 f0       	push   $0xf013853e
f0115999:	e8 5d a8 fe ff       	call   f01001fb <_panic>

f011599e <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f011599e:	55                   	push   %ebp
f011599f:	89 e5                	mov    %esp,%ebp
f01159a1:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01159a4:	68 e7 a3 13 f0       	push   $0xf013a3e7
f01159a9:	68 f6 a3 13 f0       	push   $0xf013a3f6
f01159ae:	68 e5 07 00 00       	push   $0x7e5
f01159b3:	68 3e 85 13 f0       	push   $0xf013853e
f01159b8:	e8 3e a8 fe ff       	call   f01001fb <_panic>

f01159bd <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f01159bd:	55                   	push   %ebp
f01159be:	89 e5                	mov    %esp,%ebp
f01159c0:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01159c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01159c6:	c1 e8 16             	shr    $0x16,%eax
f01159c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01159d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01159d3:	01 d0                	add    %edx,%eax
f01159d5:	8b 00                	mov    (%eax),%eax
f01159d7:	83 e0 01             	and    $0x1,%eax
f01159da:	85 c0                	test   %eax,%eax
f01159dc:	75 07                	jne    f01159e5 <CE+0x28>
f01159de:	b8 00 00 00 00       	mov    $0x0,%eax
f01159e3:	eb 7a                	jmp    f0115a5f <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01159e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01159e8:	c1 e8 16             	shr    $0x16,%eax
f01159eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01159f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01159f5:	01 d0                	add    %edx,%eax
f01159f7:	8b 00                	mov    (%eax),%eax
f01159f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01159fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115a04:	c1 e8 0c             	shr    $0xc,%eax
f0115a07:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115a0a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115a0f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115a12:	72 17                	jb     f0115a2b <CE+0x6e>
f0115a14:	ff 75 f4             	pushl  -0xc(%ebp)
f0115a17:	68 b8 a3 13 f0       	push   $0xf013a3b8
f0115a1c:	68 ee 07 00 00       	push   $0x7ee
f0115a21:	68 3e 85 13 f0       	push   $0xf013853e
f0115a26:	e8 d0 a7 fe ff       	call   f01001fb <_panic>
f0115a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115a2e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115a33:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115a39:	c1 e8 0c             	shr    $0xc,%eax
f0115a3c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115a41:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115a48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115a4b:	01 d0                	add    %edx,%eax
f0115a4d:	8b 00                	mov    (%eax),%eax
f0115a4f:	85 c0                	test   %eax,%eax
f0115a51:	74 07                	je     f0115a5a <CE+0x9d>
f0115a53:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a58:	eb 05                	jmp    f0115a5f <CE+0xa2>
	return 1;
f0115a5a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115a5f:	c9                   	leave  
f0115a60:	c3                   	ret    

f0115a61 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0115a61:	55                   	push   %ebp
f0115a62:	89 e5                	mov    %esp,%ebp
f0115a64:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115a67:	68 e7 a3 13 f0       	push   $0xf013a3e7
f0115a6c:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115a71:	68 f5 07 00 00       	push   $0x7f5
f0115a76:	68 3e 85 13 f0       	push   $0xf013853e
f0115a7b:	e8 7b a7 fe ff       	call   f01001fb <_panic>

f0115a80 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115a80:	55                   	push   %ebp
f0115a81:	89 e5                	mov    %esp,%ebp
f0115a83:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115a86:	68 e7 a3 13 f0       	push   $0xf013a3e7
f0115a8b:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115a90:	68 05 08 00 00       	push   $0x805
f0115a95:	68 3e 85 13 f0       	push   $0xf013853e
f0115a9a:	e8 5c a7 fe ff       	call   f01001fb <_panic>

f0115a9f <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0115a9f:	55                   	push   %ebp
f0115aa0:	89 e5                	mov    %esp,%ebp
f0115aa2:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115aa5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115aac:	eb 18                	jmp    f0115ac6 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115aae:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115ab1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115ab8:	8b 45 08             	mov    0x8(%ebp),%eax
f0115abb:	01 d0                	add    %edx,%eax
f0115abd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115ac3:	ff 45 fc             	incl   -0x4(%ebp)
f0115ac6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115ac9:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115ace:	76 de                	jbe    f0115aae <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115ad0:	90                   	nop
f0115ad1:	c9                   	leave  
f0115ad2:	c3                   	ret    

f0115ad3 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115ad3:	55                   	push   %ebp
f0115ad4:	89 e5                	mov    %esp,%ebp
f0115ad6:	83 ec 38             	sub    $0x38,%esp
f0115ad9:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115adc:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115adf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115ae2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115ae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115aea:	8b 45 10             	mov    0x10(%ebp),%eax
f0115aed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115af2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115af5:	e9 ea 01 00 00       	jmp    f0115ce4 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115afa:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115afe:	74 44                	je     f0115b44 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115b03:	83 ec 04             	sub    $0x4,%esp
f0115b06:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115b09:	52                   	push   %edx
f0115b0a:	50                   	push   %eax
f0115b0b:	ff 75 08             	pushl  0x8(%ebp)
f0115b0e:	e8 1c 12 ff ff       	call   f0106d2f <get_frame_info>
f0115b13:	83 c4 10             	add    $0x10,%esp
f0115b16:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115b19:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115b1c:	85 c0                	test   %eax,%eax
f0115b1e:	75 24                	jne    f0115b44 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0115b20:	83 ec 04             	sub    $0x4,%esp
f0115b23:	68 0c a4 13 f0       	push   $0xf013a40c
f0115b28:	68 22 08 00 00       	push   $0x822
f0115b2d:	68 3e 85 13 f0       	push   $0xf013853e
f0115b32:	e8 50 a8 fe ff       	call   f0100387 <_warn>
f0115b37:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115b3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b3f:	e9 b6 01 00 00       	jmp    f0115cfa <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0115b44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115b47:	83 ec 04             	sub    $0x4,%esp
f0115b4a:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0115b4d:	52                   	push   %edx
f0115b4e:	50                   	push   %eax
f0115b4f:	ff 75 08             	pushl  0x8(%ebp)
f0115b52:	e8 d8 11 ff ff       	call   f0106d2f <get_frame_info>
f0115b57:	83 c4 10             	add    $0x10,%esp
f0115b5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115b5d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115b60:	85 c0                	test   %eax,%eax
f0115b62:	75 24                	jne    f0115b88 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0115b64:	83 ec 04             	sub    $0x4,%esp
f0115b67:	68 38 a4 13 f0       	push   $0xf013a438
f0115b6c:	68 29 08 00 00       	push   $0x829
f0115b71:	68 3e 85 13 f0       	push   $0xf013853e
f0115b76:	e8 0c a8 fe ff       	call   f0100387 <_warn>
f0115b7b:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115b7e:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b83:	e9 72 01 00 00       	jmp    f0115cfa <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115b88:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115b8c:	75 70                	jne    f0115bfe <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115b8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115b91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115b94:	c1 ea 0c             	shr    $0xc,%edx
f0115b97:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115b9d:	c1 e2 02             	shl    $0x2,%edx
f0115ba0:	01 d0                	add    %edx,%eax
f0115ba2:	8b 00                	mov    (%eax),%eax
f0115ba4:	c1 e8 0c             	shr    $0xc,%eax
f0115ba7:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115baa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115bad:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115bb0:	c1 ea 0c             	shr    $0xc,%edx
f0115bb3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115bb9:	c1 e2 02             	shl    $0x2,%edx
f0115bbc:	01 d0                	add    %edx,%eax
f0115bbe:	8b 00                	mov    (%eax),%eax
f0115bc0:	c1 e8 0c             	shr    $0xc,%eax
f0115bc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115bc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115bc9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115bcc:	74 30                	je     f0115bfe <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115bce:	83 ec 04             	sub    $0x4,%esp
f0115bd1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115bd4:	ff 75 e8             	pushl  -0x18(%ebp)
f0115bd7:	ff 75 f0             	pushl  -0x10(%ebp)
f0115bda:	ff 75 f4             	pushl  -0xc(%ebp)
f0115bdd:	68 64 a4 13 f0       	push   $0xf013a464
f0115be2:	68 33 08 00 00       	push   $0x833
f0115be7:	68 3e 85 13 f0       	push   $0xf013853e
f0115bec:	e8 96 a7 fe ff       	call   f0100387 <_warn>
f0115bf1:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115bf4:	b8 00 00 00 00       	mov    $0x0,%eax
f0115bf9:	e9 fc 00 00 00       	jmp    f0115cfa <CCP+0x227>
			}
		}
		if (ref != -1)
f0115bfe:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115c02:	74 52                	je     f0115c56 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115c04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115c08:	74 0e                	je     f0115c18 <CCP+0x145>
f0115c0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115c0d:	8b 40 08             	mov    0x8(%eax),%eax
f0115c10:	0f b7 c0             	movzwl %ax,%eax
f0115c13:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115c16:	74 3e                	je     f0115c56 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115c18:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115c1c:	74 0b                	je     f0115c29 <CCP+0x156>
f0115c1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115c21:	8b 40 08             	mov    0x8(%eax),%eax
f0115c24:	0f b7 c0             	movzwl %ax,%eax
f0115c27:	eb 05                	jmp    f0115c2e <CCP+0x15b>
f0115c29:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c2e:	83 ec 0c             	sub    $0xc,%esp
f0115c31:	50                   	push   %eax
f0115c32:	ff 75 f0             	pushl  -0x10(%ebp)
f0115c35:	68 c0 a4 13 f0       	push   $0xf013a4c0
f0115c3a:	68 3b 08 00 00       	push   $0x83b
f0115c3f:	68 3e 85 13 f0       	push   $0xf013853e
f0115c44:	e8 3e a7 fe ff       	call   f0100387 <_warn>
f0115c49:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115c4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c51:	e9 a4 00 00 00       	jmp    f0115cfa <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115c59:	ff 75 20             	pushl  0x20(%ebp)
f0115c5c:	ff 75 1c             	pushl  0x1c(%ebp)
f0115c5f:	50                   	push   %eax
f0115c60:	ff 75 08             	pushl  0x8(%ebp)
f0115c63:	e8 17 fd ff ff       	call   f011597f <CPs>
f0115c68:	83 c4 10             	add    $0x10,%esp
f0115c6b:	85 c0                	test   %eax,%eax
f0115c6d:	7f 21                	jg     f0115c90 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115c6f:	83 ec 04             	sub    $0x4,%esp
f0115c72:	68 30 a5 13 f0       	push   $0xf013a530
f0115c77:	68 41 08 00 00       	push   $0x841
f0115c7c:	68 3e 85 13 f0       	push   $0xf013853e
f0115c81:	e8 01 a7 fe ff       	call   f0100387 <_warn>
f0115c86:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115c89:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c8e:	eb 6a                	jmp    f0115cfa <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115c90:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115c94:	74 3a                	je     f0115cd0 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115c96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115c99:	ff 75 28             	pushl  0x28(%ebp)
f0115c9c:	ff 75 24             	pushl  0x24(%ebp)
f0115c9f:	50                   	push   %eax
f0115ca0:	ff 75 08             	pushl  0x8(%ebp)
f0115ca3:	e8 d7 fc ff ff       	call   f011597f <CPs>
f0115ca8:	83 c4 10             	add    $0x10,%esp
f0115cab:	85 c0                	test   %eax,%eax
f0115cad:	7f 21                	jg     f0115cd0 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115caf:	83 ec 04             	sub    $0x4,%esp
f0115cb2:	68 78 a5 13 f0       	push   $0xf013a578
f0115cb7:	68 48 08 00 00       	push   $0x848
f0115cbc:	68 3e 85 13 f0       	push   $0xf013853e
f0115cc1:	e8 c1 a6 fe ff       	call   f0100387 <_warn>
f0115cc6:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115cc9:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cce:	eb 2a                	jmp    f0115cfa <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115cd0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115cd4:	74 07                	je     f0115cdd <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115cd6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115cdd:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115ce4:	8b 55 10             	mov    0x10(%ebp),%edx
f0115ce7:	8b 45 14             	mov    0x14(%ebp),%eax
f0115cea:	01 d0                	add    %edx,%eax
f0115cec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115cef:	0f 87 05 fe ff ff    	ja     f0115afa <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115cf5:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115cfa:	c9                   	leave  
f0115cfb:	c3                   	ret    

f0115cfc <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115cfc:	55                   	push   %ebp
f0115cfd:	89 e5                	mov    %esp,%ebp
f0115cff:	57                   	push   %edi
f0115d00:	56                   	push   %esi
f0115d01:	53                   	push   %ebx
f0115d02:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115d08:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f0115d0d:	84 c0                	test   %al,%al
f0115d0f:	0f 84 b4 09 00 00    	je     f01166c9 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115d15:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0115d1c:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115d22:	bb 18 a8 13 f0       	mov    $0xf013a818,%ebx
f0115d27:	ba 04 00 00 00       	mov    $0x4,%edx
f0115d2c:	89 c7                	mov    %eax,%edi
f0115d2e:	89 de                	mov    %ebx,%esi
f0115d30:	89 d1                	mov    %edx,%ecx
f0115d32:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115d34:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115d3a:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d44:	89 d7                	mov    %edx,%edi
f0115d46:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115d48:	83 ec 0c             	sub    $0xc,%esp
f0115d4b:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115d51:	50                   	push   %eax
f0115d52:	e8 8d af fe ff       	call   f0100ce4 <execute_command>
f0115d57:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115d5a:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115d60:	bb 7c a8 13 f0       	mov    $0xf013a87c,%ebx
f0115d65:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115d6a:	89 c7                	mov    %eax,%edi
f0115d6c:	89 de                	mov    %ebx,%esi
f0115d6e:	89 d1                	mov    %edx,%ecx
f0115d70:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115d72:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115d78:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115d7d:	b0 00                	mov    $0x0,%al
f0115d7f:	89 d7                	mov    %edx,%edi
f0115d81:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115d83:	83 ec 0c             	sub    $0xc,%esp
f0115d86:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115d8c:	50                   	push   %eax
f0115d8d:	e8 52 af fe ff       	call   f0100ce4 <execute_command>
f0115d92:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115d95:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115d9b:	bb e0 a8 13 f0       	mov    $0xf013a8e0,%ebx
f0115da0:	ba 17 00 00 00       	mov    $0x17,%edx
f0115da5:	89 c7                	mov    %eax,%edi
f0115da7:	89 de                	mov    %ebx,%esi
f0115da9:	89 d1                	mov    %edx,%ecx
f0115dab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115dad:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115db3:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115db8:	b0 00                	mov    $0x0,%al
f0115dba:	89 d7                	mov    %edx,%edi
f0115dbc:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115dbe:	83 ec 0c             	sub    $0xc,%esp
f0115dc1:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115dc7:	50                   	push   %eax
f0115dc8:	e8 17 af fe ff       	call   f0100ce4 <execute_command>
f0115dcd:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115dd0:	83 ec 04             	sub    $0x4,%esp
f0115dd3:	6a 00                	push   $0x0
f0115dd5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115dd8:	50                   	push   %eax
f0115dd9:	68 00 10 00 00       	push   $0x1000
f0115dde:	e8 2d 3b ff ff       	call   f0109910 <envid2env>
f0115de3:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115de6:	83 ec 04             	sub    $0x4,%esp
f0115de9:	6a 00                	push   $0x0
f0115deb:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115dee:	50                   	push   %eax
f0115def:	68 01 10 00 00       	push   $0x1001
f0115df4:	e8 17 3b ff ff       	call   f0109910 <envid2env>
f0115df9:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115dfc:	83 ec 04             	sub    $0x4,%esp
f0115dff:	6a 00                	push   $0x0
f0115e01:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115e04:	50                   	push   %eax
f0115e05:	68 02 10 00 00       	push   $0x1002
f0115e0a:	e8 01 3b ff ff       	call   f0109910 <envid2env>
f0115e0f:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115e12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e15:	85 c0                	test   %eax,%eax
f0115e17:	74 0e                	je     f0115e27 <test_priority_normal_and_higher+0x12b>
f0115e19:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e1c:	85 c0                	test   %eax,%eax
f0115e1e:	74 07                	je     f0115e27 <test_priority_normal_and_higher+0x12b>
f0115e20:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e23:	85 c0                	test   %eax,%eax
f0115e25:	75 14                	jne    f0115e3b <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115e27:	83 ec 04             	sub    $0x4,%esp
f0115e2a:	68 b8 a5 13 f0       	push   $0xf013a5b8
f0115e2f:	6a 26                	push   $0x26
f0115e31:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115e36:	e8 c0 a3 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115e3b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e3e:	8b 40 74             	mov    0x74(%eax),%eax
f0115e41:	83 f8 14             	cmp    $0x14,%eax
f0115e44:	75 16                	jne    f0115e5c <test_priority_normal_and_higher+0x160>
f0115e46:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e49:	8b 40 74             	mov    0x74(%eax),%eax
f0115e4c:	83 f8 0f             	cmp    $0xf,%eax
f0115e4f:	75 0b                	jne    f0115e5c <test_priority_normal_and_higher+0x160>
f0115e51:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e54:	8b 40 74             	mov    0x74(%eax),%eax
f0115e57:	83 f8 0a             	cmp    $0xa,%eax
f0115e5a:	74 14                	je     f0115e70 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115e5c:	83 ec 04             	sub    $0x4,%esp
f0115e5f:	68 ec a5 13 f0       	push   $0xf013a5ec
f0115e64:	6a 29                	push   $0x29
f0115e66:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115e6b:	e8 8b a3 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f0115e70:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115e77:	eb 44                	jmp    f0115ebd <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115e79:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e7c:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115e82:	89 d0                	mov    %edx,%eax
f0115e84:	01 c0                	add    %eax,%eax
f0115e86:	01 d0                	add    %edx,%eax
f0115e88:	c1 e0 03             	shl    $0x3,%eax
f0115e8b:	01 c8                	add    %ecx,%eax
f0115e8d:	8b 10                	mov    (%eax),%edx
f0115e8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115e92:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115e99:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e9c:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115ea2:	89 d0                	mov    %edx,%eax
f0115ea4:	01 c0                	add    %eax,%eax
f0115ea6:	01 d0                	add    %edx,%eax
f0115ea8:	c1 e0 03             	shl    $0x3,%eax
f0115eab:	01 c8                	add    %ecx,%eax
f0115ead:	8b 50 08             	mov    0x8(%eax),%edx
f0115eb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115eb3:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115eba:	ff 45 e4             	incl   -0x1c(%ebp)
f0115ebd:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115ec1:	7e b6                	jle    f0115e79 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115ec3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115eca:	eb 44                	jmp    f0115f10 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115ecc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ecf:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ed2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115ed5:	89 d0                	mov    %edx,%eax
f0115ed7:	01 c0                	add    %eax,%eax
f0115ed9:	01 d0                	add    %edx,%eax
f0115edb:	c1 e0 03             	shl    $0x3,%eax
f0115ede:	01 c8                	add    %ecx,%eax
f0115ee0:	8b 10                	mov    (%eax),%edx
f0115ee2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115ee5:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115eec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115eef:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ef2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115ef5:	89 d0                	mov    %edx,%eax
f0115ef7:	01 c0                	add    %eax,%eax
f0115ef9:	01 d0                	add    %edx,%eax
f0115efb:	c1 e0 03             	shl    $0x3,%eax
f0115efe:	01 c8                	add    %ecx,%eax
f0115f00:	8b 50 08             	mov    0x8(%eax),%edx
f0115f03:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115f06:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115f0d:	ff 45 e0             	incl   -0x20(%ebp)
f0115f10:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115f14:	7e b6                	jle    f0115ecc <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115f16:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115f1d:	eb 44                	jmp    f0115f63 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f22:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f25:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115f28:	89 d0                	mov    %edx,%eax
f0115f2a:	01 c0                	add    %eax,%eax
f0115f2c:	01 d0                	add    %edx,%eax
f0115f2e:	c1 e0 03             	shl    $0x3,%eax
f0115f31:	01 c8                	add    %ecx,%eax
f0115f33:	8b 10                	mov    (%eax),%edx
f0115f35:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115f38:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f3f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f42:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f45:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115f48:	89 d0                	mov    %edx,%eax
f0115f4a:	01 c0                	add    %eax,%eax
f0115f4c:	01 d0                	add    %edx,%eax
f0115f4e:	c1 e0 03             	shl    $0x3,%eax
f0115f51:	01 c8                	add    %ecx,%eax
f0115f53:	8b 50 08             	mov    0x8(%eax),%edx
f0115f56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115f59:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115f60:	ff 45 dc             	incl   -0x24(%ebp)
f0115f63:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115f67:	7e b6                	jle    f0115f1f <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115f69:	e8 5b 69 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0115f6e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115f71:	e8 c6 dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0115f76:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115f79:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f7c:	83 ec 08             	sub    $0x8,%esp
f0115f7f:	6a 03                	push   $0x3
f0115f81:	50                   	push   %eax
f0115f82:	e8 1e 4e ff ff       	call   f010ada5 <set_program_priority>
f0115f87:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115f8a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f8d:	83 ec 08             	sub    $0x8,%esp
f0115f90:	6a 03                	push   $0x3
f0115f92:	50                   	push   %eax
f0115f93:	e8 0d 4e ff ff       	call   f010ada5 <set_program_priority>
f0115f98:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115f9b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f9e:	83 ec 08             	sub    $0x8,%esp
f0115fa1:	6a 03                	push   $0x3
f0115fa3:	50                   	push   %eax
f0115fa4:	e8 fc 4d ff ff       	call   f010ada5 <set_program_priority>
f0115fa9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115fac:	e8 8b dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0115fb1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115fb4:	74 14                	je     f0115fca <test_priority_normal_and_higher+0x2ce>
f0115fb6:	83 ec 04             	sub    $0x4,%esp
f0115fb9:	68 38 a6 13 f0       	push   $0xf013a638
f0115fbe:	6a 45                	push   $0x45
f0115fc0:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115fc5:	e8 31 a2 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115fca:	e8 fa 68 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0115fcf:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115fd2:	74 14                	je     f0115fe8 <test_priority_normal_and_higher+0x2ec>
f0115fd4:	83 ec 04             	sub    $0x4,%esp
f0115fd7:	68 38 a6 13 f0       	push   $0xf013a638
f0115fdc:	6a 46                	push   $0x46
f0115fde:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115fe3:	e8 13 a2 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115fe8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115feb:	8b 40 74             	mov    0x74(%eax),%eax
f0115fee:	83 f8 14             	cmp    $0x14,%eax
f0115ff1:	75 16                	jne    f0116009 <test_priority_normal_and_higher+0x30d>
f0115ff3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ff6:	8b 40 74             	mov    0x74(%eax),%eax
f0115ff9:	83 f8 0f             	cmp    $0xf,%eax
f0115ffc:	75 0b                	jne    f0116009 <test_priority_normal_and_higher+0x30d>
f0115ffe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116001:	8b 40 74             	mov    0x74(%eax),%eax
f0116004:	83 f8 0a             	cmp    $0xa,%eax
f0116007:	74 14                	je     f011601d <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116009:	83 ec 04             	sub    $0x4,%esp
f011600c:	68 64 a6 13 f0       	push   $0xf013a664
f0116011:	6a 49                	push   $0x49
f0116013:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116018:	e8 de a1 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f011601d:	e8 a7 68 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116022:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116025:	e8 12 dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011602a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f011602d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116030:	83 ec 08             	sub    $0x8,%esp
f0116033:	6a 04                	push   $0x4
f0116035:	50                   	push   %eax
f0116036:	e8 6a 4d ff ff       	call   f010ada5 <set_program_priority>
f011603b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f011603e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116041:	83 ec 08             	sub    $0x8,%esp
f0116044:	6a 04                	push   $0x4
f0116046:	50                   	push   %eax
f0116047:	e8 59 4d ff ff       	call   f010ada5 <set_program_priority>
f011604c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011604f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116052:	83 ec 08             	sub    $0x8,%esp
f0116055:	6a 04                	push   $0x4
f0116057:	50                   	push   %eax
f0116058:	e8 48 4d ff ff       	call   f010ada5 <set_program_priority>
f011605d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116060:	e8 d7 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116065:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116068:	74 14                	je     f011607e <test_priority_normal_and_higher+0x382>
f011606a:	83 ec 04             	sub    $0x4,%esp
f011606d:	68 38 a6 13 f0       	push   $0xf013a638
f0116072:	6a 53                	push   $0x53
f0116074:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116079:	e8 7d a1 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011607e:	e8 46 68 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116083:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116086:	74 14                	je     f011609c <test_priority_normal_and_higher+0x3a0>
f0116088:	83 ec 04             	sub    $0x4,%esp
f011608b:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116090:	6a 54                	push   $0x54
f0116092:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116097:	e8 5f a1 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011609c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011609f:	8b 40 74             	mov    0x74(%eax),%eax
f01160a2:	83 f8 14             	cmp    $0x14,%eax
f01160a5:	75 16                	jne    f01160bd <test_priority_normal_and_higher+0x3c1>
f01160a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160aa:	8b 40 74             	mov    0x74(%eax),%eax
f01160ad:	83 f8 0f             	cmp    $0xf,%eax
f01160b0:	75 0b                	jne    f01160bd <test_priority_normal_and_higher+0x3c1>
f01160b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160b5:	8b 40 74             	mov    0x74(%eax),%eax
f01160b8:	83 f8 14             	cmp    $0x14,%eax
f01160bb:	74 14                	je     f01160d1 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f01160bd:	83 ec 04             	sub    $0x4,%esp
f01160c0:	68 e8 a6 13 f0       	push   $0xf013a6e8
f01160c5:	6a 57                	push   $0x57
f01160c7:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01160cc:	e8 2a a1 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f01160d1:	e8 f3 67 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01160d6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160d9:	e8 5e dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160de:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01160e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160e4:	83 ec 08             	sub    $0x8,%esp
f01160e7:	6a 04                	push   $0x4
f01160e9:	50                   	push   %eax
f01160ea:	e8 b6 4c ff ff       	call   f010ada5 <set_program_priority>
f01160ef:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01160f2:	e8 45 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160f7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01160fa:	74 14                	je     f0116110 <test_priority_normal_and_higher+0x414>
f01160fc:	83 ec 04             	sub    $0x4,%esp
f01160ff:	68 38 a6 13 f0       	push   $0xf013a638
f0116104:	6a 5f                	push   $0x5f
f0116106:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011610b:	e8 eb a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116110:	e8 b4 67 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116115:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116118:	74 14                	je     f011612e <test_priority_normal_and_higher+0x432>
f011611a:	83 ec 04             	sub    $0x4,%esp
f011611d:	68 38 a6 13 f0       	push   $0xf013a638
f0116122:	6a 60                	push   $0x60
f0116124:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116129:	e8 cd a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011612e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116131:	8b 40 74             	mov    0x74(%eax),%eax
f0116134:	83 f8 14             	cmp    $0x14,%eax
f0116137:	75 16                	jne    f011614f <test_priority_normal_and_higher+0x453>
f0116139:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011613c:	8b 40 74             	mov    0x74(%eax),%eax
f011613f:	83 f8 0f             	cmp    $0xf,%eax
f0116142:	75 0b                	jne    f011614f <test_priority_normal_and_higher+0x453>
f0116144:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116147:	8b 40 74             	mov    0x74(%eax),%eax
f011614a:	83 f8 14             	cmp    $0x14,%eax
f011614d:	74 14                	je     f0116163 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f011614f:	83 ec 04             	sub    $0x4,%esp
f0116152:	68 30 a7 13 f0       	push   $0xf013a730
f0116157:	6a 63                	push   $0x63
f0116159:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011615e:	e8 98 a0 fe ff       	call   f01001fb <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116163:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011616a:	eb 1b                	jmp    f0116187 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011616c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011616f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116172:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116175:	89 d0                	mov    %edx,%eax
f0116177:	01 c0                	add    %eax,%eax
f0116179:	01 d0                	add    %edx,%eax
f011617b:	c1 e0 03             	shl    $0x3,%eax
f011617e:	01 c8                	add    %ecx,%eax
f0116180:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116184:	ff 45 d8             	incl   -0x28(%ebp)
f0116187:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011618b:	7e df                	jle    f011616c <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011618d:	e8 37 67 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116192:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116195:	e8 a2 db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011619a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011619d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161a0:	83 ec 08             	sub    $0x8,%esp
f01161a3:	6a 04                	push   $0x4
f01161a5:	50                   	push   %eax
f01161a6:	e8 fa 4b ff ff       	call   f010ada5 <set_program_priority>
f01161ab:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01161ae:	e8 89 db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01161b3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01161b6:	74 14                	je     f01161cc <test_priority_normal_and_higher+0x4d0>
f01161b8:	83 ec 04             	sub    $0x4,%esp
f01161bb:	68 38 a6 13 f0       	push   $0xf013a638
f01161c0:	6a 70                	push   $0x70
f01161c2:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01161c7:	e8 2f a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01161cc:	e8 f8 66 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01161d1:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01161d4:	74 14                	je     f01161ea <test_priority_normal_and_higher+0x4ee>
f01161d6:	83 ec 04             	sub    $0x4,%esp
f01161d9:	68 38 a6 13 f0       	push   $0xf013a638
f01161de:	6a 71                	push   $0x71
f01161e0:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01161e5:	e8 11 a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01161ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01161ed:	8b 40 74             	mov    0x74(%eax),%eax
f01161f0:	83 f8 14             	cmp    $0x14,%eax
f01161f3:	75 16                	jne    f011620b <test_priority_normal_and_higher+0x50f>
f01161f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161f8:	8b 40 74             	mov    0x74(%eax),%eax
f01161fb:	83 f8 0f             	cmp    $0xf,%eax
f01161fe:	75 0b                	jne    f011620b <test_priority_normal_and_higher+0x50f>
f0116200:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116203:	8b 40 74             	mov    0x74(%eax),%eax
f0116206:	83 f8 14             	cmp    $0x14,%eax
f0116209:	74 14                	je     f011621f <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f011620b:	83 ec 04             	sub    $0x4,%esp
f011620e:	68 30 a7 13 f0       	push   $0xf013a730
f0116213:	6a 74                	push   $0x74
f0116215:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011621a:	e8 dc 9f fe ff       	call   f01001fb <_panic>

		for(int i = 10; i < 15; i++)
f011621f:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116226:	eb 1b                	jmp    f0116243 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116228:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011622b:	8b 48 78             	mov    0x78(%eax),%ecx
f011622e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116231:	89 d0                	mov    %edx,%eax
f0116233:	01 c0                	add    %eax,%eax
f0116235:	01 d0                	add    %edx,%eax
f0116237:	c1 e0 03             	shl    $0x3,%eax
f011623a:	01 c8                	add    %ecx,%eax
f011623c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116240:	ff 45 d4             	incl   -0x2c(%ebp)
f0116243:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116247:	7e df                	jle    f0116228 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116249:	e8 7b 66 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011624e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116251:	e8 e6 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116256:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116259:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011625c:	83 ec 08             	sub    $0x8,%esp
f011625f:	6a 05                	push   $0x5
f0116261:	50                   	push   %eax
f0116262:	e8 3e 4b ff ff       	call   f010ada5 <set_program_priority>
f0116267:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011626a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011626d:	83 ec 08             	sub    $0x8,%esp
f0116270:	6a 05                	push   $0x5
f0116272:	50                   	push   %eax
f0116273:	e8 2d 4b ff ff       	call   f010ada5 <set_program_priority>
f0116278:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011627b:	e8 bc da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116280:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116283:	74 14                	je     f0116299 <test_priority_normal_and_higher+0x59d>
f0116285:	83 ec 04             	sub    $0x4,%esp
f0116288:	68 38 a6 13 f0       	push   $0xf013a638
f011628d:	6a 7f                	push   $0x7f
f011628f:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116294:	e8 62 9f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116299:	e8 2b 66 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011629e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01162a1:	74 17                	je     f01162ba <test_priority_normal_and_higher+0x5be>
f01162a3:	83 ec 04             	sub    $0x4,%esp
f01162a6:	68 38 a6 13 f0       	push   $0xf013a638
f01162ab:	68 80 00 00 00       	push   $0x80
f01162b0:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01162b5:	e8 41 9f fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01162ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01162bd:	8b 40 74             	mov    0x74(%eax),%eax
f01162c0:	83 f8 14             	cmp    $0x14,%eax
f01162c3:	75 16                	jne    f01162db <test_priority_normal_and_higher+0x5df>
f01162c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162c8:	8b 40 74             	mov    0x74(%eax),%eax
f01162cb:	83 f8 1e             	cmp    $0x1e,%eax
f01162ce:	75 0b                	jne    f01162db <test_priority_normal_and_higher+0x5df>
f01162d0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162d3:	8b 40 74             	mov    0x74(%eax),%eax
f01162d6:	83 f8 28             	cmp    $0x28,%eax
f01162d9:	74 17                	je     f01162f2 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01162db:	83 ec 04             	sub    $0x4,%esp
f01162de:	68 6c a7 13 f0       	push   $0xf013a76c
f01162e3:	68 83 00 00 00       	push   $0x83
f01162e8:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01162ed:	e8 09 9f fe ff       	call   f01001fb <_panic>

		for(int i = 20; i < 40; i++)
f01162f2:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01162f9:	eb 1b                	jmp    f0116316 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01162fb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162fe:	8b 48 78             	mov    0x78(%eax),%ecx
f0116301:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116304:	89 d0                	mov    %edx,%eax
f0116306:	01 c0                	add    %eax,%eax
f0116308:	01 d0                	add    %edx,%eax
f011630a:	c1 e0 03             	shl    $0x3,%eax
f011630d:	01 c8                	add    %ecx,%eax
f011630f:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116313:	ff 45 d0             	incl   -0x30(%ebp)
f0116316:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f011631a:	7e df                	jle    f01162fb <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011631c:	e8 a8 65 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116321:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116324:	e8 13 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116329:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011632c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011632f:	83 ec 08             	sub    $0x8,%esp
f0116332:	6a 05                	push   $0x5
f0116334:	50                   	push   %eax
f0116335:	e8 6b 4a ff ff       	call   f010ada5 <set_program_priority>
f011633a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011633d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116340:	83 ec 08             	sub    $0x8,%esp
f0116343:	6a 04                	push   $0x4
f0116345:	50                   	push   %eax
f0116346:	e8 5a 4a ff ff       	call   f010ada5 <set_program_priority>
f011634b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011634e:	e8 e9 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116353:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116356:	74 17                	je     f011636f <test_priority_normal_and_higher+0x673>
f0116358:	83 ec 04             	sub    $0x4,%esp
f011635b:	68 38 a6 13 f0       	push   $0xf013a638
f0116360:	68 8e 00 00 00       	push   $0x8e
f0116365:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011636a:	e8 8c 9e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011636f:	e8 55 65 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116374:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116377:	74 17                	je     f0116390 <test_priority_normal_and_higher+0x694>
f0116379:	83 ec 04             	sub    $0x4,%esp
f011637c:	68 38 a6 13 f0       	push   $0xf013a638
f0116381:	68 8f 00 00 00       	push   $0x8f
f0116386:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011638b:	e8 6b 9e fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116390:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116393:	8b 40 74             	mov    0x74(%eax),%eax
f0116396:	83 f8 14             	cmp    $0x14,%eax
f0116399:	75 16                	jne    f01163b1 <test_priority_normal_and_higher+0x6b5>
f011639b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011639e:	8b 40 74             	mov    0x74(%eax),%eax
f01163a1:	83 f8 1e             	cmp    $0x1e,%eax
f01163a4:	75 0b                	jne    f01163b1 <test_priority_normal_and_higher+0x6b5>
f01163a6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01163a9:	8b 40 74             	mov    0x74(%eax),%eax
f01163ac:	83 f8 28             	cmp    $0x28,%eax
f01163af:	74 17                	je     f01163c8 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f01163b1:	83 ec 04             	sub    $0x4,%esp
f01163b4:	68 6c a7 13 f0       	push   $0xf013a76c
f01163b9:	68 92 00 00 00       	push   $0x92
f01163be:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01163c3:	e8 33 9e fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 30; i++)
f01163c8:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01163cf:	eb 1b                	jmp    f01163ec <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01163d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163d4:	8b 48 78             	mov    0x78(%eax),%ecx
f01163d7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01163da:	89 d0                	mov    %edx,%eax
f01163dc:	01 c0                	add    %eax,%eax
f01163de:	01 d0                	add    %edx,%eax
f01163e0:	c1 e0 03             	shl    $0x3,%eax
f01163e3:	01 c8                	add    %ecx,%eax
f01163e5:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01163e9:	ff 45 cc             	incl   -0x34(%ebp)
f01163ec:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01163f0:	7e df                	jle    f01163d1 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01163f2:	e8 d2 64 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01163f7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163fa:	e8 3d d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01163ff:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116402:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116405:	83 ec 08             	sub    $0x8,%esp
f0116408:	6a 05                	push   $0x5
f011640a:	50                   	push   %eax
f011640b:	e8 95 49 ff ff       	call   f010ada5 <set_program_priority>
f0116410:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116413:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116416:	83 ec 08             	sub    $0x8,%esp
f0116419:	6a 04                	push   $0x4
f011641b:	50                   	push   %eax
f011641c:	e8 84 49 ff ff       	call   f010ada5 <set_program_priority>
f0116421:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116424:	e8 13 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116429:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011642c:	74 17                	je     f0116445 <test_priority_normal_and_higher+0x749>
f011642e:	83 ec 04             	sub    $0x4,%esp
f0116431:	68 38 a6 13 f0       	push   $0xf013a638
f0116436:	68 9d 00 00 00       	push   $0x9d
f011643b:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116440:	e8 b6 9d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116445:	e8 7f 64 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011644a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011644d:	74 17                	je     f0116466 <test_priority_normal_and_higher+0x76a>
f011644f:	83 ec 04             	sub    $0x4,%esp
f0116452:	68 38 a6 13 f0       	push   $0xf013a638
f0116457:	68 9e 00 00 00       	push   $0x9e
f011645c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116461:	e8 95 9d fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116466:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116469:	8b 40 74             	mov    0x74(%eax),%eax
f011646c:	83 f8 14             	cmp    $0x14,%eax
f011646f:	75 16                	jne    f0116487 <test_priority_normal_and_higher+0x78b>
f0116471:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116474:	8b 40 74             	mov    0x74(%eax),%eax
f0116477:	83 f8 3c             	cmp    $0x3c,%eax
f011647a:	75 0b                	jne    f0116487 <test_priority_normal_and_higher+0x78b>
f011647c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011647f:	8b 40 74             	mov    0x74(%eax),%eax
f0116482:	83 f8 28             	cmp    $0x28,%eax
f0116485:	74 17                	je     f011649e <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116487:	83 ec 04             	sub    $0x4,%esp
f011648a:	68 6c a7 13 f0       	push   $0xf013a76c
f011648f:	68 a1 00 00 00       	push   $0xa1
f0116494:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116499:	e8 5d 9d fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 60; i++)
f011649e:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01164a5:	eb 1b                	jmp    f01164c2 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01164a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164aa:	8b 48 78             	mov    0x78(%eax),%ecx
f01164ad:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01164b0:	89 d0                	mov    %edx,%eax
f01164b2:	01 c0                	add    %eax,%eax
f01164b4:	01 d0                	add    %edx,%eax
f01164b6:	c1 e0 03             	shl    $0x3,%eax
f01164b9:	01 c8                	add    %ecx,%eax
f01164bb:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01164bf:	ff 45 c8             	incl   -0x38(%ebp)
f01164c2:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01164c6:	7e df                	jle    f01164a7 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01164c8:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01164cf:	eb 1b                	jmp    f01164ec <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01164d1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164d4:	8b 48 78             	mov    0x78(%eax),%ecx
f01164d7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01164da:	89 d0                	mov    %edx,%eax
f01164dc:	01 c0                	add    %eax,%eax
f01164de:	01 d0                	add    %edx,%eax
f01164e0:	c1 e0 03             	shl    $0x3,%eax
f01164e3:	01 c8                	add    %ecx,%eax
f01164e5:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01164e9:	ff 45 c4             	incl   -0x3c(%ebp)
f01164ec:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01164f0:	7e df                	jle    f01164d1 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01164f2:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01164f9:	eb 7a                	jmp    f0116575 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01164fb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01164fe:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116505:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116508:	8b 58 78             	mov    0x78(%eax),%ebx
f011650b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011650e:	89 d0                	mov    %edx,%eax
f0116510:	01 c0                	add    %eax,%eax
f0116512:	01 d0                	add    %edx,%eax
f0116514:	c1 e0 03             	shl    $0x3,%eax
f0116517:	01 d8                	add    %ebx,%eax
f0116519:	8b 00                	mov    (%eax),%eax
f011651b:	39 c1                	cmp    %eax,%ecx
f011651d:	74 17                	je     f0116536 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f011651f:	83 ec 04             	sub    $0x4,%esp
f0116522:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116527:	68 af 00 00 00       	push   $0xaf
f011652c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116531:	e8 c5 9c fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116536:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116539:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116540:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116543:	8b 58 78             	mov    0x78(%eax),%ebx
f0116546:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116549:	89 d0                	mov    %edx,%eax
f011654b:	01 c0                	add    %eax,%eax
f011654d:	01 d0                	add    %edx,%eax
f011654f:	c1 e0 03             	shl    $0x3,%eax
f0116552:	01 d8                	add    %ebx,%eax
f0116554:	8b 40 08             	mov    0x8(%eax),%eax
f0116557:	39 c1                	cmp    %eax,%ecx
f0116559:	74 17                	je     f0116572 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f011655b:	83 ec 04             	sub    $0x4,%esp
f011655e:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116563:	68 b2 00 00 00       	push   $0xb2
f0116568:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011656d:	e8 89 9c fe ff       	call   f01001fb <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116572:	ff 45 c0             	incl   -0x40(%ebp)
f0116575:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116579:	7e 80                	jle    f01164fb <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011657b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116582:	eb 7a                	jmp    f01165fe <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116584:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116587:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011658e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116591:	8b 58 78             	mov    0x78(%eax),%ebx
f0116594:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116597:	89 d0                	mov    %edx,%eax
f0116599:	01 c0                	add    %eax,%eax
f011659b:	01 d0                	add    %edx,%eax
f011659d:	c1 e0 03             	shl    $0x3,%eax
f01165a0:	01 d8                	add    %ebx,%eax
f01165a2:	8b 00                	mov    (%eax),%eax
f01165a4:	39 c1                	cmp    %eax,%ecx
f01165a6:	74 17                	je     f01165bf <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f01165a8:	83 ec 04             	sub    $0x4,%esp
f01165ab:	68 a8 a7 13 f0       	push   $0xf013a7a8
f01165b0:	68 b8 00 00 00       	push   $0xb8
f01165b5:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01165ba:	e8 3c 9c fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01165bf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01165c2:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01165c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01165cc:	8b 58 78             	mov    0x78(%eax),%ebx
f01165cf:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01165d2:	89 d0                	mov    %edx,%eax
f01165d4:	01 c0                	add    %eax,%eax
f01165d6:	01 d0                	add    %edx,%eax
f01165d8:	c1 e0 03             	shl    $0x3,%eax
f01165db:	01 d8                	add    %ebx,%eax
f01165dd:	8b 40 08             	mov    0x8(%eax),%eax
f01165e0:	39 c1                	cmp    %eax,%ecx
f01165e2:	74 17                	je     f01165fb <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01165e4:	83 ec 04             	sub    $0x4,%esp
f01165e7:	68 a8 a7 13 f0       	push   $0xf013a7a8
f01165ec:	68 bb 00 00 00       	push   $0xbb
f01165f1:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01165f6:	e8 00 9c fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01165fb:	ff 45 bc             	incl   -0x44(%ebp)
f01165fe:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116602:	7e 80                	jle    f0116584 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116604:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011660b:	eb 7a                	jmp    f0116687 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011660d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116610:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116617:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011661a:	8b 58 78             	mov    0x78(%eax),%ebx
f011661d:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116620:	89 d0                	mov    %edx,%eax
f0116622:	01 c0                	add    %eax,%eax
f0116624:	01 d0                	add    %edx,%eax
f0116626:	c1 e0 03             	shl    $0x3,%eax
f0116629:	01 d8                	add    %ebx,%eax
f011662b:	8b 00                	mov    (%eax),%eax
f011662d:	39 c1                	cmp    %eax,%ecx
f011662f:	74 17                	je     f0116648 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116631:	83 ec 04             	sub    $0x4,%esp
f0116634:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116639:	68 c1 00 00 00       	push   $0xc1
f011663e:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116643:	e8 b3 9b fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116648:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011664b:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116652:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116655:	8b 58 78             	mov    0x78(%eax),%ebx
f0116658:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011665b:	89 d0                	mov    %edx,%eax
f011665d:	01 c0                	add    %eax,%eax
f011665f:	01 d0                	add    %edx,%eax
f0116661:	c1 e0 03             	shl    $0x3,%eax
f0116664:	01 d8                	add    %ebx,%eax
f0116666:	8b 40 08             	mov    0x8(%eax),%eax
f0116669:	39 c1                	cmp    %eax,%ecx
f011666b:	74 17                	je     f0116684 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f011666d:	83 ec 04             	sub    $0x4,%esp
f0116670:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116675:	68 c4 00 00 00       	push   $0xc4
f011667a:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011667f:	e8 77 9b fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116684:	ff 45 b8             	incl   -0x48(%ebp)
f0116687:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011668b:	7e 80                	jle    f011660d <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011668d:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116694:	75 6e 61 
f0116697:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f011669e:	6c 00 00 
f01166a1:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01166a7:	b9 17 00 00 00       	mov    $0x17,%ecx
f01166ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01166b1:	89 d7                	mov    %edx,%edi
f01166b3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01166b5:	83 ec 0c             	sub    $0xc,%esp
f01166b8:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01166be:	50                   	push   %eax
f01166bf:	e8 20 a6 fe ff       	call   f0100ce4 <execute_command>
f01166c4:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01166c7:	eb 10                	jmp    f01166d9 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01166c9:	83 ec 0c             	sub    $0xc,%esp
f01166cc:	68 dc a7 13 f0       	push   $0xf013a7dc
f01166d1:	e8 ac a5 fe ff       	call   f0100c82 <cprintf>
f01166d6:	83 c4 10             	add    $0x10,%esp
	}
}
f01166d9:	90                   	nop
f01166da:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01166dd:	5b                   	pop    %ebx
f01166de:	5e                   	pop    %esi
f01166df:	5f                   	pop    %edi
f01166e0:	5d                   	pop    %ebp
f01166e1:	c3                   	ret    

f01166e2 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01166e2:	55                   	push   %ebp
f01166e3:	89 e5                	mov    %esp,%ebp
f01166e5:	57                   	push   %edi
f01166e6:	56                   	push   %esi
f01166e7:	53                   	push   %ebx
f01166e8:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01166ee:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f01166f3:	84 c0                	test   %al,%al
f01166f5:	0f 84 be 09 00 00    	je     f01170b9 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01166fb:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0116702:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116708:	bb 18 a8 13 f0       	mov    $0xf013a818,%ebx
f011670d:	ba 04 00 00 00       	mov    $0x4,%edx
f0116712:	89 c7                	mov    %eax,%edi
f0116714:	89 de                	mov    %ebx,%esi
f0116716:	89 d1                	mov    %edx,%ecx
f0116718:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011671a:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116720:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116725:	b8 00 00 00 00       	mov    $0x0,%eax
f011672a:	89 d7                	mov    %edx,%edi
f011672c:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011672e:	83 ec 0c             	sub    $0xc,%esp
f0116731:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116737:	50                   	push   %eax
f0116738:	e8 a7 a5 fe ff       	call   f0100ce4 <execute_command>
f011673d:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116740:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116746:	bb d4 aa 13 f0       	mov    $0xf013aad4,%ebx
f011674b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116750:	89 c7                	mov    %eax,%edi
f0116752:	89 de                	mov    %ebx,%esi
f0116754:	89 d1                	mov    %edx,%ecx
f0116756:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116758:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011675e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116763:	b0 00                	mov    $0x0,%al
f0116765:	89 d7                	mov    %edx,%edi
f0116767:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116769:	83 ec 0c             	sub    $0xc,%esp
f011676c:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116772:	50                   	push   %eax
f0116773:	e8 6c a5 fe ff       	call   f0100ce4 <execute_command>
f0116778:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f011677b:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116781:	bb 38 ab 13 f0       	mov    $0xf013ab38,%ebx
f0116786:	ba 17 00 00 00       	mov    $0x17,%edx
f011678b:	89 c7                	mov    %eax,%edi
f011678d:	89 de                	mov    %ebx,%esi
f011678f:	89 d1                	mov    %edx,%ecx
f0116791:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116793:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0116799:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011679e:	b0 00                	mov    $0x0,%al
f01167a0:	89 d7                	mov    %edx,%edi
f01167a2:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01167a4:	83 ec 0c             	sub    $0xc,%esp
f01167a7:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01167ad:	50                   	push   %eax
f01167ae:	e8 31 a5 fe ff       	call   f0100ce4 <execute_command>
f01167b3:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01167b6:	83 ec 04             	sub    $0x4,%esp
f01167b9:	6a 00                	push   $0x0
f01167bb:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01167be:	50                   	push   %eax
f01167bf:	68 00 10 00 00       	push   $0x1000
f01167c4:	e8 47 31 ff ff       	call   f0109910 <envid2env>
f01167c9:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01167cc:	83 ec 04             	sub    $0x4,%esp
f01167cf:	6a 00                	push   $0x0
f01167d1:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01167d4:	50                   	push   %eax
f01167d5:	68 01 10 00 00       	push   $0x1001
f01167da:	e8 31 31 ff ff       	call   f0109910 <envid2env>
f01167df:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01167e2:	83 ec 04             	sub    $0x4,%esp
f01167e5:	6a 00                	push   $0x0
f01167e7:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01167ea:	50                   	push   %eax
f01167eb:	68 02 10 00 00       	push   $0x1002
f01167f0:	e8 1b 31 ff ff       	call   f0109910 <envid2env>
f01167f5:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01167f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01167fb:	85 c0                	test   %eax,%eax
f01167fd:	74 0e                	je     f011680d <test_priority_normal_and_lower+0x12b>
f01167ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116802:	85 c0                	test   %eax,%eax
f0116804:	74 07                	je     f011680d <test_priority_normal_and_lower+0x12b>
f0116806:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116809:	85 c0                	test   %eax,%eax
f011680b:	75 17                	jne    f0116824 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011680d:	83 ec 04             	sub    $0x4,%esp
f0116810:	68 b8 a5 13 f0       	push   $0xf013a5b8
f0116815:	68 eb 00 00 00       	push   $0xeb
f011681a:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011681f:	e8 d7 99 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116824:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116827:	8b 40 74             	mov    0x74(%eax),%eax
f011682a:	83 f8 14             	cmp    $0x14,%eax
f011682d:	75 16                	jne    f0116845 <test_priority_normal_and_lower+0x163>
f011682f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116832:	8b 40 74             	mov    0x74(%eax),%eax
f0116835:	83 f8 1e             	cmp    $0x1e,%eax
f0116838:	75 0b                	jne    f0116845 <test_priority_normal_and_lower+0x163>
f011683a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011683d:	8b 40 74             	mov    0x74(%eax),%eax
f0116840:	83 f8 28             	cmp    $0x28,%eax
f0116843:	74 17                	je     f011685c <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0116845:	83 ec 04             	sub    $0x4,%esp
f0116848:	68 ec a5 13 f0       	push   $0xf013a5ec
f011684d:	68 ee 00 00 00       	push   $0xee
f0116852:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116857:	e8 9f 99 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f011685c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116863:	eb 44                	jmp    f01168a9 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116865:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116868:	8b 48 78             	mov    0x78(%eax),%ecx
f011686b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011686e:	89 d0                	mov    %edx,%eax
f0116870:	01 c0                	add    %eax,%eax
f0116872:	01 d0                	add    %edx,%eax
f0116874:	c1 e0 03             	shl    $0x3,%eax
f0116877:	01 c8                	add    %ecx,%eax
f0116879:	8b 10                	mov    (%eax),%edx
f011687b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011687e:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116885:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116888:	8b 48 78             	mov    0x78(%eax),%ecx
f011688b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011688e:	89 d0                	mov    %edx,%eax
f0116890:	01 c0                	add    %eax,%eax
f0116892:	01 d0                	add    %edx,%eax
f0116894:	c1 e0 03             	shl    $0x3,%eax
f0116897:	01 c8                	add    %ecx,%eax
f0116899:	8b 50 08             	mov    0x8(%eax),%edx
f011689c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011689f:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01168a6:	ff 45 e4             	incl   -0x1c(%ebp)
f01168a9:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01168ad:	7e b6                	jle    f0116865 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01168af:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01168b6:	eb 44                	jmp    f01168fc <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01168b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168bb:	8b 48 78             	mov    0x78(%eax),%ecx
f01168be:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168c1:	89 d0                	mov    %edx,%eax
f01168c3:	01 c0                	add    %eax,%eax
f01168c5:	01 d0                	add    %edx,%eax
f01168c7:	c1 e0 03             	shl    $0x3,%eax
f01168ca:	01 c8                	add    %ecx,%eax
f01168cc:	8b 10                	mov    (%eax),%edx
f01168ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168d1:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01168d8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168db:	8b 48 78             	mov    0x78(%eax),%ecx
f01168de:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168e1:	89 d0                	mov    %edx,%eax
f01168e3:	01 c0                	add    %eax,%eax
f01168e5:	01 d0                	add    %edx,%eax
f01168e7:	c1 e0 03             	shl    $0x3,%eax
f01168ea:	01 c8                	add    %ecx,%eax
f01168ec:	8b 50 08             	mov    0x8(%eax),%edx
f01168ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168f2:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01168f9:	ff 45 e0             	incl   -0x20(%ebp)
f01168fc:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116900:	7e b6                	jle    f01168b8 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116902:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116909:	eb 44                	jmp    f011694f <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011690b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011690e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116911:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116914:	89 d0                	mov    %edx,%eax
f0116916:	01 c0                	add    %eax,%eax
f0116918:	01 d0                	add    %edx,%eax
f011691a:	c1 e0 03             	shl    $0x3,%eax
f011691d:	01 c8                	add    %ecx,%eax
f011691f:	8b 10                	mov    (%eax),%edx
f0116921:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116924:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011692b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011692e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116931:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116934:	89 d0                	mov    %edx,%eax
f0116936:	01 c0                	add    %eax,%eax
f0116938:	01 d0                	add    %edx,%eax
f011693a:	c1 e0 03             	shl    $0x3,%eax
f011693d:	01 c8                	add    %ecx,%eax
f011693f:	8b 50 08             	mov    0x8(%eax),%edx
f0116942:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116945:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011694c:	ff 45 dc             	incl   -0x24(%ebp)
f011694f:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116953:	7e b6                	jle    f011690b <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116955:	e8 6f 5f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011695a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011695d:	e8 da d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116962:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116965:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116968:	83 ec 08             	sub    $0x8,%esp
f011696b:	6a 03                	push   $0x3
f011696d:	50                   	push   %eax
f011696e:	e8 32 44 ff ff       	call   f010ada5 <set_program_priority>
f0116973:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116976:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116979:	83 ec 08             	sub    $0x8,%esp
f011697c:	6a 03                	push   $0x3
f011697e:	50                   	push   %eax
f011697f:	e8 21 44 ff ff       	call   f010ada5 <set_program_priority>
f0116984:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116987:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011698a:	83 ec 08             	sub    $0x8,%esp
f011698d:	6a 03                	push   $0x3
f011698f:	50                   	push   %eax
f0116990:	e8 10 44 ff ff       	call   f010ada5 <set_program_priority>
f0116995:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116998:	e8 9f d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011699d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01169a0:	74 17                	je     f01169b9 <test_priority_normal_and_lower+0x2d7>
f01169a2:	83 ec 04             	sub    $0x4,%esp
f01169a5:	68 38 a6 13 f0       	push   $0xf013a638
f01169aa:	68 0a 01 00 00       	push   $0x10a
f01169af:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01169b4:	e8 42 98 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01169b9:	e8 0b 5f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01169be:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01169c1:	74 17                	je     f01169da <test_priority_normal_and_lower+0x2f8>
f01169c3:	83 ec 04             	sub    $0x4,%esp
f01169c6:	68 38 a6 13 f0       	push   $0xf013a638
f01169cb:	68 0b 01 00 00       	push   $0x10b
f01169d0:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01169d5:	e8 21 98 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01169da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169dd:	8b 40 74             	mov    0x74(%eax),%eax
f01169e0:	83 f8 14             	cmp    $0x14,%eax
f01169e3:	75 16                	jne    f01169fb <test_priority_normal_and_lower+0x319>
f01169e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01169e8:	8b 40 74             	mov    0x74(%eax),%eax
f01169eb:	83 f8 1e             	cmp    $0x1e,%eax
f01169ee:	75 0b                	jne    f01169fb <test_priority_normal_and_lower+0x319>
f01169f0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01169f3:	8b 40 74             	mov    0x74(%eax),%eax
f01169f6:	83 f8 28             	cmp    $0x28,%eax
f01169f9:	74 17                	je     f0116a12 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01169fb:	83 ec 04             	sub    $0x4,%esp
f01169fe:	68 64 a6 13 f0       	push   $0xf013a664
f0116a03:	68 0e 01 00 00       	push   $0x10e
f0116a08:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116a0d:	e8 e9 97 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116a12:	e8 b2 5e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116a17:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a1a:	e8 1d d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116a1f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116a22:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a25:	83 ec 08             	sub    $0x8,%esp
f0116a28:	6a 02                	push   $0x2
f0116a2a:	50                   	push   %eax
f0116a2b:	e8 75 43 ff ff       	call   f010ada5 <set_program_priority>
f0116a30:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116a33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a36:	83 ec 08             	sub    $0x8,%esp
f0116a39:	6a 02                	push   $0x2
f0116a3b:	50                   	push   %eax
f0116a3c:	e8 64 43 ff ff       	call   f010ada5 <set_program_priority>
f0116a41:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116a44:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a47:	83 ec 08             	sub    $0x8,%esp
f0116a4a:	6a 02                	push   $0x2
f0116a4c:	50                   	push   %eax
f0116a4d:	e8 53 43 ff ff       	call   f010ada5 <set_program_priority>
f0116a52:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a55:	e8 e2 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116a5a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116a5d:	74 17                	je     f0116a76 <test_priority_normal_and_lower+0x394>
f0116a5f:	83 ec 04             	sub    $0x4,%esp
f0116a62:	68 38 a6 13 f0       	push   $0xf013a638
f0116a67:	68 18 01 00 00       	push   $0x118
f0116a6c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116a71:	e8 85 97 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116a76:	e8 4e 5e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116a7b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116a7e:	74 21                	je     f0116aa1 <test_priority_normal_and_lower+0x3bf>
f0116a80:	e8 44 5e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116a85:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a88:	29 c2                	sub    %eax,%edx
f0116a8a:	89 d0                	mov    %edx,%eax
f0116a8c:	50                   	push   %eax
f0116a8d:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116a92:	68 19 01 00 00       	push   $0x119
f0116a97:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116a9c:	e8 5a 97 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116aa1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116aa4:	8b 40 74             	mov    0x74(%eax),%eax
f0116aa7:	83 f8 0a             	cmp    $0xa,%eax
f0116aaa:	75 16                	jne    f0116ac2 <test_priority_normal_and_lower+0x3e0>
f0116aac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116aaf:	8b 40 74             	mov    0x74(%eax),%eax
f0116ab2:	83 f8 0f             	cmp    $0xf,%eax
f0116ab5:	75 0b                	jne    f0116ac2 <test_priority_normal_and_lower+0x3e0>
f0116ab7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116aba:	8b 40 74             	mov    0x74(%eax),%eax
f0116abd:	83 f8 14             	cmp    $0x14,%eax
f0116ac0:	74 17                	je     f0116ad9 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116ac2:	83 ec 04             	sub    $0x4,%esp
f0116ac5:	68 e8 a6 13 f0       	push   $0xf013a6e8
f0116aca:	68 1c 01 00 00       	push   $0x11c
f0116acf:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116ad4:	e8 22 97 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ad9:	e8 eb 5d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116ade:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ae1:	e8 56 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116ae6:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116ae9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116aec:	83 ec 08             	sub    $0x8,%esp
f0116aef:	6a 02                	push   $0x2
f0116af1:	50                   	push   %eax
f0116af2:	e8 ae 42 ff ff       	call   f010ada5 <set_program_priority>
f0116af7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116afa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116afd:	83 ec 08             	sub    $0x8,%esp
f0116b00:	6a 02                	push   $0x2
f0116b02:	50                   	push   %eax
f0116b03:	e8 9d 42 ff ff       	call   f010ada5 <set_program_priority>
f0116b08:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116b0b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b0e:	83 ec 08             	sub    $0x8,%esp
f0116b11:	6a 02                	push   $0x2
f0116b13:	50                   	push   %eax
f0116b14:	e8 8c 42 ff ff       	call   f010ada5 <set_program_priority>
f0116b19:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b1c:	e8 1b d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116b21:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116b24:	74 17                	je     f0116b3d <test_priority_normal_and_lower+0x45b>
f0116b26:	83 ec 04             	sub    $0x4,%esp
f0116b29:	68 38 a6 13 f0       	push   $0xf013a638
f0116b2e:	68 26 01 00 00       	push   $0x126
f0116b33:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116b38:	e8 be 96 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116b3d:	e8 87 5d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116b42:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116b45:	74 21                	je     f0116b68 <test_priority_normal_and_lower+0x486>
f0116b47:	e8 7d 5d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116b4c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116b4f:	29 c2                	sub    %eax,%edx
f0116b51:	89 d0                	mov    %edx,%eax
f0116b53:	50                   	push   %eax
f0116b54:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116b59:	68 27 01 00 00       	push   $0x127
f0116b5e:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116b63:	e8 93 96 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116b68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b6b:	8b 40 74             	mov    0x74(%eax),%eax
f0116b6e:	83 f8 0a             	cmp    $0xa,%eax
f0116b71:	75 16                	jne    f0116b89 <test_priority_normal_and_lower+0x4a7>
f0116b73:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b76:	8b 40 74             	mov    0x74(%eax),%eax
f0116b79:	83 f8 0f             	cmp    $0xf,%eax
f0116b7c:	75 0b                	jne    f0116b89 <test_priority_normal_and_lower+0x4a7>
f0116b7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b81:	8b 40 74             	mov    0x74(%eax),%eax
f0116b84:	83 f8 0a             	cmp    $0xa,%eax
f0116b87:	74 17                	je     f0116ba0 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116b89:	83 ec 04             	sub    $0x4,%esp
f0116b8c:	68 e8 a6 13 f0       	push   $0xf013a6e8
f0116b91:	68 2a 01 00 00       	push   $0x12a
f0116b96:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116b9b:	e8 5b 96 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 10; i++)
f0116ba0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116ba7:	eb 7a                	jmp    f0116c23 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116ba9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116bac:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116bb3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bb6:	8b 58 78             	mov    0x78(%eax),%ebx
f0116bb9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116bbc:	89 d0                	mov    %edx,%eax
f0116bbe:	01 c0                	add    %eax,%eax
f0116bc0:	01 d0                	add    %edx,%eax
f0116bc2:	c1 e0 03             	shl    $0x3,%eax
f0116bc5:	01 d8                	add    %ebx,%eax
f0116bc7:	8b 00                	mov    (%eax),%eax
f0116bc9:	39 c1                	cmp    %eax,%ecx
f0116bcb:	74 17                	je     f0116be4 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0116bcd:	83 ec 04             	sub    $0x4,%esp
f0116bd0:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116bd5:	68 2f 01 00 00       	push   $0x12f
f0116bda:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116bdf:	e8 17 96 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116be7:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116bee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bf1:	8b 58 78             	mov    0x78(%eax),%ebx
f0116bf4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116bf7:	89 d0                	mov    %edx,%eax
f0116bf9:	01 c0                	add    %eax,%eax
f0116bfb:	01 d0                	add    %edx,%eax
f0116bfd:	c1 e0 03             	shl    $0x3,%eax
f0116c00:	01 d8                	add    %ebx,%eax
f0116c02:	8b 40 08             	mov    0x8(%eax),%eax
f0116c05:	39 c1                	cmp    %eax,%ecx
f0116c07:	74 17                	je     f0116c20 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116c09:	83 ec 04             	sub    $0x4,%esp
f0116c0c:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116c11:	68 32 01 00 00       	push   $0x132
f0116c16:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116c1b:	e8 db 95 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116c20:	ff 45 d8             	incl   -0x28(%ebp)
f0116c23:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116c27:	7e 80                	jle    f0116ba9 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116c29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116c30:	eb 7a                	jmp    f0116cac <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116c32:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116c35:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116c3c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c3f:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c42:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116c45:	89 d0                	mov    %edx,%eax
f0116c47:	01 c0                	add    %eax,%eax
f0116c49:	01 d0                	add    %edx,%eax
f0116c4b:	c1 e0 03             	shl    $0x3,%eax
f0116c4e:	01 d8                	add    %ebx,%eax
f0116c50:	8b 00                	mov    (%eax),%eax
f0116c52:	39 c1                	cmp    %eax,%ecx
f0116c54:	74 17                	je     f0116c6d <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116c56:	83 ec 04             	sub    $0x4,%esp
f0116c59:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116c5e:	68 38 01 00 00       	push   $0x138
f0116c63:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116c68:	e8 8e 95 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116c6d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116c70:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116c77:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c7a:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c7d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116c80:	89 d0                	mov    %edx,%eax
f0116c82:	01 c0                	add    %eax,%eax
f0116c84:	01 d0                	add    %edx,%eax
f0116c86:	c1 e0 03             	shl    $0x3,%eax
f0116c89:	01 d8                	add    %ebx,%eax
f0116c8b:	8b 40 08             	mov    0x8(%eax),%eax
f0116c8e:	39 c1                	cmp    %eax,%ecx
f0116c90:	74 17                	je     f0116ca9 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0116c92:	83 ec 04             	sub    $0x4,%esp
f0116c95:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116c9a:	68 3b 01 00 00       	push   $0x13b
f0116c9f:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116ca4:	e8 52 95 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116ca9:	ff 45 d4             	incl   -0x2c(%ebp)
f0116cac:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116cb0:	7e 80                	jle    f0116c32 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116cb2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116cb9:	eb 7a                	jmp    f0116d35 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116cbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116cbe:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116cc5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116cc8:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ccb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116cce:	89 d0                	mov    %edx,%eax
f0116cd0:	01 c0                	add    %eax,%eax
f0116cd2:	01 d0                	add    %edx,%eax
f0116cd4:	c1 e0 03             	shl    $0x3,%eax
f0116cd7:	01 d8                	add    %ebx,%eax
f0116cd9:	8b 00                	mov    (%eax),%eax
f0116cdb:	39 c1                	cmp    %eax,%ecx
f0116cdd:	74 17                	je     f0116cf6 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0116cdf:	83 ec 04             	sub    $0x4,%esp
f0116ce2:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116ce7:	68 41 01 00 00       	push   $0x141
f0116cec:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116cf1:	e8 05 95 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116cf6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116cf9:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116d00:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d03:	8b 58 78             	mov    0x78(%eax),%ebx
f0116d06:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116d09:	89 d0                	mov    %edx,%eax
f0116d0b:	01 c0                	add    %eax,%eax
f0116d0d:	01 d0                	add    %edx,%eax
f0116d0f:	c1 e0 03             	shl    $0x3,%eax
f0116d12:	01 d8                	add    %ebx,%eax
f0116d14:	8b 40 08             	mov    0x8(%eax),%eax
f0116d17:	39 c1                	cmp    %eax,%ecx
f0116d19:	74 17                	je     f0116d32 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116d1b:	83 ec 04             	sub    $0x4,%esp
f0116d1e:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116d23:	68 44 01 00 00       	push   $0x144
f0116d28:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116d2d:	e8 c9 94 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116d32:	ff 45 d0             	incl   -0x30(%ebp)
f0116d35:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116d39:	7e 80                	jle    f0116cbb <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116d3b:	e8 89 5b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116d40:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d43:	e8 f4 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116d48:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116d4b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d4e:	83 ec 08             	sub    $0x8,%esp
f0116d51:	6a 01                	push   $0x1
f0116d53:	50                   	push   %eax
f0116d54:	e8 4c 40 ff ff       	call   f010ada5 <set_program_priority>
f0116d59:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116d5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d5f:	83 ec 08             	sub    $0x8,%esp
f0116d62:	6a 01                	push   $0x1
f0116d64:	50                   	push   %eax
f0116d65:	e8 3b 40 ff ff       	call   f010ada5 <set_program_priority>
f0116d6a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116d6d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d70:	83 ec 08             	sub    $0x8,%esp
f0116d73:	6a 01                	push   $0x1
f0116d75:	50                   	push   %eax
f0116d76:	e8 2a 40 ff ff       	call   f010ada5 <set_program_priority>
f0116d7b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d7e:	e8 b9 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116d83:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116d86:	74 17                	je     f0116d9f <test_priority_normal_and_lower+0x6bd>
f0116d88:	83 ec 04             	sub    $0x4,%esp
f0116d8b:	68 38 a6 13 f0       	push   $0xf013a638
f0116d90:	68 4d 01 00 00       	push   $0x14d
f0116d95:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116d9a:	e8 5c 94 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116d9f:	e8 25 5b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116da4:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116da7:	83 f8 0d             	cmp    $0xd,%eax
f0116daa:	74 17                	je     f0116dc3 <test_priority_normal_and_lower+0x6e1>
f0116dac:	83 ec 04             	sub    $0x4,%esp
f0116daf:	68 44 a9 13 f0       	push   $0xf013a944
f0116db4:	68 4e 01 00 00       	push   $0x14e
f0116db9:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116dbe:	e8 38 94 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116dc3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116dc6:	8b 40 74             	mov    0x74(%eax),%eax
f0116dc9:	83 f8 05             	cmp    $0x5,%eax
f0116dcc:	75 16                	jne    f0116de4 <test_priority_normal_and_lower+0x702>
f0116dce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116dd1:	8b 40 74             	mov    0x74(%eax),%eax
f0116dd4:	83 f8 07             	cmp    $0x7,%eax
f0116dd7:	75 0b                	jne    f0116de4 <test_priority_normal_and_lower+0x702>
f0116dd9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ddc:	8b 40 74             	mov    0x74(%eax),%eax
f0116ddf:	83 f8 05             	cmp    $0x5,%eax
f0116de2:	74 17                	je     f0116dfb <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0116de4:	83 ec 04             	sub    $0x4,%esp
f0116de7:	68 8c a9 13 f0       	push   $0xf013a98c
f0116dec:	68 51 01 00 00       	push   $0x151
f0116df1:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116df6:	e8 00 94 fe ff       	call   f01001fb <_panic>


		freeFrames = sys_calculate_free_frames();
f0116dfb:	e8 c9 5a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116e00:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e03:	e8 34 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116e08:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116e0b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e0e:	83 ec 08             	sub    $0x8,%esp
f0116e11:	6a 01                	push   $0x1
f0116e13:	50                   	push   %eax
f0116e14:	e8 8c 3f ff ff       	call   f010ada5 <set_program_priority>
f0116e19:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e1c:	e8 1b cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116e21:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116e24:	74 17                	je     f0116e3d <test_priority_normal_and_lower+0x75b>
f0116e26:	83 ec 04             	sub    $0x4,%esp
f0116e29:	68 38 a6 13 f0       	push   $0xf013a638
f0116e2e:	68 57 01 00 00       	push   $0x157
f0116e33:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116e38:	e8 be 93 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116e3d:	e8 87 5a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0116e42:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116e45:	83 f8 03             	cmp    $0x3,%eax
f0116e48:	74 17                	je     f0116e61 <test_priority_normal_and_lower+0x77f>
f0116e4a:	83 ec 04             	sub    $0x4,%esp
f0116e4d:	68 38 a6 13 f0       	push   $0xf013a638
f0116e52:	68 58 01 00 00       	push   $0x158
f0116e57:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116e5c:	e8 9a 93 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116e61:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e64:	8b 40 74             	mov    0x74(%eax),%eax
f0116e67:	83 f8 02             	cmp    $0x2,%eax
f0116e6a:	75 16                	jne    f0116e82 <test_priority_normal_and_lower+0x7a0>
f0116e6c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e6f:	8b 40 74             	mov    0x74(%eax),%eax
f0116e72:	83 f8 07             	cmp    $0x7,%eax
f0116e75:	75 0b                	jne    f0116e82 <test_priority_normal_and_lower+0x7a0>
f0116e77:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e7a:	8b 40 74             	mov    0x74(%eax),%eax
f0116e7d:	83 f8 05             	cmp    $0x5,%eax
f0116e80:	74 17                	je     f0116e99 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0116e82:	83 ec 04             	sub    $0x4,%esp
f0116e85:	68 6c a7 13 f0       	push   $0xf013a76c
f0116e8a:	68 5b 01 00 00       	push   $0x15b
f0116e8f:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116e94:	e8 62 93 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 2; i++)
f0116e99:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116ea0:	e9 80 00 00 00       	jmp    f0116f25 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116ea5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116ea8:	83 c0 08             	add    $0x8,%eax
f0116eab:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116eb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116eb5:	8b 58 78             	mov    0x78(%eax),%ebx
f0116eb8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116ebb:	89 d0                	mov    %edx,%eax
f0116ebd:	01 c0                	add    %eax,%eax
f0116ebf:	01 d0                	add    %edx,%eax
f0116ec1:	c1 e0 03             	shl    $0x3,%eax
f0116ec4:	01 d8                	add    %ebx,%eax
f0116ec6:	8b 00                	mov    (%eax),%eax
f0116ec8:	39 c1                	cmp    %eax,%ecx
f0116eca:	74 17                	je     f0116ee3 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116ecc:	83 ec 04             	sub    $0x4,%esp
f0116ecf:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116ed4:	68 60 01 00 00       	push   $0x160
f0116ed9:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116ede:	e8 18 93 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ee3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116ee6:	83 c0 08             	add    $0x8,%eax
f0116ee9:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116ef0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ef3:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ef6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116ef9:	89 d0                	mov    %edx,%eax
f0116efb:	01 c0                	add    %eax,%eax
f0116efd:	01 d0                	add    %edx,%eax
f0116eff:	c1 e0 03             	shl    $0x3,%eax
f0116f02:	01 d8                	add    %ebx,%eax
f0116f04:	8b 40 08             	mov    0x8(%eax),%eax
f0116f07:	39 c1                	cmp    %eax,%ecx
f0116f09:	74 17                	je     f0116f22 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116f0b:	83 ec 04             	sub    $0x4,%esp
f0116f0e:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116f13:	68 63 01 00 00       	push   $0x163
f0116f18:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116f1d:	e8 d9 92 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116f22:	ff 45 cc             	incl   -0x34(%ebp)
f0116f25:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116f29:	0f 8e 76 ff ff ff    	jle    f0116ea5 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116f2f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116f36:	e9 80 00 00 00       	jmp    f0116fbb <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f3b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116f3e:	83 c0 03             	add    $0x3,%eax
f0116f41:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116f48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f4b:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f4e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116f51:	89 d0                	mov    %edx,%eax
f0116f53:	01 c0                	add    %eax,%eax
f0116f55:	01 d0                	add    %edx,%eax
f0116f57:	c1 e0 03             	shl    $0x3,%eax
f0116f5a:	01 d8                	add    %ebx,%eax
f0116f5c:	8b 00                	mov    (%eax),%eax
f0116f5e:	39 c1                	cmp    %eax,%ecx
f0116f60:	74 17                	je     f0116f79 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116f62:	ff 75 c8             	pushl  -0x38(%ebp)
f0116f65:	68 28 aa 13 f0       	push   $0xf013aa28
f0116f6a:	68 69 01 00 00       	push   $0x169
f0116f6f:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116f74:	e8 82 92 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f79:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116f7c:	83 c0 03             	add    $0x3,%eax
f0116f7f:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116f86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f89:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f8c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116f8f:	89 d0                	mov    %edx,%eax
f0116f91:	01 c0                	add    %eax,%eax
f0116f93:	01 d0                	add    %edx,%eax
f0116f95:	c1 e0 03             	shl    $0x3,%eax
f0116f98:	01 d8                	add    %ebx,%eax
f0116f9a:	8b 40 08             	mov    0x8(%eax),%eax
f0116f9d:	39 c1                	cmp    %eax,%ecx
f0116f9f:	74 17                	je     f0116fb8 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116fa1:	83 ec 04             	sub    $0x4,%esp
f0116fa4:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116fa9:	68 6c 01 00 00       	push   $0x16c
f0116fae:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116fb3:	e8 43 92 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116fb8:	ff 45 c8             	incl   -0x38(%ebp)
f0116fbb:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116fbf:	0f 8e 76 ff ff ff    	jle    f0116f3b <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116fc5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116fcc:	e9 80 00 00 00       	jmp    f0117051 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116fd1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116fd4:	83 c0 05             	add    $0x5,%eax
f0116fd7:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116fde:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116fe1:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fe4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116fe7:	89 d0                	mov    %edx,%eax
f0116fe9:	01 c0                	add    %eax,%eax
f0116feb:	01 d0                	add    %edx,%eax
f0116fed:	c1 e0 03             	shl    $0x3,%eax
f0116ff0:	01 d8                	add    %ebx,%eax
f0116ff2:	8b 00                	mov    (%eax),%eax
f0116ff4:	39 c1                	cmp    %eax,%ecx
f0116ff6:	74 17                	je     f011700f <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116ff8:	83 ec 04             	sub    $0x4,%esp
f0116ffb:	68 bc a9 13 f0       	push   $0xf013a9bc
f0117000:	68 72 01 00 00       	push   $0x172
f0117005:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011700a:	e8 ec 91 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011700f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117012:	83 c0 05             	add    $0x5,%eax
f0117015:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011701c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011701f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117022:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117025:	89 d0                	mov    %edx,%eax
f0117027:	01 c0                	add    %eax,%eax
f0117029:	01 d0                	add    %edx,%eax
f011702b:	c1 e0 03             	shl    $0x3,%eax
f011702e:	01 d8                	add    %ebx,%eax
f0117030:	8b 40 08             	mov    0x8(%eax),%eax
f0117033:	39 c1                	cmp    %eax,%ecx
f0117035:	74 17                	je     f011704e <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117037:	83 ec 04             	sub    $0x4,%esp
f011703a:	68 bc a9 13 f0       	push   $0xf013a9bc
f011703f:	68 75 01 00 00       	push   $0x175
f0117044:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0117049:	e8 ad 91 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011704e:	ff 45 c4             	incl   -0x3c(%ebp)
f0117051:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117055:	0f 8e 76 ff ff ff    	jle    f0116fd1 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011705b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011705e:	83 ec 08             	sub    $0x8,%esp
f0117061:	6a 05                	push   $0x5
f0117063:	50                   	push   %eax
f0117064:	e8 3c 3d ff ff       	call   f010ada5 <set_program_priority>
f0117069:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011706c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011706f:	83 ec 08             	sub    $0x8,%esp
f0117072:	6a 05                	push   $0x5
f0117074:	50                   	push   %eax
f0117075:	e8 2b 3d ff ff       	call   f010ada5 <set_program_priority>
f011707a:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011707d:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117084:	75 6e 61 
f0117087:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011708e:	6c 00 00 
f0117091:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117097:	b9 17 00 00 00       	mov    $0x17,%ecx
f011709c:	b8 00 00 00 00       	mov    $0x0,%eax
f01170a1:	89 d7                	mov    %edx,%edi
f01170a3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01170a5:	83 ec 0c             	sub    $0xc,%esp
f01170a8:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01170ae:	50                   	push   %eax
f01170af:	e8 30 9c fe ff       	call   f0100ce4 <execute_command>
f01170b4:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f01170b7:	eb 10                	jmp    f01170c9 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01170b9:	83 ec 0c             	sub    $0xc,%esp
f01170bc:	68 98 aa 13 f0       	push   $0xf013aa98
f01170c1:	e8 bc 9b fe ff       	call   f0100c82 <cprintf>
f01170c6:	83 c4 10             	add    $0x10,%esp
	}
}
f01170c9:	90                   	nop
f01170ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01170cd:	5b                   	pop    %ebx
f01170ce:	5e                   	pop    %esi
f01170cf:	5f                   	pop    %edi
f01170d0:	5d                   	pop    %ebp
f01170d1:	c3                   	ret    

f01170d2 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01170d2:	55                   	push   %ebp
f01170d3:	89 e5                	mov    %esp,%ebp
f01170d5:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01170da:	83 f8 03             	cmp    $0x3,%eax
f01170dd:	75 04                	jne    f01170e3 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01170df:	b0 01                	mov    $0x1,%al
f01170e1:	eb 02                	jmp    f01170e5 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01170e3:	b0 00                	mov    $0x0,%al
f01170e5:	5d                   	pop    %ebp
f01170e6:	c3                   	ret    

f01170e7 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01170e7:	55                   	push   %ebp
f01170e8:	89 e5                	mov    %esp,%ebp
f01170ea:	57                   	push   %edi
f01170eb:	53                   	push   %ebx
f01170ec:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f01170f2:	83 ec 0c             	sub    $0xc,%esp
f01170f5:	68 9c ab 13 f0       	push   $0xf013ab9c
f01170fa:	e8 83 9b fe ff       	call   f0100c82 <cprintf>
f01170ff:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117102:	83 ec 0c             	sub    $0xc,%esp
f0117105:	68 cc ab 13 f0       	push   $0xf013abcc
f011710a:	e8 73 9b fe ff       	call   f0100c82 <cprintf>
f011710f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117112:	83 ec 0c             	sub    $0xc,%esp
f0117115:	68 9c ab 13 f0       	push   $0xf013ab9c
f011711a:	e8 63 9b fe ff       	call   f0100c82 <cprintf>
f011711f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117122:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117126:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f011712a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117130:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117136:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f011713d:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117144:	e8 80 57 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117149:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011714c:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117152:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117157:	b8 00 00 00 00       	mov    $0x0,%eax
f011715c:	89 d7                	mov    %edx,%edi
f011715e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117160:	e8 64 57 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117165:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117168:	e8 cf cb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011716d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117170:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117177:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011717a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011717f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117182:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117185:	ba 00 00 00 00       	mov    $0x0,%edx
f011718a:	f7 75 d4             	divl   -0x2c(%ebp)
f011718d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117190:	29 d0                	sub    %edx,%eax
f0117192:	89 c1                	mov    %eax,%ecx
f0117194:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011719b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01171a0:	0f b6 d0             	movzbl %al,%edx
f01171a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01171a6:	01 d0                	add    %edx,%eax
f01171a8:	48                   	dec    %eax
f01171a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01171ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01171af:	ba 00 00 00 00       	mov    $0x0,%edx
f01171b4:	f7 75 cc             	divl   -0x34(%ebp)
f01171b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01171ba:	29 d0                	sub    %edx,%eax
f01171bc:	01 c1                	add    %eax,%ecx
f01171be:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01171c5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01171ca:	0f b6 c0             	movzbl %al,%eax
f01171cd:	c1 e0 04             	shl    $0x4,%eax
f01171d0:	89 c2                	mov    %eax,%edx
f01171d2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01171d5:	01 d0                	add    %edx,%eax
f01171d7:	48                   	dec    %eax
f01171d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01171db:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01171de:	ba 00 00 00 00       	mov    $0x0,%edx
f01171e3:	f7 75 c4             	divl   -0x3c(%ebp)
f01171e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01171e9:	29 d0                	sub    %edx,%eax
f01171eb:	01 c8                	add    %ecx,%eax
f01171ed:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01171f2:	29 c2                	sub    %eax,%edx
f01171f4:	89 d0                	mov    %edx,%eax
f01171f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01171f9:	83 ec 0c             	sub    $0xc,%esp
f01171fc:	ff 75 bc             	pushl  -0x44(%ebp)
f01171ff:	e8 fa 05 ff ff       	call   f01077fe <kmalloc>
f0117204:	83 c4 10             	add    $0x10,%esp
f0117207:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011720d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117213:	85 c0                	test   %eax,%eax
f0117215:	74 14                	je     f011722b <test_kmalloc+0x144>
f0117217:	83 ec 04             	sub    $0x4,%esp
f011721a:	68 28 ac 13 f0       	push   $0xf013ac28
f011721f:	6a 40                	push   $0x40
f0117221:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117226:	e8 d0 8f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011722b:	e8 0c cb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117230:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117233:	74 14                	je     f0117249 <test_kmalloc+0x162>
f0117235:	83 ec 04             	sub    $0x4,%esp
f0117238:	68 74 ac 13 f0       	push   $0xf013ac74
f011723d:	6a 41                	push   $0x41
f011723f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117244:	e8 b2 8f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117249:	e8 7b 56 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011724e:	89 c2                	mov    %eax,%edx
f0117250:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117253:	39 c2                	cmp    %eax,%edx
f0117255:	74 14                	je     f011726b <test_kmalloc+0x184>
f0117257:	83 ec 04             	sub    $0x4,%esp
f011725a:	68 dc ac 13 f0       	push   $0xf013acdc
f011725f:	6a 42                	push   $0x42
f0117261:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117266:	e8 90 8f fe ff       	call   f01001fb <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f011726b:	83 ec 0c             	sub    $0xc,%esp
f011726e:	68 1c ad 13 f0       	push   $0xf013ad1c
f0117273:	e8 0a 9a fe ff       	call   f0100c82 <cprintf>
f0117278:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011727b:	e8 49 56 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117280:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117283:	e8 b4 ca fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117288:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011728b:	83 ec 0c             	sub    $0xc,%esp
f011728e:	68 00 fc 1f 00       	push   $0x1ffc00
f0117293:	e8 66 05 ff ff       	call   f01077fe <kmalloc>
f0117298:	83 c4 10             	add    $0x10,%esp
f011729b:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01172a1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01172a7:	89 c1                	mov    %eax,%ecx
f01172a9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01172b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01172b8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01172bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172be:	ba 00 00 00 00       	mov    $0x0,%edx
f01172c3:	f7 75 b8             	divl   -0x48(%ebp)
f01172c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172c9:	29 d0                	sub    %edx,%eax
f01172cb:	89 c3                	mov    %eax,%ebx
f01172cd:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01172d4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01172d9:	0f b6 d0             	movzbl %al,%edx
f01172dc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172df:	01 d0                	add    %edx,%eax
f01172e1:	48                   	dec    %eax
f01172e2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01172e5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01172ed:	f7 75 b0             	divl   -0x50(%ebp)
f01172f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172f3:	29 d0                	sub    %edx,%eax
f01172f5:	01 c3                	add    %eax,%ebx
f01172f7:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01172fe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117303:	0f b6 c0             	movzbl %al,%eax
f0117306:	c1 e0 04             	shl    $0x4,%eax
f0117309:	89 c2                	mov    %eax,%edx
f011730b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011730e:	01 d0                	add    %edx,%eax
f0117310:	48                   	dec    %eax
f0117311:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117314:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117317:	ba 00 00 00 00       	mov    $0x0,%edx
f011731c:	f7 75 a8             	divl   -0x58(%ebp)
f011731f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117322:	29 d0                	sub    %edx,%eax
f0117324:	01 d8                	add    %ebx,%eax
f0117326:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011732b:	39 c1                	cmp    %eax,%ecx
f011732d:	74 14                	je     f0117343 <test_kmalloc+0x25c>
f011732f:	83 ec 04             	sub    $0x4,%esp
f0117332:	68 40 ad 13 f0       	push   $0xf013ad40
f0117337:	6a 49                	push   $0x49
f0117339:	68 5a ac 13 f0       	push   $0xf013ac5a
f011733e:	e8 b8 8e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117343:	e8 f4 c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117348:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011734b:	74 14                	je     f0117361 <test_kmalloc+0x27a>
f011734d:	83 ec 04             	sub    $0x4,%esp
f0117350:	68 74 ac 13 f0       	push   $0xf013ac74
f0117355:	6a 4a                	push   $0x4a
f0117357:	68 5a ac 13 f0       	push   $0xf013ac5a
f011735c:	e8 9a 8e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117361:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117364:	e8 60 55 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117369:	29 c3                	sub    %eax,%ebx
f011736b:	89 d8                	mov    %ebx,%eax
f011736d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117372:	74 14                	je     f0117388 <test_kmalloc+0x2a1>
f0117374:	83 ec 04             	sub    $0x4,%esp
f0117377:	68 dc ac 13 f0       	push   $0xf013acdc
f011737c:	6a 4b                	push   $0x4b
f011737e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117383:	e8 73 8e fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117388:	e8 3c 55 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011738d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117390:	e8 a7 c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117395:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117398:	83 ec 0c             	sub    $0xc,%esp
f011739b:	68 00 fc 1f 00       	push   $0x1ffc00
f01173a0:	e8 59 04 ff ff       	call   f01077fe <kmalloc>
f01173a5:	83 c4 10             	add    $0x10,%esp
f01173a8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01173ae:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01173b4:	89 c1                	mov    %eax,%ecx
f01173b6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01173bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01173c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01173c5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01173c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01173cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01173d0:	f7 75 a0             	divl   -0x60(%ebp)
f01173d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01173d6:	29 d0                	sub    %edx,%eax
f01173d8:	89 c3                	mov    %eax,%ebx
f01173da:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01173e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01173e6:	0f b6 d0             	movzbl %al,%edx
f01173e9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01173ec:	01 d0                	add    %edx,%eax
f01173ee:	48                   	dec    %eax
f01173ef:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01173f2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01173f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01173fa:	f7 75 98             	divl   -0x68(%ebp)
f01173fd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117400:	29 d0                	sub    %edx,%eax
f0117402:	01 c3                	add    %eax,%ebx
f0117404:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011740b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117410:	0f b6 c0             	movzbl %al,%eax
f0117413:	c1 e0 04             	shl    $0x4,%eax
f0117416:	89 c2                	mov    %eax,%edx
f0117418:	8b 45 90             	mov    -0x70(%ebp),%eax
f011741b:	01 d0                	add    %edx,%eax
f011741d:	48                   	dec    %eax
f011741e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117421:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117424:	ba 00 00 00 00       	mov    $0x0,%edx
f0117429:	f7 75 90             	divl   -0x70(%ebp)
f011742c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011742f:	29 d0                	sub    %edx,%eax
f0117431:	01 d8                	add    %ebx,%eax
f0117433:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117438:	39 c1                	cmp    %eax,%ecx
f011743a:	74 14                	je     f0117450 <test_kmalloc+0x369>
f011743c:	83 ec 04             	sub    $0x4,%esp
f011743f:	68 40 ad 13 f0       	push   $0xf013ad40
f0117444:	6a 51                	push   $0x51
f0117446:	68 5a ac 13 f0       	push   $0xf013ac5a
f011744b:	e8 ab 8d fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117450:	e8 e7 c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117455:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117458:	74 14                	je     f011746e <test_kmalloc+0x387>
f011745a:	83 ec 04             	sub    $0x4,%esp
f011745d:	68 74 ac 13 f0       	push   $0xf013ac74
f0117462:	6a 52                	push   $0x52
f0117464:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117469:	e8 8d 8d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011746e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117471:	e8 53 54 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117476:	29 c3                	sub    %eax,%ebx
f0117478:	89 d8                	mov    %ebx,%eax
f011747a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011747f:	74 14                	je     f0117495 <test_kmalloc+0x3ae>
f0117481:	83 ec 04             	sub    $0x4,%esp
f0117484:	68 dc ac 13 f0       	push   $0xf013acdc
f0117489:	6a 53                	push   $0x53
f011748b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117490:	e8 66 8d fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117495:	e8 2f 54 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011749a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011749d:	e8 9a c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01174a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01174a5:	83 ec 0c             	sub    $0xc,%esp
f01174a8:	68 00 08 00 00       	push   $0x800
f01174ad:	e8 4c 03 ff ff       	call   f01077fe <kmalloc>
f01174b2:	83 c4 10             	add    $0x10,%esp
f01174b5:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01174bb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01174c1:	89 c1                	mov    %eax,%ecx
f01174c3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01174ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f01174cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01174d2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01174d5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01174d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01174dd:	f7 75 88             	divl   -0x78(%ebp)
f01174e0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01174e3:	29 d0                	sub    %edx,%eax
f01174e5:	89 c3                	mov    %eax,%ebx
f01174e7:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01174ee:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01174f3:	0f b6 d0             	movzbl %al,%edx
f01174f6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01174f9:	01 d0                	add    %edx,%eax
f01174fb:	48                   	dec    %eax
f01174fc:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117502:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117508:	ba 00 00 00 00       	mov    $0x0,%edx
f011750d:	f7 75 80             	divl   -0x80(%ebp)
f0117510:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117516:	29 d0                	sub    %edx,%eax
f0117518:	01 c3                	add    %eax,%ebx
f011751a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117521:	10 00 00 
f0117524:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117529:	0f b6 c0             	movzbl %al,%eax
f011752c:	c1 e0 04             	shl    $0x4,%eax
f011752f:	89 c2                	mov    %eax,%edx
f0117531:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117537:	01 d0                	add    %edx,%eax
f0117539:	48                   	dec    %eax
f011753a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117540:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117546:	ba 00 00 00 00       	mov    $0x0,%edx
f011754b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117551:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117557:	29 d0                	sub    %edx,%eax
f0117559:	01 d8                	add    %ebx,%eax
f011755b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117560:	39 c1                	cmp    %eax,%ecx
f0117562:	74 14                	je     f0117578 <test_kmalloc+0x491>
f0117564:	83 ec 04             	sub    $0x4,%esp
f0117567:	68 40 ad 13 f0       	push   $0xf013ad40
f011756c:	6a 59                	push   $0x59
f011756e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117573:	e8 83 8c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117578:	e8 bf c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011757d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117580:	74 14                	je     f0117596 <test_kmalloc+0x4af>
f0117582:	83 ec 04             	sub    $0x4,%esp
f0117585:	68 74 ac 13 f0       	push   $0xf013ac74
f011758a:	6a 5a                	push   $0x5a
f011758c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117591:	e8 65 8c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117596:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117599:	e8 2b 53 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011759e:	29 c3                	sub    %eax,%ebx
f01175a0:	89 d8                	mov    %ebx,%eax
f01175a2:	83 f8 01             	cmp    $0x1,%eax
f01175a5:	74 14                	je     f01175bb <test_kmalloc+0x4d4>
f01175a7:	83 ec 04             	sub    $0x4,%esp
f01175aa:	68 dc ac 13 f0       	push   $0xf013acdc
f01175af:	6a 5b                	push   $0x5b
f01175b1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01175b6:	e8 40 8c fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01175bb:	e8 09 53 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01175c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01175c3:	e8 74 c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01175c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01175cb:	83 ec 0c             	sub    $0xc,%esp
f01175ce:	68 00 08 00 00       	push   $0x800
f01175d3:	e8 26 02 ff ff       	call   f01077fe <kmalloc>
f01175d8:	83 c4 10             	add    $0x10,%esp
f01175db:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01175e1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01175e7:	89 c1                	mov    %eax,%ecx
f01175e9:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01175f0:	10 00 00 
f01175f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01175f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01175fe:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117604:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011760a:	ba 00 00 00 00       	mov    $0x0,%edx
f011760f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117615:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011761b:	29 d0                	sub    %edx,%eax
f011761d:	89 c3                	mov    %eax,%ebx
f011761f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117626:	10 00 00 
f0117629:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011762e:	0f b6 d0             	movzbl %al,%edx
f0117631:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117637:	01 d0                	add    %edx,%eax
f0117639:	48                   	dec    %eax
f011763a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117640:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117646:	ba 00 00 00 00       	mov    $0x0,%edx
f011764b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117651:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117657:	29 d0                	sub    %edx,%eax
f0117659:	01 c3                	add    %eax,%ebx
f011765b:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117662:	10 00 00 
f0117665:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011766a:	0f b6 c0             	movzbl %al,%eax
f011766d:	c1 e0 04             	shl    $0x4,%eax
f0117670:	89 c2                	mov    %eax,%edx
f0117672:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117678:	01 d0                	add    %edx,%eax
f011767a:	48                   	dec    %eax
f011767b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117681:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117687:	ba 00 00 00 00       	mov    $0x0,%edx
f011768c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117692:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117698:	29 d0                	sub    %edx,%eax
f011769a:	01 d8                	add    %ebx,%eax
f011769c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01176a1:	39 c1                	cmp    %eax,%ecx
f01176a3:	74 14                	je     f01176b9 <test_kmalloc+0x5d2>
f01176a5:	83 ec 04             	sub    $0x4,%esp
f01176a8:	68 40 ad 13 f0       	push   $0xf013ad40
f01176ad:	6a 61                	push   $0x61
f01176af:	68 5a ac 13 f0       	push   $0xf013ac5a
f01176b4:	e8 42 8b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01176b9:	e8 7e c6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01176be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01176c1:	74 14                	je     f01176d7 <test_kmalloc+0x5f0>
f01176c3:	83 ec 04             	sub    $0x4,%esp
f01176c6:	68 74 ac 13 f0       	push   $0xf013ac74
f01176cb:	6a 62                	push   $0x62
f01176cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01176d2:	e8 24 8b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01176d7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01176da:	e8 ea 51 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01176df:	29 c3                	sub    %eax,%ebx
f01176e1:	89 d8                	mov    %ebx,%eax
f01176e3:	83 f8 01             	cmp    $0x1,%eax
f01176e6:	74 14                	je     f01176fc <test_kmalloc+0x615>
f01176e8:	83 ec 04             	sub    $0x4,%esp
f01176eb:	68 dc ac 13 f0       	push   $0xf013acdc
f01176f0:	6a 63                	push   $0x63
f01176f2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01176f7:	e8 ff 8a fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01176fc:	e8 c8 51 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117701:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117704:	e8 33 c6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117709:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011770c:	83 ec 0c             	sub    $0xc,%esp
f011770f:	68 00 1c 00 00       	push   $0x1c00
f0117714:	e8 e5 00 ff ff       	call   f01077fe <kmalloc>
f0117719:	83 c4 10             	add    $0x10,%esp
f011771c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117722:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117728:	89 c1                	mov    %eax,%ecx
f011772a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117731:	10 00 00 
f0117734:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011773a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011773f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117745:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011774b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117750:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117756:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011775c:	29 d0                	sub    %edx,%eax
f011775e:	89 c3                	mov    %eax,%ebx
f0117760:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117767:	10 00 00 
f011776a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011776f:	0f b6 d0             	movzbl %al,%edx
f0117772:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117778:	01 d0                	add    %edx,%eax
f011777a:	48                   	dec    %eax
f011777b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117781:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117787:	ba 00 00 00 00       	mov    $0x0,%edx
f011778c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117792:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117798:	29 d0                	sub    %edx,%eax
f011779a:	01 c3                	add    %eax,%ebx
f011779c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01177a3:	10 00 00 
f01177a6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01177ab:	0f b6 c0             	movzbl %al,%eax
f01177ae:	c1 e0 04             	shl    $0x4,%eax
f01177b1:	89 c2                	mov    %eax,%edx
f01177b3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01177b9:	01 d0                	add    %edx,%eax
f01177bb:	48                   	dec    %eax
f01177bc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01177c2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01177c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01177cd:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01177d3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01177d9:	29 d0                	sub    %edx,%eax
f01177db:	01 d8                	add    %ebx,%eax
f01177dd:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01177e2:	39 c1                	cmp    %eax,%ecx
f01177e4:	74 14                	je     f01177fa <test_kmalloc+0x713>
f01177e6:	83 ec 04             	sub    $0x4,%esp
f01177e9:	68 40 ad 13 f0       	push   $0xf013ad40
f01177ee:	6a 69                	push   $0x69
f01177f0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01177f5:	e8 01 8a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01177fa:	e8 3d c5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01177ff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117802:	74 14                	je     f0117818 <test_kmalloc+0x731>
f0117804:	83 ec 04             	sub    $0x4,%esp
f0117807:	68 74 ac 13 f0       	push   $0xf013ac74
f011780c:	6a 6a                	push   $0x6a
f011780e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117813:	e8 e3 89 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117818:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011781b:	e8 a9 50 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117820:	29 c3                	sub    %eax,%ebx
f0117822:	89 d8                	mov    %ebx,%eax
f0117824:	83 f8 02             	cmp    $0x2,%eax
f0117827:	74 14                	je     f011783d <test_kmalloc+0x756>
f0117829:	83 ec 04             	sub    $0x4,%esp
f011782c:	68 dc ac 13 f0       	push   $0xf013acdc
f0117831:	6a 6b                	push   $0x6b
f0117833:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117838:	e8 be 89 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011783d:	e8 87 50 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117842:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117845:	e8 f2 c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011784a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011784d:	83 ec 0c             	sub    $0xc,%esp
f0117850:	68 00 fc 2f 00       	push   $0x2ffc00
f0117855:	e8 a4 ff fe ff       	call   f01077fe <kmalloc>
f011785a:	83 c4 10             	add    $0x10,%esp
f011785d:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117863:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117869:	89 c1                	mov    %eax,%ecx
f011786b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117872:	10 00 00 
f0117875:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011787b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117880:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117886:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011788c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117891:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117897:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011789d:	29 d0                	sub    %edx,%eax
f011789f:	89 c3                	mov    %eax,%ebx
f01178a1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01178a8:	10 00 00 
f01178ab:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01178b0:	0f b6 d0             	movzbl %al,%edx
f01178b3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01178b9:	01 d0                	add    %edx,%eax
f01178bb:	48                   	dec    %eax
f01178bc:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01178c2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01178c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01178cd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01178d3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01178d9:	29 d0                	sub    %edx,%eax
f01178db:	01 c3                	add    %eax,%ebx
f01178dd:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01178e4:	10 00 00 
f01178e7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01178ec:	0f b6 c0             	movzbl %al,%eax
f01178ef:	c1 e0 04             	shl    $0x4,%eax
f01178f2:	89 c2                	mov    %eax,%edx
f01178f4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01178fa:	01 d0                	add    %edx,%eax
f01178fc:	48                   	dec    %eax
f01178fd:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117903:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117909:	ba 00 00 00 00       	mov    $0x0,%edx
f011790e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117914:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011791a:	29 d0                	sub    %edx,%eax
f011791c:	01 d8                	add    %ebx,%eax
f011791e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117923:	39 c1                	cmp    %eax,%ecx
f0117925:	74 14                	je     f011793b <test_kmalloc+0x854>
f0117927:	83 ec 04             	sub    $0x4,%esp
f011792a:	68 40 ad 13 f0       	push   $0xf013ad40
f011792f:	6a 71                	push   $0x71
f0117931:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117936:	e8 c0 88 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011793b:	e8 fc c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117940:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117943:	74 14                	je     f0117959 <test_kmalloc+0x872>
f0117945:	83 ec 04             	sub    $0x4,%esp
f0117948:	68 74 ac 13 f0       	push   $0xf013ac74
f011794d:	6a 72                	push   $0x72
f011794f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117954:	e8 a2 88 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117959:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011795c:	e8 68 4f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117961:	29 c3                	sub    %eax,%ebx
f0117963:	89 d8                	mov    %ebx,%eax
f0117965:	3d 00 03 00 00       	cmp    $0x300,%eax
f011796a:	74 14                	je     f0117980 <test_kmalloc+0x899>
f011796c:	83 ec 04             	sub    $0x4,%esp
f011796f:	68 dc ac 13 f0       	push   $0xf013acdc
f0117974:	6a 73                	push   $0x73
f0117976:	68 5a ac 13 f0       	push   $0xf013ac5a
f011797b:	e8 7b 88 fe ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117980:	e8 44 4f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117985:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117988:	e8 af c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011798d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117990:	83 ec 0c             	sub    $0xc,%esp
f0117993:	68 00 fc 5f 00       	push   $0x5ffc00
f0117998:	e8 61 fe fe ff       	call   f01077fe <kmalloc>
f011799d:	83 c4 10             	add    $0x10,%esp
f01179a0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01179a6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01179ac:	89 c1                	mov    %eax,%ecx
f01179ae:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01179b5:	10 00 00 
f01179b8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01179be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01179c3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01179c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01179d4:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01179da:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179e0:	29 d0                	sub    %edx,%eax
f01179e2:	89 c3                	mov    %eax,%ebx
f01179e4:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01179eb:	10 00 00 
f01179ee:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01179f3:	0f b6 d0             	movzbl %al,%edx
f01179f6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01179fc:	01 d0                	add    %edx,%eax
f01179fe:	48                   	dec    %eax
f01179ff:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117a05:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117a0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a10:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117a16:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117a1c:	29 d0                	sub    %edx,%eax
f0117a1e:	01 c3                	add    %eax,%ebx
f0117a20:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117a27:	10 00 00 
f0117a2a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117a2f:	0f b6 c0             	movzbl %al,%eax
f0117a32:	c1 e0 04             	shl    $0x4,%eax
f0117a35:	89 c2                	mov    %eax,%edx
f0117a37:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117a3d:	01 d0                	add    %edx,%eax
f0117a3f:	48                   	dec    %eax
f0117a40:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117a46:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117a4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a51:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117a57:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117a5d:	29 d0                	sub    %edx,%eax
f0117a5f:	01 d8                	add    %ebx,%eax
f0117a61:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117a66:	39 c1                	cmp    %eax,%ecx
f0117a68:	74 14                	je     f0117a7e <test_kmalloc+0x997>
f0117a6a:	83 ec 04             	sub    $0x4,%esp
f0117a6d:	68 40 ad 13 f0       	push   $0xf013ad40
f0117a72:	6a 79                	push   $0x79
f0117a74:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117a79:	e8 7d 87 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a7e:	e8 b9 c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117a83:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117a86:	74 14                	je     f0117a9c <test_kmalloc+0x9b5>
f0117a88:	83 ec 04             	sub    $0x4,%esp
f0117a8b:	68 74 ac 13 f0       	push   $0xf013ac74
f0117a90:	6a 7a                	push   $0x7a
f0117a92:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117a97:	e8 5f 87 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a9c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117a9f:	e8 25 4e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117aa4:	29 c3                	sub    %eax,%ebx
f0117aa6:	89 d8                	mov    %ebx,%eax
f0117aa8:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117aad:	74 14                	je     f0117ac3 <test_kmalloc+0x9dc>
f0117aaf:	83 ec 04             	sub    $0x4,%esp
f0117ab2:	68 dc ac 13 f0       	push   $0xf013acdc
f0117ab7:	6a 7b                	push   $0x7b
f0117ab9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117abe:	e8 38 87 fe ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117ac3:	e8 01 4e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117ac8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117acb:	e8 6c c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117ad0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117ad3:	83 ec 0c             	sub    $0xc,%esp
f0117ad6:	68 00 38 00 00       	push   $0x3800
f0117adb:	e8 1e fd fe ff       	call   f01077fe <kmalloc>
f0117ae0:	83 c4 10             	add    $0x10,%esp
f0117ae3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117ae9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117aef:	89 c1                	mov    %eax,%ecx
f0117af1:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117af8:	10 00 00 
f0117afb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117b01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b06:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117b0c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117b12:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b17:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117b1d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117b23:	29 d0                	sub    %edx,%eax
f0117b25:	89 c3                	mov    %eax,%ebx
f0117b27:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117b2e:	10 00 00 
f0117b31:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117b36:	0f b6 d0             	movzbl %al,%edx
f0117b39:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117b3f:	01 d0                	add    %edx,%eax
f0117b41:	48                   	dec    %eax
f0117b42:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117b48:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b53:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0117b59:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117b5f:	29 d0                	sub    %edx,%eax
f0117b61:	01 c3                	add    %eax,%ebx
f0117b63:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0117b6a:	10 00 00 
f0117b6d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117b72:	0f b6 c0             	movzbl %al,%eax
f0117b75:	c1 e0 04             	shl    $0x4,%eax
f0117b78:	89 c2                	mov    %eax,%edx
f0117b7a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0117b80:	01 d0                	add    %edx,%eax
f0117b82:	48                   	dec    %eax
f0117b83:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117b89:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117b8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b94:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117b9a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117ba0:	29 d0                	sub    %edx,%eax
f0117ba2:	01 d8                	add    %ebx,%eax
f0117ba4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117ba9:	39 c1                	cmp    %eax,%ecx
f0117bab:	74 17                	je     f0117bc4 <test_kmalloc+0xadd>
f0117bad:	83 ec 04             	sub    $0x4,%esp
f0117bb0:	68 40 ad 13 f0       	push   $0xf013ad40
f0117bb5:	68 81 00 00 00       	push   $0x81
f0117bba:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117bbf:	e8 37 86 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117bc4:	e8 73 c1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117bc9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117bcc:	74 17                	je     f0117be5 <test_kmalloc+0xafe>
f0117bce:	83 ec 04             	sub    $0x4,%esp
f0117bd1:	68 74 ac 13 f0       	push   $0xf013ac74
f0117bd6:	68 82 00 00 00       	push   $0x82
f0117bdb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117be0:	e8 16 86 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117be5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117be8:	e8 dc 4c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117bed:	29 c3                	sub    %eax,%ebx
f0117bef:	89 d8                	mov    %ebx,%eax
f0117bf1:	83 f8 04             	cmp    $0x4,%eax
f0117bf4:	74 17                	je     f0117c0d <test_kmalloc+0xb26>
f0117bf6:	83 ec 04             	sub    $0x4,%esp
f0117bf9:	68 dc ac 13 f0       	push   $0xf013acdc
f0117bfe:	68 83 00 00 00       	push   $0x83
f0117c03:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117c08:	e8 ee 85 fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b50%");
f0117c0d:	83 ec 0c             	sub    $0xc,%esp
f0117c10:	68 a6 ad 13 f0       	push   $0xf013ada6
f0117c15:	e8 68 90 fe ff       	call   f0100c82 <cprintf>
f0117c1a:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117c1d:	e8 a7 4c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0117c22:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117c25:	e8 12 c1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117c2a:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117c2d:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117c34:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117c37:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117c3d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117c43:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117c49:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117c4c:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117c4e:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117c54:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117c5a:	01 c2                	add    %eax,%edx
f0117c5c:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117c5f:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0117c61:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117c67:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117c6d:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117c74:	fd 0f 00 
			shortArr[0] = minShort;
f0117c77:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117c7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117c80:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0117c83:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117c89:	01 c0                	add    %eax,%eax
f0117c8b:	89 c2                	mov    %eax,%edx
f0117c8d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117c93:	01 c2                	add    %eax,%edx
f0117c95:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117c99:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117c9c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117ca2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117ca8:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117caf:	01 00 00 
			intArr[0] = minInt;
f0117cb2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117cb8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117cbb:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117cbd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117cc3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117cca:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117cd0:	01 c2                	add    %eax,%edx
f0117cd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117cd5:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117cd7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117cdd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117ce3:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117cea:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117ced:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117cf3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117cf6:	88 10                	mov    %dl,(%eax)
f0117cf8:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117d01:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117d05:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d0b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117d0e:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117d11:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d17:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d1e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d24:	01 c2                	add    %eax,%edx
f0117d26:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117d29:	88 02                	mov    %al,(%edx)
f0117d2b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d31:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d38:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d3e:	01 c2                	add    %eax,%edx
f0117d40:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117d44:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117d48:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d4e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d55:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d5b:	01 c2                	add    %eax,%edx
f0117d5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117d60:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0117d63:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117d6a:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117d6d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117d73:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117d79:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117d7f:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117d82:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117d84:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117d8a:	89 c2                	mov    %eax,%edx
f0117d8c:	c1 ea 1f             	shr    $0x1f,%edx
f0117d8f:	01 d0                	add    %edx,%eax
f0117d91:	d1 f8                	sar    %eax
f0117d93:	89 c2                	mov    %eax,%edx
f0117d95:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117d9b:	01 c2                	add    %eax,%edx
f0117d9d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117da0:	88 c1                	mov    %al,%cl
f0117da2:	c0 e9 07             	shr    $0x7,%cl
f0117da5:	01 c8                	add    %ecx,%eax
f0117da7:	d0 f8                	sar    %al
f0117da9:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117dab:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117db1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117db7:	01 c2                	add    %eax,%edx
f0117db9:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117dbc:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117dbe:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117dc4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117dca:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117dd1:	1b 00 00 
			shortArr2[0] = minShort;
f0117dd4:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117ddd:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117de0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117de6:	01 c0                	add    %eax,%eax
f0117de8:	89 c2                	mov    %eax,%edx
f0117dea:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117df0:	01 c2                	add    %eax,%edx
f0117df2:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117df6:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117df9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117dff:	8a 00                	mov    (%eax),%al
f0117e01:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117e04:	75 15                	jne    f0117e1b <test_kmalloc+0xd34>
f0117e06:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117e0c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117e12:	01 d0                	add    %edx,%eax
f0117e14:	8a 00                	mov    (%eax),%al
f0117e16:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117e19:	74 17                	je     f0117e32 <test_kmalloc+0xd4b>
f0117e1b:	83 ec 04             	sub    $0x4,%esp
f0117e1e:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117e23:	68 b2 00 00 00       	push   $0xb2
f0117e28:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117e2d:	e8 c9 83 fe ff       	call   f01001fb <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117e32:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117e38:	66 8b 00             	mov    (%eax),%ax
f0117e3b:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117e3f:	75 1b                	jne    f0117e5c <test_kmalloc+0xd75>
f0117e41:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117e47:	01 c0                	add    %eax,%eax
f0117e49:	89 c2                	mov    %eax,%edx
f0117e4b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117e51:	01 d0                	add    %edx,%eax
f0117e53:	66 8b 00             	mov    (%eax),%ax
f0117e56:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117e5a:	74 17                	je     f0117e73 <test_kmalloc+0xd8c>
f0117e5c:	83 ec 04             	sub    $0x4,%esp
f0117e5f:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117e64:	68 b3 00 00 00       	push   $0xb3
f0117e69:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117e6e:	e8 88 83 fe ff       	call   f01001fb <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0117e73:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117e79:	8b 00                	mov    (%eax),%eax
f0117e7b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117e7e:	75 1c                	jne    f0117e9c <test_kmalloc+0xdb5>
f0117e80:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117e86:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117e8d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117e93:	01 d0                	add    %edx,%eax
f0117e95:	8b 00                	mov    (%eax),%eax
f0117e97:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117e9a:	74 17                	je     f0117eb3 <test_kmalloc+0xdcc>
f0117e9c:	83 ec 04             	sub    $0x4,%esp
f0117e9f:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117ea4:	68 b4 00 00 00       	push   $0xb4
f0117ea9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117eae:	e8 48 83 fe ff       	call   f01001fb <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117eb3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117eb9:	8a 00                	mov    (%eax),%al
f0117ebb:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117ebe:	75 1c                	jne    f0117edc <test_kmalloc+0xdf5>
f0117ec0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117ec6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117ecd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ed3:	01 d0                	add    %edx,%eax
f0117ed5:	8a 00                	mov    (%eax),%al
f0117ed7:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117eda:	74 17                	je     f0117ef3 <test_kmalloc+0xe0c>
f0117edc:	83 ec 04             	sub    $0x4,%esp
f0117edf:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117ee4:	68 b6 00 00 00       	push   $0xb6
f0117ee9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117eee:	e8 08 83 fe ff       	call   f01001fb <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117ef3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ef9:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117efd:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117f01:	75 1f                	jne    f0117f22 <test_kmalloc+0xe3b>
f0117f03:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117f09:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117f10:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f16:	01 d0                	add    %edx,%eax
f0117f18:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117f1c:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117f20:	74 17                	je     f0117f39 <test_kmalloc+0xe52>
f0117f22:	83 ec 04             	sub    $0x4,%esp
f0117f25:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117f2a:	68 b7 00 00 00       	push   $0xb7
f0117f2f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117f34:	e8 c2 82 fe ff       	call   f01001fb <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117f39:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f3f:	8b 40 04             	mov    0x4(%eax),%eax
f0117f42:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117f45:	75 1d                	jne    f0117f64 <test_kmalloc+0xe7d>
f0117f47:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117f4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117f54:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f5a:	01 d0                	add    %edx,%eax
f0117f5c:	8b 40 04             	mov    0x4(%eax),%eax
f0117f5f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117f62:	74 17                	je     f0117f7b <test_kmalloc+0xe94>
f0117f64:	83 ec 04             	sub    $0x4,%esp
f0117f67:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117f6c:	68 b8 00 00 00       	push   $0xb8
f0117f71:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117f76:	e8 80 82 fe ff       	call   f01001fb <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117f7b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f81:	8a 00                	mov    (%eax),%al
f0117f83:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117f86:	75 40                	jne    f0117fc8 <test_kmalloc+0xee1>
f0117f88:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117f8e:	89 c2                	mov    %eax,%edx
f0117f90:	c1 ea 1f             	shr    $0x1f,%edx
f0117f93:	01 d0                	add    %edx,%eax
f0117f95:	d1 f8                	sar    %eax
f0117f97:	89 c2                	mov    %eax,%edx
f0117f99:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f9f:	01 d0                	add    %edx,%eax
f0117fa1:	8a 10                	mov    (%eax),%dl
f0117fa3:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117fa6:	88 c1                	mov    %al,%cl
f0117fa8:	c0 e9 07             	shr    $0x7,%cl
f0117fab:	01 c8                	add    %ecx,%eax
f0117fad:	d0 f8                	sar    %al
f0117faf:	38 c2                	cmp    %al,%dl
f0117fb1:	75 15                	jne    f0117fc8 <test_kmalloc+0xee1>
f0117fb3:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117fb9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117fbf:	01 d0                	add    %edx,%eax
f0117fc1:	8a 00                	mov    (%eax),%al
f0117fc3:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117fc6:	74 17                	je     f0117fdf <test_kmalloc+0xef8>
f0117fc8:	83 ec 04             	sub    $0x4,%esp
f0117fcb:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117fd0:	68 ba 00 00 00       	push   $0xba
f0117fd5:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117fda:	e8 1c 82 fe ff       	call   f01001fb <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117fdf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117fe5:	66 8b 00             	mov    (%eax),%ax
f0117fe8:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117fec:	75 1b                	jne    f0118009 <test_kmalloc+0xf22>
f0117fee:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117ff4:	01 c0                	add    %eax,%eax
f0117ff6:	89 c2                	mov    %eax,%edx
f0117ff8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117ffe:	01 d0                	add    %edx,%eax
f0118000:	66 8b 00             	mov    (%eax),%ax
f0118003:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118007:	74 17                	je     f0118020 <test_kmalloc+0xf39>
f0118009:	83 ec 04             	sub    $0x4,%esp
f011800c:	68 b0 ad 13 f0       	push   $0xf013adb0
f0118011:	68 bb 00 00 00       	push   $0xbb
f0118016:	68 5a ac 13 f0       	push   $0xf013ac5a
f011801b:	e8 db 81 fe ff       	call   f01001fb <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118020:	e8 a4 48 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118025:	89 c2                	mov    %eax,%edx
f0118027:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011802a:	39 c2                	cmp    %eax,%edx
f011802c:	74 17                	je     f0118045 <test_kmalloc+0xf5e>
f011802e:	83 ec 04             	sub    $0x4,%esp
f0118031:	68 dc ac 13 f0       	push   $0xf013acdc
f0118036:	68 bd 00 00 00       	push   $0xbd
f011803b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118040:	e8 b6 81 fe ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118045:	e8 f2 bc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011804a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011804d:	74 17                	je     f0118066 <test_kmalloc+0xf7f>
f011804f:	83 ec 04             	sub    $0x4,%esp
f0118052:	68 74 ac 13 f0       	push   $0xf013ac74
f0118057:	68 be 00 00 00       	push   $0xbe
f011805c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118061:	e8 95 81 fe ff       	call   f01001fb <_panic>
		}

		cprintf("\b\b\b80%");
f0118066:	83 ec 0c             	sub    $0xc,%esp
f0118069:	68 e5 ad 13 f0       	push   $0xf013ade5
f011806e:	e8 0f 8c fe ff       	call   f0100c82 <cprintf>
f0118073:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118076:	e8 4e 48 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011807b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011807e:	e8 b9 bc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118083:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118086:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011808d:	10 00 00 
f0118090:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118096:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011809b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f01180a1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01180a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01180ac:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01180b2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01180b8:	29 d0                	sub    %edx,%eax
f01180ba:	89 c1                	mov    %eax,%ecx
f01180bc:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01180c3:	10 00 00 
f01180c6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01180cb:	0f b6 d0             	movzbl %al,%edx
f01180ce:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01180d4:	01 d0                	add    %edx,%eax
f01180d6:	48                   	dec    %eax
f01180d7:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01180dd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01180e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01180e8:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01180ee:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01180f4:	29 d0                	sub    %edx,%eax
f01180f6:	01 c1                	add    %eax,%ecx
f01180f8:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01180ff:	10 00 00 
f0118102:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118107:	0f b6 c0             	movzbl %al,%eax
f011810a:	c1 e0 04             	shl    $0x4,%eax
f011810d:	89 c2                	mov    %eax,%edx
f011810f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118115:	01 d0                	add    %edx,%eax
f0118117:	48                   	dec    %eax
f0118118:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011811e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118124:	ba 00 00 00 00       	mov    $0x0,%edx
f0118129:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011812f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118135:	29 d0                	sub    %edx,%eax
f0118137:	01 c8                	add    %ecx,%eax
f0118139:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f011813e:	29 c2                	sub    %eax,%edx
f0118140:	89 d0                	mov    %edx,%eax
f0118142:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118148:	83 ec 0c             	sub    $0xc,%esp
f011814b:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118151:	e8 a8 f6 fe ff       	call   f01077fe <kmalloc>
f0118156:	83 c4 10             	add    $0x10,%esp
f0118159:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f011815f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118165:	85 c0                	test   %eax,%eax
f0118167:	74 17                	je     f0118180 <test_kmalloc+0x1099>
f0118169:	83 ec 04             	sub    $0x4,%esp
f011816c:	68 28 ac 13 f0       	push   $0xf013ac28
f0118171:	68 c8 00 00 00       	push   $0xc8
f0118176:	68 5a ac 13 f0       	push   $0xf013ac5a
f011817b:	e8 7b 80 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118180:	e8 b7 bb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118185:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118188:	74 17                	je     f01181a1 <test_kmalloc+0x10ba>
f011818a:	83 ec 04             	sub    $0x4,%esp
f011818d:	68 74 ac 13 f0       	push   $0xf013ac74
f0118192:	68 c9 00 00 00       	push   $0xc9
f0118197:	68 5a ac 13 f0       	push   $0xf013ac5a
f011819c:	e8 5a 80 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181a1:	e8 23 47 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01181a6:	89 c2                	mov    %eax,%edx
f01181a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01181ab:	39 c2                	cmp    %eax,%edx
f01181ad:	74 17                	je     f01181c6 <test_kmalloc+0x10df>
f01181af:	83 ec 04             	sub    $0x4,%esp
f01181b2:	68 dc ac 13 f0       	push   $0xf013acdc
f01181b7:	68 ca 00 00 00       	push   $0xca
f01181bc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01181c1:	e8 35 80 fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b90%");
f01181c6:	83 ec 0c             	sub    $0xc,%esp
f01181c9:	68 ec ad 13 f0       	push   $0xf013adec
f01181ce:	e8 af 8a fe ff       	call   f0100c82 <cprintf>
f01181d3:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01181d6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01181dc:	05 00 40 00 00       	add    $0x4000,%eax
f01181e1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01181e7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01181ee:	10 00 00 
f01181f1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01181f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181fc:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118202:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118208:	ba 00 00 00 00       	mov    $0x0,%edx
f011820d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118213:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118219:	29 d0                	sub    %edx,%eax
f011821b:	89 c1                	mov    %eax,%ecx
f011821d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118224:	10 00 00 
f0118227:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011822c:	0f b6 d0             	movzbl %al,%edx
f011822f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118235:	01 d0                	add    %edx,%eax
f0118237:	48                   	dec    %eax
f0118238:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011823e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118244:	ba 00 00 00 00       	mov    $0x0,%edx
f0118249:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011824f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118255:	29 d0                	sub    %edx,%eax
f0118257:	01 c1                	add    %eax,%ecx
f0118259:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118260:	10 00 00 
f0118263:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118268:	0f b6 c0             	movzbl %al,%eax
f011826b:	c1 e0 04             	shl    $0x4,%eax
f011826e:	89 c2                	mov    %eax,%edx
f0118270:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118276:	01 d0                	add    %edx,%eax
f0118278:	48                   	dec    %eax
f0118279:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011827f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118285:	ba 00 00 00 00       	mov    $0x0,%edx
f011828a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118290:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118296:	29 d0                	sub    %edx,%eax
f0118298:	01 c8                	add    %ecx,%eax
f011829a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011829f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01182a2:	eb 6a                	jmp    f011830e <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f01182a4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01182a9:	83 ec 04             	sub    $0x4,%esp
f01182ac:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f01182b2:	52                   	push   %edx
f01182b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01182b6:	50                   	push   %eax
f01182b7:	e8 1e e7 fe ff       	call   f01069da <get_page_table>
f01182bc:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01182bf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01182c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01182c8:	c1 ea 0c             	shr    $0xc,%edx
f01182cb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01182d1:	c1 e2 02             	shl    $0x2,%edx
f01182d4:	01 d0                	add    %edx,%eax
f01182d6:	8b 00                	mov    (%eax),%eax
f01182d8:	25 ff 0f 00 00       	and    $0xfff,%eax
f01182dd:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01182e3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01182e9:	83 e0 04             	and    $0x4,%eax
f01182ec:	85 c0                	test   %eax,%eax
f01182ee:	74 17                	je     f0118307 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01182f0:	83 ec 04             	sub    $0x4,%esp
f01182f3:	68 f4 ad 13 f0       	push   $0xf013adf4
f01182f8:	68 d7 00 00 00       	push   $0xd7
f01182fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118302:	e8 f4 7e fe ff       	call   f01001fb <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118307:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011830e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118311:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118317:	72 8b                	jb     f01182a4 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118319:	83 ec 0c             	sub    $0xc,%esp
f011831c:	68 3e ae 13 f0       	push   $0xf013ae3e
f0118321:	e8 5c 89 fe ff       	call   f0100c82 <cprintf>
f0118326:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118329:	83 ec 0c             	sub    $0xc,%esp
f011832c:	68 48 ae 13 f0       	push   $0xf013ae48
f0118331:	e8 4c 89 fe ff       	call   f0100c82 <cprintf>
f0118336:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118339:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011833e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118341:	5b                   	pop    %ebx
f0118342:	5f                   	pop    %edi
f0118343:	5d                   	pop    %ebp
f0118344:	c3                   	ret    

f0118345 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118345:	55                   	push   %ebp
f0118346:	89 e5                	mov    %esp,%ebp
f0118348:	57                   	push   %edi
f0118349:	53                   	push   %ebx
f011834a:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118350:	83 ec 0c             	sub    $0xc,%esp
f0118353:	68 9c ab 13 f0       	push   $0xf013ab9c
f0118358:	e8 25 89 fe ff       	call   f0100c82 <cprintf>
f011835d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118360:	83 ec 0c             	sub    $0xc,%esp
f0118363:	68 cc ab 13 f0       	push   $0xf013abcc
f0118368:	e8 15 89 fe ff       	call   f0100c82 <cprintf>
f011836d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118370:	83 ec 0c             	sub    $0xc,%esp
f0118373:	68 9c ab 13 f0       	push   $0xf013ab9c
f0118378:	e8 05 89 fe ff       	call   f0100c82 <cprintf>
f011837d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118380:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118386:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011838b:	b8 00 00 00 00       	mov    $0x0,%eax
f0118390:	89 d7                	mov    %edx,%edi
f0118392:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118394:	83 ec 0c             	sub    $0xc,%esp
f0118397:	68 84 ae 13 f0       	push   $0xf013ae84
f011839c:	e8 e1 88 fe ff       	call   f0100c82 <cprintf>
f01183a1:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01183a4:	e8 20 45 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01183a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01183ac:	e8 8b b9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01183b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01183b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01183bb:	eb 1f                	jmp    f01183dc <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01183bd:	83 ec 0c             	sub    $0xc,%esp
f01183c0:	68 00 00 20 00       	push   $0x200000
f01183c5:	e8 34 f4 fe ff       	call   f01077fe <kmalloc>
f01183ca:	83 c4 10             	add    $0x10,%esp
f01183cd:	89 c2                	mov    %eax,%edx
f01183cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01183d2:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01183d9:	ff 45 f4             	incl   -0xc(%ebp)
f01183dc:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01183e0:	7e db                	jle    f01183bd <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01183e2:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01183e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01183ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01183f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01183f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01183fc:	f7 75 e8             	divl   -0x18(%ebp)
f01183ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118402:	29 d0                	sub    %edx,%eax
f0118404:	89 c1                	mov    %eax,%ecx
f0118406:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011840d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118412:	0f b6 d0             	movzbl %al,%edx
f0118415:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118418:	01 d0                	add    %edx,%eax
f011841a:	48                   	dec    %eax
f011841b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011841e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118421:	ba 00 00 00 00       	mov    $0x0,%edx
f0118426:	f7 75 e0             	divl   -0x20(%ebp)
f0118429:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011842c:	29 d0                	sub    %edx,%eax
f011842e:	01 c1                	add    %eax,%ecx
f0118430:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118437:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011843c:	0f b6 c0             	movzbl %al,%eax
f011843f:	c1 e0 04             	shl    $0x4,%eax
f0118442:	89 c2                	mov    %eax,%edx
f0118444:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118447:	01 d0                	add    %edx,%eax
f0118449:	48                   	dec    %eax
f011844a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011844d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118450:	ba 00 00 00 00       	mov    $0x0,%edx
f0118455:	f7 75 d8             	divl   -0x28(%ebp)
f0118458:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011845b:	29 d0                	sub    %edx,%eax
f011845d:	01 c8                	add    %ecx,%eax
f011845f:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118464:	29 c2                	sub    %eax,%edx
f0118466:	89 d0                	mov    %edx,%eax
f0118468:	83 ec 0c             	sub    $0xc,%esp
f011846b:	50                   	push   %eax
f011846c:	e8 8d f3 fe ff       	call   f01077fe <kmalloc>
f0118471:	83 c4 10             	add    $0x10,%esp
f0118474:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011847a:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118480:	89 c1                	mov    %eax,%ecx
f0118482:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118489:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011848c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118491:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118494:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118497:	ba 00 00 00 00       	mov    $0x0,%edx
f011849c:	f7 75 d0             	divl   -0x30(%ebp)
f011849f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01184a2:	29 d0                	sub    %edx,%eax
f01184a4:	89 c3                	mov    %eax,%ebx
f01184a6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01184ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01184b2:	0f b6 d0             	movzbl %al,%edx
f01184b5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184b8:	01 d0                	add    %edx,%eax
f01184ba:	48                   	dec    %eax
f01184bb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01184be:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01184c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01184c6:	f7 75 c8             	divl   -0x38(%ebp)
f01184c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01184cc:	29 d0                	sub    %edx,%eax
f01184ce:	01 c3                	add    %eax,%ebx
f01184d0:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01184d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01184dc:	0f b6 c0             	movzbl %al,%eax
f01184df:	c1 e0 04             	shl    $0x4,%eax
f01184e2:	89 c2                	mov    %eax,%edx
f01184e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01184e7:	01 d0                	add    %edx,%eax
f01184e9:	48                   	dec    %eax
f01184ea:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01184ed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01184f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01184f5:	f7 75 c0             	divl   -0x40(%ebp)
f01184f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01184fb:	29 d0                	sub    %edx,%eax
f01184fd:	01 d8                	add    %ebx,%eax
f01184ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118504:	39 c1                	cmp    %eax,%ecx
f0118506:	0f 85 ed 04 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011850c:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118512:	89 c1                	mov    %eax,%ecx
f0118514:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011851b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011851e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118523:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118526:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118529:	ba 00 00 00 00       	mov    $0x0,%edx
f011852e:	f7 75 b8             	divl   -0x48(%ebp)
f0118531:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118534:	29 d0                	sub    %edx,%eax
f0118536:	89 c3                	mov    %eax,%ebx
f0118538:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011853f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118544:	0f b6 d0             	movzbl %al,%edx
f0118547:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011854a:	01 d0                	add    %edx,%eax
f011854c:	48                   	dec    %eax
f011854d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118550:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118553:	ba 00 00 00 00       	mov    $0x0,%edx
f0118558:	f7 75 b0             	divl   -0x50(%ebp)
f011855b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011855e:	29 d0                	sub    %edx,%eax
f0118560:	01 c3                	add    %eax,%ebx
f0118562:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118569:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011856e:	0f b6 c0             	movzbl %al,%eax
f0118571:	c1 e0 04             	shl    $0x4,%eax
f0118574:	89 c2                	mov    %eax,%edx
f0118576:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118579:	01 d0                	add    %edx,%eax
f011857b:	48                   	dec    %eax
f011857c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011857f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118582:	ba 00 00 00 00       	mov    $0x0,%edx
f0118587:	f7 75 a8             	divl   -0x58(%ebp)
f011858a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011858d:	29 d0                	sub    %edx,%eax
f011858f:	01 d8                	add    %ebx,%eax
f0118591:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118596:	39 c1                	cmp    %eax,%ecx
f0118598:	0f 85 5b 04 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011859e:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f01185a4:	89 c1                	mov    %eax,%ecx
f01185a6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01185ad:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01185b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185b5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01185b8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01185bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01185c0:	f7 75 a0             	divl   -0x60(%ebp)
f01185c3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01185c6:	29 d0                	sub    %edx,%eax
f01185c8:	89 c3                	mov    %eax,%ebx
f01185ca:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01185d1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01185d6:	0f b6 d0             	movzbl %al,%edx
f01185d9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01185dc:	01 d0                	add    %edx,%eax
f01185de:	48                   	dec    %eax
f01185df:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01185e2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01185e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01185ea:	f7 75 98             	divl   -0x68(%ebp)
f01185ed:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01185f0:	29 d0                	sub    %edx,%eax
f01185f2:	01 c3                	add    %eax,%ebx
f01185f4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01185fb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118600:	0f b6 c0             	movzbl %al,%eax
f0118603:	c1 e0 04             	shl    $0x4,%eax
f0118606:	89 c2                	mov    %eax,%edx
f0118608:	8b 45 90             	mov    -0x70(%ebp),%eax
f011860b:	01 d0                	add    %edx,%eax
f011860d:	48                   	dec    %eax
f011860e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118611:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118614:	ba 00 00 00 00       	mov    $0x0,%edx
f0118619:	f7 75 90             	divl   -0x70(%ebp)
f011861c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011861f:	29 d0                	sub    %edx,%eax
f0118621:	01 d8                	add    %ebx,%eax
f0118623:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118628:	39 c1                	cmp    %eax,%ecx
f011862a:	0f 85 c9 03 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118630:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118636:	89 c1                	mov    %eax,%ecx
f0118638:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011863f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118642:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118647:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011864a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011864d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118652:	f7 75 88             	divl   -0x78(%ebp)
f0118655:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118658:	29 d0                	sub    %edx,%eax
f011865a:	89 c3                	mov    %eax,%ebx
f011865c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118663:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118668:	0f b6 d0             	movzbl %al,%edx
f011866b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011866e:	01 d0                	add    %edx,%eax
f0118670:	48                   	dec    %eax
f0118671:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118677:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011867d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118682:	f7 75 80             	divl   -0x80(%ebp)
f0118685:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011868b:	29 d0                	sub    %edx,%eax
f011868d:	01 c3                	add    %eax,%ebx
f011868f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118696:	10 00 00 
f0118699:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011869e:	0f b6 c0             	movzbl %al,%eax
f01186a1:	c1 e0 04             	shl    $0x4,%eax
f01186a4:	89 c2                	mov    %eax,%edx
f01186a6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01186ac:	01 d0                	add    %edx,%eax
f01186ae:	48                   	dec    %eax
f01186af:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01186b5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01186bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01186c0:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01186c6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01186cc:	29 d0                	sub    %edx,%eax
f01186ce:	01 d8                	add    %ebx,%eax
f01186d0:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01186d5:	39 c1                	cmp    %eax,%ecx
f01186d7:	0f 85 1c 03 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01186dd:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01186e3:	89 c1                	mov    %eax,%ecx
f01186e5:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01186ec:	10 00 00 
f01186ef:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01186f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186fa:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118700:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118706:	ba 00 00 00 00       	mov    $0x0,%edx
f011870b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118711:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118717:	29 d0                	sub    %edx,%eax
f0118719:	89 c3                	mov    %eax,%ebx
f011871b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118722:	10 00 00 
f0118725:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011872a:	0f b6 d0             	movzbl %al,%edx
f011872d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118733:	01 d0                	add    %edx,%eax
f0118735:	48                   	dec    %eax
f0118736:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011873c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118742:	ba 00 00 00 00       	mov    $0x0,%edx
f0118747:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011874d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118753:	29 d0                	sub    %edx,%eax
f0118755:	01 c3                	add    %eax,%ebx
f0118757:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011875e:	10 00 00 
f0118761:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118766:	0f b6 c0             	movzbl %al,%eax
f0118769:	c1 e0 04             	shl    $0x4,%eax
f011876c:	89 c2                	mov    %eax,%edx
f011876e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118774:	01 d0                	add    %edx,%eax
f0118776:	48                   	dec    %eax
f0118777:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011877d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118783:	ba 00 00 00 00       	mov    $0x0,%edx
f0118788:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011878e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118794:	29 d0                	sub    %edx,%eax
f0118796:	01 d8                	add    %ebx,%eax
f0118798:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011879d:	39 c1                	cmp    %eax,%ecx
f011879f:	0f 85 54 02 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01187a5:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01187ab:	89 c1                	mov    %eax,%ecx
f01187ad:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01187b4:	10 00 00 
f01187b7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01187bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187c2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01187c8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01187ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01187d3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01187d9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01187df:	29 d0                	sub    %edx,%eax
f01187e1:	89 c3                	mov    %eax,%ebx
f01187e3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01187ea:	10 00 00 
f01187ed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01187f2:	0f b6 d0             	movzbl %al,%edx
f01187f5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01187fb:	01 d0                	add    %edx,%eax
f01187fd:	48                   	dec    %eax
f01187fe:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118804:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011880a:	ba 00 00 00 00       	mov    $0x0,%edx
f011880f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118815:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011881b:	29 d0                	sub    %edx,%eax
f011881d:	01 c3                	add    %eax,%ebx
f011881f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118826:	10 00 00 
f0118829:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011882e:	0f b6 c0             	movzbl %al,%eax
f0118831:	c1 e0 04             	shl    $0x4,%eax
f0118834:	89 c2                	mov    %eax,%edx
f0118836:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011883c:	01 d0                	add    %edx,%eax
f011883e:	48                   	dec    %eax
f011883f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118845:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011884b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118850:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118856:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011885c:	29 d0                	sub    %edx,%eax
f011885e:	01 d8                	add    %ebx,%eax
f0118860:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118865:	39 c1                	cmp    %eax,%ecx
f0118867:	0f 85 8c 01 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011886d:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118873:	89 c1                	mov    %eax,%ecx
f0118875:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011887c:	10 00 00 
f011887f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118885:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011888a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118890:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118896:	ba 00 00 00 00       	mov    $0x0,%edx
f011889b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01188a1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01188a7:	29 d0                	sub    %edx,%eax
f01188a9:	89 c3                	mov    %eax,%ebx
f01188ab:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01188b2:	10 00 00 
f01188b5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188ba:	0f b6 d0             	movzbl %al,%edx
f01188bd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01188c3:	01 d0                	add    %edx,%eax
f01188c5:	48                   	dec    %eax
f01188c6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01188cc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01188d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01188d7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01188dd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01188e3:	29 d0                	sub    %edx,%eax
f01188e5:	01 c3                	add    %eax,%ebx
f01188e7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01188ee:	10 00 00 
f01188f1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188f6:	0f b6 c0             	movzbl %al,%eax
f01188f9:	c1 e0 04             	shl    $0x4,%eax
f01188fc:	89 c2                	mov    %eax,%edx
f01188fe:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118904:	01 d0                	add    %edx,%eax
f0118906:	48                   	dec    %eax
f0118907:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011890d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118913:	ba 00 00 00 00       	mov    $0x0,%edx
f0118918:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011891e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118924:	29 d0                	sub    %edx,%eax
f0118926:	01 d8                	add    %ebx,%eax
f0118928:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011892d:	39 c1                	cmp    %eax,%ecx
f011892f:	0f 85 c4 00 00 00    	jne    f01189f9 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118935:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011893b:	89 c1                	mov    %eax,%ecx
f011893d:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118944:	10 00 00 
f0118947:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011894d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118952:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118958:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011895e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118963:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118969:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011896f:	29 d0                	sub    %edx,%eax
f0118971:	89 c3                	mov    %eax,%ebx
f0118973:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011897a:	10 00 00 
f011897d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118982:	0f b6 d0             	movzbl %al,%edx
f0118985:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011898b:	01 d0                	add    %edx,%eax
f011898d:	48                   	dec    %eax
f011898e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118994:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011899a:	ba 00 00 00 00       	mov    $0x0,%edx
f011899f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01189a5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01189ab:	29 d0                	sub    %edx,%eax
f01189ad:	01 c3                	add    %eax,%ebx
f01189af:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01189b6:	10 00 00 
f01189b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01189be:	0f b6 c0             	movzbl %al,%eax
f01189c1:	c1 e0 04             	shl    $0x4,%eax
f01189c4:	89 c2                	mov    %eax,%edx
f01189c6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01189cc:	01 d0                	add    %edx,%eax
f01189ce:	48                   	dec    %eax
f01189cf:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01189d5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01189db:	ba 00 00 00 00       	mov    $0x0,%edx
f01189e0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01189e6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01189ec:	29 d0                	sub    %edx,%eax
f01189ee:	01 d8                	add    %ebx,%eax
f01189f0:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01189f5:	39 c1                	cmp    %eax,%ecx
f01189f7:	74 17                	je     f0118a10 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01189f9:	83 ec 04             	sub    $0x4,%esp
f01189fc:	68 d4 ae 13 f0       	push   $0xf013aed4
f0118a01:	68 03 01 00 00       	push   $0x103
f0118a06:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118a0b:	e8 eb 77 fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a10:	e8 27 b3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118a15:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118a18:	74 17                	je     f0118a31 <test_kmalloc_nextfit+0x6ec>
f0118a1a:	83 ec 04             	sub    $0x4,%esp
f0118a1d:	68 74 ac 13 f0       	push   $0xf013ac74
f0118a22:	68 05 01 00 00       	push   $0x105
f0118a27:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118a2c:	e8 ca 77 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118a31:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118a34:	e8 90 3e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118a39:	29 c3                	sub    %eax,%ebx
f0118a3b:	89 d9                	mov    %ebx,%ecx
f0118a3d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118a44:	10 00 00 
f0118a47:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118a4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a52:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118a58:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118a5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a63:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118a69:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118a6f:	29 d0                	sub    %edx,%eax
f0118a71:	89 c3                	mov    %eax,%ebx
f0118a73:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118a7a:	10 00 00 
f0118a7d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118a82:	0f b6 d0             	movzbl %al,%edx
f0118a85:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118a8b:	01 d0                	add    %edx,%eax
f0118a8d:	48                   	dec    %eax
f0118a8e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118a94:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118a9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a9f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118aa5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118aab:	29 d0                	sub    %edx,%eax
f0118aad:	01 c3                	add    %eax,%ebx
f0118aaf:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118ab6:	10 00 00 
f0118ab9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118abe:	0f b6 c0             	movzbl %al,%eax
f0118ac1:	c1 e0 04             	shl    $0x4,%eax
f0118ac4:	89 c2                	mov    %eax,%edx
f0118ac6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118acc:	01 d0                	add    %edx,%eax
f0118ace:	48                   	dec    %eax
f0118acf:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118ad5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118adb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ae0:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118ae6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118aec:	29 d0                	sub    %edx,%eax
f0118aee:	01 d8                	add    %ebx,%eax
f0118af0:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118af5:	29 c2                	sub    %eax,%edx
f0118af7:	89 d0                	mov    %edx,%eax
f0118af9:	c1 e8 0c             	shr    $0xc,%eax
f0118afc:	39 c1                	cmp    %eax,%ecx
f0118afe:	74 17                	je     f0118b17 <test_kmalloc_nextfit+0x7d2>
f0118b00:	83 ec 04             	sub    $0x4,%esp
f0118b03:	68 17 af 13 f0       	push   $0xf013af17
f0118b08:	68 06 01 00 00       	push   $0x106
f0118b0d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118b12:	e8 e4 76 fe ff       	call   f01001fb <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118b17:	e8 20 b2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118b1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118b1f:	e8 a5 3d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118b24:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118b27:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118b2d:	83 ec 0c             	sub    $0xc,%esp
f0118b30:	50                   	push   %eax
f0118b31:	e8 8a ed fe ff       	call   f01078c0 <kfree>
f0118b36:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0118b39:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118b3f:	83 ec 0c             	sub    $0xc,%esp
f0118b42:	50                   	push   %eax
f0118b43:	e8 78 ed fe ff       	call   f01078c0 <kfree>
f0118b48:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0118b4b:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0118b51:	83 ec 0c             	sub    $0xc,%esp
f0118b54:	50                   	push   %eax
f0118b55:	e8 66 ed fe ff       	call   f01078c0 <kfree>
f0118b5a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0118b5d:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0118b63:	83 ec 0c             	sub    $0xc,%esp
f0118b66:	50                   	push   %eax
f0118b67:	e8 54 ed fe ff       	call   f01078c0 <kfree>
f0118b6c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0118b6f:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118b75:	83 ec 0c             	sub    $0xc,%esp
f0118b78:	50                   	push   %eax
f0118b79:	e8 42 ed fe ff       	call   f01078c0 <kfree>
f0118b7e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0118b81:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118b87:	83 ec 0c             	sub    $0xc,%esp
f0118b8a:	50                   	push   %eax
f0118b8b:	e8 30 ed fe ff       	call   f01078c0 <kfree>
f0118b90:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0118b93:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118b99:	83 ec 0c             	sub    $0xc,%esp
f0118b9c:	50                   	push   %eax
f0118b9d:	e8 1e ed fe ff       	call   f01078c0 <kfree>
f0118ba2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118ba5:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118bab:	83 ec 0c             	sub    $0xc,%esp
f0118bae:	50                   	push   %eax
f0118baf:	e8 0c ed fe ff       	call   f01078c0 <kfree>
f0118bb4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118bb7:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118bbd:	83 ec 0c             	sub    $0xc,%esp
f0118bc0:	50                   	push   %eax
f0118bc1:	e8 fa ec fe ff       	call   f01078c0 <kfree>
f0118bc6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118bc9:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118bcf:	83 ec 0c             	sub    $0xc,%esp
f0118bd2:	50                   	push   %eax
f0118bd3:	e8 e8 ec fe ff       	call   f01078c0 <kfree>
f0118bd8:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118bdb:	e8 5c b1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118be0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118be3:	74 17                	je     f0118bfc <test_kmalloc_nextfit+0x8b7>
f0118be5:	83 ec 04             	sub    $0x4,%esp
f0118be8:	68 74 ac 13 f0       	push   $0xf013ac74
f0118bed:	68 17 01 00 00       	push   $0x117
f0118bf2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118bf7:	e8 ff 75 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118bfc:	e8 c8 3c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118c01:	89 c2                	mov    %eax,%edx
f0118c03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118c06:	89 d1                	mov    %edx,%ecx
f0118c08:	29 c1                	sub    %eax,%ecx
f0118c0a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118c11:	10 00 00 
f0118c14:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118c1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c1f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118c25:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c30:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118c36:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c3c:	29 d0                	sub    %edx,%eax
f0118c3e:	89 c3                	mov    %eax,%ebx
f0118c40:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118c47:	10 00 00 
f0118c4a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118c4f:	0f b6 d0             	movzbl %al,%edx
f0118c52:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c58:	01 d0                	add    %edx,%eax
f0118c5a:	48                   	dec    %eax
f0118c5b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118c61:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c67:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c6c:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118c72:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c78:	29 d0                	sub    %edx,%eax
f0118c7a:	01 c3                	add    %eax,%ebx
f0118c7c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118c83:	10 00 00 
f0118c86:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118c8b:	0f b6 c0             	movzbl %al,%eax
f0118c8e:	c1 e0 04             	shl    $0x4,%eax
f0118c91:	89 c2                	mov    %eax,%edx
f0118c93:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c99:	01 d0                	add    %edx,%eax
f0118c9b:	48                   	dec    %eax
f0118c9c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118ca2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118ca8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cad:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118cb3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118cb9:	29 d0                	sub    %edx,%eax
f0118cbb:	01 d8                	add    %ebx,%eax
f0118cbd:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118cc2:	29 c2                	sub    %eax,%edx
f0118cc4:	89 d0                	mov    %edx,%eax
f0118cc6:	c1 e8 0c             	shr    $0xc,%eax
f0118cc9:	39 c1                	cmp    %eax,%ecx
f0118ccb:	74 17                	je     f0118ce4 <test_kmalloc_nextfit+0x99f>
f0118ccd:	83 ec 04             	sub    $0x4,%esp
f0118cd0:	68 28 af 13 f0       	push   $0xf013af28
f0118cd5:	68 18 01 00 00       	push   $0x118
f0118cda:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118cdf:	e8 17 75 fe ff       	call   f01001fb <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118ce4:	e8 53 b0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118ce9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118cec:	e8 d8 3b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118cf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118cf4:	83 ec 0c             	sub    $0xc,%esp
f0118cf7:	68 00 fc 0f 00       	push   $0xffc00
f0118cfc:	e8 fd ea fe ff       	call   f01077fe <kmalloc>
f0118d01:	83 c4 10             	add    $0x10,%esp
f0118d04:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118d0a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118d11:	10 00 00 
f0118d14:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d1f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118d25:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d30:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118d36:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d3c:	29 d0                	sub    %edx,%eax
f0118d3e:	89 c1                	mov    %eax,%ecx
f0118d40:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118d47:	10 00 00 
f0118d4a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118d4f:	0f b6 d0             	movzbl %al,%edx
f0118d52:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d58:	01 d0                	add    %edx,%eax
f0118d5a:	48                   	dec    %eax
f0118d5b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118d61:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118d67:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d6c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118d72:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118d78:	29 d0                	sub    %edx,%eax
f0118d7a:	01 c1                	add    %eax,%ecx
f0118d7c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118d83:	10 00 00 
f0118d86:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118d8b:	0f b6 c0             	movzbl %al,%eax
f0118d8e:	c1 e0 04             	shl    $0x4,%eax
f0118d91:	89 c2                	mov    %eax,%edx
f0118d93:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118d99:	01 d0                	add    %edx,%eax
f0118d9b:	48                   	dec    %eax
f0118d9c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118da2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118da8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dad:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118db3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118db9:	29 d0                	sub    %edx,%eax
f0118dbb:	01 c8                	add    %ecx,%eax
f0118dbd:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118dc3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118dc9:	39 c2                	cmp    %eax,%edx
f0118dcb:	74 17                	je     f0118de4 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118dcd:	83 ec 04             	sub    $0x4,%esp
f0118dd0:	68 68 af 13 f0       	push   $0xf013af68
f0118dd5:	68 1f 01 00 00       	push   $0x11f
f0118dda:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118ddf:	e8 17 74 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118de4:	e8 53 af fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118de9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118dec:	74 17                	je     f0118e05 <test_kmalloc_nextfit+0xac0>
f0118dee:	83 ec 04             	sub    $0x4,%esp
f0118df1:	68 74 ac 13 f0       	push   $0xf013ac74
f0118df6:	68 20 01 00 00       	push   $0x120
f0118dfb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118e00:	e8 f6 73 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118e05:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118e08:	e8 bc 3a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118e0d:	29 c3                	sub    %eax,%ebx
f0118e0f:	89 d8                	mov    %ebx,%eax
f0118e11:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118e16:	74 17                	je     f0118e2f <test_kmalloc_nextfit+0xaea>
f0118e18:	83 ec 04             	sub    $0x4,%esp
f0118e1b:	68 17 af 13 f0       	push   $0xf013af17
f0118e20:	68 21 01 00 00       	push   $0x121
f0118e25:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118e2a:	e8 cc 73 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e2f:	e8 08 af fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118e34:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e37:	e8 8d 3a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118e3f:	83 ec 0c             	sub    $0xc,%esp
f0118e42:	68 00 04 00 00       	push   $0x400
f0118e47:	e8 b2 e9 fe ff       	call   f01077fe <kmalloc>
f0118e4c:	83 c4 10             	add    $0x10,%esp
f0118e4f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118e55:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118e5c:	10 00 00 
f0118e5f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e65:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e6a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0118e70:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118e76:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e7b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0118e81:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118e87:	29 d0                	sub    %edx,%eax
f0118e89:	89 c1                	mov    %eax,%ecx
f0118e8b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0118e92:	10 00 00 
f0118e95:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118e9a:	0f b6 d0             	movzbl %al,%edx
f0118e9d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118ea3:	01 d0                	add    %edx,%eax
f0118ea5:	48                   	dec    %eax
f0118ea6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118eac:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118eb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eb7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118ebd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118ec3:	29 d0                	sub    %edx,%eax
f0118ec5:	01 c1                	add    %eax,%ecx
f0118ec7:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118ece:	10 00 00 
f0118ed1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118ed6:	0f b6 c0             	movzbl %al,%eax
f0118ed9:	c1 e0 04             	shl    $0x4,%eax
f0118edc:	89 c2                	mov    %eax,%edx
f0118ede:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118ee4:	01 d0                	add    %edx,%eax
f0118ee6:	48                   	dec    %eax
f0118ee7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118eed:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118ef3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef8:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118efe:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118f04:	29 d0                	sub    %edx,%eax
f0118f06:	01 c8                	add    %ecx,%eax
f0118f08:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118f0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118f14:	39 c2                	cmp    %eax,%edx
f0118f16:	74 17                	je     f0118f2f <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0118f18:	83 ec 04             	sub    $0x4,%esp
f0118f1b:	68 68 af 13 f0       	push   $0xf013af68
f0118f20:	68 27 01 00 00       	push   $0x127
f0118f25:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118f2a:	e8 cc 72 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f2f:	e8 08 ae fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118f34:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f37:	74 17                	je     f0118f50 <test_kmalloc_nextfit+0xc0b>
f0118f39:	83 ec 04             	sub    $0x4,%esp
f0118f3c:	68 74 ac 13 f0       	push   $0xf013ac74
f0118f41:	68 28 01 00 00       	push   $0x128
f0118f46:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118f4b:	e8 ab 72 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118f50:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f53:	e8 71 39 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118f58:	29 c3                	sub    %eax,%ebx
f0118f5a:	89 d8                	mov    %ebx,%eax
f0118f5c:	83 f8 01             	cmp    $0x1,%eax
f0118f5f:	74 17                	je     f0118f78 <test_kmalloc_nextfit+0xc33>
f0118f61:	83 ec 04             	sub    $0x4,%esp
f0118f64:	68 17 af 13 f0       	push   $0xf013af17
f0118f69:	68 29 01 00 00       	push   $0x129
f0118f6e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118f73:	e8 83 72 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118f78:	e8 bf ad fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118f7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118f80:	e8 44 39 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0118f85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0118f88:	83 ec 0c             	sub    $0xc,%esp
f0118f8b:	68 00 00 50 00       	push   $0x500000
f0118f90:	e8 69 e8 fe ff       	call   f01077fe <kmalloc>
f0118f95:	83 c4 10             	add    $0x10,%esp
f0118f98:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118f9e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0118fa5:	10 00 00 
f0118fa8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118fae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118fb3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118fb9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fc4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118fca:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fd0:	29 d0                	sub    %edx,%eax
f0118fd2:	89 c1                	mov    %eax,%ecx
f0118fd4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118fdb:	10 00 00 
f0118fde:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118fe3:	0f b6 d0             	movzbl %al,%edx
f0118fe6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118fec:	01 d0                	add    %edx,%eax
f0118fee:	48                   	dec    %eax
f0118fef:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0118ff5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118ffb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119000:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119006:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011900c:	29 d0                	sub    %edx,%eax
f011900e:	01 c1                	add    %eax,%ecx
f0119010:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119017:	10 00 00 
f011901a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011901f:	0f b6 c0             	movzbl %al,%eax
f0119022:	c1 e0 04             	shl    $0x4,%eax
f0119025:	89 c2                	mov    %eax,%edx
f0119027:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011902d:	01 d0                	add    %edx,%eax
f011902f:	48                   	dec    %eax
f0119030:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119036:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011903c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119041:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119047:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011904d:	29 d0                	sub    %edx,%eax
f011904f:	01 c8                	add    %ecx,%eax
f0119051:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119057:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011905d:	39 c2                	cmp    %eax,%edx
f011905f:	74 17                	je     f0119078 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119061:	83 ec 04             	sub    $0x4,%esp
f0119064:	68 68 af 13 f0       	push   $0xf013af68
f0119069:	68 2f 01 00 00       	push   $0x12f
f011906e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119073:	e8 83 71 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119078:	e8 bf ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011907d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119080:	74 17                	je     f0119099 <test_kmalloc_nextfit+0xd54>
f0119082:	83 ec 04             	sub    $0x4,%esp
f0119085:	68 74 ac 13 f0       	push   $0xf013ac74
f011908a:	68 30 01 00 00       	push   $0x130
f011908f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119094:	e8 62 71 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119099:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011909c:	e8 28 38 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01190a1:	29 c3                	sub    %eax,%ebx
f01190a3:	89 d8                	mov    %ebx,%eax
f01190a5:	3d 00 05 00 00       	cmp    $0x500,%eax
f01190aa:	74 17                	je     f01190c3 <test_kmalloc_nextfit+0xd7e>
f01190ac:	83 ec 04             	sub    $0x4,%esp
f01190af:	68 17 af 13 f0       	push   $0xf013af17
f01190b4:	68 31 01 00 00       	push   $0x131
f01190b9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01190be:	e8 38 71 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01190c3:	e8 74 ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01190c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01190cb:	e8 f9 37 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01190d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f01190d3:	83 ec 0c             	sub    $0xc,%esp
f01190d6:	68 00 00 10 00       	push   $0x100000
f01190db:	e8 1e e7 fe ff       	call   f01077fe <kmalloc>
f01190e0:	83 c4 10             	add    $0x10,%esp
f01190e3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f01190e9:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f01190f0:	10 00 00 
f01190f3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01190f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190fe:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119104:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011910a:	ba 00 00 00 00       	mov    $0x0,%edx
f011910f:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119115:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011911b:	29 d0                	sub    %edx,%eax
f011911d:	89 c1                	mov    %eax,%ecx
f011911f:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119126:	10 00 00 
f0119129:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011912e:	0f b6 d0             	movzbl %al,%edx
f0119131:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119137:	01 d0                	add    %edx,%eax
f0119139:	48                   	dec    %eax
f011913a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119140:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119146:	ba 00 00 00 00       	mov    $0x0,%edx
f011914b:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119151:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119157:	29 d0                	sub    %edx,%eax
f0119159:	01 c1                	add    %eax,%ecx
f011915b:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119162:	10 00 00 
f0119165:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011916a:	0f b6 c0             	movzbl %al,%eax
f011916d:	c1 e0 04             	shl    $0x4,%eax
f0119170:	89 c2                	mov    %eax,%edx
f0119172:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119178:	01 d0                	add    %edx,%eax
f011917a:	48                   	dec    %eax
f011917b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119181:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119187:	ba 00 00 00 00       	mov    $0x0,%edx
f011918c:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119192:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119198:	29 d0                	sub    %edx,%eax
f011919a:	01 c8                	add    %ecx,%eax
f011919c:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f01191a2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01191a8:	39 c2                	cmp    %eax,%edx
f01191aa:	74 17                	je     f01191c3 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f01191ac:	83 ec 04             	sub    $0x4,%esp
f01191af:	68 68 af 13 f0       	push   $0xf013af68
f01191b4:	68 37 01 00 00       	push   $0x137
f01191b9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01191be:	e8 38 70 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191c3:	e8 74 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01191c8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01191cb:	74 17                	je     f01191e4 <test_kmalloc_nextfit+0xe9f>
f01191cd:	83 ec 04             	sub    $0x4,%esp
f01191d0:	68 74 ac 13 f0       	push   $0xf013ac74
f01191d5:	68 38 01 00 00       	push   $0x138
f01191da:	68 5a ac 13 f0       	push   $0xf013ac5a
f01191df:	e8 17 70 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01191e4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01191e7:	e8 dd 36 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01191ec:	29 c3                	sub    %eax,%ebx
f01191ee:	89 d8                	mov    %ebx,%eax
f01191f0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01191f5:	74 17                	je     f011920e <test_kmalloc_nextfit+0xec9>
f01191f7:	83 ec 04             	sub    $0x4,%esp
f01191fa:	68 17 af 13 f0       	push   $0xf013af17
f01191ff:	68 39 01 00 00       	push   $0x139
f0119204:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119209:	e8 ed 6f fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011920e:	e8 29 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119213:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119216:	e8 ae 36 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011921b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011921e:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119224:	83 ec 0c             	sub    $0xc,%esp
f0119227:	50                   	push   %eax
f0119228:	e8 93 e6 fe ff       	call   f01078c0 <kfree>
f011922d:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119230:	e8 07 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119235:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119238:	74 17                	je     f0119251 <test_kmalloc_nextfit+0xf0c>
f011923a:	83 ec 04             	sub    $0x4,%esp
f011923d:	68 74 ac 13 f0       	push   $0xf013ac74
f0119242:	68 3e 01 00 00       	push   $0x13e
f0119247:	68 5a ac 13 f0       	push   $0xf013ac5a
f011924c:	e8 aa 6f fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119251:	e8 73 36 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119256:	89 c2                	mov    %eax,%edx
f0119258:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011925b:	29 c2                	sub    %eax,%edx
f011925d:	89 d0                	mov    %edx,%eax
f011925f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119264:	74 17                	je     f011927d <test_kmalloc_nextfit+0xf38>
f0119266:	83 ec 04             	sub    $0x4,%esp
f0119269:	68 28 af 13 f0       	push   $0xf013af28
f011926e:	68 3f 01 00 00       	push   $0x13f
f0119273:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119278:	e8 7e 6f fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011927d:	e8 ba aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119282:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119285:	e8 3f 36 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011928a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011928d:	83 ec 0c             	sub    $0xc,%esp
f0119290:	68 00 04 00 00       	push   $0x400
f0119295:	e8 64 e5 fe ff       	call   f01077fe <kmalloc>
f011929a:	83 c4 10             	add    $0x10,%esp
f011929d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f01192a3:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f01192aa:	10 00 00 
f01192ad:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01192b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192b8:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f01192be:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01192c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01192c9:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f01192cf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01192d5:	29 d0                	sub    %edx,%eax
f01192d7:	89 c1                	mov    %eax,%ecx
f01192d9:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f01192e0:	10 00 00 
f01192e3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01192e8:	0f b6 d0             	movzbl %al,%edx
f01192eb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01192f1:	01 d0                	add    %edx,%eax
f01192f3:	48                   	dec    %eax
f01192f4:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f01192fa:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119300:	ba 00 00 00 00       	mov    $0x0,%edx
f0119305:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011930b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119311:	29 d0                	sub    %edx,%eax
f0119313:	01 c1                	add    %eax,%ecx
f0119315:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011931c:	10 00 00 
f011931f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119324:	0f b6 c0             	movzbl %al,%eax
f0119327:	c1 e0 04             	shl    $0x4,%eax
f011932a:	89 c2                	mov    %eax,%edx
f011932c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119332:	01 d0                	add    %edx,%eax
f0119334:	48                   	dec    %eax
f0119335:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011933b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119341:	ba 00 00 00 00       	mov    $0x0,%edx
f0119346:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011934c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119352:	29 d0                	sub    %edx,%eax
f0119354:	01 c8                	add    %ecx,%eax
f0119356:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011935c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119362:	39 c2                	cmp    %eax,%edx
f0119364:	74 17                	je     f011937d <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119366:	83 ec 04             	sub    $0x4,%esp
f0119369:	68 68 af 13 f0       	push   $0xf013af68
f011936e:	68 45 01 00 00       	push   $0x145
f0119373:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119378:	e8 7e 6e fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011937d:	e8 ba a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119382:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119385:	74 17                	je     f011939e <test_kmalloc_nextfit+0x1059>
f0119387:	83 ec 04             	sub    $0x4,%esp
f011938a:	68 74 ac 13 f0       	push   $0xf013ac74
f011938f:	68 46 01 00 00       	push   $0x146
f0119394:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119399:	e8 5d 6e fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011939e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01193a1:	e8 23 35 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01193a6:	29 c3                	sub    %eax,%ebx
f01193a8:	89 d8                	mov    %ebx,%eax
f01193aa:	83 f8 01             	cmp    $0x1,%eax
f01193ad:	74 17                	je     f01193c6 <test_kmalloc_nextfit+0x1081>
f01193af:	83 ec 04             	sub    $0x4,%esp
f01193b2:	68 17 af 13 f0       	push   $0xf013af17
f01193b7:	68 47 01 00 00       	push   $0x147
f01193bc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01193c1:	e8 35 6e fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01193c6:	e8 71 a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01193cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01193ce:	e8 f6 34 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01193d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f01193d6:	83 ec 0c             	sub    $0xc,%esp
f01193d9:	68 00 e0 1f 00       	push   $0x1fe000
f01193de:	e8 1b e4 fe ff       	call   f01077fe <kmalloc>
f01193e3:	83 c4 10             	add    $0x10,%esp
f01193e6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f01193ec:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01193f3:	10 00 00 
f01193f6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01193fc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119401:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119407:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011940d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119412:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119418:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011941e:	29 d0                	sub    %edx,%eax
f0119420:	89 c1                	mov    %eax,%ecx
f0119422:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119429:	10 00 00 
f011942c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119431:	0f b6 d0             	movzbl %al,%edx
f0119434:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011943a:	01 d0                	add    %edx,%eax
f011943c:	48                   	dec    %eax
f011943d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119443:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119449:	ba 00 00 00 00       	mov    $0x0,%edx
f011944e:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119454:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011945a:	29 d0                	sub    %edx,%eax
f011945c:	01 c1                	add    %eax,%ecx
f011945e:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119465:	10 00 00 
f0119468:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011946d:	0f b6 c0             	movzbl %al,%eax
f0119470:	c1 e0 04             	shl    $0x4,%eax
f0119473:	89 c2                	mov    %eax,%edx
f0119475:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011947b:	01 d0                	add    %edx,%eax
f011947d:	48                   	dec    %eax
f011947e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119484:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011948a:	ba 00 00 00 00       	mov    $0x0,%edx
f011948f:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119495:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011949b:	29 d0                	sub    %edx,%eax
f011949d:	01 c8                	add    %ecx,%eax
f011949f:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f01194a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01194ab:	39 c2                	cmp    %eax,%edx
f01194ad:	74 17                	je     f01194c6 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f01194af:	83 ec 04             	sub    $0x4,%esp
f01194b2:	68 68 af 13 f0       	push   $0xf013af68
f01194b7:	68 4d 01 00 00       	push   $0x14d
f01194bc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01194c1:	e8 35 6d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01194c6:	e8 71 a8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01194cb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01194ce:	74 17                	je     f01194e7 <test_kmalloc_nextfit+0x11a2>
f01194d0:	83 ec 04             	sub    $0x4,%esp
f01194d3:	68 74 ac 13 f0       	push   $0xf013ac74
f01194d8:	68 4e 01 00 00       	push   $0x14e
f01194dd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01194e2:	e8 14 6d fe ff       	call   f01001fb <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01194e7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194ea:	e8 da 33 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01194ef:	29 c3                	sub    %eax,%ebx
f01194f1:	89 d8                	mov    %ebx,%eax
f01194f3:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f01194f8:	74 17                	je     f0119511 <test_kmalloc_nextfit+0x11cc>
f01194fa:	83 ec 04             	sub    $0x4,%esp
f01194fd:	68 17 af 13 f0       	push   $0xf013af17
f0119502:	68 50 01 00 00       	push   $0x150
f0119507:	68 5a ac 13 f0       	push   $0xf013ac5a
f011950c:	e8 ea 6c fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119511:	e8 26 a8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119516:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119519:	e8 ab 33 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011951e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119521:	83 ec 0c             	sub    $0xc,%esp
f0119524:	68 00 00 08 00       	push   $0x80000
f0119529:	e8 d0 e2 fe ff       	call   f01077fe <kmalloc>
f011952e:	83 c4 10             	add    $0x10,%esp
f0119531:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119537:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011953e:	10 00 00 
f0119541:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119547:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011954c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119552:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119558:	ba 00 00 00 00       	mov    $0x0,%edx
f011955d:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119563:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119569:	29 d0                	sub    %edx,%eax
f011956b:	89 c1                	mov    %eax,%ecx
f011956d:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119574:	10 00 00 
f0119577:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011957c:	0f b6 d0             	movzbl %al,%edx
f011957f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119585:	01 d0                	add    %edx,%eax
f0119587:	48                   	dec    %eax
f0119588:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011958e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119594:	ba 00 00 00 00       	mov    $0x0,%edx
f0119599:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011959f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01195a5:	29 d0                	sub    %edx,%eax
f01195a7:	01 c1                	add    %eax,%ecx
f01195a9:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f01195b0:	10 00 00 
f01195b3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01195b8:	0f b6 c0             	movzbl %al,%eax
f01195bb:	c1 e0 04             	shl    $0x4,%eax
f01195be:	89 c2                	mov    %eax,%edx
f01195c0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01195c6:	01 d0                	add    %edx,%eax
f01195c8:	48                   	dec    %eax
f01195c9:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f01195cf:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01195d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01195da:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f01195e0:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01195e6:	29 d0                	sub    %edx,%eax
f01195e8:	01 c8                	add    %ecx,%eax
f01195ea:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f01195f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01195f6:	39 c2                	cmp    %eax,%edx
f01195f8:	74 17                	je     f0119611 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f01195fa:	83 ec 04             	sub    $0x4,%esp
f01195fd:	68 68 af 13 f0       	push   $0xf013af68
f0119602:	68 56 01 00 00       	push   $0x156
f0119607:	68 5a ac 13 f0       	push   $0xf013ac5a
f011960c:	e8 ea 6b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119611:	e8 26 a7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119616:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119619:	74 17                	je     f0119632 <test_kmalloc_nextfit+0x12ed>
f011961b:	83 ec 04             	sub    $0x4,%esp
f011961e:	68 74 ac 13 f0       	push   $0xf013ac74
f0119623:	68 57 01 00 00       	push   $0x157
f0119628:	68 5a ac 13 f0       	push   $0xf013ac5a
f011962d:	e8 c9 6b fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119632:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119635:	e8 8f 32 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011963a:	29 c3                	sub    %eax,%ebx
f011963c:	89 d8                	mov    %ebx,%eax
f011963e:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119643:	74 17                	je     f011965c <test_kmalloc_nextfit+0x1317>
f0119645:	83 ec 04             	sub    $0x4,%esp
f0119648:	68 17 af 13 f0       	push   $0xf013af17
f011964d:	68 58 01 00 00       	push   $0x158
f0119652:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119657:	e8 9f 6b fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011965c:	83 ec 0c             	sub    $0xc,%esp
f011965f:	68 88 af 13 f0       	push   $0xf013af88
f0119664:	e8 19 76 fe ff       	call   f0100c82 <cprintf>
f0119669:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011966c:	e8 cb a6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119671:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119674:	e8 50 32 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119679:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011967c:	83 ec 0c             	sub    $0xc,%esp
f011967f:	68 00 00 38 00       	push   $0x380000
f0119684:	e8 75 e1 fe ff       	call   f01077fe <kmalloc>
f0119689:	83 c4 10             	add    $0x10,%esp
f011968c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119692:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119699:	10 00 00 
f011969c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01196a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196a7:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f01196ad:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01196b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01196b8:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f01196be:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01196c4:	29 d0                	sub    %edx,%eax
f01196c6:	89 c1                	mov    %eax,%ecx
f01196c8:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f01196cf:	10 00 00 
f01196d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01196d7:	0f b6 d0             	movzbl %al,%edx
f01196da:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01196e0:	01 d0                	add    %edx,%eax
f01196e2:	48                   	dec    %eax
f01196e3:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f01196e9:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01196ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01196f4:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f01196fa:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119700:	29 d0                	sub    %edx,%eax
f0119702:	01 c1                	add    %eax,%ecx
f0119704:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011970b:	10 00 00 
f011970e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119713:	0f b6 c0             	movzbl %al,%eax
f0119716:	c1 e0 04             	shl    $0x4,%eax
f0119719:	89 c2                	mov    %eax,%edx
f011971b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119721:	01 d0                	add    %edx,%eax
f0119723:	48                   	dec    %eax
f0119724:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011972a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119730:	ba 00 00 00 00       	mov    $0x0,%edx
f0119735:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011973b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119741:	29 d0                	sub    %edx,%eax
f0119743:	01 c8                	add    %ecx,%eax
f0119745:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011974b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119751:	39 c2                	cmp    %eax,%edx
f0119753:	74 17                	je     f011976c <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119755:	83 ec 04             	sub    $0x4,%esp
f0119758:	68 68 af 13 f0       	push   $0xf013af68
f011975d:	68 62 01 00 00       	push   $0x162
f0119762:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119767:	e8 8f 6a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011976c:	e8 cb a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119771:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119774:	74 17                	je     f011978d <test_kmalloc_nextfit+0x1448>
f0119776:	83 ec 04             	sub    $0x4,%esp
f0119779:	68 74 ac 13 f0       	push   $0xf013ac74
f011977e:	68 63 01 00 00       	push   $0x163
f0119783:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119788:	e8 6e 6a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011978d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119790:	e8 34 31 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119795:	29 c3                	sub    %eax,%ebx
f0119797:	89 d8                	mov    %ebx,%eax
f0119799:	3d 80 03 00 00       	cmp    $0x380,%eax
f011979e:	74 17                	je     f01197b7 <test_kmalloc_nextfit+0x1472>
f01197a0:	83 ec 04             	sub    $0x4,%esp
f01197a3:	68 17 af 13 f0       	push   $0xf013af17
f01197a8:	68 64 01 00 00       	push   $0x164
f01197ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f01197b2:	e8 44 6a fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01197b7:	e8 80 a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01197bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197bf:	e8 05 31 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01197c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f01197c7:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f01197cd:	83 ec 0c             	sub    $0xc,%esp
f01197d0:	50                   	push   %eax
f01197d1:	e8 ea e0 fe ff       	call   f01078c0 <kfree>
f01197d6:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197d9:	e8 5e a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01197de:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197e1:	74 17                	je     f01197fa <test_kmalloc_nextfit+0x14b5>
f01197e3:	83 ec 04             	sub    $0x4,%esp
f01197e6:	68 74 ac 13 f0       	push   $0xf013ac74
f01197eb:	68 69 01 00 00       	push   $0x169
f01197f0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01197f5:	e8 01 6a fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01197fa:	e8 ca 30 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01197ff:	89 c2                	mov    %eax,%edx
f0119801:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119804:	29 c2                	sub    %eax,%edx
f0119806:	89 d0                	mov    %edx,%eax
f0119808:	3d 00 02 00 00       	cmp    $0x200,%eax
f011980d:	74 17                	je     f0119826 <test_kmalloc_nextfit+0x14e1>
f011980f:	83 ec 04             	sub    $0x4,%esp
f0119812:	68 28 af 13 f0       	push   $0xf013af28
f0119817:	68 6a 01 00 00       	push   $0x16a
f011981c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119821:	e8 d5 69 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119826:	e8 11 a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011982b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011982e:	e8 96 30 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119833:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119836:	83 ec 0c             	sub    $0xc,%esp
f0119839:	68 00 fc 3f 00       	push   $0x3ffc00
f011983e:	e8 bb df fe ff       	call   f01077fe <kmalloc>
f0119843:	83 c4 10             	add    $0x10,%esp
f0119846:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011984c:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119853:	10 00 00 
f0119856:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011985c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119861:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0119867:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011986d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119872:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0119878:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011987e:	29 d0                	sub    %edx,%eax
f0119880:	89 c1                	mov    %eax,%ecx
f0119882:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0119889:	10 00 00 
f011988c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119891:	0f b6 d0             	movzbl %al,%edx
f0119894:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011989a:	01 d0                	add    %edx,%eax
f011989c:	48                   	dec    %eax
f011989d:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f01198a3:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01198a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ae:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f01198b4:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01198ba:	29 d0                	sub    %edx,%eax
f01198bc:	01 c1                	add    %eax,%ecx
f01198be:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f01198c5:	10 00 00 
f01198c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01198cd:	0f b6 c0             	movzbl %al,%eax
f01198d0:	c1 e0 04             	shl    $0x4,%eax
f01198d3:	89 c2                	mov    %eax,%edx
f01198d5:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01198db:	01 d0                	add    %edx,%eax
f01198dd:	48                   	dec    %eax
f01198de:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f01198e4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01198ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ef:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f01198f5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01198fb:	29 d0                	sub    %edx,%eax
f01198fd:	01 c8                	add    %ecx,%eax
f01198ff:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119905:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011990b:	39 c2                	cmp    %eax,%edx
f011990d:	74 17                	je     f0119926 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011990f:	83 ec 04             	sub    $0x4,%esp
f0119912:	68 68 af 13 f0       	push   $0xf013af68
f0119917:	68 70 01 00 00       	push   $0x170
f011991c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119921:	e8 d5 68 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119926:	e8 11 a4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011992b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011992e:	74 17                	je     f0119947 <test_kmalloc_nextfit+0x1602>
f0119930:	83 ec 04             	sub    $0x4,%esp
f0119933:	68 74 ac 13 f0       	push   $0xf013ac74
f0119938:	68 71 01 00 00       	push   $0x171
f011993d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119942:	e8 b4 68 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119947:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011994a:	e8 7a 2f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011994f:	29 c3                	sub    %eax,%ebx
f0119951:	89 d8                	mov    %ebx,%eax
f0119953:	3d 00 04 00 00       	cmp    $0x400,%eax
f0119958:	74 17                	je     f0119971 <test_kmalloc_nextfit+0x162c>
f011995a:	83 ec 04             	sub    $0x4,%esp
f011995d:	68 17 af 13 f0       	push   $0xf013af17
f0119962:	68 72 01 00 00       	push   $0x172
f0119967:	68 5a ac 13 f0       	push   $0xf013ac5a
f011996c:	e8 8a 68 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119971:	83 ec 0c             	sub    $0xc,%esp
f0119974:	68 c4 af 13 f0       	push   $0xf013afc4
f0119979:	e8 04 73 fe ff       	call   f0100c82 <cprintf>
f011997e:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119981:	e8 b6 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119986:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119989:	e8 3b 2f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011998e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119991:	83 ec 0c             	sub    $0xc,%esp
f0119994:	68 00 00 60 00       	push   $0x600000
f0119999:	e8 60 de fe ff       	call   f01077fe <kmalloc>
f011999e:	83 c4 10             	add    $0x10,%esp
f01199a1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f01199a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01199ad:	85 c0                	test   %eax,%eax
f01199af:	74 17                	je     f01199c8 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f01199b1:	83 ec 04             	sub    $0x4,%esp
f01199b4:	68 68 af 13 f0       	push   $0xf013af68
f01199b9:	68 7c 01 00 00       	push   $0x17c
f01199be:	68 5a ac 13 f0       	push   $0xf013ac5a
f01199c3:	e8 33 68 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199c8:	e8 6f a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01199cd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199d0:	74 17                	je     f01199e9 <test_kmalloc_nextfit+0x16a4>
f01199d2:	83 ec 04             	sub    $0x4,%esp
f01199d5:	68 74 ac 13 f0       	push   $0xf013ac74
f01199da:	68 7d 01 00 00       	push   $0x17d
f01199df:	68 5a ac 13 f0       	push   $0xf013ac5a
f01199e4:	e8 12 68 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f01199e9:	e8 db 2e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f01199ee:	89 c2                	mov    %eax,%edx
f01199f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01199f3:	39 c2                	cmp    %eax,%edx
f01199f5:	74 17                	je     f0119a0e <test_kmalloc_nextfit+0x16c9>
f01199f7:	83 ec 04             	sub    $0x4,%esp
f01199fa:	68 17 af 13 f0       	push   $0xf013af17
f01199ff:	68 7e 01 00 00       	push   $0x17e
f0119a04:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119a09:	e8 ed 67 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119a0e:	83 ec 0c             	sub    $0xc,%esp
f0119a11:	68 fc af 13 f0       	push   $0xf013affc
f0119a16:	e8 67 72 fe ff       	call   f0100c82 <cprintf>
f0119a1b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119a1e:	83 ec 0c             	sub    $0xc,%esp
f0119a21:	68 38 b0 13 f0       	push   $0xf013b038
f0119a26:	e8 57 72 fe ff       	call   f0100c82 <cprintf>
f0119a2b:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119a2e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119a33:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119a36:	5b                   	pop    %ebx
f0119a37:	5f                   	pop    %edi
f0119a38:	5d                   	pop    %ebp
f0119a39:	c3                   	ret    

f0119a3a <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0119a3a:	55                   	push   %ebp
f0119a3b:	89 e5                	mov    %esp,%ebp
f0119a3d:	57                   	push   %edi
f0119a3e:	53                   	push   %ebx
f0119a3f:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119a45:	83 ec 0c             	sub    $0xc,%esp
f0119a48:	68 9c ab 13 f0       	push   $0xf013ab9c
f0119a4d:	e8 30 72 fe ff       	call   f0100c82 <cprintf>
f0119a52:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119a55:	83 ec 0c             	sub    $0xc,%esp
f0119a58:	68 cc ab 13 f0       	push   $0xf013abcc
f0119a5d:	e8 20 72 fe ff       	call   f0100c82 <cprintf>
f0119a62:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119a65:	83 ec 0c             	sub    $0xc,%esp
f0119a68:	68 9c ab 13 f0       	push   $0xf013ab9c
f0119a6d:	e8 10 72 fe ff       	call   f0100c82 <cprintf>
f0119a72:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119a75:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119a7b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0119a85:	89 d7                	mov    %edx,%edi
f0119a87:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a89:	e8 3b 2e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119a8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a91:	e8 a6 a2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119a96:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119a99:	83 ec 0c             	sub    $0xc,%esp
f0119a9c:	68 00 fc 2f 00       	push   $0x2ffc00
f0119aa1:	e8 58 dd fe ff       	call   f01077fe <kmalloc>
f0119aa6:	83 c4 10             	add    $0x10,%esp
f0119aa9:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119aaf:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119ab5:	89 c1                	mov    %eax,%ecx
f0119ab7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119abe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119ac1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ac6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119ac9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119acc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ad1:	f7 75 ec             	divl   -0x14(%ebp)
f0119ad4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119ad7:	29 d0                	sub    %edx,%eax
f0119ad9:	89 c3                	mov    %eax,%ebx
f0119adb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119ae2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119ae7:	0f b6 d0             	movzbl %al,%edx
f0119aea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119aed:	01 d0                	add    %edx,%eax
f0119aef:	48                   	dec    %eax
f0119af0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119af3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119af6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119afb:	f7 75 e4             	divl   -0x1c(%ebp)
f0119afe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119b01:	29 d0                	sub    %edx,%eax
f0119b03:	01 c3                	add    %eax,%ebx
f0119b05:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119b0c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119b11:	0f b6 c0             	movzbl %al,%eax
f0119b14:	c1 e0 04             	shl    $0x4,%eax
f0119b17:	89 c2                	mov    %eax,%edx
f0119b19:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119b1c:	01 d0                	add    %edx,%eax
f0119b1e:	48                   	dec    %eax
f0119b1f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119b22:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119b25:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b2a:	f7 75 dc             	divl   -0x24(%ebp)
f0119b2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119b30:	29 d0                	sub    %edx,%eax
f0119b32:	01 d8                	add    %ebx,%eax
f0119b34:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119b39:	39 c1                	cmp    %eax,%ecx
f0119b3b:	74 17                	je     f0119b54 <test_kmalloc_bestfit1+0x11a>
f0119b3d:	83 ec 04             	sub    $0x4,%esp
f0119b40:	68 74 b0 13 f0       	push   $0xf013b074
f0119b45:	68 98 01 00 00       	push   $0x198
f0119b4a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119b4f:	e8 a7 66 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b54:	e8 e3 a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119b59:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b5c:	74 17                	je     f0119b75 <test_kmalloc_bestfit1+0x13b>
f0119b5e:	83 ec 04             	sub    $0x4,%esp
f0119b61:	68 74 ac 13 f0       	push   $0xf013ac74
f0119b66:	68 99 01 00 00       	push   $0x199
f0119b6b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119b70:	e8 86 66 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119b75:	e8 4f 2d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119b7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119b7d:	29 c2                	sub    %eax,%edx
f0119b7f:	89 d0                	mov    %edx,%eax
f0119b81:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119b86:	74 17                	je     f0119b9f <test_kmalloc_bestfit1+0x165>
f0119b88:	83 ec 04             	sub    $0x4,%esp
f0119b8b:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119b90:	68 9a 01 00 00       	push   $0x19a
f0119b95:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119b9a:	e8 5c 66 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119b9f:	e8 25 2d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119ba4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ba7:	e8 90 a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119bac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119baf:	83 ec 0c             	sub    $0xc,%esp
f0119bb2:	68 00 fc 2f 00       	push   $0x2ffc00
f0119bb7:	e8 42 dc fe ff       	call   f01077fe <kmalloc>
f0119bbc:	83 c4 10             	add    $0x10,%esp
f0119bbf:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119bc5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119bcb:	89 c1                	mov    %eax,%ecx
f0119bcd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119bd4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119bd7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bdc:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119bdf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119be2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119be7:	f7 75 d4             	divl   -0x2c(%ebp)
f0119bea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119bed:	29 d0                	sub    %edx,%eax
f0119bef:	89 c3                	mov    %eax,%ebx
f0119bf1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119bf8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119bfd:	0f b6 d0             	movzbl %al,%edx
f0119c00:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119c03:	01 d0                	add    %edx,%eax
f0119c05:	48                   	dec    %eax
f0119c06:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119c09:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119c0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c11:	f7 75 cc             	divl   -0x34(%ebp)
f0119c14:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119c17:	29 d0                	sub    %edx,%eax
f0119c19:	01 c3                	add    %eax,%ebx
f0119c1b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119c22:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119c27:	0f b6 c0             	movzbl %al,%eax
f0119c2a:	c1 e0 04             	shl    $0x4,%eax
f0119c2d:	89 c2                	mov    %eax,%edx
f0119c2f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119c32:	01 d0                	add    %edx,%eax
f0119c34:	48                   	dec    %eax
f0119c35:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119c38:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119c3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c40:	f7 75 c4             	divl   -0x3c(%ebp)
f0119c43:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119c46:	29 d0                	sub    %edx,%eax
f0119c48:	01 d8                	add    %ebx,%eax
f0119c4a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119c4f:	39 c1                	cmp    %eax,%ecx
f0119c51:	74 17                	je     f0119c6a <test_kmalloc_bestfit1+0x230>
f0119c53:	83 ec 04             	sub    $0x4,%esp
f0119c56:	68 74 b0 13 f0       	push   $0xf013b074
f0119c5b:	68 a0 01 00 00       	push   $0x1a0
f0119c60:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119c65:	e8 91 65 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c6a:	e8 cd a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119c6f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119c72:	74 17                	je     f0119c8b <test_kmalloc_bestfit1+0x251>
f0119c74:	83 ec 04             	sub    $0x4,%esp
f0119c77:	68 74 ac 13 f0       	push   $0xf013ac74
f0119c7c:	68 a1 01 00 00       	push   $0x1a1
f0119c81:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119c86:	e8 70 65 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119c8b:	e8 39 2c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119c90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119c93:	29 c2                	sub    %eax,%edx
f0119c95:	89 d0                	mov    %edx,%eax
f0119c97:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119c9c:	74 17                	je     f0119cb5 <test_kmalloc_bestfit1+0x27b>
f0119c9e:	83 ec 04             	sub    $0x4,%esp
f0119ca1:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119ca6:	68 a2 01 00 00       	push   $0x1a2
f0119cab:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119cb0:	e8 46 65 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119cb5:	e8 0f 2c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119cba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119cbd:	e8 7a a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119cc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119cc5:	83 ec 0c             	sub    $0xc,%esp
f0119cc8:	68 00 fc 1f 00       	push   $0x1ffc00
f0119ccd:	e8 2c db fe ff       	call   f01077fe <kmalloc>
f0119cd2:	83 c4 10             	add    $0x10,%esp
f0119cd5:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119cdb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119ce1:	89 c1                	mov    %eax,%ecx
f0119ce3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119cea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119ced:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119cf2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119cf5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cfd:	f7 75 bc             	divl   -0x44(%ebp)
f0119d00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119d03:	29 d0                	sub    %edx,%eax
f0119d05:	89 c3                	mov    %eax,%ebx
f0119d07:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119d0e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119d13:	0f b6 d0             	movzbl %al,%edx
f0119d16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119d19:	01 d0                	add    %edx,%eax
f0119d1b:	48                   	dec    %eax
f0119d1c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119d1f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d22:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d27:	f7 75 b4             	divl   -0x4c(%ebp)
f0119d2a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d2d:	29 d0                	sub    %edx,%eax
f0119d2f:	01 c3                	add    %eax,%ebx
f0119d31:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119d38:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119d3d:	0f b6 c0             	movzbl %al,%eax
f0119d40:	c1 e0 04             	shl    $0x4,%eax
f0119d43:	89 c2                	mov    %eax,%edx
f0119d45:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119d48:	01 d0                	add    %edx,%eax
f0119d4a:	48                   	dec    %eax
f0119d4b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119d4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119d51:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d56:	f7 75 ac             	divl   -0x54(%ebp)
f0119d59:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119d5c:	29 d0                	sub    %edx,%eax
f0119d5e:	01 d8                	add    %ebx,%eax
f0119d60:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119d65:	39 c1                	cmp    %eax,%ecx
f0119d67:	74 17                	je     f0119d80 <test_kmalloc_bestfit1+0x346>
f0119d69:	83 ec 04             	sub    $0x4,%esp
f0119d6c:	68 74 b0 13 f0       	push   $0xf013b074
f0119d71:	68 a8 01 00 00       	push   $0x1a8
f0119d76:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119d7b:	e8 7b 64 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d80:	e8 b7 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119d85:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119d88:	74 17                	je     f0119da1 <test_kmalloc_bestfit1+0x367>
f0119d8a:	83 ec 04             	sub    $0x4,%esp
f0119d8d:	68 74 ac 13 f0       	push   $0xf013ac74
f0119d92:	68 a9 01 00 00       	push   $0x1a9
f0119d97:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119d9c:	e8 5a 64 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119da1:	e8 23 2b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119da6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119da9:	29 c2                	sub    %eax,%edx
f0119dab:	89 d0                	mov    %edx,%eax
f0119dad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119db2:	74 17                	je     f0119dcb <test_kmalloc_bestfit1+0x391>
f0119db4:	83 ec 04             	sub    $0x4,%esp
f0119db7:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119dbc:	68 aa 01 00 00       	push   $0x1aa
f0119dc1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119dc6:	e8 30 64 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119dcb:	e8 f9 2a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119dd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119dd3:	e8 64 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119dd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119ddb:	83 ec 0c             	sub    $0xc,%esp
f0119dde:	68 00 fc 1f 00       	push   $0x1ffc00
f0119de3:	e8 16 da fe ff       	call   f01077fe <kmalloc>
f0119de8:	83 c4 10             	add    $0x10,%esp
f0119deb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119df1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119df7:	89 c1                	mov    %eax,%ecx
f0119df9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119e00:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119e03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e08:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119e0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119e0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e13:	f7 75 a4             	divl   -0x5c(%ebp)
f0119e16:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119e19:	29 d0                	sub    %edx,%eax
f0119e1b:	89 c3                	mov    %eax,%ebx
f0119e1d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119e24:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119e29:	0f b6 d0             	movzbl %al,%edx
f0119e2c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119e2f:	01 d0                	add    %edx,%eax
f0119e31:	48                   	dec    %eax
f0119e32:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119e35:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119e38:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e3d:	f7 75 9c             	divl   -0x64(%ebp)
f0119e40:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119e43:	29 d0                	sub    %edx,%eax
f0119e45:	01 c3                	add    %eax,%ebx
f0119e47:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119e4e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119e53:	0f b6 c0             	movzbl %al,%eax
f0119e56:	c1 e0 04             	shl    $0x4,%eax
f0119e59:	89 c2                	mov    %eax,%edx
f0119e5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119e5e:	01 d0                	add    %edx,%eax
f0119e60:	48                   	dec    %eax
f0119e61:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119e64:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119e67:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e6c:	f7 75 94             	divl   -0x6c(%ebp)
f0119e6f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119e72:	29 d0                	sub    %edx,%eax
f0119e74:	01 d8                	add    %ebx,%eax
f0119e76:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119e7b:	39 c1                	cmp    %eax,%ecx
f0119e7d:	74 17                	je     f0119e96 <test_kmalloc_bestfit1+0x45c>
f0119e7f:	83 ec 04             	sub    $0x4,%esp
f0119e82:	68 74 b0 13 f0       	push   $0xf013b074
f0119e87:	68 b0 01 00 00       	push   $0x1b0
f0119e8c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119e91:	e8 65 63 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e96:	e8 a1 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119e9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e9e:	74 17                	je     f0119eb7 <test_kmalloc_bestfit1+0x47d>
f0119ea0:	83 ec 04             	sub    $0x4,%esp
f0119ea3:	68 74 ac 13 f0       	push   $0xf013ac74
f0119ea8:	68 b1 01 00 00       	push   $0x1b1
f0119ead:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119eb2:	e8 44 63 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119eb7:	e8 0d 2a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119ebf:	29 c2                	sub    %eax,%edx
f0119ec1:	89 d0                	mov    %edx,%eax
f0119ec3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119ec8:	74 17                	je     f0119ee1 <test_kmalloc_bestfit1+0x4a7>
f0119eca:	83 ec 04             	sub    $0x4,%esp
f0119ecd:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119ed2:	68 b2 01 00 00       	push   $0x1b2
f0119ed7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119edc:	e8 1a 63 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ee1:	e8 e3 29 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ee9:	e8 4e 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119eee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119ef1:	83 ec 0c             	sub    $0xc,%esp
f0119ef4:	68 00 fc 0f 00       	push   $0xffc00
f0119ef9:	e8 00 d9 fe ff       	call   f01077fe <kmalloc>
f0119efe:	83 c4 10             	add    $0x10,%esp
f0119f01:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119f07:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119f0d:	89 c1                	mov    %eax,%ecx
f0119f0f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119f16:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119f19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f1e:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119f21:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119f24:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f29:	f7 75 8c             	divl   -0x74(%ebp)
f0119f2c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119f2f:	29 d0                	sub    %edx,%eax
f0119f31:	89 c3                	mov    %eax,%ebx
f0119f33:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119f3a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119f3f:	0f b6 d0             	movzbl %al,%edx
f0119f42:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119f45:	01 d0                	add    %edx,%eax
f0119f47:	48                   	dec    %eax
f0119f48:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119f4b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f53:	f7 75 84             	divl   -0x7c(%ebp)
f0119f56:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119f59:	29 d0                	sub    %edx,%eax
f0119f5b:	01 c3                	add    %eax,%ebx
f0119f5d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119f64:	10 00 00 
f0119f67:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119f6c:	0f b6 c0             	movzbl %al,%eax
f0119f6f:	c1 e0 04             	shl    $0x4,%eax
f0119f72:	89 c2                	mov    %eax,%edx
f0119f74:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119f7a:	01 d0                	add    %edx,%eax
f0119f7c:	48                   	dec    %eax
f0119f7d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0119f83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119f89:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f8e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119f94:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119f9a:	29 d0                	sub    %edx,%eax
f0119f9c:	01 d8                	add    %ebx,%eax
f0119f9e:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f0119fa3:	39 c1                	cmp    %eax,%ecx
f0119fa5:	74 17                	je     f0119fbe <test_kmalloc_bestfit1+0x584>
f0119fa7:	83 ec 04             	sub    $0x4,%esp
f0119faa:	68 74 b0 13 f0       	push   $0xf013b074
f0119faf:	68 b8 01 00 00       	push   $0x1b8
f0119fb4:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119fb9:	e8 3d 62 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fbe:	e8 79 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119fc3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119fc6:	74 17                	je     f0119fdf <test_kmalloc_bestfit1+0x5a5>
f0119fc8:	83 ec 04             	sub    $0x4,%esp
f0119fcb:	68 74 ac 13 f0       	push   $0xf013ac74
f0119fd0:	68 b9 01 00 00       	push   $0x1b9
f0119fd5:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119fda:	e8 1c 62 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119fdf:	e8 e5 28 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f0119fe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119fe7:	29 c2                	sub    %eax,%edx
f0119fe9:	89 d0                	mov    %edx,%eax
f0119feb:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119ff0:	74 17                	je     f011a009 <test_kmalloc_bestfit1+0x5cf>
f0119ff2:	83 ec 04             	sub    $0x4,%esp
f0119ff5:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119ffa:	68 ba 01 00 00       	push   $0x1ba
f0119fff:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a004:	e8 f2 61 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a009:	e8 bb 28 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a00e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a011:	e8 26 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a016:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a019:	83 ec 0c             	sub    $0xc,%esp
f011a01c:	68 00 fc 0f 00       	push   $0xffc00
f011a021:	e8 d8 d7 fe ff       	call   f01077fe <kmalloc>
f011a026:	83 c4 10             	add    $0x10,%esp
f011a029:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a02f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a035:	89 c1                	mov    %eax,%ecx
f011a037:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a03e:	10 00 00 
f011a041:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a047:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a04c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a052:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a058:	ba 00 00 00 00       	mov    $0x0,%edx
f011a05d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a063:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a069:	29 d0                	sub    %edx,%eax
f011a06b:	89 c3                	mov    %eax,%ebx
f011a06d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a074:	10 00 00 
f011a077:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a07c:	0f b6 d0             	movzbl %al,%edx
f011a07f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a085:	01 d0                	add    %edx,%eax
f011a087:	48                   	dec    %eax
f011a088:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a08e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a094:	ba 00 00 00 00       	mov    $0x0,%edx
f011a099:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a09f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a0a5:	29 d0                	sub    %edx,%eax
f011a0a7:	01 c3                	add    %eax,%ebx
f011a0a9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a0b0:	10 00 00 
f011a0b3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a0b8:	0f b6 c0             	movzbl %al,%eax
f011a0bb:	c1 e0 04             	shl    $0x4,%eax
f011a0be:	89 c2                	mov    %eax,%edx
f011a0c0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a0c6:	01 d0                	add    %edx,%eax
f011a0c8:	48                   	dec    %eax
f011a0c9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a0cf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a0d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0da:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a0e0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a0e6:	29 d0                	sub    %edx,%eax
f011a0e8:	01 d8                	add    %ebx,%eax
f011a0ea:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a0ef:	39 c1                	cmp    %eax,%ecx
f011a0f1:	74 17                	je     f011a10a <test_kmalloc_bestfit1+0x6d0>
f011a0f3:	83 ec 04             	sub    $0x4,%esp
f011a0f6:	68 74 b0 13 f0       	push   $0xf013b074
f011a0fb:	68 c0 01 00 00       	push   $0x1c0
f011a100:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a105:	e8 f1 60 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a10a:	e8 2d 9c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a10f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a112:	74 17                	je     f011a12b <test_kmalloc_bestfit1+0x6f1>
f011a114:	83 ec 04             	sub    $0x4,%esp
f011a117:	68 74 ac 13 f0       	push   $0xf013ac74
f011a11c:	68 c1 01 00 00       	push   $0x1c1
f011a121:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a126:	e8 d0 60 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a12b:	e8 99 27 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a130:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a133:	29 c2                	sub    %eax,%edx
f011a135:	89 d0                	mov    %edx,%eax
f011a137:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a13c:	74 17                	je     f011a155 <test_kmalloc_bestfit1+0x71b>
f011a13e:	83 ec 04             	sub    $0x4,%esp
f011a141:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a146:	68 c2 01 00 00       	push   $0x1c2
f011a14b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a150:	e8 a6 60 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a155:	e8 6f 27 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a15a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a15d:	e8 da 9b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a162:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a165:	83 ec 0c             	sub    $0xc,%esp
f011a168:	68 00 fc 0f 00       	push   $0xffc00
f011a16d:	e8 8c d6 fe ff       	call   f01077fe <kmalloc>
f011a172:	83 c4 10             	add    $0x10,%esp
f011a175:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a17b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a181:	89 c1                	mov    %eax,%ecx
f011a183:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a18a:	10 00 00 
f011a18d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a193:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a198:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a19e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a1a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1a9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a1af:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a1b5:	29 d0                	sub    %edx,%eax
f011a1b7:	89 c3                	mov    %eax,%ebx
f011a1b9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a1c0:	10 00 00 
f011a1c3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a1c8:	0f b6 d0             	movzbl %al,%edx
f011a1cb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a1d1:	01 d0                	add    %edx,%eax
f011a1d3:	48                   	dec    %eax
f011a1d4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a1da:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a1e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1e5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a1eb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a1f1:	29 d0                	sub    %edx,%eax
f011a1f3:	01 c3                	add    %eax,%ebx
f011a1f5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a1fc:	10 00 00 
f011a1ff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a204:	0f b6 c0             	movzbl %al,%eax
f011a207:	c1 e0 04             	shl    $0x4,%eax
f011a20a:	89 c2                	mov    %eax,%edx
f011a20c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a212:	01 d0                	add    %edx,%eax
f011a214:	48                   	dec    %eax
f011a215:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a21b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a221:	ba 00 00 00 00       	mov    $0x0,%edx
f011a226:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a22c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a232:	29 d0                	sub    %edx,%eax
f011a234:	01 d8                	add    %ebx,%eax
f011a236:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a23b:	39 c1                	cmp    %eax,%ecx
f011a23d:	74 17                	je     f011a256 <test_kmalloc_bestfit1+0x81c>
f011a23f:	83 ec 04             	sub    $0x4,%esp
f011a242:	68 74 b0 13 f0       	push   $0xf013b074
f011a247:	68 c8 01 00 00       	push   $0x1c8
f011a24c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a251:	e8 a5 5f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a256:	e8 e1 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a25b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a25e:	74 17                	je     f011a277 <test_kmalloc_bestfit1+0x83d>
f011a260:	83 ec 04             	sub    $0x4,%esp
f011a263:	68 74 ac 13 f0       	push   $0xf013ac74
f011a268:	68 c9 01 00 00       	push   $0x1c9
f011a26d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a272:	e8 84 5f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a277:	e8 4d 26 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a27c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a27f:	29 c2                	sub    %eax,%edx
f011a281:	89 d0                	mov    %edx,%eax
f011a283:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a288:	74 17                	je     f011a2a1 <test_kmalloc_bestfit1+0x867>
f011a28a:	83 ec 04             	sub    $0x4,%esp
f011a28d:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a292:	68 ca 01 00 00       	push   $0x1ca
f011a297:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a29c:	e8 5a 5f fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a2a1:	e8 23 26 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a2a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a2a9:	e8 8e 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a2ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a2b1:	83 ec 0c             	sub    $0xc,%esp
f011a2b4:	68 00 fc 0f 00       	push   $0xffc00
f011a2b9:	e8 40 d5 fe ff       	call   f01077fe <kmalloc>
f011a2be:	83 c4 10             	add    $0x10,%esp
f011a2c1:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a2c7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a2cd:	89 c1                	mov    %eax,%ecx
f011a2cf:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a2d6:	10 00 00 
f011a2d9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a2df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a2e4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a2ea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a2f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2f5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a2fb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a301:	29 d0                	sub    %edx,%eax
f011a303:	89 c3                	mov    %eax,%ebx
f011a305:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a30c:	10 00 00 
f011a30f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a314:	0f b6 d0             	movzbl %al,%edx
f011a317:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a31d:	01 d0                	add    %edx,%eax
f011a31f:	48                   	dec    %eax
f011a320:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a326:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a32c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a331:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a337:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a33d:	29 d0                	sub    %edx,%eax
f011a33f:	01 c3                	add    %eax,%ebx
f011a341:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a348:	10 00 00 
f011a34b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a350:	0f b6 c0             	movzbl %al,%eax
f011a353:	c1 e0 04             	shl    $0x4,%eax
f011a356:	89 c2                	mov    %eax,%edx
f011a358:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a35e:	01 d0                	add    %edx,%eax
f011a360:	48                   	dec    %eax
f011a361:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a367:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a36d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a372:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a378:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a37e:	29 d0                	sub    %edx,%eax
f011a380:	01 d8                	add    %ebx,%eax
f011a382:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a387:	39 c1                	cmp    %eax,%ecx
f011a389:	74 17                	je     f011a3a2 <test_kmalloc_bestfit1+0x968>
f011a38b:	83 ec 04             	sub    $0x4,%esp
f011a38e:	68 74 b0 13 f0       	push   $0xf013b074
f011a393:	68 d0 01 00 00       	push   $0x1d0
f011a398:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a39d:	e8 59 5e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3a2:	e8 95 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a3a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a3aa:	74 17                	je     f011a3c3 <test_kmalloc_bestfit1+0x989>
f011a3ac:	83 ec 04             	sub    $0x4,%esp
f011a3af:	68 74 ac 13 f0       	push   $0xf013ac74
f011a3b4:	68 d1 01 00 00       	push   $0x1d1
f011a3b9:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a3be:	e8 38 5e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a3c3:	e8 01 25 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a3c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a3cb:	29 c2                	sub    %eax,%edx
f011a3cd:	89 d0                	mov    %edx,%eax
f011a3cf:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a3d4:	74 17                	je     f011a3ed <test_kmalloc_bestfit1+0x9b3>
f011a3d6:	83 ec 04             	sub    $0x4,%esp
f011a3d9:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a3de:	68 d2 01 00 00       	push   $0x1d2
f011a3e3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a3e8:	e8 0e 5e fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a3ed:	e8 d7 24 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a3f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3f5:	e8 42 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a3fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a3fd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a403:	83 ec 0c             	sub    $0xc,%esp
f011a406:	50                   	push   %eax
f011a407:	e8 b4 d4 fe ff       	call   f01078c0 <kfree>
f011a40c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a40f:	e8 28 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a414:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a417:	74 17                	je     f011a430 <test_kmalloc_bestfit1+0x9f6>
f011a419:	83 ec 04             	sub    $0x4,%esp
f011a41c:	68 74 ac 13 f0       	push   $0xf013ac74
f011a421:	68 db 01 00 00       	push   $0x1db
f011a426:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a42b:	e8 cb 5d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a430:	e8 94 24 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a435:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a438:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a43d:	74 17                	je     f011a456 <test_kmalloc_bestfit1+0xa1c>
f011a43f:	83 ec 04             	sub    $0x4,%esp
f011a442:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011a447:	68 dc 01 00 00       	push   $0x1dc
f011a44c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a451:	e8 a5 5d fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a456:	e8 6e 24 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a45b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a45e:	e8 d9 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a463:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a466:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a46c:	83 ec 0c             	sub    $0xc,%esp
f011a46f:	50                   	push   %eax
f011a470:	e8 4b d4 fe ff       	call   f01078c0 <kfree>
f011a475:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a478:	e8 bf 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a47d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a480:	74 17                	je     f011a499 <test_kmalloc_bestfit1+0xa5f>
f011a482:	83 ec 04             	sub    $0x4,%esp
f011a485:	68 74 ac 13 f0       	push   $0xf013ac74
f011a48a:	68 e2 01 00 00       	push   $0x1e2
f011a48f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a494:	e8 62 5d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a499:	e8 2b 24 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a49e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a4a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a4a6:	74 17                	je     f011a4bf <test_kmalloc_bestfit1+0xa85>
f011a4a8:	83 ec 04             	sub    $0x4,%esp
f011a4ab:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011a4b0:	68 e3 01 00 00       	push   $0x1e3
f011a4b5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a4ba:	e8 3c 5d fe ff       	call   f01001fb <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a4bf:	e8 05 24 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a4c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4c7:	e8 70 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a4cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a4cf:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a4d5:	83 ec 0c             	sub    $0xc,%esp
f011a4d8:	50                   	push   %eax
f011a4d9:	e8 e2 d3 fe ff       	call   f01078c0 <kfree>
f011a4de:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4e1:	e8 56 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a4e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4e9:	74 17                	je     f011a502 <test_kmalloc_bestfit1+0xac8>
f011a4eb:	83 ec 04             	sub    $0x4,%esp
f011a4ee:	68 74 ac 13 f0       	push   $0xf013ac74
f011a4f3:	68 e9 01 00 00       	push   $0x1e9
f011a4f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a4fd:	e8 f9 5c fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a502:	e8 c2 23 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a507:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a50a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a50f:	74 17                	je     f011a528 <test_kmalloc_bestfit1+0xaee>
f011a511:	83 ec 04             	sub    $0x4,%esp
f011a514:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011a519:	68 ea 01 00 00       	push   $0x1ea
f011a51e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a523:	e8 d3 5c fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a528:	e8 9c 23 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a52d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a530:	e8 07 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a535:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a538:	83 ec 0c             	sub    $0xc,%esp
f011a53b:	68 00 00 08 00       	push   $0x80000
f011a540:	e8 b9 d2 fe ff       	call   f01077fe <kmalloc>
f011a545:	83 c4 10             	add    $0x10,%esp
f011a548:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a54e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a554:	89 c1                	mov    %eax,%ecx
f011a556:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a55d:	10 00 00 
f011a560:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a566:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a56b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a571:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a577:	ba 00 00 00 00       	mov    $0x0,%edx
f011a57c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a582:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a588:	29 d0                	sub    %edx,%eax
f011a58a:	89 c3                	mov    %eax,%ebx
f011a58c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a593:	10 00 00 
f011a596:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a59b:	0f b6 d0             	movzbl %al,%edx
f011a59e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a5a4:	01 d0                	add    %edx,%eax
f011a5a6:	48                   	dec    %eax
f011a5a7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a5ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a5b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5b8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a5be:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a5c4:	29 d0                	sub    %edx,%eax
f011a5c6:	01 c3                	add    %eax,%ebx
f011a5c8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a5cf:	10 00 00 
f011a5d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a5d7:	0f b6 c0             	movzbl %al,%eax
f011a5da:	c1 e0 04             	shl    $0x4,%eax
f011a5dd:	89 c2                	mov    %eax,%edx
f011a5df:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a5e5:	01 d0                	add    %edx,%eax
f011a5e7:	48                   	dec    %eax
f011a5e8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a5ee:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a5f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5f9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a5ff:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a605:	29 d0                	sub    %edx,%eax
f011a607:	01 d8                	add    %ebx,%eax
f011a609:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a60e:	39 c1                	cmp    %eax,%ecx
f011a610:	74 17                	je     f011a629 <test_kmalloc_bestfit1+0xbef>
f011a612:	83 ec 04             	sub    $0x4,%esp
f011a615:	68 74 b0 13 f0       	push   $0xf013b074
f011a61a:	68 f3 01 00 00       	push   $0x1f3
f011a61f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a624:	e8 d2 5b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a629:	e8 0e 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a62e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a631:	74 17                	je     f011a64a <test_kmalloc_bestfit1+0xc10>
f011a633:	83 ec 04             	sub    $0x4,%esp
f011a636:	68 74 ac 13 f0       	push   $0xf013ac74
f011a63b:	68 f4 01 00 00       	push   $0x1f4
f011a640:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a645:	e8 b1 5b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a64a:	e8 7a 22 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a64f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a652:	29 c2                	sub    %eax,%edx
f011a654:	89 d0                	mov    %edx,%eax
f011a656:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a65b:	74 17                	je     f011a674 <test_kmalloc_bestfit1+0xc3a>
f011a65d:	83 ec 04             	sub    $0x4,%esp
f011a660:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a665:	68 f5 01 00 00       	push   $0x1f5
f011a66a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a66f:	e8 87 5b fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a674:	e8 50 22 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a679:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a67c:	e8 bb 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a681:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a684:	83 ec 0c             	sub    $0xc,%esp
f011a687:	68 00 fc 0f 00       	push   $0xffc00
f011a68c:	e8 6d d1 fe ff       	call   f01077fe <kmalloc>
f011a691:	83 c4 10             	add    $0x10,%esp
f011a694:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a69a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a6a0:	89 c1                	mov    %eax,%ecx
f011a6a2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a6a9:	10 00 00 
f011a6ac:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a6b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6b7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a6bd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a6c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6c8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a6ce:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a6d4:	29 d0                	sub    %edx,%eax
f011a6d6:	89 c3                	mov    %eax,%ebx
f011a6d8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a6df:	10 00 00 
f011a6e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a6e7:	0f b6 d0             	movzbl %al,%edx
f011a6ea:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a6f0:	01 d0                	add    %edx,%eax
f011a6f2:	48                   	dec    %eax
f011a6f3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a6f9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a6ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011a704:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a70a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a710:	29 d0                	sub    %edx,%eax
f011a712:	01 c3                	add    %eax,%ebx
f011a714:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a71b:	10 00 00 
f011a71e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a723:	0f b6 c0             	movzbl %al,%eax
f011a726:	c1 e0 04             	shl    $0x4,%eax
f011a729:	89 c2                	mov    %eax,%edx
f011a72b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a731:	01 d0                	add    %edx,%eax
f011a733:	48                   	dec    %eax
f011a734:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a73a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a740:	ba 00 00 00 00       	mov    $0x0,%edx
f011a745:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a74b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a751:	29 d0                	sub    %edx,%eax
f011a753:	01 d8                	add    %ebx,%eax
f011a755:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a75a:	39 c1                	cmp    %eax,%ecx
f011a75c:	74 17                	je     f011a775 <test_kmalloc_bestfit1+0xd3b>
f011a75e:	83 ec 04             	sub    $0x4,%esp
f011a761:	68 74 b0 13 f0       	push   $0xf013b074
f011a766:	68 fb 01 00 00       	push   $0x1fb
f011a76b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a770:	e8 86 5a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a775:	e8 c2 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a77a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a77d:	74 17                	je     f011a796 <test_kmalloc_bestfit1+0xd5c>
f011a77f:	83 ec 04             	sub    $0x4,%esp
f011a782:	68 74 ac 13 f0       	push   $0xf013ac74
f011a787:	68 fc 01 00 00       	push   $0x1fc
f011a78c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a791:	e8 65 5a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a796:	e8 2e 21 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a79b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a79e:	29 c2                	sub    %eax,%edx
f011a7a0:	89 d0                	mov    %edx,%eax
f011a7a2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a7a7:	74 17                	je     f011a7c0 <test_kmalloc_bestfit1+0xd86>
f011a7a9:	83 ec 04             	sub    $0x4,%esp
f011a7ac:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a7b1:	68 fd 01 00 00       	push   $0x1fd
f011a7b6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a7bb:	e8 3b 5a fe ff       	call   f01001fb <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a7c0:	e8 04 21 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a7c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7c8:	e8 6f 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a7cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a7d0:	83 ec 0c             	sub    $0xc,%esp
f011a7d3:	68 00 fc 03 00       	push   $0x3fc00
f011a7d8:	e8 21 d0 fe ff       	call   f01077fe <kmalloc>
f011a7dd:	83 c4 10             	add    $0x10,%esp
f011a7e0:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a7e6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a7ec:	89 c1                	mov    %eax,%ecx
f011a7ee:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a7f5:	10 00 00 
f011a7f8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a7fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a803:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a809:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a80f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a814:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a81a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a820:	29 d0                	sub    %edx,%eax
f011a822:	89 c3                	mov    %eax,%ebx
f011a824:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a82b:	10 00 00 
f011a82e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a833:	0f b6 d0             	movzbl %al,%edx
f011a836:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a83c:	01 d0                	add    %edx,%eax
f011a83e:	48                   	dec    %eax
f011a83f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a845:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a84b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a850:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a856:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a85c:	29 d0                	sub    %edx,%eax
f011a85e:	01 c3                	add    %eax,%ebx
f011a860:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a867:	10 00 00 
f011a86a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a86f:	0f b6 c0             	movzbl %al,%eax
f011a872:	c1 e0 04             	shl    $0x4,%eax
f011a875:	89 c2                	mov    %eax,%edx
f011a877:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a87d:	01 d0                	add    %edx,%eax
f011a87f:	48                   	dec    %eax
f011a880:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a886:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a88c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a891:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a897:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a89d:	29 d0                	sub    %edx,%eax
f011a89f:	01 d8                	add    %ebx,%eax
f011a8a1:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a8a6:	39 c1                	cmp    %eax,%ecx
f011a8a8:	74 17                	je     f011a8c1 <test_kmalloc_bestfit1+0xe87>
f011a8aa:	83 ec 04             	sub    $0x4,%esp
f011a8ad:	68 74 b0 13 f0       	push   $0xf013b074
f011a8b2:	68 03 02 00 00       	push   $0x203
f011a8b7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a8bc:	e8 3a 59 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8c1:	e8 76 94 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a8c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8c9:	74 17                	je     f011a8e2 <test_kmalloc_bestfit1+0xea8>
f011a8cb:	83 ec 04             	sub    $0x4,%esp
f011a8ce:	68 74 ac 13 f0       	push   $0xf013ac74
f011a8d3:	68 04 02 00 00       	push   $0x204
f011a8d8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a8dd:	e8 19 59 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a8e2:	e8 e2 1f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a8e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8ea:	29 c2                	sub    %eax,%edx
f011a8ec:	89 d0                	mov    %edx,%eax
f011a8ee:	83 f8 40             	cmp    $0x40,%eax
f011a8f1:	74 17                	je     f011a90a <test_kmalloc_bestfit1+0xed0>
f011a8f3:	83 ec 04             	sub    $0x4,%esp
f011a8f6:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a8fb:	68 05 02 00 00       	push   $0x205
f011a900:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a905:	e8 f1 58 fe ff       	call   f01001fb <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a90a:	e8 ba 1f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011a90f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a912:	e8 25 94 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a917:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a91a:	83 ec 0c             	sub    $0xc,%esp
f011a91d:	68 00 fc 3f 00       	push   $0x3ffc00
f011a922:	e8 d7 ce fe ff       	call   f01077fe <kmalloc>
f011a927:	83 c4 10             	add    $0x10,%esp
f011a92a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a930:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a936:	89 c1                	mov    %eax,%ecx
f011a938:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a93f:	10 00 00 
f011a942:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a948:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a94d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a953:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a959:	ba 00 00 00 00       	mov    $0x0,%edx
f011a95e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a964:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a96a:	29 d0                	sub    %edx,%eax
f011a96c:	89 c3                	mov    %eax,%ebx
f011a96e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a975:	10 00 00 
f011a978:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a97d:	0f b6 d0             	movzbl %al,%edx
f011a980:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a986:	01 d0                	add    %edx,%eax
f011a988:	48                   	dec    %eax
f011a989:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a98f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a995:	ba 00 00 00 00       	mov    $0x0,%edx
f011a99a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a9a0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a9a6:	29 d0                	sub    %edx,%eax
f011a9a8:	01 c3                	add    %eax,%ebx
f011a9aa:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a9b1:	10 00 00 
f011a9b4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a9b9:	0f b6 c0             	movzbl %al,%eax
f011a9bc:	c1 e0 04             	shl    $0x4,%eax
f011a9bf:	89 c2                	mov    %eax,%edx
f011a9c1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a9c7:	01 d0                	add    %edx,%eax
f011a9c9:	48                   	dec    %eax
f011a9ca:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a9d0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a9d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9db:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a9e1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a9e7:	29 d0                	sub    %edx,%eax
f011a9e9:	01 d8                	add    %ebx,%eax
f011a9eb:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a9f0:	39 c1                	cmp    %eax,%ecx
f011a9f2:	74 17                	je     f011aa0b <test_kmalloc_bestfit1+0xfd1>
f011a9f4:	83 ec 04             	sub    $0x4,%esp
f011a9f7:	68 74 b0 13 f0       	push   $0xf013b074
f011a9fc:	68 0b 02 00 00       	push   $0x20b
f011aa01:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa06:	e8 f0 57 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa0b:	e8 2c 93 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa10:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa13:	74 17                	je     f011aa2c <test_kmalloc_bestfit1+0xff2>
f011aa15:	83 ec 04             	sub    $0x4,%esp
f011aa18:	68 74 ac 13 f0       	push   $0xf013ac74
f011aa1d:	68 0c 02 00 00       	push   $0x20c
f011aa22:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa27:	e8 cf 57 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011aa2c:	e8 98 1e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011aa31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa34:	29 c2                	sub    %eax,%edx
f011aa36:	89 d0                	mov    %edx,%eax
f011aa38:	3d 00 04 00 00       	cmp    $0x400,%eax
f011aa3d:	74 17                	je     f011aa56 <test_kmalloc_bestfit1+0x101c>
f011aa3f:	83 ec 04             	sub    $0x4,%esp
f011aa42:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011aa47:	68 0d 02 00 00       	push   $0x20d
f011aa4c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa51:	e8 a5 57 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011aa56:	e8 6e 1e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011aa5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa5e:	e8 d9 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa63:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011aa66:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011aa6c:	83 ec 0c             	sub    $0xc,%esp
f011aa6f:	50                   	push   %eax
f011aa70:	e8 4b ce fe ff       	call   f01078c0 <kfree>
f011aa75:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa78:	e8 bf 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa80:	74 17                	je     f011aa99 <test_kmalloc_bestfit1+0x105f>
f011aa82:	83 ec 04             	sub    $0x4,%esp
f011aa85:	68 74 ac 13 f0       	push   $0xf013ac74
f011aa8a:	68 16 02 00 00       	push   $0x216
f011aa8f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa94:	e8 62 57 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aa99:	e8 2b 1e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011aa9e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aaa1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aaa6:	74 17                	je     f011aabf <test_kmalloc_bestfit1+0x1085>
f011aaa8:	83 ec 04             	sub    $0x4,%esp
f011aaab:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011aab0:	68 17 02 00 00       	push   $0x217
f011aab5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aaba:	e8 3c 57 fe ff       	call   f01001fb <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011aabf:	e8 05 1e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011aac4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aac7:	e8 70 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aacc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011aacf:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011aad5:	83 ec 0c             	sub    $0xc,%esp
f011aad8:	50                   	push   %eax
f011aad9:	e8 e2 cd fe ff       	call   f01078c0 <kfree>
f011aade:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aae1:	e8 56 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aae6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aae9:	74 17                	je     f011ab02 <test_kmalloc_bestfit1+0x10c8>
f011aaeb:	83 ec 04             	sub    $0x4,%esp
f011aaee:	68 74 ac 13 f0       	push   $0xf013ac74
f011aaf3:	68 1d 02 00 00       	push   $0x21d
f011aaf8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aafd:	e8 f9 56 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011ab02:	e8 c2 1d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ab07:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab0a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ab0f:	74 17                	je     f011ab28 <test_kmalloc_bestfit1+0x10ee>
f011ab11:	83 ec 04             	sub    $0x4,%esp
f011ab14:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011ab19:	68 1e 02 00 00       	push   $0x21e
f011ab1e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ab23:	e8 d3 56 fe ff       	call   f01001fb <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011ab28:	e8 9c 1d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ab2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab30:	e8 07 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ab35:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011ab38:	83 ec 0c             	sub    $0xc,%esp
f011ab3b:	68 00 fc 1f 00       	push   $0x1ffc00
f011ab40:	e8 b9 cc fe ff       	call   f01077fe <kmalloc>
f011ab45:	83 c4 10             	add    $0x10,%esp
f011ab48:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011ab4e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ab54:	89 c1                	mov    %eax,%ecx
f011ab56:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ab5d:	10 00 00 
f011ab60:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ab66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab6b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ab71:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ab77:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab7c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ab82:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ab88:	29 d0                	sub    %edx,%eax
f011ab8a:	89 c3                	mov    %eax,%ebx
f011ab8c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ab93:	10 00 00 
f011ab96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ab9b:	0f b6 d0             	movzbl %al,%edx
f011ab9e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011aba4:	01 d0                	add    %edx,%eax
f011aba6:	48                   	dec    %eax
f011aba7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011abad:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011abb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011abb8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011abbe:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011abc4:	29 d0                	sub    %edx,%eax
f011abc6:	01 c3                	add    %eax,%ebx
f011abc8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011abcf:	10 00 00 
f011abd2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011abd7:	0f b6 c0             	movzbl %al,%eax
f011abda:	c1 e0 04             	shl    $0x4,%eax
f011abdd:	89 c2                	mov    %eax,%edx
f011abdf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011abe5:	01 d0                	add    %edx,%eax
f011abe7:	48                   	dec    %eax
f011abe8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011abee:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011abf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011abf9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011abff:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ac05:	29 d0                	sub    %edx,%eax
f011ac07:	01 d8                	add    %ebx,%eax
f011ac09:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011ac0e:	39 c1                	cmp    %eax,%ecx
f011ac10:	74 17                	je     f011ac29 <test_kmalloc_bestfit1+0x11ef>
f011ac12:	83 ec 04             	sub    $0x4,%esp
f011ac15:	68 74 b0 13 f0       	push   $0xf013b074
f011ac1a:	68 27 02 00 00       	push   $0x227
f011ac1f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ac24:	e8 d2 55 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac29:	e8 0e 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ac2e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac31:	74 17                	je     f011ac4a <test_kmalloc_bestfit1+0x1210>
f011ac33:	83 ec 04             	sub    $0x4,%esp
f011ac36:	68 74 ac 13 f0       	push   $0xf013ac74
f011ac3b:	68 28 02 00 00       	push   $0x228
f011ac40:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ac45:	e8 b1 55 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ac4a:	e8 7a 1c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ac4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac52:	29 c2                	sub    %eax,%edx
f011ac54:	89 d0                	mov    %edx,%eax
f011ac56:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ac5b:	74 17                	je     f011ac74 <test_kmalloc_bestfit1+0x123a>
f011ac5d:	83 ec 04             	sub    $0x4,%esp
f011ac60:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ac65:	68 29 02 00 00       	push   $0x229
f011ac6a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ac6f:	e8 87 55 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011ac74:	83 ec 0c             	sub    $0xc,%esp
f011ac77:	68 c4 b0 13 f0       	push   $0xf013b0c4
f011ac7c:	e8 01 60 fe ff       	call   f0100c82 <cprintf>
f011ac81:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ac84:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ac89:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ac8c:	5b                   	pop    %ebx
f011ac8d:	5f                   	pop    %edi
f011ac8e:	5d                   	pop    %ebp
f011ac8f:	c3                   	ret    

f011ac90 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ac90:	55                   	push   %ebp
f011ac91:	89 e5                	mov    %esp,%ebp
f011ac93:	57                   	push   %edi
f011ac94:	53                   	push   %ebx
f011ac95:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ac9b:	83 ec 0c             	sub    $0xc,%esp
f011ac9e:	68 9c ab 13 f0       	push   $0xf013ab9c
f011aca3:	e8 da 5f fe ff       	call   f0100c82 <cprintf>
f011aca8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011acab:	83 ec 0c             	sub    $0xc,%esp
f011acae:	68 cc ab 13 f0       	push   $0xf013abcc
f011acb3:	e8 ca 5f fe ff       	call   f0100c82 <cprintf>
f011acb8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011acbb:	83 ec 0c             	sub    $0xc,%esp
f011acbe:	68 9c ab 13 f0       	push   $0xf013ab9c
f011acc3:	e8 ba 5f fe ff       	call   f0100c82 <cprintf>
f011acc8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011accb:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011acd1:	b9 14 00 00 00       	mov    $0x14,%ecx
f011acd6:	b8 00 00 00 00       	mov    $0x0,%eax
f011acdb:	89 d7                	mov    %edx,%edi
f011acdd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011acdf:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011ace6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ace9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011acee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011acf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011acf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011acf9:	f7 75 f4             	divl   -0xc(%ebp)
f011acfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011acff:	29 d0                	sub    %edx,%eax
f011ad01:	89 c1                	mov    %eax,%ecx
f011ad03:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ad0a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ad0f:	0f b6 d0             	movzbl %al,%edx
f011ad12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ad15:	01 d0                	add    %edx,%eax
f011ad17:	48                   	dec    %eax
f011ad18:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ad1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ad1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad23:	f7 75 ec             	divl   -0x14(%ebp)
f011ad26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ad29:	29 d0                	sub    %edx,%eax
f011ad2b:	01 c1                	add    %eax,%ecx
f011ad2d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ad34:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ad39:	0f b6 c0             	movzbl %al,%eax
f011ad3c:	c1 e0 04             	shl    $0x4,%eax
f011ad3f:	89 c2                	mov    %eax,%edx
f011ad41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ad44:	01 d0                	add    %edx,%eax
f011ad46:	48                   	dec    %eax
f011ad47:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ad4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ad4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad52:	f7 75 e4             	divl   -0x1c(%ebp)
f011ad55:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ad58:	29 d0                	sub    %edx,%eax
f011ad5a:	01 c8                	add    %ecx,%eax
f011ad5c:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ad61:	29 c2                	sub    %eax,%edx
f011ad63:	89 d0                	mov    %edx,%eax
f011ad65:	83 ec 0c             	sub    $0xc,%esp
f011ad68:	50                   	push   %eax
f011ad69:	e8 90 ca fe ff       	call   f01077fe <kmalloc>
f011ad6e:	83 c4 10             	add    $0x10,%esp
f011ad71:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ad77:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ad7d:	85 c0                	test   %eax,%eax
f011ad7f:	74 17                	je     f011ad98 <test_kmalloc_bestfit2+0x108>
f011ad81:	83 ec 04             	sub    $0x4,%esp
f011ad84:	68 0c b1 13 f0       	push   $0xf013b10c
f011ad89:	68 3f 02 00 00       	push   $0x23f
f011ad8e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ad93:	e8 63 54 fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad98:	e8 2c 1b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ad9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ada0:	e8 97 8f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ada5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ada8:	83 ec 0c             	sub    $0xc,%esp
f011adab:	68 00 fc 1f 00       	push   $0x1ffc00
f011adb0:	e8 49 ca fe ff       	call   f01077fe <kmalloc>
f011adb5:	83 c4 10             	add    $0x10,%esp
f011adb8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011adbe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011adc4:	89 c1                	mov    %eax,%ecx
f011adc6:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011adcd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011add0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011add5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011add8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011addb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ade0:	f7 75 d4             	divl   -0x2c(%ebp)
f011ade3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ade6:	29 d0                	sub    %edx,%eax
f011ade8:	89 c3                	mov    %eax,%ebx
f011adea:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011adf1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011adf6:	0f b6 d0             	movzbl %al,%edx
f011adf9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011adfc:	01 d0                	add    %edx,%eax
f011adfe:	48                   	dec    %eax
f011adff:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011ae02:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ae05:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae0a:	f7 75 cc             	divl   -0x34(%ebp)
f011ae0d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ae10:	29 d0                	sub    %edx,%eax
f011ae12:	01 c3                	add    %eax,%ebx
f011ae14:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ae1b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ae20:	0f b6 c0             	movzbl %al,%eax
f011ae23:	c1 e0 04             	shl    $0x4,%eax
f011ae26:	89 c2                	mov    %eax,%edx
f011ae28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ae2b:	01 d0                	add    %edx,%eax
f011ae2d:	48                   	dec    %eax
f011ae2e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ae31:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ae34:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae39:	f7 75 c4             	divl   -0x3c(%ebp)
f011ae3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ae3f:	29 d0                	sub    %edx,%eax
f011ae41:	01 d8                	add    %ebx,%eax
f011ae43:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ae48:	39 c1                	cmp    %eax,%ecx
f011ae4a:	74 17                	je     f011ae63 <test_kmalloc_bestfit2+0x1d3>
f011ae4c:	83 ec 04             	sub    $0x4,%esp
f011ae4f:	68 74 b0 13 f0       	push   $0xf013b074
f011ae54:	68 49 02 00 00       	push   $0x249
f011ae59:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ae5e:	e8 98 53 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae63:	e8 d4 8e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ae68:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ae6b:	74 17                	je     f011ae84 <test_kmalloc_bestfit2+0x1f4>
f011ae6d:	83 ec 04             	sub    $0x4,%esp
f011ae70:	68 74 ac 13 f0       	push   $0xf013ac74
f011ae75:	68 4a 02 00 00       	push   $0x24a
f011ae7a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ae7f:	e8 77 53 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011ae84:	e8 40 1a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ae89:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ae8c:	29 c2                	sub    %eax,%edx
f011ae8e:	89 d0                	mov    %edx,%eax
f011ae90:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae95:	74 17                	je     f011aeae <test_kmalloc_bestfit2+0x21e>
f011ae97:	83 ec 04             	sub    $0x4,%esp
f011ae9a:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ae9f:	68 4b 02 00 00       	push   $0x24b
f011aea4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aea9:	e8 4d 53 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aeae:	e8 16 1a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011aeb3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aeb6:	e8 81 8e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aebb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011aebe:	83 ec 0c             	sub    $0xc,%esp
f011aec1:	68 00 fc 1f 00       	push   $0x1ffc00
f011aec6:	e8 33 c9 fe ff       	call   f01077fe <kmalloc>
f011aecb:	83 c4 10             	add    $0x10,%esp
f011aece:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011aed4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011aeda:	89 c1                	mov    %eax,%ecx
f011aedc:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aee3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aee6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aeeb:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aeee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aef1:	ba 00 00 00 00       	mov    $0x0,%edx
f011aef6:	f7 75 bc             	divl   -0x44(%ebp)
f011aef9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aefc:	29 d0                	sub    %edx,%eax
f011aefe:	89 c3                	mov    %eax,%ebx
f011af00:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011af07:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011af0c:	0f b6 d0             	movzbl %al,%edx
f011af0f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011af12:	01 d0                	add    %edx,%eax
f011af14:	48                   	dec    %eax
f011af15:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011af18:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011af1b:	ba 00 00 00 00       	mov    $0x0,%edx
f011af20:	f7 75 b4             	divl   -0x4c(%ebp)
f011af23:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011af26:	29 d0                	sub    %edx,%eax
f011af28:	01 c3                	add    %eax,%ebx
f011af2a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011af31:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011af36:	0f b6 c0             	movzbl %al,%eax
f011af39:	c1 e0 04             	shl    $0x4,%eax
f011af3c:	89 c2                	mov    %eax,%edx
f011af3e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011af41:	01 d0                	add    %edx,%eax
f011af43:	48                   	dec    %eax
f011af44:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011af47:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011af4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011af4f:	f7 75 ac             	divl   -0x54(%ebp)
f011af52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011af55:	29 d0                	sub    %edx,%eax
f011af57:	01 d8                	add    %ebx,%eax
f011af59:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011af5e:	39 c1                	cmp    %eax,%ecx
f011af60:	74 17                	je     f011af79 <test_kmalloc_bestfit2+0x2e9>
f011af62:	83 ec 04             	sub    $0x4,%esp
f011af65:	68 74 b0 13 f0       	push   $0xf013b074
f011af6a:	68 51 02 00 00       	push   $0x251
f011af6f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011af74:	e8 82 52 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af79:	e8 be 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011af7e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af81:	74 17                	je     f011af9a <test_kmalloc_bestfit2+0x30a>
f011af83:	83 ec 04             	sub    $0x4,%esp
f011af86:	68 74 ac 13 f0       	push   $0xf013ac74
f011af8b:	68 52 02 00 00       	push   $0x252
f011af90:	68 5a ac 13 f0       	push   $0xf013ac5a
f011af95:	e8 61 52 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011af9a:	e8 2a 19 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011af9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011afa2:	29 c2                	sub    %eax,%edx
f011afa4:	89 d0                	mov    %edx,%eax
f011afa6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011afab:	74 17                	je     f011afc4 <test_kmalloc_bestfit2+0x334>
f011afad:	83 ec 04             	sub    $0x4,%esp
f011afb0:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011afb5:	68 53 02 00 00       	push   $0x253
f011afba:	68 5a ac 13 f0       	push   $0xf013ac5a
f011afbf:	e8 37 52 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011afc4:	e8 00 19 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011afc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011afcc:	e8 6b 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011afd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011afd4:	83 ec 0c             	sub    $0xc,%esp
f011afd7:	68 00 08 00 00       	push   $0x800
f011afdc:	e8 1d c8 fe ff       	call   f01077fe <kmalloc>
f011afe1:	83 c4 10             	add    $0x10,%esp
f011afe4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011afea:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011aff0:	89 c1                	mov    %eax,%ecx
f011aff2:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011aff9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011affc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b001:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b004:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b007:	ba 00 00 00 00       	mov    $0x0,%edx
f011b00c:	f7 75 a4             	divl   -0x5c(%ebp)
f011b00f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b012:	29 d0                	sub    %edx,%eax
f011b014:	89 c3                	mov    %eax,%ebx
f011b016:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b01d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b022:	0f b6 d0             	movzbl %al,%edx
f011b025:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b028:	01 d0                	add    %edx,%eax
f011b02a:	48                   	dec    %eax
f011b02b:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b02e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b031:	ba 00 00 00 00       	mov    $0x0,%edx
f011b036:	f7 75 9c             	divl   -0x64(%ebp)
f011b039:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b03c:	29 d0                	sub    %edx,%eax
f011b03e:	01 c3                	add    %eax,%ebx
f011b040:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b047:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b04c:	0f b6 c0             	movzbl %al,%eax
f011b04f:	c1 e0 04             	shl    $0x4,%eax
f011b052:	89 c2                	mov    %eax,%edx
f011b054:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b057:	01 d0                	add    %edx,%eax
f011b059:	48                   	dec    %eax
f011b05a:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b05d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b060:	ba 00 00 00 00       	mov    $0x0,%edx
f011b065:	f7 75 94             	divl   -0x6c(%ebp)
f011b068:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b06b:	29 d0                	sub    %edx,%eax
f011b06d:	01 d8                	add    %ebx,%eax
f011b06f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b074:	39 c1                	cmp    %eax,%ecx
f011b076:	74 17                	je     f011b08f <test_kmalloc_bestfit2+0x3ff>
f011b078:	83 ec 04             	sub    $0x4,%esp
f011b07b:	68 74 b0 13 f0       	push   $0xf013b074
f011b080:	68 59 02 00 00       	push   $0x259
f011b085:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b08a:	e8 6c 51 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b08f:	e8 a8 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b094:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b097:	74 17                	je     f011b0b0 <test_kmalloc_bestfit2+0x420>
f011b099:	83 ec 04             	sub    $0x4,%esp
f011b09c:	68 74 ac 13 f0       	push   $0xf013ac74
f011b0a1:	68 5a 02 00 00       	push   $0x25a
f011b0a6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b0ab:	e8 4b 51 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b0b0:	e8 14 18 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b0b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b0b8:	29 c2                	sub    %eax,%edx
f011b0ba:	89 d0                	mov    %edx,%eax
f011b0bc:	83 f8 01             	cmp    $0x1,%eax
f011b0bf:	74 17                	je     f011b0d8 <test_kmalloc_bestfit2+0x448>
f011b0c1:	83 ec 04             	sub    $0x4,%esp
f011b0c4:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b0c9:	68 5b 02 00 00       	push   $0x25b
f011b0ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b0d3:	e8 23 51 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b0d8:	e8 ec 17 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b0dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b0e0:	e8 57 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b0e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b0e8:	83 ec 0c             	sub    $0xc,%esp
f011b0eb:	68 00 08 00 00       	push   $0x800
f011b0f0:	e8 09 c7 fe ff       	call   f01077fe <kmalloc>
f011b0f5:	83 c4 10             	add    $0x10,%esp
f011b0f8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b0fe:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b104:	89 c1                	mov    %eax,%ecx
f011b106:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b10d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b110:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b115:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b118:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b11b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b120:	f7 75 8c             	divl   -0x74(%ebp)
f011b123:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b126:	29 d0                	sub    %edx,%eax
f011b128:	89 c3                	mov    %eax,%ebx
f011b12a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b131:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b136:	0f b6 d0             	movzbl %al,%edx
f011b139:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b13c:	01 d0                	add    %edx,%eax
f011b13e:	48                   	dec    %eax
f011b13f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b142:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b145:	ba 00 00 00 00       	mov    $0x0,%edx
f011b14a:	f7 75 84             	divl   -0x7c(%ebp)
f011b14d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b150:	29 d0                	sub    %edx,%eax
f011b152:	01 c3                	add    %eax,%ebx
f011b154:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b15b:	10 00 00 
f011b15e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b163:	0f b6 c0             	movzbl %al,%eax
f011b166:	c1 e0 04             	shl    $0x4,%eax
f011b169:	89 c2                	mov    %eax,%edx
f011b16b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b171:	01 d0                	add    %edx,%eax
f011b173:	48                   	dec    %eax
f011b174:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b17a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b180:	ba 00 00 00 00       	mov    $0x0,%edx
f011b185:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b18b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b191:	29 d0                	sub    %edx,%eax
f011b193:	01 d8                	add    %ebx,%eax
f011b195:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b19a:	39 c1                	cmp    %eax,%ecx
f011b19c:	74 17                	je     f011b1b5 <test_kmalloc_bestfit2+0x525>
f011b19e:	83 ec 04             	sub    $0x4,%esp
f011b1a1:	68 74 b0 13 f0       	push   $0xf013b074
f011b1a6:	68 61 02 00 00       	push   $0x261
f011b1ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b1b0:	e8 46 50 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1b5:	e8 82 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b1ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b1bd:	74 17                	je     f011b1d6 <test_kmalloc_bestfit2+0x546>
f011b1bf:	83 ec 04             	sub    $0x4,%esp
f011b1c2:	68 74 ac 13 f0       	push   $0xf013ac74
f011b1c7:	68 62 02 00 00       	push   $0x262
f011b1cc:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b1d1:	e8 25 50 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b1d6:	e8 ee 16 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b1db:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b1de:	29 c2                	sub    %eax,%edx
f011b1e0:	89 d0                	mov    %edx,%eax
f011b1e2:	83 f8 01             	cmp    $0x1,%eax
f011b1e5:	74 17                	je     f011b1fe <test_kmalloc_bestfit2+0x56e>
f011b1e7:	83 ec 04             	sub    $0x4,%esp
f011b1ea:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b1ef:	68 63 02 00 00       	push   $0x263
f011b1f4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b1f9:	e8 fd 4f fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1fe:	e8 c6 16 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b203:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b206:	e8 31 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b20b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b20e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b214:	83 ec 0c             	sub    $0xc,%esp
f011b217:	50                   	push   %eax
f011b218:	e8 a3 c6 fe ff       	call   f01078c0 <kfree>
f011b21d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b220:	e8 17 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b225:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b228:	74 17                	je     f011b241 <test_kmalloc_bestfit2+0x5b1>
f011b22a:	83 ec 04             	sub    $0x4,%esp
f011b22d:	68 74 ac 13 f0       	push   $0xf013ac74
f011b232:	68 69 02 00 00       	push   $0x269
f011b237:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b23c:	e8 ba 4f fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b241:	e8 83 16 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b246:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b249:	83 f8 01             	cmp    $0x1,%eax
f011b24c:	74 17                	je     f011b265 <test_kmalloc_bestfit2+0x5d5>
f011b24e:	83 ec 04             	sub    $0x4,%esp
f011b251:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b256:	68 6a 02 00 00       	push   $0x26a
f011b25b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b260:	e8 96 4f fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b265:	e8 5f 16 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b26a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b26d:	e8 ca 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b272:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b275:	83 ec 0c             	sub    $0xc,%esp
f011b278:	68 00 1c 00 00       	push   $0x1c00
f011b27d:	e8 7c c5 fe ff       	call   f01077fe <kmalloc>
f011b282:	83 c4 10             	add    $0x10,%esp
f011b285:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b28b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b291:	89 c1                	mov    %eax,%ecx
f011b293:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b29a:	10 00 00 
f011b29d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b2a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b2a8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b2ae:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b2b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2b9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b2bf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b2c5:	29 d0                	sub    %edx,%eax
f011b2c7:	89 c3                	mov    %eax,%ebx
f011b2c9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b2d0:	10 00 00 
f011b2d3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b2d8:	0f b6 d0             	movzbl %al,%edx
f011b2db:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b2e1:	01 d0                	add    %edx,%eax
f011b2e3:	48                   	dec    %eax
f011b2e4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b2ea:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b2f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2f5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b2fb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b301:	29 d0                	sub    %edx,%eax
f011b303:	01 c3                	add    %eax,%ebx
f011b305:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b30c:	10 00 00 
f011b30f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b314:	0f b6 c0             	movzbl %al,%eax
f011b317:	c1 e0 04             	shl    $0x4,%eax
f011b31a:	89 c2                	mov    %eax,%edx
f011b31c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b322:	01 d0                	add    %edx,%eax
f011b324:	48                   	dec    %eax
f011b325:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b32b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b331:	ba 00 00 00 00       	mov    $0x0,%edx
f011b336:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b33c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b342:	29 d0                	sub    %edx,%eax
f011b344:	01 d8                	add    %ebx,%eax
f011b346:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b34b:	39 c1                	cmp    %eax,%ecx
f011b34d:	74 17                	je     f011b366 <test_kmalloc_bestfit2+0x6d6>
f011b34f:	83 ec 04             	sub    $0x4,%esp
f011b352:	68 74 b0 13 f0       	push   $0xf013b074
f011b357:	68 70 02 00 00       	push   $0x270
f011b35c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b361:	e8 95 4e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b366:	e8 d1 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b36b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b36e:	74 17                	je     f011b387 <test_kmalloc_bestfit2+0x6f7>
f011b370:	83 ec 04             	sub    $0x4,%esp
f011b373:	68 74 ac 13 f0       	push   $0xf013ac74
f011b378:	68 71 02 00 00       	push   $0x271
f011b37d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b382:	e8 74 4e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b387:	e8 3d 15 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b38c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b38f:	29 c2                	sub    %eax,%edx
f011b391:	89 d0                	mov    %edx,%eax
f011b393:	83 f8 02             	cmp    $0x2,%eax
f011b396:	74 17                	je     f011b3af <test_kmalloc_bestfit2+0x71f>
f011b398:	83 ec 04             	sub    $0x4,%esp
f011b39b:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b3a0:	68 72 02 00 00       	push   $0x272
f011b3a5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b3aa:	e8 4c 4e fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b3af:	e8 15 15 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b3b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3b7:	e8 80 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3bc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b3bf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b3c5:	83 ec 0c             	sub    $0xc,%esp
f011b3c8:	50                   	push   %eax
f011b3c9:	e8 f2 c4 fe ff       	call   f01078c0 <kfree>
f011b3ce:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3d1:	e8 66 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3d6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b3d9:	74 17                	je     f011b3f2 <test_kmalloc_bestfit2+0x762>
f011b3db:	83 ec 04             	sub    $0x4,%esp
f011b3de:	68 74 ac 13 f0       	push   $0xf013ac74
f011b3e3:	68 78 02 00 00       	push   $0x278
f011b3e8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b3ed:	e8 09 4e fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b3f2:	e8 d2 14 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b3f7:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b3fa:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b3ff:	74 17                	je     f011b418 <test_kmalloc_bestfit2+0x788>
f011b401:	83 ec 04             	sub    $0x4,%esp
f011b404:	68 28 af 13 f0       	push   $0xf013af28
f011b409:	68 79 02 00 00       	push   $0x279
f011b40e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b413:	e8 e3 4d fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b418:	e8 ac 14 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b41d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b420:	e8 17 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b425:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b428:	83 ec 0c             	sub    $0xc,%esp
f011b42b:	68 00 fc 2f 00       	push   $0x2ffc00
f011b430:	e8 c9 c3 fe ff       	call   f01077fe <kmalloc>
f011b435:	83 c4 10             	add    $0x10,%esp
f011b438:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b43e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b444:	89 c1                	mov    %eax,%ecx
f011b446:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b44d:	10 00 00 
f011b450:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b456:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b45b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b461:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b467:	ba 00 00 00 00       	mov    $0x0,%edx
f011b46c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b472:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b478:	29 d0                	sub    %edx,%eax
f011b47a:	89 c3                	mov    %eax,%ebx
f011b47c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b483:	10 00 00 
f011b486:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b48b:	0f b6 d0             	movzbl %al,%edx
f011b48e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b494:	01 d0                	add    %edx,%eax
f011b496:	48                   	dec    %eax
f011b497:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b49d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b4a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4a8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b4ae:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b4b4:	29 d0                	sub    %edx,%eax
f011b4b6:	01 c3                	add    %eax,%ebx
f011b4b8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b4bf:	10 00 00 
f011b4c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b4c7:	0f b6 c0             	movzbl %al,%eax
f011b4ca:	c1 e0 04             	shl    $0x4,%eax
f011b4cd:	89 c2                	mov    %eax,%edx
f011b4cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b4d5:	01 d0                	add    %edx,%eax
f011b4d7:	48                   	dec    %eax
f011b4d8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b4de:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b4e4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4e9:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b4ef:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b4f5:	29 d0                	sub    %edx,%eax
f011b4f7:	01 d8                	add    %ebx,%eax
f011b4f9:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b4fe:	39 c1                	cmp    %eax,%ecx
f011b500:	74 17                	je     f011b519 <test_kmalloc_bestfit2+0x889>
f011b502:	83 ec 04             	sub    $0x4,%esp
f011b505:	68 74 b0 13 f0       	push   $0xf013b074
f011b50a:	68 7f 02 00 00       	push   $0x27f
f011b50f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b514:	e8 e2 4c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b519:	e8 1e 88 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b51e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b521:	74 17                	je     f011b53a <test_kmalloc_bestfit2+0x8aa>
f011b523:	83 ec 04             	sub    $0x4,%esp
f011b526:	68 74 ac 13 f0       	push   $0xf013ac74
f011b52b:	68 80 02 00 00       	push   $0x280
f011b530:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b535:	e8 c1 4c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b53a:	e8 8a 13 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b53f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b542:	29 c2                	sub    %eax,%edx
f011b544:	89 d0                	mov    %edx,%eax
f011b546:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b54b:	74 17                	je     f011b564 <test_kmalloc_bestfit2+0x8d4>
f011b54d:	83 ec 04             	sub    $0x4,%esp
f011b550:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b555:	68 81 02 00 00       	push   $0x281
f011b55a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b55f:	e8 97 4c fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b564:	e8 60 13 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b569:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b56c:	e8 cb 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b571:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b574:	83 ec 0c             	sub    $0xc,%esp
f011b577:	68 00 18 20 00       	push   $0x201800
f011b57c:	e8 7d c2 fe ff       	call   f01077fe <kmalloc>
f011b581:	83 c4 10             	add    $0x10,%esp
f011b584:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b58a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b590:	89 c1                	mov    %eax,%ecx
f011b592:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b599:	10 00 00 
f011b59c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b5a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b5a7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b5ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b5b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5b8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b5be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b5c4:	29 d0                	sub    %edx,%eax
f011b5c6:	89 c3                	mov    %eax,%ebx
f011b5c8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b5cf:	10 00 00 
f011b5d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b5d7:	0f b6 d0             	movzbl %al,%edx
f011b5da:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b5e0:	01 d0                	add    %edx,%eax
f011b5e2:	48                   	dec    %eax
f011b5e3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b5e9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b5ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5f4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b5fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b600:	29 d0                	sub    %edx,%eax
f011b602:	01 c3                	add    %eax,%ebx
f011b604:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b60b:	10 00 00 
f011b60e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b613:	0f b6 c0             	movzbl %al,%eax
f011b616:	c1 e0 04             	shl    $0x4,%eax
f011b619:	89 c2                	mov    %eax,%edx
f011b61b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b621:	01 d0                	add    %edx,%eax
f011b623:	48                   	dec    %eax
f011b624:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b62a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b630:	ba 00 00 00 00       	mov    $0x0,%edx
f011b635:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b63b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b641:	29 d0                	sub    %edx,%eax
f011b643:	01 d8                	add    %ebx,%eax
f011b645:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b64a:	39 c1                	cmp    %eax,%ecx
f011b64c:	74 17                	je     f011b665 <test_kmalloc_bestfit2+0x9d5>
f011b64e:	83 ec 04             	sub    $0x4,%esp
f011b651:	68 74 b0 13 f0       	push   $0xf013b074
f011b656:	68 87 02 00 00       	push   $0x287
f011b65b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b660:	e8 96 4b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b665:	e8 d2 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b66a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b66d:	74 17                	je     f011b686 <test_kmalloc_bestfit2+0x9f6>
f011b66f:	83 ec 04             	sub    $0x4,%esp
f011b672:	68 74 ac 13 f0       	push   $0xf013ac74
f011b677:	68 88 02 00 00       	push   $0x288
f011b67c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b681:	e8 75 4b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b686:	e8 3e 12 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b68b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b68e:	29 c2                	sub    %eax,%edx
f011b690:	89 d0                	mov    %edx,%eax
f011b692:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b697:	74 17                	je     f011b6b0 <test_kmalloc_bestfit2+0xa20>
f011b699:	83 ec 04             	sub    $0x4,%esp
f011b69c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b6a1:	68 89 02 00 00       	push   $0x289
f011b6a6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b6ab:	e8 4b 4b fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b6b0:	e8 14 12 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b6b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6b8:	e8 7f 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b6bd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b6c0:	83 ec 0c             	sub    $0xc,%esp
f011b6c3:	68 00 fc 4f 00       	push   $0x4ffc00
f011b6c8:	e8 31 c1 fe ff       	call   f01077fe <kmalloc>
f011b6cd:	83 c4 10             	add    $0x10,%esp
f011b6d0:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b6d6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b6dc:	89 c1                	mov    %eax,%ecx
f011b6de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b6e5:	10 00 00 
f011b6e8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b6ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b6f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b6f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b6ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011b704:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b70a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b710:	29 d0                	sub    %edx,%eax
f011b712:	89 c3                	mov    %eax,%ebx
f011b714:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b71b:	10 00 00 
f011b71e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b723:	0f b6 d0             	movzbl %al,%edx
f011b726:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b72c:	01 d0                	add    %edx,%eax
f011b72e:	48                   	dec    %eax
f011b72f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b735:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b73b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b740:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b746:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b74c:	29 d0                	sub    %edx,%eax
f011b74e:	01 c3                	add    %eax,%ebx
f011b750:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b757:	10 00 00 
f011b75a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b75f:	0f b6 c0             	movzbl %al,%eax
f011b762:	c1 e0 04             	shl    $0x4,%eax
f011b765:	89 c2                	mov    %eax,%edx
f011b767:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b76d:	01 d0                	add    %edx,%eax
f011b76f:	48                   	dec    %eax
f011b770:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b776:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b77c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b781:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b787:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b78d:	29 d0                	sub    %edx,%eax
f011b78f:	01 d8                	add    %ebx,%eax
f011b791:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b796:	39 c1                	cmp    %eax,%ecx
f011b798:	74 17                	je     f011b7b1 <test_kmalloc_bestfit2+0xb21>
f011b79a:	83 ec 04             	sub    $0x4,%esp
f011b79d:	68 74 b0 13 f0       	push   $0xf013b074
f011b7a2:	68 8f 02 00 00       	push   $0x28f
f011b7a7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b7ac:	e8 4a 4a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7b1:	e8 86 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b7b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b7b9:	74 17                	je     f011b7d2 <test_kmalloc_bestfit2+0xb42>
f011b7bb:	83 ec 04             	sub    $0x4,%esp
f011b7be:	68 74 ac 13 f0       	push   $0xf013ac74
f011b7c3:	68 90 02 00 00       	push   $0x290
f011b7c8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b7cd:	e8 29 4a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b7d2:	e8 f2 10 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b7d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b7da:	29 c2                	sub    %eax,%edx
f011b7dc:	89 d0                	mov    %edx,%eax
f011b7de:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b7e3:	74 17                	je     f011b7fc <test_kmalloc_bestfit2+0xb6c>
f011b7e5:	83 ec 04             	sub    $0x4,%esp
f011b7e8:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b7ed:	68 91 02 00 00       	push   $0x291
f011b7f2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b7f7:	e8 ff 49 fe ff       	call   f01001fb <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b7fc:	e8 c8 10 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b801:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b804:	e8 33 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b809:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b80c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b812:	83 ec 0c             	sub    $0xc,%esp
f011b815:	50                   	push   %eax
f011b816:	e8 a5 c0 fe ff       	call   f01078c0 <kfree>
f011b81b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b81e:	e8 19 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b823:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b826:	74 17                	je     f011b83f <test_kmalloc_bestfit2+0xbaf>
f011b828:	83 ec 04             	sub    $0x4,%esp
f011b82b:	68 74 ac 13 f0       	push   $0xf013ac74
f011b830:	68 97 02 00 00       	push   $0x297
f011b835:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b83a:	e8 bc 49 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b83f:	e8 85 10 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b844:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b847:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b84c:	74 17                	je     f011b865 <test_kmalloc_bestfit2+0xbd5>
f011b84e:	83 ec 04             	sub    $0x4,%esp
f011b851:	68 28 af 13 f0       	push   $0xf013af28
f011b856:	68 98 02 00 00       	push   $0x298
f011b85b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b860:	e8 96 49 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b865:	e8 5f 10 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b86a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b86d:	e8 ca 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b872:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b875:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b87b:	83 ec 0c             	sub    $0xc,%esp
f011b87e:	50                   	push   %eax
f011b87f:	e8 3c c0 fe ff       	call   f01078c0 <kfree>
f011b884:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b887:	e8 b0 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b88c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b88f:	74 17                	je     f011b8a8 <test_kmalloc_bestfit2+0xc18>
f011b891:	83 ec 04             	sub    $0x4,%esp
f011b894:	68 74 ac 13 f0       	push   $0xf013ac74
f011b899:	68 9e 02 00 00       	push   $0x29e
f011b89e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b8a3:	e8 53 49 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b8a8:	e8 1c 10 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b8ad:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b8b0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b8b5:	74 17                	je     f011b8ce <test_kmalloc_bestfit2+0xc3e>
f011b8b7:	83 ec 04             	sub    $0x4,%esp
f011b8ba:	68 54 b1 13 f0       	push   $0xf013b154
f011b8bf:	68 9f 02 00 00       	push   $0x29f
f011b8c4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b8c9:	e8 2d 49 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b8ce:	e8 f6 0f ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b8d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8d6:	e8 61 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b8db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b8de:	83 ec 0c             	sub    $0xc,%esp
f011b8e1:	68 00 fc 1f 00       	push   $0x1ffc00
f011b8e6:	e8 13 bf fe ff       	call   f01077fe <kmalloc>
f011b8eb:	83 c4 10             	add    $0x10,%esp
f011b8ee:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b8f4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b8fa:	89 c1                	mov    %eax,%ecx
f011b8fc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b903:	10 00 00 
f011b906:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b90c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b911:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b917:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b91d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b922:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b928:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b92e:	29 d0                	sub    %edx,%eax
f011b930:	89 c3                	mov    %eax,%ebx
f011b932:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b939:	10 00 00 
f011b93c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b941:	0f b6 d0             	movzbl %al,%edx
f011b944:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b94a:	01 d0                	add    %edx,%eax
f011b94c:	48                   	dec    %eax
f011b94d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b953:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b959:	ba 00 00 00 00       	mov    $0x0,%edx
f011b95e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b964:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b96a:	29 d0                	sub    %edx,%eax
f011b96c:	01 c3                	add    %eax,%ebx
f011b96e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b975:	10 00 00 
f011b978:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b97d:	0f b6 c0             	movzbl %al,%eax
f011b980:	c1 e0 04             	shl    $0x4,%eax
f011b983:	89 c2                	mov    %eax,%edx
f011b985:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b98b:	01 d0                	add    %edx,%eax
f011b98d:	48                   	dec    %eax
f011b98e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b994:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b99a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b99f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b9a5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b9ab:	29 d0                	sub    %edx,%eax
f011b9ad:	01 d8                	add    %ebx,%eax
f011b9af:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b9b4:	39 c1                	cmp    %eax,%ecx
f011b9b6:	74 17                	je     f011b9cf <test_kmalloc_bestfit2+0xd3f>
f011b9b8:	83 ec 04             	sub    $0x4,%esp
f011b9bb:	68 74 b0 13 f0       	push   $0xf013b074
f011b9c0:	68 a5 02 00 00       	push   $0x2a5
f011b9c5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b9ca:	e8 2c 48 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9cf:	e8 68 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b9d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b9d7:	74 17                	je     f011b9f0 <test_kmalloc_bestfit2+0xd60>
f011b9d9:	83 ec 04             	sub    $0x4,%esp
f011b9dc:	68 74 ac 13 f0       	push   $0xf013ac74
f011b9e1:	68 a6 02 00 00       	push   $0x2a6
f011b9e6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b9eb:	e8 0b 48 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b9f0:	e8 d4 0e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011b9f5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b9f8:	29 c2                	sub    %eax,%edx
f011b9fa:	89 d0                	mov    %edx,%eax
f011b9fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba01:	74 17                	je     f011ba1a <test_kmalloc_bestfit2+0xd8a>
f011ba03:	83 ec 04             	sub    $0x4,%esp
f011ba06:	68 92 b1 13 f0       	push   $0xf013b192
f011ba0b:	68 a7 02 00 00       	push   $0x2a7
f011ba10:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ba15:	e8 e1 47 fe ff       	call   f01001fb <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba1a:	e8 aa 0e ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ba1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba22:	e8 15 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ba27:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011ba2a:	83 ec 0c             	sub    $0xc,%esp
f011ba2d:	68 00 18 00 00       	push   $0x1800
f011ba32:	e8 c7 bd fe ff       	call   f01077fe <kmalloc>
f011ba37:	83 c4 10             	add    $0x10,%esp
f011ba3a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba40:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ba46:	89 c1                	mov    %eax,%ecx
f011ba48:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ba4f:	10 00 00 
f011ba52:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ba58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba5d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ba63:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ba69:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba6e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ba74:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ba7a:	29 d0                	sub    %edx,%eax
f011ba7c:	89 c3                	mov    %eax,%ebx
f011ba7e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ba85:	10 00 00 
f011ba88:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ba8d:	0f b6 d0             	movzbl %al,%edx
f011ba90:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ba96:	01 d0                	add    %edx,%eax
f011ba98:	48                   	dec    %eax
f011ba99:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ba9f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011baa5:	ba 00 00 00 00       	mov    $0x0,%edx
f011baaa:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011bab0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bab6:	29 d0                	sub    %edx,%eax
f011bab8:	01 c3                	add    %eax,%ebx
f011baba:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011bac1:	10 00 00 
f011bac4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bac9:	0f b6 c0             	movzbl %al,%eax
f011bacc:	c1 e0 04             	shl    $0x4,%eax
f011bacf:	89 c2                	mov    %eax,%edx
f011bad1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011bad7:	01 d0                	add    %edx,%eax
f011bad9:	48                   	dec    %eax
f011bada:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011bae0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011bae6:	ba 00 00 00 00       	mov    $0x0,%edx
f011baeb:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011baf1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011baf7:	29 d0                	sub    %edx,%eax
f011baf9:	01 d8                	add    %ebx,%eax
f011bafb:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011bb00:	39 c1                	cmp    %eax,%ecx
f011bb02:	74 17                	je     f011bb1b <test_kmalloc_bestfit2+0xe8b>
f011bb04:	83 ec 04             	sub    $0x4,%esp
f011bb07:	68 74 b0 13 f0       	push   $0xf013b074
f011bb0c:	68 ad 02 00 00       	push   $0x2ad
f011bb11:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb16:	e8 e0 46 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb1b:	e8 1c 82 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb20:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb23:	74 17                	je     f011bb3c <test_kmalloc_bestfit2+0xeac>
f011bb25:	83 ec 04             	sub    $0x4,%esp
f011bb28:	68 74 ac 13 f0       	push   $0xf013ac74
f011bb2d:	68 ae 02 00 00       	push   $0x2ae
f011bb32:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb37:	e8 bf 46 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011bb3c:	e8 88 0d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bb41:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb44:	29 c2                	sub    %eax,%edx
f011bb46:	89 d0                	mov    %edx,%eax
f011bb48:	83 f8 02             	cmp    $0x2,%eax
f011bb4b:	74 17                	je     f011bb64 <test_kmalloc_bestfit2+0xed4>
f011bb4d:	83 ec 04             	sub    $0x4,%esp
f011bb50:	68 92 b1 13 f0       	push   $0xf013b192
f011bb55:	68 af 02 00 00       	push   $0x2af
f011bb5a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb5f:	e8 97 46 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bb64:	e8 60 0d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bb69:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb6c:	e8 cb 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb71:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011bb74:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bb7a:	83 ec 0c             	sub    $0xc,%esp
f011bb7d:	50                   	push   %eax
f011bb7e:	e8 3d bd fe ff       	call   f01078c0 <kfree>
f011bb83:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb86:	e8 b1 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb8b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb8e:	74 17                	je     f011bba7 <test_kmalloc_bestfit2+0xf17>
f011bb90:	83 ec 04             	sub    $0x4,%esp
f011bb93:	68 74 ac 13 f0       	push   $0xf013ac74
f011bb98:	68 b5 02 00 00       	push   $0x2b5
f011bb9d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bba2:	e8 54 46 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bba7:	e8 1d 0d ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bbac:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bbaf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bbb4:	74 17                	je     f011bbcd <test_kmalloc_bestfit2+0xf3d>
f011bbb6:	83 ec 04             	sub    $0x4,%esp
f011bbb9:	68 54 b1 13 f0       	push   $0xf013b154
f011bbbe:	68 b6 02 00 00       	push   $0x2b6
f011bbc3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bbc8:	e8 2e 46 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bbcd:	e8 f7 0c ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bbd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbd5:	e8 62 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bbda:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011bbdd:	83 ec 0c             	sub    $0xc,%esp
f011bbe0:	68 00 fc 2f 00       	push   $0x2ffc00
f011bbe5:	e8 14 bc fe ff       	call   f01077fe <kmalloc>
f011bbea:	83 c4 10             	add    $0x10,%esp
f011bbed:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bbf3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011bbf9:	89 c1                	mov    %eax,%ecx
f011bbfb:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011bc02:	10 00 00 
f011bc05:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011bc0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc10:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011bc16:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bc1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc21:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011bc27:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bc2d:	29 d0                	sub    %edx,%eax
f011bc2f:	89 c3                	mov    %eax,%ebx
f011bc31:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bc38:	10 00 00 
f011bc3b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bc40:	0f b6 d0             	movzbl %al,%edx
f011bc43:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bc49:	01 d0                	add    %edx,%eax
f011bc4b:	48                   	dec    %eax
f011bc4c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011bc52:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bc58:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc5d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011bc63:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bc69:	29 d0                	sub    %edx,%eax
f011bc6b:	01 c3                	add    %eax,%ebx
f011bc6d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011bc74:	10 00 00 
f011bc77:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bc7c:	0f b6 c0             	movzbl %al,%eax
f011bc7f:	c1 e0 04             	shl    $0x4,%eax
f011bc82:	89 c2                	mov    %eax,%edx
f011bc84:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bc8a:	01 d0                	add    %edx,%eax
f011bc8c:	48                   	dec    %eax
f011bc8d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011bc93:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bc99:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc9e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011bca4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bcaa:	29 d0                	sub    %edx,%eax
f011bcac:	01 d8                	add    %ebx,%eax
f011bcae:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bcb3:	39 c1                	cmp    %eax,%ecx
f011bcb5:	74 17                	je     f011bcce <test_kmalloc_bestfit2+0x103e>
f011bcb7:	83 ec 04             	sub    $0x4,%esp
f011bcba:	68 74 b0 13 f0       	push   $0xf013b074
f011bcbf:	68 bc 02 00 00       	push   $0x2bc
f011bcc4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bcc9:	e8 2d 45 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcce:	e8 69 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bcd3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcd6:	74 17                	je     f011bcef <test_kmalloc_bestfit2+0x105f>
f011bcd8:	83 ec 04             	sub    $0x4,%esp
f011bcdb:	68 74 ac 13 f0       	push   $0xf013ac74
f011bce0:	68 bd 02 00 00       	push   $0x2bd
f011bce5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bcea:	e8 0c 45 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bcef:	e8 d5 0b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bcf4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bcf7:	29 c2                	sub    %eax,%edx
f011bcf9:	89 d0                	mov    %edx,%eax
f011bcfb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bd00:	74 17                	je     f011bd19 <test_kmalloc_bestfit2+0x1089>
f011bd02:	83 ec 04             	sub    $0x4,%esp
f011bd05:	68 54 b1 13 f0       	push   $0xf013b154
f011bd0a:	68 be 02 00 00       	push   $0x2be
f011bd0f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bd14:	e8 e2 44 fe ff       	call   f01001fb <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd19:	e8 ab 0b ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bd1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd21:	e8 16 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bd26:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011bd29:	83 ec 0c             	sub    $0xc,%esp
f011bd2c:	68 00 fc 3f 00       	push   $0x3ffc00
f011bd31:	e8 c8 ba fe ff       	call   f01077fe <kmalloc>
f011bd36:	83 c4 10             	add    $0x10,%esp
f011bd39:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bd3f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011bd45:	89 c1                	mov    %eax,%ecx
f011bd47:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011bd4e:	10 00 00 
f011bd51:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bd57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd5c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011bd62:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bd68:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd6d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011bd73:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bd79:	29 d0                	sub    %edx,%eax
f011bd7b:	89 c3                	mov    %eax,%ebx
f011bd7d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011bd84:	10 00 00 
f011bd87:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bd8c:	0f b6 d0             	movzbl %al,%edx
f011bd8f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bd95:	01 d0                	add    %edx,%eax
f011bd97:	48                   	dec    %eax
f011bd98:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011bd9e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bda4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bda9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011bdaf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bdb5:	29 d0                	sub    %edx,%eax
f011bdb7:	01 c3                	add    %eax,%ebx
f011bdb9:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011bdc0:	10 00 00 
f011bdc3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bdc8:	0f b6 c0             	movzbl %al,%eax
f011bdcb:	c1 e0 04             	shl    $0x4,%eax
f011bdce:	89 c2                	mov    %eax,%edx
f011bdd0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011bdd6:	01 d0                	add    %edx,%eax
f011bdd8:	48                   	dec    %eax
f011bdd9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011bddf:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bde5:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdea:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011bdf0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bdf6:	29 d0                	sub    %edx,%eax
f011bdf8:	01 d8                	add    %ebx,%eax
f011bdfa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bdff:	39 c1                	cmp    %eax,%ecx
f011be01:	74 17                	je     f011be1a <test_kmalloc_bestfit2+0x118a>
f011be03:	83 ec 04             	sub    $0x4,%esp
f011be06:	68 74 b0 13 f0       	push   $0xf013b074
f011be0b:	68 c4 02 00 00       	push   $0x2c4
f011be10:	68 5a ac 13 f0       	push   $0xf013ac5a
f011be15:	e8 e1 43 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be1a:	e8 1d 7f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011be1f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be22:	74 17                	je     f011be3b <test_kmalloc_bestfit2+0x11ab>
f011be24:	83 ec 04             	sub    $0x4,%esp
f011be27:	68 74 ac 13 f0       	push   $0xf013ac74
f011be2c:	68 c5 02 00 00       	push   $0x2c5
f011be31:	68 5a ac 13 f0       	push   $0xf013ac5a
f011be36:	e8 c0 43 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011be3b:	e8 89 0a ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011be40:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be43:	29 c2                	sub    %eax,%edx
f011be45:	89 d0                	mov    %edx,%eax
f011be47:	3d 00 04 00 00       	cmp    $0x400,%eax
f011be4c:	74 17                	je     f011be65 <test_kmalloc_bestfit2+0x11d5>
f011be4e:	83 ec 04             	sub    $0x4,%esp
f011be51:	68 54 b1 13 f0       	push   $0xf013b154
f011be56:	68 c6 02 00 00       	push   $0x2c6
f011be5b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011be60:	e8 96 43 fe ff       	call   f01001fb <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011be65:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011be6c:	10 00 00 
f011be6f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011be75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be7a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011be80:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011be86:	ba 00 00 00 00       	mov    $0x0,%edx
f011be8b:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011be91:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011be97:	29 d0                	sub    %edx,%eax
f011be99:	89 c1                	mov    %eax,%ecx
f011be9b:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011bea2:	10 00 00 
f011bea5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011beaa:	0f b6 d0             	movzbl %al,%edx
f011bead:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011beb3:	01 d0                	add    %edx,%eax
f011beb5:	48                   	dec    %eax
f011beb6:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011bebc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bec2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bec7:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011becd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bed3:	29 d0                	sub    %edx,%eax
f011bed5:	01 c1                	add    %eax,%ecx
f011bed7:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011bede:	10 00 00 
f011bee1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bee6:	0f b6 c0             	movzbl %al,%eax
f011bee9:	c1 e0 04             	shl    $0x4,%eax
f011beec:	89 c2                	mov    %eax,%edx
f011beee:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011bef4:	01 d0                	add    %edx,%eax
f011bef6:	48                   	dec    %eax
f011bef7:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011befd:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bf03:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf08:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011bf0e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bf14:	29 d0                	sub    %edx,%eax
f011bf16:	01 c8                	add    %ecx,%eax
f011bf18:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011bf1d:	29 c2                	sub    %eax,%edx
f011bf1f:	89 d0                	mov    %edx,%eax
f011bf21:	83 ec 0c             	sub    $0xc,%esp
f011bf24:	50                   	push   %eax
f011bf25:	e8 d4 b8 fe ff       	call   f01077fe <kmalloc>
f011bf2a:	83 c4 10             	add    $0x10,%esp
f011bf2d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011bf33:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011bf39:	85 c0                	test   %eax,%eax
f011bf3b:	74 17                	je     f011bf54 <test_kmalloc_bestfit2+0x12c4>
f011bf3d:	83 ec 04             	sub    $0x4,%esp
f011bf40:	68 a4 b1 13 f0       	push   $0xf013b1a4
f011bf45:	68 ce 02 00 00       	push   $0x2ce
f011bf4a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bf4f:	e8 a7 42 fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011bf54:	83 ec 0c             	sub    $0xc,%esp
f011bf57:	68 08 b2 13 f0       	push   $0xf013b208
f011bf5c:	e8 21 4d fe ff       	call   f0100c82 <cprintf>
f011bf61:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011bf64:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bf69:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bf6c:	5b                   	pop    %ebx
f011bf6d:	5f                   	pop    %edi
f011bf6e:	5d                   	pop    %ebp
f011bf6f:	c3                   	ret    

f011bf70 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011bf70:	55                   	push   %ebp
f011bf71:	89 e5                	mov    %esp,%ebp
f011bf73:	57                   	push   %edi
f011bf74:	53                   	push   %ebx
f011bf75:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011bf7b:	83 ec 0c             	sub    $0xc,%esp
f011bf7e:	68 9c ab 13 f0       	push   $0xf013ab9c
f011bf83:	e8 fa 4c fe ff       	call   f0100c82 <cprintf>
f011bf88:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bf8b:	83 ec 0c             	sub    $0xc,%esp
f011bf8e:	68 cc ab 13 f0       	push   $0xf013abcc
f011bf93:	e8 ea 4c fe ff       	call   f0100c82 <cprintf>
f011bf98:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bf9b:	83 ec 0c             	sub    $0xc,%esp
f011bf9e:	68 9c ab 13 f0       	push   $0xf013ab9c
f011bfa3:	e8 da 4c fe ff       	call   f0100c82 <cprintf>
f011bfa8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bfab:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011bfb1:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bfb6:	b8 00 00 00 00       	mov    $0x0,%eax
f011bfbb:	89 d7                	mov    %edx,%edi
f011bfbd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bfbf:	e8 05 09 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011bfc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bfc7:	e8 70 7d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bfcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011bfcf:	83 ec 0c             	sub    $0xc,%esp
f011bfd2:	68 00 fc 0f 00       	push   $0xffc00
f011bfd7:	e8 22 b8 fe ff       	call   f01077fe <kmalloc>
f011bfdc:	83 c4 10             	add    $0x10,%esp
f011bfdf:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bfe5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bfeb:	89 c1                	mov    %eax,%ecx
f011bfed:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bff4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bff7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bffc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bfff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c002:	ba 00 00 00 00       	mov    $0x0,%edx
f011c007:	f7 75 ec             	divl   -0x14(%ebp)
f011c00a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c00d:	29 d0                	sub    %edx,%eax
f011c00f:	89 c3                	mov    %eax,%ebx
f011c011:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c018:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c01d:	0f b6 d0             	movzbl %al,%edx
f011c020:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c023:	01 d0                	add    %edx,%eax
f011c025:	48                   	dec    %eax
f011c026:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c029:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c02c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c031:	f7 75 e4             	divl   -0x1c(%ebp)
f011c034:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c037:	29 d0                	sub    %edx,%eax
f011c039:	01 c3                	add    %eax,%ebx
f011c03b:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c042:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c047:	0f b6 c0             	movzbl %al,%eax
f011c04a:	c1 e0 04             	shl    $0x4,%eax
f011c04d:	89 c2                	mov    %eax,%edx
f011c04f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c052:	01 d0                	add    %edx,%eax
f011c054:	48                   	dec    %eax
f011c055:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c058:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c05b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c060:	f7 75 dc             	divl   -0x24(%ebp)
f011c063:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c066:	29 d0                	sub    %edx,%eax
f011c068:	01 d8                	add    %ebx,%eax
f011c06a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c06f:	39 c1                	cmp    %eax,%ecx
f011c071:	74 17                	je     f011c08a <test_kmalloc_firstfit1+0x11a>
f011c073:	83 ec 04             	sub    $0x4,%esp
f011c076:	68 74 b0 13 f0       	push   $0xf013b074
f011c07b:	68 e6 02 00 00       	push   $0x2e6
f011c080:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c085:	e8 71 41 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c08a:	e8 ad 7c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c08f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c092:	74 17                	je     f011c0ab <test_kmalloc_firstfit1+0x13b>
f011c094:	83 ec 04             	sub    $0x4,%esp
f011c097:	68 74 ac 13 f0       	push   $0xf013ac74
f011c09c:	68 e7 02 00 00       	push   $0x2e7
f011c0a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c0a6:	e8 50 41 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c0ab:	e8 19 08 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c0b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c0b3:	29 c2                	sub    %eax,%edx
f011c0b5:	89 d0                	mov    %edx,%eax
f011c0b7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c0bc:	74 17                	je     f011c0d5 <test_kmalloc_firstfit1+0x165>
f011c0be:	83 ec 04             	sub    $0x4,%esp
f011c0c1:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c0c6:	68 e8 02 00 00       	push   $0x2e8
f011c0cb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c0d0:	e8 26 41 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0d5:	e8 ef 07 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c0da:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0dd:	e8 5a 7c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c0e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c0e5:	83 ec 0c             	sub    $0xc,%esp
f011c0e8:	68 00 fc 0f 00       	push   $0xffc00
f011c0ed:	e8 0c b7 fe ff       	call   f01077fe <kmalloc>
f011c0f2:	83 c4 10             	add    $0x10,%esp
f011c0f5:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c0fb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c101:	89 c1                	mov    %eax,%ecx
f011c103:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c10a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c10d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c112:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c115:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c118:	ba 00 00 00 00       	mov    $0x0,%edx
f011c11d:	f7 75 d4             	divl   -0x2c(%ebp)
f011c120:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c123:	29 d0                	sub    %edx,%eax
f011c125:	89 c3                	mov    %eax,%ebx
f011c127:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c12e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c133:	0f b6 d0             	movzbl %al,%edx
f011c136:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c139:	01 d0                	add    %edx,%eax
f011c13b:	48                   	dec    %eax
f011c13c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c13f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c142:	ba 00 00 00 00       	mov    $0x0,%edx
f011c147:	f7 75 cc             	divl   -0x34(%ebp)
f011c14a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c14d:	29 d0                	sub    %edx,%eax
f011c14f:	01 c3                	add    %eax,%ebx
f011c151:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c158:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c15d:	0f b6 c0             	movzbl %al,%eax
f011c160:	c1 e0 04             	shl    $0x4,%eax
f011c163:	89 c2                	mov    %eax,%edx
f011c165:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c168:	01 d0                	add    %edx,%eax
f011c16a:	48                   	dec    %eax
f011c16b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c16e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c171:	ba 00 00 00 00       	mov    $0x0,%edx
f011c176:	f7 75 c4             	divl   -0x3c(%ebp)
f011c179:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c17c:	29 d0                	sub    %edx,%eax
f011c17e:	01 d8                	add    %ebx,%eax
f011c180:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c185:	39 c1                	cmp    %eax,%ecx
f011c187:	74 17                	je     f011c1a0 <test_kmalloc_firstfit1+0x230>
f011c189:	83 ec 04             	sub    $0x4,%esp
f011c18c:	68 74 b0 13 f0       	push   $0xf013b074
f011c191:	68 ee 02 00 00       	push   $0x2ee
f011c196:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c19b:	e8 5b 40 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1a0:	e8 97 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c1a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c1a8:	74 17                	je     f011c1c1 <test_kmalloc_firstfit1+0x251>
f011c1aa:	83 ec 04             	sub    $0x4,%esp
f011c1ad:	68 74 ac 13 f0       	push   $0xf013ac74
f011c1b2:	68 ef 02 00 00       	push   $0x2ef
f011c1b7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c1bc:	e8 3a 40 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c1c1:	e8 03 07 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c1c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c1c9:	29 c2                	sub    %eax,%edx
f011c1cb:	89 d0                	mov    %edx,%eax
f011c1cd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c1d2:	74 17                	je     f011c1eb <test_kmalloc_firstfit1+0x27b>
f011c1d4:	83 ec 04             	sub    $0x4,%esp
f011c1d7:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c1dc:	68 f0 02 00 00       	push   $0x2f0
f011c1e1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c1e6:	e8 10 40 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c1eb:	e8 d9 06 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c1f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c1f3:	e8 44 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c1f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c1fb:	83 ec 0c             	sub    $0xc,%esp
f011c1fe:	68 00 fc 0f 00       	push   $0xffc00
f011c203:	e8 f6 b5 fe ff       	call   f01077fe <kmalloc>
f011c208:	83 c4 10             	add    $0x10,%esp
f011c20b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c211:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c217:	89 c1                	mov    %eax,%ecx
f011c219:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c220:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c223:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c228:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c22b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c22e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c233:	f7 75 bc             	divl   -0x44(%ebp)
f011c236:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c239:	29 d0                	sub    %edx,%eax
f011c23b:	89 c3                	mov    %eax,%ebx
f011c23d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c244:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c249:	0f b6 d0             	movzbl %al,%edx
f011c24c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c24f:	01 d0                	add    %edx,%eax
f011c251:	48                   	dec    %eax
f011c252:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c255:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c258:	ba 00 00 00 00       	mov    $0x0,%edx
f011c25d:	f7 75 b4             	divl   -0x4c(%ebp)
f011c260:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c263:	29 d0                	sub    %edx,%eax
f011c265:	01 c3                	add    %eax,%ebx
f011c267:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c26e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c273:	0f b6 c0             	movzbl %al,%eax
f011c276:	c1 e0 04             	shl    $0x4,%eax
f011c279:	89 c2                	mov    %eax,%edx
f011c27b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c27e:	01 d0                	add    %edx,%eax
f011c280:	48                   	dec    %eax
f011c281:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c284:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c287:	ba 00 00 00 00       	mov    $0x0,%edx
f011c28c:	f7 75 ac             	divl   -0x54(%ebp)
f011c28f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c292:	29 d0                	sub    %edx,%eax
f011c294:	01 d8                	add    %ebx,%eax
f011c296:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c29b:	39 c1                	cmp    %eax,%ecx
f011c29d:	74 17                	je     f011c2b6 <test_kmalloc_firstfit1+0x346>
f011c29f:	83 ec 04             	sub    $0x4,%esp
f011c2a2:	68 74 b0 13 f0       	push   $0xf013b074
f011c2a7:	68 f6 02 00 00       	push   $0x2f6
f011c2ac:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c2b1:	e8 45 3f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2b6:	e8 81 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c2bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c2be:	74 17                	je     f011c2d7 <test_kmalloc_firstfit1+0x367>
f011c2c0:	83 ec 04             	sub    $0x4,%esp
f011c2c3:	68 74 ac 13 f0       	push   $0xf013ac74
f011c2c8:	68 f7 02 00 00       	push   $0x2f7
f011c2cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c2d2:	e8 24 3f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c2d7:	e8 ed 05 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c2dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c2df:	29 c2                	sub    %eax,%edx
f011c2e1:	89 d0                	mov    %edx,%eax
f011c2e3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c2e8:	74 17                	je     f011c301 <test_kmalloc_firstfit1+0x391>
f011c2ea:	83 ec 04             	sub    $0x4,%esp
f011c2ed:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c2f2:	68 f8 02 00 00       	push   $0x2f8
f011c2f7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c2fc:	e8 fa 3e fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c301:	e8 c3 05 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c306:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c309:	e8 2e 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c30e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c311:	83 ec 0c             	sub    $0xc,%esp
f011c314:	68 00 fc 0f 00       	push   $0xffc00
f011c319:	e8 e0 b4 fe ff       	call   f01077fe <kmalloc>
f011c31e:	83 c4 10             	add    $0x10,%esp
f011c321:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c327:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c32d:	89 c1                	mov    %eax,%ecx
f011c32f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c336:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c339:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c33e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c341:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c344:	ba 00 00 00 00       	mov    $0x0,%edx
f011c349:	f7 75 a4             	divl   -0x5c(%ebp)
f011c34c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c34f:	29 d0                	sub    %edx,%eax
f011c351:	89 c3                	mov    %eax,%ebx
f011c353:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c35a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c35f:	0f b6 d0             	movzbl %al,%edx
f011c362:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c365:	01 d0                	add    %edx,%eax
f011c367:	48                   	dec    %eax
f011c368:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c36b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c36e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c373:	f7 75 9c             	divl   -0x64(%ebp)
f011c376:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c379:	29 d0                	sub    %edx,%eax
f011c37b:	01 c3                	add    %eax,%ebx
f011c37d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c384:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c389:	0f b6 c0             	movzbl %al,%eax
f011c38c:	c1 e0 04             	shl    $0x4,%eax
f011c38f:	89 c2                	mov    %eax,%edx
f011c391:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c394:	01 d0                	add    %edx,%eax
f011c396:	48                   	dec    %eax
f011c397:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c39a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c39d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3a2:	f7 75 94             	divl   -0x6c(%ebp)
f011c3a5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c3a8:	29 d0                	sub    %edx,%eax
f011c3aa:	01 d8                	add    %ebx,%eax
f011c3ac:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c3b1:	39 c1                	cmp    %eax,%ecx
f011c3b3:	74 17                	je     f011c3cc <test_kmalloc_firstfit1+0x45c>
f011c3b5:	83 ec 04             	sub    $0x4,%esp
f011c3b8:	68 74 b0 13 f0       	push   $0xf013b074
f011c3bd:	68 fe 02 00 00       	push   $0x2fe
f011c3c2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c3c7:	e8 2f 3e fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3cc:	e8 6b 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c3d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c3d4:	74 17                	je     f011c3ed <test_kmalloc_firstfit1+0x47d>
f011c3d6:	83 ec 04             	sub    $0x4,%esp
f011c3d9:	68 74 ac 13 f0       	push   $0xf013ac74
f011c3de:	68 ff 02 00 00       	push   $0x2ff
f011c3e3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c3e8:	e8 0e 3e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c3ed:	e8 d7 04 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c3f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c3f5:	29 c2                	sub    %eax,%edx
f011c3f7:	89 d0                	mov    %edx,%eax
f011c3f9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c3fe:	74 17                	je     f011c417 <test_kmalloc_firstfit1+0x4a7>
f011c400:	83 ec 04             	sub    $0x4,%esp
f011c403:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c408:	68 00 03 00 00       	push   $0x300
f011c40d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c412:	e8 e4 3d fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c417:	e8 ad 04 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c41c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c41f:	e8 18 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c424:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c427:	83 ec 0c             	sub    $0xc,%esp
f011c42a:	68 00 fc 1f 00       	push   $0x1ffc00
f011c42f:	e8 ca b3 fe ff       	call   f01077fe <kmalloc>
f011c434:	83 c4 10             	add    $0x10,%esp
f011c437:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c43d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c443:	89 c1                	mov    %eax,%ecx
f011c445:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c44c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c44f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c454:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c457:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c45a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c45f:	f7 75 8c             	divl   -0x74(%ebp)
f011c462:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c465:	29 d0                	sub    %edx,%eax
f011c467:	89 c3                	mov    %eax,%ebx
f011c469:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c470:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c475:	0f b6 d0             	movzbl %al,%edx
f011c478:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c47b:	01 d0                	add    %edx,%eax
f011c47d:	48                   	dec    %eax
f011c47e:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c481:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c484:	ba 00 00 00 00       	mov    $0x0,%edx
f011c489:	f7 75 84             	divl   -0x7c(%ebp)
f011c48c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c48f:	29 d0                	sub    %edx,%eax
f011c491:	01 c3                	add    %eax,%ebx
f011c493:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c49a:	10 00 00 
f011c49d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c4a2:	0f b6 c0             	movzbl %al,%eax
f011c4a5:	c1 e0 04             	shl    $0x4,%eax
f011c4a8:	89 c2                	mov    %eax,%edx
f011c4aa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c4b0:	01 d0                	add    %edx,%eax
f011c4b2:	48                   	dec    %eax
f011c4b3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c4b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c4bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4c4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c4ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c4d0:	29 d0                	sub    %edx,%eax
f011c4d2:	01 d8                	add    %ebx,%eax
f011c4d4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c4d9:	39 c1                	cmp    %eax,%ecx
f011c4db:	74 17                	je     f011c4f4 <test_kmalloc_firstfit1+0x584>
f011c4dd:	83 ec 04             	sub    $0x4,%esp
f011c4e0:	68 74 b0 13 f0       	push   $0xf013b074
f011c4e5:	68 06 03 00 00       	push   $0x306
f011c4ea:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c4ef:	e8 07 3d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4f4:	e8 43 78 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c4f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4fc:	74 17                	je     f011c515 <test_kmalloc_firstfit1+0x5a5>
f011c4fe:	83 ec 04             	sub    $0x4,%esp
f011c501:	68 74 ac 13 f0       	push   $0xf013ac74
f011c506:	68 07 03 00 00       	push   $0x307
f011c50b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c510:	e8 e6 3c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c515:	e8 af 03 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c51a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c51d:	29 c2                	sub    %eax,%edx
f011c51f:	89 d0                	mov    %edx,%eax
f011c521:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c526:	74 17                	je     f011c53f <test_kmalloc_firstfit1+0x5cf>
f011c528:	83 ec 04             	sub    $0x4,%esp
f011c52b:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c530:	68 08 03 00 00       	push   $0x308
f011c535:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c53a:	e8 bc 3c fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c53f:	e8 85 03 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c544:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c547:	e8 f0 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c54c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c54f:	83 ec 0c             	sub    $0xc,%esp
f011c552:	68 00 fc 1f 00       	push   $0x1ffc00
f011c557:	e8 a2 b2 fe ff       	call   f01077fe <kmalloc>
f011c55c:	83 c4 10             	add    $0x10,%esp
f011c55f:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c565:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c56b:	89 c1                	mov    %eax,%ecx
f011c56d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c574:	10 00 00 
f011c577:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c57d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c582:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c588:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c58e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c593:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c599:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c59f:	29 d0                	sub    %edx,%eax
f011c5a1:	89 c3                	mov    %eax,%ebx
f011c5a3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c5aa:	10 00 00 
f011c5ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c5b2:	0f b6 d0             	movzbl %al,%edx
f011c5b5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c5bb:	01 d0                	add    %edx,%eax
f011c5bd:	48                   	dec    %eax
f011c5be:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c5c4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5cf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c5d5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5db:	29 d0                	sub    %edx,%eax
f011c5dd:	01 c3                	add    %eax,%ebx
f011c5df:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c5e6:	10 00 00 
f011c5e9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c5ee:	0f b6 c0             	movzbl %al,%eax
f011c5f1:	c1 e0 04             	shl    $0x4,%eax
f011c5f4:	89 c2                	mov    %eax,%edx
f011c5f6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c5fc:	01 d0                	add    %edx,%eax
f011c5fe:	48                   	dec    %eax
f011c5ff:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c605:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c60b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c610:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c616:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c61c:	29 d0                	sub    %edx,%eax
f011c61e:	01 d8                	add    %ebx,%eax
f011c620:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c625:	39 c1                	cmp    %eax,%ecx
f011c627:	74 17                	je     f011c640 <test_kmalloc_firstfit1+0x6d0>
f011c629:	83 ec 04             	sub    $0x4,%esp
f011c62c:	68 74 b0 13 f0       	push   $0xf013b074
f011c631:	68 0e 03 00 00       	push   $0x30e
f011c636:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c63b:	e8 bb 3b fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c640:	e8 f7 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c645:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c648:	74 17                	je     f011c661 <test_kmalloc_firstfit1+0x6f1>
f011c64a:	83 ec 04             	sub    $0x4,%esp
f011c64d:	68 74 ac 13 f0       	push   $0xf013ac74
f011c652:	68 0f 03 00 00       	push   $0x30f
f011c657:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c65c:	e8 9a 3b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c661:	e8 63 02 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c666:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c669:	29 c2                	sub    %eax,%edx
f011c66b:	89 d0                	mov    %edx,%eax
f011c66d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c672:	74 17                	je     f011c68b <test_kmalloc_firstfit1+0x71b>
f011c674:	83 ec 04             	sub    $0x4,%esp
f011c677:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c67c:	68 10 03 00 00       	push   $0x310
f011c681:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c686:	e8 70 3b fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c68b:	e8 39 02 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c690:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c693:	e8 a4 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c698:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c69b:	83 ec 0c             	sub    $0xc,%esp
f011c69e:	68 00 fc 2f 00       	push   $0x2ffc00
f011c6a3:	e8 56 b1 fe ff       	call   f01077fe <kmalloc>
f011c6a8:	83 c4 10             	add    $0x10,%esp
f011c6ab:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c6b1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c6b7:	89 c1                	mov    %eax,%ecx
f011c6b9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c6c0:	10 00 00 
f011c6c3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c6c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c6ce:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c6d4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c6da:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6df:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c6e5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c6eb:	29 d0                	sub    %edx,%eax
f011c6ed:	89 c3                	mov    %eax,%ebx
f011c6ef:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c6f6:	10 00 00 
f011c6f9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c6fe:	0f b6 d0             	movzbl %al,%edx
f011c701:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c707:	01 d0                	add    %edx,%eax
f011c709:	48                   	dec    %eax
f011c70a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c710:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c716:	ba 00 00 00 00       	mov    $0x0,%edx
f011c71b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c721:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c727:	29 d0                	sub    %edx,%eax
f011c729:	01 c3                	add    %eax,%ebx
f011c72b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c732:	10 00 00 
f011c735:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c73a:	0f b6 c0             	movzbl %al,%eax
f011c73d:	c1 e0 04             	shl    $0x4,%eax
f011c740:	89 c2                	mov    %eax,%edx
f011c742:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c748:	01 d0                	add    %edx,%eax
f011c74a:	48                   	dec    %eax
f011c74b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c751:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c757:	ba 00 00 00 00       	mov    $0x0,%edx
f011c75c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c762:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c768:	29 d0                	sub    %edx,%eax
f011c76a:	01 d8                	add    %ebx,%eax
f011c76c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c771:	39 c1                	cmp    %eax,%ecx
f011c773:	74 17                	je     f011c78c <test_kmalloc_firstfit1+0x81c>
f011c775:	83 ec 04             	sub    $0x4,%esp
f011c778:	68 74 b0 13 f0       	push   $0xf013b074
f011c77d:	68 16 03 00 00       	push   $0x316
f011c782:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c787:	e8 6f 3a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c78c:	e8 ab 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c791:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c794:	74 17                	je     f011c7ad <test_kmalloc_firstfit1+0x83d>
f011c796:	83 ec 04             	sub    $0x4,%esp
f011c799:	68 74 ac 13 f0       	push   $0xf013ac74
f011c79e:	68 17 03 00 00       	push   $0x317
f011c7a3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c7a8:	e8 4e 3a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c7ad:	e8 17 01 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c7b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7b5:	29 c2                	sub    %eax,%edx
f011c7b7:	89 d0                	mov    %edx,%eax
f011c7b9:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c7be:	74 17                	je     f011c7d7 <test_kmalloc_firstfit1+0x867>
f011c7c0:	83 ec 04             	sub    $0x4,%esp
f011c7c3:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c7c8:	68 18 03 00 00       	push   $0x318
f011c7cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c7d2:	e8 24 3a fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7d7:	e8 ed 00 ff ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c7dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7df:	e8 58 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c7e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c7e7:	83 ec 0c             	sub    $0xc,%esp
f011c7ea:	68 00 fc 2f 00       	push   $0x2ffc00
f011c7ef:	e8 0a b0 fe ff       	call   f01077fe <kmalloc>
f011c7f4:	83 c4 10             	add    $0x10,%esp
f011c7f7:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c7fd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c803:	89 c1                	mov    %eax,%ecx
f011c805:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c80c:	10 00 00 
f011c80f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c815:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c81a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c820:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c826:	ba 00 00 00 00       	mov    $0x0,%edx
f011c82b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c831:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c837:	29 d0                	sub    %edx,%eax
f011c839:	89 c3                	mov    %eax,%ebx
f011c83b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c842:	10 00 00 
f011c845:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c84a:	0f b6 d0             	movzbl %al,%edx
f011c84d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c853:	01 d0                	add    %edx,%eax
f011c855:	48                   	dec    %eax
f011c856:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c85c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c862:	ba 00 00 00 00       	mov    $0x0,%edx
f011c867:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c86d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c873:	29 d0                	sub    %edx,%eax
f011c875:	01 c3                	add    %eax,%ebx
f011c877:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c87e:	10 00 00 
f011c881:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c886:	0f b6 c0             	movzbl %al,%eax
f011c889:	c1 e0 04             	shl    $0x4,%eax
f011c88c:	89 c2                	mov    %eax,%edx
f011c88e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c894:	01 d0                	add    %edx,%eax
f011c896:	48                   	dec    %eax
f011c897:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c89d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c8a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8a8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c8ae:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c8b4:	29 d0                	sub    %edx,%eax
f011c8b6:	01 d8                	add    %ebx,%eax
f011c8b8:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c8bd:	39 c1                	cmp    %eax,%ecx
f011c8bf:	74 17                	je     f011c8d8 <test_kmalloc_firstfit1+0x968>
f011c8c1:	83 ec 04             	sub    $0x4,%esp
f011c8c4:	68 74 b0 13 f0       	push   $0xf013b074
f011c8c9:	68 1e 03 00 00       	push   $0x31e
f011c8ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c8d3:	e8 23 39 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8d8:	e8 5f 74 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c8dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8e0:	74 17                	je     f011c8f9 <test_kmalloc_firstfit1+0x989>
f011c8e2:	83 ec 04             	sub    $0x4,%esp
f011c8e5:	68 74 ac 13 f0       	push   $0xf013ac74
f011c8ea:	68 1f 03 00 00       	push   $0x31f
f011c8ef:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c8f4:	e8 02 39 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c8f9:	e8 cb ff fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c8fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c901:	29 c2                	sub    %eax,%edx
f011c903:	89 d0                	mov    %edx,%eax
f011c905:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c90a:	74 17                	je     f011c923 <test_kmalloc_firstfit1+0x9b3>
f011c90c:	83 ec 04             	sub    $0x4,%esp
f011c90f:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c914:	68 20 03 00 00       	push   $0x320
f011c919:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c91e:	e8 d8 38 fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c923:	e8 a1 ff fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c928:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c92b:	e8 0c 74 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c930:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c933:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c939:	83 ec 0c             	sub    $0xc,%esp
f011c93c:	50                   	push   %eax
f011c93d:	e8 7e af fe ff       	call   f01078c0 <kfree>
f011c942:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c945:	e8 f2 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c94a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c94d:	74 17                	je     f011c966 <test_kmalloc_firstfit1+0x9f6>
f011c94f:	83 ec 04             	sub    $0x4,%esp
f011c952:	68 74 ac 13 f0       	push   $0xf013ac74
f011c957:	68 29 03 00 00       	push   $0x329
f011c95c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c961:	e8 95 38 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c966:	e8 5e ff fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c96b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c96e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c973:	74 17                	je     f011c98c <test_kmalloc_firstfit1+0xa1c>
f011c975:	83 ec 04             	sub    $0x4,%esp
f011c978:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011c97d:	68 2a 03 00 00       	push   $0x32a
f011c982:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c987:	e8 6f 38 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c98c:	e8 38 ff fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c991:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c994:	e8 a3 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c999:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c99c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c9a2:	83 ec 0c             	sub    $0xc,%esp
f011c9a5:	50                   	push   %eax
f011c9a6:	e8 15 af fe ff       	call   f01078c0 <kfree>
f011c9ab:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9ae:	e8 89 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c9b3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9b6:	74 17                	je     f011c9cf <test_kmalloc_firstfit1+0xa5f>
f011c9b8:	83 ec 04             	sub    $0x4,%esp
f011c9bb:	68 74 ac 13 f0       	push   $0xf013ac74
f011c9c0:	68 30 03 00 00       	push   $0x330
f011c9c5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c9ca:	e8 2c 38 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c9cf:	e8 f5 fe fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c9d4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c9d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c9dc:	74 17                	je     f011c9f5 <test_kmalloc_firstfit1+0xa85>
f011c9de:	83 ec 04             	sub    $0x4,%esp
f011c9e1:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011c9e6:	68 31 03 00 00       	push   $0x331
f011c9eb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c9f0:	e8 06 38 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c9f5:	e8 cf fe fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011c9fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9fd:	e8 3a 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca02:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011ca05:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ca0b:	83 ec 0c             	sub    $0xc,%esp
f011ca0e:	50                   	push   %eax
f011ca0f:	e8 ac ae fe ff       	call   f01078c0 <kfree>
f011ca14:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca17:	e8 20 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca1c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca1f:	74 17                	je     f011ca38 <test_kmalloc_firstfit1+0xac8>
f011ca21:	83 ec 04             	sub    $0x4,%esp
f011ca24:	68 74 ac 13 f0       	push   $0xf013ac74
f011ca29:	68 37 03 00 00       	push   $0x337
f011ca2e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ca33:	e8 c3 37 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011ca38:	e8 8c fe fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ca3d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ca40:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ca45:	74 17                	je     f011ca5e <test_kmalloc_firstfit1+0xaee>
f011ca47:	83 ec 04             	sub    $0x4,%esp
f011ca4a:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011ca4f:	68 38 03 00 00       	push   $0x338
f011ca54:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ca59:	e8 9d 37 fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ca5e:	e8 66 fe fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ca63:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca66:	e8 d1 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011ca6e:	83 ec 0c             	sub    $0xc,%esp
f011ca71:	68 00 fc 07 00       	push   $0x7fc00
f011ca76:	e8 83 ad fe ff       	call   f01077fe <kmalloc>
f011ca7b:	83 c4 10             	add    $0x10,%esp
f011ca7e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011ca84:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ca8a:	89 c1                	mov    %eax,%ecx
f011ca8c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ca93:	10 00 00 
f011ca96:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ca9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011caa1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011caa7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011caad:	ba 00 00 00 00       	mov    $0x0,%edx
f011cab2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011cab8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cabe:	29 d0                	sub    %edx,%eax
f011cac0:	89 c3                	mov    %eax,%ebx
f011cac2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cac9:	10 00 00 
f011cacc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cad1:	0f b6 d0             	movzbl %al,%edx
f011cad4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cada:	01 d0                	add    %edx,%eax
f011cadc:	48                   	dec    %eax
f011cadd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011cae3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cae9:	ba 00 00 00 00       	mov    $0x0,%edx
f011caee:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011caf4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cafa:	29 d0                	sub    %edx,%eax
f011cafc:	01 c3                	add    %eax,%ebx
f011cafe:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011cb05:	10 00 00 
f011cb08:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cb0d:	0f b6 c0             	movzbl %al,%eax
f011cb10:	c1 e0 04             	shl    $0x4,%eax
f011cb13:	89 c2                	mov    %eax,%edx
f011cb15:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011cb1b:	01 d0                	add    %edx,%eax
f011cb1d:	48                   	dec    %eax
f011cb1e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011cb24:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cb2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb2f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011cb35:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cb3b:	29 d0                	sub    %edx,%eax
f011cb3d:	01 d8                	add    %ebx,%eax
f011cb3f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cb44:	39 c1                	cmp    %eax,%ecx
f011cb46:	74 17                	je     f011cb5f <test_kmalloc_firstfit1+0xbef>
f011cb48:	83 ec 04             	sub    $0x4,%esp
f011cb4b:	68 74 b0 13 f0       	push   $0xf013b074
f011cb50:	68 41 03 00 00       	push   $0x341
f011cb55:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cb5a:	e8 9c 36 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb5f:	e8 d8 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cb64:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb67:	74 17                	je     f011cb80 <test_kmalloc_firstfit1+0xc10>
f011cb69:	83 ec 04             	sub    $0x4,%esp
f011cb6c:	68 74 ac 13 f0       	push   $0xf013ac74
f011cb71:	68 42 03 00 00       	push   $0x342
f011cb76:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cb7b:	e8 7b 36 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011cb80:	e8 44 fd fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011cb85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb88:	29 c2                	sub    %eax,%edx
f011cb8a:	89 d0                	mov    %edx,%eax
f011cb8c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011cb91:	74 17                	je     f011cbaa <test_kmalloc_firstfit1+0xc3a>
f011cb93:	83 ec 04             	sub    $0x4,%esp
f011cb96:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011cb9b:	68 43 03 00 00       	push   $0x343
f011cba0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cba5:	e8 51 36 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011cbaa:	e8 1a fd fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011cbaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbb2:	e8 85 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cbb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011cbba:	83 ec 0c             	sub    $0xc,%esp
f011cbbd:	68 00 fc 0f 00       	push   $0xffc00
f011cbc2:	e8 37 ac fe ff       	call   f01077fe <kmalloc>
f011cbc7:	83 c4 10             	add    $0x10,%esp
f011cbca:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cbd0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011cbd6:	89 c1                	mov    %eax,%ecx
f011cbd8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011cbdf:	10 00 00 
f011cbe2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011cbe8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbed:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011cbf3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cbf9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbfe:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011cc04:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cc0a:	29 d0                	sub    %edx,%eax
f011cc0c:	89 c3                	mov    %eax,%ebx
f011cc0e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011cc15:	10 00 00 
f011cc18:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cc1d:	0f b6 d0             	movzbl %al,%edx
f011cc20:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011cc26:	01 d0                	add    %edx,%eax
f011cc28:	48                   	dec    %eax
f011cc29:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011cc2f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc3a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011cc40:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cc46:	29 d0                	sub    %edx,%eax
f011cc48:	01 c3                	add    %eax,%ebx
f011cc4a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011cc51:	10 00 00 
f011cc54:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cc59:	0f b6 c0             	movzbl %al,%eax
f011cc5c:	c1 e0 04             	shl    $0x4,%eax
f011cc5f:	89 c2                	mov    %eax,%edx
f011cc61:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cc67:	01 d0                	add    %edx,%eax
f011cc69:	48                   	dec    %eax
f011cc6a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011cc70:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cc76:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc7b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011cc81:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cc87:	29 d0                	sub    %edx,%eax
f011cc89:	01 d8                	add    %ebx,%eax
f011cc8b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cc90:	39 c1                	cmp    %eax,%ecx
f011cc92:	74 17                	je     f011ccab <test_kmalloc_firstfit1+0xd3b>
f011cc94:	83 ec 04             	sub    $0x4,%esp
f011cc97:	68 74 b0 13 f0       	push   $0xf013b074
f011cc9c:	68 49 03 00 00       	push   $0x349
f011cca1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cca6:	e8 50 35 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccab:	e8 8c 70 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ccb0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccb3:	74 17                	je     f011cccc <test_kmalloc_firstfit1+0xd5c>
f011ccb5:	83 ec 04             	sub    $0x4,%esp
f011ccb8:	68 74 ac 13 f0       	push   $0xf013ac74
f011ccbd:	68 4a 03 00 00       	push   $0x34a
f011ccc2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ccc7:	e8 2f 35 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cccc:	e8 f8 fb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ccd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ccd4:	29 c2                	sub    %eax,%edx
f011ccd6:	89 d0                	mov    %edx,%eax
f011ccd8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ccdd:	74 17                	je     f011ccf6 <test_kmalloc_firstfit1+0xd86>
f011ccdf:	83 ec 04             	sub    $0x4,%esp
f011cce2:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011cce7:	68 4b 03 00 00       	push   $0x34b
f011ccec:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ccf1:	e8 05 35 fe ff       	call   f01001fb <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ccf6:	e8 ce fb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ccfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccfe:	e8 39 70 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cd03:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011cd06:	83 ec 0c             	sub    $0xc,%esp
f011cd09:	68 00 fc 03 00       	push   $0x3fc00
f011cd0e:	e8 eb aa fe ff       	call   f01077fe <kmalloc>
f011cd13:	83 c4 10             	add    $0x10,%esp
f011cd16:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011cd1c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cd22:	89 c1                	mov    %eax,%ecx
f011cd24:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011cd2b:	10 00 00 
f011cd2e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cd34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd39:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011cd3f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cd45:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd4a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011cd50:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cd56:	29 d0                	sub    %edx,%eax
f011cd58:	89 c3                	mov    %eax,%ebx
f011cd5a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011cd61:	10 00 00 
f011cd64:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cd69:	0f b6 d0             	movzbl %al,%edx
f011cd6c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cd72:	01 d0                	add    %edx,%eax
f011cd74:	48                   	dec    %eax
f011cd75:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011cd7b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cd81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd86:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011cd8c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cd92:	29 d0                	sub    %edx,%eax
f011cd94:	01 c3                	add    %eax,%ebx
f011cd96:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011cd9d:	10 00 00 
f011cda0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cda5:	0f b6 c0             	movzbl %al,%eax
f011cda8:	c1 e0 04             	shl    $0x4,%eax
f011cdab:	89 c2                	mov    %eax,%edx
f011cdad:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cdb3:	01 d0                	add    %edx,%eax
f011cdb5:	48                   	dec    %eax
f011cdb6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011cdbc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cdc2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdc7:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011cdcd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cdd3:	29 d0                	sub    %edx,%eax
f011cdd5:	01 d8                	add    %ebx,%eax
f011cdd7:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011cddc:	39 c1                	cmp    %eax,%ecx
f011cdde:	74 17                	je     f011cdf7 <test_kmalloc_firstfit1+0xe87>
f011cde0:	83 ec 04             	sub    $0x4,%esp
f011cde3:	68 74 b0 13 f0       	push   $0xf013b074
f011cde8:	68 52 03 00 00       	push   $0x352
f011cded:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cdf2:	e8 04 34 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cdf7:	e8 40 6f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cdfc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cdff:	74 17                	je     f011ce18 <test_kmalloc_firstfit1+0xea8>
f011ce01:	83 ec 04             	sub    $0x4,%esp
f011ce04:	68 74 ac 13 f0       	push   $0xf013ac74
f011ce09:	68 53 03 00 00       	push   $0x353
f011ce0e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ce13:	e8 e3 33 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011ce18:	e8 ac fa fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ce1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce20:	29 c2                	sub    %eax,%edx
f011ce22:	89 d0                	mov    %edx,%eax
f011ce24:	83 f8 40             	cmp    $0x40,%eax
f011ce27:	74 17                	je     f011ce40 <test_kmalloc_firstfit1+0xed0>
f011ce29:	83 ec 04             	sub    $0x4,%esp
f011ce2c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ce31:	68 54 03 00 00       	push   $0x354
f011ce36:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ce3b:	e8 bb 33 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ce40:	e8 84 fa fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ce45:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce48:	e8 ef 6e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ce4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011ce50:	83 ec 0c             	sub    $0xc,%esp
f011ce53:	68 00 00 20 00       	push   $0x200000
f011ce58:	e8 a1 a9 fe ff       	call   f01077fe <kmalloc>
f011ce5d:	83 c4 10             	add    $0x10,%esp
f011ce60:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ce66:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ce6c:	89 c1                	mov    %eax,%ecx
f011ce6e:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ce75:	10 00 00 
f011ce78:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ce7e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce83:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ce89:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ce8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce94:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ce9a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011cea0:	29 d0                	sub    %edx,%eax
f011cea2:	89 c3                	mov    %eax,%ebx
f011cea4:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ceab:	10 00 00 
f011ceae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ceb3:	0f b6 d0             	movzbl %al,%edx
f011ceb6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cebc:	01 d0                	add    %edx,%eax
f011cebe:	48                   	dec    %eax
f011cebf:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011cec5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cecb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ced0:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ced6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cedc:	29 d0                	sub    %edx,%eax
f011cede:	01 c3                	add    %eax,%ebx
f011cee0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011cee7:	10 00 00 
f011ceea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ceef:	0f b6 c0             	movzbl %al,%eax
f011cef2:	c1 e0 04             	shl    $0x4,%eax
f011cef5:	89 c2                	mov    %eax,%edx
f011cef7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cefd:	01 d0                	add    %edx,%eax
f011ceff:	48                   	dec    %eax
f011cf00:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011cf06:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf0c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf11:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cf17:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf1d:	29 d0                	sub    %edx,%eax
f011cf1f:	01 d8                	add    %ebx,%eax
f011cf21:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cf26:	39 c1                	cmp    %eax,%ecx
f011cf28:	74 17                	je     f011cf41 <test_kmalloc_firstfit1+0xfd1>
f011cf2a:	83 ec 04             	sub    $0x4,%esp
f011cf2d:	68 74 b0 13 f0       	push   $0xf013b074
f011cf32:	68 5a 03 00 00       	push   $0x35a
f011cf37:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cf3c:	e8 ba 32 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cf41:	e8 83 f9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011cf46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf49:	29 c2                	sub    %eax,%edx
f011cf4b:	89 d0                	mov    %edx,%eax
f011cf4d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf52:	74 17                	je     f011cf6b <test_kmalloc_firstfit1+0xffb>
f011cf54:	83 ec 04             	sub    $0x4,%esp
f011cf57:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011cf5c:	68 5b 03 00 00       	push   $0x35b
f011cf61:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cf66:	e8 90 32 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf6b:	e8 cc 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cf70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf73:	74 17                	je     f011cf8c <test_kmalloc_firstfit1+0x101c>
f011cf75:	83 ec 04             	sub    $0x4,%esp
f011cf78:	68 74 ac 13 f0       	push   $0xf013ac74
f011cf7d:	68 5c 03 00 00       	push   $0x35c
f011cf82:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cf87:	e8 6f 32 fe ff       	call   f01001fb <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011cf8c:	e8 38 f9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011cf91:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf94:	e8 a3 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cf99:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011cf9c:	83 ec 0c             	sub    $0xc,%esp
f011cf9f:	68 00 fc 3f 00       	push   $0x3ffc00
f011cfa4:	e8 55 a8 fe ff       	call   f01077fe <kmalloc>
f011cfa9:	83 c4 10             	add    $0x10,%esp
f011cfac:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011cfb2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cfb8:	89 c1                	mov    %eax,%ecx
f011cfba:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cfc1:	10 00 00 
f011cfc4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cfca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfcf:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cfd5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cfdb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfe0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cfe6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cfec:	29 d0                	sub    %edx,%eax
f011cfee:	89 c3                	mov    %eax,%ebx
f011cff0:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cff7:	10 00 00 
f011cffa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cfff:	0f b6 d0             	movzbl %al,%edx
f011d002:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d008:	01 d0                	add    %edx,%eax
f011d00a:	48                   	dec    %eax
f011d00b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d011:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d017:	ba 00 00 00 00       	mov    $0x0,%edx
f011d01c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d022:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d028:	29 d0                	sub    %edx,%eax
f011d02a:	01 c3                	add    %eax,%ebx
f011d02c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d033:	10 00 00 
f011d036:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d03b:	0f b6 c0             	movzbl %al,%eax
f011d03e:	c1 e0 04             	shl    $0x4,%eax
f011d041:	89 c2                	mov    %eax,%edx
f011d043:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d049:	01 d0                	add    %edx,%eax
f011d04b:	48                   	dec    %eax
f011d04c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d052:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d058:	ba 00 00 00 00       	mov    $0x0,%edx
f011d05d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d063:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d069:	29 d0                	sub    %edx,%eax
f011d06b:	01 d8                	add    %ebx,%eax
f011d06d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d072:	39 c1                	cmp    %eax,%ecx
f011d074:	74 17                	je     f011d08d <test_kmalloc_firstfit1+0x111d>
f011d076:	83 ec 04             	sub    $0x4,%esp
f011d079:	68 74 b0 13 f0       	push   $0xf013b074
f011d07e:	68 63 03 00 00       	push   $0x363
f011d083:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d088:	e8 6e 31 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d08d:	e8 aa 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d092:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d095:	74 17                	je     f011d0ae <test_kmalloc_firstfit1+0x113e>
f011d097:	83 ec 04             	sub    $0x4,%esp
f011d09a:	68 74 ac 13 f0       	push   $0xf013ac74
f011d09f:	68 64 03 00 00       	push   $0x364
f011d0a4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d0a9:	e8 4d 31 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d0ae:	e8 16 f8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d0b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0b6:	29 c2                	sub    %eax,%edx
f011d0b8:	89 d0                	mov    %edx,%eax
f011d0ba:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d0bf:	74 17                	je     f011d0d8 <test_kmalloc_firstfit1+0x1168>
f011d0c1:	83 ec 04             	sub    $0x4,%esp
f011d0c4:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d0c9:	68 65 03 00 00       	push   $0x365
f011d0ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d0d3:	e8 23 31 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d0d8:	e8 ec f7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d0dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0e0:	e8 57 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d0e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d0e8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d0ee:	83 ec 0c             	sub    $0xc,%esp
f011d0f1:	50                   	push   %eax
f011d0f2:	e8 c9 a7 fe ff       	call   f01078c0 <kfree>
f011d0f7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0fa:	e8 3d 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d0ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d102:	74 17                	je     f011d11b <test_kmalloc_firstfit1+0x11ab>
f011d104:	83 ec 04             	sub    $0x4,%esp
f011d107:	68 74 ac 13 f0       	push   $0xf013ac74
f011d10c:	68 6e 03 00 00       	push   $0x36e
f011d111:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d116:	e8 e0 30 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d11b:	e8 a9 f7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d120:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d123:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d128:	74 17                	je     f011d141 <test_kmalloc_firstfit1+0x11d1>
f011d12a:	83 ec 04             	sub    $0x4,%esp
f011d12d:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011d132:	68 6f 03 00 00       	push   $0x36f
f011d137:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d13c:	e8 ba 30 fe ff       	call   f01001fb <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d141:	e8 83 f7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d146:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d149:	e8 ee 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d14e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d151:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d157:	83 ec 0c             	sub    $0xc,%esp
f011d15a:	50                   	push   %eax
f011d15b:	e8 60 a7 fe ff       	call   f01078c0 <kfree>
f011d160:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d163:	e8 d4 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d168:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d16b:	74 17                	je     f011d184 <test_kmalloc_firstfit1+0x1214>
f011d16d:	83 ec 04             	sub    $0x4,%esp
f011d170:	68 74 ac 13 f0       	push   $0xf013ac74
f011d175:	68 75 03 00 00       	push   $0x375
f011d17a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d17f:	e8 77 30 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d184:	e8 40 f7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d189:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d18c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d191:	74 17                	je     f011d1aa <test_kmalloc_firstfit1+0x123a>
f011d193:	83 ec 04             	sub    $0x4,%esp
f011d196:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011d19b:	68 76 03 00 00       	push   $0x376
f011d1a0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d1a5:	e8 51 30 fe ff       	call   f01001fb <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d1aa:	e8 1a f7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d1af:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1b2:	e8 85 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d1b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d1ba:	83 ec 0c             	sub    $0xc,%esp
f011d1bd:	68 00 00 10 00       	push   $0x100000
f011d1c2:	e8 37 a6 fe ff       	call   f01077fe <kmalloc>
f011d1c7:	83 c4 10             	add    $0x10,%esp
f011d1ca:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d1d0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d1d6:	89 c1                	mov    %eax,%ecx
f011d1d8:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d1df:	10 00 00 
f011d1e2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d1e8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1ed:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d1f3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d1f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1fe:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d204:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d20a:	29 d0                	sub    %edx,%eax
f011d20c:	89 c3                	mov    %eax,%ebx
f011d20e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d215:	10 00 00 
f011d218:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d21d:	0f b6 d0             	movzbl %al,%edx
f011d220:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d226:	01 d0                	add    %edx,%eax
f011d228:	48                   	dec    %eax
f011d229:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d22f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d235:	ba 00 00 00 00       	mov    $0x0,%edx
f011d23a:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d240:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d246:	29 d0                	sub    %edx,%eax
f011d248:	01 c3                	add    %eax,%ebx
f011d24a:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d251:	10 00 00 
f011d254:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d259:	0f b6 c0             	movzbl %al,%eax
f011d25c:	c1 e0 04             	shl    $0x4,%eax
f011d25f:	89 c2                	mov    %eax,%edx
f011d261:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d267:	01 d0                	add    %edx,%eax
f011d269:	48                   	dec    %eax
f011d26a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d270:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d276:	ba 00 00 00 00       	mov    $0x0,%edx
f011d27b:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d281:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d287:	29 d0                	sub    %edx,%eax
f011d289:	01 d8                	add    %ebx,%eax
f011d28b:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d290:	39 c1                	cmp    %eax,%ecx
f011d292:	74 17                	je     f011d2ab <test_kmalloc_firstfit1+0x133b>
f011d294:	83 ec 04             	sub    $0x4,%esp
f011d297:	68 74 b0 13 f0       	push   $0xf013b074
f011d29c:	68 80 03 00 00       	push   $0x380
f011d2a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d2a6:	e8 50 2f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2ab:	e8 8c 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d2b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2b3:	74 17                	je     f011d2cc <test_kmalloc_firstfit1+0x135c>
f011d2b5:	83 ec 04             	sub    $0x4,%esp
f011d2b8:	68 74 ac 13 f0       	push   $0xf013ac74
f011d2bd:	68 81 03 00 00       	push   $0x381
f011d2c2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d2c7:	e8 2f 2f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d2cc:	e8 f8 f5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d2d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2d4:	29 c2                	sub    %eax,%edx
f011d2d6:	89 d0                	mov    %edx,%eax
f011d2d8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d2dd:	74 17                	je     f011d2f6 <test_kmalloc_firstfit1+0x1386>
f011d2df:	83 ec 04             	sub    $0x4,%esp
f011d2e2:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d2e7:	68 82 03 00 00       	push   $0x382
f011d2ec:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d2f1:	e8 05 2f fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d2f6:	83 ec 0c             	sub    $0xc,%esp
f011d2f9:	68 50 b2 13 f0       	push   $0xf013b250
f011d2fe:	e8 7f 39 fe ff       	call   f0100c82 <cprintf>
f011d303:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d306:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d30b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d30e:	5b                   	pop    %ebx
f011d30f:	5f                   	pop    %edi
f011d310:	5d                   	pop    %ebp
f011d311:	c3                   	ret    

f011d312 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d312:	55                   	push   %ebp
f011d313:	89 e5                	mov    %esp,%ebp
f011d315:	57                   	push   %edi
f011d316:	53                   	push   %ebx
f011d317:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d31d:	83 ec 0c             	sub    $0xc,%esp
f011d320:	68 9c ab 13 f0       	push   $0xf013ab9c
f011d325:	e8 58 39 fe ff       	call   f0100c82 <cprintf>
f011d32a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d32d:	83 ec 0c             	sub    $0xc,%esp
f011d330:	68 cc ab 13 f0       	push   $0xf013abcc
f011d335:	e8 48 39 fe ff       	call   f0100c82 <cprintf>
f011d33a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d33d:	83 ec 0c             	sub    $0xc,%esp
f011d340:	68 9c ab 13 f0       	push   $0xf013ab9c
f011d345:	e8 38 39 fe ff       	call   f0100c82 <cprintf>
f011d34a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d34d:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d353:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d358:	b8 00 00 00 00       	mov    $0x0,%eax
f011d35d:	89 d7                	mov    %edx,%edi
f011d35f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d361:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d368:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d36b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d370:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d373:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d376:	ba 00 00 00 00       	mov    $0x0,%edx
f011d37b:	f7 75 f4             	divl   -0xc(%ebp)
f011d37e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d381:	29 d0                	sub    %edx,%eax
f011d383:	89 c1                	mov    %eax,%ecx
f011d385:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d38c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d391:	0f b6 d0             	movzbl %al,%edx
f011d394:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d397:	01 d0                	add    %edx,%eax
f011d399:	48                   	dec    %eax
f011d39a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d39d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d3a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3a5:	f7 75 ec             	divl   -0x14(%ebp)
f011d3a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d3ab:	29 d0                	sub    %edx,%eax
f011d3ad:	01 c1                	add    %eax,%ecx
f011d3af:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d3b6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d3bb:	0f b6 c0             	movzbl %al,%eax
f011d3be:	c1 e0 04             	shl    $0x4,%eax
f011d3c1:	89 c2                	mov    %eax,%edx
f011d3c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d3c6:	01 d0                	add    %edx,%eax
f011d3c8:	48                   	dec    %eax
f011d3c9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d3cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d3cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3d4:	f7 75 e4             	divl   -0x1c(%ebp)
f011d3d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d3da:	29 d0                	sub    %edx,%eax
f011d3dc:	01 c8                	add    %ecx,%eax
f011d3de:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d3e3:	29 c2                	sub    %eax,%edx
f011d3e5:	89 d0                	mov    %edx,%eax
f011d3e7:	83 ec 0c             	sub    $0xc,%esp
f011d3ea:	50                   	push   %eax
f011d3eb:	e8 0e a4 fe ff       	call   f01077fe <kmalloc>
f011d3f0:	83 c4 10             	add    $0x10,%esp
f011d3f3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d3f9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d3ff:	85 c0                	test   %eax,%eax
f011d401:	74 17                	je     f011d41a <test_kmalloc_firstfit2+0x108>
f011d403:	83 ec 04             	sub    $0x4,%esp
f011d406:	68 9c b2 13 f0       	push   $0xf013b29c
f011d40b:	68 97 03 00 00       	push   $0x397
f011d410:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d415:	e8 e1 2d fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d41a:	e8 aa f4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d41f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d422:	e8 15 69 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d427:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d42a:	83 ec 0c             	sub    $0xc,%esp
f011d42d:	68 00 fc 1f 00       	push   $0x1ffc00
f011d432:	e8 c7 a3 fe ff       	call   f01077fe <kmalloc>
f011d437:	83 c4 10             	add    $0x10,%esp
f011d43a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d440:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d446:	89 c1                	mov    %eax,%ecx
f011d448:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d44f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d452:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d457:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d45a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d45d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d462:	f7 75 d4             	divl   -0x2c(%ebp)
f011d465:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d468:	29 d0                	sub    %edx,%eax
f011d46a:	89 c3                	mov    %eax,%ebx
f011d46c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d473:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d478:	0f b6 d0             	movzbl %al,%edx
f011d47b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d47e:	01 d0                	add    %edx,%eax
f011d480:	48                   	dec    %eax
f011d481:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d484:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d487:	ba 00 00 00 00       	mov    $0x0,%edx
f011d48c:	f7 75 cc             	divl   -0x34(%ebp)
f011d48f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d492:	29 d0                	sub    %edx,%eax
f011d494:	01 c3                	add    %eax,%ebx
f011d496:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d49d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d4a2:	0f b6 c0             	movzbl %al,%eax
f011d4a5:	c1 e0 04             	shl    $0x4,%eax
f011d4a8:	89 c2                	mov    %eax,%edx
f011d4aa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d4ad:	01 d0                	add    %edx,%eax
f011d4af:	48                   	dec    %eax
f011d4b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d4b3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4bb:	f7 75 c4             	divl   -0x3c(%ebp)
f011d4be:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4c1:	29 d0                	sub    %edx,%eax
f011d4c3:	01 d8                	add    %ebx,%eax
f011d4c5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d4ca:	39 c1                	cmp    %eax,%ecx
f011d4cc:	74 17                	je     f011d4e5 <test_kmalloc_firstfit2+0x1d3>
f011d4ce:	83 ec 04             	sub    $0x4,%esp
f011d4d1:	68 74 b0 13 f0       	push   $0xf013b074
f011d4d6:	68 a1 03 00 00       	push   $0x3a1
f011d4db:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d4e0:	e8 16 2d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4e5:	e8 52 68 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d4ea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d4ed:	74 17                	je     f011d506 <test_kmalloc_firstfit2+0x1f4>
f011d4ef:	83 ec 04             	sub    $0x4,%esp
f011d4f2:	68 74 ac 13 f0       	push   $0xf013ac74
f011d4f7:	68 a2 03 00 00       	push   $0x3a2
f011d4fc:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d501:	e8 f5 2c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d506:	e8 be f3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d50b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d50e:	29 c2                	sub    %eax,%edx
f011d510:	89 d0                	mov    %edx,%eax
f011d512:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d517:	74 17                	je     f011d530 <test_kmalloc_firstfit2+0x21e>
f011d519:	83 ec 04             	sub    $0x4,%esp
f011d51c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d521:	68 a3 03 00 00       	push   $0x3a3
f011d526:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d52b:	e8 cb 2c fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d530:	e8 94 f3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d535:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d538:	e8 ff 67 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d53d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d540:	83 ec 0c             	sub    $0xc,%esp
f011d543:	68 00 fc 1f 00       	push   $0x1ffc00
f011d548:	e8 b1 a2 fe ff       	call   f01077fe <kmalloc>
f011d54d:	83 c4 10             	add    $0x10,%esp
f011d550:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d556:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d55c:	89 c1                	mov    %eax,%ecx
f011d55e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d565:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d568:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d56d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d570:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d573:	ba 00 00 00 00       	mov    $0x0,%edx
f011d578:	f7 75 bc             	divl   -0x44(%ebp)
f011d57b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d57e:	29 d0                	sub    %edx,%eax
f011d580:	89 c3                	mov    %eax,%ebx
f011d582:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d589:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d58e:	0f b6 d0             	movzbl %al,%edx
f011d591:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d594:	01 d0                	add    %edx,%eax
f011d596:	48                   	dec    %eax
f011d597:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d59a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d59d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5a2:	f7 75 b4             	divl   -0x4c(%ebp)
f011d5a5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d5a8:	29 d0                	sub    %edx,%eax
f011d5aa:	01 c3                	add    %eax,%ebx
f011d5ac:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d5b3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d5b8:	0f b6 c0             	movzbl %al,%eax
f011d5bb:	c1 e0 04             	shl    $0x4,%eax
f011d5be:	89 c2                	mov    %eax,%edx
f011d5c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d5c3:	01 d0                	add    %edx,%eax
f011d5c5:	48                   	dec    %eax
f011d5c6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d5c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d5cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5d1:	f7 75 ac             	divl   -0x54(%ebp)
f011d5d4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d5d7:	29 d0                	sub    %edx,%eax
f011d5d9:	01 d8                	add    %ebx,%eax
f011d5db:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d5e0:	39 c1                	cmp    %eax,%ecx
f011d5e2:	74 17                	je     f011d5fb <test_kmalloc_firstfit2+0x2e9>
f011d5e4:	83 ec 04             	sub    $0x4,%esp
f011d5e7:	68 74 b0 13 f0       	push   $0xf013b074
f011d5ec:	68 a9 03 00 00       	push   $0x3a9
f011d5f1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d5f6:	e8 00 2c fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5fb:	e8 3c 67 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d600:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d603:	74 17                	je     f011d61c <test_kmalloc_firstfit2+0x30a>
f011d605:	83 ec 04             	sub    $0x4,%esp
f011d608:	68 74 ac 13 f0       	push   $0xf013ac74
f011d60d:	68 aa 03 00 00       	push   $0x3aa
f011d612:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d617:	e8 df 2b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d61c:	e8 a8 f2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d621:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d624:	29 c2                	sub    %eax,%edx
f011d626:	89 d0                	mov    %edx,%eax
f011d628:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d62d:	74 17                	je     f011d646 <test_kmalloc_firstfit2+0x334>
f011d62f:	83 ec 04             	sub    $0x4,%esp
f011d632:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d637:	68 ab 03 00 00       	push   $0x3ab
f011d63c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d641:	e8 b5 2b fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d646:	e8 7e f2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d64b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d64e:	e8 e9 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d653:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d656:	83 ec 0c             	sub    $0xc,%esp
f011d659:	68 00 08 00 00       	push   $0x800
f011d65e:	e8 9b a1 fe ff       	call   f01077fe <kmalloc>
f011d663:	83 c4 10             	add    $0x10,%esp
f011d666:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d66c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d672:	89 c1                	mov    %eax,%ecx
f011d674:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d67b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d67e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d683:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d686:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d689:	ba 00 00 00 00       	mov    $0x0,%edx
f011d68e:	f7 75 a4             	divl   -0x5c(%ebp)
f011d691:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d694:	29 d0                	sub    %edx,%eax
f011d696:	89 c3                	mov    %eax,%ebx
f011d698:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d69f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d6a4:	0f b6 d0             	movzbl %al,%edx
f011d6a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d6aa:	01 d0                	add    %edx,%eax
f011d6ac:	48                   	dec    %eax
f011d6ad:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d6b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d6b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6b8:	f7 75 9c             	divl   -0x64(%ebp)
f011d6bb:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d6be:	29 d0                	sub    %edx,%eax
f011d6c0:	01 c3                	add    %eax,%ebx
f011d6c2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d6c9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d6ce:	0f b6 c0             	movzbl %al,%eax
f011d6d1:	c1 e0 04             	shl    $0x4,%eax
f011d6d4:	89 c2                	mov    %eax,%edx
f011d6d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d6d9:	01 d0                	add    %edx,%eax
f011d6db:	48                   	dec    %eax
f011d6dc:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d6df:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d6e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6e7:	f7 75 94             	divl   -0x6c(%ebp)
f011d6ea:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d6ed:	29 d0                	sub    %edx,%eax
f011d6ef:	01 d8                	add    %ebx,%eax
f011d6f1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d6f6:	39 c1                	cmp    %eax,%ecx
f011d6f8:	73 17                	jae    f011d711 <test_kmalloc_firstfit2+0x3ff>
f011d6fa:	83 ec 04             	sub    $0x4,%esp
f011d6fd:	68 74 b0 13 f0       	push   $0xf013b074
f011d702:	68 b1 03 00 00       	push   $0x3b1
f011d707:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d70c:	e8 ea 2a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d711:	e8 26 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d716:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d719:	74 17                	je     f011d732 <test_kmalloc_firstfit2+0x420>
f011d71b:	83 ec 04             	sub    $0x4,%esp
f011d71e:	68 74 ac 13 f0       	push   $0xf013ac74
f011d723:	68 b2 03 00 00       	push   $0x3b2
f011d728:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d72d:	e8 c9 2a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d732:	e8 92 f1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d737:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d73a:	29 c2                	sub    %eax,%edx
f011d73c:	89 d0                	mov    %edx,%eax
f011d73e:	83 f8 01             	cmp    $0x1,%eax
f011d741:	74 17                	je     f011d75a <test_kmalloc_firstfit2+0x448>
f011d743:	83 ec 04             	sub    $0x4,%esp
f011d746:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d74b:	68 b3 03 00 00       	push   $0x3b3
f011d750:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d755:	e8 a1 2a fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d75a:	e8 6a f1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d75f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d762:	e8 d5 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d767:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d76a:	83 ec 0c             	sub    $0xc,%esp
f011d76d:	68 00 08 00 00       	push   $0x800
f011d772:	e8 87 a0 fe ff       	call   f01077fe <kmalloc>
f011d777:	83 c4 10             	add    $0x10,%esp
f011d77a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d780:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d786:	89 c1                	mov    %eax,%ecx
f011d788:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d78f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d792:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d797:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d79a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d79d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7a2:	f7 75 8c             	divl   -0x74(%ebp)
f011d7a5:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d7a8:	29 d0                	sub    %edx,%eax
f011d7aa:	89 c3                	mov    %eax,%ebx
f011d7ac:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d7b3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d7b8:	0f b6 d0             	movzbl %al,%edx
f011d7bb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d7be:	01 d0                	add    %edx,%eax
f011d7c0:	48                   	dec    %eax
f011d7c1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d7c4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d7c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7cc:	f7 75 84             	divl   -0x7c(%ebp)
f011d7cf:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d7d2:	29 d0                	sub    %edx,%eax
f011d7d4:	01 c3                	add    %eax,%ebx
f011d7d6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d7dd:	10 00 00 
f011d7e0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d7e5:	0f b6 c0             	movzbl %al,%eax
f011d7e8:	c1 e0 04             	shl    $0x4,%eax
f011d7eb:	89 c2                	mov    %eax,%edx
f011d7ed:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d7f3:	01 d0                	add    %edx,%eax
f011d7f5:	48                   	dec    %eax
f011d7f6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d7fc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d802:	ba 00 00 00 00       	mov    $0x0,%edx
f011d807:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d80d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d813:	29 d0                	sub    %edx,%eax
f011d815:	01 d8                	add    %ebx,%eax
f011d817:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d81c:	39 c1                	cmp    %eax,%ecx
f011d81e:	74 17                	je     f011d837 <test_kmalloc_firstfit2+0x525>
f011d820:	83 ec 04             	sub    $0x4,%esp
f011d823:	68 74 b0 13 f0       	push   $0xf013b074
f011d828:	68 b9 03 00 00       	push   $0x3b9
f011d82d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d832:	e8 c4 29 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d837:	e8 00 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d83c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d83f:	74 17                	je     f011d858 <test_kmalloc_firstfit2+0x546>
f011d841:	83 ec 04             	sub    $0x4,%esp
f011d844:	68 74 ac 13 f0       	push   $0xf013ac74
f011d849:	68 ba 03 00 00       	push   $0x3ba
f011d84e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d853:	e8 a3 29 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d858:	e8 6c f0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d85d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d860:	29 c2                	sub    %eax,%edx
f011d862:	89 d0                	mov    %edx,%eax
f011d864:	83 f8 01             	cmp    $0x1,%eax
f011d867:	74 17                	je     f011d880 <test_kmalloc_firstfit2+0x56e>
f011d869:	83 ec 04             	sub    $0x4,%esp
f011d86c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d871:	68 bb 03 00 00       	push   $0x3bb
f011d876:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d87b:	e8 7b 29 fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d880:	e8 44 f0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d885:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d888:	e8 af 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d88d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d890:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d896:	83 ec 0c             	sub    $0xc,%esp
f011d899:	50                   	push   %eax
f011d89a:	e8 21 a0 fe ff       	call   f01078c0 <kfree>
f011d89f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8a2:	e8 95 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d8a7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8aa:	74 17                	je     f011d8c3 <test_kmalloc_firstfit2+0x5b1>
f011d8ac:	83 ec 04             	sub    $0x4,%esp
f011d8af:	68 74 ac 13 f0       	push   $0xf013ac74
f011d8b4:	68 c1 03 00 00       	push   $0x3c1
f011d8b9:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d8be:	e8 38 29 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d8c3:	e8 01 f0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d8c8:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d8cb:	83 f8 01             	cmp    $0x1,%eax
f011d8ce:	74 17                	je     f011d8e7 <test_kmalloc_firstfit2+0x5d5>
f011d8d0:	83 ec 04             	sub    $0x4,%esp
f011d8d3:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011d8d8:	68 c2 03 00 00       	push   $0x3c2
f011d8dd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d8e2:	e8 14 29 fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d8e7:	e8 dd ef fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011d8ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8ef:	e8 48 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d8f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d8f7:	83 ec 0c             	sub    $0xc,%esp
f011d8fa:	68 00 1c 00 00       	push   $0x1c00
f011d8ff:	e8 fa 9e fe ff       	call   f01077fe <kmalloc>
f011d904:	83 c4 10             	add    $0x10,%esp
f011d907:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d90d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d913:	89 c1                	mov    %eax,%ecx
f011d915:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d91c:	10 00 00 
f011d91f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d925:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d92a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d930:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d936:	ba 00 00 00 00       	mov    $0x0,%edx
f011d93b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d941:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d947:	29 d0                	sub    %edx,%eax
f011d949:	89 c3                	mov    %eax,%ebx
f011d94b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d952:	10 00 00 
f011d955:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d95a:	0f b6 d0             	movzbl %al,%edx
f011d95d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d963:	01 d0                	add    %edx,%eax
f011d965:	48                   	dec    %eax
f011d966:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d96c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d972:	ba 00 00 00 00       	mov    $0x0,%edx
f011d977:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d97d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d983:	29 d0                	sub    %edx,%eax
f011d985:	01 c3                	add    %eax,%ebx
f011d987:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d98e:	10 00 00 
f011d991:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d996:	0f b6 c0             	movzbl %al,%eax
f011d999:	c1 e0 04             	shl    $0x4,%eax
f011d99c:	89 c2                	mov    %eax,%edx
f011d99e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d9a4:	01 d0                	add    %edx,%eax
f011d9a6:	48                   	dec    %eax
f011d9a7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d9ad:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d9b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9b8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d9be:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d9c4:	29 d0                	sub    %edx,%eax
f011d9c6:	01 d8                	add    %ebx,%eax
f011d9c8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d9cd:	39 c1                	cmp    %eax,%ecx
f011d9cf:	74 17                	je     f011d9e8 <test_kmalloc_firstfit2+0x6d6>
f011d9d1:	83 ec 04             	sub    $0x4,%esp
f011d9d4:	68 74 b0 13 f0       	push   $0xf013b074
f011d9d9:	68 c8 03 00 00       	push   $0x3c8
f011d9de:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d9e3:	e8 13 28 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9e8:	e8 4f 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d9ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d9f0:	74 17                	je     f011da09 <test_kmalloc_firstfit2+0x6f7>
f011d9f2:	83 ec 04             	sub    $0x4,%esp
f011d9f5:	68 74 ac 13 f0       	push   $0xf013ac74
f011d9fa:	68 c9 03 00 00       	push   $0x3c9
f011d9ff:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da04:	e8 f2 27 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011da09:	e8 bb ee fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011da0e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011da11:	29 c2                	sub    %eax,%edx
f011da13:	89 d0                	mov    %edx,%eax
f011da15:	83 f8 02             	cmp    $0x2,%eax
f011da18:	74 17                	je     f011da31 <test_kmalloc_firstfit2+0x71f>
f011da1a:	83 ec 04             	sub    $0x4,%esp
f011da1d:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011da22:	68 ca 03 00 00       	push   $0x3ca
f011da27:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da2c:	e8 ca 27 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011da31:	e8 93 ee fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011da36:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da39:	e8 fe 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011da41:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011da47:	83 ec 0c             	sub    $0xc,%esp
f011da4a:	50                   	push   %eax
f011da4b:	e8 70 9e fe ff       	call   f01078c0 <kfree>
f011da50:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da53:	e8 e4 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da58:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da5b:	74 17                	je     f011da74 <test_kmalloc_firstfit2+0x762>
f011da5d:	83 ec 04             	sub    $0x4,%esp
f011da60:	68 74 ac 13 f0       	push   $0xf013ac74
f011da65:	68 d0 03 00 00       	push   $0x3d0
f011da6a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da6f:	e8 87 27 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011da74:	e8 50 ee fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011da79:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011da7c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da81:	74 17                	je     f011da9a <test_kmalloc_firstfit2+0x788>
f011da83:	83 ec 04             	sub    $0x4,%esp
f011da86:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011da8b:	68 d1 03 00 00       	push   $0x3d1
f011da90:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da95:	e8 61 27 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011da9a:	e8 2a ee fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011da9f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011daa2:	e8 95 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011daa7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011daaa:	83 ec 0c             	sub    $0xc,%esp
f011daad:	68 00 fc 2f 00       	push   $0x2ffc00
f011dab2:	e8 47 9d fe ff       	call   f01077fe <kmalloc>
f011dab7:	83 c4 10             	add    $0x10,%esp
f011daba:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dac0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dac6:	89 c1                	mov    %eax,%ecx
f011dac8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dacf:	10 00 00 
f011dad2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dad8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dadd:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011dae3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dae9:	ba 00 00 00 00       	mov    $0x0,%edx
f011daee:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011daf4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dafa:	29 d0                	sub    %edx,%eax
f011dafc:	89 c3                	mov    %eax,%ebx
f011dafe:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011db05:	10 00 00 
f011db08:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011db0d:	0f b6 d0             	movzbl %al,%edx
f011db10:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011db16:	01 d0                	add    %edx,%eax
f011db18:	48                   	dec    %eax
f011db19:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011db1f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011db25:	ba 00 00 00 00       	mov    $0x0,%edx
f011db2a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011db30:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011db36:	29 d0                	sub    %edx,%eax
f011db38:	01 c3                	add    %eax,%ebx
f011db3a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011db41:	10 00 00 
f011db44:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011db49:	0f b6 c0             	movzbl %al,%eax
f011db4c:	c1 e0 04             	shl    $0x4,%eax
f011db4f:	89 c2                	mov    %eax,%edx
f011db51:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011db57:	01 d0                	add    %edx,%eax
f011db59:	48                   	dec    %eax
f011db5a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011db60:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011db66:	ba 00 00 00 00       	mov    $0x0,%edx
f011db6b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011db71:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011db77:	29 d0                	sub    %edx,%eax
f011db79:	01 d8                	add    %ebx,%eax
f011db7b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011db80:	39 c1                	cmp    %eax,%ecx
f011db82:	74 17                	je     f011db9b <test_kmalloc_firstfit2+0x889>
f011db84:	83 ec 04             	sub    $0x4,%esp
f011db87:	68 74 b0 13 f0       	push   $0xf013b074
f011db8c:	68 d7 03 00 00       	push   $0x3d7
f011db91:	68 5a ac 13 f0       	push   $0xf013ac5a
f011db96:	e8 60 26 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db9b:	e8 9c 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dba0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dba3:	74 17                	je     f011dbbc <test_kmalloc_firstfit2+0x8aa>
f011dba5:	83 ec 04             	sub    $0x4,%esp
f011dba8:	68 74 ac 13 f0       	push   $0xf013ac74
f011dbad:	68 d8 03 00 00       	push   $0x3d8
f011dbb2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dbb7:	e8 3f 26 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dbbc:	e8 08 ed fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011dbc1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dbc4:	29 c2                	sub    %eax,%edx
f011dbc6:	89 d0                	mov    %edx,%eax
f011dbc8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dbcd:	74 17                	je     f011dbe6 <test_kmalloc_firstfit2+0x8d4>
f011dbcf:	83 ec 04             	sub    $0x4,%esp
f011dbd2:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011dbd7:	68 d9 03 00 00       	push   $0x3d9
f011dbdc:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dbe1:	e8 15 26 fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011dbe6:	e8 de ec fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011dbeb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbee:	e8 49 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dbf3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011dbf6:	83 ec 0c             	sub    $0xc,%esp
f011dbf9:	68 00 18 20 00       	push   $0x201800
f011dbfe:	e8 fb 9b fe ff       	call   f01077fe <kmalloc>
f011dc03:	83 c4 10             	add    $0x10,%esp
f011dc06:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dc0c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dc12:	89 c1                	mov    %eax,%ecx
f011dc14:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dc1b:	10 00 00 
f011dc1e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dc24:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc29:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011dc2f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc3a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011dc40:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dc46:	29 d0                	sub    %edx,%eax
f011dc48:	89 c3                	mov    %eax,%ebx
f011dc4a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011dc51:	10 00 00 
f011dc54:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dc59:	0f b6 d0             	movzbl %al,%edx
f011dc5c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dc62:	01 d0                	add    %edx,%eax
f011dc64:	48                   	dec    %eax
f011dc65:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011dc6b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dc71:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc76:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011dc7c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dc82:	29 d0                	sub    %edx,%eax
f011dc84:	01 c3                	add    %eax,%ebx
f011dc86:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011dc8d:	10 00 00 
f011dc90:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dc95:	0f b6 c0             	movzbl %al,%eax
f011dc98:	c1 e0 04             	shl    $0x4,%eax
f011dc9b:	89 c2                	mov    %eax,%edx
f011dc9d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011dca3:	01 d0                	add    %edx,%eax
f011dca5:	48                   	dec    %eax
f011dca6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011dcac:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dcb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcb7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011dcbd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dcc3:	29 d0                	sub    %edx,%eax
f011dcc5:	01 d8                	add    %ebx,%eax
f011dcc7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011dccc:	39 c1                	cmp    %eax,%ecx
f011dcce:	74 17                	je     f011dce7 <test_kmalloc_firstfit2+0x9d5>
f011dcd0:	83 ec 04             	sub    $0x4,%esp
f011dcd3:	68 74 b0 13 f0       	push   $0xf013b074
f011dcd8:	68 df 03 00 00       	push   $0x3df
f011dcdd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dce2:	e8 14 25 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dce7:	e8 50 60 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dcec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dcef:	74 17                	je     f011dd08 <test_kmalloc_firstfit2+0x9f6>
f011dcf1:	83 ec 04             	sub    $0x4,%esp
f011dcf4:	68 74 ac 13 f0       	push   $0xf013ac74
f011dcf9:	68 e0 03 00 00       	push   $0x3e0
f011dcfe:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd03:	e8 f3 24 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dd08:	e8 bc eb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011dd0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dd10:	29 c2                	sub    %eax,%edx
f011dd12:	89 d0                	mov    %edx,%eax
f011dd14:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dd19:	74 17                	je     f011dd32 <test_kmalloc_firstfit2+0xa20>
f011dd1b:	83 ec 04             	sub    $0x4,%esp
f011dd1e:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011dd23:	68 e1 03 00 00       	push   $0x3e1
f011dd28:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd2d:	e8 c9 24 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dd32:	e8 92 eb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011dd37:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd3a:	e8 fd 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd3f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011dd42:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dd48:	83 ec 0c             	sub    $0xc,%esp
f011dd4b:	50                   	push   %eax
f011dd4c:	e8 6f 9b fe ff       	call   f01078c0 <kfree>
f011dd51:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd54:	e8 e3 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd59:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd5c:	74 17                	je     f011dd75 <test_kmalloc_firstfit2+0xa63>
f011dd5e:	83 ec 04             	sub    $0x4,%esp
f011dd61:	68 74 ac 13 f0       	push   $0xf013ac74
f011dd66:	68 e7 03 00 00       	push   $0x3e7
f011dd6b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd70:	e8 86 24 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dd75:	e8 4f eb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011dd7a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dd7d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dd82:	74 17                	je     f011dd9b <test_kmalloc_firstfit2+0xa89>
f011dd84:	83 ec 04             	sub    $0x4,%esp
f011dd87:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011dd8c:	68 e8 03 00 00       	push   $0x3e8
f011dd91:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd96:	e8 60 24 fe ff       	call   f01001fb <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dd9b:	e8 29 eb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011dda0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dda3:	e8 94 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dda8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011ddab:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ddb1:	83 ec 0c             	sub    $0xc,%esp
f011ddb4:	50                   	push   %eax
f011ddb5:	e8 06 9b fe ff       	call   f01078c0 <kfree>
f011ddba:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ddbd:	e8 07 eb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ddc2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ddc5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ddca:	74 17                	je     f011dde3 <test_kmalloc_firstfit2+0xad1>
f011ddcc:	83 ec 04             	sub    $0x4,%esp
f011ddcf:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011ddd4:	68 ee 03 00 00       	push   $0x3ee
f011ddd9:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ddde:	e8 18 24 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dde3:	e8 54 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dde8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ddeb:	74 17                	je     f011de04 <test_kmalloc_firstfit2+0xaf2>
f011dded:	83 ec 04             	sub    $0x4,%esp
f011ddf0:	68 74 ac 13 f0       	push   $0xf013ac74
f011ddf5:	68 ef 03 00 00       	push   $0x3ef
f011ddfa:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ddff:	e8 f7 23 fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011de04:	e8 c0 ea fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011de09:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de0c:	e8 2b 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011de11:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011de14:	83 ec 0c             	sub    $0xc,%esp
f011de17:	68 00 fc 4f 00       	push   $0x4ffc00
f011de1c:	e8 dd 99 fe ff       	call   f01077fe <kmalloc>
f011de21:	83 c4 10             	add    $0x10,%esp
f011de24:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011de2a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011de30:	89 c1                	mov    %eax,%ecx
f011de32:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011de39:	10 00 00 
f011de3c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011de42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de47:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011de4d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de53:	ba 00 00 00 00       	mov    $0x0,%edx
f011de58:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011de5e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de64:	29 d0                	sub    %edx,%eax
f011de66:	89 c3                	mov    %eax,%ebx
f011de68:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011de6f:	10 00 00 
f011de72:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011de77:	0f b6 d0             	movzbl %al,%edx
f011de7a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011de80:	01 d0                	add    %edx,%eax
f011de82:	48                   	dec    %eax
f011de83:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011de89:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011de94:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011de9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011dea0:	29 d0                	sub    %edx,%eax
f011dea2:	01 c3                	add    %eax,%ebx
f011dea4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011deab:	10 00 00 
f011deae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011deb3:	0f b6 c0             	movzbl %al,%eax
f011deb6:	c1 e0 04             	shl    $0x4,%eax
f011deb9:	89 c2                	mov    %eax,%edx
f011debb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011dec1:	01 d0                	add    %edx,%eax
f011dec3:	48                   	dec    %eax
f011dec4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011deca:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ded0:	ba 00 00 00 00       	mov    $0x0,%edx
f011ded5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011dedb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dee1:	29 d0                	sub    %edx,%eax
f011dee3:	01 d8                	add    %ebx,%eax
f011dee5:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011deea:	39 c1                	cmp    %eax,%ecx
f011deec:	74 17                	je     f011df05 <test_kmalloc_firstfit2+0xbf3>
f011deee:	83 ec 04             	sub    $0x4,%esp
f011def1:	68 74 b0 13 f0       	push   $0xf013b074
f011def6:	68 f5 03 00 00       	push   $0x3f5
f011defb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011df00:	e8 f6 22 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df05:	e8 32 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df0d:	74 17                	je     f011df26 <test_kmalloc_firstfit2+0xc14>
f011df0f:	83 ec 04             	sub    $0x4,%esp
f011df12:	68 74 ac 13 f0       	push   $0xf013ac74
f011df17:	68 f6 03 00 00       	push   $0x3f6
f011df1c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011df21:	e8 d5 22 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011df26:	e8 9e e9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011df2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011df2e:	29 c2                	sub    %eax,%edx
f011df30:	89 d0                	mov    %edx,%eax
f011df32:	3d 00 05 00 00       	cmp    $0x500,%eax
f011df37:	74 17                	je     f011df50 <test_kmalloc_firstfit2+0xc3e>
f011df39:	83 ec 04             	sub    $0x4,%esp
f011df3c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011df41:	68 f7 03 00 00       	push   $0x3f7
f011df46:	68 5a ac 13 f0       	push   $0xf013ac5a
f011df4b:	e8 ab 22 fe ff       	call   f01001fb <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011df50:	e8 74 e9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011df55:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df58:	e8 df 5d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011df60:	83 ec 0c             	sub    $0xc,%esp
f011df63:	68 00 fc 2f 00       	push   $0x2ffc00
f011df68:	e8 91 98 fe ff       	call   f01077fe <kmalloc>
f011df6d:	83 c4 10             	add    $0x10,%esp
f011df70:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011df76:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011df7c:	89 c1                	mov    %eax,%ecx
f011df7e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011df85:	10 00 00 
f011df88:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011df8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df93:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011df99:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011df9f:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfa4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011dfaa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dfb0:	29 d0                	sub    %edx,%eax
f011dfb2:	89 c3                	mov    %eax,%ebx
f011dfb4:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011dfbb:	10 00 00 
f011dfbe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dfc3:	0f b6 d0             	movzbl %al,%edx
f011dfc6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dfcc:	01 d0                	add    %edx,%eax
f011dfce:	48                   	dec    %eax
f011dfcf:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011dfd5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfdb:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfe0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011dfe6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfec:	29 d0                	sub    %edx,%eax
f011dfee:	01 c3                	add    %eax,%ebx
f011dff0:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011dff7:	10 00 00 
f011dffa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dfff:	0f b6 c0             	movzbl %al,%eax
f011e002:	c1 e0 04             	shl    $0x4,%eax
f011e005:	89 c2                	mov    %eax,%edx
f011e007:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e00d:	01 d0                	add    %edx,%eax
f011e00f:	48                   	dec    %eax
f011e010:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e016:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e01c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e021:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e027:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e02d:	29 d0                	sub    %edx,%eax
f011e02f:	01 d8                	add    %ebx,%eax
f011e031:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e036:	39 c1                	cmp    %eax,%ecx
f011e038:	74 17                	je     f011e051 <test_kmalloc_firstfit2+0xd3f>
f011e03a:	83 ec 04             	sub    $0x4,%esp
f011e03d:	68 74 b0 13 f0       	push   $0xf013b074
f011e042:	68 05 04 00 00       	push   $0x405
f011e047:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e04c:	e8 aa 21 fe ff       	call   f01001fb <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e051:	e8 e6 5c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e056:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e059:	74 17                	je     f011e072 <test_kmalloc_firstfit2+0xd60>
f011e05b:	83 ec 04             	sub    $0x4,%esp
f011e05e:	68 74 ac 13 f0       	push   $0xf013ac74
f011e063:	68 06 04 00 00       	push   $0x406
f011e068:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e06d:	e8 89 21 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e072:	e8 52 e8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011e077:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e07a:	29 c2                	sub    %eax,%edx
f011e07c:	89 d0                	mov    %edx,%eax
f011e07e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e083:	74 17                	je     f011e09c <test_kmalloc_firstfit2+0xd8a>
f011e085:	83 ec 04             	sub    $0x4,%esp
f011e088:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011e08d:	68 07 04 00 00       	push   $0x407
f011e092:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e097:	e8 5f 21 fe ff       	call   f01001fb <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e09c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e0a3:	10 00 00 
f011e0a6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e0ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e0b1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e0b7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e0bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0c2:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e0c8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e0ce:	29 d0                	sub    %edx,%eax
f011e0d0:	89 c1                	mov    %eax,%ecx
f011e0d2:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e0d9:	10 00 00 
f011e0dc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e0e1:	0f b6 d0             	movzbl %al,%edx
f011e0e4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e0ea:	01 d0                	add    %edx,%eax
f011e0ec:	48                   	dec    %eax
f011e0ed:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e0f3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e0f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0fe:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e104:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e10a:	29 d0                	sub    %edx,%eax
f011e10c:	01 c1                	add    %eax,%ecx
f011e10e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e115:	10 00 00 
f011e118:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e11d:	0f b6 c0             	movzbl %al,%eax
f011e120:	c1 e0 04             	shl    $0x4,%eax
f011e123:	89 c2                	mov    %eax,%edx
f011e125:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e12b:	01 d0                	add    %edx,%eax
f011e12d:	48                   	dec    %eax
f011e12e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e134:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e13a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e13f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e145:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e14b:	29 d0                	sub    %edx,%eax
f011e14d:	01 c8                	add    %ecx,%eax
f011e14f:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e154:	29 c2                	sub    %eax,%edx
f011e156:	89 d0                	mov    %edx,%eax
f011e158:	83 ec 0c             	sub    $0xc,%esp
f011e15b:	50                   	push   %eax
f011e15c:	e8 9d 96 fe ff       	call   f01077fe <kmalloc>
f011e161:	83 c4 10             	add    $0x10,%esp
f011e164:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e16a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e170:	85 c0                	test   %eax,%eax
f011e172:	74 17                	je     f011e18b <test_kmalloc_firstfit2+0xe79>
f011e174:	83 ec 04             	sub    $0x4,%esp
f011e177:	68 a4 b1 13 f0       	push   $0xf013b1a4
f011e17c:	68 0d 04 00 00       	push   $0x40d
f011e181:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e186:	e8 70 20 fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e18b:	83 ec 0c             	sub    $0xc,%esp
f011e18e:	68 e4 b2 13 f0       	push   $0xf013b2e4
f011e193:	e8 ea 2a fe ff       	call   f0100c82 <cprintf>
f011e198:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e19b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e1a0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e1a3:	5b                   	pop    %ebx
f011e1a4:	5f                   	pop    %edi
f011e1a5:	5d                   	pop    %ebp
f011e1a6:	c3                   	ret    

f011e1a7 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e1a7:	55                   	push   %ebp
f011e1a8:	89 e5                	mov    %esp,%ebp
f011e1aa:	57                   	push   %edi
f011e1ab:	53                   	push   %ebx
f011e1ac:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e1b2:	83 ec 0c             	sub    $0xc,%esp
f011e1b5:	68 9c ab 13 f0       	push   $0xf013ab9c
f011e1ba:	e8 c3 2a fe ff       	call   f0100c82 <cprintf>
f011e1bf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e1c2:	83 ec 0c             	sub    $0xc,%esp
f011e1c5:	68 cc ab 13 f0       	push   $0xf013abcc
f011e1ca:	e8 b3 2a fe ff       	call   f0100c82 <cprintf>
f011e1cf:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e1d2:	83 ec 0c             	sub    $0xc,%esp
f011e1d5:	68 9c ab 13 f0       	push   $0xf013ab9c
f011e1da:	e8 a3 2a fe ff       	call   f0100c82 <cprintf>
f011e1df:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e1e2:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e1e8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e1ed:	b8 00 00 00 00       	mov    $0x0,%eax
f011e1f2:	89 d7                	mov    %edx,%edi
f011e1f4:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e1f6:	e8 ce e6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011e1fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e1fe:	e8 39 5b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e203:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e206:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e20d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e214:	eb 1f                	jmp    f011e235 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e216:	83 ec 0c             	sub    $0xc,%esp
f011e219:	68 00 00 20 00       	push   $0x200000
f011e21e:	e8 db 95 fe ff       	call   f01077fe <kmalloc>
f011e223:	83 c4 10             	add    $0x10,%esp
f011e226:	89 c2                	mov    %eax,%edx
f011e228:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e22b:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e232:	ff 45 f4             	incl   -0xc(%ebp)
f011e235:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e239:	7e db                	jle    f011e216 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e23b:	83 ec 0c             	sub    $0xc,%esp
f011e23e:	68 00 b0 1f 00       	push   $0x1fb000
f011e243:	e8 b6 95 fe ff       	call   f01077fe <kmalloc>
f011e248:	83 c4 10             	add    $0x10,%esp
f011e24b:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e251:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e257:	89 c1                	mov    %eax,%ecx
f011e259:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e260:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e263:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e268:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e26b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e26e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e273:	f7 75 e4             	divl   -0x1c(%ebp)
f011e276:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e279:	29 d0                	sub    %edx,%eax
f011e27b:	89 c3                	mov    %eax,%ebx
f011e27d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e284:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e289:	0f b6 d0             	movzbl %al,%edx
f011e28c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e28f:	01 d0                	add    %edx,%eax
f011e291:	48                   	dec    %eax
f011e292:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e295:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e298:	ba 00 00 00 00       	mov    $0x0,%edx
f011e29d:	f7 75 dc             	divl   -0x24(%ebp)
f011e2a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e2a3:	29 d0                	sub    %edx,%eax
f011e2a5:	01 c3                	add    %eax,%ebx
f011e2a7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e2ae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e2b3:	0f b6 c0             	movzbl %al,%eax
f011e2b6:	c1 e0 04             	shl    $0x4,%eax
f011e2b9:	89 c2                	mov    %eax,%edx
f011e2bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e2be:	01 d0                	add    %edx,%eax
f011e2c0:	48                   	dec    %eax
f011e2c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e2c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2cc:	f7 75 d4             	divl   -0x2c(%ebp)
f011e2cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2d2:	29 d0                	sub    %edx,%eax
f011e2d4:	01 d8                	add    %ebx,%eax
f011e2d6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e2db:	39 c1                	cmp    %eax,%ecx
f011e2dd:	0f 85 c0 04 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e2e3:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e2e9:	89 c1                	mov    %eax,%ecx
f011e2eb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e2f2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e2f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2fa:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e2fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e300:	ba 00 00 00 00       	mov    $0x0,%edx
f011e305:	f7 75 cc             	divl   -0x34(%ebp)
f011e308:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e30b:	29 d0                	sub    %edx,%eax
f011e30d:	89 c3                	mov    %eax,%ebx
f011e30f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e316:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e31b:	0f b6 d0             	movzbl %al,%edx
f011e31e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e321:	01 d0                	add    %edx,%eax
f011e323:	48                   	dec    %eax
f011e324:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e327:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e32a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e32f:	f7 75 c4             	divl   -0x3c(%ebp)
f011e332:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e335:	29 d0                	sub    %edx,%eax
f011e337:	01 c3                	add    %eax,%ebx
f011e339:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e340:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e345:	0f b6 c0             	movzbl %al,%eax
f011e348:	c1 e0 04             	shl    $0x4,%eax
f011e34b:	89 c2                	mov    %eax,%edx
f011e34d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e350:	01 d0                	add    %edx,%eax
f011e352:	48                   	dec    %eax
f011e353:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e356:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e359:	ba 00 00 00 00       	mov    $0x0,%edx
f011e35e:	f7 75 bc             	divl   -0x44(%ebp)
f011e361:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e364:	29 d0                	sub    %edx,%eax
f011e366:	01 d8                	add    %ebx,%eax
f011e368:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e36d:	39 c1                	cmp    %eax,%ecx
f011e36f:	0f 85 2e 04 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e375:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e37b:	89 c1                	mov    %eax,%ecx
f011e37d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e384:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e387:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e38c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e38f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e392:	ba 00 00 00 00       	mov    $0x0,%edx
f011e397:	f7 75 b4             	divl   -0x4c(%ebp)
f011e39a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e39d:	29 d0                	sub    %edx,%eax
f011e39f:	89 c3                	mov    %eax,%ebx
f011e3a1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e3a8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e3ad:	0f b6 d0             	movzbl %al,%edx
f011e3b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e3b3:	01 d0                	add    %edx,%eax
f011e3b5:	48                   	dec    %eax
f011e3b6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e3b9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3c1:	f7 75 ac             	divl   -0x54(%ebp)
f011e3c4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3c7:	29 d0                	sub    %edx,%eax
f011e3c9:	01 c3                	add    %eax,%ebx
f011e3cb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e3d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e3d7:	0f b6 c0             	movzbl %al,%eax
f011e3da:	c1 e0 04             	shl    $0x4,%eax
f011e3dd:	89 c2                	mov    %eax,%edx
f011e3df:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e3e2:	01 d0                	add    %edx,%eax
f011e3e4:	48                   	dec    %eax
f011e3e5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e3e8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3f0:	f7 75 a4             	divl   -0x5c(%ebp)
f011e3f3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e3f6:	29 d0                	sub    %edx,%eax
f011e3f8:	01 d8                	add    %ebx,%eax
f011e3fa:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e3ff:	39 c1                	cmp    %eax,%ecx
f011e401:	0f 85 9c 03 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e407:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e40d:	89 c1                	mov    %eax,%ecx
f011e40f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e416:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e419:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e41e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e421:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e424:	ba 00 00 00 00       	mov    $0x0,%edx
f011e429:	f7 75 9c             	divl   -0x64(%ebp)
f011e42c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e42f:	29 d0                	sub    %edx,%eax
f011e431:	89 c3                	mov    %eax,%ebx
f011e433:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e43a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e43f:	0f b6 d0             	movzbl %al,%edx
f011e442:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e445:	01 d0                	add    %edx,%eax
f011e447:	48                   	dec    %eax
f011e448:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e44b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e44e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e453:	f7 75 94             	divl   -0x6c(%ebp)
f011e456:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e459:	29 d0                	sub    %edx,%eax
f011e45b:	01 c3                	add    %eax,%ebx
f011e45d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e464:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e469:	0f b6 c0             	movzbl %al,%eax
f011e46c:	c1 e0 04             	shl    $0x4,%eax
f011e46f:	89 c2                	mov    %eax,%edx
f011e471:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e474:	01 d0                	add    %edx,%eax
f011e476:	48                   	dec    %eax
f011e477:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e47a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e47d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e482:	f7 75 8c             	divl   -0x74(%ebp)
f011e485:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e488:	29 d0                	sub    %edx,%eax
f011e48a:	01 d8                	add    %ebx,%eax
f011e48c:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e491:	39 c1                	cmp    %eax,%ecx
f011e493:	0f 85 0a 03 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e499:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e49f:	89 c1                	mov    %eax,%ecx
f011e4a1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e4a8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e4ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4b0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e4b3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4bb:	f7 75 84             	divl   -0x7c(%ebp)
f011e4be:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e4c1:	29 d0                	sub    %edx,%eax
f011e4c3:	89 c3                	mov    %eax,%ebx
f011e4c5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e4cc:	10 00 00 
f011e4cf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e4d4:	0f b6 d0             	movzbl %al,%edx
f011e4d7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e4dd:	01 d0                	add    %edx,%eax
f011e4df:	48                   	dec    %eax
f011e4e0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e4e6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e4ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4f1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e4f7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e4fd:	29 d0                	sub    %edx,%eax
f011e4ff:	01 c3                	add    %eax,%ebx
f011e501:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e508:	10 00 00 
f011e50b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e510:	0f b6 c0             	movzbl %al,%eax
f011e513:	c1 e0 04             	shl    $0x4,%eax
f011e516:	89 c2                	mov    %eax,%edx
f011e518:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e51e:	01 d0                	add    %edx,%eax
f011e520:	48                   	dec    %eax
f011e521:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e527:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e52d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e532:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e538:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e53e:	29 d0                	sub    %edx,%eax
f011e540:	01 d8                	add    %ebx,%eax
f011e542:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e547:	39 c1                	cmp    %eax,%ecx
f011e549:	0f 85 54 02 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e54f:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e555:	89 c1                	mov    %eax,%ecx
f011e557:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e55e:	10 00 00 
f011e561:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e567:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e56c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e572:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e578:	ba 00 00 00 00       	mov    $0x0,%edx
f011e57d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e583:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e589:	29 d0                	sub    %edx,%eax
f011e58b:	89 c3                	mov    %eax,%ebx
f011e58d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e594:	10 00 00 
f011e597:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e59c:	0f b6 d0             	movzbl %al,%edx
f011e59f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e5a5:	01 d0                	add    %edx,%eax
f011e5a7:	48                   	dec    %eax
f011e5a8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e5ae:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e5b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5b9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e5bf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e5c5:	29 d0                	sub    %edx,%eax
f011e5c7:	01 c3                	add    %eax,%ebx
f011e5c9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e5d0:	10 00 00 
f011e5d3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e5d8:	0f b6 c0             	movzbl %al,%eax
f011e5db:	c1 e0 04             	shl    $0x4,%eax
f011e5de:	89 c2                	mov    %eax,%edx
f011e5e0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e5e6:	01 d0                	add    %edx,%eax
f011e5e8:	48                   	dec    %eax
f011e5e9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e5ef:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e5f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5fa:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e600:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e606:	29 d0                	sub    %edx,%eax
f011e608:	01 d8                	add    %ebx,%eax
f011e60a:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e60f:	39 c1                	cmp    %eax,%ecx
f011e611:	0f 85 8c 01 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e617:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e61d:	89 c1                	mov    %eax,%ecx
f011e61f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e626:	10 00 00 
f011e629:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e62f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e634:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e63a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e640:	ba 00 00 00 00       	mov    $0x0,%edx
f011e645:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e64b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e651:	29 d0                	sub    %edx,%eax
f011e653:	89 c3                	mov    %eax,%ebx
f011e655:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e65c:	10 00 00 
f011e65f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e664:	0f b6 d0             	movzbl %al,%edx
f011e667:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e66d:	01 d0                	add    %edx,%eax
f011e66f:	48                   	dec    %eax
f011e670:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e676:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e67c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e681:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e687:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e68d:	29 d0                	sub    %edx,%eax
f011e68f:	01 c3                	add    %eax,%ebx
f011e691:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e698:	10 00 00 
f011e69b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e6a0:	0f b6 c0             	movzbl %al,%eax
f011e6a3:	c1 e0 04             	shl    $0x4,%eax
f011e6a6:	89 c2                	mov    %eax,%edx
f011e6a8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e6ae:	01 d0                	add    %edx,%eax
f011e6b0:	48                   	dec    %eax
f011e6b1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e6b7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e6bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6c2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e6c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e6ce:	29 d0                	sub    %edx,%eax
f011e6d0:	01 d8                	add    %ebx,%eax
f011e6d2:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e6d7:	39 c1                	cmp    %eax,%ecx
f011e6d9:	0f 85 c4 00 00 00    	jne    f011e7a3 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e6df:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e6e5:	89 c1                	mov    %eax,%ecx
f011e6e7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e6ee:	10 00 00 
f011e6f1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e6f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6fc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e702:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e708:	ba 00 00 00 00       	mov    $0x0,%edx
f011e70d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e713:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e719:	29 d0                	sub    %edx,%eax
f011e71b:	89 c3                	mov    %eax,%ebx
f011e71d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e724:	10 00 00 
f011e727:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e72c:	0f b6 d0             	movzbl %al,%edx
f011e72f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e735:	01 d0                	add    %edx,%eax
f011e737:	48                   	dec    %eax
f011e738:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e73e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e744:	ba 00 00 00 00       	mov    $0x0,%edx
f011e749:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e74f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e755:	29 d0                	sub    %edx,%eax
f011e757:	01 c3                	add    %eax,%ebx
f011e759:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e760:	10 00 00 
f011e763:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e768:	0f b6 c0             	movzbl %al,%eax
f011e76b:	c1 e0 04             	shl    $0x4,%eax
f011e76e:	89 c2                	mov    %eax,%edx
f011e770:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e776:	01 d0                	add    %edx,%eax
f011e778:	48                   	dec    %eax
f011e779:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e77f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e785:	ba 00 00 00 00       	mov    $0x0,%edx
f011e78a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e790:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e796:	29 d0                	sub    %edx,%eax
f011e798:	01 d8                	add    %ebx,%eax
f011e79a:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e79f:	39 c1                	cmp    %eax,%ecx
f011e7a1:	74 17                	je     f011e7ba <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e7a3:	83 ec 04             	sub    $0x4,%esp
f011e7a6:	68 30 b3 13 f0       	push   $0xf013b330
f011e7ab:	68 31 04 00 00       	push   $0x431
f011e7b0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e7b5:	e8 41 1a fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7ba:	e8 7d 55 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e7bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7c2:	74 17                	je     f011e7db <test_kmalloc_worstfit+0x634>
f011e7c4:	83 ec 04             	sub    $0x4,%esp
f011e7c7:	68 74 ac 13 f0       	push   $0xf013ac74
f011e7cc:	68 33 04 00 00       	push   $0x433
f011e7d1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e7d6:	e8 20 1a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e7db:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7de:	e8 e6 e0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011e7e3:	29 c3                	sub    %eax,%ebx
f011e7e5:	89 d8                	mov    %ebx,%eax
f011e7e7:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e7ec:	74 17                	je     f011e805 <test_kmalloc_worstfit+0x65e>
f011e7ee:	83 ec 04             	sub    $0x4,%esp
f011e7f1:	68 17 af 13 f0       	push   $0xf013af17
f011e7f6:	68 34 04 00 00       	push   $0x434
f011e7fb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e800:	e8 f6 19 fe ff       	call   f01001fb <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e805:	e8 bf e0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011e80a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e80d:	e8 2a 55 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e812:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e815:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e81b:	83 ec 0c             	sub    $0xc,%esp
f011e81e:	50                   	push   %eax
f011e81f:	e8 9c 90 fe ff       	call   f01078c0 <kfree>
f011e824:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e827:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e82d:	83 ec 0c             	sub    $0xc,%esp
f011e830:	50                   	push   %eax
f011e831:	e8 8a 90 fe ff       	call   f01078c0 <kfree>
f011e836:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e839:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e83f:	83 ec 0c             	sub    $0xc,%esp
f011e842:	50                   	push   %eax
f011e843:	e8 78 90 fe ff       	call   f01078c0 <kfree>
f011e848:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e84b:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e851:	83 ec 0c             	sub    $0xc,%esp
f011e854:	50                   	push   %eax
f011e855:	e8 66 90 fe ff       	call   f01078c0 <kfree>
f011e85a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e85d:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e863:	83 ec 0c             	sub    $0xc,%esp
f011e866:	50                   	push   %eax
f011e867:	e8 54 90 fe ff       	call   f01078c0 <kfree>
f011e86c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e86f:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e875:	83 ec 0c             	sub    $0xc,%esp
f011e878:	50                   	push   %eax
f011e879:	e8 42 90 fe ff       	call   f01078c0 <kfree>
f011e87e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e881:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e887:	83 ec 0c             	sub    $0xc,%esp
f011e88a:	50                   	push   %eax
f011e88b:	e8 30 90 fe ff       	call   f01078c0 <kfree>
f011e890:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e893:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e899:	83 ec 0c             	sub    $0xc,%esp
f011e89c:	50                   	push   %eax
f011e89d:	e8 1e 90 fe ff       	call   f01078c0 <kfree>
f011e8a2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e8a5:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e8ab:	83 ec 0c             	sub    $0xc,%esp
f011e8ae:	50                   	push   %eax
f011e8af:	e8 0c 90 fe ff       	call   f01078c0 <kfree>
f011e8b4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e8b7:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e8bd:	83 ec 0c             	sub    $0xc,%esp
f011e8c0:	50                   	push   %eax
f011e8c1:	e8 fa 8f fe ff       	call   f01078c0 <kfree>
f011e8c6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e8c9:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e8cf:	83 ec 0c             	sub    $0xc,%esp
f011e8d2:	50                   	push   %eax
f011e8d3:	e8 e8 8f fe ff       	call   f01078c0 <kfree>
f011e8d8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e8db:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e8e1:	83 ec 0c             	sub    $0xc,%esp
f011e8e4:	50                   	push   %eax
f011e8e5:	e8 d6 8f fe ff       	call   f01078c0 <kfree>
f011e8ea:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e8ed:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e8f3:	83 ec 0c             	sub    $0xc,%esp
f011e8f6:	50                   	push   %eax
f011e8f7:	e8 c4 8f fe ff       	call   f01078c0 <kfree>
f011e8fc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e8ff:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e905:	83 ec 0c             	sub    $0xc,%esp
f011e908:	50                   	push   %eax
f011e909:	e8 b2 8f fe ff       	call   f01078c0 <kfree>
f011e90e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e911:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e917:	83 ec 0c             	sub    $0xc,%esp
f011e91a:	50                   	push   %eax
f011e91b:	e8 a0 8f fe ff       	call   f01078c0 <kfree>
f011e920:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e923:	e8 14 54 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e928:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e92b:	74 17                	je     f011e944 <test_kmalloc_worstfit+0x79d>
f011e92d:	83 ec 04             	sub    $0x4,%esp
f011e930:	68 74 ac 13 f0       	push   $0xf013ac74
f011e935:	68 4a 04 00 00       	push   $0x44a
f011e93a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e93f:	e8 b7 18 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e944:	e8 80 df fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011e949:	89 c2                	mov    %eax,%edx
f011e94b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e94e:	29 c2                	sub    %eax,%edx
f011e950:	89 d0                	mov    %edx,%eax
f011e952:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e957:	74 17                	je     f011e970 <test_kmalloc_worstfit+0x7c9>
f011e959:	83 ec 04             	sub    $0x4,%esp
f011e95c:	68 28 af 13 f0       	push   $0xf013af28
f011e961:	68 4b 04 00 00       	push   $0x44b
f011e966:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e96b:	e8 8b 18 fe ff       	call   f01001fb <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e970:	e8 54 df fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011e975:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e978:	e8 bf 53 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e97d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e980:	83 ec 0c             	sub    $0xc,%esp
f011e983:	68 00 00 10 00       	push   $0x100000
f011e988:	e8 71 8e fe ff       	call   f01077fe <kmalloc>
f011e98d:	83 c4 10             	add    $0x10,%esp
f011e990:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e996:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e99d:	10 00 00 
f011e9a0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e9a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9ab:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e9b1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e9b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9bc:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e9c2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e9c8:	29 d0                	sub    %edx,%eax
f011e9ca:	89 c1                	mov    %eax,%ecx
f011e9cc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e9d3:	10 00 00 
f011e9d6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e9db:	0f b6 d0             	movzbl %al,%edx
f011e9de:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e9e4:	01 d0                	add    %edx,%eax
f011e9e6:	48                   	dec    %eax
f011e9e7:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e9ed:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e9f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9f8:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e9fe:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ea04:	29 d0                	sub    %edx,%eax
f011ea06:	01 c1                	add    %eax,%ecx
f011ea08:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ea0f:	10 00 00 
f011ea12:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ea17:	0f b6 c0             	movzbl %al,%eax
f011ea1a:	c1 e0 04             	shl    $0x4,%eax
f011ea1d:	89 c2                	mov    %eax,%edx
f011ea1f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ea25:	01 d0                	add    %edx,%eax
f011ea27:	48                   	dec    %eax
f011ea28:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ea2e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ea34:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea39:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ea3f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ea45:	29 d0                	sub    %edx,%eax
f011ea47:	01 c8                	add    %ecx,%eax
f011ea49:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ea4f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea55:	39 c2                	cmp    %eax,%edx
f011ea57:	74 17                	je     f011ea70 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011ea59:	83 ec 04             	sub    $0x4,%esp
f011ea5c:	68 74 b3 13 f0       	push   $0xf013b374
f011ea61:	68 52 04 00 00       	push   $0x452
f011ea66:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ea6b:	e8 8b 17 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea70:	e8 c7 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ea75:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea78:	74 17                	je     f011ea91 <test_kmalloc_worstfit+0x8ea>
f011ea7a:	83 ec 04             	sub    $0x4,%esp
f011ea7d:	68 74 ac 13 f0       	push   $0xf013ac74
f011ea82:	68 53 04 00 00       	push   $0x453
f011ea87:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ea8c:	e8 6a 17 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea91:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea94:	e8 30 de fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ea99:	29 c3                	sub    %eax,%ebx
f011ea9b:	89 d8                	mov    %ebx,%eax
f011ea9d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011eaa2:	74 17                	je     f011eabb <test_kmalloc_worstfit+0x914>
f011eaa4:	83 ec 04             	sub    $0x4,%esp
f011eaa7:	68 92 b1 13 f0       	push   $0xf013b192
f011eaac:	68 54 04 00 00       	push   $0x454
f011eab1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011eab6:	e8 40 17 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eabb:	ff 45 e8             	incl   -0x18(%ebp)
f011eabe:	83 ec 08             	sub    $0x8,%esp
f011eac1:	ff 75 e8             	pushl  -0x18(%ebp)
f011eac4:	68 94 b3 13 f0       	push   $0xf013b394
f011eac9:	e8 b4 21 fe ff       	call   f0100c82 <cprintf>
f011eace:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ead1:	e8 f3 dd fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ead6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ead9:	e8 5e 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eade:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011eae1:	83 ec 0c             	sub    $0xc,%esp
f011eae4:	68 00 00 40 00       	push   $0x400000
f011eae9:	e8 10 8d fe ff       	call   f01077fe <kmalloc>
f011eaee:	83 c4 10             	add    $0x10,%esp
f011eaf1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011eaf7:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011eafe:	10 00 00 
f011eb01:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011eb07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb0c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011eb12:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eb18:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb1d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011eb23:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eb29:	29 d0                	sub    %edx,%eax
f011eb2b:	89 c1                	mov    %eax,%ecx
f011eb2d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011eb34:	10 00 00 
f011eb37:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eb3c:	0f b6 d0             	movzbl %al,%edx
f011eb3f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011eb45:	01 d0                	add    %edx,%eax
f011eb47:	48                   	dec    %eax
f011eb48:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011eb4e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eb54:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb59:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011eb5f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eb65:	29 d0                	sub    %edx,%eax
f011eb67:	01 c1                	add    %eax,%ecx
f011eb69:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011eb70:	10 00 00 
f011eb73:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eb78:	0f b6 c0             	movzbl %al,%eax
f011eb7b:	c1 e0 04             	shl    $0x4,%eax
f011eb7e:	89 c2                	mov    %eax,%edx
f011eb80:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eb86:	01 d0                	add    %edx,%eax
f011eb88:	48                   	dec    %eax
f011eb89:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011eb8f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eb95:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb9a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011eba0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eba6:	29 d0                	sub    %edx,%eax
f011eba8:	01 c8                	add    %ecx,%eax
f011ebaa:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011ebb0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ebb6:	39 c2                	cmp    %eax,%edx
f011ebb8:	74 17                	je     f011ebd1 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011ebba:	83 ec 04             	sub    $0x4,%esp
f011ebbd:	68 74 b3 13 f0       	push   $0xf013b374
f011ebc2:	68 5b 04 00 00       	push   $0x45b
f011ebc7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ebcc:	e8 2a 16 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebd1:	e8 66 51 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ebd6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebd9:	74 17                	je     f011ebf2 <test_kmalloc_worstfit+0xa4b>
f011ebdb:	83 ec 04             	sub    $0x4,%esp
f011ebde:	68 74 ac 13 f0       	push   $0xf013ac74
f011ebe3:	68 5c 04 00 00       	push   $0x45c
f011ebe8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ebed:	e8 09 16 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ebf2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ebf5:	e8 cf dc fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ebfa:	29 c3                	sub    %eax,%ebx
f011ebfc:	89 d8                	mov    %ebx,%eax
f011ebfe:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ec03:	74 17                	je     f011ec1c <test_kmalloc_worstfit+0xa75>
f011ec05:	83 ec 04             	sub    $0x4,%esp
f011ec08:	68 92 b1 13 f0       	push   $0xf013b192
f011ec0d:	68 5d 04 00 00       	push   $0x45d
f011ec12:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ec17:	e8 df 15 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec1c:	ff 45 e8             	incl   -0x18(%ebp)
f011ec1f:	83 ec 08             	sub    $0x8,%esp
f011ec22:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec25:	68 94 b3 13 f0       	push   $0xf013b394
f011ec2a:	e8 53 20 fe ff       	call   f0100c82 <cprintf>
f011ec2f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec32:	e8 92 dc fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ec37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec3a:	e8 fd 50 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ec3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ec42:	83 ec 0c             	sub    $0xc,%esp
f011ec45:	68 00 00 60 00       	push   $0x600000
f011ec4a:	e8 af 8b fe ff       	call   f01077fe <kmalloc>
f011ec4f:	83 c4 10             	add    $0x10,%esp
f011ec52:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ec58:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ec5f:	10 00 00 
f011ec62:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ec68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec6d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011ec73:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ec79:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec7e:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ec84:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ec8a:	29 d0                	sub    %edx,%eax
f011ec8c:	89 c1                	mov    %eax,%ecx
f011ec8e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011ec95:	10 00 00 
f011ec98:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ec9d:	0f b6 d0             	movzbl %al,%edx
f011eca0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011eca6:	01 d0                	add    %edx,%eax
f011eca8:	48                   	dec    %eax
f011eca9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011ecaf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ecb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecba:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ecc0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ecc6:	29 d0                	sub    %edx,%eax
f011ecc8:	01 c1                	add    %eax,%ecx
f011ecca:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ecd1:	10 00 00 
f011ecd4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ecd9:	0f b6 c0             	movzbl %al,%eax
f011ecdc:	c1 e0 04             	shl    $0x4,%eax
f011ecdf:	89 c2                	mov    %eax,%edx
f011ece1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ece7:	01 d0                	add    %edx,%eax
f011ece9:	48                   	dec    %eax
f011ecea:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011ecf0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ecf6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecfb:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011ed01:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ed07:	29 d0                	sub    %edx,%eax
f011ed09:	01 c8                	add    %ecx,%eax
f011ed0b:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ed11:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed17:	39 c2                	cmp    %eax,%edx
f011ed19:	74 17                	je     f011ed32 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011ed1b:	83 ec 04             	sub    $0x4,%esp
f011ed1e:	68 74 b3 13 f0       	push   $0xf013b374
f011ed23:	68 64 04 00 00       	push   $0x464
f011ed28:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ed2d:	e8 c9 14 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed32:	e8 05 50 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ed37:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed3a:	74 17                	je     f011ed53 <test_kmalloc_worstfit+0xbac>
f011ed3c:	83 ec 04             	sub    $0x4,%esp
f011ed3f:	68 74 ac 13 f0       	push   $0xf013ac74
f011ed44:	68 65 04 00 00       	push   $0x465
f011ed49:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ed4e:	e8 a8 14 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed53:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed56:	e8 6e db fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ed5b:	29 c3                	sub    %eax,%ebx
f011ed5d:	89 d8                	mov    %ebx,%eax
f011ed5f:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ed64:	74 17                	je     f011ed7d <test_kmalloc_worstfit+0xbd6>
f011ed66:	83 ec 04             	sub    $0x4,%esp
f011ed69:	68 92 b1 13 f0       	push   $0xf013b192
f011ed6e:	68 66 04 00 00       	push   $0x466
f011ed73:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ed78:	e8 7e 14 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed7d:	ff 45 e8             	incl   -0x18(%ebp)
f011ed80:	83 ec 08             	sub    $0x8,%esp
f011ed83:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed86:	68 94 b3 13 f0       	push   $0xf013b394
f011ed8b:	e8 f2 1e fe ff       	call   f0100c82 <cprintf>
f011ed90:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed93:	e8 31 db fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ed98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed9b:	e8 9c 4f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eda0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011eda3:	83 ec 0c             	sub    $0xc,%esp
f011eda6:	68 00 00 50 00       	push   $0x500000
f011edab:	e8 4e 8a fe ff       	call   f01077fe <kmalloc>
f011edb0:	83 c4 10             	add    $0x10,%esp
f011edb3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011edb9:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011edc0:	10 00 00 
f011edc3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011edc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edce:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011edd4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011edda:	ba 00 00 00 00       	mov    $0x0,%edx
f011eddf:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011ede5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011edeb:	29 d0                	sub    %edx,%eax
f011eded:	89 c1                	mov    %eax,%ecx
f011edef:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011edf6:	10 00 00 
f011edf9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011edfe:	0f b6 d0             	movzbl %al,%edx
f011ee01:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ee07:	01 d0                	add    %edx,%eax
f011ee09:	48                   	dec    %eax
f011ee0a:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011ee10:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ee16:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee1b:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011ee21:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ee27:	29 d0                	sub    %edx,%eax
f011ee29:	01 c1                	add    %eax,%ecx
f011ee2b:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011ee32:	10 00 00 
f011ee35:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ee3a:	0f b6 c0             	movzbl %al,%eax
f011ee3d:	c1 e0 04             	shl    $0x4,%eax
f011ee40:	89 c2                	mov    %eax,%edx
f011ee42:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ee48:	01 d0                	add    %edx,%eax
f011ee4a:	48                   	dec    %eax
f011ee4b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011ee51:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ee57:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee5c:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011ee62:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ee68:	29 d0                	sub    %edx,%eax
f011ee6a:	01 c8                	add    %ecx,%eax
f011ee6c:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ee72:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee78:	39 c2                	cmp    %eax,%edx
f011ee7a:	74 17                	je     f011ee93 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011ee7c:	83 ec 04             	sub    $0x4,%esp
f011ee7f:	68 74 b3 13 f0       	push   $0xf013b374
f011ee84:	68 6d 04 00 00       	push   $0x46d
f011ee89:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ee8e:	e8 68 13 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee93:	e8 a4 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ee98:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee9b:	74 17                	je     f011eeb4 <test_kmalloc_worstfit+0xd0d>
f011ee9d:	83 ec 04             	sub    $0x4,%esp
f011eea0:	68 74 ac 13 f0       	push   $0xf013ac74
f011eea5:	68 6e 04 00 00       	push   $0x46e
f011eeaa:	68 5a ac 13 f0       	push   $0xf013ac5a
f011eeaf:	e8 47 13 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eeb4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eeb7:	e8 0d da fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011eebc:	29 c3                	sub    %eax,%ebx
f011eebe:	89 d8                	mov    %ebx,%eax
f011eec0:	3d 00 05 00 00       	cmp    $0x500,%eax
f011eec5:	74 17                	je     f011eede <test_kmalloc_worstfit+0xd37>
f011eec7:	83 ec 04             	sub    $0x4,%esp
f011eeca:	68 92 b1 13 f0       	push   $0xf013b192
f011eecf:	68 6f 04 00 00       	push   $0x46f
f011eed4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011eed9:	e8 1d 13 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eede:	ff 45 e8             	incl   -0x18(%ebp)
f011eee1:	83 ec 08             	sub    $0x8,%esp
f011eee4:	ff 75 e8             	pushl  -0x18(%ebp)
f011eee7:	68 94 b3 13 f0       	push   $0xf013b394
f011eeec:	e8 91 1d fe ff       	call   f0100c82 <cprintf>
f011eef1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eef4:	e8 d0 d9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011eef9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eefc:	e8 3b 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ef01:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ef04:	83 ec 0c             	sub    $0xc,%esp
f011ef07:	68 00 00 40 00       	push   $0x400000
f011ef0c:	e8 ed 88 fe ff       	call   f01077fe <kmalloc>
f011ef11:	83 c4 10             	add    $0x10,%esp
f011ef14:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ef1a:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011ef21:	10 00 00 
f011ef24:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ef2a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef2f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011ef35:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef40:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011ef46:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef4c:	29 d0                	sub    %edx,%eax
f011ef4e:	89 c1                	mov    %eax,%ecx
f011ef50:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011ef57:	10 00 00 
f011ef5a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ef5f:	0f b6 d0             	movzbl %al,%edx
f011ef62:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ef68:	01 d0                	add    %edx,%eax
f011ef6a:	48                   	dec    %eax
f011ef6b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011ef71:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ef77:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef7c:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011ef82:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ef88:	29 d0                	sub    %edx,%eax
f011ef8a:	01 c1                	add    %eax,%ecx
f011ef8c:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011ef93:	10 00 00 
f011ef96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ef9b:	0f b6 c0             	movzbl %al,%eax
f011ef9e:	c1 e0 04             	shl    $0x4,%eax
f011efa1:	89 c2                	mov    %eax,%edx
f011efa3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011efa9:	01 d0                	add    %edx,%eax
f011efab:	48                   	dec    %eax
f011efac:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011efb2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011efb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011efbd:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011efc3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011efc9:	29 d0                	sub    %edx,%eax
f011efcb:	01 c8                	add    %ecx,%eax
f011efcd:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011efd3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efd9:	39 c2                	cmp    %eax,%edx
f011efdb:	74 17                	je     f011eff4 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011efdd:	83 ec 04             	sub    $0x4,%esp
f011efe0:	68 74 b3 13 f0       	push   $0xf013b374
f011efe5:	68 76 04 00 00       	push   $0x476
f011efea:	68 5a ac 13 f0       	push   $0xf013ac5a
f011efef:	e8 07 12 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eff4:	e8 43 4d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eff9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011effc:	74 17                	je     f011f015 <test_kmalloc_worstfit+0xe6e>
f011effe:	83 ec 04             	sub    $0x4,%esp
f011f001:	68 74 ac 13 f0       	push   $0xf013ac74
f011f006:	68 77 04 00 00       	push   $0x477
f011f00b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f010:	e8 e6 11 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f015:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f018:	e8 ac d8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f01d:	29 c3                	sub    %eax,%ebx
f011f01f:	89 d8                	mov    %ebx,%eax
f011f021:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f026:	74 17                	je     f011f03f <test_kmalloc_worstfit+0xe98>
f011f028:	83 ec 04             	sub    $0x4,%esp
f011f02b:	68 92 b1 13 f0       	push   $0xf013b192
f011f030:	68 78 04 00 00       	push   $0x478
f011f035:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f03a:	e8 bc 11 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f03f:	ff 45 e8             	incl   -0x18(%ebp)
f011f042:	83 ec 08             	sub    $0x8,%esp
f011f045:	ff 75 e8             	pushl  -0x18(%ebp)
f011f048:	68 94 b3 13 f0       	push   $0xf013b394
f011f04d:	e8 30 1c fe ff       	call   f0100c82 <cprintf>
f011f052:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f055:	e8 6f d8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f05a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f05d:	e8 da 4c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f062:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f065:	83 ec 0c             	sub    $0xc,%esp
f011f068:	68 00 00 20 00       	push   $0x200000
f011f06d:	e8 8c 87 fe ff       	call   f01077fe <kmalloc>
f011f072:	83 c4 10             	add    $0x10,%esp
f011f075:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f07b:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f082:	10 00 00 
f011f085:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f08b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f090:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f096:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f09c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0a1:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f0a7:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f0ad:	29 d0                	sub    %edx,%eax
f011f0af:	89 c1                	mov    %eax,%ecx
f011f0b1:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f0b8:	10 00 00 
f011f0bb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f0c0:	0f b6 d0             	movzbl %al,%edx
f011f0c3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f0c9:	01 d0                	add    %edx,%eax
f011f0cb:	48                   	dec    %eax
f011f0cc:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f0d2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f0d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0dd:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f0e3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f0e9:	29 d0                	sub    %edx,%eax
f011f0eb:	01 c1                	add    %eax,%ecx
f011f0ed:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f0f4:	10 00 00 
f011f0f7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f0fc:	0f b6 c0             	movzbl %al,%eax
f011f0ff:	c1 e0 04             	shl    $0x4,%eax
f011f102:	89 c2                	mov    %eax,%edx
f011f104:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f10a:	01 d0                	add    %edx,%eax
f011f10c:	48                   	dec    %eax
f011f10d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f113:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f119:	ba 00 00 00 00       	mov    $0x0,%edx
f011f11e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f124:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f12a:	29 d0                	sub    %edx,%eax
f011f12c:	01 c8                	add    %ecx,%eax
f011f12e:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f134:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f13a:	39 c2                	cmp    %eax,%edx
f011f13c:	74 17                	je     f011f155 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f13e:	83 ec 04             	sub    $0x4,%esp
f011f141:	68 74 b3 13 f0       	push   $0xf013b374
f011f146:	68 7f 04 00 00       	push   $0x47f
f011f14b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f150:	e8 a6 10 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f155:	e8 e2 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f15a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f15d:	74 17                	je     f011f176 <test_kmalloc_worstfit+0xfcf>
f011f15f:	83 ec 04             	sub    $0x4,%esp
f011f162:	68 74 ac 13 f0       	push   $0xf013ac74
f011f167:	68 80 04 00 00       	push   $0x480
f011f16c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f171:	e8 85 10 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f176:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f179:	e8 4b d7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f17e:	29 c3                	sub    %eax,%ebx
f011f180:	89 d8                	mov    %ebx,%eax
f011f182:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f187:	74 17                	je     f011f1a0 <test_kmalloc_worstfit+0xff9>
f011f189:	83 ec 04             	sub    $0x4,%esp
f011f18c:	68 92 b1 13 f0       	push   $0xf013b192
f011f191:	68 81 04 00 00       	push   $0x481
f011f196:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f19b:	e8 5b 10 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1a0:	ff 45 e8             	incl   -0x18(%ebp)
f011f1a3:	83 ec 08             	sub    $0x8,%esp
f011f1a6:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1a9:	68 94 b3 13 f0       	push   $0xf013b394
f011f1ae:	e8 cf 1a fe ff       	call   f0100c82 <cprintf>
f011f1b3:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1b6:	e8 0e d7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f1bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1be:	e8 79 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f1c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f1c6:	83 ec 0c             	sub    $0xc,%esp
f011f1c9:	68 00 00 18 00       	push   $0x180000
f011f1ce:	e8 2b 86 fe ff       	call   f01077fe <kmalloc>
f011f1d3:	83 c4 10             	add    $0x10,%esp
f011f1d6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f1dc:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f1e3:	10 00 00 
f011f1e6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f1ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1f1:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f1f7:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f1fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f202:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f208:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f20e:	29 d0                	sub    %edx,%eax
f011f210:	89 c1                	mov    %eax,%ecx
f011f212:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f219:	10 00 00 
f011f21c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f221:	0f b6 d0             	movzbl %al,%edx
f011f224:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f22a:	01 d0                	add    %edx,%eax
f011f22c:	48                   	dec    %eax
f011f22d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f233:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f239:	ba 00 00 00 00       	mov    $0x0,%edx
f011f23e:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f244:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f24a:	29 d0                	sub    %edx,%eax
f011f24c:	01 c1                	add    %eax,%ecx
f011f24e:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f255:	10 00 00 
f011f258:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f25d:	0f b6 c0             	movzbl %al,%eax
f011f260:	c1 e0 04             	shl    $0x4,%eax
f011f263:	89 c2                	mov    %eax,%edx
f011f265:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f26b:	01 d0                	add    %edx,%eax
f011f26d:	48                   	dec    %eax
f011f26e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f274:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f27a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f27f:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f285:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f28b:	29 d0                	sub    %edx,%eax
f011f28d:	01 c8                	add    %ecx,%eax
f011f28f:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f295:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f29b:	39 c2                	cmp    %eax,%edx
f011f29d:	74 17                	je     f011f2b6 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f29f:	83 ec 04             	sub    $0x4,%esp
f011f2a2:	68 74 b3 13 f0       	push   $0xf013b374
f011f2a7:	68 88 04 00 00       	push   $0x488
f011f2ac:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f2b1:	e8 45 0f fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2b6:	e8 81 4a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f2bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2be:	74 17                	je     f011f2d7 <test_kmalloc_worstfit+0x1130>
f011f2c0:	83 ec 04             	sub    $0x4,%esp
f011f2c3:	68 74 ac 13 f0       	push   $0xf013ac74
f011f2c8:	68 89 04 00 00       	push   $0x489
f011f2cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f2d2:	e8 24 0f fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f2d7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2da:	e8 ea d5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f2df:	29 c3                	sub    %eax,%ebx
f011f2e1:	89 d8                	mov    %ebx,%eax
f011f2e3:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f2e8:	74 17                	je     f011f301 <test_kmalloc_worstfit+0x115a>
f011f2ea:	83 ec 04             	sub    $0x4,%esp
f011f2ed:	68 92 b1 13 f0       	push   $0xf013b192
f011f2f2:	68 8a 04 00 00       	push   $0x48a
f011f2f7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f2fc:	e8 fa 0e fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f301:	ff 45 e8             	incl   -0x18(%ebp)
f011f304:	83 ec 08             	sub    $0x8,%esp
f011f307:	ff 75 e8             	pushl  -0x18(%ebp)
f011f30a:	68 94 b3 13 f0       	push   $0xf013b394
f011f30f:	e8 6e 19 fe ff       	call   f0100c82 <cprintf>
f011f314:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f317:	e8 ad d5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f31c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f31f:	e8 18 4a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f324:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f327:	83 ec 0c             	sub    $0xc,%esp
f011f32a:	68 00 00 08 00       	push   $0x80000
f011f32f:	e8 ca 84 fe ff       	call   f01077fe <kmalloc>
f011f334:	83 c4 10             	add    $0x10,%esp
f011f337:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f33d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f344:	10 00 00 
f011f347:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f34d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f352:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f358:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f35e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f363:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f369:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f36f:	29 d0                	sub    %edx,%eax
f011f371:	89 c1                	mov    %eax,%ecx
f011f373:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f37a:	10 00 00 
f011f37d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f382:	0f b6 d0             	movzbl %al,%edx
f011f385:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f38b:	01 d0                	add    %edx,%eax
f011f38d:	48                   	dec    %eax
f011f38e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f394:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f39a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f39f:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f3a5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f3ab:	29 d0                	sub    %edx,%eax
f011f3ad:	01 c1                	add    %eax,%ecx
f011f3af:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f3b6:	10 00 00 
f011f3b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f3be:	0f b6 c0             	movzbl %al,%eax
f011f3c1:	c1 e0 04             	shl    $0x4,%eax
f011f3c4:	89 c2                	mov    %eax,%edx
f011f3c6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f3cc:	01 d0                	add    %edx,%eax
f011f3ce:	48                   	dec    %eax
f011f3cf:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f3d5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f3db:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3e0:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f3e6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f3ec:	29 d0                	sub    %edx,%eax
f011f3ee:	01 c8                	add    %ecx,%eax
f011f3f0:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f3f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f3fc:	39 c2                	cmp    %eax,%edx
f011f3fe:	74 17                	je     f011f417 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f400:	83 ec 04             	sub    $0x4,%esp
f011f403:	68 74 b3 13 f0       	push   $0xf013b374
f011f408:	68 91 04 00 00       	push   $0x491
f011f40d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f412:	e8 e4 0d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f417:	e8 20 49 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f41c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f41f:	74 17                	je     f011f438 <test_kmalloc_worstfit+0x1291>
f011f421:	83 ec 04             	sub    $0x4,%esp
f011f424:	68 74 ac 13 f0       	push   $0xf013ac74
f011f429:	68 92 04 00 00       	push   $0x492
f011f42e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f433:	e8 c3 0d fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f438:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f43b:	e8 89 d4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f440:	29 c3                	sub    %eax,%ebx
f011f442:	89 d8                	mov    %ebx,%eax
f011f444:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f449:	74 17                	je     f011f462 <test_kmalloc_worstfit+0x12bb>
f011f44b:	83 ec 04             	sub    $0x4,%esp
f011f44e:	68 92 b1 13 f0       	push   $0xf013b192
f011f453:	68 93 04 00 00       	push   $0x493
f011f458:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f45d:	e8 99 0d fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f462:	ff 45 e8             	incl   -0x18(%ebp)
f011f465:	83 ec 08             	sub    $0x8,%esp
f011f468:	ff 75 e8             	pushl  -0x18(%ebp)
f011f46b:	68 94 b3 13 f0       	push   $0xf013b394
f011f470:	e8 0d 18 fe ff       	call   f0100c82 <cprintf>
f011f475:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f478:	e8 4c d4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f47d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f480:	e8 b7 48 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f485:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f488:	83 ec 0c             	sub    $0xc,%esp
f011f48b:	68 00 04 00 00       	push   $0x400
f011f490:	e8 69 83 fe ff       	call   f01077fe <kmalloc>
f011f495:	83 c4 10             	add    $0x10,%esp
f011f498:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f49e:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f4a5:	10 00 00 
f011f4a8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f4ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4b3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f4b9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f4bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4c4:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f4ca:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f4d0:	29 d0                	sub    %edx,%eax
f011f4d2:	89 c1                	mov    %eax,%ecx
f011f4d4:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f4db:	10 00 00 
f011f4de:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f4e3:	0f b6 d0             	movzbl %al,%edx
f011f4e6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f4ec:	01 d0                	add    %edx,%eax
f011f4ee:	48                   	dec    %eax
f011f4ef:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f4f5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f4fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f500:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f506:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f50c:	29 d0                	sub    %edx,%eax
f011f50e:	01 c1                	add    %eax,%ecx
f011f510:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f517:	10 00 00 
f011f51a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f51f:	0f b6 c0             	movzbl %al,%eax
f011f522:	c1 e0 04             	shl    $0x4,%eax
f011f525:	89 c2                	mov    %eax,%edx
f011f527:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f52d:	01 d0                	add    %edx,%eax
f011f52f:	48                   	dec    %eax
f011f530:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f536:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f53c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f541:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f547:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f54d:	29 d0                	sub    %edx,%eax
f011f54f:	01 c8                	add    %ecx,%eax
f011f551:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f557:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f55d:	39 c2                	cmp    %eax,%edx
f011f55f:	74 17                	je     f011f578 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f561:	83 ec 04             	sub    $0x4,%esp
f011f564:	68 74 b3 13 f0       	push   $0xf013b374
f011f569:	68 9a 04 00 00       	push   $0x49a
f011f56e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f573:	e8 83 0c fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f578:	e8 bf 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f57d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f580:	74 17                	je     f011f599 <test_kmalloc_worstfit+0x13f2>
f011f582:	83 ec 04             	sub    $0x4,%esp
f011f585:	68 74 ac 13 f0       	push   $0xf013ac74
f011f58a:	68 9b 04 00 00       	push   $0x49b
f011f58f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f594:	e8 62 0c fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f599:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f59c:	e8 28 d3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f5a1:	29 c3                	sub    %eax,%ebx
f011f5a3:	89 d8                	mov    %ebx,%eax
f011f5a5:	83 f8 01             	cmp    $0x1,%eax
f011f5a8:	74 17                	je     f011f5c1 <test_kmalloc_worstfit+0x141a>
f011f5aa:	83 ec 04             	sub    $0x4,%esp
f011f5ad:	68 92 b1 13 f0       	push   $0xf013b192
f011f5b2:	68 9c 04 00 00       	push   $0x49c
f011f5b7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f5bc:	e8 3a 0c fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5c1:	ff 45 e8             	incl   -0x18(%ebp)
f011f5c4:	83 ec 08             	sub    $0x8,%esp
f011f5c7:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5ca:	68 94 b3 13 f0       	push   $0xf013b394
f011f5cf:	e8 ae 16 fe ff       	call   f0100c82 <cprintf>
f011f5d4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f5d7:	e8 ed d2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f5dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5df:	e8 58 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f5e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f5e7:	83 ec 0c             	sub    $0xc,%esp
f011f5ea:	68 00 f0 1f 00       	push   $0x1ff000
f011f5ef:	e8 0a 82 fe ff       	call   f01077fe <kmalloc>
f011f5f4:	83 c4 10             	add    $0x10,%esp
f011f5f7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f5fd:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f604:	10 00 00 
f011f607:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f60d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f612:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f618:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f61e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f623:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f629:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f62f:	29 d0                	sub    %edx,%eax
f011f631:	89 c1                	mov    %eax,%ecx
f011f633:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f63a:	10 00 00 
f011f63d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f642:	0f b6 d0             	movzbl %al,%edx
f011f645:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f64b:	01 d0                	add    %edx,%eax
f011f64d:	48                   	dec    %eax
f011f64e:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f654:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f65a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f65f:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f665:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f66b:	29 d0                	sub    %edx,%eax
f011f66d:	01 c1                	add    %eax,%ecx
f011f66f:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f676:	10 00 00 
f011f679:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f67e:	0f b6 c0             	movzbl %al,%eax
f011f681:	c1 e0 04             	shl    $0x4,%eax
f011f684:	89 c2                	mov    %eax,%edx
f011f686:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f68c:	01 d0                	add    %edx,%eax
f011f68e:	48                   	dec    %eax
f011f68f:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f695:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f69b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6a0:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f6a6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f6ac:	29 d0                	sub    %edx,%eax
f011f6ae:	01 c8                	add    %ecx,%eax
f011f6b0:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f6b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f6bc:	39 c2                	cmp    %eax,%edx
f011f6be:	74 17                	je     f011f6d7 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f6c0:	83 ec 04             	sub    $0x4,%esp
f011f6c3:	68 74 b3 13 f0       	push   $0xf013b374
f011f6c8:	68 a3 04 00 00       	push   $0x4a3
f011f6cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f6d2:	e8 24 0b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6d7:	e8 60 46 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f6dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6df:	74 17                	je     f011f6f8 <test_kmalloc_worstfit+0x1551>
f011f6e1:	83 ec 04             	sub    $0x4,%esp
f011f6e4:	68 74 ac 13 f0       	push   $0xf013ac74
f011f6e9:	68 a4 04 00 00       	push   $0x4a4
f011f6ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f6f3:	e8 03 0b fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f6f8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f6fb:	e8 c9 d1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f700:	29 c3                	sub    %eax,%ebx
f011f702:	89 d8                	mov    %ebx,%eax
f011f704:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f709:	74 17                	je     f011f722 <test_kmalloc_worstfit+0x157b>
f011f70b:	83 ec 04             	sub    $0x4,%esp
f011f70e:	68 92 b1 13 f0       	push   $0xf013b192
f011f713:	68 a5 04 00 00       	push   $0x4a5
f011f718:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f71d:	e8 d9 0a fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f722:	ff 45 e8             	incl   -0x18(%ebp)
f011f725:	83 ec 08             	sub    $0x8,%esp
f011f728:	ff 75 e8             	pushl  -0x18(%ebp)
f011f72b:	68 94 b3 13 f0       	push   $0xf013b394
f011f730:	e8 4d 15 fe ff       	call   f0100c82 <cprintf>
f011f735:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f738:	e8 8c d1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f73d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f740:	e8 f7 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f745:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f748:	83 ec 0c             	sub    $0xc,%esp
f011f74b:	68 00 00 40 00       	push   $0x400000
f011f750:	e8 a9 80 fe ff       	call   f01077fe <kmalloc>
f011f755:	83 c4 10             	add    $0x10,%esp
f011f758:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f75e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f764:	85 c0                	test   %eax,%eax
f011f766:	74 17                	je     f011f77f <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f768:	83 ec 04             	sub    $0x4,%esp
f011f76b:	68 74 b3 13 f0       	push   $0xf013b374
f011f770:	68 ad 04 00 00       	push   $0x4ad
f011f775:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f77a:	e8 7c 0a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f77f:	e8 b8 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f784:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f787:	74 17                	je     f011f7a0 <test_kmalloc_worstfit+0x15f9>
f011f789:	83 ec 04             	sub    $0x4,%esp
f011f78c:	68 74 ac 13 f0       	push   $0xf013ac74
f011f791:	68 ae 04 00 00       	push   $0x4ae
f011f796:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f79b:	e8 5b 0a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f7a0:	e8 24 d1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f7a5:	89 c2                	mov    %eax,%edx
f011f7a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f7aa:	39 c2                	cmp    %eax,%edx
f011f7ac:	74 17                	je     f011f7c5 <test_kmalloc_worstfit+0x161e>
f011f7ae:	83 ec 04             	sub    $0x4,%esp
f011f7b1:	68 92 b1 13 f0       	push   $0xf013b192
f011f7b6:	68 af 04 00 00       	push   $0x4af
f011f7bb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f7c0:	e8 36 0a fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f7c5:	ff 45 e8             	incl   -0x18(%ebp)
f011f7c8:	83 ec 08             	sub    $0x8,%esp
f011f7cb:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7ce:	68 94 b3 13 f0       	push   $0xf013b394
f011f7d3:	e8 aa 14 fe ff       	call   f0100c82 <cprintf>
f011f7d8:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f7db:	83 ec 0c             	sub    $0xc,%esp
f011f7de:	68 a8 b3 13 f0       	push   $0xf013b3a8
f011f7e3:	e8 9a 14 fe ff       	call   f0100c82 <cprintf>
f011f7e8:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f7eb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f7f0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f7f3:	5b                   	pop    %ebx
f011f7f4:	5f                   	pop    %edi
f011f7f5:	5d                   	pop    %ebp
f011f7f6:	c3                   	ret    

f011f7f7 <test_kfree>:

int test_kfree()
{
f011f7f7:	55                   	push   %ebp
f011f7f8:	89 e5                	mov    %esp,%ebp
f011f7fa:	57                   	push   %edi
f011f7fb:	53                   	push   %ebx
f011f7fc:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f802:	83 ec 0c             	sub    $0xc,%esp
f011f805:	68 9c ab 13 f0       	push   $0xf013ab9c
f011f80a:	e8 73 14 fe ff       	call   f0100c82 <cprintf>
f011f80f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f812:	83 ec 0c             	sub    $0xc,%esp
f011f815:	68 cc ab 13 f0       	push   $0xf013abcc
f011f81a:	e8 63 14 fe ff       	call   f0100c82 <cprintf>
f011f81f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f822:	83 ec 0c             	sub    $0xc,%esp
f011f825:	68 9c ab 13 f0       	push   $0xf013ab9c
f011f82a:	e8 53 14 fe ff       	call   f0100c82 <cprintf>
f011f82f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f832:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f836:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f83a:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f840:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f846:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f84d:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f854:	e8 70 d0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f859:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f85c:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f862:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f867:	b8 00 00 00 00       	mov    $0x0,%eax
f011f86c:	89 d7                	mov    %edx,%edi
f011f86e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f870:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f876:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f87b:	b8 00 00 00 00       	mov    $0x0,%eax
f011f880:	89 d7                	mov    %edx,%edi
f011f882:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f884:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f88a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f88f:	b8 00 00 00 00       	mov    $0x0,%eax
f011f894:	89 d7                	mov    %edx,%edi
f011f896:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f898:	e8 2c d0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f89d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f8a0:	e8 97 44 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f8a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f8a8:	83 ec 0c             	sub    $0xc,%esp
f011f8ab:	68 00 fc 1f 00       	push   $0x1ffc00
f011f8b0:	e8 49 7f fe ff       	call   f01077fe <kmalloc>
f011f8b5:	83 c4 10             	add    $0x10,%esp
f011f8b8:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8be:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f8c4:	89 c1                	mov    %eax,%ecx
f011f8c6:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f8cd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f8d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8d5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f8d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f8db:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8e0:	f7 75 c8             	divl   -0x38(%ebp)
f011f8e3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f8e6:	29 d0                	sub    %edx,%eax
f011f8e8:	89 c3                	mov    %eax,%ebx
f011f8ea:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f8f1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f8f6:	0f b6 d0             	movzbl %al,%edx
f011f8f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f8fc:	01 d0                	add    %edx,%eax
f011f8fe:	48                   	dec    %eax
f011f8ff:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f902:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f905:	ba 00 00 00 00       	mov    $0x0,%edx
f011f90a:	f7 75 c0             	divl   -0x40(%ebp)
f011f90d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f910:	29 d0                	sub    %edx,%eax
f011f912:	01 c3                	add    %eax,%ebx
f011f914:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f91b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f920:	0f b6 c0             	movzbl %al,%eax
f011f923:	c1 e0 04             	shl    $0x4,%eax
f011f926:	89 c2                	mov    %eax,%edx
f011f928:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f92b:	01 d0                	add    %edx,%eax
f011f92d:	48                   	dec    %eax
f011f92e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f931:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f934:	ba 00 00 00 00       	mov    $0x0,%edx
f011f939:	f7 75 b8             	divl   -0x48(%ebp)
f011f93c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f93f:	29 d0                	sub    %edx,%eax
f011f941:	01 d8                	add    %ebx,%eax
f011f943:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f948:	39 c1                	cmp    %eax,%ecx
f011f94a:	74 17                	je     f011f963 <test_kfree+0x16c>
f011f94c:	83 ec 04             	sub    $0x4,%esp
f011f94f:	68 40 ad 13 f0       	push   $0xf013ad40
f011f954:	68 d7 04 00 00       	push   $0x4d7
f011f959:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f95e:	e8 98 08 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f963:	e8 d4 43 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f968:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f96b:	74 17                	je     f011f984 <test_kfree+0x18d>
f011f96d:	83 ec 04             	sub    $0x4,%esp
f011f970:	68 74 ac 13 f0       	push   $0xf013ac74
f011f975:	68 d8 04 00 00       	push   $0x4d8
f011f97a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f97f:	e8 77 08 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f984:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f987:	e8 3d cf fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f98c:	29 c3                	sub    %eax,%ebx
f011f98e:	89 d8                	mov    %ebx,%eax
f011f990:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f995:	74 17                	je     f011f9ae <test_kfree+0x1b7>
f011f997:	83 ec 04             	sub    $0x4,%esp
f011f99a:	68 dc ac 13 f0       	push   $0xf013acdc
f011f99f:	68 d9 04 00 00       	push   $0x4d9
f011f9a4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f9a9:	e8 4d 08 fe ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f9ae:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f9b5:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f9b8:	e8 0c cf fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011f9bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f9c0:	e8 77 43 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f9c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f9c8:	83 ec 0c             	sub    $0xc,%esp
f011f9cb:	68 00 fc 1f 00       	push   $0x1ffc00
f011f9d0:	e8 29 7e fe ff       	call   f01077fe <kmalloc>
f011f9d5:	83 c4 10             	add    $0x10,%esp
f011f9d8:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9de:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f9e4:	89 c1                	mov    %eax,%ecx
f011f9e6:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f9ed:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f9f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9f5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f9f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f9fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa00:	f7 75 b0             	divl   -0x50(%ebp)
f011fa03:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fa06:	29 d0                	sub    %edx,%eax
f011fa08:	89 c3                	mov    %eax,%ebx
f011fa0a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011fa11:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fa16:	0f b6 d0             	movzbl %al,%edx
f011fa19:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fa1c:	01 d0                	add    %edx,%eax
f011fa1e:	48                   	dec    %eax
f011fa1f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011fa22:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fa25:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa2a:	f7 75 a8             	divl   -0x58(%ebp)
f011fa2d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fa30:	29 d0                	sub    %edx,%eax
f011fa32:	01 c3                	add    %eax,%ebx
f011fa34:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011fa3b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fa40:	0f b6 c0             	movzbl %al,%eax
f011fa43:	c1 e0 04             	shl    $0x4,%eax
f011fa46:	89 c2                	mov    %eax,%edx
f011fa48:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fa4b:	01 d0                	add    %edx,%eax
f011fa4d:	48                   	dec    %eax
f011fa4e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011fa51:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fa54:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa59:	f7 75 a0             	divl   -0x60(%ebp)
f011fa5c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fa5f:	29 d0                	sub    %edx,%eax
f011fa61:	01 d8                	add    %ebx,%eax
f011fa63:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fa68:	39 c1                	cmp    %eax,%ecx
f011fa6a:	74 17                	je     f011fa83 <test_kfree+0x28c>
f011fa6c:	83 ec 04             	sub    $0x4,%esp
f011fa6f:	68 40 ad 13 f0       	push   $0xf013ad40
f011fa74:	68 e0 04 00 00       	push   $0x4e0
f011fa79:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fa7e:	e8 78 07 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa83:	e8 b4 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fa88:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa8b:	74 17                	je     f011faa4 <test_kfree+0x2ad>
f011fa8d:	83 ec 04             	sub    $0x4,%esp
f011fa90:	68 74 ac 13 f0       	push   $0xf013ac74
f011fa95:	68 e1 04 00 00       	push   $0x4e1
f011fa9a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fa9f:	e8 57 07 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011faa4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011faa7:	e8 1d ce fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011faac:	29 c3                	sub    %eax,%ebx
f011faae:	89 d8                	mov    %ebx,%eax
f011fab0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fab5:	74 17                	je     f011face <test_kfree+0x2d7>
f011fab7:	83 ec 04             	sub    $0x4,%esp
f011faba:	68 dc ac 13 f0       	push   $0xf013acdc
f011fabf:	68 e2 04 00 00       	push   $0x4e2
f011fac4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fac9:	e8 2d 07 fe ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011face:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011fad5:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fad8:	e8 ec cd fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011fadd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fae0:	e8 57 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fae5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fae8:	83 ec 0c             	sub    $0xc,%esp
f011faeb:	68 00 08 00 00       	push   $0x800
f011faf0:	e8 09 7d fe ff       	call   f01077fe <kmalloc>
f011faf5:	83 c4 10             	add    $0x10,%esp
f011faf8:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fafe:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fb04:	89 c1                	mov    %eax,%ecx
f011fb06:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011fb0d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fb10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb15:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011fb18:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fb1b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb20:	f7 75 98             	divl   -0x68(%ebp)
f011fb23:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fb26:	29 d0                	sub    %edx,%eax
f011fb28:	89 c3                	mov    %eax,%ebx
f011fb2a:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011fb31:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fb36:	0f b6 d0             	movzbl %al,%edx
f011fb39:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fb3c:	01 d0                	add    %edx,%eax
f011fb3e:	48                   	dec    %eax
f011fb3f:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011fb42:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fb45:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb4a:	f7 75 90             	divl   -0x70(%ebp)
f011fb4d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fb50:	29 d0                	sub    %edx,%eax
f011fb52:	01 c3                	add    %eax,%ebx
f011fb54:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011fb5b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fb60:	0f b6 c0             	movzbl %al,%eax
f011fb63:	c1 e0 04             	shl    $0x4,%eax
f011fb66:	89 c2                	mov    %eax,%edx
f011fb68:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fb6b:	01 d0                	add    %edx,%eax
f011fb6d:	48                   	dec    %eax
f011fb6e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011fb71:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fb74:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb79:	f7 75 88             	divl   -0x78(%ebp)
f011fb7c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fb7f:	29 d0                	sub    %edx,%eax
f011fb81:	01 d8                	add    %ebx,%eax
f011fb83:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fb88:	39 c1                	cmp    %eax,%ecx
f011fb8a:	74 17                	je     f011fba3 <test_kfree+0x3ac>
f011fb8c:	83 ec 04             	sub    $0x4,%esp
f011fb8f:	68 40 ad 13 f0       	push   $0xf013ad40
f011fb94:	68 e9 04 00 00       	push   $0x4e9
f011fb99:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fb9e:	e8 58 06 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fba3:	e8 94 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fba8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fbab:	74 17                	je     f011fbc4 <test_kfree+0x3cd>
f011fbad:	83 ec 04             	sub    $0x4,%esp
f011fbb0:	68 74 ac 13 f0       	push   $0xf013ac74
f011fbb5:	68 ea 04 00 00       	push   $0x4ea
f011fbba:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fbbf:	e8 37 06 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbc4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbc7:	e8 fd cc fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011fbcc:	29 c3                	sub    %eax,%ebx
f011fbce:	89 d8                	mov    %ebx,%eax
f011fbd0:	83 f8 01             	cmp    $0x1,%eax
f011fbd3:	74 17                	je     f011fbec <test_kfree+0x3f5>
f011fbd5:	83 ec 04             	sub    $0x4,%esp
f011fbd8:	68 dc ac 13 f0       	push   $0xf013acdc
f011fbdd:	68 eb 04 00 00       	push   $0x4eb
f011fbe2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fbe7:	e8 0f 06 fe ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fbec:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011fbf3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fbf6:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fbfc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fbff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc06:	eb 0e                	jmp    f011fc16 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011fc08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc0b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc0e:	01 d0                	add    %edx,%eax
f011fc10:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fc13:	ff 45 f4             	incl   -0xc(%ebp)
f011fc16:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011fc1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc1f:	7f e7                	jg     f011fc08 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc21:	e8 a3 cc fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011fc26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc29:	e8 0e 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fc2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011fc31:	83 ec 0c             	sub    $0xc,%esp
f011fc34:	68 00 08 00 00       	push   $0x800
f011fc39:	e8 c0 7b fe ff       	call   f01077fe <kmalloc>
f011fc3e:	83 c4 10             	add    $0x10,%esp
f011fc41:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc47:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fc4d:	89 c1                	mov    %eax,%ecx
f011fc4f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fc56:	10 00 00 
f011fc59:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fc5f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc64:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fc6a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fc70:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc75:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fc7b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fc81:	29 d0                	sub    %edx,%eax
f011fc83:	89 c3                	mov    %eax,%ebx
f011fc85:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fc8c:	10 00 00 
f011fc8f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fc94:	0f b6 d0             	movzbl %al,%edx
f011fc97:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fc9d:	01 d0                	add    %edx,%eax
f011fc9f:	48                   	dec    %eax
f011fca0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fca6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fcac:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcb1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fcb7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fcbd:	29 d0                	sub    %edx,%eax
f011fcbf:	01 c3                	add    %eax,%ebx
f011fcc1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fcc8:	10 00 00 
f011fccb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fcd0:	0f b6 c0             	movzbl %al,%eax
f011fcd3:	c1 e0 04             	shl    $0x4,%eax
f011fcd6:	89 c2                	mov    %eax,%edx
f011fcd8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fcde:	01 d0                	add    %edx,%eax
f011fce0:	48                   	dec    %eax
f011fce1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fce7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fced:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcf2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fcf8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fcfe:	29 d0                	sub    %edx,%eax
f011fd00:	01 d8                	add    %ebx,%eax
f011fd02:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fd07:	39 c1                	cmp    %eax,%ecx
f011fd09:	74 17                	je     f011fd22 <test_kfree+0x52b>
f011fd0b:	83 ec 04             	sub    $0x4,%esp
f011fd0e:	68 40 ad 13 f0       	push   $0xf013ad40
f011fd13:	68 f7 04 00 00       	push   $0x4f7
f011fd18:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fd1d:	e8 d9 04 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd22:	e8 15 40 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fd27:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd2a:	74 17                	je     f011fd43 <test_kfree+0x54c>
f011fd2c:	83 ec 04             	sub    $0x4,%esp
f011fd2f:	68 74 ac 13 f0       	push   $0xf013ac74
f011fd34:	68 f8 04 00 00       	push   $0x4f8
f011fd39:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fd3e:	e8 b8 04 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd43:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd46:	e8 7e cb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011fd4b:	29 c3                	sub    %eax,%ebx
f011fd4d:	89 d8                	mov    %ebx,%eax
f011fd4f:	83 f8 01             	cmp    $0x1,%eax
f011fd52:	74 17                	je     f011fd6b <test_kfree+0x574>
f011fd54:	83 ec 04             	sub    $0x4,%esp
f011fd57:	68 dc ac 13 f0       	push   $0xf013acdc
f011fd5c:	68 f9 04 00 00       	push   $0x4f9
f011fd61:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fd66:	e8 90 04 fe ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fd6b:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011fd72:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fd75:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fd7b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fd7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd85:	eb 0e                	jmp    f011fd95 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011fd87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd8a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd8d:	01 d0                	add    %edx,%eax
f011fd8f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fd92:	ff 45 f4             	incl   -0xc(%ebp)
f011fd95:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fd9b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd9e:	7f e7                	jg     f011fd87 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fda0:	e8 24 cb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011fda5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fda8:	e8 8f 3f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fdad:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fdb0:	83 ec 0c             	sub    $0xc,%esp
f011fdb3:	68 00 1c 00 00       	push   $0x1c00
f011fdb8:	e8 41 7a fe ff       	call   f01077fe <kmalloc>
f011fdbd:	83 c4 10             	add    $0x10,%esp
f011fdc0:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdc6:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fdcc:	89 c1                	mov    %eax,%ecx
f011fdce:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fdd5:	10 00 00 
f011fdd8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fdde:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fde3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fde9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fdef:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdf4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fdfa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fe00:	29 d0                	sub    %edx,%eax
f011fe02:	89 c3                	mov    %eax,%ebx
f011fe04:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fe0b:	10 00 00 
f011fe0e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fe13:	0f b6 d0             	movzbl %al,%edx
f011fe16:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fe1c:	01 d0                	add    %edx,%eax
f011fe1e:	48                   	dec    %eax
f011fe1f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fe25:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe30:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fe36:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe3c:	29 d0                	sub    %edx,%eax
f011fe3e:	01 c3                	add    %eax,%ebx
f011fe40:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fe47:	10 00 00 
f011fe4a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fe4f:	0f b6 c0             	movzbl %al,%eax
f011fe52:	c1 e0 04             	shl    $0x4,%eax
f011fe55:	89 c2                	mov    %eax,%edx
f011fe57:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fe5d:	01 d0                	add    %edx,%eax
f011fe5f:	48                   	dec    %eax
f011fe60:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fe66:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fe6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe71:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fe77:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fe7d:	29 d0                	sub    %edx,%eax
f011fe7f:	01 d8                	add    %ebx,%eax
f011fe81:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fe86:	39 c1                	cmp    %eax,%ecx
f011fe88:	74 17                	je     f011fea1 <test_kfree+0x6aa>
f011fe8a:	83 ec 04             	sub    $0x4,%esp
f011fe8d:	68 40 ad 13 f0       	push   $0xf013ad40
f011fe92:	68 05 05 00 00       	push   $0x505
f011fe97:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fe9c:	e8 5a 03 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fea1:	e8 96 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fea6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fea9:	74 17                	je     f011fec2 <test_kfree+0x6cb>
f011feab:	83 ec 04             	sub    $0x4,%esp
f011feae:	68 74 ac 13 f0       	push   $0xf013ac74
f011feb3:	68 06 05 00 00       	push   $0x506
f011feb8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011febd:	e8 39 03 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fec2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fec5:	e8 ff c9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011feca:	29 c3                	sub    %eax,%ebx
f011fecc:	89 d8                	mov    %ebx,%eax
f011fece:	83 f8 02             	cmp    $0x2,%eax
f011fed1:	74 17                	je     f011feea <test_kfree+0x6f3>
f011fed3:	83 ec 04             	sub    $0x4,%esp
f011fed6:	68 dc ac 13 f0       	push   $0xf013acdc
f011fedb:	68 07 05 00 00       	push   $0x507
f011fee0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fee5:	e8 11 03 fe ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011feea:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011fef1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fef4:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fefa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fefd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff04:	eb 0e                	jmp    f011ff14 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011ff06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff09:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff0c:	01 d0                	add    %edx,%eax
f011ff0e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011ff11:	ff 45 f4             	incl   -0xc(%ebp)
f011ff14:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011ff1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff1d:	7f e7                	jg     f011ff06 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff1f:	e8 a5 c9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f011ff24:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff27:	e8 10 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ff2c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ff2f:	83 ec 0c             	sub    $0xc,%esp
f011ff32:	68 00 fc 2f 00       	push   $0x2ffc00
f011ff37:	e8 c2 78 fe ff       	call   f01077fe <kmalloc>
f011ff3c:	83 c4 10             	add    $0x10,%esp
f011ff3f:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff45:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011ff4b:	89 c1                	mov    %eax,%ecx
f011ff4d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ff54:	10 00 00 
f011ff57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ff5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff62:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ff68:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff73:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ff79:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff7f:	29 d0                	sub    %edx,%eax
f011ff81:	89 c3                	mov    %eax,%ebx
f011ff83:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ff8a:	10 00 00 
f011ff8d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ff92:	0f b6 d0             	movzbl %al,%edx
f011ff95:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ff9b:	01 d0                	add    %edx,%eax
f011ff9d:	48                   	dec    %eax
f011ff9e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ffa4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ffaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffaf:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ffb5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ffbb:	29 d0                	sub    %edx,%eax
f011ffbd:	01 c3                	add    %eax,%ebx
f011ffbf:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ffc6:	10 00 00 
f011ffc9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ffce:	0f b6 c0             	movzbl %al,%eax
f011ffd1:	c1 e0 04             	shl    $0x4,%eax
f011ffd4:	89 c2                	mov    %eax,%edx
f011ffd6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ffdc:	01 d0                	add    %edx,%eax
f011ffde:	48                   	dec    %eax
f011ffdf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ffe5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ffeb:	ba 00 00 00 00       	mov    $0x0,%edx
f011fff0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011fff6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fffc:	29 d0                	sub    %edx,%eax
f011fffe:	01 d8                	add    %ebx,%eax
f0120000:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120005:	39 c1                	cmp    %eax,%ecx
f0120007:	74 17                	je     f0120020 <test_kfree+0x829>
f0120009:	83 ec 04             	sub    $0x4,%esp
f012000c:	68 40 ad 13 f0       	push   $0xf013ad40
f0120011:	68 13 05 00 00       	push   $0x513
f0120016:	68 5a ac 13 f0       	push   $0xf013ac5a
f012001b:	e8 db 01 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120020:	e8 17 3d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120025:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120028:	74 17                	je     f0120041 <test_kfree+0x84a>
f012002a:	83 ec 04             	sub    $0x4,%esp
f012002d:	68 74 ac 13 f0       	push   $0xf013ac74
f0120032:	68 14 05 00 00       	push   $0x514
f0120037:	68 5a ac 13 f0       	push   $0xf013ac5a
f012003c:	e8 ba 01 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120041:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120044:	e8 80 c8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120049:	29 c3                	sub    %eax,%ebx
f012004b:	89 d8                	mov    %ebx,%eax
f012004d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120052:	74 17                	je     f012006b <test_kfree+0x874>
f0120054:	83 ec 04             	sub    $0x4,%esp
f0120057:	68 dc ac 13 f0       	push   $0xf013acdc
f012005c:	68 15 05 00 00       	push   $0x515
f0120061:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120066:	e8 90 01 fe ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012006b:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120072:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120075:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012007b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012007e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120085:	eb 0e                	jmp    f0120095 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120087:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012008a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012008d:	01 d0                	add    %edx,%eax
f012008f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120092:	ff 45 f4             	incl   -0xc(%ebp)
f0120095:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012009b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012009e:	7f e7                	jg     f0120087 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01200a0:	e8 24 c8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01200a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200a8:	e8 8f 3c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01200ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01200b0:	83 ec 0c             	sub    $0xc,%esp
f01200b3:	68 00 fc 5f 00       	push   $0x5ffc00
f01200b8:	e8 41 77 fe ff       	call   f01077fe <kmalloc>
f01200bd:	83 c4 10             	add    $0x10,%esp
f01200c0:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01200c6:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01200cc:	89 c1                	mov    %eax,%ecx
f01200ce:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01200d5:	10 00 00 
f01200d8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01200de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200e3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01200e9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01200ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01200f4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01200fa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120100:	29 d0                	sub    %edx,%eax
f0120102:	89 c3                	mov    %eax,%ebx
f0120104:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012010b:	10 00 00 
f012010e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120113:	0f b6 d0             	movzbl %al,%edx
f0120116:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012011c:	01 d0                	add    %edx,%eax
f012011e:	48                   	dec    %eax
f012011f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120125:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012012b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120130:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120136:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012013c:	29 d0                	sub    %edx,%eax
f012013e:	01 c3                	add    %eax,%ebx
f0120140:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120147:	10 00 00 
f012014a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012014f:	0f b6 c0             	movzbl %al,%eax
f0120152:	c1 e0 04             	shl    $0x4,%eax
f0120155:	89 c2                	mov    %eax,%edx
f0120157:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012015d:	01 d0                	add    %edx,%eax
f012015f:	48                   	dec    %eax
f0120160:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120166:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012016c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120171:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120177:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012017d:	29 d0                	sub    %edx,%eax
f012017f:	01 d8                	add    %ebx,%eax
f0120181:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120186:	39 c1                	cmp    %eax,%ecx
f0120188:	74 17                	je     f01201a1 <test_kfree+0x9aa>
f012018a:	83 ec 04             	sub    $0x4,%esp
f012018d:	68 40 ad 13 f0       	push   $0xf013ad40
f0120192:	68 21 05 00 00       	push   $0x521
f0120197:	68 5a ac 13 f0       	push   $0xf013ac5a
f012019c:	e8 5a 00 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201a1:	e8 96 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01201a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01201a9:	74 17                	je     f01201c2 <test_kfree+0x9cb>
f01201ab:	83 ec 04             	sub    $0x4,%esp
f01201ae:	68 74 ac 13 f0       	push   $0xf013ac74
f01201b3:	68 22 05 00 00       	push   $0x522
f01201b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01201bd:	e8 39 00 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01201c2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01201c5:	e8 ff c6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01201ca:	29 c3                	sub    %eax,%ebx
f01201cc:	89 d8                	mov    %ebx,%eax
f01201ce:	3d 00 06 00 00       	cmp    $0x600,%eax
f01201d3:	74 17                	je     f01201ec <test_kfree+0x9f5>
f01201d5:	83 ec 04             	sub    $0x4,%esp
f01201d8:	68 dc ac 13 f0       	push   $0xf013acdc
f01201dd:	68 23 05 00 00       	push   $0x523
f01201e2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01201e7:	e8 0f 00 fe ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01201ec:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f01201f3:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01201f6:	e8 ce c6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01201fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01201fe:	e8 39 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120203:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120206:	83 ec 0c             	sub    $0xc,%esp
f0120209:	68 00 38 00 00       	push   $0x3800
f012020e:	e8 eb 75 fe ff       	call   f01077fe <kmalloc>
f0120213:	83 c4 10             	add    $0x10,%esp
f0120216:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012021c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120222:	89 c1                	mov    %eax,%ecx
f0120224:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012022b:	10 00 00 
f012022e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120234:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120239:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012023f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120245:	ba 00 00 00 00       	mov    $0x0,%edx
f012024a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120250:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120256:	29 d0                	sub    %edx,%eax
f0120258:	89 c3                	mov    %eax,%ebx
f012025a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120261:	10 00 00 
f0120264:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120269:	0f b6 d0             	movzbl %al,%edx
f012026c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120272:	01 d0                	add    %edx,%eax
f0120274:	48                   	dec    %eax
f0120275:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012027b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120281:	ba 00 00 00 00       	mov    $0x0,%edx
f0120286:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012028c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120292:	29 d0                	sub    %edx,%eax
f0120294:	01 c3                	add    %eax,%ebx
f0120296:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012029d:	10 00 00 
f01202a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01202a5:	0f b6 c0             	movzbl %al,%eax
f01202a8:	c1 e0 04             	shl    $0x4,%eax
f01202ab:	89 c2                	mov    %eax,%edx
f01202ad:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01202b3:	01 d0                	add    %edx,%eax
f01202b5:	48                   	dec    %eax
f01202b6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01202bc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01202c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01202c7:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01202cd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01202d3:	29 d0                	sub    %edx,%eax
f01202d5:	01 d8                	add    %ebx,%eax
f01202d7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01202dc:	39 c1                	cmp    %eax,%ecx
f01202de:	74 17                	je     f01202f7 <test_kfree+0xb00>
f01202e0:	83 ec 04             	sub    $0x4,%esp
f01202e3:	68 40 ad 13 f0       	push   $0xf013ad40
f01202e8:	68 2a 05 00 00       	push   $0x52a
f01202ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f01202f2:	e8 04 ff fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01202f7:	e8 40 3a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01202fc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01202ff:	74 17                	je     f0120318 <test_kfree+0xb21>
f0120301:	83 ec 04             	sub    $0x4,%esp
f0120304:	68 74 ac 13 f0       	push   $0xf013ac74
f0120309:	68 2b 05 00 00       	push   $0x52b
f012030e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120313:	e8 e3 fe fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120318:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012031b:	e8 a9 c5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120320:	29 c3                	sub    %eax,%ebx
f0120322:	89 d8                	mov    %ebx,%eax
f0120324:	83 f8 04             	cmp    $0x4,%eax
f0120327:	74 17                	je     f0120340 <test_kfree+0xb49>
f0120329:	83 ec 04             	sub    $0x4,%esp
f012032c:	68 dc ac 13 f0       	push   $0xf013acdc
f0120331:	68 2c 05 00 00       	push   $0x52c
f0120336:	68 5a ac 13 f0       	push   $0xf013ac5a
f012033b:	e8 bb fe fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120340:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120347:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012034a:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120350:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012035a:	eb 0e                	jmp    f012036a <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f012035c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012035f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120362:	01 d0                	add    %edx,%eax
f0120364:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120367:	ff 45 f4             	incl   -0xc(%ebp)
f012036a:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120370:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120373:	7f e7                	jg     f012035c <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120375:	e8 4f c5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012037a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120380:	e8 b7 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120385:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012038b:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120391:	83 ec 0c             	sub    $0xc,%esp
f0120394:	50                   	push   %eax
f0120395:	e8 26 75 fe ff       	call   f01078c0 <kfree>
f012039a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012039d:	e8 9a 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01203a2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01203a8:	74 17                	je     f01203c1 <test_kfree+0xbca>
f01203aa:	83 ec 04             	sub    $0x4,%esp
f01203ad:	68 74 ac 13 f0       	push   $0xf013ac74
f01203b2:	68 3b 05 00 00       	push   $0x53b
f01203b7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01203bc:	e8 3a fe fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01203c1:	e8 03 c5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01203c6:	89 c2                	mov    %eax,%edx
f01203c8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01203ce:	29 c2                	sub    %eax,%edx
f01203d0:	89 d0                	mov    %edx,%eax
f01203d2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01203d7:	74 17                	je     f01203f0 <test_kfree+0xbf9>
f01203d9:	83 ec 04             	sub    $0x4,%esp
f01203dc:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01203e1:	68 3c 05 00 00       	push   $0x53c
f01203e6:	68 5a ac 13 f0       	push   $0xf013ac5a
f01203eb:	e8 0b fe fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01203f0:	e8 d4 c4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01203f5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203fb:	e8 3c 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120400:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120406:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012040c:	83 ec 0c             	sub    $0xc,%esp
f012040f:	50                   	push   %eax
f0120410:	e8 ab 74 fe ff       	call   f01078c0 <kfree>
f0120415:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120418:	e8 1f 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012041d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120423:	74 17                	je     f012043c <test_kfree+0xc45>
f0120425:	83 ec 04             	sub    $0x4,%esp
f0120428:	68 74 ac 13 f0       	push   $0xf013ac74
f012042d:	68 42 05 00 00       	push   $0x542
f0120432:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120437:	e8 bf fd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012043c:	e8 88 c4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120441:	89 c2                	mov    %eax,%edx
f0120443:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120449:	29 c2                	sub    %eax,%edx
f012044b:	89 d0                	mov    %edx,%eax
f012044d:	83 f8 01             	cmp    $0x1,%eax
f0120450:	74 17                	je     f0120469 <test_kfree+0xc72>
f0120452:	83 ec 04             	sub    $0x4,%esp
f0120455:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012045a:	68 43 05 00 00       	push   $0x543
f012045f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120464:	e8 92 fd fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120469:	e8 5b c4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012046e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120474:	e8 c3 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120479:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012047f:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120485:	83 ec 0c             	sub    $0xc,%esp
f0120488:	50                   	push   %eax
f0120489:	e8 32 74 fe ff       	call   f01078c0 <kfree>
f012048e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120491:	e8 a6 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120496:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012049c:	74 17                	je     f01204b5 <test_kfree+0xcbe>
f012049e:	83 ec 04             	sub    $0x4,%esp
f01204a1:	68 74 ac 13 f0       	push   $0xf013ac74
f01204a6:	68 49 05 00 00       	push   $0x549
f01204ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f01204b0:	e8 46 fd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01204b5:	e8 0f c4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01204ba:	89 c2                	mov    %eax,%edx
f01204bc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01204c2:	29 c2                	sub    %eax,%edx
f01204c4:	89 d0                	mov    %edx,%eax
f01204c6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01204cb:	74 17                	je     f01204e4 <test_kfree+0xced>
f01204cd:	83 ec 04             	sub    $0x4,%esp
f01204d0:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01204d5:	68 4a 05 00 00       	push   $0x54a
f01204da:	68 5a ac 13 f0       	push   $0xf013ac5a
f01204df:	e8 17 fd fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01204e4:	e8 e0 c3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01204e9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204ef:	e8 48 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01204f4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01204fa:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120500:	83 ec 0c             	sub    $0xc,%esp
f0120503:	50                   	push   %eax
f0120504:	e8 b7 73 fe ff       	call   f01078c0 <kfree>
f0120509:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012050c:	e8 2b 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120511:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120517:	74 17                	je     f0120530 <test_kfree+0xd39>
f0120519:	83 ec 04             	sub    $0x4,%esp
f012051c:	68 74 ac 13 f0       	push   $0xf013ac74
f0120521:	68 50 05 00 00       	push   $0x550
f0120526:	68 5a ac 13 f0       	push   $0xf013ac5a
f012052b:	e8 cb fc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120530:	e8 94 c3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120535:	89 c2                	mov    %eax,%edx
f0120537:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012053d:	29 c2                	sub    %eax,%edx
f012053f:	89 d0                	mov    %edx,%eax
f0120541:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120546:	74 17                	je     f012055f <test_kfree+0xd68>
f0120548:	83 ec 04             	sub    $0x4,%esp
f012054b:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0120550:	68 51 05 00 00       	push   $0x551
f0120555:	68 5a ac 13 f0       	push   $0xf013ac5a
f012055a:	e8 9c fc fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012055f:	83 ec 0c             	sub    $0xc,%esp
f0120562:	68 1c b4 13 f0       	push   $0xf013b41c
f0120567:	e8 16 07 fe ff       	call   f0100c82 <cprintf>
f012056c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012056f:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120575:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120578:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012057f:	eb 1e                	jmp    f012059f <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120581:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120587:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012058a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012058d:	01 c8                	add    %ecx,%eax
f012058f:	8a 00                	mov    (%eax),%al
f0120591:	0f be c0             	movsbl %al,%eax
f0120594:	01 d0                	add    %edx,%eax
f0120596:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012059c:	ff 45 f4             	incl   -0xc(%ebp)
f012059f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01205a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205a8:	7f d7                	jg     f0120581 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01205aa:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01205b0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01205b6:	89 c1                	mov    %eax,%ecx
f01205b8:	01 c9                	add    %ecx,%ecx
f01205ba:	01 c8                	add    %ecx,%eax
f01205bc:	39 c2                	cmp    %eax,%edx
f01205be:	74 17                	je     f01205d7 <test_kfree+0xde0>
f01205c0:	83 ec 04             	sub    $0x4,%esp
f01205c3:	68 40 b4 13 f0       	push   $0xf013b440
f01205c8:	68 5e 05 00 00       	push   $0x55e
f01205cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01205d2:	e8 24 fc fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01205d7:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01205dd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01205e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205e7:	eb 1e                	jmp    f0120607 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01205e9:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01205ef:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01205f2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205f5:	01 c8                	add    %ecx,%eax
f01205f7:	8a 00                	mov    (%eax),%al
f01205f9:	0f be c0             	movsbl %al,%eax
f01205fc:	01 d0                	add    %edx,%eax
f01205fe:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120604:	ff 45 f4             	incl   -0xc(%ebp)
f0120607:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012060d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120610:	7f d7                	jg     f01205e9 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120612:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120618:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012061e:	c1 e2 02             	shl    $0x2,%edx
f0120621:	39 d0                	cmp    %edx,%eax
f0120623:	74 17                	je     f012063c <test_kfree+0xe45>
f0120625:	83 ec 04             	sub    $0x4,%esp
f0120628:	68 40 b4 13 f0       	push   $0xf013b440
f012062d:	68 66 05 00 00       	push   $0x566
f0120632:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120637:	e8 bf fb fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012063c:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120642:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012064c:	eb 1e                	jmp    f012066c <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f012064e:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120654:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120657:	8b 45 80             	mov    -0x80(%ebp),%eax
f012065a:	01 c8                	add    %ecx,%eax
f012065c:	8a 00                	mov    (%eax),%al
f012065e:	0f be c0             	movsbl %al,%eax
f0120661:	01 d0                	add    %edx,%eax
f0120663:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120669:	ff 45 f4             	incl   -0xc(%ebp)
f012066c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120672:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120675:	7f d7                	jg     f012064e <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120677:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012067d:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120683:	89 d0                	mov    %edx,%eax
f0120685:	c1 e0 02             	shl    $0x2,%eax
f0120688:	01 d0                	add    %edx,%eax
f012068a:	39 c1                	cmp    %eax,%ecx
f012068c:	74 17                	je     f01206a5 <test_kfree+0xeae>
f012068e:	83 ec 04             	sub    $0x4,%esp
f0120691:	68 40 b4 13 f0       	push   $0xf013b440
f0120696:	68 6e 05 00 00       	push   $0x56e
f012069b:	68 5a ac 13 f0       	push   $0xf013ac5a
f01206a0:	e8 56 fb fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01206a5:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01206ab:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01206ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01206b5:	eb 1e                	jmp    f01206d5 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01206b7:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01206bd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01206c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01206c3:	01 c8                	add    %ecx,%eax
f01206c5:	8a 00                	mov    (%eax),%al
f01206c7:	0f be c0             	movsbl %al,%eax
f01206ca:	01 d0                	add    %edx,%eax
f01206cc:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01206d2:	ff 45 f4             	incl   -0xc(%ebp)
f01206d5:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01206db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01206de:	7f d7                	jg     f01206b7 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01206e0:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01206e6:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01206ec:	89 d0                	mov    %edx,%eax
f01206ee:	01 c0                	add    %eax,%eax
f01206f0:	01 d0                	add    %edx,%eax
f01206f2:	01 c0                	add    %eax,%eax
f01206f4:	01 d0                	add    %edx,%eax
f01206f6:	39 c1                	cmp    %eax,%ecx
f01206f8:	74 17                	je     f0120711 <test_kfree+0xf1a>
f01206fa:	83 ec 04             	sub    $0x4,%esp
f01206fd:	68 40 b4 13 f0       	push   $0xf013b440
f0120702:	68 76 05 00 00       	push   $0x576
f0120707:	68 5a ac 13 f0       	push   $0xf013ac5a
f012070c:	e8 ea fa fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f0120711:	83 ec 0c             	sub    $0xc,%esp
f0120714:	68 73 b4 13 f0       	push   $0xf013b473
f0120719:	e8 64 05 fe ff       	call   f0100c82 <cprintf>
f012071e:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120721:	e8 a3 c1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120726:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120729:	e8 0e 36 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012072e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120731:	83 ec 0c             	sub    $0xc,%esp
f0120734:	68 00 50 00 00       	push   $0x5000
f0120739:	e8 c0 70 fe ff       	call   f01077fe <kmalloc>
f012073e:	83 c4 10             	add    $0x10,%esp
f0120741:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120747:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012074d:	89 c1                	mov    %eax,%ecx
f012074f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0120756:	10 00 00 
f0120759:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012075f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120764:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012076a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120770:	ba 00 00 00 00       	mov    $0x0,%edx
f0120775:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012077b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120781:	29 d0                	sub    %edx,%eax
f0120783:	89 c3                	mov    %eax,%ebx
f0120785:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012078c:	10 00 00 
f012078f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120794:	0f b6 d0             	movzbl %al,%edx
f0120797:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012079d:	01 d0                	add    %edx,%eax
f012079f:	48                   	dec    %eax
f01207a0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01207a6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01207ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01207b1:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01207b7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01207bd:	29 d0                	sub    %edx,%eax
f01207bf:	01 c3                	add    %eax,%ebx
f01207c1:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01207c8:	10 00 00 
f01207cb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01207d0:	0f b6 c0             	movzbl %al,%eax
f01207d3:	c1 e0 04             	shl    $0x4,%eax
f01207d6:	89 c2                	mov    %eax,%edx
f01207d8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01207de:	01 d0                	add    %edx,%eax
f01207e0:	48                   	dec    %eax
f01207e1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01207e7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01207ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01207f2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01207f8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01207fe:	29 d0                	sub    %edx,%eax
f0120800:	01 d8                	add    %ebx,%eax
f0120802:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120807:	39 c1                	cmp    %eax,%ecx
f0120809:	74 17                	je     f0120822 <test_kfree+0x102b>
f012080b:	83 ec 04             	sub    $0x4,%esp
f012080e:	68 40 ad 13 f0       	push   $0xf013ad40
f0120813:	68 80 05 00 00       	push   $0x580
f0120818:	68 5a ac 13 f0       	push   $0xf013ac5a
f012081d:	e8 d9 f9 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120822:	e8 15 35 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120827:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012082a:	74 17                	je     f0120843 <test_kfree+0x104c>
f012082c:	83 ec 04             	sub    $0x4,%esp
f012082f:	68 74 ac 13 f0       	push   $0xf013ac74
f0120834:	68 81 05 00 00       	push   $0x581
f0120839:	68 5a ac 13 f0       	push   $0xf013ac5a
f012083e:	e8 b8 f9 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120843:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120846:	e8 7e c0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012084b:	29 c3                	sub    %eax,%ebx
f012084d:	89 d8                	mov    %ebx,%eax
f012084f:	83 f8 05             	cmp    $0x5,%eax
f0120852:	74 17                	je     f012086b <test_kfree+0x1074>
f0120854:	83 ec 04             	sub    $0x4,%esp
f0120857:	68 dc ac 13 f0       	push   $0xf013acdc
f012085c:	68 82 05 00 00       	push   $0x582
f0120861:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120866:	e8 90 f9 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012086b:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120872:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120875:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012087b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012087e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120885:	eb 0e                	jmp    f0120895 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0120887:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012088a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012088d:	01 d0                	add    %edx,%eax
f012088f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120892:	ff 45 f4             	incl   -0xc(%ebp)
f0120895:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012089b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012089e:	7f e7                	jg     f0120887 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01208a0:	e8 24 c0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01208a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208a8:	e8 8f 34 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01208ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01208b0:	83 ec 0c             	sub    $0xc,%esp
f01208b3:	68 00 00 10 00       	push   $0x100000
f01208b8:	e8 41 6f fe ff       	call   f01077fe <kmalloc>
f01208bd:	83 c4 10             	add    $0x10,%esp
f01208c0:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208c6:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01208cc:	89 c1                	mov    %eax,%ecx
f01208ce:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01208d5:	10 00 00 
f01208d8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01208de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01208e3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01208e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01208ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01208f4:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01208fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120900:	29 d0                	sub    %edx,%eax
f0120902:	89 c3                	mov    %eax,%ebx
f0120904:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012090b:	10 00 00 
f012090e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120913:	0f b6 d0             	movzbl %al,%edx
f0120916:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012091c:	01 d0                	add    %edx,%eax
f012091e:	48                   	dec    %eax
f012091f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120925:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012092b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120930:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120936:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012093c:	29 d0                	sub    %edx,%eax
f012093e:	01 c3                	add    %eax,%ebx
f0120940:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0120947:	10 00 00 
f012094a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012094f:	0f b6 c0             	movzbl %al,%eax
f0120952:	c1 e0 04             	shl    $0x4,%eax
f0120955:	89 c2                	mov    %eax,%edx
f0120957:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012095d:	01 d0                	add    %edx,%eax
f012095f:	48                   	dec    %eax
f0120960:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0120966:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012096c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120971:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120977:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012097d:	29 d0                	sub    %edx,%eax
f012097f:	01 d8                	add    %ebx,%eax
f0120981:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120986:	39 c1                	cmp    %eax,%ecx
f0120988:	74 17                	je     f01209a1 <test_kfree+0x11aa>
f012098a:	83 ec 04             	sub    $0x4,%esp
f012098d:	68 40 ad 13 f0       	push   $0xf013ad40
f0120992:	68 8e 05 00 00       	push   $0x58e
f0120997:	68 5a ac 13 f0       	push   $0xf013ac5a
f012099c:	e8 5a f8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209a1:	e8 96 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01209a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209a9:	74 17                	je     f01209c2 <test_kfree+0x11cb>
f01209ab:	83 ec 04             	sub    $0x4,%esp
f01209ae:	68 74 ac 13 f0       	push   $0xf013ac74
f01209b3:	68 8f 05 00 00       	push   $0x58f
f01209b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01209bd:	e8 39 f8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209c2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209c5:	e8 ff be fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01209ca:	29 c3                	sub    %eax,%ebx
f01209cc:	89 d8                	mov    %ebx,%eax
f01209ce:	3d 00 01 00 00       	cmp    $0x100,%eax
f01209d3:	74 17                	je     f01209ec <test_kfree+0x11f5>
f01209d5:	83 ec 04             	sub    $0x4,%esp
f01209d8:	68 dc ac 13 f0       	push   $0xf013acdc
f01209dd:	68 90 05 00 00       	push   $0x590
f01209e2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01209e7:	e8 0f f8 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01209ec:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01209f3:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01209f6:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01209fc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01209ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a06:	eb 0e                	jmp    f0120a16 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120a08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a0b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a0e:	01 d0                	add    %edx,%eax
f0120a10:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120a13:	ff 45 f4             	incl   -0xc(%ebp)
f0120a16:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120a1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a1f:	7f e7                	jg     f0120a08 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120a21:	e8 ac 66 ff ff       	call   f01170d2 <isKHeapPlacementStrategyNEXTFIT>
f0120a26:	84 c0                	test   %al,%al
f0120a28:	0f 84 ac 06 00 00    	je     f01210da <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120a2e:	e8 96 be fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120a33:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a36:	e8 01 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120a3b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120a3e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120a45:	10 00 00 
f0120a48:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120a4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a53:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120a59:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120a5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a64:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120a6a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120a70:	29 d0                	sub    %edx,%eax
f0120a72:	89 c1                	mov    %eax,%ecx
f0120a74:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120a7b:	10 00 00 
f0120a7e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120a83:	0f b6 d0             	movzbl %al,%edx
f0120a86:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120a8c:	01 d0                	add    %edx,%eax
f0120a8e:	48                   	dec    %eax
f0120a8f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120a95:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aa0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120aa6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120aac:	29 d0                	sub    %edx,%eax
f0120aae:	01 c1                	add    %eax,%ecx
f0120ab0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120ab7:	10 00 00 
f0120aba:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120abf:	0f b6 c0             	movzbl %al,%eax
f0120ac2:	c1 e0 04             	shl    $0x4,%eax
f0120ac5:	89 c2                	mov    %eax,%edx
f0120ac7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120acd:	01 d0                	add    %edx,%eax
f0120acf:	48                   	dec    %eax
f0120ad0:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120ad6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120adc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ae1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120ae7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120aed:	29 d0                	sub    %edx,%eax
f0120aef:	01 c8                	add    %ecx,%eax
f0120af1:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120af6:	29 c2                	sub    %eax,%edx
f0120af8:	89 d0                	mov    %edx,%eax
f0120afa:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120b00:	83 ec 0c             	sub    $0xc,%esp
f0120b03:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120b09:	e8 f0 6c fe ff       	call   f01077fe <kmalloc>
f0120b0e:	83 c4 10             	add    $0x10,%esp
f0120b11:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b17:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120b1d:	89 c1                	mov    %eax,%ecx
f0120b1f:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120b26:	10 00 00 
f0120b29:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120b2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120b34:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0120b3a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120b40:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b45:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0120b4b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120b51:	29 d0                	sub    %edx,%eax
f0120b53:	89 c3                	mov    %eax,%ebx
f0120b55:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0120b5c:	10 00 00 
f0120b5f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120b64:	0f b6 d0             	movzbl %al,%edx
f0120b67:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0120b6d:	01 d0                	add    %edx,%eax
f0120b6f:	48                   	dec    %eax
f0120b70:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120b76:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120b7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b81:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120b87:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120b8d:	29 d0                	sub    %edx,%eax
f0120b8f:	01 c3                	add    %eax,%ebx
f0120b91:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120b98:	10 00 00 
f0120b9b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120ba0:	0f b6 c0             	movzbl %al,%eax
f0120ba3:	c1 e0 04             	shl    $0x4,%eax
f0120ba6:	89 c2                	mov    %eax,%edx
f0120ba8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120bae:	01 d0                	add    %edx,%eax
f0120bb0:	48                   	dec    %eax
f0120bb1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120bb7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120bbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bc2:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120bc8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120bce:	29 d0                	sub    %edx,%eax
f0120bd0:	01 d8                	add    %ebx,%eax
f0120bd2:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120bd7:	39 c1                	cmp    %eax,%ecx
f0120bd9:	74 17                	je     f0120bf2 <test_kfree+0x13fb>
f0120bdb:	83 ec 04             	sub    $0x4,%esp
f0120bde:	68 40 ad 13 f0       	push   $0xf013ad40
f0120be3:	68 9f 05 00 00       	push   $0x59f
f0120be8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120bed:	e8 09 f6 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bf2:	e8 45 31 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120bf7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bfa:	74 17                	je     f0120c13 <test_kfree+0x141c>
f0120bfc:	83 ec 04             	sub    $0x4,%esp
f0120bff:	68 74 ac 13 f0       	push   $0xf013ac74
f0120c04:	68 a0 05 00 00       	push   $0x5a0
f0120c09:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120c0e:	e8 e8 f5 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c13:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c16:	e8 ae bc fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120c1b:	29 c3                	sub    %eax,%ebx
f0120c1d:	89 da                	mov    %ebx,%edx
f0120c1f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120c25:	c1 e8 0c             	shr    $0xc,%eax
f0120c28:	39 c2                	cmp    %eax,%edx
f0120c2a:	74 17                	je     f0120c43 <test_kfree+0x144c>
f0120c2c:	83 ec 04             	sub    $0x4,%esp
f0120c2f:	68 dc ac 13 f0       	push   $0xf013acdc
f0120c34:	68 a1 05 00 00       	push   $0x5a1
f0120c39:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120c3e:	e8 b8 f5 fd ff       	call   f01001fb <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120c43:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120c49:	48                   	dec    %eax
f0120c4a:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120c50:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120c56:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120c59:	e8 6b bc fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120c5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c61:	e8 d6 30 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120c66:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120c69:	83 ec 0c             	sub    $0xc,%esp
f0120c6c:	68 00 00 30 00       	push   $0x300000
f0120c71:	e8 88 6b fe ff       	call   f01077fe <kmalloc>
f0120c76:	83 c4 10             	add    $0x10,%esp
f0120c79:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c7f:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120c85:	89 c1                	mov    %eax,%ecx
f0120c87:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120c8e:	10 00 00 
f0120c91:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120c97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c9c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120ca2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120ca8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cad:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120cb3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120cb9:	29 d0                	sub    %edx,%eax
f0120cbb:	89 c3                	mov    %eax,%ebx
f0120cbd:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120cc4:	10 00 00 
f0120cc7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120ccc:	0f b6 d0             	movzbl %al,%edx
f0120ccf:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120cd5:	01 d0                	add    %edx,%eax
f0120cd7:	48                   	dec    %eax
f0120cd8:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120cde:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120ce4:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ce9:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120cef:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120cf5:	29 d0                	sub    %edx,%eax
f0120cf7:	01 c3                	add    %eax,%ebx
f0120cf9:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120d00:	10 00 00 
f0120d03:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120d08:	0f b6 c0             	movzbl %al,%eax
f0120d0b:	c1 e0 04             	shl    $0x4,%eax
f0120d0e:	89 c2                	mov    %eax,%edx
f0120d10:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120d16:	01 d0                	add    %edx,%eax
f0120d18:	48                   	dec    %eax
f0120d19:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120d1f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120d25:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d2a:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120d30:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120d36:	29 d0                	sub    %edx,%eax
f0120d38:	01 d8                	add    %ebx,%eax
f0120d3a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120d3f:	39 c1                	cmp    %eax,%ecx
f0120d41:	74 17                	je     f0120d5a <test_kfree+0x1563>
f0120d43:	83 ec 04             	sub    $0x4,%esp
f0120d46:	68 40 ad 13 f0       	push   $0xf013ad40
f0120d4b:	68 ae 05 00 00       	push   $0x5ae
f0120d50:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120d55:	e8 a1 f4 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d5a:	e8 dd 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120d5f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d62:	74 17                	je     f0120d7b <test_kfree+0x1584>
f0120d64:	83 ec 04             	sub    $0x4,%esp
f0120d67:	68 74 ac 13 f0       	push   $0xf013ac74
f0120d6c:	68 af 05 00 00       	push   $0x5af
f0120d71:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120d76:	e8 80 f4 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d7b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d7e:	e8 46 bb fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120d83:	29 c3                	sub    %eax,%ebx
f0120d85:	89 d8                	mov    %ebx,%eax
f0120d87:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120d8c:	74 17                	je     f0120da5 <test_kfree+0x15ae>
f0120d8e:	83 ec 04             	sub    $0x4,%esp
f0120d91:	68 dc ac 13 f0       	push   $0xf013acdc
f0120d96:	68 b0 05 00 00       	push   $0x5b0
f0120d9b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120da0:	e8 56 f4 fd ff       	call   f01001fb <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120da5:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120dac:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120daf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120db5:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120db8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120dbf:	eb 0e                	jmp    f0120dcf <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120dc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120dc4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120dc7:	01 d0                	add    %edx,%eax
f0120dc9:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120dcc:	ff 45 f4             	incl   -0xc(%ebp)
f0120dcf:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120dd5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120dd8:	7f e7                	jg     f0120dc1 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120dda:	e8 ea ba fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120ddf:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120de2:	e8 55 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120de7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120dea:	83 ec 0c             	sub    $0xc,%esp
f0120ded:	68 00 08 00 00       	push   $0x800
f0120df2:	e8 07 6a fe ff       	call   f01077fe <kmalloc>
f0120df7:	83 c4 10             	add    $0x10,%esp
f0120dfa:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120e00:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120e06:	89 c1                	mov    %eax,%ecx
f0120e08:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120e0f:	10 00 00 
f0120e12:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120e18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e1d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120e23:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120e29:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e2e:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120e34:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120e3a:	29 d0                	sub    %edx,%eax
f0120e3c:	89 c3                	mov    %eax,%ebx
f0120e3e:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120e45:	10 00 00 
f0120e48:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120e4d:	0f b6 d0             	movzbl %al,%edx
f0120e50:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120e56:	01 d0                	add    %edx,%eax
f0120e58:	48                   	dec    %eax
f0120e59:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120e5f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120e65:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e6a:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120e70:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120e76:	29 d0                	sub    %edx,%eax
f0120e78:	01 c3                	add    %eax,%ebx
f0120e7a:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120e81:	10 00 00 
f0120e84:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120e89:	0f b6 c0             	movzbl %al,%eax
f0120e8c:	c1 e0 04             	shl    $0x4,%eax
f0120e8f:	89 c2                	mov    %eax,%edx
f0120e91:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120e97:	01 d0                	add    %edx,%eax
f0120e99:	48                   	dec    %eax
f0120e9a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120ea0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120ea6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120eab:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120eb1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120eb7:	29 d0                	sub    %edx,%eax
f0120eb9:	01 d8                	add    %ebx,%eax
f0120ebb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120ec0:	39 c1                	cmp    %eax,%ecx
f0120ec2:	74 17                	je     f0120edb <test_kfree+0x16e4>
f0120ec4:	83 ec 04             	sub    $0x4,%esp
f0120ec7:	68 40 ad 13 f0       	push   $0xf013ad40
f0120ecc:	68 bc 05 00 00       	push   $0x5bc
f0120ed1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120ed6:	e8 20 f3 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120edb:	e8 5c 2e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120ee0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ee3:	74 17                	je     f0120efc <test_kfree+0x1705>
f0120ee5:	83 ec 04             	sub    $0x4,%esp
f0120ee8:	68 74 ac 13 f0       	push   $0xf013ac74
f0120eed:	68 bd 05 00 00       	push   $0x5bd
f0120ef2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120ef7:	e8 ff f2 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120efc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120eff:	e8 c5 b9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120f04:	29 c3                	sub    %eax,%ebx
f0120f06:	89 d8                	mov    %ebx,%eax
f0120f08:	83 f8 01             	cmp    $0x1,%eax
f0120f0b:	74 17                	je     f0120f24 <test_kfree+0x172d>
f0120f0d:	83 ec 04             	sub    $0x4,%esp
f0120f10:	68 dc ac 13 f0       	push   $0xf013acdc
f0120f15:	68 be 05 00 00       	push   $0x5be
f0120f1a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120f1f:	e8 d7 f2 fd ff       	call   f01001fb <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120f24:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0120f2b:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120f2e:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120f34:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120f37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f3e:	eb 0e                	jmp    f0120f4e <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0120f40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f43:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f46:	01 d0                	add    %edx,%eax
f0120f48:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120f4b:	ff 45 f4             	incl   -0xc(%ebp)
f0120f4e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120f54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f57:	7f e7                	jg     f0120f40 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f59:	e8 6b b9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0120f5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f61:	e8 d6 2d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120f66:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120f69:	83 ec 0c             	sub    $0xc,%esp
f0120f6c:	68 00 00 10 00       	push   $0x100000
f0120f71:	e8 88 68 fe ff       	call   f01077fe <kmalloc>
f0120f76:	83 c4 10             	add    $0x10,%esp
f0120f79:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f7f:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120f85:	89 c1                	mov    %eax,%ecx
f0120f87:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120f8e:	10 00 00 
f0120f91:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0120f97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f9c:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0120fa2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120fa8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fad:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0120fb3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120fb9:	29 d0                	sub    %edx,%eax
f0120fbb:	89 c3                	mov    %eax,%ebx
f0120fbd:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120fc4:	10 00 00 
f0120fc7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120fcc:	0f b6 d0             	movzbl %al,%edx
f0120fcf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120fd5:	01 d0                	add    %edx,%eax
f0120fd7:	48                   	dec    %eax
f0120fd8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120fde:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120fe4:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fe9:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120fef:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120ff5:	29 d0                	sub    %edx,%eax
f0120ff7:	01 c3                	add    %eax,%ebx
f0120ff9:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121000:	10 00 00 
f0121003:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121008:	0f b6 c0             	movzbl %al,%eax
f012100b:	c1 e0 04             	shl    $0x4,%eax
f012100e:	89 c2                	mov    %eax,%edx
f0121010:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121016:	01 d0                	add    %edx,%eax
f0121018:	48                   	dec    %eax
f0121019:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f012101f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121025:	ba 00 00 00 00       	mov    $0x0,%edx
f012102a:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121030:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121036:	29 d0                	sub    %edx,%eax
f0121038:	01 d8                	add    %ebx,%eax
f012103a:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012103f:	39 c1                	cmp    %eax,%ecx
f0121041:	74 17                	je     f012105a <test_kfree+0x1863>
f0121043:	83 ec 04             	sub    $0x4,%esp
f0121046:	68 40 ad 13 f0       	push   $0xf013ad40
f012104b:	68 ca 05 00 00       	push   $0x5ca
f0121050:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121055:	e8 a1 f1 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012105a:	e8 dd 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012105f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121062:	74 17                	je     f012107b <test_kfree+0x1884>
f0121064:	83 ec 04             	sub    $0x4,%esp
f0121067:	68 74 ac 13 f0       	push   $0xf013ac74
f012106c:	68 cb 05 00 00       	push   $0x5cb
f0121071:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121076:	e8 80 f1 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012107b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012107e:	e8 46 b8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121083:	29 c3                	sub    %eax,%ebx
f0121085:	89 d8                	mov    %ebx,%eax
f0121087:	3d 00 01 00 00       	cmp    $0x100,%eax
f012108c:	74 17                	je     f01210a5 <test_kfree+0x18ae>
f012108e:	83 ec 04             	sub    $0x4,%esp
f0121091:	68 dc ac 13 f0       	push   $0xf013acdc
f0121096:	68 cc 05 00 00       	push   $0x5cc
f012109b:	68 5a ac 13 f0       	push   $0xf013ac5a
f01210a0:	e8 56 f1 fd ff       	call   f01001fb <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f01210a5:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f01210ac:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f01210af:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01210b5:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f01210b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210bf:	eb 0e                	jmp    f01210cf <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f01210c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01210c4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210c7:	01 d0                	add    %edx,%eax
f01210c9:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f01210cc:	ff 45 f4             	incl   -0xc(%ebp)
f01210cf:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01210d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210d8:	7f e7                	jg     f01210c1 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f01210da:	83 ec 0c             	sub    $0xc,%esp
f01210dd:	68 7a b4 13 f0       	push   $0xf013b47a
f01210e2:	e8 9b fb fd ff       	call   f0100c82 <cprintf>
f01210e7:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01210ea:	e8 da b7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01210ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210f2:	e8 45 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01210f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01210fa:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121100:	83 ec 0c             	sub    $0xc,%esp
f0121103:	50                   	push   %eax
f0121104:	e8 b7 67 fe ff       	call   f01078c0 <kfree>
f0121109:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012110c:	e8 2b 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121111:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121114:	74 17                	je     f012112d <test_kfree+0x1936>
f0121116:	83 ec 04             	sub    $0x4,%esp
f0121119:	68 74 ac 13 f0       	push   $0xf013ac74
f012111e:	68 dd 05 00 00       	push   $0x5dd
f0121123:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121128:	e8 ce f0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f012112d:	e8 97 b7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121132:	89 c2                	mov    %eax,%edx
f0121134:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121137:	29 c2                	sub    %eax,%edx
f0121139:	89 d0                	mov    %edx,%eax
f012113b:	83 f8 02             	cmp    $0x2,%eax
f012113e:	74 17                	je     f0121157 <test_kfree+0x1960>
f0121140:	83 ec 04             	sub    $0x4,%esp
f0121143:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121148:	68 de 05 00 00       	push   $0x5de
f012114d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121152:	e8 a4 f0 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121157:	e8 6d b7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012115c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012115f:	e8 d8 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121164:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121167:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012116d:	83 ec 0c             	sub    $0xc,%esp
f0121170:	50                   	push   %eax
f0121171:	e8 4a 67 fe ff       	call   f01078c0 <kfree>
f0121176:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121179:	e8 be 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012117e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121181:	74 17                	je     f012119a <test_kfree+0x19a3>
f0121183:	83 ec 04             	sub    $0x4,%esp
f0121186:	68 74 ac 13 f0       	push   $0xf013ac74
f012118b:	68 e4 05 00 00       	push   $0x5e4
f0121190:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121195:	e8 61 f0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012119a:	e8 2a b7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012119f:	89 c2                	mov    %eax,%edx
f01211a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211a4:	29 c2                	sub    %eax,%edx
f01211a6:	89 d0                	mov    %edx,%eax
f01211a8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01211ad:	74 17                	je     f01211c6 <test_kfree+0x19cf>
f01211af:	83 ec 04             	sub    $0x4,%esp
f01211b2:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01211b7:	68 e5 05 00 00       	push   $0x5e5
f01211bc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01211c1:	e8 35 f0 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211c6:	e8 fe b6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01211cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211ce:	e8 69 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01211d6:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01211dc:	83 ec 0c             	sub    $0xc,%esp
f01211df:	50                   	push   %eax
f01211e0:	e8 db 66 fe ff       	call   f01078c0 <kfree>
f01211e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211e8:	e8 4f 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211ed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211f0:	74 17                	je     f0121209 <test_kfree+0x1a12>
f01211f2:	83 ec 04             	sub    $0x4,%esp
f01211f5:	68 74 ac 13 f0       	push   $0xf013ac74
f01211fa:	68 eb 05 00 00       	push   $0x5eb
f01211ff:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121204:	e8 f2 ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121209:	e8 bb b6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012120e:	89 c2                	mov    %eax,%edx
f0121210:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121213:	29 c2                	sub    %eax,%edx
f0121215:	89 d0                	mov    %edx,%eax
f0121217:	83 f8 01             	cmp    $0x1,%eax
f012121a:	74 17                	je     f0121233 <test_kfree+0x1a3c>
f012121c:	83 ec 04             	sub    $0x4,%esp
f012121f:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121224:	68 ec 05 00 00       	push   $0x5ec
f0121229:	68 5a ac 13 f0       	push   $0xf013ac5a
f012122e:	e8 c8 ef fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121233:	e8 91 b6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121238:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012123b:	e8 fc 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121240:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121243:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121249:	83 ec 0c             	sub    $0xc,%esp
f012124c:	50                   	push   %eax
f012124d:	e8 6e 66 fe ff       	call   f01078c0 <kfree>
f0121252:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121255:	e8 e2 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012125a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012125d:	74 17                	je     f0121276 <test_kfree+0x1a7f>
f012125f:	83 ec 04             	sub    $0x4,%esp
f0121262:	68 74 ac 13 f0       	push   $0xf013ac74
f0121267:	68 f2 05 00 00       	push   $0x5f2
f012126c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121271:	e8 85 ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121276:	e8 4e b6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012127b:	89 c2                	mov    %eax,%edx
f012127d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121280:	29 c2                	sub    %eax,%edx
f0121282:	89 d0                	mov    %edx,%eax
f0121284:	83 f8 04             	cmp    $0x4,%eax
f0121287:	74 17                	je     f01212a0 <test_kfree+0x1aa9>
f0121289:	83 ec 04             	sub    $0x4,%esp
f012128c:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121291:	68 f3 05 00 00       	push   $0x5f3
f0121296:	68 5a ac 13 f0       	push   $0xf013ac5a
f012129b:	e8 5b ef fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01212a0:	e8 24 b6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01212a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212a8:	e8 8f 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01212b0:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01212b6:	83 ec 0c             	sub    $0xc,%esp
f01212b9:	50                   	push   %eax
f01212ba:	e8 01 66 fe ff       	call   f01078c0 <kfree>
f01212bf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212c2:	e8 75 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212c7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212ca:	74 17                	je     f01212e3 <test_kfree+0x1aec>
f01212cc:	83 ec 04             	sub    $0x4,%esp
f01212cf:	68 74 ac 13 f0       	push   $0xf013ac74
f01212d4:	68 f9 05 00 00       	push   $0x5f9
f01212d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01212de:	e8 18 ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01212e3:	e8 e1 b5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01212e8:	89 c2                	mov    %eax,%edx
f01212ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212ed:	29 c2                	sub    %eax,%edx
f01212ef:	89 d0                	mov    %edx,%eax
f01212f1:	83 f8 05             	cmp    $0x5,%eax
f01212f4:	74 17                	je     f012130d <test_kfree+0x1b16>
f01212f6:	83 ec 04             	sub    $0x4,%esp
f01212f9:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01212fe:	68 fa 05 00 00       	push   $0x5fa
f0121303:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121308:	e8 ee ee fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012130d:	e8 b7 b5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121312:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121315:	e8 22 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012131a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012131d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121323:	83 ec 0c             	sub    $0xc,%esp
f0121326:	50                   	push   %eax
f0121327:	e8 94 65 fe ff       	call   f01078c0 <kfree>
f012132c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012132f:	e8 08 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121334:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121337:	74 17                	je     f0121350 <test_kfree+0x1b59>
f0121339:	83 ec 04             	sub    $0x4,%esp
f012133c:	68 74 ac 13 f0       	push   $0xf013ac74
f0121341:	68 00 06 00 00       	push   $0x600
f0121346:	68 5a ac 13 f0       	push   $0xf013ac5a
f012134b:	e8 ab ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121350:	e8 74 b5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121355:	89 c2                	mov    %eax,%edx
f0121357:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012135a:	29 c2                	sub    %eax,%edx
f012135c:	89 d0                	mov    %edx,%eax
f012135e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121363:	74 17                	je     f012137c <test_kfree+0x1b85>
f0121365:	83 ec 04             	sub    $0x4,%esp
f0121368:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012136d:	68 01 06 00 00       	push   $0x601
f0121372:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121377:	e8 7f ee fd ff       	call   f01001fb <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f012137c:	e8 51 5d ff ff       	call   f01170d2 <isKHeapPlacementStrategyNEXTFIT>
f0121381:	84 c0                	test   %al,%al
f0121383:	0f 84 80 02 00 00    	je     f0121609 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121389:	e8 3b b5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012138e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121391:	e8 a6 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121396:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121399:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012139f:	83 ec 0c             	sub    $0xc,%esp
f01213a2:	50                   	push   %eax
f01213a3:	e8 18 65 fe ff       	call   f01078c0 <kfree>
f01213a8:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01213ab:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01213b2:	10 00 00 
f01213b5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01213bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01213c0:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01213c6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01213cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01213d1:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01213d7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01213dd:	29 d0                	sub    %edx,%eax
f01213df:	89 c1                	mov    %eax,%ecx
f01213e1:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01213e8:	10 00 00 
f01213eb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01213f0:	0f b6 d0             	movzbl %al,%edx
f01213f3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01213f9:	01 d0                	add    %edx,%eax
f01213fb:	48                   	dec    %eax
f01213fc:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121402:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121408:	ba 00 00 00 00       	mov    $0x0,%edx
f012140d:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121413:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121419:	29 d0                	sub    %edx,%eax
f012141b:	01 c1                	add    %eax,%ecx
f012141d:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121424:	10 00 00 
f0121427:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012142c:	0f b6 c0             	movzbl %al,%eax
f012142f:	c1 e0 04             	shl    $0x4,%eax
f0121432:	89 c2                	mov    %eax,%edx
f0121434:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012143a:	01 d0                	add    %edx,%eax
f012143c:	48                   	dec    %eax
f012143d:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121443:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121449:	ba 00 00 00 00       	mov    $0x0,%edx
f012144e:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121454:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012145a:	29 d0                	sub    %edx,%eax
f012145c:	01 c8                	add    %ecx,%eax
f012145e:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121463:	29 c2                	sub    %eax,%edx
f0121465:	89 d0                	mov    %edx,%eax
f0121467:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012146d:	e8 ca 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121472:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121475:	74 17                	je     f012148e <test_kfree+0x1c97>
f0121477:	83 ec 04             	sub    $0x4,%esp
f012147a:	68 74 ac 13 f0       	push   $0xf013ac74
f012147f:	68 0b 06 00 00       	push   $0x60b
f0121484:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121489:	e8 6d ed fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f012148e:	e8 36 b4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121493:	89 c2                	mov    %eax,%edx
f0121495:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121498:	29 c2                	sub    %eax,%edx
f012149a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01214a0:	c1 e8 0c             	shr    $0xc,%eax
f01214a3:	39 c2                	cmp    %eax,%edx
f01214a5:	74 17                	je     f01214be <test_kfree+0x1cc7>
f01214a7:	83 ec 04             	sub    $0x4,%esp
f01214aa:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01214af:	68 0c 06 00 00       	push   $0x60c
f01214b4:	68 5a ac 13 f0       	push   $0xf013ac5a
f01214b9:	e8 3d ed fd ff       	call   f01001fb <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01214be:	e8 06 b4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01214c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01214c6:	e8 71 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01214cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01214ce:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01214d4:	83 ec 0c             	sub    $0xc,%esp
f01214d7:	50                   	push   %eax
f01214d8:	e8 e3 63 fe ff       	call   f01078c0 <kfree>
f01214dd:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214e0:	e8 57 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01214e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214e8:	74 17                	je     f0121501 <test_kfree+0x1d0a>
f01214ea:	83 ec 04             	sub    $0x4,%esp
f01214ed:	68 74 ac 13 f0       	push   $0xf013ac74
f01214f2:	68 12 06 00 00       	push   $0x612
f01214f7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01214fc:	e8 fa ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121501:	e8 c3 b3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121506:	89 c2                	mov    %eax,%edx
f0121508:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012150b:	29 c2                	sub    %eax,%edx
f012150d:	89 d0                	mov    %edx,%eax
f012150f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121514:	74 17                	je     f012152d <test_kfree+0x1d36>
f0121516:	83 ec 04             	sub    $0x4,%esp
f0121519:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012151e:	68 13 06 00 00       	push   $0x613
f0121523:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121528:	e8 ce ec fd ff       	call   f01001fb <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f012152d:	e8 97 b3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121532:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121535:	e8 02 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012153a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f012153d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121543:	83 ec 0c             	sub    $0xc,%esp
f0121546:	50                   	push   %eax
f0121547:	e8 74 63 fe ff       	call   f01078c0 <kfree>
f012154c:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012154f:	e8 e8 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121554:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121557:	74 17                	je     f0121570 <test_kfree+0x1d79>
f0121559:	83 ec 04             	sub    $0x4,%esp
f012155c:	68 74 ac 13 f0       	push   $0xf013ac74
f0121561:	68 19 06 00 00       	push   $0x619
f0121566:	68 5a ac 13 f0       	push   $0xf013ac5a
f012156b:	e8 8b ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121570:	e8 54 b3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121575:	89 c2                	mov    %eax,%edx
f0121577:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012157a:	29 c2                	sub    %eax,%edx
f012157c:	89 d0                	mov    %edx,%eax
f012157e:	83 f8 01             	cmp    $0x1,%eax
f0121581:	74 17                	je     f012159a <test_kfree+0x1da3>
f0121583:	83 ec 04             	sub    $0x4,%esp
f0121586:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012158b:	68 1a 06 00 00       	push   $0x61a
f0121590:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121595:	e8 61 ec fd ff       	call   f01001fb <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012159a:	e8 2a b3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012159f:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01215a2:	e8 95 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01215a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01215aa:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01215b0:	83 ec 0c             	sub    $0xc,%esp
f01215b3:	50                   	push   %eax
f01215b4:	e8 07 63 fe ff       	call   f01078c0 <kfree>
f01215b9:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215bc:	e8 7b 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01215c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215c4:	74 17                	je     f01215dd <test_kfree+0x1de6>
f01215c6:	83 ec 04             	sub    $0x4,%esp
f01215c9:	68 74 ac 13 f0       	push   $0xf013ac74
f01215ce:	68 20 06 00 00       	push   $0x620
f01215d3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01215d8:	e8 1e ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01215dd:	e8 e7 b2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01215e2:	89 c2                	mov    %eax,%edx
f01215e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215e7:	29 c2                	sub    %eax,%edx
f01215e9:	89 d0                	mov    %edx,%eax
f01215eb:	3d 00 01 00 00       	cmp    $0x100,%eax
f01215f0:	74 17                	je     f0121609 <test_kfree+0x1e12>
f01215f2:	83 ec 04             	sub    $0x4,%esp
f01215f5:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01215fa:	68 21 06 00 00       	push   $0x621
f01215ff:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121604:	e8 f2 eb fd ff       	call   f01001fb <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121609:	e8 bb b2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012160e:	89 c2                	mov    %eax,%edx
f0121610:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121613:	39 c2                	cmp    %eax,%edx
f0121615:	74 17                	je     f012162e <test_kfree+0x1e37>
f0121617:	83 ec 04             	sub    $0x4,%esp
f012161a:	68 84 b4 13 f0       	push   $0xf013b484
f012161f:	68 24 06 00 00       	push   $0x624
f0121624:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121629:	e8 cd eb fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f012162e:	83 ec 0c             	sub    $0xc,%esp
f0121631:	68 b8 b4 13 f0       	push   $0xf013b4b8
f0121636:	e8 47 f6 fd ff       	call   f0100c82 <cprintf>
f012163b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012163e:	83 ec 0c             	sub    $0xc,%esp
f0121641:	6a 03                	push   $0x3
f0121643:	e8 21 b7 fe ff       	call   f010cd69 <sys_bypassPageFault>
f0121648:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012164b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121652:	e9 82 00 00 00       	jmp    f01216d9 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0121657:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012165a:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121661:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0121664:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121667:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012166a:	e8 e8 b6 fe ff       	call   f010cd57 <sys_rcr2>
f012166f:	89 c2                	mov    %eax,%edx
f0121671:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121674:	39 c2                	cmp    %eax,%edx
f0121676:	74 17                	je     f012168f <test_kfree+0x1e98>
f0121678:	83 ec 04             	sub    $0x4,%esp
f012167b:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0121680:	68 33 06 00 00       	push   $0x633
f0121685:	68 5a ac 13 f0       	push   $0xf013ac5a
f012168a:	e8 6c eb fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f012168f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121692:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121699:	89 c2                	mov    %eax,%edx
f012169b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012169e:	01 d0                	add    %edx,%eax
f01216a0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01216a3:	e8 af b6 fe ff       	call   f010cd57 <sys_rcr2>
f01216a8:	89 c2                	mov    %eax,%edx
f01216aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01216ad:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01216b4:	89 c1                	mov    %eax,%ecx
f01216b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216b9:	01 c8                	add    %ecx,%eax
f01216bb:	39 c2                	cmp    %eax,%edx
f01216bd:	74 17                	je     f01216d6 <test_kfree+0x1edf>
f01216bf:	83 ec 04             	sub    $0x4,%esp
f01216c2:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01216c7:	68 35 06 00 00       	push   $0x635
f01216cc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01216d1:	e8 25 eb fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01216d6:	ff 45 f4             	incl   -0xc(%ebp)
f01216d9:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01216dd:	0f 8e 74 ff ff ff    	jle    f0121657 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01216e3:	83 ec 0c             	sub    $0xc,%esp
f01216e6:	6a 00                	push   $0x0
f01216e8:	e8 7c b6 fe ff       	call   f010cd69 <sys_bypassPageFault>
f01216ed:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01216f0:	83 ec 0c             	sub    $0xc,%esp
f01216f3:	68 05 b5 13 f0       	push   $0xf013b505
f01216f8:	e8 85 f5 fd ff       	call   f0100c82 <cprintf>
f01216fd:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121700:	e8 c4 b1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121705:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121708:	e8 2f 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012170d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121710:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121716:	83 ec 0c             	sub    $0xc,%esp
f0121719:	50                   	push   %eax
f012171a:	e8 a1 61 fe ff       	call   f01078c0 <kfree>
f012171f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121722:	e8 15 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121727:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012172a:	74 17                	je     f0121743 <test_kfree+0x1f4c>
f012172c:	83 ec 04             	sub    $0x4,%esp
f012172f:	68 74 ac 13 f0       	push   $0xf013ac74
f0121734:	68 43 06 00 00       	push   $0x643
f0121739:	68 5a ac 13 f0       	push   $0xf013ac5a
f012173e:	e8 b8 ea fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121743:	e8 81 b1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121748:	89 c2                	mov    %eax,%edx
f012174a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012174d:	39 c2                	cmp    %eax,%edx
f012174f:	74 17                	je     f0121768 <test_kfree+0x1f71>
f0121751:	83 ec 04             	sub    $0x4,%esp
f0121754:	68 0c b5 13 f0       	push   $0xf013b50c
f0121759:	68 44 06 00 00       	push   $0x644
f012175e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121763:	e8 93 ea fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121768:	e8 5c b1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012176d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121770:	e8 c7 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121775:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121778:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012177e:	83 ec 0c             	sub    $0xc,%esp
f0121781:	50                   	push   %eax
f0121782:	e8 39 61 fe ff       	call   f01078c0 <kfree>
f0121787:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012178a:	e8 ad 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012178f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121792:	74 17                	je     f01217ab <test_kfree+0x1fb4>
f0121794:	83 ec 04             	sub    $0x4,%esp
f0121797:	68 74 ac 13 f0       	push   $0xf013ac74
f012179c:	68 4a 06 00 00       	push   $0x64a
f01217a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01217a6:	e8 50 ea fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01217ab:	e8 19 b1 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01217b0:	89 c2                	mov    %eax,%edx
f01217b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01217b5:	39 c2                	cmp    %eax,%edx
f01217b7:	74 17                	je     f01217d0 <test_kfree+0x1fd9>
f01217b9:	83 ec 04             	sub    $0x4,%esp
f01217bc:	68 0c b5 13 f0       	push   $0xf013b50c
f01217c1:	68 4b 06 00 00       	push   $0x64b
f01217c6:	68 5a ac 13 f0       	push   $0xf013ac5a
f01217cb:	e8 2b ea fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01217d0:	e8 f4 b0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01217d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217d8:	e8 5f 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01217dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01217e0:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01217e6:	83 ec 0c             	sub    $0xc,%esp
f01217e9:	50                   	push   %eax
f01217ea:	e8 d1 60 fe ff       	call   f01078c0 <kfree>
f01217ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217f2:	e8 45 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01217f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217fa:	74 17                	je     f0121813 <test_kfree+0x201c>
f01217fc:	83 ec 04             	sub    $0x4,%esp
f01217ff:	68 74 ac 13 f0       	push   $0xf013ac74
f0121804:	68 51 06 00 00       	push   $0x651
f0121809:	68 5a ac 13 f0       	push   $0xf013ac5a
f012180e:	e8 e8 e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121813:	e8 b1 b0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121818:	89 c2                	mov    %eax,%edx
f012181a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012181d:	39 c2                	cmp    %eax,%edx
f012181f:	74 17                	je     f0121838 <test_kfree+0x2041>
f0121821:	83 ec 04             	sub    $0x4,%esp
f0121824:	68 0c b5 13 f0       	push   $0xf013b50c
f0121829:	68 52 06 00 00       	push   $0x652
f012182e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121833:	e8 c3 e9 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121838:	e8 8c b0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012183d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121840:	e8 f7 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121845:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121848:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012184e:	83 ec 0c             	sub    $0xc,%esp
f0121851:	50                   	push   %eax
f0121852:	e8 69 60 fe ff       	call   f01078c0 <kfree>
f0121857:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012185a:	e8 dd 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012185f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121862:	74 17                	je     f012187b <test_kfree+0x2084>
f0121864:	83 ec 04             	sub    $0x4,%esp
f0121867:	68 74 ac 13 f0       	push   $0xf013ac74
f012186c:	68 58 06 00 00       	push   $0x658
f0121871:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121876:	e8 80 e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012187b:	e8 49 b0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121880:	89 c2                	mov    %eax,%edx
f0121882:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121885:	39 c2                	cmp    %eax,%edx
f0121887:	74 17                	je     f01218a0 <test_kfree+0x20a9>
f0121889:	83 ec 04             	sub    $0x4,%esp
f012188c:	68 0c b5 13 f0       	push   $0xf013b50c
f0121891:	68 59 06 00 00       	push   $0x659
f0121896:	68 5a ac 13 f0       	push   $0xf013ac5a
f012189b:	e8 5b e9 fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f01218a0:	83 ec 0c             	sub    $0xc,%esp
f01218a3:	68 53 b5 13 f0       	push   $0xf013b553
f01218a8:	e8 d5 f3 fd ff       	call   f0100c82 <cprintf>
f01218ad:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01218b0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01218b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01218be:	eb 48                	jmp    f0121908 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01218c0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01218c3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01218c8:	83 ec 04             	sub    $0x4,%esp
f01218cb:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01218d1:	51                   	push   %ecx
f01218d2:	52                   	push   %edx
f01218d3:	50                   	push   %eax
f01218d4:	e8 01 51 fe ff       	call   f01069da <get_page_table>
f01218d9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01218dc:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01218e2:	85 c0                	test   %eax,%eax
f01218e4:	75 17                	jne    f01218fd <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01218e6:	83 ec 04             	sub    $0x4,%esp
f01218e9:	68 5c b5 13 f0       	push   $0xf013b55c
f01218ee:	68 67 06 00 00       	push   $0x667
f01218f3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01218f8:	e8 fe e8 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01218fd:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121904:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121908:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012190c:	78 b2                	js     f01218c0 <test_kfree+0x20c9>
f012190e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121912:	7f 09                	jg     f012191d <test_kfree+0x2126>
f0121914:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012191b:	76 a3                	jbe    f01218c0 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012191d:	83 ec 0c             	sub    $0xc,%esp
f0121920:	68 3e ae 13 f0       	push   $0xf013ae3e
f0121925:	e8 58 f3 fd ff       	call   f0100c82 <cprintf>
f012192a:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012192d:	83 ec 0c             	sub    $0xc,%esp
f0121930:	68 c4 b5 13 f0       	push   $0xf013b5c4
f0121935:	e8 48 f3 fd ff       	call   f0100c82 <cprintf>
f012193a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012193d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121942:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121945:	5b                   	pop    %ebx
f0121946:	5f                   	pop    %edi
f0121947:	5d                   	pop    %ebp
f0121948:	c3                   	ret    

f0121949 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121949:	55                   	push   %ebp
f012194a:	89 e5                	mov    %esp,%ebp
f012194c:	57                   	push   %edi
f012194d:	53                   	push   %ebx
f012194e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121954:	83 ec 0c             	sub    $0xc,%esp
f0121957:	68 9c ab 13 f0       	push   $0xf013ab9c
f012195c:	e8 21 f3 fd ff       	call   f0100c82 <cprintf>
f0121961:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121964:	83 ec 0c             	sub    $0xc,%esp
f0121967:	68 cc ab 13 f0       	push   $0xf013abcc
f012196c:	e8 11 f3 fd ff       	call   f0100c82 <cprintf>
f0121971:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121974:	83 ec 0c             	sub    $0xc,%esp
f0121977:	68 9c ab 13 f0       	push   $0xf013ab9c
f012197c:	e8 01 f3 fd ff       	call   f0100c82 <cprintf>
f0121981:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121984:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121988:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012198c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121992:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121998:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012199f:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01219a6:	e8 1e af fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01219ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01219ae:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01219b4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01219b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01219be:	89 d7                	mov    %edx,%edi
f01219c0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01219c2:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01219c8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01219cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01219d2:	89 d7                	mov    %edx,%edi
f01219d4:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01219d6:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01219dc:	b9 14 00 00 00       	mov    $0x14,%ecx
f01219e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01219e6:	89 d7                	mov    %edx,%edi
f01219e8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01219ea:	e8 da ae fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01219ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219f2:	e8 45 23 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01219f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01219fa:	83 ec 0c             	sub    $0xc,%esp
f01219fd:	68 00 fc 1f 00       	push   $0x1ffc00
f0121a02:	e8 f7 5d fe ff       	call   f01077fe <kmalloc>
f0121a07:	83 c4 10             	add    $0x10,%esp
f0121a0a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a10:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121a16:	89 c1                	mov    %eax,%ecx
f0121a18:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121a1f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121a22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a27:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121a2a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121a2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a32:	f7 75 c8             	divl   -0x38(%ebp)
f0121a35:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121a38:	29 d0                	sub    %edx,%eax
f0121a3a:	89 c3                	mov    %eax,%ebx
f0121a3c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121a43:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121a48:	0f b6 d0             	movzbl %al,%edx
f0121a4b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121a4e:	01 d0                	add    %edx,%eax
f0121a50:	48                   	dec    %eax
f0121a51:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121a54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121a57:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a5c:	f7 75 c0             	divl   -0x40(%ebp)
f0121a5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121a62:	29 d0                	sub    %edx,%eax
f0121a64:	01 c3                	add    %eax,%ebx
f0121a66:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121a6d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121a72:	0f b6 c0             	movzbl %al,%eax
f0121a75:	c1 e0 04             	shl    $0x4,%eax
f0121a78:	89 c2                	mov    %eax,%edx
f0121a7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121a7d:	01 d0                	add    %edx,%eax
f0121a7f:	48                   	dec    %eax
f0121a80:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121a83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121a86:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a8b:	f7 75 b8             	divl   -0x48(%ebp)
f0121a8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121a91:	29 d0                	sub    %edx,%eax
f0121a93:	01 d8                	add    %ebx,%eax
f0121a95:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121a9a:	39 c1                	cmp    %eax,%ecx
f0121a9c:	74 17                	je     f0121ab5 <test_kfree_bestfirstfit+0x16c>
f0121a9e:	83 ec 04             	sub    $0x4,%esp
f0121aa1:	68 40 ad 13 f0       	push   $0xf013ad40
f0121aa6:	68 95 06 00 00       	push   $0x695
f0121aab:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121ab0:	e8 46 e7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ab5:	e8 82 22 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121aba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121abd:	74 17                	je     f0121ad6 <test_kfree_bestfirstfit+0x18d>
f0121abf:	83 ec 04             	sub    $0x4,%esp
f0121ac2:	68 74 ac 13 f0       	push   $0xf013ac74
f0121ac7:	68 96 06 00 00       	push   $0x696
f0121acc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121ad1:	e8 25 e7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ad6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ad9:	e8 eb ad fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121ade:	29 c3                	sub    %eax,%ebx
f0121ae0:	89 d8                	mov    %ebx,%eax
f0121ae2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121ae7:	74 17                	je     f0121b00 <test_kfree_bestfirstfit+0x1b7>
f0121ae9:	83 ec 04             	sub    $0x4,%esp
f0121aec:	68 dc ac 13 f0       	push   $0xf013acdc
f0121af1:	68 97 06 00 00       	push   $0x697
f0121af6:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121afb:	e8 fb e6 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121b00:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121b07:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b0a:	e8 ba ad fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121b0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b12:	e8 25 22 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121b17:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121b1a:	83 ec 0c             	sub    $0xc,%esp
f0121b1d:	68 00 fc 1f 00       	push   $0x1ffc00
f0121b22:	e8 d7 5c fe ff       	call   f01077fe <kmalloc>
f0121b27:	83 c4 10             	add    $0x10,%esp
f0121b2a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b30:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121b36:	89 c1                	mov    %eax,%ecx
f0121b38:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121b3f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121b42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121b47:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121b4a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121b4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b52:	f7 75 b0             	divl   -0x50(%ebp)
f0121b55:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121b58:	29 d0                	sub    %edx,%eax
f0121b5a:	89 c3                	mov    %eax,%ebx
f0121b5c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121b63:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121b68:	0f b6 d0             	movzbl %al,%edx
f0121b6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121b6e:	01 d0                	add    %edx,%eax
f0121b70:	48                   	dec    %eax
f0121b71:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121b74:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121b77:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b7c:	f7 75 a8             	divl   -0x58(%ebp)
f0121b7f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121b82:	29 d0                	sub    %edx,%eax
f0121b84:	01 c3                	add    %eax,%ebx
f0121b86:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121b8d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121b92:	0f b6 c0             	movzbl %al,%eax
f0121b95:	c1 e0 04             	shl    $0x4,%eax
f0121b98:	89 c2                	mov    %eax,%edx
f0121b9a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121b9d:	01 d0                	add    %edx,%eax
f0121b9f:	48                   	dec    %eax
f0121ba0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121ba3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121ba6:	ba 00 00 00 00       	mov    $0x0,%edx
f0121bab:	f7 75 a0             	divl   -0x60(%ebp)
f0121bae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121bb1:	29 d0                	sub    %edx,%eax
f0121bb3:	01 d8                	add    %ebx,%eax
f0121bb5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121bba:	39 c1                	cmp    %eax,%ecx
f0121bbc:	74 17                	je     f0121bd5 <test_kfree_bestfirstfit+0x28c>
f0121bbe:	83 ec 04             	sub    $0x4,%esp
f0121bc1:	68 40 ad 13 f0       	push   $0xf013ad40
f0121bc6:	68 9e 06 00 00       	push   $0x69e
f0121bcb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121bd0:	e8 26 e6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bd5:	e8 62 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121bda:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bdd:	74 17                	je     f0121bf6 <test_kfree_bestfirstfit+0x2ad>
f0121bdf:	83 ec 04             	sub    $0x4,%esp
f0121be2:	68 74 ac 13 f0       	push   $0xf013ac74
f0121be7:	68 9f 06 00 00       	push   $0x69f
f0121bec:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121bf1:	e8 05 e6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bf6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bf9:	e8 cb ac fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121bfe:	29 c3                	sub    %eax,%ebx
f0121c00:	89 d8                	mov    %ebx,%eax
f0121c02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121c07:	74 17                	je     f0121c20 <test_kfree_bestfirstfit+0x2d7>
f0121c09:	83 ec 04             	sub    $0x4,%esp
f0121c0c:	68 dc ac 13 f0       	push   $0xf013acdc
f0121c11:	68 a0 06 00 00       	push   $0x6a0
f0121c16:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121c1b:	e8 db e5 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121c20:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121c27:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c2a:	e8 9a ac fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121c2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c32:	e8 05 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121c37:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121c3a:	83 ec 0c             	sub    $0xc,%esp
f0121c3d:	68 00 08 00 00       	push   $0x800
f0121c42:	e8 b7 5b fe ff       	call   f01077fe <kmalloc>
f0121c47:	83 c4 10             	add    $0x10,%esp
f0121c4a:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c50:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121c56:	89 c1                	mov    %eax,%ecx
f0121c58:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0121c5f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121c62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c67:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121c6a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c72:	f7 75 98             	divl   -0x68(%ebp)
f0121c75:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121c78:	29 d0                	sub    %edx,%eax
f0121c7a:	89 c3                	mov    %eax,%ebx
f0121c7c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0121c83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121c88:	0f b6 d0             	movzbl %al,%edx
f0121c8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121c8e:	01 d0                	add    %edx,%eax
f0121c90:	48                   	dec    %eax
f0121c91:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121c94:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121c97:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c9c:	f7 75 90             	divl   -0x70(%ebp)
f0121c9f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121ca2:	29 d0                	sub    %edx,%eax
f0121ca4:	01 c3                	add    %eax,%ebx
f0121ca6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121cad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121cb2:	0f b6 c0             	movzbl %al,%eax
f0121cb5:	c1 e0 04             	shl    $0x4,%eax
f0121cb8:	89 c2                	mov    %eax,%edx
f0121cba:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121cbd:	01 d0                	add    %edx,%eax
f0121cbf:	48                   	dec    %eax
f0121cc0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121cc3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121cc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ccb:	f7 75 88             	divl   -0x78(%ebp)
f0121cce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121cd1:	29 d0                	sub    %edx,%eax
f0121cd3:	01 d8                	add    %ebx,%eax
f0121cd5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121cda:	39 c1                	cmp    %eax,%ecx
f0121cdc:	74 17                	je     f0121cf5 <test_kfree_bestfirstfit+0x3ac>
f0121cde:	83 ec 04             	sub    $0x4,%esp
f0121ce1:	68 40 ad 13 f0       	push   $0xf013ad40
f0121ce6:	68 a7 06 00 00       	push   $0x6a7
f0121ceb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121cf0:	e8 06 e5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121cf5:	e8 42 20 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121cfa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cfd:	74 17                	je     f0121d16 <test_kfree_bestfirstfit+0x3cd>
f0121cff:	83 ec 04             	sub    $0x4,%esp
f0121d02:	68 74 ac 13 f0       	push   $0xf013ac74
f0121d07:	68 a8 06 00 00       	push   $0x6a8
f0121d0c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121d11:	e8 e5 e4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d16:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d19:	e8 ab ab fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121d1e:	29 c3                	sub    %eax,%ebx
f0121d20:	89 d8                	mov    %ebx,%eax
f0121d22:	83 f8 01             	cmp    $0x1,%eax
f0121d25:	74 17                	je     f0121d3e <test_kfree_bestfirstfit+0x3f5>
f0121d27:	83 ec 04             	sub    $0x4,%esp
f0121d2a:	68 dc ac 13 f0       	push   $0xf013acdc
f0121d2f:	68 a9 06 00 00       	push   $0x6a9
f0121d34:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121d39:	e8 bd e4 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121d3e:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121d45:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121d48:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121d4e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121d51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d58:	eb 0e                	jmp    f0121d68 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121d5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d5d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d60:	01 d0                	add    %edx,%eax
f0121d62:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121d65:	ff 45 f4             	incl   -0xc(%ebp)
f0121d68:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121d6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d71:	7f e7                	jg     f0121d5a <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121d73:	e8 51 ab fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121d78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d7b:	e8 bc 1f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121d80:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121d83:	83 ec 0c             	sub    $0xc,%esp
f0121d86:	68 00 08 00 00       	push   $0x800
f0121d8b:	e8 6e 5a fe ff       	call   f01077fe <kmalloc>
f0121d90:	83 c4 10             	add    $0x10,%esp
f0121d93:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d99:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121d9f:	89 c1                	mov    %eax,%ecx
f0121da1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121da8:	10 00 00 
f0121dab:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121db1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121db6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121dbc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121dc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dc7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121dcd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121dd3:	29 d0                	sub    %edx,%eax
f0121dd5:	89 c3                	mov    %eax,%ebx
f0121dd7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121dde:	10 00 00 
f0121de1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121de6:	0f b6 d0             	movzbl %al,%edx
f0121de9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121def:	01 d0                	add    %edx,%eax
f0121df1:	48                   	dec    %eax
f0121df2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121df8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121dfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e03:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121e09:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121e0f:	29 d0                	sub    %edx,%eax
f0121e11:	01 c3                	add    %eax,%ebx
f0121e13:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121e1a:	10 00 00 
f0121e1d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121e22:	0f b6 c0             	movzbl %al,%eax
f0121e25:	c1 e0 04             	shl    $0x4,%eax
f0121e28:	89 c2                	mov    %eax,%edx
f0121e2a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121e30:	01 d0                	add    %edx,%eax
f0121e32:	48                   	dec    %eax
f0121e33:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121e39:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121e3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e44:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121e4a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121e50:	29 d0                	sub    %edx,%eax
f0121e52:	01 d8                	add    %ebx,%eax
f0121e54:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121e59:	39 c1                	cmp    %eax,%ecx
f0121e5b:	74 17                	je     f0121e74 <test_kfree_bestfirstfit+0x52b>
f0121e5d:	83 ec 04             	sub    $0x4,%esp
f0121e60:	68 40 ad 13 f0       	push   $0xf013ad40
f0121e65:	68 b5 06 00 00       	push   $0x6b5
f0121e6a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121e6f:	e8 87 e3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e74:	e8 c3 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121e79:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e7c:	74 17                	je     f0121e95 <test_kfree_bestfirstfit+0x54c>
f0121e7e:	83 ec 04             	sub    $0x4,%esp
f0121e81:	68 74 ac 13 f0       	push   $0xf013ac74
f0121e86:	68 b6 06 00 00       	push   $0x6b6
f0121e8b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121e90:	e8 66 e3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e95:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e98:	e8 2c aa fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121e9d:	29 c3                	sub    %eax,%ebx
f0121e9f:	89 d8                	mov    %ebx,%eax
f0121ea1:	83 f8 01             	cmp    $0x1,%eax
f0121ea4:	74 17                	je     f0121ebd <test_kfree_bestfirstfit+0x574>
f0121ea6:	83 ec 04             	sub    $0x4,%esp
f0121ea9:	68 dc ac 13 f0       	push   $0xf013acdc
f0121eae:	68 b7 06 00 00       	push   $0x6b7
f0121eb3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121eb8:	e8 3e e3 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121ebd:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121ec4:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121ec7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121ecd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121ed0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ed7:	eb 0e                	jmp    f0121ee7 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121ed9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121edc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121edf:	01 d0                	add    %edx,%eax
f0121ee1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121ee4:	ff 45 f4             	incl   -0xc(%ebp)
f0121ee7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121eed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ef0:	7f e7                	jg     f0121ed9 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ef2:	e8 d2 a9 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0121ef7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121efa:	e8 3d 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121eff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121f02:	83 ec 0c             	sub    $0xc,%esp
f0121f05:	68 00 1c 00 00       	push   $0x1c00
f0121f0a:	e8 ef 58 fe ff       	call   f01077fe <kmalloc>
f0121f0f:	83 c4 10             	add    $0x10,%esp
f0121f12:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f18:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121f1e:	89 c1                	mov    %eax,%ecx
f0121f20:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121f27:	10 00 00 
f0121f2a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121f30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f35:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121f3b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121f41:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f46:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121f4c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121f52:	29 d0                	sub    %edx,%eax
f0121f54:	89 c3                	mov    %eax,%ebx
f0121f56:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121f5d:	10 00 00 
f0121f60:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121f65:	0f b6 d0             	movzbl %al,%edx
f0121f68:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121f6e:	01 d0                	add    %edx,%eax
f0121f70:	48                   	dec    %eax
f0121f71:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121f77:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121f7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f82:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121f88:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121f8e:	29 d0                	sub    %edx,%eax
f0121f90:	01 c3                	add    %eax,%ebx
f0121f92:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121f99:	10 00 00 
f0121f9c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121fa1:	0f b6 c0             	movzbl %al,%eax
f0121fa4:	c1 e0 04             	shl    $0x4,%eax
f0121fa7:	89 c2                	mov    %eax,%edx
f0121fa9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121faf:	01 d0                	add    %edx,%eax
f0121fb1:	48                   	dec    %eax
f0121fb2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121fb8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121fbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fc3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121fc9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121fcf:	29 d0                	sub    %edx,%eax
f0121fd1:	01 d8                	add    %ebx,%eax
f0121fd3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121fd8:	39 c1                	cmp    %eax,%ecx
f0121fda:	74 17                	je     f0121ff3 <test_kfree_bestfirstfit+0x6aa>
f0121fdc:	83 ec 04             	sub    $0x4,%esp
f0121fdf:	68 40 ad 13 f0       	push   $0xf013ad40
f0121fe4:	68 c3 06 00 00       	push   $0x6c3
f0121fe9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121fee:	e8 08 e2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ff3:	e8 44 1d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121ff8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ffb:	74 17                	je     f0122014 <test_kfree_bestfirstfit+0x6cb>
f0121ffd:	83 ec 04             	sub    $0x4,%esp
f0122000:	68 74 ac 13 f0       	push   $0xf013ac74
f0122005:	68 c4 06 00 00       	push   $0x6c4
f012200a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012200f:	e8 e7 e1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122014:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122017:	e8 ad a8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012201c:	29 c3                	sub    %eax,%ebx
f012201e:	89 d8                	mov    %ebx,%eax
f0122020:	83 f8 02             	cmp    $0x2,%eax
f0122023:	74 17                	je     f012203c <test_kfree_bestfirstfit+0x6f3>
f0122025:	83 ec 04             	sub    $0x4,%esp
f0122028:	68 dc ac 13 f0       	push   $0xf013acdc
f012202d:	68 c5 06 00 00       	push   $0x6c5
f0122032:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122037:	e8 bf e1 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012203c:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122043:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122046:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012204c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012204f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122056:	eb 0e                	jmp    f0122066 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122058:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012205b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012205e:	01 d0                	add    %edx,%eax
f0122060:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122063:	ff 45 f4             	incl   -0xc(%ebp)
f0122066:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012206c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012206f:	7f e7                	jg     f0122058 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122071:	e8 53 a8 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122076:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122079:	e8 be 1c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012207e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122081:	83 ec 0c             	sub    $0xc,%esp
f0122084:	68 00 fc 2f 00       	push   $0x2ffc00
f0122089:	e8 70 57 fe ff       	call   f01077fe <kmalloc>
f012208e:	83 c4 10             	add    $0x10,%esp
f0122091:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122097:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012209d:	89 c1                	mov    %eax,%ecx
f012209f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01220a6:	10 00 00 
f01220a9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01220af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220b4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01220ba:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01220c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01220c5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01220cb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01220d1:	29 d0                	sub    %edx,%eax
f01220d3:	89 c3                	mov    %eax,%ebx
f01220d5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01220dc:	10 00 00 
f01220df:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01220e4:	0f b6 d0             	movzbl %al,%edx
f01220e7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01220ed:	01 d0                	add    %edx,%eax
f01220ef:	48                   	dec    %eax
f01220f0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01220f6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01220fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122101:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122107:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012210d:	29 d0                	sub    %edx,%eax
f012210f:	01 c3                	add    %eax,%ebx
f0122111:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122118:	10 00 00 
f012211b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122120:	0f b6 c0             	movzbl %al,%eax
f0122123:	c1 e0 04             	shl    $0x4,%eax
f0122126:	89 c2                	mov    %eax,%edx
f0122128:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012212e:	01 d0                	add    %edx,%eax
f0122130:	48                   	dec    %eax
f0122131:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122137:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012213d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122142:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122148:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012214e:	29 d0                	sub    %edx,%eax
f0122150:	01 d8                	add    %ebx,%eax
f0122152:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122157:	39 c1                	cmp    %eax,%ecx
f0122159:	74 17                	je     f0122172 <test_kfree_bestfirstfit+0x829>
f012215b:	83 ec 04             	sub    $0x4,%esp
f012215e:	68 40 ad 13 f0       	push   $0xf013ad40
f0122163:	68 d1 06 00 00       	push   $0x6d1
f0122168:	68 5a ac 13 f0       	push   $0xf013ac5a
f012216d:	e8 89 e0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122172:	e8 c5 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122177:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012217a:	74 17                	je     f0122193 <test_kfree_bestfirstfit+0x84a>
f012217c:	83 ec 04             	sub    $0x4,%esp
f012217f:	68 74 ac 13 f0       	push   $0xf013ac74
f0122184:	68 d2 06 00 00       	push   $0x6d2
f0122189:	68 5a ac 13 f0       	push   $0xf013ac5a
f012218e:	e8 68 e0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122193:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122196:	e8 2e a7 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012219b:	29 c3                	sub    %eax,%ebx
f012219d:	89 d8                	mov    %ebx,%eax
f012219f:	3d 00 03 00 00       	cmp    $0x300,%eax
f01221a4:	74 17                	je     f01221bd <test_kfree_bestfirstfit+0x874>
f01221a6:	83 ec 04             	sub    $0x4,%esp
f01221a9:	68 dc ac 13 f0       	push   $0xf013acdc
f01221ae:	68 d3 06 00 00       	push   $0x6d3
f01221b3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01221b8:	e8 3e e0 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01221bd:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01221c4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01221c7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01221cd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01221d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221d7:	eb 0e                	jmp    f01221e7 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f01221d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221df:	01 d0                	add    %edx,%eax
f01221e1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01221e4:	ff 45 f4             	incl   -0xc(%ebp)
f01221e7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01221ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221f0:	7f e7                	jg     f01221d9 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01221f2:	e8 d2 a6 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01221f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221fa:	e8 3d 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01221ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122202:	83 ec 0c             	sub    $0xc,%esp
f0122205:	68 00 fc 5f 00       	push   $0x5ffc00
f012220a:	e8 ef 55 fe ff       	call   f01077fe <kmalloc>
f012220f:	83 c4 10             	add    $0x10,%esp
f0122212:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122218:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012221e:	89 c1                	mov    %eax,%ecx
f0122220:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122227:	10 00 00 
f012222a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122230:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122235:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012223b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122241:	ba 00 00 00 00       	mov    $0x0,%edx
f0122246:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012224c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122252:	29 d0                	sub    %edx,%eax
f0122254:	89 c3                	mov    %eax,%ebx
f0122256:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012225d:	10 00 00 
f0122260:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122265:	0f b6 d0             	movzbl %al,%edx
f0122268:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012226e:	01 d0                	add    %edx,%eax
f0122270:	48                   	dec    %eax
f0122271:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122277:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012227d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122282:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122288:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012228e:	29 d0                	sub    %edx,%eax
f0122290:	01 c3                	add    %eax,%ebx
f0122292:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122299:	10 00 00 
f012229c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01222a1:	0f b6 c0             	movzbl %al,%eax
f01222a4:	c1 e0 04             	shl    $0x4,%eax
f01222a7:	89 c2                	mov    %eax,%edx
f01222a9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01222af:	01 d0                	add    %edx,%eax
f01222b1:	48                   	dec    %eax
f01222b2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01222b8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01222be:	ba 00 00 00 00       	mov    $0x0,%edx
f01222c3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01222c9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01222cf:	29 d0                	sub    %edx,%eax
f01222d1:	01 d8                	add    %ebx,%eax
f01222d3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01222d8:	39 c1                	cmp    %eax,%ecx
f01222da:	74 17                	je     f01222f3 <test_kfree_bestfirstfit+0x9aa>
f01222dc:	83 ec 04             	sub    $0x4,%esp
f01222df:	68 40 ad 13 f0       	push   $0xf013ad40
f01222e4:	68 df 06 00 00       	push   $0x6df
f01222e9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01222ee:	e8 08 df fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222f3:	e8 44 1a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01222f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222fb:	74 17                	je     f0122314 <test_kfree_bestfirstfit+0x9cb>
f01222fd:	83 ec 04             	sub    $0x4,%esp
f0122300:	68 74 ac 13 f0       	push   $0xf013ac74
f0122305:	68 e0 06 00 00       	push   $0x6e0
f012230a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012230f:	e8 e7 de fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122314:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122317:	e8 ad a5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012231c:	29 c3                	sub    %eax,%ebx
f012231e:	89 d8                	mov    %ebx,%eax
f0122320:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122325:	74 17                	je     f012233e <test_kfree_bestfirstfit+0x9f5>
f0122327:	83 ec 04             	sub    $0x4,%esp
f012232a:	68 dc ac 13 f0       	push   $0xf013acdc
f012232f:	68 e1 06 00 00       	push   $0x6e1
f0122334:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122339:	e8 bd de fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012233e:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122345:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122348:	e8 7c a5 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012234d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122350:	e8 e7 19 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122355:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122358:	83 ec 0c             	sub    $0xc,%esp
f012235b:	68 00 38 00 00       	push   $0x3800
f0122360:	e8 99 54 fe ff       	call   f01077fe <kmalloc>
f0122365:	83 c4 10             	add    $0x10,%esp
f0122368:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012236e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122374:	89 c1                	mov    %eax,%ecx
f0122376:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012237d:	10 00 00 
f0122380:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122386:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012238b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122391:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122397:	ba 00 00 00 00       	mov    $0x0,%edx
f012239c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01223a2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01223a8:	29 d0                	sub    %edx,%eax
f01223aa:	89 c3                	mov    %eax,%ebx
f01223ac:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01223b3:	10 00 00 
f01223b6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01223bb:	0f b6 d0             	movzbl %al,%edx
f01223be:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01223c4:	01 d0                	add    %edx,%eax
f01223c6:	48                   	dec    %eax
f01223c7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01223cd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01223d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01223d8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01223de:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01223e4:	29 d0                	sub    %edx,%eax
f01223e6:	01 c3                	add    %eax,%ebx
f01223e8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01223ef:	10 00 00 
f01223f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01223f7:	0f b6 c0             	movzbl %al,%eax
f01223fa:	c1 e0 04             	shl    $0x4,%eax
f01223fd:	89 c2                	mov    %eax,%edx
f01223ff:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122405:	01 d0                	add    %edx,%eax
f0122407:	48                   	dec    %eax
f0122408:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012240e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122414:	ba 00 00 00 00       	mov    $0x0,%edx
f0122419:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012241f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122425:	29 d0                	sub    %edx,%eax
f0122427:	01 d8                	add    %ebx,%eax
f0122429:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012242e:	39 c1                	cmp    %eax,%ecx
f0122430:	74 17                	je     f0122449 <test_kfree_bestfirstfit+0xb00>
f0122432:	83 ec 04             	sub    $0x4,%esp
f0122435:	68 40 ad 13 f0       	push   $0xf013ad40
f012243a:	68 e8 06 00 00       	push   $0x6e8
f012243f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122444:	e8 b2 dd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122449:	e8 ee 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012244e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122451:	74 17                	je     f012246a <test_kfree_bestfirstfit+0xb21>
f0122453:	83 ec 04             	sub    $0x4,%esp
f0122456:	68 74 ac 13 f0       	push   $0xf013ac74
f012245b:	68 e9 06 00 00       	push   $0x6e9
f0122460:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122465:	e8 91 dd fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012246a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012246d:	e8 57 a4 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122472:	29 c3                	sub    %eax,%ebx
f0122474:	89 d8                	mov    %ebx,%eax
f0122476:	83 f8 04             	cmp    $0x4,%eax
f0122479:	74 17                	je     f0122492 <test_kfree_bestfirstfit+0xb49>
f012247b:	83 ec 04             	sub    $0x4,%esp
f012247e:	68 dc ac 13 f0       	push   $0xf013acdc
f0122483:	68 ea 06 00 00       	push   $0x6ea
f0122488:	68 5a ac 13 f0       	push   $0xf013ac5a
f012248d:	e8 69 dd fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122492:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122499:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012249c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01224a2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01224a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224ac:	eb 0e                	jmp    f01224bc <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f01224ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01224b1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224b4:	01 d0                	add    %edx,%eax
f01224b6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01224b9:	ff 45 f4             	incl   -0xc(%ebp)
f01224bc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01224c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224c5:	7f e7                	jg     f01224ae <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01224c7:	e8 fd a3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01224cc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01224d2:	e8 65 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01224d7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01224dd:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01224e3:	83 ec 0c             	sub    $0xc,%esp
f01224e6:	50                   	push   %eax
f01224e7:	e8 d4 53 fe ff       	call   f01078c0 <kfree>
f01224ec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224ef:	e8 48 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01224f4:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01224fa:	74 17                	je     f0122513 <test_kfree_bestfirstfit+0xbca>
f01224fc:	83 ec 04             	sub    $0x4,%esp
f01224ff:	68 74 ac 13 f0       	push   $0xf013ac74
f0122504:	68 f9 06 00 00       	push   $0x6f9
f0122509:	68 5a ac 13 f0       	push   $0xf013ac5a
f012250e:	e8 e8 dc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122513:	e8 b1 a3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122518:	89 c2                	mov    %eax,%edx
f012251a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122520:	29 c2                	sub    %eax,%edx
f0122522:	89 d0                	mov    %edx,%eax
f0122524:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122529:	74 17                	je     f0122542 <test_kfree_bestfirstfit+0xbf9>
f012252b:	83 ec 04             	sub    $0x4,%esp
f012252e:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122533:	68 fa 06 00 00       	push   $0x6fa
f0122538:	68 5a ac 13 f0       	push   $0xf013ac5a
f012253d:	e8 b9 dc fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122542:	e8 82 a3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122547:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012254d:	e8 ea 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122552:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122558:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012255e:	83 ec 0c             	sub    $0xc,%esp
f0122561:	50                   	push   %eax
f0122562:	e8 59 53 fe ff       	call   f01078c0 <kfree>
f0122567:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012256a:	e8 cd 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012256f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122575:	74 17                	je     f012258e <test_kfree_bestfirstfit+0xc45>
f0122577:	83 ec 04             	sub    $0x4,%esp
f012257a:	68 74 ac 13 f0       	push   $0xf013ac74
f012257f:	68 00 07 00 00       	push   $0x700
f0122584:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122589:	e8 6d dc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012258e:	e8 36 a3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122593:	89 c2                	mov    %eax,%edx
f0122595:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012259b:	29 c2                	sub    %eax,%edx
f012259d:	89 d0                	mov    %edx,%eax
f012259f:	83 f8 01             	cmp    $0x1,%eax
f01225a2:	74 17                	je     f01225bb <test_kfree_bestfirstfit+0xc72>
f01225a4:	83 ec 04             	sub    $0x4,%esp
f01225a7:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01225ac:	68 01 07 00 00       	push   $0x701
f01225b1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01225b6:	e8 40 dc fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01225bb:	e8 09 a3 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01225c0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225c6:	e8 71 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01225cb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01225d1:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01225d7:	83 ec 0c             	sub    $0xc,%esp
f01225da:	50                   	push   %eax
f01225db:	e8 e0 52 fe ff       	call   f01078c0 <kfree>
f01225e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225e3:	e8 54 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01225e8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01225ee:	74 17                	je     f0122607 <test_kfree_bestfirstfit+0xcbe>
f01225f0:	83 ec 04             	sub    $0x4,%esp
f01225f3:	68 74 ac 13 f0       	push   $0xf013ac74
f01225f8:	68 07 07 00 00       	push   $0x707
f01225fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122602:	e8 f4 db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122607:	e8 bd a2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012260c:	89 c2                	mov    %eax,%edx
f012260e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122614:	29 c2                	sub    %eax,%edx
f0122616:	89 d0                	mov    %edx,%eax
f0122618:	3d 00 02 00 00       	cmp    $0x200,%eax
f012261d:	74 17                	je     f0122636 <test_kfree_bestfirstfit+0xced>
f012261f:	83 ec 04             	sub    $0x4,%esp
f0122622:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122627:	68 08 07 00 00       	push   $0x708
f012262c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122631:	e8 c5 db fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122636:	e8 8e a2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012263b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122641:	e8 f6 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122646:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012264c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122652:	83 ec 0c             	sub    $0xc,%esp
f0122655:	50                   	push   %eax
f0122656:	e8 65 52 fe ff       	call   f01078c0 <kfree>
f012265b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012265e:	e8 d9 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122663:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122669:	74 17                	je     f0122682 <test_kfree_bestfirstfit+0xd39>
f012266b:	83 ec 04             	sub    $0x4,%esp
f012266e:	68 74 ac 13 f0       	push   $0xf013ac74
f0122673:	68 0e 07 00 00       	push   $0x70e
f0122678:	68 5a ac 13 f0       	push   $0xf013ac5a
f012267d:	e8 79 db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122682:	e8 42 a2 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122687:	89 c2                	mov    %eax,%edx
f0122689:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012268f:	29 c2                	sub    %eax,%edx
f0122691:	89 d0                	mov    %edx,%eax
f0122693:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122698:	74 17                	je     f01226b1 <test_kfree_bestfirstfit+0xd68>
f012269a:	83 ec 04             	sub    $0x4,%esp
f012269d:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01226a2:	68 0f 07 00 00       	push   $0x70f
f01226a7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01226ac:	e8 4a db fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01226b1:	83 ec 0c             	sub    $0xc,%esp
f01226b4:	68 1c b4 13 f0       	push   $0xf013b41c
f01226b9:	e8 c4 e5 fd ff       	call   f0100c82 <cprintf>
f01226be:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01226c1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01226c7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01226ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01226d1:	eb 1e                	jmp    f01226f1 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01226d3:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01226d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01226dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01226df:	01 c8                	add    %ecx,%eax
f01226e1:	8a 00                	mov    (%eax),%al
f01226e3:	0f be c0             	movsbl %al,%eax
f01226e6:	01 d0                	add    %edx,%eax
f01226e8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01226ee:	ff 45 f4             	incl   -0xc(%ebp)
f01226f1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01226f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01226fa:	7f d7                	jg     f01226d3 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01226fc:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122702:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122708:	89 c1                	mov    %eax,%ecx
f012270a:	01 c9                	add    %ecx,%ecx
f012270c:	01 c8                	add    %ecx,%eax
f012270e:	39 c2                	cmp    %eax,%edx
f0122710:	74 17                	je     f0122729 <test_kfree_bestfirstfit+0xde0>
f0122712:	83 ec 04             	sub    $0x4,%esp
f0122715:	68 40 b4 13 f0       	push   $0xf013b440
f012271a:	68 1c 07 00 00       	push   $0x71c
f012271f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122724:	e8 d2 da fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122729:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012272f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122732:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122739:	eb 1e                	jmp    f0122759 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f012273b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122741:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122744:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122747:	01 c8                	add    %ecx,%eax
f0122749:	8a 00                	mov    (%eax),%al
f012274b:	0f be c0             	movsbl %al,%eax
f012274e:	01 d0                	add    %edx,%eax
f0122750:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122756:	ff 45 f4             	incl   -0xc(%ebp)
f0122759:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012275f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122762:	7f d7                	jg     f012273b <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122764:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012276a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122770:	c1 e2 02             	shl    $0x2,%edx
f0122773:	39 d0                	cmp    %edx,%eax
f0122775:	74 17                	je     f012278e <test_kfree_bestfirstfit+0xe45>
f0122777:	83 ec 04             	sub    $0x4,%esp
f012277a:	68 40 b4 13 f0       	push   $0xf013b440
f012277f:	68 24 07 00 00       	push   $0x724
f0122784:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122789:	e8 6d da fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012278e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122794:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122797:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012279e:	eb 1e                	jmp    f01227be <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f01227a0:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01227a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01227a9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01227ac:	01 c8                	add    %ecx,%eax
f01227ae:	8a 00                	mov    (%eax),%al
f01227b0:	0f be c0             	movsbl %al,%eax
f01227b3:	01 d0                	add    %edx,%eax
f01227b5:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01227bb:	ff 45 f4             	incl   -0xc(%ebp)
f01227be:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01227c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01227c7:	7f d7                	jg     f01227a0 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01227c9:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01227cf:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01227d5:	89 d0                	mov    %edx,%eax
f01227d7:	c1 e0 02             	shl    $0x2,%eax
f01227da:	01 d0                	add    %edx,%eax
f01227dc:	39 c1                	cmp    %eax,%ecx
f01227de:	74 17                	je     f01227f7 <test_kfree_bestfirstfit+0xeae>
f01227e0:	83 ec 04             	sub    $0x4,%esp
f01227e3:	68 40 b4 13 f0       	push   $0xf013b440
f01227e8:	68 2c 07 00 00       	push   $0x72c
f01227ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f01227f2:	e8 04 da fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01227f7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01227fd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122800:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122807:	eb 1e                	jmp    f0122827 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0122809:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012280f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122812:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122815:	01 c8                	add    %ecx,%eax
f0122817:	8a 00                	mov    (%eax),%al
f0122819:	0f be c0             	movsbl %al,%eax
f012281c:	01 d0                	add    %edx,%eax
f012281e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122824:	ff 45 f4             	incl   -0xc(%ebp)
f0122827:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012282d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122830:	7f d7                	jg     f0122809 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122832:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0122838:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012283e:	89 d0                	mov    %edx,%eax
f0122840:	01 c0                	add    %eax,%eax
f0122842:	01 d0                	add    %edx,%eax
f0122844:	01 c0                	add    %eax,%eax
f0122846:	01 d0                	add    %edx,%eax
f0122848:	39 c1                	cmp    %eax,%ecx
f012284a:	74 17                	je     f0122863 <test_kfree_bestfirstfit+0xf1a>
f012284c:	83 ec 04             	sub    $0x4,%esp
f012284f:	68 40 b4 13 f0       	push   $0xf013b440
f0122854:	68 34 07 00 00       	push   $0x734
f0122859:	68 5a ac 13 f0       	push   $0xf013ac5a
f012285e:	e8 98 d9 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f0122863:	83 ec 0c             	sub    $0xc,%esp
f0122866:	68 73 b4 13 f0       	push   $0xf013b473
f012286b:	e8 12 e4 fd ff       	call   f0100c82 <cprintf>
f0122870:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122873:	e8 51 a0 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122878:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012287b:	e8 bc 14 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122880:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122883:	83 ec 0c             	sub    $0xc,%esp
f0122886:	68 00 00 30 00       	push   $0x300000
f012288b:	e8 6e 4f fe ff       	call   f01077fe <kmalloc>
f0122890:	83 c4 10             	add    $0x10,%esp
f0122893:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122899:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012289f:	89 c1                	mov    %eax,%ecx
f01228a1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01228a8:	10 00 00 
f01228ab:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01228b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228b6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01228bc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01228c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01228c7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01228cd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01228d3:	29 d0                	sub    %edx,%eax
f01228d5:	89 c3                	mov    %eax,%ebx
f01228d7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01228de:	10 00 00 
f01228e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01228e6:	0f b6 d0             	movzbl %al,%edx
f01228e9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01228ef:	01 d0                	add    %edx,%eax
f01228f1:	48                   	dec    %eax
f01228f2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01228f8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01228fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0122903:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0122909:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012290f:	29 d0                	sub    %edx,%eax
f0122911:	01 c3                	add    %eax,%ebx
f0122913:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012291a:	10 00 00 
f012291d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122922:	0f b6 c0             	movzbl %al,%eax
f0122925:	c1 e0 04             	shl    $0x4,%eax
f0122928:	89 c2                	mov    %eax,%edx
f012292a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122930:	01 d0                	add    %edx,%eax
f0122932:	48                   	dec    %eax
f0122933:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0122939:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012293f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122944:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012294a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122950:	29 d0                	sub    %edx,%eax
f0122952:	01 d8                	add    %ebx,%eax
f0122954:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122959:	39 c1                	cmp    %eax,%ecx
f012295b:	74 17                	je     f0122974 <test_kfree_bestfirstfit+0x102b>
f012295d:	83 ec 04             	sub    $0x4,%esp
f0122960:	68 40 ad 13 f0       	push   $0xf013ad40
f0122965:	68 3f 07 00 00       	push   $0x73f
f012296a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012296f:	e8 87 d8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122974:	e8 c3 13 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122979:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012297c:	74 17                	je     f0122995 <test_kfree_bestfirstfit+0x104c>
f012297e:	83 ec 04             	sub    $0x4,%esp
f0122981:	68 74 ac 13 f0       	push   $0xf013ac74
f0122986:	68 40 07 00 00       	push   $0x740
f012298b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122990:	e8 66 d8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122995:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122998:	e8 2c 9f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012299d:	29 c3                	sub    %eax,%ebx
f012299f:	89 d8                	mov    %ebx,%eax
f01229a1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01229a6:	74 17                	je     f01229bf <test_kfree_bestfirstfit+0x1076>
f01229a8:	83 ec 04             	sub    $0x4,%esp
f01229ab:	68 dc ac 13 f0       	push   $0xf013acdc
f01229b0:	68 41 07 00 00       	push   $0x741
f01229b5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01229ba:	e8 3c d8 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01229bf:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01229c6:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01229c9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01229cf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01229d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01229d9:	eb 0e                	jmp    f01229e9 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01229db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01229de:	8b 45 80             	mov    -0x80(%ebp),%eax
f01229e1:	01 d0                	add    %edx,%eax
f01229e3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01229e6:	ff 45 f4             	incl   -0xc(%ebp)
f01229e9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01229ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229f2:	7f e7                	jg     f01229db <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01229f4:	e8 d0 9e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01229f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229fc:	e8 3b 13 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122a01:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122a04:	83 ec 0c             	sub    $0xc,%esp
f0122a07:	68 00 08 00 00       	push   $0x800
f0122a0c:	e8 ed 4d fe ff       	call   f01077fe <kmalloc>
f0122a11:	83 c4 10             	add    $0x10,%esp
f0122a14:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a1a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122a20:	89 c1                	mov    %eax,%ecx
f0122a22:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122a29:	10 00 00 
f0122a2c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122a32:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a37:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122a3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122a43:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a48:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122a4e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122a54:	29 d0                	sub    %edx,%eax
f0122a56:	89 c3                	mov    %eax,%ebx
f0122a58:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0122a5f:	10 00 00 
f0122a62:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122a67:	0f b6 d0             	movzbl %al,%edx
f0122a6a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122a70:	01 d0                	add    %edx,%eax
f0122a72:	48                   	dec    %eax
f0122a73:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122a79:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122a7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a84:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122a8a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122a90:	29 d0                	sub    %edx,%eax
f0122a92:	01 c3                	add    %eax,%ebx
f0122a94:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122a9b:	10 00 00 
f0122a9e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122aa3:	0f b6 c0             	movzbl %al,%eax
f0122aa6:	c1 e0 04             	shl    $0x4,%eax
f0122aa9:	89 c2                	mov    %eax,%edx
f0122aab:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122ab1:	01 d0                	add    %edx,%eax
f0122ab3:	48                   	dec    %eax
f0122ab4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122aba:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122ac0:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ac5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122acb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122ad1:	29 d0                	sub    %edx,%eax
f0122ad3:	01 d8                	add    %ebx,%eax
f0122ad5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122ada:	39 c1                	cmp    %eax,%ecx
f0122adc:	74 17                	je     f0122af5 <test_kfree_bestfirstfit+0x11ac>
f0122ade:	83 ec 04             	sub    $0x4,%esp
f0122ae1:	68 40 ad 13 f0       	push   $0xf013ad40
f0122ae6:	68 4d 07 00 00       	push   $0x74d
f0122aeb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122af0:	e8 06 d7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122af5:	e8 42 12 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122afa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122afd:	74 17                	je     f0122b16 <test_kfree_bestfirstfit+0x11cd>
f0122aff:	83 ec 04             	sub    $0x4,%esp
f0122b02:	68 74 ac 13 f0       	push   $0xf013ac74
f0122b07:	68 4e 07 00 00       	push   $0x74e
f0122b0c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122b11:	e8 e5 d6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b16:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b19:	e8 ab 9d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122b1e:	29 c3                	sub    %eax,%ebx
f0122b20:	89 d8                	mov    %ebx,%eax
f0122b22:	83 f8 01             	cmp    $0x1,%eax
f0122b25:	74 17                	je     f0122b3e <test_kfree_bestfirstfit+0x11f5>
f0122b27:	83 ec 04             	sub    $0x4,%esp
f0122b2a:	68 dc ac 13 f0       	push   $0xf013acdc
f0122b2f:	68 4f 07 00 00       	push   $0x74f
f0122b34:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122b39:	e8 bd d6 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122b3e:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122b45:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122b48:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122b4e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122b51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b58:	eb 0e                	jmp    f0122b68 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0122b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b5d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b60:	01 d0                	add    %edx,%eax
f0122b62:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122b65:	ff 45 f4             	incl   -0xc(%ebp)
f0122b68:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0122b6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b71:	7f e7                	jg     f0122b5a <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b73:	e8 51 9d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122b78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b7b:	e8 bc 11 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122b80:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122b83:	83 ec 0c             	sub    $0xc,%esp
f0122b86:	68 00 00 10 00       	push   $0x100000
f0122b8b:	e8 6e 4c fe ff       	call   f01077fe <kmalloc>
f0122b90:	83 c4 10             	add    $0x10,%esp
f0122b93:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b99:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122b9f:	89 c1                	mov    %eax,%ecx
f0122ba1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122ba8:	10 00 00 
f0122bab:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122bb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bb6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122bbc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122bc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bc7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122bcd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122bd3:	29 d0                	sub    %edx,%eax
f0122bd5:	89 c3                	mov    %eax,%ebx
f0122bd7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122bde:	10 00 00 
f0122be1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122be6:	0f b6 d0             	movzbl %al,%edx
f0122be9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122bef:	01 d0                	add    %edx,%eax
f0122bf1:	48                   	dec    %eax
f0122bf2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122bf8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122bfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c03:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122c09:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122c0f:	29 d0                	sub    %edx,%eax
f0122c11:	01 c3                	add    %eax,%ebx
f0122c13:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0122c1a:	10 00 00 
f0122c1d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122c22:	0f b6 c0             	movzbl %al,%eax
f0122c25:	c1 e0 04             	shl    $0x4,%eax
f0122c28:	89 c2                	mov    %eax,%edx
f0122c2a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122c30:	01 d0                	add    %edx,%eax
f0122c32:	48                   	dec    %eax
f0122c33:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122c39:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122c3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c44:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122c4a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122c50:	29 d0                	sub    %edx,%eax
f0122c52:	01 d8                	add    %ebx,%eax
f0122c54:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122c59:	39 c1                	cmp    %eax,%ecx
f0122c5b:	74 17                	je     f0122c74 <test_kfree_bestfirstfit+0x132b>
f0122c5d:	83 ec 04             	sub    $0x4,%esp
f0122c60:	68 40 ad 13 f0       	push   $0xf013ad40
f0122c65:	68 5b 07 00 00       	push   $0x75b
f0122c6a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122c6f:	e8 87 d5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c74:	e8 c3 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122c79:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c7c:	74 17                	je     f0122c95 <test_kfree_bestfirstfit+0x134c>
f0122c7e:	83 ec 04             	sub    $0x4,%esp
f0122c81:	68 74 ac 13 f0       	push   $0xf013ac74
f0122c86:	68 5c 07 00 00       	push   $0x75c
f0122c8b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122c90:	e8 66 d5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c95:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122c98:	e8 2c 9c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122c9d:	29 c3                	sub    %eax,%ebx
f0122c9f:	89 d8                	mov    %ebx,%eax
f0122ca1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122ca6:	74 17                	je     f0122cbf <test_kfree_bestfirstfit+0x1376>
f0122ca8:	83 ec 04             	sub    $0x4,%esp
f0122cab:	68 dc ac 13 f0       	push   $0xf013acdc
f0122cb0:	68 5d 07 00 00       	push   $0x75d
f0122cb5:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122cba:	e8 3c d5 fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122cbf:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122cc6:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122cc9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122ccf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122cd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122cd9:	eb 0e                	jmp    f0122ce9 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122cdb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122cde:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ce1:	01 d0                	add    %edx,%eax
f0122ce3:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122ce6:	ff 45 f4             	incl   -0xc(%ebp)
f0122ce9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122cef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122cf2:	7f e7                	jg     f0122cdb <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122cf4:	83 ec 0c             	sub    $0xc,%esp
f0122cf7:	68 7a b4 13 f0       	push   $0xf013b47a
f0122cfc:	e8 81 df fd ff       	call   f0100c82 <cprintf>
f0122d01:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122d04:	e8 c0 9b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122d09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d0c:	e8 2b 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122d14:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d1a:	83 ec 0c             	sub    $0xc,%esp
f0122d1d:	50                   	push   %eax
f0122d1e:	e8 9d 4b fe ff       	call   f01078c0 <kfree>
f0122d23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d26:	e8 11 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d2b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d2e:	74 17                	je     f0122d47 <test_kfree_bestfirstfit+0x13fe>
f0122d30:	83 ec 04             	sub    $0x4,%esp
f0122d33:	68 74 ac 13 f0       	push   $0xf013ac74
f0122d38:	68 6d 07 00 00       	push   $0x76d
f0122d3d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122d42:	e8 b4 d4 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d47:	e8 7d 9b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122d4c:	89 c2                	mov    %eax,%edx
f0122d4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d51:	29 c2                	sub    %eax,%edx
f0122d53:	89 d0                	mov    %edx,%eax
f0122d55:	83 f8 02             	cmp    $0x2,%eax
f0122d58:	74 17                	je     f0122d71 <test_kfree_bestfirstfit+0x1428>
f0122d5a:	83 ec 04             	sub    $0x4,%esp
f0122d5d:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122d62:	68 6e 07 00 00       	push   $0x76e
f0122d67:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122d6c:	e8 8a d4 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d71:	e8 53 9b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122d76:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d79:	e8 be 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122d81:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122d87:	83 ec 0c             	sub    $0xc,%esp
f0122d8a:	50                   	push   %eax
f0122d8b:	e8 30 4b fe ff       	call   f01078c0 <kfree>
f0122d90:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d93:	e8 a4 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d9b:	74 17                	je     f0122db4 <test_kfree_bestfirstfit+0x146b>
f0122d9d:	83 ec 04             	sub    $0x4,%esp
f0122da0:	68 74 ac 13 f0       	push   $0xf013ac74
f0122da5:	68 74 07 00 00       	push   $0x774
f0122daa:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122daf:	e8 47 d4 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122db4:	e8 10 9b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122db9:	89 c2                	mov    %eax,%edx
f0122dbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122dbe:	29 c2                	sub    %eax,%edx
f0122dc0:	89 d0                	mov    %edx,%eax
f0122dc2:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122dc7:	74 17                	je     f0122de0 <test_kfree_bestfirstfit+0x1497>
f0122dc9:	83 ec 04             	sub    $0x4,%esp
f0122dcc:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122dd1:	68 75 07 00 00       	push   $0x775
f0122dd6:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122ddb:	e8 1b d4 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122de0:	e8 e4 9a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122de5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122de8:	e8 4f 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122ded:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122df0:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122df6:	83 ec 0c             	sub    $0xc,%esp
f0122df9:	50                   	push   %eax
f0122dfa:	e8 c1 4a fe ff       	call   f01078c0 <kfree>
f0122dff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e02:	e8 35 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e0a:	74 17                	je     f0122e23 <test_kfree_bestfirstfit+0x14da>
f0122e0c:	83 ec 04             	sub    $0x4,%esp
f0122e0f:	68 74 ac 13 f0       	push   $0xf013ac74
f0122e14:	68 7b 07 00 00       	push   $0x77b
f0122e19:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122e1e:	e8 d8 d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e23:	e8 a1 9a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122e28:	89 c2                	mov    %eax,%edx
f0122e2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e2d:	29 c2                	sub    %eax,%edx
f0122e2f:	89 d0                	mov    %edx,%eax
f0122e31:	83 f8 01             	cmp    $0x1,%eax
f0122e34:	74 17                	je     f0122e4d <test_kfree_bestfirstfit+0x1504>
f0122e36:	83 ec 04             	sub    $0x4,%esp
f0122e39:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122e3e:	68 7c 07 00 00       	push   $0x77c
f0122e43:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122e48:	e8 ae d3 fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e4d:	e8 77 9a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122e52:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e55:	e8 e2 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e5a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122e5d:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122e63:	83 ec 0c             	sub    $0xc,%esp
f0122e66:	50                   	push   %eax
f0122e67:	e8 54 4a fe ff       	call   f01078c0 <kfree>
f0122e6c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e6f:	e8 c8 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e74:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e77:	74 17                	je     f0122e90 <test_kfree_bestfirstfit+0x1547>
f0122e79:	83 ec 04             	sub    $0x4,%esp
f0122e7c:	68 74 ac 13 f0       	push   $0xf013ac74
f0122e81:	68 82 07 00 00       	push   $0x782
f0122e86:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122e8b:	e8 6b d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e90:	e8 34 9a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122e95:	89 c2                	mov    %eax,%edx
f0122e97:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e9a:	29 c2                	sub    %eax,%edx
f0122e9c:	89 d0                	mov    %edx,%eax
f0122e9e:	83 f8 04             	cmp    $0x4,%eax
f0122ea1:	74 17                	je     f0122eba <test_kfree_bestfirstfit+0x1571>
f0122ea3:	83 ec 04             	sub    $0x4,%esp
f0122ea6:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122eab:	68 83 07 00 00       	push   $0x783
f0122eb0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122eb5:	e8 41 d3 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122eba:	e8 0a 9a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122ebf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ec2:	e8 75 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122ec7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122eca:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122ed0:	83 ec 0c             	sub    $0xc,%esp
f0122ed3:	50                   	push   %eax
f0122ed4:	e8 e7 49 fe ff       	call   f01078c0 <kfree>
f0122ed9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122edc:	e8 5b 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122ee1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ee4:	74 17                	je     f0122efd <test_kfree_bestfirstfit+0x15b4>
f0122ee6:	83 ec 04             	sub    $0x4,%esp
f0122ee9:	68 74 ac 13 f0       	push   $0xf013ac74
f0122eee:	68 89 07 00 00       	push   $0x789
f0122ef3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122ef8:	e8 fe d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122efd:	e8 c7 99 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122f02:	89 c2                	mov    %eax,%edx
f0122f04:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f07:	29 c2                	sub    %eax,%edx
f0122f09:	89 d0                	mov    %edx,%eax
f0122f0b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122f10:	74 17                	je     f0122f29 <test_kfree_bestfirstfit+0x15e0>
f0122f12:	83 ec 04             	sub    $0x4,%esp
f0122f15:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122f1a:	68 8a 07 00 00       	push   $0x78a
f0122f1f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122f24:	e8 d2 d2 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f29:	e8 9b 99 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122f2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f31:	e8 06 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f36:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122f39:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122f3f:	83 ec 0c             	sub    $0xc,%esp
f0122f42:	50                   	push   %eax
f0122f43:	e8 78 49 fe ff       	call   f01078c0 <kfree>
f0122f48:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f4b:	e8 ec 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f50:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f53:	74 17                	je     f0122f6c <test_kfree_bestfirstfit+0x1623>
f0122f55:	83 ec 04             	sub    $0x4,%esp
f0122f58:	68 74 ac 13 f0       	push   $0xf013ac74
f0122f5d:	68 90 07 00 00       	push   $0x790
f0122f62:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122f67:	e8 8f d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f6c:	e8 58 99 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122f71:	89 c2                	mov    %eax,%edx
f0122f73:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f76:	29 c2                	sub    %eax,%edx
f0122f78:	89 d0                	mov    %edx,%eax
f0122f7a:	83 f8 01             	cmp    $0x1,%eax
f0122f7d:	74 17                	je     f0122f96 <test_kfree_bestfirstfit+0x164d>
f0122f7f:	83 ec 04             	sub    $0x4,%esp
f0122f82:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122f87:	68 91 07 00 00       	push   $0x791
f0122f8c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122f91:	e8 65 d2 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f96:	e8 2e 99 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122f9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f9e:	e8 99 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122fa3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122fa6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122fac:	83 ec 0c             	sub    $0xc,%esp
f0122faf:	50                   	push   %eax
f0122fb0:	e8 0b 49 fe ff       	call   f01078c0 <kfree>
f0122fb5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fb8:	e8 7f 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122fbd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fc0:	74 17                	je     f0122fd9 <test_kfree_bestfirstfit+0x1690>
f0122fc2:	83 ec 04             	sub    $0x4,%esp
f0122fc5:	68 74 ac 13 f0       	push   $0xf013ac74
f0122fca:	68 97 07 00 00       	push   $0x797
f0122fcf:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122fd4:	e8 22 d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122fd9:	e8 eb 98 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0122fde:	89 c2                	mov    %eax,%edx
f0122fe0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122fe3:	29 c2                	sub    %eax,%edx
f0122fe5:	89 d0                	mov    %edx,%eax
f0122fe7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122fec:	74 17                	je     f0123005 <test_kfree_bestfirstfit+0x16bc>
f0122fee:	83 ec 04             	sub    $0x4,%esp
f0122ff1:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122ff6:	68 98 07 00 00       	push   $0x798
f0122ffb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123000:	e8 f6 d1 fd ff       	call   f01001fb <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123005:	e8 bf 98 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012300a:	89 c2                	mov    %eax,%edx
f012300c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012300f:	39 c2                	cmp    %eax,%edx
f0123011:	74 17                	je     f012302a <test_kfree_bestfirstfit+0x16e1>
f0123013:	83 ec 04             	sub    $0x4,%esp
f0123016:	68 84 b4 13 f0       	push   $0xf013b484
f012301b:	68 9a 07 00 00       	push   $0x79a
f0123020:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123025:	e8 d1 d1 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f012302a:	83 ec 0c             	sub    $0xc,%esp
f012302d:	68 b8 b4 13 f0       	push   $0xf013b4b8
f0123032:	e8 4b dc fd ff       	call   f0100c82 <cprintf>
f0123037:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012303a:	83 ec 0c             	sub    $0xc,%esp
f012303d:	6a 03                	push   $0x3
f012303f:	e8 25 9d fe ff       	call   f010cd69 <sys_bypassPageFault>
f0123044:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123047:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012304e:	e9 82 00 00 00       	jmp    f01230d5 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123053:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123056:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f012305d:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123060:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123063:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123066:	e8 ec 9c fe ff       	call   f010cd57 <sys_rcr2>
f012306b:	89 c2                	mov    %eax,%edx
f012306d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123070:	39 c2                	cmp    %eax,%edx
f0123072:	74 17                	je     f012308b <test_kfree_bestfirstfit+0x1742>
f0123074:	83 ec 04             	sub    $0x4,%esp
f0123077:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012307c:	68 a9 07 00 00       	push   $0x7a9
f0123081:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123086:	e8 70 d1 fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f012308b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012308e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123095:	89 c2                	mov    %eax,%edx
f0123097:	8b 45 80             	mov    -0x80(%ebp),%eax
f012309a:	01 d0                	add    %edx,%eax
f012309c:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012309f:	e8 b3 9c fe ff       	call   f010cd57 <sys_rcr2>
f01230a4:	89 c2                	mov    %eax,%edx
f01230a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01230a9:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01230b0:	89 c1                	mov    %eax,%ecx
f01230b2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230b5:	01 c8                	add    %ecx,%eax
f01230b7:	39 c2                	cmp    %eax,%edx
f01230b9:	74 17                	je     f01230d2 <test_kfree_bestfirstfit+0x1789>
f01230bb:	83 ec 04             	sub    $0x4,%esp
f01230be:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01230c3:	68 ab 07 00 00       	push   $0x7ab
f01230c8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01230cd:	e8 29 d1 fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01230d2:	ff 45 f4             	incl   -0xc(%ebp)
f01230d5:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01230d9:	0f 8e 74 ff ff ff    	jle    f0123053 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01230df:	83 ec 0c             	sub    $0xc,%esp
f01230e2:	6a 00                	push   $0x0
f01230e4:	e8 80 9c fe ff       	call   f010cd69 <sys_bypassPageFault>
f01230e9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01230ec:	83 ec 0c             	sub    $0xc,%esp
f01230ef:	68 05 b5 13 f0       	push   $0xf013b505
f01230f4:	e8 89 db fd ff       	call   f0100c82 <cprintf>
f01230f9:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01230fc:	e8 c8 97 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123101:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123104:	e8 33 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123109:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012310c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123112:	83 ec 0c             	sub    $0xc,%esp
f0123115:	50                   	push   %eax
f0123116:	e8 a5 47 fe ff       	call   f01078c0 <kfree>
f012311b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012311e:	e8 19 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123123:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123126:	74 17                	je     f012313f <test_kfree_bestfirstfit+0x17f6>
f0123128:	83 ec 04             	sub    $0x4,%esp
f012312b:	68 74 ac 13 f0       	push   $0xf013ac74
f0123130:	68 b9 07 00 00       	push   $0x7b9
f0123135:	68 5a ac 13 f0       	push   $0xf013ac5a
f012313a:	e8 bc d0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012313f:	e8 85 97 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123144:	89 c2                	mov    %eax,%edx
f0123146:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123149:	39 c2                	cmp    %eax,%edx
f012314b:	74 17                	je     f0123164 <test_kfree_bestfirstfit+0x181b>
f012314d:	83 ec 04             	sub    $0x4,%esp
f0123150:	68 0c b5 13 f0       	push   $0xf013b50c
f0123155:	68 ba 07 00 00       	push   $0x7ba
f012315a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012315f:	e8 97 d0 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123164:	e8 60 97 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123169:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012316c:	e8 cb 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123171:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123174:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012317a:	83 ec 0c             	sub    $0xc,%esp
f012317d:	50                   	push   %eax
f012317e:	e8 3d 47 fe ff       	call   f01078c0 <kfree>
f0123183:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123186:	e8 b1 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012318b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012318e:	74 17                	je     f01231a7 <test_kfree_bestfirstfit+0x185e>
f0123190:	83 ec 04             	sub    $0x4,%esp
f0123193:	68 74 ac 13 f0       	push   $0xf013ac74
f0123198:	68 c0 07 00 00       	push   $0x7c0
f012319d:	68 5a ac 13 f0       	push   $0xf013ac5a
f01231a2:	e8 54 d0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01231a7:	e8 1d 97 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01231ac:	89 c2                	mov    %eax,%edx
f01231ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01231b1:	39 c2                	cmp    %eax,%edx
f01231b3:	74 17                	je     f01231cc <test_kfree_bestfirstfit+0x1883>
f01231b5:	83 ec 04             	sub    $0x4,%esp
f01231b8:	68 0c b5 13 f0       	push   $0xf013b50c
f01231bd:	68 c1 07 00 00       	push   $0x7c1
f01231c2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01231c7:	e8 2f d0 fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01231cc:	e8 f8 96 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01231d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231d4:	e8 63 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01231d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01231dc:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01231e2:	83 ec 0c             	sub    $0xc,%esp
f01231e5:	50                   	push   %eax
f01231e6:	e8 d5 46 fe ff       	call   f01078c0 <kfree>
f01231eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231ee:	e8 49 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01231f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01231f6:	74 17                	je     f012320f <test_kfree_bestfirstfit+0x18c6>
f01231f8:	83 ec 04             	sub    $0x4,%esp
f01231fb:	68 74 ac 13 f0       	push   $0xf013ac74
f0123200:	68 c7 07 00 00       	push   $0x7c7
f0123205:	68 5a ac 13 f0       	push   $0xf013ac5a
f012320a:	e8 ec cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012320f:	e8 b5 96 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123214:	89 c2                	mov    %eax,%edx
f0123216:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123219:	39 c2                	cmp    %eax,%edx
f012321b:	74 17                	je     f0123234 <test_kfree_bestfirstfit+0x18eb>
f012321d:	83 ec 04             	sub    $0x4,%esp
f0123220:	68 0c b5 13 f0       	push   $0xf013b50c
f0123225:	68 c8 07 00 00       	push   $0x7c8
f012322a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012322f:	e8 c7 cf fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123234:	e8 90 96 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123239:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012323c:	e8 fb 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123241:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123244:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012324a:	83 ec 0c             	sub    $0xc,%esp
f012324d:	50                   	push   %eax
f012324e:	e8 6d 46 fe ff       	call   f01078c0 <kfree>
f0123253:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123256:	e8 e1 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012325b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012325e:	74 17                	je     f0123277 <test_kfree_bestfirstfit+0x192e>
f0123260:	83 ec 04             	sub    $0x4,%esp
f0123263:	68 74 ac 13 f0       	push   $0xf013ac74
f0123268:	68 ce 07 00 00       	push   $0x7ce
f012326d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123272:	e8 84 cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123277:	e8 4d 96 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012327c:	89 c2                	mov    %eax,%edx
f012327e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123281:	39 c2                	cmp    %eax,%edx
f0123283:	74 17                	je     f012329c <test_kfree_bestfirstfit+0x1953>
f0123285:	83 ec 04             	sub    $0x4,%esp
f0123288:	68 0c b5 13 f0       	push   $0xf013b50c
f012328d:	68 cf 07 00 00       	push   $0x7cf
f0123292:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123297:	e8 5f cf fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f012329c:	83 ec 0c             	sub    $0xc,%esp
f012329f:	68 53 b5 13 f0       	push   $0xf013b553
f01232a4:	e8 d9 d9 fd ff       	call   f0100c82 <cprintf>
f01232a9:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01232ac:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01232b3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01232ba:	eb 48                	jmp    f0123304 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01232bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01232bf:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01232c4:	83 ec 04             	sub    $0x4,%esp
f01232c7:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01232cd:	51                   	push   %ecx
f01232ce:	52                   	push   %edx
f01232cf:	50                   	push   %eax
f01232d0:	e8 05 37 fe ff       	call   f01069da <get_page_table>
f01232d5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01232d8:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01232de:	85 c0                	test   %eax,%eax
f01232e0:	75 17                	jne    f01232f9 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01232e2:	83 ec 04             	sub    $0x4,%esp
f01232e5:	68 5c b5 13 f0       	push   $0xf013b55c
f01232ea:	68 dd 07 00 00       	push   $0x7dd
f01232ef:	68 5a ac 13 f0       	push   $0xf013ac5a
f01232f4:	e8 02 cf fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01232f9:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123300:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123304:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123308:	78 b2                	js     f01232bc <test_kfree_bestfirstfit+0x1973>
f012330a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012330e:	7f 09                	jg     f0123319 <test_kfree_bestfirstfit+0x19d0>
f0123310:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123317:	76 a3                	jbe    f01232bc <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123319:	83 ec 0c             	sub    $0xc,%esp
f012331c:	68 3e ae 13 f0       	push   $0xf013ae3e
f0123321:	e8 5c d9 fd ff       	call   f0100c82 <cprintf>
f0123326:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123329:	83 ec 0c             	sub    $0xc,%esp
f012332c:	68 c4 b5 13 f0       	push   $0xf013b5c4
f0123331:	e8 4c d9 fd ff       	call   f0100c82 <cprintf>
f0123336:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123339:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012333e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123341:	5b                   	pop    %ebx
f0123342:	5f                   	pop    %edi
f0123343:	5d                   	pop    %ebp
f0123344:	c3                   	ret    

f0123345 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123345:	55                   	push   %ebp
f0123346:	89 e5                	mov    %esp,%ebp
f0123348:	57                   	push   %edi
f0123349:	56                   	push   %esi
f012334a:	53                   	push   %ebx
f012334b:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123351:	83 ec 0c             	sub    $0xc,%esp
f0123354:	68 9c ab 13 f0       	push   $0xf013ab9c
f0123359:	e8 24 d9 fd ff       	call   f0100c82 <cprintf>
f012335e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123361:	83 ec 0c             	sub    $0xc,%esp
f0123364:	68 cc ab 13 f0       	push   $0xf013abcc
f0123369:	e8 14 d9 fd ff       	call   f0100c82 <cprintf>
f012336e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123371:	83 ec 0c             	sub    $0xc,%esp
f0123374:	68 9c ab 13 f0       	push   $0xf013ab9c
f0123379:	e8 04 d9 fd ff       	call   f0100c82 <cprintf>
f012337e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123381:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123385:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123389:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f012338f:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123395:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012339c:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01233a3:	e8 21 95 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01233a8:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01233ab:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f01233b1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01233b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01233bb:	89 d7                	mov    %edx,%edi
f01233bd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01233bf:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01233c5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01233ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01233cf:	89 d7                	mov    %edx,%edi
f01233d1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01233d3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01233d9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01233de:	b8 00 00 00 00       	mov    $0x0,%eax
f01233e3:	89 d7                	mov    %edx,%edi
f01233e5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233e7:	e8 dd 94 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01233ec:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233ef:	e8 48 09 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01233f4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01233f7:	83 ec 0c             	sub    $0xc,%esp
f01233fa:	68 00 fc 1f 00       	push   $0x1ffc00
f01233ff:	e8 fa 43 fe ff       	call   f01077fe <kmalloc>
f0123404:	83 c4 10             	add    $0x10,%esp
f0123407:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012340d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123413:	89 c1                	mov    %eax,%ecx
f0123415:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012341c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012341f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123424:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123427:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012342a:	ba 00 00 00 00       	mov    $0x0,%edx
f012342f:	f7 75 a0             	divl   -0x60(%ebp)
f0123432:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123435:	29 d0                	sub    %edx,%eax
f0123437:	89 c3                	mov    %eax,%ebx
f0123439:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123440:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123445:	0f b6 d0             	movzbl %al,%edx
f0123448:	8b 45 98             	mov    -0x68(%ebp),%eax
f012344b:	01 d0                	add    %edx,%eax
f012344d:	48                   	dec    %eax
f012344e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123451:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123454:	ba 00 00 00 00       	mov    $0x0,%edx
f0123459:	f7 75 98             	divl   -0x68(%ebp)
f012345c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012345f:	29 d0                	sub    %edx,%eax
f0123461:	01 c3                	add    %eax,%ebx
f0123463:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012346a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012346f:	0f b6 c0             	movzbl %al,%eax
f0123472:	c1 e0 04             	shl    $0x4,%eax
f0123475:	89 c2                	mov    %eax,%edx
f0123477:	8b 45 90             	mov    -0x70(%ebp),%eax
f012347a:	01 d0                	add    %edx,%eax
f012347c:	48                   	dec    %eax
f012347d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123480:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123483:	ba 00 00 00 00       	mov    $0x0,%edx
f0123488:	f7 75 90             	divl   -0x70(%ebp)
f012348b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012348e:	29 d0                	sub    %edx,%eax
f0123490:	01 d8                	add    %ebx,%eax
f0123492:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123497:	39 c1                	cmp    %eax,%ecx
f0123499:	74 17                	je     f01234b2 <test_kheap_phys_addr+0x16d>
f012349b:	83 ec 04             	sub    $0x4,%esp
f012349e:	68 40 ad 13 f0       	push   $0xf013ad40
f01234a3:	68 0a 08 00 00       	push   $0x80a
f01234a8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01234ad:	e8 49 cd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234b2:	e8 85 08 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01234b7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01234ba:	74 17                	je     f01234d3 <test_kheap_phys_addr+0x18e>
f01234bc:	83 ec 04             	sub    $0x4,%esp
f01234bf:	68 74 ac 13 f0       	push   $0xf013ac74
f01234c4:	68 0b 08 00 00       	push   $0x80b
f01234c9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01234ce:	e8 28 cd fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01234d3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01234d6:	e8 ee 93 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01234db:	29 c3                	sub    %eax,%ebx
f01234dd:	89 d8                	mov    %ebx,%eax
f01234df:	3d 00 02 00 00       	cmp    $0x200,%eax
f01234e4:	74 17                	je     f01234fd <test_kheap_phys_addr+0x1b8>
f01234e6:	83 ec 04             	sub    $0x4,%esp
f01234e9:	68 dc ac 13 f0       	push   $0xf013acdc
f01234ee:	68 0c 08 00 00       	push   $0x80c
f01234f3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01234f8:	e8 fe cc fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01234fd:	e8 c7 93 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123502:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123505:	e8 32 08 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012350a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012350d:	83 ec 0c             	sub    $0xc,%esp
f0123510:	68 00 fc 1f 00       	push   $0x1ffc00
f0123515:	e8 e4 42 fe ff       	call   f01077fe <kmalloc>
f012351a:	83 c4 10             	add    $0x10,%esp
f012351d:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123523:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123529:	89 c1                	mov    %eax,%ecx
f012352b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123532:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123535:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012353a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012353d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123540:	ba 00 00 00 00       	mov    $0x0,%edx
f0123545:	f7 75 88             	divl   -0x78(%ebp)
f0123548:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012354b:	29 d0                	sub    %edx,%eax
f012354d:	89 c3                	mov    %eax,%ebx
f012354f:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123556:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012355b:	0f b6 d0             	movzbl %al,%edx
f012355e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123561:	01 d0                	add    %edx,%eax
f0123563:	48                   	dec    %eax
f0123564:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012356a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123570:	ba 00 00 00 00       	mov    $0x0,%edx
f0123575:	f7 75 80             	divl   -0x80(%ebp)
f0123578:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012357e:	29 d0                	sub    %edx,%eax
f0123580:	01 c3                	add    %eax,%ebx
f0123582:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123589:	10 00 00 
f012358c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123591:	0f b6 c0             	movzbl %al,%eax
f0123594:	c1 e0 04             	shl    $0x4,%eax
f0123597:	89 c2                	mov    %eax,%edx
f0123599:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012359f:	01 d0                	add    %edx,%eax
f01235a1:	48                   	dec    %eax
f01235a2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01235a8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01235ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01235b3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01235b9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01235bf:	29 d0                	sub    %edx,%eax
f01235c1:	01 d8                	add    %ebx,%eax
f01235c3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01235c8:	39 c1                	cmp    %eax,%ecx
f01235ca:	74 17                	je     f01235e3 <test_kheap_phys_addr+0x29e>
f01235cc:	83 ec 04             	sub    $0x4,%esp
f01235cf:	68 40 ad 13 f0       	push   $0xf013ad40
f01235d4:	68 12 08 00 00       	push   $0x812
f01235d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01235de:	e8 18 cc fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235e3:	e8 54 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01235e8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01235eb:	74 17                	je     f0123604 <test_kheap_phys_addr+0x2bf>
f01235ed:	83 ec 04             	sub    $0x4,%esp
f01235f0:	68 74 ac 13 f0       	push   $0xf013ac74
f01235f5:	68 13 08 00 00       	push   $0x813
f01235fa:	68 5a ac 13 f0       	push   $0xf013ac5a
f01235ff:	e8 f7 cb fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123604:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123607:	e8 bd 92 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012360c:	29 c3                	sub    %eax,%ebx
f012360e:	89 d8                	mov    %ebx,%eax
f0123610:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123615:	74 17                	je     f012362e <test_kheap_phys_addr+0x2e9>
f0123617:	83 ec 04             	sub    $0x4,%esp
f012361a:	68 dc ac 13 f0       	push   $0xf013acdc
f012361f:	68 14 08 00 00       	push   $0x814
f0123624:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123629:	e8 cd cb fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012362e:	e8 96 92 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123633:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123636:	e8 01 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012363b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012363e:	83 ec 0c             	sub    $0xc,%esp
f0123641:	68 00 08 00 00       	push   $0x800
f0123646:	e8 b3 41 fe ff       	call   f01077fe <kmalloc>
f012364b:	83 c4 10             	add    $0x10,%esp
f012364e:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123654:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012365a:	89 c1                	mov    %eax,%ecx
f012365c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123663:	10 00 00 
f0123666:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012366c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123671:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123677:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012367d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123682:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123688:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012368e:	29 d0                	sub    %edx,%eax
f0123690:	89 c3                	mov    %eax,%ebx
f0123692:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123699:	10 00 00 
f012369c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01236a1:	0f b6 d0             	movzbl %al,%edx
f01236a4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01236aa:	01 d0                	add    %edx,%eax
f01236ac:	48                   	dec    %eax
f01236ad:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01236b3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01236b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01236be:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01236c4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01236ca:	29 d0                	sub    %edx,%eax
f01236cc:	01 c3                	add    %eax,%ebx
f01236ce:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01236d5:	10 00 00 
f01236d8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01236dd:	0f b6 c0             	movzbl %al,%eax
f01236e0:	c1 e0 04             	shl    $0x4,%eax
f01236e3:	89 c2                	mov    %eax,%edx
f01236e5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01236eb:	01 d0                	add    %edx,%eax
f01236ed:	48                   	dec    %eax
f01236ee:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01236f4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01236fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01236ff:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123705:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012370b:	29 d0                	sub    %edx,%eax
f012370d:	01 d8                	add    %ebx,%eax
f012370f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123714:	39 c1                	cmp    %eax,%ecx
f0123716:	74 17                	je     f012372f <test_kheap_phys_addr+0x3ea>
f0123718:	83 ec 04             	sub    $0x4,%esp
f012371b:	68 40 ad 13 f0       	push   $0xf013ad40
f0123720:	68 1a 08 00 00       	push   $0x81a
f0123725:	68 5a ac 13 f0       	push   $0xf013ac5a
f012372a:	e8 cc ca fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012372f:	e8 08 06 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123734:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123737:	74 17                	je     f0123750 <test_kheap_phys_addr+0x40b>
f0123739:	83 ec 04             	sub    $0x4,%esp
f012373c:	68 74 ac 13 f0       	push   $0xf013ac74
f0123741:	68 1b 08 00 00       	push   $0x81b
f0123746:	68 5a ac 13 f0       	push   $0xf013ac5a
f012374b:	e8 ab ca fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123750:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123753:	e8 71 91 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123758:	29 c3                	sub    %eax,%ebx
f012375a:	89 d8                	mov    %ebx,%eax
f012375c:	83 f8 01             	cmp    $0x1,%eax
f012375f:	74 17                	je     f0123778 <test_kheap_phys_addr+0x433>
f0123761:	83 ec 04             	sub    $0x4,%esp
f0123764:	68 dc ac 13 f0       	push   $0xf013acdc
f0123769:	68 1c 08 00 00       	push   $0x81c
f012376e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123773:	e8 83 ca fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123778:	e8 4c 91 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012377d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123780:	e8 b7 05 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123785:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0123788:	83 ec 0c             	sub    $0xc,%esp
f012378b:	68 00 08 00 00       	push   $0x800
f0123790:	e8 69 40 fe ff       	call   f01077fe <kmalloc>
f0123795:	83 c4 10             	add    $0x10,%esp
f0123798:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012379e:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01237a4:	89 c1                	mov    %eax,%ecx
f01237a6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01237ad:	10 00 00 
f01237b0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01237b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01237bb:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01237c1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01237c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01237cc:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01237d2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01237d8:	29 d0                	sub    %edx,%eax
f01237da:	89 c3                	mov    %eax,%ebx
f01237dc:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01237e3:	10 00 00 
f01237e6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01237eb:	0f b6 d0             	movzbl %al,%edx
f01237ee:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01237f4:	01 d0                	add    %edx,%eax
f01237f6:	48                   	dec    %eax
f01237f7:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01237fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123803:	ba 00 00 00 00       	mov    $0x0,%edx
f0123808:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012380e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123814:	29 d0                	sub    %edx,%eax
f0123816:	01 c3                	add    %eax,%ebx
f0123818:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012381f:	10 00 00 
f0123822:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123827:	0f b6 c0             	movzbl %al,%eax
f012382a:	c1 e0 04             	shl    $0x4,%eax
f012382d:	89 c2                	mov    %eax,%edx
f012382f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123835:	01 d0                	add    %edx,%eax
f0123837:	48                   	dec    %eax
f0123838:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012383e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123844:	ba 00 00 00 00       	mov    $0x0,%edx
f0123849:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012384f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123855:	29 d0                	sub    %edx,%eax
f0123857:	01 d8                	add    %ebx,%eax
f0123859:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012385e:	39 c1                	cmp    %eax,%ecx
f0123860:	74 17                	je     f0123879 <test_kheap_phys_addr+0x534>
f0123862:	83 ec 04             	sub    $0x4,%esp
f0123865:	68 40 ad 13 f0       	push   $0xf013ad40
f012386a:	68 22 08 00 00       	push   $0x822
f012386f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123874:	e8 82 c9 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123879:	e8 be 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012387e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123881:	74 17                	je     f012389a <test_kheap_phys_addr+0x555>
f0123883:	83 ec 04             	sub    $0x4,%esp
f0123886:	68 74 ac 13 f0       	push   $0xf013ac74
f012388b:	68 23 08 00 00       	push   $0x823
f0123890:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123895:	e8 61 c9 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012389a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012389d:	e8 27 90 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01238a2:	29 c3                	sub    %eax,%ebx
f01238a4:	89 d8                	mov    %ebx,%eax
f01238a6:	83 f8 01             	cmp    $0x1,%eax
f01238a9:	74 17                	je     f01238c2 <test_kheap_phys_addr+0x57d>
f01238ab:	83 ec 04             	sub    $0x4,%esp
f01238ae:	68 dc ac 13 f0       	push   $0xf013acdc
f01238b3:	68 24 08 00 00       	push   $0x824
f01238b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01238bd:	e8 39 c9 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01238c2:	e8 02 90 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01238c7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238ca:	e8 6d 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01238cf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01238d2:	83 ec 0c             	sub    $0xc,%esp
f01238d5:	68 00 1c 00 00       	push   $0x1c00
f01238da:	e8 1f 3f fe ff       	call   f01077fe <kmalloc>
f01238df:	83 c4 10             	add    $0x10,%esp
f01238e2:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01238e8:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01238ee:	89 c1                	mov    %eax,%ecx
f01238f0:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01238f7:	10 00 00 
f01238fa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123900:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123905:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012390b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123911:	ba 00 00 00 00       	mov    $0x0,%edx
f0123916:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012391c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123922:	29 d0                	sub    %edx,%eax
f0123924:	89 c3                	mov    %eax,%ebx
f0123926:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012392d:	10 00 00 
f0123930:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123935:	0f b6 d0             	movzbl %al,%edx
f0123938:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012393e:	01 d0                	add    %edx,%eax
f0123940:	48                   	dec    %eax
f0123941:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123947:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012394d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123952:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123958:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012395e:	29 d0                	sub    %edx,%eax
f0123960:	01 c3                	add    %eax,%ebx
f0123962:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123969:	10 00 00 
f012396c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123971:	0f b6 c0             	movzbl %al,%eax
f0123974:	c1 e0 04             	shl    $0x4,%eax
f0123977:	89 c2                	mov    %eax,%edx
f0123979:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012397f:	01 d0                	add    %edx,%eax
f0123981:	48                   	dec    %eax
f0123982:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123988:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012398e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123993:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123999:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012399f:	29 d0                	sub    %edx,%eax
f01239a1:	01 d8                	add    %ebx,%eax
f01239a3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01239a8:	39 c1                	cmp    %eax,%ecx
f01239aa:	74 17                	je     f01239c3 <test_kheap_phys_addr+0x67e>
f01239ac:	83 ec 04             	sub    $0x4,%esp
f01239af:	68 40 ad 13 f0       	push   $0xf013ad40
f01239b4:	68 2a 08 00 00       	push   $0x82a
f01239b9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01239be:	e8 38 c8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239c3:	e8 74 03 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01239c8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01239cb:	74 17                	je     f01239e4 <test_kheap_phys_addr+0x69f>
f01239cd:	83 ec 04             	sub    $0x4,%esp
f01239d0:	68 74 ac 13 f0       	push   $0xf013ac74
f01239d5:	68 2b 08 00 00       	push   $0x82b
f01239da:	68 5a ac 13 f0       	push   $0xf013ac5a
f01239df:	e8 17 c8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01239e4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01239e7:	e8 dd 8e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01239ec:	29 c3                	sub    %eax,%ebx
f01239ee:	89 d8                	mov    %ebx,%eax
f01239f0:	83 f8 02             	cmp    $0x2,%eax
f01239f3:	74 17                	je     f0123a0c <test_kheap_phys_addr+0x6c7>
f01239f5:	83 ec 04             	sub    $0x4,%esp
f01239f8:	68 dc ac 13 f0       	push   $0xf013acdc
f01239fd:	68 2c 08 00 00       	push   $0x82c
f0123a02:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123a07:	e8 ef c7 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a0c:	e8 b8 8e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123a11:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a14:	e8 23 03 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123a19:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123a1c:	83 ec 0c             	sub    $0xc,%esp
f0123a1f:	68 00 fc 2f 00       	push   $0x2ffc00
f0123a24:	e8 d5 3d fe ff       	call   f01077fe <kmalloc>
f0123a29:	83 c4 10             	add    $0x10,%esp
f0123a2c:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a32:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123a38:	89 c1                	mov    %eax,%ecx
f0123a3a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123a41:	10 00 00 
f0123a44:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123a4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a4f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123a55:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123a5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a60:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123a66:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123a6c:	29 d0                	sub    %edx,%eax
f0123a6e:	89 c3                	mov    %eax,%ebx
f0123a70:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123a77:	10 00 00 
f0123a7a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123a7f:	0f b6 d0             	movzbl %al,%edx
f0123a82:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123a88:	01 d0                	add    %edx,%eax
f0123a8a:	48                   	dec    %eax
f0123a8b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123a91:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123a97:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a9c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123aa2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123aa8:	29 d0                	sub    %edx,%eax
f0123aaa:	01 c3                	add    %eax,%ebx
f0123aac:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123ab3:	10 00 00 
f0123ab6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123abb:	0f b6 c0             	movzbl %al,%eax
f0123abe:	c1 e0 04             	shl    $0x4,%eax
f0123ac1:	89 c2                	mov    %eax,%edx
f0123ac3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123ac9:	01 d0                	add    %edx,%eax
f0123acb:	48                   	dec    %eax
f0123acc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123ad2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123ad8:	ba 00 00 00 00       	mov    $0x0,%edx
f0123add:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123ae3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123ae9:	29 d0                	sub    %edx,%eax
f0123aeb:	01 d8                	add    %ebx,%eax
f0123aed:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123af2:	39 c1                	cmp    %eax,%ecx
f0123af4:	74 17                	je     f0123b0d <test_kheap_phys_addr+0x7c8>
f0123af6:	83 ec 04             	sub    $0x4,%esp
f0123af9:	68 40 ad 13 f0       	push   $0xf013ad40
f0123afe:	68 32 08 00 00       	push   $0x832
f0123b03:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123b08:	e8 ee c6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b0d:	e8 2a 02 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123b12:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123b15:	74 17                	je     f0123b2e <test_kheap_phys_addr+0x7e9>
f0123b17:	83 ec 04             	sub    $0x4,%esp
f0123b1a:	68 74 ac 13 f0       	push   $0xf013ac74
f0123b1f:	68 33 08 00 00       	push   $0x833
f0123b24:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123b29:	e8 cd c6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b2e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b31:	e8 93 8d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123b36:	29 c3                	sub    %eax,%ebx
f0123b38:	89 d8                	mov    %ebx,%eax
f0123b3a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123b3f:	74 17                	je     f0123b58 <test_kheap_phys_addr+0x813>
f0123b41:	83 ec 04             	sub    $0x4,%esp
f0123b44:	68 dc ac 13 f0       	push   $0xf013acdc
f0123b49:	68 34 08 00 00       	push   $0x834
f0123b4e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123b53:	e8 a3 c6 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b58:	e8 6c 8d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123b5d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b60:	e8 d7 01 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123b65:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123b68:	83 ec 0c             	sub    $0xc,%esp
f0123b6b:	68 00 fc 5f 00       	push   $0x5ffc00
f0123b70:	e8 89 3c fe ff       	call   f01077fe <kmalloc>
f0123b75:	83 c4 10             	add    $0x10,%esp
f0123b78:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123b7e:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123b84:	89 c1                	mov    %eax,%ecx
f0123b86:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123b8d:	10 00 00 
f0123b90:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123b96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b9b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123ba1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123ba7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bac:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123bb2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123bb8:	29 d0                	sub    %edx,%eax
f0123bba:	89 c3                	mov    %eax,%ebx
f0123bbc:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123bc3:	10 00 00 
f0123bc6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123bcb:	0f b6 d0             	movzbl %al,%edx
f0123bce:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123bd4:	01 d0                	add    %edx,%eax
f0123bd6:	48                   	dec    %eax
f0123bd7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123bdd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123be3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123be8:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123bee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123bf4:	29 d0                	sub    %edx,%eax
f0123bf6:	01 c3                	add    %eax,%ebx
f0123bf8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123bff:	10 00 00 
f0123c02:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123c07:	0f b6 c0             	movzbl %al,%eax
f0123c0a:	c1 e0 04             	shl    $0x4,%eax
f0123c0d:	89 c2                	mov    %eax,%edx
f0123c0f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123c15:	01 d0                	add    %edx,%eax
f0123c17:	48                   	dec    %eax
f0123c18:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123c1e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c29:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123c2f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123c35:	29 d0                	sub    %edx,%eax
f0123c37:	01 d8                	add    %ebx,%eax
f0123c39:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123c3e:	39 c1                	cmp    %eax,%ecx
f0123c40:	74 17                	je     f0123c59 <test_kheap_phys_addr+0x914>
f0123c42:	83 ec 04             	sub    $0x4,%esp
f0123c45:	68 40 ad 13 f0       	push   $0xf013ad40
f0123c4a:	68 3a 08 00 00       	push   $0x83a
f0123c4f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123c54:	e8 a2 c5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c59:	e8 de 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123c5e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c61:	74 17                	je     f0123c7a <test_kheap_phys_addr+0x935>
f0123c63:	83 ec 04             	sub    $0x4,%esp
f0123c66:	68 74 ac 13 f0       	push   $0xf013ac74
f0123c6b:	68 3b 08 00 00       	push   $0x83b
f0123c70:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123c75:	e8 81 c5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123c7a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123c7d:	e8 47 8c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123c82:	29 c3                	sub    %eax,%ebx
f0123c84:	89 d8                	mov    %ebx,%eax
f0123c86:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123c8b:	74 17                	je     f0123ca4 <test_kheap_phys_addr+0x95f>
f0123c8d:	83 ec 04             	sub    $0x4,%esp
f0123c90:	68 dc ac 13 f0       	push   $0xf013acdc
f0123c95:	68 3c 08 00 00       	push   $0x83c
f0123c9a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123c9f:	e8 57 c5 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123ca4:	e8 20 8c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123ca9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cac:	e8 8b 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123cb1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123cb4:	83 ec 0c             	sub    $0xc,%esp
f0123cb7:	68 00 38 00 00       	push   $0x3800
f0123cbc:	e8 3d 3b fe ff       	call   f01077fe <kmalloc>
f0123cc1:	83 c4 10             	add    $0x10,%esp
f0123cc4:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123cca:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123cd0:	89 c1                	mov    %eax,%ecx
f0123cd2:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123cd9:	10 00 00 
f0123cdc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123ce2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ce7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123ced:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123cf3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cf8:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123cfe:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123d04:	29 d0                	sub    %edx,%eax
f0123d06:	89 c3                	mov    %eax,%ebx
f0123d08:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123d0f:	10 00 00 
f0123d12:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123d17:	0f b6 d0             	movzbl %al,%edx
f0123d1a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123d20:	01 d0                	add    %edx,%eax
f0123d22:	48                   	dec    %eax
f0123d23:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123d29:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123d2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d34:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0123d3a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123d40:	29 d0                	sub    %edx,%eax
f0123d42:	01 c3                	add    %eax,%ebx
f0123d44:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123d4b:	10 00 00 
f0123d4e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123d53:	0f b6 c0             	movzbl %al,%eax
f0123d56:	c1 e0 04             	shl    $0x4,%eax
f0123d59:	89 c2                	mov    %eax,%edx
f0123d5b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123d61:	01 d0                	add    %edx,%eax
f0123d63:	48                   	dec    %eax
f0123d64:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123d6a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123d70:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d75:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123d7b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123d81:	29 d0                	sub    %edx,%eax
f0123d83:	01 d8                	add    %ebx,%eax
f0123d85:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123d8a:	39 c1                	cmp    %eax,%ecx
f0123d8c:	74 17                	je     f0123da5 <test_kheap_phys_addr+0xa60>
f0123d8e:	83 ec 04             	sub    $0x4,%esp
f0123d91:	68 40 ad 13 f0       	push   $0xf013ad40
f0123d96:	68 42 08 00 00       	push   $0x842
f0123d9b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123da0:	e8 56 c4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123da5:	e8 92 ff fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123daa:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123dad:	74 17                	je     f0123dc6 <test_kheap_phys_addr+0xa81>
f0123daf:	83 ec 04             	sub    $0x4,%esp
f0123db2:	68 74 ac 13 f0       	push   $0xf013ac74
f0123db7:	68 43 08 00 00       	push   $0x843
f0123dbc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123dc1:	e8 35 c4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123dc6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123dc9:	e8 fb 8a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0123dce:	29 c3                	sub    %eax,%ebx
f0123dd0:	89 d8                	mov    %ebx,%eax
f0123dd2:	83 f8 04             	cmp    $0x4,%eax
f0123dd5:	74 17                	je     f0123dee <test_kheap_phys_addr+0xaa9>
f0123dd7:	83 ec 04             	sub    $0x4,%esp
f0123dda:	68 dc ac 13 f0       	push   $0xf013acdc
f0123ddf:	68 44 08 00 00       	push   $0x844
f0123de4:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123de9:	e8 0d c4 fd ff       	call   f01001fb <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123dee:	89 e0                	mov    %esp,%eax
f0123df0:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123df2:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123df9:	10 00 00 
f0123dfc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123e02:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123e07:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123e0d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123e13:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e18:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123e1e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123e24:	29 d0                	sub    %edx,%eax
f0123e26:	89 c1                	mov    %eax,%ecx
f0123e28:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123e2f:	10 00 00 
f0123e32:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123e37:	0f b6 d0             	movzbl %al,%edx
f0123e3a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123e40:	01 d0                	add    %edx,%eax
f0123e42:	48                   	dec    %eax
f0123e43:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123e49:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123e4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e54:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123e5a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123e60:	29 d0                	sub    %edx,%eax
f0123e62:	01 c1                	add    %eax,%ecx
f0123e64:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123e6b:	10 00 00 
f0123e6e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123e73:	0f b6 c0             	movzbl %al,%eax
f0123e76:	c1 e0 04             	shl    $0x4,%eax
f0123e79:	89 c2                	mov    %eax,%edx
f0123e7b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123e81:	01 d0                	add    %edx,%eax
f0123e83:	48                   	dec    %eax
f0123e84:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123e8a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123e90:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e95:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123e9b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123ea1:	29 d0                	sub    %edx,%eax
f0123ea3:	01 c8                	add    %ecx,%eax
f0123ea5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123eaa:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123eb0:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123eb7:	10 00 00 
f0123eba:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123ec0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ec5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123ecb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123ed1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ed6:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123edc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123ee2:	29 d0                	sub    %edx,%eax
f0123ee4:	89 c1                	mov    %eax,%ecx
f0123ee6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123eed:	10 00 00 
f0123ef0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123ef5:	0f b6 d0             	movzbl %al,%edx
f0123ef8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123efe:	01 d0                	add    %edx,%eax
f0123f00:	48                   	dec    %eax
f0123f01:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123f07:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123f0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f12:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123f18:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123f1e:	29 d0                	sub    %edx,%eax
f0123f20:	01 c1                	add    %eax,%ecx
f0123f22:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0123f29:	10 00 00 
f0123f2c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123f31:	0f b6 c0             	movzbl %al,%eax
f0123f34:	c1 e0 04             	shl    $0x4,%eax
f0123f37:	89 c2                	mov    %eax,%edx
f0123f39:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123f3f:	01 d0                	add    %edx,%eax
f0123f41:	48                   	dec    %eax
f0123f42:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0123f48:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f53:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0123f59:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123f5f:	29 d0                	sub    %edx,%eax
f0123f61:	01 c8                	add    %ecx,%eax
f0123f63:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123f68:	c1 e8 0c             	shr    $0xc,%eax
f0123f6b:	89 c2                	mov    %eax,%edx
f0123f6d:	4a                   	dec    %edx
f0123f6e:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0123f74:	c1 e0 02             	shl    $0x2,%eax
f0123f77:	8d 50 03             	lea    0x3(%eax),%edx
f0123f7a:	b8 10 00 00 00       	mov    $0x10,%eax
f0123f7f:	48                   	dec    %eax
f0123f80:	01 d0                	add    %edx,%eax
f0123f82:	bf 10 00 00 00       	mov    $0x10,%edi
f0123f87:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f8c:	f7 f7                	div    %edi
f0123f8e:	6b c0 10             	imul   $0x10,%eax,%eax
f0123f91:	29 c4                	sub    %eax,%esp
f0123f93:	89 e0                	mov    %esp,%eax
f0123f95:	83 c0 03             	add    $0x3,%eax
f0123f98:	c1 e8 02             	shr    $0x2,%eax
f0123f9b:	c1 e0 02             	shl    $0x2,%eax
f0123f9e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123fa4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123fab:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0123fb2:	10 00 00 
f0123fb5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123fbb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123fc0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123fc6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123fcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fd1:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123fd7:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123fdd:	29 d0                	sub    %edx,%eax
f0123fdf:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123fe4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123fe7:	eb 29                	jmp    f0124012 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123fe9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123fec:	8d 43 01             	lea    0x1(%ebx),%eax
f0123fef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123ff2:	83 ec 0c             	sub    $0xc,%esp
f0123ff5:	ff 75 e0             	pushl  -0x20(%ebp)
f0123ff8:	e8 16 3a fe ff       	call   f0107a13 <kheap_physical_address>
f0123ffd:	83 c4 10             	add    $0x10,%esp
f0124000:	89 c2                	mov    %eax,%edx
f0124002:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124008:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012400b:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124012:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124015:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f012401b:	72 cc                	jb     f0123fe9 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012401d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124020:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124026:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012402d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124034:	10 00 00 
f0124037:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012403d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124042:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124048:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012404e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124053:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124059:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012405f:	29 d0                	sub    %edx,%eax
f0124061:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124066:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124069:	e9 ab 00 00 00       	jmp    f0124119 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012406e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124073:	83 ec 04             	sub    $0x4,%esp
f0124076:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f012407c:	52                   	push   %edx
f012407d:	ff 75 e0             	pushl  -0x20(%ebp)
f0124080:	50                   	push   %eax
f0124081:	e8 54 29 fe ff       	call   f01069da <get_page_table>
f0124086:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124089:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f012408f:	85 c0                	test   %eax,%eax
f0124091:	75 17                	jne    f01240aa <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124093:	83 ec 04             	sub    $0x4,%esp
f0124096:	68 fc b5 13 f0       	push   $0xf013b5fc
f012409b:	68 59 08 00 00       	push   $0x859
f01240a0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01240a5:	e8 51 c1 fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01240aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01240ad:	c1 e8 0c             	shr    $0xc,%eax
f01240b0:	25 ff 03 00 00       	and    $0x3ff,%eax
f01240b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01240b8:	eb 4b                	jmp    f0124105 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01240ba:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f01240c0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01240c3:	c1 e2 02             	shl    $0x2,%edx
f01240c6:	01 d0                	add    %edx,%eax
f01240c8:	8b 00                	mov    (%eax),%eax
f01240ca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01240cf:	89 c1                	mov    %eax,%ecx
f01240d1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01240d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01240da:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01240dd:	39 c1                	cmp    %eax,%ecx
f01240df:	74 17                	je     f01240f8 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01240e1:	83 ec 04             	sub    $0x4,%esp
f01240e4:	68 55 b6 13 f0       	push   $0xf013b655
f01240e9:	68 60 08 00 00       	push   $0x860
f01240ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f01240f3:	e8 03 c1 fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f01240f8:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01240ff:	ff 45 dc             	incl   -0x24(%ebp)
f0124102:	ff 45 e4             	incl   -0x1c(%ebp)
f0124105:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124108:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f012410e:	7d 09                	jge    f0124119 <test_kheap_phys_addr+0xdd4>
f0124110:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124117:	7e a1                	jle    f01240ba <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124119:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012411c:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124122:	0f 82 46 ff ff ff    	jb     f012406e <test_kheap_phys_addr+0xd29>
f0124128:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f012412a:	83 ec 0c             	sub    $0xc,%esp
f012412d:	68 74 b6 13 f0       	push   $0xf013b674
f0124132:	e8 4b cb fd ff       	call   f0100c82 <cprintf>
f0124137:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012413a:	e8 8a 87 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012413f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124145:	e8 f2 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012414a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124150:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124156:	83 ec 0c             	sub    $0xc,%esp
f0124159:	50                   	push   %eax
f012415a:	e8 61 37 fe ff       	call   f01078c0 <kfree>
f012415f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124162:	e8 d5 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124167:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f012416d:	74 17                	je     f0124186 <test_kheap_phys_addr+0xe41>
f012416f:	83 ec 04             	sub    $0x4,%esp
f0124172:	68 74 ac 13 f0       	push   $0xf013ac74
f0124177:	68 6e 08 00 00       	push   $0x86e
f012417c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124181:	e8 75 c0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124186:	e8 3e 87 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012418b:	89 c2                	mov    %eax,%edx
f012418d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124193:	29 c2                	sub    %eax,%edx
f0124195:	89 d0                	mov    %edx,%eax
f0124197:	3d 00 02 00 00       	cmp    $0x200,%eax
f012419c:	74 17                	je     f01241b5 <test_kheap_phys_addr+0xe70>
f012419e:	83 ec 04             	sub    $0x4,%esp
f01241a1:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01241a6:	68 6f 08 00 00       	push   $0x86f
f01241ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f01241b0:	e8 46 c0 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01241b5:	e8 0f 87 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01241ba:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241c0:	e8 77 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01241c5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f01241cb:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01241d1:	83 ec 0c             	sub    $0xc,%esp
f01241d4:	50                   	push   %eax
f01241d5:	e8 e6 36 fe ff       	call   f01078c0 <kfree>
f01241da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241dd:	e8 5a fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01241e2:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01241e8:	74 17                	je     f0124201 <test_kheap_phys_addr+0xebc>
f01241ea:	83 ec 04             	sub    $0x4,%esp
f01241ed:	68 74 ac 13 f0       	push   $0xf013ac74
f01241f2:	68 75 08 00 00       	push   $0x875
f01241f7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01241fc:	e8 fa bf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124201:	e8 c3 86 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124206:	89 c2                	mov    %eax,%edx
f0124208:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012420e:	29 c2                	sub    %eax,%edx
f0124210:	89 d0                	mov    %edx,%eax
f0124212:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124217:	74 17                	je     f0124230 <test_kheap_phys_addr+0xeeb>
f0124219:	83 ec 04             	sub    $0x4,%esp
f012421c:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0124221:	68 76 08 00 00       	push   $0x876
f0124226:	68 5a ac 13 f0       	push   $0xf013ac5a
f012422b:	e8 cb bf fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124230:	e8 94 86 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124235:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012423b:	e8 fc fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124240:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124246:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012424c:	83 ec 0c             	sub    $0xc,%esp
f012424f:	50                   	push   %eax
f0124250:	e8 6b 36 fe ff       	call   f01078c0 <kfree>
f0124255:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124258:	e8 df fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012425d:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124263:	74 17                	je     f012427c <test_kheap_phys_addr+0xf37>
f0124265:	83 ec 04             	sub    $0x4,%esp
f0124268:	68 74 ac 13 f0       	push   $0xf013ac74
f012426d:	68 7c 08 00 00       	push   $0x87c
f0124272:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124277:	e8 7f bf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012427c:	e8 48 86 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124281:	89 c2                	mov    %eax,%edx
f0124283:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124289:	29 c2                	sub    %eax,%edx
f012428b:	89 d0                	mov    %edx,%eax
f012428d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124292:	74 17                	je     f01242ab <test_kheap_phys_addr+0xf66>
f0124294:	83 ec 04             	sub    $0x4,%esp
f0124297:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012429c:	68 7d 08 00 00       	push   $0x87d
f01242a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01242a6:	e8 50 bf fd ff       	call   f01001fb <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01242ab:	89 e0                	mov    %esp,%eax
f01242ad:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01242af:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01242b6:	10 00 00 
f01242b9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01242bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242c4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01242ca:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01242d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01242d5:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01242db:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01242e1:	29 d0                	sub    %edx,%eax
f01242e3:	89 c1                	mov    %eax,%ecx
f01242e5:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01242ec:	10 00 00 
f01242ef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01242f4:	0f b6 d0             	movzbl %al,%edx
f01242f7:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01242fd:	01 d0                	add    %edx,%eax
f01242ff:	48                   	dec    %eax
f0124300:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124306:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012430c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124311:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124317:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012431d:	29 d0                	sub    %edx,%eax
f012431f:	01 c1                	add    %eax,%ecx
f0124321:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124328:	10 00 00 
f012432b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124330:	0f b6 c0             	movzbl %al,%eax
f0124333:	c1 e0 04             	shl    $0x4,%eax
f0124336:	89 c2                	mov    %eax,%edx
f0124338:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012433e:	01 d0                	add    %edx,%eax
f0124340:	48                   	dec    %eax
f0124341:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124347:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012434d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124352:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124358:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012435e:	29 d0                	sub    %edx,%eax
f0124360:	01 c8                	add    %ecx,%eax
f0124362:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124367:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012436d:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124374:	10 00 00 
f0124377:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012437d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124382:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124388:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012438e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124393:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124399:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012439f:	29 d0                	sub    %edx,%eax
f01243a1:	89 c1                	mov    %eax,%ecx
f01243a3:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01243aa:	10 00 00 
f01243ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01243b2:	0f b6 d0             	movzbl %al,%edx
f01243b5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01243bb:	01 d0                	add    %edx,%eax
f01243bd:	48                   	dec    %eax
f01243be:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01243c4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01243ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01243cf:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01243d5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01243db:	29 d0                	sub    %edx,%eax
f01243dd:	01 c1                	add    %eax,%ecx
f01243df:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01243e6:	10 00 00 
f01243e9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01243ee:	0f b6 c0             	movzbl %al,%eax
f01243f1:	c1 e0 04             	shl    $0x4,%eax
f01243f4:	89 c2                	mov    %eax,%edx
f01243f6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01243fc:	01 d0                	add    %edx,%eax
f01243fe:	48                   	dec    %eax
f01243ff:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124405:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012440b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124410:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124416:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012441c:	29 d0                	sub    %edx,%eax
f012441e:	01 c8                	add    %ecx,%eax
f0124420:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124425:	c1 e8 0c             	shr    $0xc,%eax
f0124428:	89 c2                	mov    %eax,%edx
f012442a:	4a                   	dec    %edx
f012442b:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124431:	c1 e0 02             	shl    $0x2,%eax
f0124434:	8d 50 03             	lea    0x3(%eax),%edx
f0124437:	b8 10 00 00 00       	mov    $0x10,%eax
f012443c:	48                   	dec    %eax
f012443d:	01 d0                	add    %edx,%eax
f012443f:	bf 10 00 00 00       	mov    $0x10,%edi
f0124444:	ba 00 00 00 00       	mov    $0x0,%edx
f0124449:	f7 f7                	div    %edi
f012444b:	6b c0 10             	imul   $0x10,%eax,%eax
f012444e:	29 c4                	sub    %eax,%esp
f0124450:	89 e0                	mov    %esp,%eax
f0124452:	83 c0 03             	add    $0x3,%eax
f0124455:	c1 e8 02             	shr    $0x2,%eax
f0124458:	c1 e0 02             	shl    $0x2,%eax
f012445b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124461:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124468:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012446f:	10 00 00 
f0124472:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124478:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012447d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124483:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124489:	ba 00 00 00 00       	mov    $0x0,%edx
f012448e:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124494:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012449a:	29 d0                	sub    %edx,%eax
f012449c:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01244a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01244a4:	eb 29                	jmp    f01244cf <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f01244a6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01244a9:	8d 43 01             	lea    0x1(%ebx),%eax
f01244ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01244af:	83 ec 0c             	sub    $0xc,%esp
f01244b2:	ff 75 d8             	pushl  -0x28(%ebp)
f01244b5:	e8 59 35 fe ff       	call   f0107a13 <kheap_physical_address>
f01244ba:	83 c4 10             	add    $0x10,%esp
f01244bd:	89 c2                	mov    %eax,%edx
f01244bf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01244c5:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01244c8:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01244cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01244d2:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01244d8:	72 cc                	jb     f01244a6 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01244da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01244dd:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01244e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01244ea:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01244f1:	10 00 00 
f01244f4:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01244fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244ff:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124505:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012450b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124510:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124516:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012451c:	29 d0                	sub    %edx,%eax
f012451e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124523:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124526:	e9 ab 00 00 00       	jmp    f01245d6 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012452b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124530:	83 ec 04             	sub    $0x4,%esp
f0124533:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124539:	52                   	push   %edx
f012453a:	ff 75 d8             	pushl  -0x28(%ebp)
f012453d:	50                   	push   %eax
f012453e:	e8 97 24 fe ff       	call   f01069da <get_page_table>
f0124543:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124546:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f012454c:	85 c0                	test   %eax,%eax
f012454e:	75 17                	jne    f0124567 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124550:	83 ec 04             	sub    $0x4,%esp
f0124553:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124558:	68 93 08 00 00       	push   $0x893
f012455d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124562:	e8 94 bc fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124567:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012456a:	c1 e8 0c             	shr    $0xc,%eax
f012456d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124572:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124575:	eb 4b                	jmp    f01245c2 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124577:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f012457d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124580:	c1 e2 02             	shl    $0x2,%edx
f0124583:	01 d0                	add    %edx,%eax
f0124585:	8b 00                	mov    (%eax),%eax
f0124587:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012458c:	89 c1                	mov    %eax,%ecx
f012458e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124594:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124597:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012459a:	39 c1                	cmp    %eax,%ecx
f012459c:	74 17                	je     f01245b5 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012459e:	83 ec 04             	sub    $0x4,%esp
f01245a1:	68 55 b6 13 f0       	push   $0xf013b655
f01245a6:	68 9a 08 00 00       	push   $0x89a
f01245ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f01245b0:	e8 46 bc fd ff       	call   f01001fb <_panic>
				}
				va += PAGE_SIZE;
f01245b5:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01245bc:	ff 45 d4             	incl   -0x2c(%ebp)
f01245bf:	ff 45 e4             	incl   -0x1c(%ebp)
f01245c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01245c5:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f01245cb:	7d 09                	jge    f01245d6 <test_kheap_phys_addr+0x1291>
f01245cd:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01245d4:	7e a1                	jle    f0124577 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01245d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01245d9:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01245df:	0f 82 46 ff ff ff    	jb     f012452b <test_kheap_phys_addr+0x11e6>
f01245e5:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01245e7:	83 ec 0c             	sub    $0xc,%esp
f01245ea:	68 e5 ad 13 f0       	push   $0xf013ade5
f01245ef:	e8 8e c6 fd ff       	call   f0100c82 <cprintf>
f01245f4:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01245f7:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01245fe:	10 00 00 
f0124601:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124607:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012460c:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124612:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124618:	ba 00 00 00 00       	mov    $0x0,%edx
f012461d:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124623:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124629:	29 d0                	sub    %edx,%eax
f012462b:	89 c1                	mov    %eax,%ecx
f012462d:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124634:	10 00 00 
f0124637:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012463c:	0f b6 d0             	movzbl %al,%edx
f012463f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124645:	01 d0                	add    %edx,%eax
f0124647:	48                   	dec    %eax
f0124648:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012464e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124654:	ba 00 00 00 00       	mov    $0x0,%edx
f0124659:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012465f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124665:	29 d0                	sub    %edx,%eax
f0124667:	01 c1                	add    %eax,%ecx
f0124669:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124670:	10 00 00 
f0124673:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124678:	0f b6 c0             	movzbl %al,%eax
f012467b:	c1 e0 04             	shl    $0x4,%eax
f012467e:	89 c2                	mov    %eax,%edx
f0124680:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124686:	01 d0                	add    %edx,%eax
f0124688:	48                   	dec    %eax
f0124689:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f012468f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124695:	ba 00 00 00 00       	mov    $0x0,%edx
f012469a:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f01246a0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01246a6:	29 d0                	sub    %edx,%eax
f01246a8:	01 c8                	add    %ecx,%eax
f01246aa:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01246af:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01246b5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01246bc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01246c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01246c5:	eb 0a                	jmp    f01246d1 <test_kheap_phys_addr+0x138c>
		{
			i++;
f01246c7:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01246ca:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01246d1:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01246d8:	76 ed                	jbe    f01246c7 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01246da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01246dd:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01246e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01246ea:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01246f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01246f3:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01246fa:	e9 cc 00 00 00       	jmp    f01247cb <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01246ff:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124702:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124707:	83 ec 04             	sub    $0x4,%esp
f012470a:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124710:	51                   	push   %ecx
f0124711:	52                   	push   %edx
f0124712:	50                   	push   %eax
f0124713:	e8 c2 22 fe ff       	call   f01069da <get_page_table>
f0124718:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012471b:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124721:	85 c0                	test   %eax,%eax
f0124723:	75 17                	jne    f012473c <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124725:	83 ec 04             	sub    $0x4,%esp
f0124728:	68 fc b5 13 f0       	push   $0xf013b5fc
f012472d:	68 b6 08 00 00       	push   $0x8b6
f0124732:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124737:	e8 bf ba fd ff       	call   f01001fb <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012473c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124743:	eb 67                	jmp    f01247ac <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124745:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124748:	c1 e0 0c             	shl    $0xc,%eax
f012474b:	89 c2                	mov    %eax,%edx
f012474d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124753:	01 d0                	add    %edx,%eax
f0124755:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f012475b:	83 ec 0c             	sub    $0xc,%esp
f012475e:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0124764:	e8 aa 32 fe ff       	call   f0107a13 <kheap_physical_address>
f0124769:	83 c4 10             	add    $0x10,%esp
f012476c:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124772:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124778:	8b 55 cc             	mov    -0x34(%ebp),%edx
f012477b:	c1 e2 02             	shl    $0x2,%edx
f012477e:	01 d0                	add    %edx,%eax
f0124780:	8b 00                	mov    (%eax),%eax
f0124782:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124787:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f012478d:	74 17                	je     f01247a6 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012478f:	83 ec 04             	sub    $0x4,%esp
f0124792:	68 55 b6 13 f0       	push   $0xf013b655
f0124797:	68 c0 08 00 00       	push   $0x8c0
f012479c:	68 5a ac 13 f0       	push   $0xf013ac5a
f01247a1:	e8 55 ba fd ff       	call   f01001fb <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01247a6:	ff 45 cc             	incl   -0x34(%ebp)
f01247a9:	ff 45 e4             	incl   -0x1c(%ebp)
f01247ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247af:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01247b5:	7d 09                	jge    f01247c0 <test_kheap_phys_addr+0x147b>
f01247b7:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01247be:	7e 85                	jle    f0124745 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01247c0:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01247c7:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01247cb:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01247cf:	0f 88 2a ff ff ff    	js     f01246ff <test_kheap_phys_addr+0x13ba>
f01247d5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01247d9:	7f 0d                	jg     f01247e8 <test_kheap_phys_addr+0x14a3>
f01247db:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01247e2:	0f 86 17 ff ff ff    	jbe    f01246ff <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01247e8:	83 ec 0c             	sub    $0xc,%esp
f01247eb:	68 3e ae 13 f0       	push   $0xf013ae3e
f01247f0:	e8 8d c4 fd ff       	call   f0100c82 <cprintf>
f01247f5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01247f8:	83 ec 0c             	sub    $0xc,%esp
f01247fb:	68 a8 b6 13 f0       	push   $0xf013b6a8
f0124800:	e8 7d c4 fd ff       	call   f0100c82 <cprintf>
f0124805:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124808:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012480d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124810:	5b                   	pop    %ebx
f0124811:	5e                   	pop    %esi
f0124812:	5f                   	pop    %edi
f0124813:	5d                   	pop    %ebp
f0124814:	c3                   	ret    

f0124815 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124815:	55                   	push   %ebp
f0124816:	89 e5                	mov    %esp,%ebp
f0124818:	57                   	push   %edi
f0124819:	56                   	push   %esi
f012481a:	53                   	push   %ebx
f012481b:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124821:	89 e0                	mov    %esp,%eax
f0124823:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124825:	83 ec 0c             	sub    $0xc,%esp
f0124828:	68 9c ab 13 f0       	push   $0xf013ab9c
f012482d:	e8 50 c4 fd ff       	call   f0100c82 <cprintf>
f0124832:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124835:	83 ec 0c             	sub    $0xc,%esp
f0124838:	68 cc ab 13 f0       	push   $0xf013abcc
f012483d:	e8 40 c4 fd ff       	call   f0100c82 <cprintf>
f0124842:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124845:	83 ec 0c             	sub    $0xc,%esp
f0124848:	68 9c ab 13 f0       	push   $0xf013ab9c
f012484d:	e8 30 c4 fd ff       	call   f0100c82 <cprintf>
f0124852:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124855:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0124859:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f012485d:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0124863:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0124869:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124870:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124877:	e8 4d 80 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012487c:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012487f:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0124885:	b9 14 00 00 00       	mov    $0x14,%ecx
f012488a:	b8 00 00 00 00       	mov    $0x0,%eax
f012488f:	89 d7                	mov    %edx,%edi
f0124891:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124893:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0124899:	b9 14 00 00 00       	mov    $0x14,%ecx
f012489e:	b8 00 00 00 00       	mov    $0x0,%eax
f01248a3:	89 d7                	mov    %edx,%edi
f01248a5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01248a7:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01248ad:	b9 14 00 00 00       	mov    $0x14,%ecx
f01248b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01248b7:	89 d7                	mov    %edx,%edi
f01248b9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01248bb:	e8 09 80 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01248c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01248c3:	e8 74 f4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01248c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01248cb:	83 ec 0c             	sub    $0xc,%esp
f01248ce:	68 00 fc 1f 00       	push   $0x1ffc00
f01248d3:	e8 26 2f fe ff       	call   f01077fe <kmalloc>
f01248d8:	83 c4 10             	add    $0x10,%esp
f01248db:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01248e1:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01248e7:	89 c1                	mov    %eax,%ecx
f01248e9:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01248f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01248f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248f8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01248fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01248fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0124903:	f7 75 b4             	divl   -0x4c(%ebp)
f0124906:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124909:	29 d0                	sub    %edx,%eax
f012490b:	89 c3                	mov    %eax,%ebx
f012490d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124914:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124919:	0f b6 d0             	movzbl %al,%edx
f012491c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012491f:	01 d0                	add    %edx,%eax
f0124921:	48                   	dec    %eax
f0124922:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124925:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124928:	ba 00 00 00 00       	mov    $0x0,%edx
f012492d:	f7 75 ac             	divl   -0x54(%ebp)
f0124930:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124933:	29 d0                	sub    %edx,%eax
f0124935:	01 c3                	add    %eax,%ebx
f0124937:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012493e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124943:	0f b6 c0             	movzbl %al,%eax
f0124946:	c1 e0 04             	shl    $0x4,%eax
f0124949:	89 c2                	mov    %eax,%edx
f012494b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012494e:	01 d0                	add    %edx,%eax
f0124950:	48                   	dec    %eax
f0124951:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124954:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124957:	ba 00 00 00 00       	mov    $0x0,%edx
f012495c:	f7 75 a4             	divl   -0x5c(%ebp)
f012495f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124962:	29 d0                	sub    %edx,%eax
f0124964:	01 d8                	add    %ebx,%eax
f0124966:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012496b:	39 c1                	cmp    %eax,%ecx
f012496d:	74 17                	je     f0124986 <test_kheap_virt_addr+0x171>
f012496f:	83 ec 04             	sub    $0x4,%esp
f0124972:	68 40 ad 13 f0       	push   $0xf013ad40
f0124977:	68 ed 08 00 00       	push   $0x8ed
f012497c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124981:	e8 75 b8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124986:	e8 b1 f3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012498b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012498e:	74 17                	je     f01249a7 <test_kheap_virt_addr+0x192>
f0124990:	83 ec 04             	sub    $0x4,%esp
f0124993:	68 74 ac 13 f0       	push   $0xf013ac74
f0124998:	68 ee 08 00 00       	push   $0x8ee
f012499d:	68 5a ac 13 f0       	push   $0xf013ac5a
f01249a2:	e8 54 b8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01249a7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01249aa:	e8 1a 7f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01249af:	29 c3                	sub    %eax,%ebx
f01249b1:	89 d8                	mov    %ebx,%eax
f01249b3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01249b8:	74 17                	je     f01249d1 <test_kheap_virt_addr+0x1bc>
f01249ba:	83 ec 04             	sub    $0x4,%esp
f01249bd:	68 dc ac 13 f0       	push   $0xf013acdc
f01249c2:	68 ef 08 00 00       	push   $0x8ef
f01249c7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01249cc:	e8 2a b8 fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01249d1:	e8 f3 7e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01249d6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249d9:	e8 5e f3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01249de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01249e1:	83 ec 0c             	sub    $0xc,%esp
f01249e4:	68 00 fc 1f 00       	push   $0x1ffc00
f01249e9:	e8 10 2e fe ff       	call   f01077fe <kmalloc>
f01249ee:	83 c4 10             	add    $0x10,%esp
f01249f1:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01249f7:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01249fd:	89 c1                	mov    %eax,%ecx
f01249ff:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124a06:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124a09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a0e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124a11:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124a14:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a19:	f7 75 9c             	divl   -0x64(%ebp)
f0124a1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124a1f:	29 d0                	sub    %edx,%eax
f0124a21:	89 c3                	mov    %eax,%ebx
f0124a23:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124a2a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124a2f:	0f b6 d0             	movzbl %al,%edx
f0124a32:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124a35:	01 d0                	add    %edx,%eax
f0124a37:	48                   	dec    %eax
f0124a38:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124a3b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124a3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a43:	f7 75 94             	divl   -0x6c(%ebp)
f0124a46:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124a49:	29 d0                	sub    %edx,%eax
f0124a4b:	01 c3                	add    %eax,%ebx
f0124a4d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124a54:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124a59:	0f b6 c0             	movzbl %al,%eax
f0124a5c:	c1 e0 04             	shl    $0x4,%eax
f0124a5f:	89 c2                	mov    %eax,%edx
f0124a61:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124a64:	01 d0                	add    %edx,%eax
f0124a66:	48                   	dec    %eax
f0124a67:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124a6a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124a6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a72:	f7 75 8c             	divl   -0x74(%ebp)
f0124a75:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124a78:	29 d0                	sub    %edx,%eax
f0124a7a:	01 d8                	add    %ebx,%eax
f0124a7c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124a81:	39 c1                	cmp    %eax,%ecx
f0124a83:	74 17                	je     f0124a9c <test_kheap_virt_addr+0x287>
f0124a85:	83 ec 04             	sub    $0x4,%esp
f0124a88:	68 40 ad 13 f0       	push   $0xf013ad40
f0124a8d:	68 f5 08 00 00       	push   $0x8f5
f0124a92:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124a97:	e8 5f b7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a9c:	e8 9b f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124aa1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124aa4:	74 17                	je     f0124abd <test_kheap_virt_addr+0x2a8>
f0124aa6:	83 ec 04             	sub    $0x4,%esp
f0124aa9:	68 74 ac 13 f0       	push   $0xf013ac74
f0124aae:	68 f6 08 00 00       	push   $0x8f6
f0124ab3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124ab8:	e8 3e b7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124abd:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124ac0:	e8 04 7e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124ac5:	29 c3                	sub    %eax,%ebx
f0124ac7:	89 d8                	mov    %ebx,%eax
f0124ac9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124ace:	74 17                	je     f0124ae7 <test_kheap_virt_addr+0x2d2>
f0124ad0:	83 ec 04             	sub    $0x4,%esp
f0124ad3:	68 dc ac 13 f0       	push   $0xf013acdc
f0124ad8:	68 f7 08 00 00       	push   $0x8f7
f0124add:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124ae2:	e8 14 b7 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124ae7:	e8 dd 7d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124aec:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124aef:	e8 48 f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124af4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124af7:	83 ec 0c             	sub    $0xc,%esp
f0124afa:	68 00 08 00 00       	push   $0x800
f0124aff:	e8 fa 2c fe ff       	call   f01077fe <kmalloc>
f0124b04:	83 c4 10             	add    $0x10,%esp
f0124b07:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124b0d:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124b13:	89 c1                	mov    %eax,%ecx
f0124b15:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124b1c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124b1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b24:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124b27:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124b2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b2f:	f7 75 84             	divl   -0x7c(%ebp)
f0124b32:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124b35:	29 d0                	sub    %edx,%eax
f0124b37:	89 c3                	mov    %eax,%ebx
f0124b39:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124b40:	10 00 00 
f0124b43:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124b48:	0f b6 d0             	movzbl %al,%edx
f0124b4b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124b51:	01 d0                	add    %edx,%eax
f0124b53:	48                   	dec    %eax
f0124b54:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124b5a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124b60:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b65:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124b6b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124b71:	29 d0                	sub    %edx,%eax
f0124b73:	01 c3                	add    %eax,%ebx
f0124b75:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124b7c:	10 00 00 
f0124b7f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124b84:	0f b6 c0             	movzbl %al,%eax
f0124b87:	c1 e0 04             	shl    $0x4,%eax
f0124b8a:	89 c2                	mov    %eax,%edx
f0124b8c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124b92:	01 d0                	add    %edx,%eax
f0124b94:	48                   	dec    %eax
f0124b95:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124b9b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124ba1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ba6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124bac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124bb2:	29 d0                	sub    %edx,%eax
f0124bb4:	01 d8                	add    %ebx,%eax
f0124bb6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124bbb:	39 c1                	cmp    %eax,%ecx
f0124bbd:	74 17                	je     f0124bd6 <test_kheap_virt_addr+0x3c1>
f0124bbf:	83 ec 04             	sub    $0x4,%esp
f0124bc2:	68 40 ad 13 f0       	push   $0xf013ad40
f0124bc7:	68 fd 08 00 00       	push   $0x8fd
f0124bcc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124bd1:	e8 25 b6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bd6:	e8 61 f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124bdb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124bde:	74 17                	je     f0124bf7 <test_kheap_virt_addr+0x3e2>
f0124be0:	83 ec 04             	sub    $0x4,%esp
f0124be3:	68 74 ac 13 f0       	push   $0xf013ac74
f0124be8:	68 fe 08 00 00       	push   $0x8fe
f0124bed:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124bf2:	e8 04 b6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124bf7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124bfa:	e8 ca 7c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124bff:	29 c3                	sub    %eax,%ebx
f0124c01:	89 d8                	mov    %ebx,%eax
f0124c03:	83 f8 01             	cmp    $0x1,%eax
f0124c06:	74 17                	je     f0124c1f <test_kheap_virt_addr+0x40a>
f0124c08:	83 ec 04             	sub    $0x4,%esp
f0124c0b:	68 dc ac 13 f0       	push   $0xf013acdc
f0124c10:	68 ff 08 00 00       	push   $0x8ff
f0124c15:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124c1a:	e8 dc b5 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124c1f:	e8 a5 7c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124c24:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c27:	e8 10 f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124c2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124c2f:	83 ec 0c             	sub    $0xc,%esp
f0124c32:	68 00 08 00 00       	push   $0x800
f0124c37:	e8 c2 2b fe ff       	call   f01077fe <kmalloc>
f0124c3c:	83 c4 10             	add    $0x10,%esp
f0124c3f:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124c45:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124c4b:	89 c1                	mov    %eax,%ecx
f0124c4d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124c54:	10 00 00 
f0124c57:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124c5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c62:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124c68:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124c6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c73:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124c79:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124c7f:	29 d0                	sub    %edx,%eax
f0124c81:	89 c3                	mov    %eax,%ebx
f0124c83:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124c8a:	10 00 00 
f0124c8d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124c92:	0f b6 d0             	movzbl %al,%edx
f0124c95:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124c9b:	01 d0                	add    %edx,%eax
f0124c9d:	48                   	dec    %eax
f0124c9e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124ca4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124caa:	ba 00 00 00 00       	mov    $0x0,%edx
f0124caf:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124cb5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124cbb:	29 d0                	sub    %edx,%eax
f0124cbd:	01 c3                	add    %eax,%ebx
f0124cbf:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124cc6:	10 00 00 
f0124cc9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124cce:	0f b6 c0             	movzbl %al,%eax
f0124cd1:	c1 e0 04             	shl    $0x4,%eax
f0124cd4:	89 c2                	mov    %eax,%edx
f0124cd6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124cdc:	01 d0                	add    %edx,%eax
f0124cde:	48                   	dec    %eax
f0124cdf:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124ce5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124ceb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cf0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124cf6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124cfc:	29 d0                	sub    %edx,%eax
f0124cfe:	01 d8                	add    %ebx,%eax
f0124d00:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124d05:	39 c1                	cmp    %eax,%ecx
f0124d07:	74 17                	je     f0124d20 <test_kheap_virt_addr+0x50b>
f0124d09:	83 ec 04             	sub    $0x4,%esp
f0124d0c:	68 40 ad 13 f0       	push   $0xf013ad40
f0124d11:	68 05 09 00 00       	push   $0x905
f0124d16:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124d1b:	e8 db b4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d20:	e8 17 f0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124d25:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124d28:	74 17                	je     f0124d41 <test_kheap_virt_addr+0x52c>
f0124d2a:	83 ec 04             	sub    $0x4,%esp
f0124d2d:	68 74 ac 13 f0       	push   $0xf013ac74
f0124d32:	68 06 09 00 00       	push   $0x906
f0124d37:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124d3c:	e8 ba b4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d41:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124d44:	e8 80 7b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124d49:	29 c3                	sub    %eax,%ebx
f0124d4b:	89 d8                	mov    %ebx,%eax
f0124d4d:	83 f8 01             	cmp    $0x1,%eax
f0124d50:	74 17                	je     f0124d69 <test_kheap_virt_addr+0x554>
f0124d52:	83 ec 04             	sub    $0x4,%esp
f0124d55:	68 dc ac 13 f0       	push   $0xf013acdc
f0124d5a:	68 07 09 00 00       	push   $0x907
f0124d5f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124d64:	e8 92 b4 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124d69:	e8 5b 7b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124d6e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124d71:	e8 c6 ef fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124d76:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124d79:	83 ec 0c             	sub    $0xc,%esp
f0124d7c:	68 00 1c 00 00       	push   $0x1c00
f0124d81:	e8 78 2a fe ff       	call   f01077fe <kmalloc>
f0124d86:	83 c4 10             	add    $0x10,%esp
f0124d89:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124d8f:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124d95:	89 c1                	mov    %eax,%ecx
f0124d97:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124d9e:	10 00 00 
f0124da1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124da7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124dac:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124db2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124db8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dbd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124dc3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124dc9:	29 d0                	sub    %edx,%eax
f0124dcb:	89 c3                	mov    %eax,%ebx
f0124dcd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124dd4:	10 00 00 
f0124dd7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124ddc:	0f b6 d0             	movzbl %al,%edx
f0124ddf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124de5:	01 d0                	add    %edx,%eax
f0124de7:	48                   	dec    %eax
f0124de8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124dee:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124df4:	ba 00 00 00 00       	mov    $0x0,%edx
f0124df9:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124dff:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124e05:	29 d0                	sub    %edx,%eax
f0124e07:	01 c3                	add    %eax,%ebx
f0124e09:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124e10:	10 00 00 
f0124e13:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124e18:	0f b6 c0             	movzbl %al,%eax
f0124e1b:	c1 e0 04             	shl    $0x4,%eax
f0124e1e:	89 c2                	mov    %eax,%edx
f0124e20:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124e26:	01 d0                	add    %edx,%eax
f0124e28:	48                   	dec    %eax
f0124e29:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124e2f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e3a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124e40:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124e46:	29 d0                	sub    %edx,%eax
f0124e48:	01 d8                	add    %ebx,%eax
f0124e4a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124e4f:	39 c1                	cmp    %eax,%ecx
f0124e51:	74 17                	je     f0124e6a <test_kheap_virt_addr+0x655>
f0124e53:	83 ec 04             	sub    $0x4,%esp
f0124e56:	68 40 ad 13 f0       	push   $0xf013ad40
f0124e5b:	68 0d 09 00 00       	push   $0x90d
f0124e60:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124e65:	e8 91 b3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e6a:	e8 cd ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124e6f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124e72:	74 17                	je     f0124e8b <test_kheap_virt_addr+0x676>
f0124e74:	83 ec 04             	sub    $0x4,%esp
f0124e77:	68 74 ac 13 f0       	push   $0xf013ac74
f0124e7c:	68 0e 09 00 00       	push   $0x90e
f0124e81:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124e86:	e8 70 b3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e8b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124e8e:	e8 36 7a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124e93:	29 c3                	sub    %eax,%ebx
f0124e95:	89 d8                	mov    %ebx,%eax
f0124e97:	83 f8 02             	cmp    $0x2,%eax
f0124e9a:	74 17                	je     f0124eb3 <test_kheap_virt_addr+0x69e>
f0124e9c:	83 ec 04             	sub    $0x4,%esp
f0124e9f:	68 dc ac 13 f0       	push   $0xf013acdc
f0124ea4:	68 0f 09 00 00       	push   $0x90f
f0124ea9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124eae:	e8 48 b3 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124eb3:	e8 11 7a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124eb8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ebb:	e8 7c ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124ec0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124ec3:	83 ec 0c             	sub    $0xc,%esp
f0124ec6:	68 00 fc 2f 00       	push   $0x2ffc00
f0124ecb:	e8 2e 29 fe ff       	call   f01077fe <kmalloc>
f0124ed0:	83 c4 10             	add    $0x10,%esp
f0124ed3:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ed9:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124edf:	89 c1                	mov    %eax,%ecx
f0124ee1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124ee8:	10 00 00 
f0124eeb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124ef1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ef6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124efc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124f02:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f07:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124f0d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124f13:	29 d0                	sub    %edx,%eax
f0124f15:	89 c3                	mov    %eax,%ebx
f0124f17:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124f1e:	10 00 00 
f0124f21:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124f26:	0f b6 d0             	movzbl %al,%edx
f0124f29:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124f2f:	01 d0                	add    %edx,%eax
f0124f31:	48                   	dec    %eax
f0124f32:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124f38:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124f3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f43:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124f49:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124f4f:	29 d0                	sub    %edx,%eax
f0124f51:	01 c3                	add    %eax,%ebx
f0124f53:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124f5a:	10 00 00 
f0124f5d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124f62:	0f b6 c0             	movzbl %al,%eax
f0124f65:	c1 e0 04             	shl    $0x4,%eax
f0124f68:	89 c2                	mov    %eax,%edx
f0124f6a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124f70:	01 d0                	add    %edx,%eax
f0124f72:	48                   	dec    %eax
f0124f73:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124f79:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124f7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f84:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124f8a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124f90:	29 d0                	sub    %edx,%eax
f0124f92:	01 d8                	add    %ebx,%eax
f0124f94:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124f99:	39 c1                	cmp    %eax,%ecx
f0124f9b:	74 17                	je     f0124fb4 <test_kheap_virt_addr+0x79f>
f0124f9d:	83 ec 04             	sub    $0x4,%esp
f0124fa0:	68 40 ad 13 f0       	push   $0xf013ad40
f0124fa5:	68 15 09 00 00       	push   $0x915
f0124faa:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124faf:	e8 47 b2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fb4:	e8 83 ed fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124fb9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124fbc:	74 17                	je     f0124fd5 <test_kheap_virt_addr+0x7c0>
f0124fbe:	83 ec 04             	sub    $0x4,%esp
f0124fc1:	68 74 ac 13 f0       	push   $0xf013ac74
f0124fc6:	68 16 09 00 00       	push   $0x916
f0124fcb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124fd0:	e8 26 b2 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124fd5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124fd8:	e8 ec 78 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0124fdd:	29 c3                	sub    %eax,%ebx
f0124fdf:	89 d8                	mov    %ebx,%eax
f0124fe1:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124fe6:	74 17                	je     f0124fff <test_kheap_virt_addr+0x7ea>
f0124fe8:	83 ec 04             	sub    $0x4,%esp
f0124feb:	68 dc ac 13 f0       	push   $0xf013acdc
f0124ff0:	68 17 09 00 00       	push   $0x917
f0124ff5:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124ffa:	e8 fc b1 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124fff:	e8 c5 78 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125004:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125007:	e8 30 ed fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012500c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012500f:	83 ec 0c             	sub    $0xc,%esp
f0125012:	68 00 fc 5f 00       	push   $0x5ffc00
f0125017:	e8 e2 27 fe ff       	call   f01077fe <kmalloc>
f012501c:	83 c4 10             	add    $0x10,%esp
f012501f:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125025:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012502b:	89 c1                	mov    %eax,%ecx
f012502d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125034:	10 00 00 
f0125037:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012503d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125042:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125048:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012504e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125053:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125059:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012505f:	29 d0                	sub    %edx,%eax
f0125061:	89 c3                	mov    %eax,%ebx
f0125063:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012506a:	10 00 00 
f012506d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125072:	0f b6 d0             	movzbl %al,%edx
f0125075:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012507b:	01 d0                	add    %edx,%eax
f012507d:	48                   	dec    %eax
f012507e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125084:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012508a:	ba 00 00 00 00       	mov    $0x0,%edx
f012508f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125095:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012509b:	29 d0                	sub    %edx,%eax
f012509d:	01 c3                	add    %eax,%ebx
f012509f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01250a6:	10 00 00 
f01250a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01250ae:	0f b6 c0             	movzbl %al,%eax
f01250b1:	c1 e0 04             	shl    $0x4,%eax
f01250b4:	89 c2                	mov    %eax,%edx
f01250b6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01250bc:	01 d0                	add    %edx,%eax
f01250be:	48                   	dec    %eax
f01250bf:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01250c5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01250cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01250d0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01250d6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01250dc:	29 d0                	sub    %edx,%eax
f01250de:	01 d8                	add    %ebx,%eax
f01250e0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01250e5:	39 c1                	cmp    %eax,%ecx
f01250e7:	74 17                	je     f0125100 <test_kheap_virt_addr+0x8eb>
f01250e9:	83 ec 04             	sub    $0x4,%esp
f01250ec:	68 40 ad 13 f0       	push   $0xf013ad40
f01250f1:	68 1d 09 00 00       	push   $0x91d
f01250f6:	68 5a ac 13 f0       	push   $0xf013ac5a
f01250fb:	e8 fb b0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125100:	e8 37 ec fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125105:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125108:	74 17                	je     f0125121 <test_kheap_virt_addr+0x90c>
f012510a:	83 ec 04             	sub    $0x4,%esp
f012510d:	68 74 ac 13 f0       	push   $0xf013ac74
f0125112:	68 1e 09 00 00       	push   $0x91e
f0125117:	68 5a ac 13 f0       	push   $0xf013ac5a
f012511c:	e8 da b0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125121:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125124:	e8 a0 77 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125129:	29 c3                	sub    %eax,%ebx
f012512b:	89 d8                	mov    %ebx,%eax
f012512d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125132:	74 17                	je     f012514b <test_kheap_virt_addr+0x936>
f0125134:	83 ec 04             	sub    $0x4,%esp
f0125137:	68 dc ac 13 f0       	push   $0xf013acdc
f012513c:	68 1f 09 00 00       	push   $0x91f
f0125141:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125146:	e8 b0 b0 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012514b:	e8 79 77 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125150:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125153:	e8 e4 eb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125158:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012515b:	83 ec 0c             	sub    $0xc,%esp
f012515e:	68 00 38 00 00       	push   $0x3800
f0125163:	e8 96 26 fe ff       	call   f01077fe <kmalloc>
f0125168:	83 c4 10             	add    $0x10,%esp
f012516b:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125171:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125177:	89 c1                	mov    %eax,%ecx
f0125179:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125180:	10 00 00 
f0125183:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125189:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012518e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125194:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012519a:	ba 00 00 00 00       	mov    $0x0,%edx
f012519f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01251a5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01251ab:	29 d0                	sub    %edx,%eax
f01251ad:	89 c3                	mov    %eax,%ebx
f01251af:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01251b6:	10 00 00 
f01251b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01251be:	0f b6 d0             	movzbl %al,%edx
f01251c1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01251c7:	01 d0                	add    %edx,%eax
f01251c9:	48                   	dec    %eax
f01251ca:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01251d0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01251d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01251db:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01251e1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01251e7:	29 d0                	sub    %edx,%eax
f01251e9:	01 c3                	add    %eax,%ebx
f01251eb:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01251f2:	10 00 00 
f01251f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01251fa:	0f b6 c0             	movzbl %al,%eax
f01251fd:	c1 e0 04             	shl    $0x4,%eax
f0125200:	89 c2                	mov    %eax,%edx
f0125202:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125208:	01 d0                	add    %edx,%eax
f012520a:	48                   	dec    %eax
f012520b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125211:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125217:	ba 00 00 00 00       	mov    $0x0,%edx
f012521c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125222:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125228:	29 d0                	sub    %edx,%eax
f012522a:	01 d8                	add    %ebx,%eax
f012522c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125231:	39 c1                	cmp    %eax,%ecx
f0125233:	74 17                	je     f012524c <test_kheap_virt_addr+0xa37>
f0125235:	83 ec 04             	sub    $0x4,%esp
f0125238:	68 40 ad 13 f0       	push   $0xf013ad40
f012523d:	68 25 09 00 00       	push   $0x925
f0125242:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125247:	e8 af af fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012524c:	e8 eb ea fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125251:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125254:	74 17                	je     f012526d <test_kheap_virt_addr+0xa58>
f0125256:	83 ec 04             	sub    $0x4,%esp
f0125259:	68 74 ac 13 f0       	push   $0xf013ac74
f012525e:	68 26 09 00 00       	push   $0x926
f0125263:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125268:	e8 8e af fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012526d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125270:	e8 54 76 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125275:	29 c3                	sub    %eax,%ebx
f0125277:	89 d8                	mov    %ebx,%eax
f0125279:	83 f8 04             	cmp    $0x4,%eax
f012527c:	74 17                	je     f0125295 <test_kheap_virt_addr+0xa80>
f012527e:	83 ec 04             	sub    $0x4,%esp
f0125281:	68 dc ac 13 f0       	push   $0xf013acdc
f0125286:	68 27 09 00 00       	push   $0x927
f012528b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125290:	e8 66 af fd ff       	call   f01001fb <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125295:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012529c:	10 00 00 
f012529f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01252a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252aa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01252b0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01252b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01252bb:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01252c1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01252c7:	29 d0                	sub    %edx,%eax
f01252c9:	89 c1                	mov    %eax,%ecx
f01252cb:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01252d2:	10 00 00 
f01252d5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01252da:	0f b6 d0             	movzbl %al,%edx
f01252dd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01252e3:	01 d0                	add    %edx,%eax
f01252e5:	48                   	dec    %eax
f01252e6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01252ec:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01252f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01252f7:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01252fd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125303:	29 d0                	sub    %edx,%eax
f0125305:	01 c1                	add    %eax,%ecx
f0125307:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012530e:	10 00 00 
f0125311:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125316:	0f b6 c0             	movzbl %al,%eax
f0125319:	c1 e0 04             	shl    $0x4,%eax
f012531c:	89 c2                	mov    %eax,%edx
f012531e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125324:	01 d0                	add    %edx,%eax
f0125326:	48                   	dec    %eax
f0125327:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012532d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125333:	ba 00 00 00 00       	mov    $0x0,%edx
f0125338:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012533e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125344:	29 d0                	sub    %edx,%eax
f0125346:	01 c1                	add    %eax,%ecx
f0125348:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012534f:	10 00 00 
f0125352:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125358:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012535d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125363:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125369:	ba 00 00 00 00       	mov    $0x0,%edx
f012536e:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125374:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012537a:	29 d0                	sub    %edx,%eax
f012537c:	29 c1                	sub    %eax,%ecx
f012537e:	89 c8                	mov    %ecx,%eax
f0125380:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125385:	c1 e8 0c             	shr    $0xc,%eax
f0125388:	89 c2                	mov    %eax,%edx
f012538a:	4a                   	dec    %edx
f012538b:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125391:	c1 e0 02             	shl    $0x2,%eax
f0125394:	8d 50 03             	lea    0x3(%eax),%edx
f0125397:	b8 10 00 00 00       	mov    $0x10,%eax
f012539c:	48                   	dec    %eax
f012539d:	01 d0                	add    %edx,%eax
f012539f:	bf 10 00 00 00       	mov    $0x10,%edi
f01253a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01253a9:	f7 f7                	div    %edi
f01253ab:	6b c0 10             	imul   $0x10,%eax,%eax
f01253ae:	29 c4                	sub    %eax,%esp
f01253b0:	89 e0                	mov    %esp,%eax
f01253b2:	83 c0 03             	add    $0x3,%eax
f01253b5:	c1 e8 02             	shr    $0x2,%eax
f01253b8:	c1 e0 02             	shl    $0x2,%eax
f01253bb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01253c1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01253c8:	10 00 00 
f01253cb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01253d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253d6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01253dc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01253e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01253e7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01253ed:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01253f3:	29 d0                	sub    %edx,%eax
f01253f5:	89 c1                	mov    %eax,%ecx
f01253f7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01253fe:	10 00 00 
f0125401:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125406:	0f b6 d0             	movzbl %al,%edx
f0125409:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012540f:	01 d0                	add    %edx,%eax
f0125411:	48                   	dec    %eax
f0125412:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125418:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012541e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125423:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125429:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012542f:	29 d0                	sub    %edx,%eax
f0125431:	01 c1                	add    %eax,%ecx
f0125433:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012543a:	10 00 00 
f012543d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125442:	0f b6 c0             	movzbl %al,%eax
f0125445:	c1 e0 04             	shl    $0x4,%eax
f0125448:	89 c2                	mov    %eax,%edx
f012544a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125450:	01 d0                	add    %edx,%eax
f0125452:	48                   	dec    %eax
f0125453:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125459:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012545f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125464:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012546a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125470:	29 d0                	sub    %edx,%eax
f0125472:	01 c1                	add    %eax,%ecx
f0125474:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012547b:	10 00 00 
f012547e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125484:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125489:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012548f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125495:	ba 00 00 00 00       	mov    $0x0,%edx
f012549a:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01254a0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01254a6:	29 d0                	sub    %edx,%eax
f01254a8:	29 c1                	sub    %eax,%ecx
f01254aa:	89 c8                	mov    %ecx,%eax
f01254ac:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01254b1:	c1 e8 0c             	shr    $0xc,%eax
f01254b4:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01254ba:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01254c1:	10 00 00 
f01254c4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01254ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254cf:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01254d5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01254db:	ba 00 00 00 00       	mov    $0x0,%edx
f01254e0:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01254e6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01254ec:	29 d0                	sub    %edx,%eax
f01254ee:	89 c1                	mov    %eax,%ecx
f01254f0:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01254f7:	10 00 00 
f01254fa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01254ff:	0f b6 d0             	movzbl %al,%edx
f0125502:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125508:	01 d0                	add    %edx,%eax
f012550a:	48                   	dec    %eax
f012550b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125511:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125517:	ba 00 00 00 00       	mov    $0x0,%edx
f012551c:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125522:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125528:	29 d0                	sub    %edx,%eax
f012552a:	01 c1                	add    %eax,%ecx
f012552c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125533:	10 00 00 
f0125536:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012553b:	0f b6 c0             	movzbl %al,%eax
f012553e:	c1 e0 04             	shl    $0x4,%eax
f0125541:	89 c2                	mov    %eax,%edx
f0125543:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125549:	01 d0                	add    %edx,%eax
f012554b:	48                   	dec    %eax
f012554c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125552:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125558:	ba 00 00 00 00       	mov    $0x0,%edx
f012555d:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125563:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125569:	29 d0                	sub    %edx,%eax
f012556b:	01 c8                	add    %ecx,%eax
f012556d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125572:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125578:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012557f:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125586:	10 00 00 
f0125589:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012558f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125594:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f012559a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01255a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01255a5:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01255ab:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01255b1:	29 d0                	sub    %edx,%eax
f01255b3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01255b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01255bb:	e9 21 01 00 00       	jmp    f01256e1 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01255c0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01255c5:	83 ec 04             	sub    $0x4,%esp
f01255c8:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01255ce:	52                   	push   %edx
f01255cf:	ff 75 e4             	pushl  -0x1c(%ebp)
f01255d2:	50                   	push   %eax
f01255d3:	e8 02 14 fe ff       	call   f01069da <get_page_table>
f01255d8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01255db:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01255e1:	85 c0                	test   %eax,%eax
f01255e3:	75 17                	jne    f01255fc <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01255e5:	83 ec 04             	sub    $0x4,%esp
f01255e8:	68 fc b5 13 f0       	push   $0xf013b5fc
f01255ed:	68 38 09 00 00       	push   $0x938
f01255f2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01255f7:	e8 ff ab fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01255fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01255ff:	c1 e8 0c             	shr    $0xc,%eax
f0125602:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125607:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012560a:	e9 ba 00 00 00       	jmp    f01256c9 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f012560f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125615:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125618:	c1 e2 02             	shl    $0x2,%edx
f012561b:	01 d0                	add    %edx,%eax
f012561d:	8b 00                	mov    (%eax),%eax
f012561f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125624:	89 c1                	mov    %eax,%ecx
f0125626:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012562c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012562f:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125632:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125638:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012563b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012563e:	83 ec 0c             	sub    $0xc,%esp
f0125641:	50                   	push   %eax
f0125642:	e8 a0 23 fe ff       	call   f01079e7 <kheap_virtual_address>
f0125647:	83 c4 10             	add    $0x10,%esp
f012564a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125650:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0125656:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0125659:	74 61                	je     f01256bc <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f012565b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125661:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125664:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125667:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f012566d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125670:	c1 e1 02             	shl    $0x2,%ecx
f0125673:	01 ca                	add    %ecx,%edx
f0125675:	8b 12                	mov    (%edx),%edx
f0125677:	89 d1                	mov    %edx,%ecx
f0125679:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012567f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125682:	c1 e2 0c             	shl    $0xc,%edx
f0125685:	89 d3                	mov    %edx,%ebx
f0125687:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012568a:	01 da                	add    %ebx,%edx
f012568c:	83 ec 0c             	sub    $0xc,%esp
f012568f:	50                   	push   %eax
f0125690:	51                   	push   %ecx
f0125691:	52                   	push   %edx
f0125692:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125698:	68 f0 b6 13 f0       	push   $0xf013b6f0
f012569d:	e8 e0 b5 fd ff       	call   f0100c82 <cprintf>
f01256a2:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01256a5:	83 ec 04             	sub    $0x4,%esp
f01256a8:	68 33 b7 13 f0       	push   $0xf013b733
f01256ad:	68 42 09 00 00       	push   $0x942
f01256b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01256b7:	e8 3f ab fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f01256bc:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01256c3:	ff 45 dc             	incl   -0x24(%ebp)
f01256c6:	ff 45 e0             	incl   -0x20(%ebp)
f01256c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01256cc:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01256d2:	7d 0d                	jge    f01256e1 <test_kheap_virt_addr+0xecc>
f01256d4:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01256db:	0f 8e 2e ff ff ff    	jle    f012560f <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01256e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01256e4:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01256ea:	0f 82 d0 fe ff ff    	jb     f01255c0 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01256f0:	83 ec 0c             	sub    $0xc,%esp
f01256f3:	68 50 b7 13 f0       	push   $0xf013b750
f01256f8:	e8 85 b5 fd ff       	call   f0100c82 <cprintf>
f01256fd:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125700:	e8 c4 71 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125705:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012570b:	e8 2c e6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125710:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125716:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012571c:	83 ec 0c             	sub    $0xc,%esp
f012571f:	50                   	push   %eax
f0125720:	e8 9b 21 fe ff       	call   f01078c0 <kfree>
f0125725:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125728:	e8 0f e6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012572d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125733:	74 17                	je     f012574c <test_kheap_virt_addr+0xf37>
f0125735:	83 ec 04             	sub    $0x4,%esp
f0125738:	68 74 ac 13 f0       	push   $0xf013ac74
f012573d:	68 50 09 00 00       	push   $0x950
f0125742:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125747:	e8 af aa fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012574c:	e8 78 71 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125751:	89 c2                	mov    %eax,%edx
f0125753:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125759:	29 c2                	sub    %eax,%edx
f012575b:	89 d0                	mov    %edx,%eax
f012575d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125762:	74 17                	je     f012577b <test_kheap_virt_addr+0xf66>
f0125764:	83 ec 04             	sub    $0x4,%esp
f0125767:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012576c:	68 51 09 00 00       	push   $0x951
f0125771:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125776:	e8 80 aa fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012577b:	e8 49 71 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125780:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125786:	e8 b1 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012578b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125791:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125797:	83 ec 0c             	sub    $0xc,%esp
f012579a:	50                   	push   %eax
f012579b:	e8 20 21 fe ff       	call   f01078c0 <kfree>
f01257a0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257a3:	e8 94 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01257a8:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01257ae:	74 17                	je     f01257c7 <test_kheap_virt_addr+0xfb2>
f01257b0:	83 ec 04             	sub    $0x4,%esp
f01257b3:	68 74 ac 13 f0       	push   $0xf013ac74
f01257b8:	68 57 09 00 00       	push   $0x957
f01257bd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01257c2:	e8 34 aa fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01257c7:	e8 fd 70 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01257cc:	89 c2                	mov    %eax,%edx
f01257ce:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01257d4:	29 c2                	sub    %eax,%edx
f01257d6:	89 d0                	mov    %edx,%eax
f01257d8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01257dd:	74 17                	je     f01257f6 <test_kheap_virt_addr+0xfe1>
f01257df:	83 ec 04             	sub    $0x4,%esp
f01257e2:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01257e7:	68 58 09 00 00       	push   $0x958
f01257ec:	68 5a ac 13 f0       	push   $0xf013ac5a
f01257f1:	e8 05 aa fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01257f6:	e8 ce 70 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01257fb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125801:	e8 36 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125806:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f012580c:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125812:	83 ec 0c             	sub    $0xc,%esp
f0125815:	50                   	push   %eax
f0125816:	e8 a5 20 fe ff       	call   f01078c0 <kfree>
f012581b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012581e:	e8 19 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125823:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125829:	74 17                	je     f0125842 <test_kheap_virt_addr+0x102d>
f012582b:	83 ec 04             	sub    $0x4,%esp
f012582e:	68 74 ac 13 f0       	push   $0xf013ac74
f0125833:	68 5e 09 00 00       	push   $0x95e
f0125838:	68 5a ac 13 f0       	push   $0xf013ac5a
f012583d:	e8 b9 a9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125842:	e8 82 70 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125847:	89 c2                	mov    %eax,%edx
f0125849:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012584f:	29 c2                	sub    %eax,%edx
f0125851:	89 d0                	mov    %edx,%eax
f0125853:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125858:	74 17                	je     f0125871 <test_kheap_virt_addr+0x105c>
f012585a:	83 ec 04             	sub    $0x4,%esp
f012585d:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0125862:	68 5f 09 00 00       	push   $0x95f
f0125867:	68 5a ac 13 f0       	push   $0xf013ac5a
f012586c:	e8 8a a9 fd ff       	call   f01001fb <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125871:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125878:	10 00 00 
f012587b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125881:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125886:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012588c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125892:	ba 00 00 00 00       	mov    $0x0,%edx
f0125897:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012589d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01258a3:	29 d0                	sub    %edx,%eax
f01258a5:	89 c1                	mov    %eax,%ecx
f01258a7:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01258ae:	10 00 00 
f01258b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01258b6:	0f b6 d0             	movzbl %al,%edx
f01258b9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01258bf:	01 d0                	add    %edx,%eax
f01258c1:	48                   	dec    %eax
f01258c2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01258c8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01258ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01258d3:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01258d9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01258df:	29 d0                	sub    %edx,%eax
f01258e1:	01 c1                	add    %eax,%ecx
f01258e3:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01258ea:	10 00 00 
f01258ed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01258f2:	0f b6 c0             	movzbl %al,%eax
f01258f5:	c1 e0 04             	shl    $0x4,%eax
f01258f8:	89 c2                	mov    %eax,%edx
f01258fa:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125900:	01 d0                	add    %edx,%eax
f0125902:	48                   	dec    %eax
f0125903:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0125909:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012590f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125914:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012591a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125920:	29 d0                	sub    %edx,%eax
f0125922:	01 c8                	add    %ecx,%eax
f0125924:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125929:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012592f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125936:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012593d:	10 00 00 
f0125940:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125946:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012594b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125951:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125957:	ba 00 00 00 00       	mov    $0x0,%edx
f012595c:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125962:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125968:	29 d0                	sub    %edx,%eax
f012596a:	89 c1                	mov    %eax,%ecx
f012596c:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125973:	10 00 00 
f0125976:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012597b:	0f b6 d0             	movzbl %al,%edx
f012597e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0125984:	01 d0                	add    %edx,%eax
f0125986:	48                   	dec    %eax
f0125987:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f012598d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125993:	ba 00 00 00 00       	mov    $0x0,%edx
f0125998:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f012599e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01259a4:	29 d0                	sub    %edx,%eax
f01259a6:	01 c1                	add    %eax,%ecx
f01259a8:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01259af:	10 00 00 
f01259b2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01259b7:	0f b6 c0             	movzbl %al,%eax
f01259ba:	c1 e0 04             	shl    $0x4,%eax
f01259bd:	89 c2                	mov    %eax,%edx
f01259bf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01259c5:	01 d0                	add    %edx,%eax
f01259c7:	48                   	dec    %eax
f01259c8:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01259ce:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01259d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01259d9:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01259df:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01259e5:	29 d0                	sub    %edx,%eax
f01259e7:	01 c1                	add    %eax,%ecx
f01259e9:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01259f0:	10 00 00 
f01259f3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01259f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259fe:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125a04:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a0f:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125a15:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a1b:	29 d0                	sub    %edx,%eax
f0125a1d:	29 c1                	sub    %eax,%ecx
f0125a1f:	89 c8                	mov    %ecx,%eax
f0125a21:	05 00 40 00 00       	add    $0x4000,%eax
f0125a26:	c1 e8 0c             	shr    $0xc,%eax
f0125a29:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125a2f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a35:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125a38:	eb 41                	jmp    f0125a7b <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125a3a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125a40:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125a43:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125a46:	83 ec 0c             	sub    $0xc,%esp
f0125a49:	50                   	push   %eax
f0125a4a:	e8 98 1f fe ff       	call   f01079e7 <kheap_virtual_address>
f0125a4f:	83 c4 10             	add    $0x10,%esp
f0125a52:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125a58:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0125a5f:	74 17                	je     f0125a78 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0125a61:	83 ec 04             	sub    $0x4,%esp
f0125a64:	68 33 b7 13 f0       	push   $0xf013b733
f0125a69:	68 70 09 00 00       	push   $0x970
f0125a6e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125a73:	e8 83 a7 fd ff       	call   f01001fb <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125a78:	ff 45 d8             	incl   -0x28(%ebp)
f0125a7b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a81:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125a87:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125a8a:	39 c2                	cmp    %eax,%edx
f0125a8c:	77 ac                	ja     f0125a3a <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125a8e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a94:	05 00 04 00 00       	add    $0x400,%eax
f0125a99:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125a9c:	e9 83 00 00 00       	jmp    f0125b24 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125aa1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125aa7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125aaa:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125aad:	83 ec 0c             	sub    $0xc,%esp
f0125ab0:	50                   	push   %eax
f0125ab1:	e8 31 1f fe ff       	call   f01079e7 <kheap_virtual_address>
f0125ab6:	83 c4 10             	add    $0x10,%esp
f0125ab9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125abf:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125ac6:	10 00 00 
f0125ac9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125acf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ad4:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125ada:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125ae0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae5:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125aeb:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125af1:	29 d0                	sub    %edx,%eax
f0125af3:	89 c2                	mov    %eax,%edx
f0125af5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125af8:	c1 e0 0c             	shl    $0xc,%eax
f0125afb:	01 d0                	add    %edx,%eax
f0125afd:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125b02:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125b08:	74 17                	je     f0125b21 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125b0a:	83 ec 04             	sub    $0x4,%esp
f0125b0d:	68 33 b7 13 f0       	push   $0xf013b733
f0125b12:	68 7a 09 00 00       	push   $0x97a
f0125b17:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125b1c:	e8 da a6 fd ff       	call   f01001fb <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b21:	ff 45 d8             	incl   -0x28(%ebp)
f0125b24:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b2a:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125b30:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125b33:	39 c2                	cmp    %eax,%edx
f0125b35:	0f 87 66 ff ff ff    	ja     f0125aa1 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b3b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b41:	05 04 07 00 00       	add    $0x704,%eax
f0125b46:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125b49:	eb 41                	jmp    f0125b8c <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125b4b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b51:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125b54:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125b57:	83 ec 0c             	sub    $0xc,%esp
f0125b5a:	50                   	push   %eax
f0125b5b:	e8 87 1e fe ff       	call   f01079e7 <kheap_virtual_address>
f0125b60:	83 c4 10             	add    $0x10,%esp
f0125b63:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0125b69:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0125b70:	74 17                	je     f0125b89 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0125b72:	83 ec 04             	sub    $0x4,%esp
f0125b75:	68 33 b7 13 f0       	push   $0xf013b733
f0125b7a:	68 83 09 00 00       	push   $0x983
f0125b7f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125b84:	e8 72 a6 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b89:	ff 45 d8             	incl   -0x28(%ebp)
f0125b8c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b92:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125b98:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125b9b:	39 c2                	cmp    %eax,%edx
f0125b9d:	77 ac                	ja     f0125b4b <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125b9f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125ba5:	05 04 0d 00 00       	add    $0xd04,%eax
f0125baa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125bad:	e9 83 00 00 00       	jmp    f0125c35 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125bb2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125bb8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125bbb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125bbe:	83 ec 0c             	sub    $0xc,%esp
f0125bc1:	50                   	push   %eax
f0125bc2:	e8 20 1e fe ff       	call   f01079e7 <kheap_virtual_address>
f0125bc7:	83 c4 10             	add    $0x10,%esp
f0125bca:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125bd0:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125bd7:	10 00 00 
f0125bda:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125be0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125be5:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125beb:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125bf1:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bf6:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125bfc:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125c02:	29 d0                	sub    %edx,%eax
f0125c04:	89 c2                	mov    %eax,%edx
f0125c06:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c09:	c1 e0 0c             	shl    $0xc,%eax
f0125c0c:	01 d0                	add    %edx,%eax
f0125c0e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125c13:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125c19:	74 17                	je     f0125c32 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0125c1b:	83 ec 04             	sub    $0x4,%esp
f0125c1e:	68 33 b7 13 f0       	push   $0xf013b733
f0125c23:	68 8c 09 00 00       	push   $0x98c
f0125c28:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125c2d:	e8 c9 a5 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125c32:	ff 45 d8             	incl   -0x28(%ebp)
f0125c35:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c3b:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125c41:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c44:	39 c2                	cmp    %eax,%edx
f0125c46:	0f 87 66 ff ff ff    	ja     f0125bb2 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125c4c:	83 ec 0c             	sub    $0xc,%esp
f0125c4f:	68 e5 ad 13 f0       	push   $0xf013ade5
f0125c54:	e8 29 b0 fd ff       	call   f0100c82 <cprintf>
f0125c59:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125c5c:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125c63:	eb 54                	jmp    f0125cb9 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125c65:	83 ec 0c             	sub    $0xc,%esp
f0125c68:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125c6b:	e8 77 1d fe ff       	call   f01079e7 <kheap_virtual_address>
f0125c70:	83 c4 10             	add    $0x10,%esp
f0125c73:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125c79:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0125c80:	74 30                	je     f0125cb2 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125c82:	83 ec 04             	sub    $0x4,%esp
f0125c85:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125c8b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125c8e:	68 81 b7 13 f0       	push   $0xf013b781
f0125c93:	e8 ea af fd ff       	call   f0100c82 <cprintf>
f0125c98:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125c9b:	83 ec 04             	sub    $0x4,%esp
f0125c9e:	68 33 b7 13 f0       	push   $0xf013b733
f0125ca3:	68 9c 09 00 00       	push   $0x99c
f0125ca8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125cad:	e8 49 a5 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125cb2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125cb9:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0125cbe:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125cc1:	72 a2                	jb     f0125c65 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125cc3:	83 ec 0c             	sub    $0xc,%esp
f0125cc6:	68 3e ae 13 f0       	push   $0xf013ae3e
f0125ccb:	e8 b2 af fd ff       	call   f0100c82 <cprintf>
f0125cd0:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125cd3:	83 ec 0c             	sub    $0xc,%esp
f0125cd6:	68 a0 b7 13 f0       	push   $0xf013b7a0
f0125cdb:	e8 a2 af fd ff       	call   f0100c82 <cprintf>
f0125ce0:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125ce3:	b8 01 00 00 00       	mov    $0x1,%eax
f0125ce8:	89 f4                	mov    %esi,%esp

}
f0125cea:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125ced:	5b                   	pop    %ebx
f0125cee:	5e                   	pop    %esi
f0125cef:	5f                   	pop    %edi
f0125cf0:	5d                   	pop    %ebp
f0125cf1:	c3                   	ret    

f0125cf2 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125cf2:	55                   	push   %ebp
f0125cf3:	89 e5                	mov    %esp,%ebp
f0125cf5:	57                   	push   %edi
f0125cf6:	56                   	push   %esi
f0125cf7:	53                   	push   %ebx
f0125cf8:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125cfe:	a0 cf 1c 19 f0       	mov    0xf0191ccf,%al
f0125d03:	84 c0                	test   %al,%al
f0125d05:	74 56                	je     f0125d5d <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125d07:	c6 05 cf 1c 19 f0 00 	movb   $0x0,0xf0191ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125d0e:	e8 b6 6b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125d13:	a3 b8 7c 65 f0       	mov    %eax,0xf0657cb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125d18:	e8 1f e0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125d1d:	a3 b4 7c 65 f0       	mov    %eax,0xf0657cb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125d22:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125d28:	bb fd b8 13 f0       	mov    $0xf013b8fd,%ebx
f0125d2d:	ba 11 00 00 00       	mov    $0x11,%edx
f0125d32:	89 c7                	mov    %eax,%edi
f0125d34:	89 de                	mov    %ebx,%esi
f0125d36:	89 d1                	mov    %edx,%ecx
f0125d38:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125d3a:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125d40:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125d45:	b0 00                	mov    $0x0,%al
f0125d47:	89 d7                	mov    %edx,%edi
f0125d49:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125d4b:	83 ec 0c             	sub    $0xc,%esp
f0125d4e:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125d54:	50                   	push   %eax
f0125d55:	e8 8a af fd ff       	call   f0100ce4 <execute_command>
f0125d5a:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125d5d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125d64:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125d6b:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0125d70:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125d73:	eb 2d                	jmp    f0125da2 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125d75:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125d78:	05 5c 05 00 00       	add    $0x55c,%eax
f0125d7d:	83 ec 08             	sub    $0x8,%esp
f0125d80:	68 e7 b7 13 f0       	push   $0xf013b7e7
f0125d85:	50                   	push   %eax
f0125d86:	e8 79 af 00 00       	call   f0130d04 <strcmp>
f0125d8b:	83 c4 10             	add    $0x10,%esp
f0125d8e:	85 c0                	test   %eax,%eax
f0125d90:	75 08                	jne    f0125d9a <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0125d92:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125d95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125d98:	eb 2f                	jmp    f0125dc9 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125d9a:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125d9f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125da2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125da6:	74 08                	je     f0125db0 <test_three_creation_functions+0xbe>
f0125da8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125dab:	8b 40 44             	mov    0x44(%eax),%eax
f0125dae:	eb 05                	jmp    f0125db5 <test_three_creation_functions+0xc3>
f0125db0:	b8 00 00 00 00       	mov    $0x0,%eax
f0125db5:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0125dba:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125dbf:	85 c0                	test   %eax,%eax
f0125dc1:	75 b2                	jne    f0125d75 <test_three_creation_functions+0x83>
f0125dc3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125dc7:	75 ac                	jne    f0125d75 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125dc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125dcc:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0125dd2:	85 c0                	test   %eax,%eax
f0125dd4:	74 17                	je     f0125ded <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125dd6:	83 ec 04             	sub    $0x4,%esp
f0125dd9:	68 f0 b7 13 f0       	push   $0xf013b7f0
f0125dde:	68 c6 09 00 00       	push   $0x9c6
f0125de3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125de8:	e8 0e a4 fd ff       	call   f01001fb <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125ded:	83 ec 0c             	sub    $0xc,%esp
f0125df0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125df3:	e8 8e 1f fe ff       	call   f0107d86 <env_page_ws_get_size>
f0125df8:	83 c4 10             	add    $0x10,%esp
f0125dfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125dfe:	e8 c6 6a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125e03:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125e06:	e8 31 df fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125e0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e0e:	a1 b4 7c 65 f0       	mov    0xf0657cb4,%eax
f0125e13:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125e16:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125e19:	74 17                	je     f0125e32 <test_three_creation_functions+0x140>
f0125e1b:	83 ec 04             	sub    $0x4,%esp
f0125e1e:	68 74 ac 13 f0       	push   $0xf013ac74
f0125e23:	68 cc 09 00 00       	push   $0x9cc
f0125e28:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125e2d:	e8 c9 a3 fd ff       	call   f01001fb <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e32:	a1 b8 7c 65 f0       	mov    0xf0657cb8,%eax
f0125e37:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125e3a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125e3d:	83 c2 15             	add    $0x15,%edx
f0125e40:	39 d0                	cmp    %edx,%eax
f0125e42:	74 17                	je     f0125e5b <test_three_creation_functions+0x169>
f0125e44:	83 ec 04             	sub    $0x4,%esp
f0125e47:	68 dc ac 13 f0       	push   $0xf013acdc
f0125e4c:	68 ce 09 00 00       	push   $0x9ce
f0125e51:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125e56:	e8 a0 a3 fd ff       	call   f01001fb <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125e5b:	83 ec 0c             	sub    $0xc,%esp
f0125e5e:	68 00 10 00 00       	push   $0x1000
f0125e63:	e8 96 19 fe ff       	call   f01077fe <kmalloc>
f0125e68:	83 c4 10             	add    $0x10,%esp
f0125e6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125e6e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125e75:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125e78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e7d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0125e80:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125e83:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e88:	f7 75 cc             	divl   -0x34(%ebp)
f0125e8b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125e8e:	29 d0                	sub    %edx,%eax
f0125e90:	89 c1                	mov    %eax,%ecx
f0125e92:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125e99:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125e9e:	0f b6 d0             	movzbl %al,%edx
f0125ea1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125ea4:	01 d0                	add    %edx,%eax
f0125ea6:	48                   	dec    %eax
f0125ea7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125eaa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125ead:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eb2:	f7 75 c4             	divl   -0x3c(%ebp)
f0125eb5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125eb8:	29 d0                	sub    %edx,%eax
f0125eba:	01 c1                	add    %eax,%ecx
f0125ebc:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125ec3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125ec8:	0f b6 c0             	movzbl %al,%eax
f0125ecb:	c1 e0 04             	shl    $0x4,%eax
f0125ece:	89 c2                	mov    %eax,%edx
f0125ed0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125ed3:	01 d0                	add    %edx,%eax
f0125ed5:	48                   	dec    %eax
f0125ed6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125ed9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125edc:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ee1:	f7 75 bc             	divl   -0x44(%ebp)
f0125ee4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125ee7:	29 d0                	sub    %edx,%eax
f0125ee9:	01 c8                	add    %ecx,%eax
f0125eeb:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125ef1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125ef4:	39 c2                	cmp    %eax,%edx
f0125ef6:	74 17                	je     f0125f0f <test_three_creation_functions+0x21d>
f0125ef8:	83 ec 04             	sub    $0x4,%esp
f0125efb:	68 40 b8 13 f0       	push   $0xf013b840
f0125f00:	68 d2 09 00 00       	push   $0x9d2
f0125f05:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125f0a:	e8 ec a2 fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125f0f:	83 ec 0c             	sub    $0xc,%esp
f0125f12:	68 b0 b8 13 f0       	push   $0xf013b8b0
f0125f17:	e8 66 ad fd ff       	call   f0100c82 <cprintf>
f0125f1c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125f1f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125f24:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125f27:	5b                   	pop    %ebx
f0125f28:	5e                   	pop    %esi
f0125f29:	5f                   	pop    %edi
f0125f2a:	5d                   	pop    %ebp
f0125f2b:	c3                   	ret    

f0125f2c <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125f2c:	55                   	push   %ebp
f0125f2d:	89 e5                	mov    %esp,%ebp
f0125f2f:	57                   	push   %edi
f0125f30:	53                   	push   %ebx
f0125f31:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0125f37:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125f3b:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125f3f:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125f45:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125f4b:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125f52:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125f59:	e8 6b 69 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125f5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125f61:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0125f67:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125f6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f71:	89 d7                	mov    %edx,%edi
f0125f73:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125f75:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0125f7b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125f80:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f85:	89 d7                	mov    %edx,%edi
f0125f87:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125f89:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125f8f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125f94:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f99:	89 d7                	mov    %edx,%edi
f0125f9b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125f9d:	e8 27 69 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0125fa2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125fa5:	e8 92 dd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125faa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125fad:	83 ec 0c             	sub    $0xc,%esp
f0125fb0:	68 00 fc 1f 00       	push   $0x1ffc00
f0125fb5:	e8 44 18 fe ff       	call   f01077fe <kmalloc>
f0125fba:	83 c4 10             	add    $0x10,%esp
f0125fbd:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125fc3:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125fc9:	89 c1                	mov    %eax,%ecx
f0125fcb:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125fd2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125fd5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125fda:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125fdd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fe5:	f7 75 c8             	divl   -0x38(%ebp)
f0125fe8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125feb:	29 d0                	sub    %edx,%eax
f0125fed:	89 c3                	mov    %eax,%ebx
f0125fef:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125ff6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125ffb:	0f b6 d0             	movzbl %al,%edx
f0125ffe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126001:	01 d0                	add    %edx,%eax
f0126003:	48                   	dec    %eax
f0126004:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126007:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012600a:	ba 00 00 00 00       	mov    $0x0,%edx
f012600f:	f7 75 c0             	divl   -0x40(%ebp)
f0126012:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126015:	29 d0                	sub    %edx,%eax
f0126017:	01 c3                	add    %eax,%ebx
f0126019:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126020:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126025:	0f b6 c0             	movzbl %al,%eax
f0126028:	c1 e0 04             	shl    $0x4,%eax
f012602b:	89 c2                	mov    %eax,%edx
f012602d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126030:	01 d0                	add    %edx,%eax
f0126032:	48                   	dec    %eax
f0126033:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126036:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126039:	ba 00 00 00 00       	mov    $0x0,%edx
f012603e:	f7 75 b8             	divl   -0x48(%ebp)
f0126041:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126044:	29 d0                	sub    %edx,%eax
f0126046:	01 d8                	add    %ebx,%eax
f0126048:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012604d:	39 c1                	cmp    %eax,%ecx
f012604f:	74 17                	je     f0126068 <test_kfreeall+0x13c>
f0126051:	83 ec 04             	sub    $0x4,%esp
f0126054:	68 40 ad 13 f0       	push   $0xf013ad40
f0126059:	68 f9 09 00 00       	push   $0x9f9
f012605e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126063:	e8 93 a1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126068:	e8 cf dc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012606d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126070:	74 17                	je     f0126089 <test_kfreeall+0x15d>
f0126072:	83 ec 04             	sub    $0x4,%esp
f0126075:	68 74 ac 13 f0       	push   $0xf013ac74
f012607a:	68 fa 09 00 00       	push   $0x9fa
f012607f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126084:	e8 72 a1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126089:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012608c:	e8 38 68 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126091:	29 c3                	sub    %eax,%ebx
f0126093:	89 d8                	mov    %ebx,%eax
f0126095:	3d 00 02 00 00       	cmp    $0x200,%eax
f012609a:	74 17                	je     f01260b3 <test_kfreeall+0x187>
f012609c:	83 ec 04             	sub    $0x4,%esp
f012609f:	68 dc ac 13 f0       	push   $0xf013acdc
f01260a4:	68 fb 09 00 00       	push   $0x9fb
f01260a9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01260ae:	e8 48 a1 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01260b3:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01260ba:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01260bd:	e8 07 68 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01260c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01260c5:	e8 72 dc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01260ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01260cd:	83 ec 0c             	sub    $0xc,%esp
f01260d0:	68 00 fc 1f 00       	push   $0x1ffc00
f01260d5:	e8 24 17 fe ff       	call   f01077fe <kmalloc>
f01260da:	83 c4 10             	add    $0x10,%esp
f01260dd:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01260e3:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01260e9:	89 c1                	mov    %eax,%ecx
f01260eb:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01260f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01260f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260fa:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01260fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126100:	ba 00 00 00 00       	mov    $0x0,%edx
f0126105:	f7 75 b0             	divl   -0x50(%ebp)
f0126108:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012610b:	29 d0                	sub    %edx,%eax
f012610d:	89 c3                	mov    %eax,%ebx
f012610f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126116:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012611b:	0f b6 d0             	movzbl %al,%edx
f012611e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126121:	01 d0                	add    %edx,%eax
f0126123:	48                   	dec    %eax
f0126124:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126127:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012612a:	ba 00 00 00 00       	mov    $0x0,%edx
f012612f:	f7 75 a8             	divl   -0x58(%ebp)
f0126132:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126135:	29 d0                	sub    %edx,%eax
f0126137:	01 c3                	add    %eax,%ebx
f0126139:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126140:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126145:	0f b6 c0             	movzbl %al,%eax
f0126148:	c1 e0 04             	shl    $0x4,%eax
f012614b:	89 c2                	mov    %eax,%edx
f012614d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126150:	01 d0                	add    %edx,%eax
f0126152:	48                   	dec    %eax
f0126153:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126156:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126159:	ba 00 00 00 00       	mov    $0x0,%edx
f012615e:	f7 75 a0             	divl   -0x60(%ebp)
f0126161:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126164:	29 d0                	sub    %edx,%eax
f0126166:	01 d8                	add    %ebx,%eax
f0126168:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012616d:	39 c1                	cmp    %eax,%ecx
f012616f:	74 17                	je     f0126188 <test_kfreeall+0x25c>
f0126171:	83 ec 04             	sub    $0x4,%esp
f0126174:	68 40 ad 13 f0       	push   $0xf013ad40
f0126179:	68 02 0a 00 00       	push   $0xa02
f012617e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126183:	e8 73 a0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126188:	e8 af db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012618d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126190:	74 17                	je     f01261a9 <test_kfreeall+0x27d>
f0126192:	83 ec 04             	sub    $0x4,%esp
f0126195:	68 74 ac 13 f0       	push   $0xf013ac74
f012619a:	68 03 0a 00 00       	push   $0xa03
f012619f:	68 5a ac 13 f0       	push   $0xf013ac5a
f01261a4:	e8 52 a0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01261a9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01261ac:	e8 18 67 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01261b1:	29 c3                	sub    %eax,%ebx
f01261b3:	89 d8                	mov    %ebx,%eax
f01261b5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01261ba:	74 17                	je     f01261d3 <test_kfreeall+0x2a7>
f01261bc:	83 ec 04             	sub    $0x4,%esp
f01261bf:	68 dc ac 13 f0       	push   $0xf013acdc
f01261c4:	68 04 0a 00 00       	push   $0xa04
f01261c9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01261ce:	e8 28 a0 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01261d3:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01261da:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01261dd:	e8 e7 66 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01261e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261e5:	e8 52 db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01261ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01261ed:	83 ec 0c             	sub    $0xc,%esp
f01261f0:	68 00 08 00 00       	push   $0x800
f01261f5:	e8 04 16 fe ff       	call   f01077fe <kmalloc>
f01261fa:	83 c4 10             	add    $0x10,%esp
f01261fd:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126203:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126209:	89 c1                	mov    %eax,%ecx
f012620b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126212:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126215:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012621a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012621d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126220:	ba 00 00 00 00       	mov    $0x0,%edx
f0126225:	f7 75 98             	divl   -0x68(%ebp)
f0126228:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012622b:	29 d0                	sub    %edx,%eax
f012622d:	89 c3                	mov    %eax,%ebx
f012622f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126236:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012623b:	0f b6 d0             	movzbl %al,%edx
f012623e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126241:	01 d0                	add    %edx,%eax
f0126243:	48                   	dec    %eax
f0126244:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126247:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012624a:	ba 00 00 00 00       	mov    $0x0,%edx
f012624f:	f7 75 90             	divl   -0x70(%ebp)
f0126252:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126255:	29 d0                	sub    %edx,%eax
f0126257:	01 c3                	add    %eax,%ebx
f0126259:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126260:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126265:	0f b6 c0             	movzbl %al,%eax
f0126268:	c1 e0 04             	shl    $0x4,%eax
f012626b:	89 c2                	mov    %eax,%edx
f012626d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126270:	01 d0                	add    %edx,%eax
f0126272:	48                   	dec    %eax
f0126273:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126276:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126279:	ba 00 00 00 00       	mov    $0x0,%edx
f012627e:	f7 75 88             	divl   -0x78(%ebp)
f0126281:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126284:	29 d0                	sub    %edx,%eax
f0126286:	01 d8                	add    %ebx,%eax
f0126288:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012628d:	39 c1                	cmp    %eax,%ecx
f012628f:	74 17                	je     f01262a8 <test_kfreeall+0x37c>
f0126291:	83 ec 04             	sub    $0x4,%esp
f0126294:	68 40 ad 13 f0       	push   $0xf013ad40
f0126299:	68 0b 0a 00 00       	push   $0xa0b
f012629e:	68 5a ac 13 f0       	push   $0xf013ac5a
f01262a3:	e8 53 9f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262a8:	e8 8f da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01262ad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262b0:	74 17                	je     f01262c9 <test_kfreeall+0x39d>
f01262b2:	83 ec 04             	sub    $0x4,%esp
f01262b5:	68 74 ac 13 f0       	push   $0xf013ac74
f01262ba:	68 0c 0a 00 00       	push   $0xa0c
f01262bf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01262c4:	e8 32 9f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01262c9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01262cc:	e8 f8 65 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01262d1:	29 c3                	sub    %eax,%ebx
f01262d3:	89 d8                	mov    %ebx,%eax
f01262d5:	83 f8 01             	cmp    $0x1,%eax
f01262d8:	74 17                	je     f01262f1 <test_kfreeall+0x3c5>
f01262da:	83 ec 04             	sub    $0x4,%esp
f01262dd:	68 dc ac 13 f0       	push   $0xf013acdc
f01262e2:	68 0d 0a 00 00       	push   $0xa0d
f01262e7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01262ec:	e8 0a 9f fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01262f1:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01262f8:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01262fb:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126301:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126304:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012630b:	eb 0e                	jmp    f012631b <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f012630d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126310:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126313:	01 d0                	add    %edx,%eax
f0126315:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126318:	ff 45 f4             	incl   -0xc(%ebp)
f012631b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126321:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126324:	7f e7                	jg     f012630d <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126326:	e8 9e 65 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012632b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012632e:	e8 09 da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126333:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126336:	83 ec 0c             	sub    $0xc,%esp
f0126339:	68 00 08 00 00       	push   $0x800
f012633e:	e8 bb 14 fe ff       	call   f01077fe <kmalloc>
f0126343:	83 c4 10             	add    $0x10,%esp
f0126346:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012634c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126352:	89 c1                	mov    %eax,%ecx
f0126354:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012635b:	10 00 00 
f012635e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126364:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126369:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012636f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126375:	ba 00 00 00 00       	mov    $0x0,%edx
f012637a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126380:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126386:	29 d0                	sub    %edx,%eax
f0126388:	89 c3                	mov    %eax,%ebx
f012638a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126391:	10 00 00 
f0126394:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126399:	0f b6 d0             	movzbl %al,%edx
f012639c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01263a2:	01 d0                	add    %edx,%eax
f01263a4:	48                   	dec    %eax
f01263a5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01263ab:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01263b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01263b6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01263bc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01263c2:	29 d0                	sub    %edx,%eax
f01263c4:	01 c3                	add    %eax,%ebx
f01263c6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01263cd:	10 00 00 
f01263d0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01263d5:	0f b6 c0             	movzbl %al,%eax
f01263d8:	c1 e0 04             	shl    $0x4,%eax
f01263db:	89 c2                	mov    %eax,%edx
f01263dd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01263e3:	01 d0                	add    %edx,%eax
f01263e5:	48                   	dec    %eax
f01263e6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01263ec:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01263f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01263f7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01263fd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126403:	29 d0                	sub    %edx,%eax
f0126405:	01 d8                	add    %ebx,%eax
f0126407:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012640c:	39 c1                	cmp    %eax,%ecx
f012640e:	74 17                	je     f0126427 <test_kfreeall+0x4fb>
f0126410:	83 ec 04             	sub    $0x4,%esp
f0126413:	68 40 ad 13 f0       	push   $0xf013ad40
f0126418:	68 19 0a 00 00       	push   $0xa19
f012641d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126422:	e8 d4 9d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126427:	e8 10 d9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012642c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012642f:	74 17                	je     f0126448 <test_kfreeall+0x51c>
f0126431:	83 ec 04             	sub    $0x4,%esp
f0126434:	68 74 ac 13 f0       	push   $0xf013ac74
f0126439:	68 1a 0a 00 00       	push   $0xa1a
f012643e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126443:	e8 b3 9d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126448:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012644b:	e8 79 64 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126450:	29 c3                	sub    %eax,%ebx
f0126452:	89 d8                	mov    %ebx,%eax
f0126454:	83 f8 01             	cmp    $0x1,%eax
f0126457:	74 17                	je     f0126470 <test_kfreeall+0x544>
f0126459:	83 ec 04             	sub    $0x4,%esp
f012645c:	68 dc ac 13 f0       	push   $0xf013acdc
f0126461:	68 1b 0a 00 00       	push   $0xa1b
f0126466:	68 5a ac 13 f0       	push   $0xf013ac5a
f012646b:	e8 8b 9d fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126470:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126477:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012647a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126480:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126483:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012648a:	eb 0e                	jmp    f012649a <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f012648c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012648f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126492:	01 d0                	add    %edx,%eax
f0126494:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126497:	ff 45 f4             	incl   -0xc(%ebp)
f012649a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01264a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01264a3:	7f e7                	jg     f012648c <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01264a5:	e8 1f 64 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01264aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264ad:	e8 8a d8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01264b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01264b5:	83 ec 0c             	sub    $0xc,%esp
f01264b8:	68 00 1c 00 00       	push   $0x1c00
f01264bd:	e8 3c 13 fe ff       	call   f01077fe <kmalloc>
f01264c2:	83 c4 10             	add    $0x10,%esp
f01264c5:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264cb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01264d1:	89 c1                	mov    %eax,%ecx
f01264d3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01264da:	10 00 00 
f01264dd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01264e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264e8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01264ee:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01264f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01264f9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01264ff:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126505:	29 d0                	sub    %edx,%eax
f0126507:	89 c3                	mov    %eax,%ebx
f0126509:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126510:	10 00 00 
f0126513:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126518:	0f b6 d0             	movzbl %al,%edx
f012651b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126521:	01 d0                	add    %edx,%eax
f0126523:	48                   	dec    %eax
f0126524:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012652a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126530:	ba 00 00 00 00       	mov    $0x0,%edx
f0126535:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012653b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126541:	29 d0                	sub    %edx,%eax
f0126543:	01 c3                	add    %eax,%ebx
f0126545:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012654c:	10 00 00 
f012654f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126554:	0f b6 c0             	movzbl %al,%eax
f0126557:	c1 e0 04             	shl    $0x4,%eax
f012655a:	89 c2                	mov    %eax,%edx
f012655c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126562:	01 d0                	add    %edx,%eax
f0126564:	48                   	dec    %eax
f0126565:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012656b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126571:	ba 00 00 00 00       	mov    $0x0,%edx
f0126576:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012657c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126582:	29 d0                	sub    %edx,%eax
f0126584:	01 d8                	add    %ebx,%eax
f0126586:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012658b:	39 c1                	cmp    %eax,%ecx
f012658d:	74 17                	je     f01265a6 <test_kfreeall+0x67a>
f012658f:	83 ec 04             	sub    $0x4,%esp
f0126592:	68 40 ad 13 f0       	push   $0xf013ad40
f0126597:	68 27 0a 00 00       	push   $0xa27
f012659c:	68 5a ac 13 f0       	push   $0xf013ac5a
f01265a1:	e8 55 9c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265a6:	e8 91 d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01265ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265ae:	74 17                	je     f01265c7 <test_kfreeall+0x69b>
f01265b0:	83 ec 04             	sub    $0x4,%esp
f01265b3:	68 74 ac 13 f0       	push   $0xf013ac74
f01265b8:	68 28 0a 00 00       	push   $0xa28
f01265bd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01265c2:	e8 34 9c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265ca:	e8 fa 62 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01265cf:	29 c3                	sub    %eax,%ebx
f01265d1:	89 d8                	mov    %ebx,%eax
f01265d3:	83 f8 02             	cmp    $0x2,%eax
f01265d6:	74 17                	je     f01265ef <test_kfreeall+0x6c3>
f01265d8:	83 ec 04             	sub    $0x4,%esp
f01265db:	68 dc ac 13 f0       	push   $0xf013acdc
f01265e0:	68 29 0a 00 00       	push   $0xa29
f01265e5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01265ea:	e8 0c 9c fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01265ef:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01265f6:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01265f9:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01265ff:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126602:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126609:	eb 0e                	jmp    f0126619 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012660b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012660e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126611:	01 d0                	add    %edx,%eax
f0126613:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126616:	ff 45 f4             	incl   -0xc(%ebp)
f0126619:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012661f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126622:	7f e7                	jg     f012660b <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126624:	e8 a0 62 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126629:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012662c:	e8 0b d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126631:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126634:	83 ec 0c             	sub    $0xc,%esp
f0126637:	68 00 fc 2f 00       	push   $0x2ffc00
f012663c:	e8 bd 11 fe ff       	call   f01077fe <kmalloc>
f0126641:	83 c4 10             	add    $0x10,%esp
f0126644:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012664a:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126650:	89 c1                	mov    %eax,%ecx
f0126652:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0126659:	10 00 00 
f012665c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126662:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126667:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012666d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126673:	ba 00 00 00 00       	mov    $0x0,%edx
f0126678:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012667e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126684:	29 d0                	sub    %edx,%eax
f0126686:	89 c3                	mov    %eax,%ebx
f0126688:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012668f:	10 00 00 
f0126692:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126697:	0f b6 d0             	movzbl %al,%edx
f012669a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01266a0:	01 d0                	add    %edx,%eax
f01266a2:	48                   	dec    %eax
f01266a3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01266a9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01266af:	ba 00 00 00 00       	mov    $0x0,%edx
f01266b4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01266ba:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01266c0:	29 d0                	sub    %edx,%eax
f01266c2:	01 c3                	add    %eax,%ebx
f01266c4:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01266cb:	10 00 00 
f01266ce:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01266d3:	0f b6 c0             	movzbl %al,%eax
f01266d6:	c1 e0 04             	shl    $0x4,%eax
f01266d9:	89 c2                	mov    %eax,%edx
f01266db:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01266e1:	01 d0                	add    %edx,%eax
f01266e3:	48                   	dec    %eax
f01266e4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01266ea:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01266f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01266f5:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01266fb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126701:	29 d0                	sub    %edx,%eax
f0126703:	01 d8                	add    %ebx,%eax
f0126705:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012670a:	39 c1                	cmp    %eax,%ecx
f012670c:	74 17                	je     f0126725 <test_kfreeall+0x7f9>
f012670e:	83 ec 04             	sub    $0x4,%esp
f0126711:	68 40 ad 13 f0       	push   $0xf013ad40
f0126716:	68 35 0a 00 00       	push   $0xa35
f012671b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126720:	e8 d6 9a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126725:	e8 12 d6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012672a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012672d:	74 17                	je     f0126746 <test_kfreeall+0x81a>
f012672f:	83 ec 04             	sub    $0x4,%esp
f0126732:	68 74 ac 13 f0       	push   $0xf013ac74
f0126737:	68 36 0a 00 00       	push   $0xa36
f012673c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126741:	e8 b5 9a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126746:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126749:	e8 7b 61 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012674e:	29 c3                	sub    %eax,%ebx
f0126750:	89 d8                	mov    %ebx,%eax
f0126752:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126757:	74 17                	je     f0126770 <test_kfreeall+0x844>
f0126759:	83 ec 04             	sub    $0x4,%esp
f012675c:	68 dc ac 13 f0       	push   $0xf013acdc
f0126761:	68 37 0a 00 00       	push   $0xa37
f0126766:	68 5a ac 13 f0       	push   $0xf013ac5a
f012676b:	e8 8b 9a fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126770:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0126777:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012677a:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126780:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126783:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012678a:	eb 0e                	jmp    f012679a <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f012678c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012678f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126792:	01 d0                	add    %edx,%eax
f0126794:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126797:	ff 45 f4             	incl   -0xc(%ebp)
f012679a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01267a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267a3:	7f e7                	jg     f012678c <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01267a5:	e8 1f 61 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01267aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267ad:	e8 8a d5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01267b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01267b5:	83 ec 0c             	sub    $0xc,%esp
f01267b8:	68 00 fc 5f 00       	push   $0x5ffc00
f01267bd:	e8 3c 10 fe ff       	call   f01077fe <kmalloc>
f01267c2:	83 c4 10             	add    $0x10,%esp
f01267c5:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267cb:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01267d1:	89 c1                	mov    %eax,%ecx
f01267d3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01267da:	10 00 00 
f01267dd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01267e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267e8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01267ee:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01267f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01267f9:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01267ff:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126805:	29 d0                	sub    %edx,%eax
f0126807:	89 c3                	mov    %eax,%ebx
f0126809:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126810:	10 00 00 
f0126813:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126818:	0f b6 d0             	movzbl %al,%edx
f012681b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126821:	01 d0                	add    %edx,%eax
f0126823:	48                   	dec    %eax
f0126824:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012682a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126830:	ba 00 00 00 00       	mov    $0x0,%edx
f0126835:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012683b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126841:	29 d0                	sub    %edx,%eax
f0126843:	01 c3                	add    %eax,%ebx
f0126845:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012684c:	10 00 00 
f012684f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126854:	0f b6 c0             	movzbl %al,%eax
f0126857:	c1 e0 04             	shl    $0x4,%eax
f012685a:	89 c2                	mov    %eax,%edx
f012685c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126862:	01 d0                	add    %edx,%eax
f0126864:	48                   	dec    %eax
f0126865:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012686b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126871:	ba 00 00 00 00       	mov    $0x0,%edx
f0126876:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012687c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126882:	29 d0                	sub    %edx,%eax
f0126884:	01 d8                	add    %ebx,%eax
f0126886:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012688b:	39 c1                	cmp    %eax,%ecx
f012688d:	74 17                	je     f01268a6 <test_kfreeall+0x97a>
f012688f:	83 ec 04             	sub    $0x4,%esp
f0126892:	68 40 ad 13 f0       	push   $0xf013ad40
f0126897:	68 43 0a 00 00       	push   $0xa43
f012689c:	68 5a ac 13 f0       	push   $0xf013ac5a
f01268a1:	e8 55 99 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268a6:	e8 91 d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01268ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01268ae:	74 17                	je     f01268c7 <test_kfreeall+0x99b>
f01268b0:	83 ec 04             	sub    $0x4,%esp
f01268b3:	68 74 ac 13 f0       	push   $0xf013ac74
f01268b8:	68 44 0a 00 00       	push   $0xa44
f01268bd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01268c2:	e8 34 99 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01268ca:	e8 fa 5f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01268cf:	29 c3                	sub    %eax,%ebx
f01268d1:	89 d8                	mov    %ebx,%eax
f01268d3:	3d 00 06 00 00       	cmp    $0x600,%eax
f01268d8:	74 17                	je     f01268f1 <test_kfreeall+0x9c5>
f01268da:	83 ec 04             	sub    $0x4,%esp
f01268dd:	68 dc ac 13 f0       	push   $0xf013acdc
f01268e2:	68 45 0a 00 00       	push   $0xa45
f01268e7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01268ec:	e8 0a 99 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01268f1:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01268f8:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01268fb:	e8 c9 5f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126900:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126903:	e8 34 d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126908:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012690b:	83 ec 0c             	sub    $0xc,%esp
f012690e:	68 00 38 00 00       	push   $0x3800
f0126913:	e8 e6 0e fe ff       	call   f01077fe <kmalloc>
f0126918:	83 c4 10             	add    $0x10,%esp
f012691b:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126921:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126927:	89 c1                	mov    %eax,%ecx
f0126929:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126930:	10 00 00 
f0126933:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126939:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012693e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126944:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012694a:	ba 00 00 00 00       	mov    $0x0,%edx
f012694f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126955:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012695b:	29 d0                	sub    %edx,%eax
f012695d:	89 c3                	mov    %eax,%ebx
f012695f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126966:	10 00 00 
f0126969:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012696e:	0f b6 d0             	movzbl %al,%edx
f0126971:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126977:	01 d0                	add    %edx,%eax
f0126979:	48                   	dec    %eax
f012697a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126980:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126986:	ba 00 00 00 00       	mov    $0x0,%edx
f012698b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126991:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126997:	29 d0                	sub    %edx,%eax
f0126999:	01 c3                	add    %eax,%ebx
f012699b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01269a2:	10 00 00 
f01269a5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01269aa:	0f b6 c0             	movzbl %al,%eax
f01269ad:	c1 e0 04             	shl    $0x4,%eax
f01269b0:	89 c2                	mov    %eax,%edx
f01269b2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01269b8:	01 d0                	add    %edx,%eax
f01269ba:	48                   	dec    %eax
f01269bb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01269c1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01269c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01269cc:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01269d2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01269d8:	29 d0                	sub    %edx,%eax
f01269da:	01 d8                	add    %ebx,%eax
f01269dc:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01269e1:	39 c1                	cmp    %eax,%ecx
f01269e3:	74 17                	je     f01269fc <test_kfreeall+0xad0>
f01269e5:	83 ec 04             	sub    $0x4,%esp
f01269e8:	68 40 ad 13 f0       	push   $0xf013ad40
f01269ed:	68 4c 0a 00 00       	push   $0xa4c
f01269f2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01269f7:	e8 ff 97 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269fc:	e8 3b d3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a01:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a04:	74 17                	je     f0126a1d <test_kfreeall+0xaf1>
f0126a06:	83 ec 04             	sub    $0x4,%esp
f0126a09:	68 74 ac 13 f0       	push   $0xf013ac74
f0126a0e:	68 4d 0a 00 00       	push   $0xa4d
f0126a13:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126a18:	e8 de 97 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a1d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a20:	e8 a4 5e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126a25:	29 c3                	sub    %eax,%ebx
f0126a27:	89 d8                	mov    %ebx,%eax
f0126a29:	83 f8 04             	cmp    $0x4,%eax
f0126a2c:	74 17                	je     f0126a45 <test_kfreeall+0xb19>
f0126a2e:	83 ec 04             	sub    $0x4,%esp
f0126a31:	68 dc ac 13 f0       	push   $0xf013acdc
f0126a36:	68 4e 0a 00 00       	push   $0xa4e
f0126a3b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126a40:	e8 b6 97 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126a45:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126a4c:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126a4f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126a55:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126a58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a5f:	eb 0e                	jmp    f0126a6f <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0126a61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126a64:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a67:	01 d0                	add    %edx,%eax
f0126a69:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126a6c:	ff 45 f4             	incl   -0xc(%ebp)
f0126a6f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126a75:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a78:	7f e7                	jg     f0126a61 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126a7a:	e8 4a 5e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126a7f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126a85:	e8 b2 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a8a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0126a90:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126a96:	83 ec 0c             	sub    $0xc,%esp
f0126a99:	50                   	push   %eax
f0126a9a:	e8 21 0e fe ff       	call   f01078c0 <kfree>
f0126a9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126aa2:	e8 95 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126aa7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126aad:	74 17                	je     f0126ac6 <test_kfreeall+0xb9a>
f0126aaf:	83 ec 04             	sub    $0x4,%esp
f0126ab2:	68 74 ac 13 f0       	push   $0xf013ac74
f0126ab7:	68 5d 0a 00 00       	push   $0xa5d
f0126abc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126ac1:	e8 35 97 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126ac6:	e8 fe 5d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126acb:	89 c2                	mov    %eax,%edx
f0126acd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126ad3:	29 c2                	sub    %eax,%edx
f0126ad5:	89 d0                	mov    %edx,%eax
f0126ad7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126adc:	74 17                	je     f0126af5 <test_kfreeall+0xbc9>
f0126ade:	83 ec 04             	sub    $0x4,%esp
f0126ae1:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0126ae6:	68 5e 0a 00 00       	push   $0xa5e
f0126aeb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126af0:	e8 06 97 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126af5:	e8 cf 5d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126afa:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b00:	e8 37 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b05:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126b0b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126b11:	83 ec 0c             	sub    $0xc,%esp
f0126b14:	50                   	push   %eax
f0126b15:	e8 a6 0d fe ff       	call   f01078c0 <kfree>
f0126b1a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b1d:	e8 1a d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b22:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126b28:	74 17                	je     f0126b41 <test_kfreeall+0xc15>
f0126b2a:	83 ec 04             	sub    $0x4,%esp
f0126b2d:	68 74 ac 13 f0       	push   $0xf013ac74
f0126b32:	68 64 0a 00 00       	push   $0xa64
f0126b37:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126b3c:	e8 ba 96 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126b41:	e8 83 5d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126b46:	89 c2                	mov    %eax,%edx
f0126b48:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126b4e:	29 c2                	sub    %eax,%edx
f0126b50:	89 d0                	mov    %edx,%eax
f0126b52:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b57:	74 17                	je     f0126b70 <test_kfreeall+0xc44>
f0126b59:	83 ec 04             	sub    $0x4,%esp
f0126b5c:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0126b61:	68 65 0a 00 00       	push   $0xa65
f0126b66:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126b6b:	e8 8b 96 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b70:	e8 54 5d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126b75:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b7b:	e8 bc d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b80:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126b86:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126b8c:	83 ec 0c             	sub    $0xc,%esp
f0126b8f:	50                   	push   %eax
f0126b90:	e8 2b 0d fe ff       	call   f01078c0 <kfree>
f0126b95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b98:	e8 9f d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b9d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126ba3:	74 17                	je     f0126bbc <test_kfreeall+0xc90>
f0126ba5:	83 ec 04             	sub    $0x4,%esp
f0126ba8:	68 74 ac 13 f0       	push   $0xf013ac74
f0126bad:	68 6b 0a 00 00       	push   $0xa6b
f0126bb2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126bb7:	e8 3f 96 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126bbc:	e8 08 5d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126bc1:	89 c2                	mov    %eax,%edx
f0126bc3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126bc9:	29 c2                	sub    %eax,%edx
f0126bcb:	89 d0                	mov    %edx,%eax
f0126bcd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126bd2:	74 17                	je     f0126beb <test_kfreeall+0xcbf>
f0126bd4:	83 ec 04             	sub    $0x4,%esp
f0126bd7:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0126bdc:	68 6c 0a 00 00       	push   $0xa6c
f0126be1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126be6:	e8 10 96 fd ff       	call   f01001fb <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126beb:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126bf1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126bf4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126bfb:	eb 1e                	jmp    f0126c1b <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126bfd:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126c03:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126c06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c09:	01 c8                	add    %ecx,%eax
f0126c0b:	8a 00                	mov    (%eax),%al
f0126c0d:	0f be c0             	movsbl %al,%eax
f0126c10:	01 d0                	add    %edx,%eax
f0126c12:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126c18:	ff 45 f4             	incl   -0xc(%ebp)
f0126c1b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126c21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c24:	7f d7                	jg     f0126bfd <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126c26:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126c2c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126c32:	01 c0                	add    %eax,%eax
f0126c34:	39 c2                	cmp    %eax,%edx
f0126c36:	74 17                	je     f0126c4f <test_kfreeall+0xd23>
f0126c38:	83 ec 04             	sub    $0x4,%esp
f0126c3b:	68 40 b4 13 f0       	push   $0xf013b440
f0126c40:	68 78 0a 00 00       	push   $0xa78
f0126c45:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126c4a:	e8 ac 95 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126c4f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126c55:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126c58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c5f:	eb 1e                	jmp    f0126c7f <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0126c61:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126c67:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126c6a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c6d:	01 c8                	add    %ecx,%eax
f0126c6f:	8a 00                	mov    (%eax),%al
f0126c71:	0f be c0             	movsbl %al,%eax
f0126c74:	01 d0                	add    %edx,%eax
f0126c76:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126c7c:	ff 45 f4             	incl   -0xc(%ebp)
f0126c7f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126c85:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c88:	7f d7                	jg     f0126c61 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126c8a:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126c90:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126c96:	89 c1                	mov    %eax,%ecx
f0126c98:	01 c9                	add    %ecx,%ecx
f0126c9a:	01 c8                	add    %ecx,%eax
f0126c9c:	39 c2                	cmp    %eax,%edx
f0126c9e:	74 17                	je     f0126cb7 <test_kfreeall+0xd8b>
f0126ca0:	83 ec 04             	sub    $0x4,%esp
f0126ca3:	68 40 b4 13 f0       	push   $0xf013b440
f0126ca8:	68 80 0a 00 00       	push   $0xa80
f0126cad:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126cb2:	e8 44 95 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126cb7:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126cbd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126cc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cc7:	eb 1e                	jmp    f0126ce7 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126cc9:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126ccf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126cd2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cd5:	01 c8                	add    %ecx,%eax
f0126cd7:	8a 00                	mov    (%eax),%al
f0126cd9:	0f be c0             	movsbl %al,%eax
f0126cdc:	01 d0                	add    %edx,%eax
f0126cde:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126ce4:	ff 45 f4             	incl   -0xc(%ebp)
f0126ce7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126ced:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cf0:	7f d7                	jg     f0126cc9 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126cf2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126cf8:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126cfe:	c1 e2 02             	shl    $0x2,%edx
f0126d01:	39 d0                	cmp    %edx,%eax
f0126d03:	74 17                	je     f0126d1c <test_kfreeall+0xdf0>
f0126d05:	83 ec 04             	sub    $0x4,%esp
f0126d08:	68 40 b4 13 f0       	push   $0xf013b440
f0126d0d:	68 88 0a 00 00       	push   $0xa88
f0126d12:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126d17:	e8 df 94 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126d1c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126d22:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126d25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d2c:	eb 1e                	jmp    f0126d4c <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126d2e:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126d34:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126d37:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d3a:	01 c8                	add    %ecx,%eax
f0126d3c:	8a 00                	mov    (%eax),%al
f0126d3e:	0f be c0             	movsbl %al,%eax
f0126d41:	01 d0                	add    %edx,%eax
f0126d43:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126d49:	ff 45 f4             	incl   -0xc(%ebp)
f0126d4c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126d52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d55:	7f d7                	jg     f0126d2e <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126d57:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126d5d:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0126d63:	89 d0                	mov    %edx,%eax
f0126d65:	c1 e0 02             	shl    $0x2,%eax
f0126d68:	01 d0                	add    %edx,%eax
f0126d6a:	39 c1                	cmp    %eax,%ecx
f0126d6c:	74 17                	je     f0126d85 <test_kfreeall+0xe59>
f0126d6e:	83 ec 04             	sub    $0x4,%esp
f0126d71:	68 40 b4 13 f0       	push   $0xf013b440
f0126d76:	68 90 0a 00 00       	push   $0xa90
f0126d7b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126d80:	e8 76 94 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126d85:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126d8b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126d8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d95:	eb 1e                	jmp    f0126db5 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126d97:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126d9d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126da0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126da3:	01 c8                	add    %ecx,%eax
f0126da5:	8a 00                	mov    (%eax),%al
f0126da7:	0f be c0             	movsbl %al,%eax
f0126daa:	01 d0                	add    %edx,%eax
f0126dac:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126db2:	ff 45 f4             	incl   -0xc(%ebp)
f0126db5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126dbb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126dbe:	7f d7                	jg     f0126d97 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126dc0:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126dc6:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126dcc:	89 d0                	mov    %edx,%eax
f0126dce:	01 c0                	add    %eax,%eax
f0126dd0:	01 d0                	add    %edx,%eax
f0126dd2:	01 c0                	add    %eax,%eax
f0126dd4:	01 d0                	add    %edx,%eax
f0126dd6:	39 c1                	cmp    %eax,%ecx
f0126dd8:	74 17                	je     f0126df1 <test_kfreeall+0xec5>
f0126dda:	83 ec 04             	sub    $0x4,%esp
f0126ddd:	68 40 b4 13 f0       	push   $0xf013b440
f0126de2:	68 98 0a 00 00       	push   $0xa98
f0126de7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126dec:	e8 0a 94 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126df1:	e8 d3 5a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126df6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126df9:	e8 3e cf fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126dfe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126e01:	83 ec 0c             	sub    $0xc,%esp
f0126e04:	68 00 50 00 00       	push   $0x5000
f0126e09:	e8 f0 09 fe ff       	call   f01077fe <kmalloc>
f0126e0e:	83 c4 10             	add    $0x10,%esp
f0126e11:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e17:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126e1d:	89 c1                	mov    %eax,%ecx
f0126e1f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126e26:	10 00 00 
f0126e29:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126e2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e34:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126e3a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126e40:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e45:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126e4b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126e51:	29 d0                	sub    %edx,%eax
f0126e53:	89 c3                	mov    %eax,%ebx
f0126e55:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126e5c:	10 00 00 
f0126e5f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126e64:	0f b6 d0             	movzbl %al,%edx
f0126e67:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126e6d:	01 d0                	add    %edx,%eax
f0126e6f:	48                   	dec    %eax
f0126e70:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126e76:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126e7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e81:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126e87:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126e8d:	29 d0                	sub    %edx,%eax
f0126e8f:	01 c3                	add    %eax,%ebx
f0126e91:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126e98:	10 00 00 
f0126e9b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126ea0:	0f b6 c0             	movzbl %al,%eax
f0126ea3:	c1 e0 04             	shl    $0x4,%eax
f0126ea6:	89 c2                	mov    %eax,%edx
f0126ea8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126eae:	01 d0                	add    %edx,%eax
f0126eb0:	48                   	dec    %eax
f0126eb1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126eb7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126ebd:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ec2:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126ec8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126ece:	29 d0                	sub    %edx,%eax
f0126ed0:	01 d8                	add    %ebx,%eax
f0126ed2:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126ed7:	39 c1                	cmp    %eax,%ecx
f0126ed9:	74 17                	je     f0126ef2 <test_kfreeall+0xfc6>
f0126edb:	83 ec 04             	sub    $0x4,%esp
f0126ede:	68 40 ad 13 f0       	push   $0xf013ad40
f0126ee3:	68 a1 0a 00 00       	push   $0xaa1
f0126ee8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126eed:	e8 09 93 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ef2:	e8 45 ce fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126ef7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126efa:	74 17                	je     f0126f13 <test_kfreeall+0xfe7>
f0126efc:	83 ec 04             	sub    $0x4,%esp
f0126eff:	68 74 ac 13 f0       	push   $0xf013ac74
f0126f04:	68 a2 0a 00 00       	push   $0xaa2
f0126f09:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126f0e:	e8 e8 92 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f13:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f16:	e8 ae 59 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126f1b:	29 c3                	sub    %eax,%ebx
f0126f1d:	89 d8                	mov    %ebx,%eax
f0126f1f:	83 f8 05             	cmp    $0x5,%eax
f0126f22:	74 17                	je     f0126f3b <test_kfreeall+0x100f>
f0126f24:	83 ec 04             	sub    $0x4,%esp
f0126f27:	68 dc ac 13 f0       	push   $0xf013acdc
f0126f2c:	68 a3 0a 00 00       	push   $0xaa3
f0126f31:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126f36:	e8 c0 92 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0126f3b:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0126f42:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126f45:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126f4b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126f4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f55:	eb 0e                	jmp    f0126f65 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0126f57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126f5a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f5d:	01 d0                	add    %edx,%eax
f0126f5f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126f62:	ff 45 f4             	incl   -0xc(%ebp)
f0126f65:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126f6b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f6e:	7f e7                	jg     f0126f57 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126f70:	e8 54 59 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0126f75:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f78:	e8 bf cd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126f7d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0126f80:	83 ec 0c             	sub    $0xc,%esp
f0126f83:	68 00 00 10 00       	push   $0x100000
f0126f88:	e8 71 08 fe ff       	call   f01077fe <kmalloc>
f0126f8d:	83 c4 10             	add    $0x10,%esp
f0126f90:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f96:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126f9c:	89 c1                	mov    %eax,%ecx
f0126f9e:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126fa5:	10 00 00 
f0126fa8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126fae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126fb3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126fb9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fc4:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126fca:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fd0:	29 d0                	sub    %edx,%eax
f0126fd2:	89 c3                	mov    %eax,%ebx
f0126fd4:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126fdb:	10 00 00 
f0126fde:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126fe3:	0f b6 d0             	movzbl %al,%edx
f0126fe6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126fec:	01 d0                	add    %edx,%eax
f0126fee:	48                   	dec    %eax
f0126fef:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126ff5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126ffb:	ba 00 00 00 00       	mov    $0x0,%edx
f0127000:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127006:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012700c:	29 d0                	sub    %edx,%eax
f012700e:	01 c3                	add    %eax,%ebx
f0127010:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127017:	10 00 00 
f012701a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012701f:	0f b6 c0             	movzbl %al,%eax
f0127022:	c1 e0 04             	shl    $0x4,%eax
f0127025:	89 c2                	mov    %eax,%edx
f0127027:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012702d:	01 d0                	add    %edx,%eax
f012702f:	48                   	dec    %eax
f0127030:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127036:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012703c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127041:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127047:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012704d:	29 d0                	sub    %edx,%eax
f012704f:	01 d8                	add    %ebx,%eax
f0127051:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127056:	39 c1                	cmp    %eax,%ecx
f0127058:	74 17                	je     f0127071 <test_kfreeall+0x1145>
f012705a:	83 ec 04             	sub    $0x4,%esp
f012705d:	68 40 ad 13 f0       	push   $0xf013ad40
f0127062:	68 af 0a 00 00       	push   $0xaaf
f0127067:	68 5a ac 13 f0       	push   $0xf013ac5a
f012706c:	e8 8a 91 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127071:	e8 c6 cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127076:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127079:	74 17                	je     f0127092 <test_kfreeall+0x1166>
f012707b:	83 ec 04             	sub    $0x4,%esp
f012707e:	68 74 ac 13 f0       	push   $0xf013ac74
f0127083:	68 b0 0a 00 00       	push   $0xab0
f0127088:	68 5a ac 13 f0       	push   $0xf013ac5a
f012708d:	e8 69 91 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127092:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127095:	e8 2f 58 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012709a:	29 c3                	sub    %eax,%ebx
f012709c:	89 d8                	mov    %ebx,%eax
f012709e:	3d 00 01 00 00       	cmp    $0x100,%eax
f01270a3:	74 17                	je     f01270bc <test_kfreeall+0x1190>
f01270a5:	83 ec 04             	sub    $0x4,%esp
f01270a8:	68 dc ac 13 f0       	push   $0xf013acdc
f01270ad:	68 b1 0a 00 00       	push   $0xab1
f01270b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01270b7:	e8 3f 91 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01270bc:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01270c3:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01270c6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01270cc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01270cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01270d6:	eb 0e                	jmp    f01270e6 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f01270d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270db:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270de:	01 d0                	add    %edx,%eax
f01270e0:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01270e3:	ff 45 f4             	incl   -0xc(%ebp)
f01270e6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01270ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01270ef:	7f e7                	jg     f01270d8 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01270f1:	e8 d3 57 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01270f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270f9:	e8 3e cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01270fe:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127101:	e8 58 09 fe ff       	call   f0107a5e <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127106:	e8 31 cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012710b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012710e:	74 17                	je     f0127127 <test_kfreeall+0x11fb>
f0127110:	83 ec 04             	sub    $0x4,%esp
f0127113:	68 74 ac 13 f0       	push   $0xf013ac74
f0127118:	68 c1 0a 00 00       	push   $0xac1
f012711d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127122:	e8 d4 90 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127127:	e8 9d 57 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012712c:	89 c2                	mov    %eax,%edx
f012712e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127131:	89 d1                	mov    %edx,%ecx
f0127133:	29 c1                	sub    %eax,%ecx
f0127135:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012713c:	10 00 00 
f012713f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127145:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012714a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127150:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127156:	ba 00 00 00 00       	mov    $0x0,%edx
f012715b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127161:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127167:	29 d0                	sub    %edx,%eax
f0127169:	89 c3                	mov    %eax,%ebx
f012716b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127172:	10 00 00 
f0127175:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012717a:	0f b6 d0             	movzbl %al,%edx
f012717d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127183:	01 d0                	add    %edx,%eax
f0127185:	48                   	dec    %eax
f0127186:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012718c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127192:	ba 00 00 00 00       	mov    $0x0,%edx
f0127197:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012719d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01271a3:	29 d0                	sub    %edx,%eax
f01271a5:	01 c3                	add    %eax,%ebx
f01271a7:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01271ae:	10 00 00 
f01271b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01271b6:	0f b6 c0             	movzbl %al,%eax
f01271b9:	c1 e0 04             	shl    $0x4,%eax
f01271bc:	89 c2                	mov    %eax,%edx
f01271be:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01271c4:	01 d0                	add    %edx,%eax
f01271c6:	48                   	dec    %eax
f01271c7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01271cd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01271d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01271d8:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01271de:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01271e4:	29 d0                	sub    %edx,%eax
f01271e6:	01 d8                	add    %ebx,%eax
f01271e8:	05 00 40 00 00       	add    $0x4000,%eax
f01271ed:	c1 e8 0c             	shr    $0xc,%eax
f01271f0:	05 0d 04 00 00       	add    $0x40d,%eax
f01271f5:	39 c1                	cmp    %eax,%ecx
f01271f7:	74 17                	je     f0127210 <test_kfreeall+0x12e4>
f01271f9:	83 ec 04             	sub    $0x4,%esp
f01271fc:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0127201:	68 c2 0a 00 00       	push   $0xac2
f0127206:	68 5a ac 13 f0       	push   $0xf013ac5a
f012720b:	e8 eb 8f fd ff       	call   f01001fb <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127210:	83 ec 0c             	sub    $0xc,%esp
f0127213:	6a 03                	push   $0x3
f0127215:	e8 4f 5b fe ff       	call   f010cd69 <sys_bypassPageFault>
f012721a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012721d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127224:	e9 82 00 00 00       	jmp    f01272ab <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012722c:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127233:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127236:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127239:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012723c:	e8 16 5b fe ff       	call   f010cd57 <sys_rcr2>
f0127241:	89 c2                	mov    %eax,%edx
f0127243:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127246:	39 c2                	cmp    %eax,%edx
f0127248:	74 17                	je     f0127261 <test_kfreeall+0x1335>
f012724a:	83 ec 04             	sub    $0x4,%esp
f012724d:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0127252:	68 d0 0a 00 00       	push   $0xad0
f0127257:	68 5a ac 13 f0       	push   $0xf013ac5a
f012725c:	e8 9a 8f fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0127261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127264:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012726b:	89 c2                	mov    %eax,%edx
f012726d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127270:	01 d0                	add    %edx,%eax
f0127272:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127275:	e8 dd 5a fe ff       	call   f010cd57 <sys_rcr2>
f012727a:	89 c2                	mov    %eax,%edx
f012727c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012727f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127286:	89 c1                	mov    %eax,%ecx
f0127288:	8b 45 80             	mov    -0x80(%ebp),%eax
f012728b:	01 c8                	add    %ecx,%eax
f012728d:	39 c2                	cmp    %eax,%edx
f012728f:	74 17                	je     f01272a8 <test_kfreeall+0x137c>
f0127291:	83 ec 04             	sub    $0x4,%esp
f0127294:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0127299:	68 d2 0a 00 00       	push   $0xad2
f012729e:	68 5a ac 13 f0       	push   $0xf013ac5a
f01272a3:	e8 53 8f fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01272a8:	ff 45 f4             	incl   -0xc(%ebp)
f01272ab:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01272af:	0f 8e 74 ff ff ff    	jle    f0127229 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01272b5:	83 ec 0c             	sub    $0xc,%esp
f01272b8:	6a 00                	push   $0x0
f01272ba:	e8 aa 5a fe ff       	call   f010cd69 <sys_bypassPageFault>
f01272bf:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01272c2:	e8 02 56 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01272c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272ca:	e8 6d ca fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01272cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01272d2:	83 ec 0c             	sub    $0xc,%esp
f01272d5:	68 00 00 40 00       	push   $0x400000
f01272da:	e8 1f 05 fe ff       	call   f01077fe <kmalloc>
f01272df:	83 c4 10             	add    $0x10,%esp
f01272e2:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01272e8:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01272ee:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01272f3:	74 17                	je     f012730c <test_kfreeall+0x13e0>
f01272f5:	83 ec 04             	sub    $0x4,%esp
f01272f8:	68 64 b9 13 f0       	push   $0xf013b964
f01272fd:	68 de 0a 00 00       	push   $0xade
f0127302:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127307:	e8 ef 8e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012730c:	e8 2b ca fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127311:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127314:	74 17                	je     f012732d <test_kfreeall+0x1401>
f0127316:	83 ec 04             	sub    $0x4,%esp
f0127319:	68 74 ac 13 f0       	push   $0xf013ac74
f012731e:	68 df 0a 00 00       	push   $0xadf
f0127323:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127328:	e8 ce 8e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012732d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127330:	e8 94 55 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127335:	29 c3                	sub    %eax,%ebx
f0127337:	89 d8                	mov    %ebx,%eax
f0127339:	3d 00 04 00 00       	cmp    $0x400,%eax
f012733e:	74 17                	je     f0127357 <test_kfreeall+0x142b>
f0127340:	83 ec 04             	sub    $0x4,%esp
f0127343:	68 dc ac 13 f0       	push   $0xf013acdc
f0127348:	68 e0 0a 00 00       	push   $0xae0
f012734d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127352:	e8 a4 8e fd ff       	call   f01001fb <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127357:	e8 6d 55 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012735c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012735f:	e8 d8 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127364:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127367:	83 ec 0c             	sub    $0xc,%esp
f012736a:	68 00 30 00 00       	push   $0x3000
f012736f:	e8 8a 04 fe ff       	call   f01077fe <kmalloc>
f0127374:	83 c4 10             	add    $0x10,%esp
f0127377:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012737d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127383:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127388:	74 17                	je     f01273a1 <test_kfreeall+0x1475>
f012738a:	83 ec 04             	sub    $0x4,%esp
f012738d:	68 64 b9 13 f0       	push   $0xf013b964
f0127392:	68 e6 0a 00 00       	push   $0xae6
f0127397:	68 5a ac 13 f0       	push   $0xf013ac5a
f012739c:	e8 5a 8e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273a1:	e8 96 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01273a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273a9:	74 17                	je     f01273c2 <test_kfreeall+0x1496>
f01273ab:	83 ec 04             	sub    $0x4,%esp
f01273ae:	68 74 ac 13 f0       	push   $0xf013ac74
f01273b3:	68 e7 0a 00 00       	push   $0xae7
f01273b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01273bd:	e8 39 8e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273c2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273c5:	e8 ff 54 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01273ca:	29 c3                	sub    %eax,%ebx
f01273cc:	89 d8                	mov    %ebx,%eax
f01273ce:	83 f8 03             	cmp    $0x3,%eax
f01273d1:	74 17                	je     f01273ea <test_kfreeall+0x14be>
f01273d3:	83 ec 04             	sub    $0x4,%esp
f01273d6:	68 dc ac 13 f0       	push   $0xf013acdc
f01273db:	68 e8 0a 00 00       	push   $0xae8
f01273e0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01273e5:	e8 11 8e fd ff       	call   f01001fb <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01273ea:	e8 da 54 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01273ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273f2:	e8 45 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01273f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01273fa:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127400:	83 ec 0c             	sub    $0xc,%esp
f0127403:	50                   	push   %eax
f0127404:	e8 b7 04 fe ff       	call   f01078c0 <kfree>
f0127409:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012740c:	e8 2b c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127411:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127414:	74 17                	je     f012742d <test_kfreeall+0x1501>
f0127416:	83 ec 04             	sub    $0x4,%esp
f0127419:	68 74 ac 13 f0       	push   $0xf013ac74
f012741e:	68 f2 0a 00 00       	push   $0xaf2
f0127423:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127428:	e8 ce 8d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012742d:	e8 97 54 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127432:	89 c2                	mov    %eax,%edx
f0127434:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127437:	29 c2                	sub    %eax,%edx
f0127439:	89 d0                	mov    %edx,%eax
f012743b:	83 f8 03             	cmp    $0x3,%eax
f012743e:	74 17                	je     f0127457 <test_kfreeall+0x152b>
f0127440:	83 ec 04             	sub    $0x4,%esp
f0127443:	68 0c b5 13 f0       	push   $0xf013b50c
f0127448:	68 f3 0a 00 00       	push   $0xaf3
f012744d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127452:	e8 a4 8d fd ff       	call   f01001fb <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127457:	e8 6d 54 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012745c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012745f:	e8 d8 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127464:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127467:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012746d:	83 ec 0c             	sub    $0xc,%esp
f0127470:	50                   	push   %eax
f0127471:	e8 4a 04 fe ff       	call   f01078c0 <kfree>
f0127476:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127479:	e8 be c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012747e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127481:	74 17                	je     f012749a <test_kfreeall+0x156e>
f0127483:	83 ec 04             	sub    $0x4,%esp
f0127486:	68 74 ac 13 f0       	push   $0xf013ac74
f012748b:	68 fc 0a 00 00       	push   $0xafc
f0127490:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127495:	e8 61 8d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012749a:	e8 2a 54 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012749f:	89 c2                	mov    %eax,%edx
f01274a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01274a4:	39 c2                	cmp    %eax,%edx
f01274a6:	74 17                	je     f01274bf <test_kfreeall+0x1593>
f01274a8:	83 ec 04             	sub    $0x4,%esp
f01274ab:	68 0c b5 13 f0       	push   $0xf013b50c
f01274b0:	68 fd 0a 00 00       	push   $0xafd
f01274b5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01274ba:	e8 3c 8d fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01274bf:	e8 05 54 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01274c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274c7:	e8 70 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01274cf:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01274d5:	83 ec 0c             	sub    $0xc,%esp
f01274d8:	50                   	push   %eax
f01274d9:	e8 e2 03 fe ff       	call   f01078c0 <kfree>
f01274de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274e1:	e8 56 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274e6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01274e9:	74 17                	je     f0127502 <test_kfreeall+0x15d6>
f01274eb:	83 ec 04             	sub    $0x4,%esp
f01274ee:	68 74 ac 13 f0       	push   $0xf013ac74
f01274f3:	68 03 0b 00 00       	push   $0xb03
f01274f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01274fd:	e8 f9 8c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127502:	e8 c2 53 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127507:	89 c2                	mov    %eax,%edx
f0127509:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012750c:	39 c2                	cmp    %eax,%edx
f012750e:	74 17                	je     f0127527 <test_kfreeall+0x15fb>
f0127510:	83 ec 04             	sub    $0x4,%esp
f0127513:	68 0c b5 13 f0       	push   $0xf013b50c
f0127518:	68 04 0b 00 00       	push   $0xb04
f012751d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127522:	e8 d4 8c fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127527:	e8 9d 53 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012752c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012752f:	e8 08 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127534:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127537:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012753d:	83 ec 0c             	sub    $0xc,%esp
f0127540:	50                   	push   %eax
f0127541:	e8 7a 03 fe ff       	call   f01078c0 <kfree>
f0127546:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127549:	e8 ee c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012754e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127551:	74 17                	je     f012756a <test_kfreeall+0x163e>
f0127553:	83 ec 04             	sub    $0x4,%esp
f0127556:	68 74 ac 13 f0       	push   $0xf013ac74
f012755b:	68 0a 0b 00 00       	push   $0xb0a
f0127560:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127565:	e8 91 8c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012756a:	e8 5a 53 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012756f:	89 c2                	mov    %eax,%edx
f0127571:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127574:	39 c2                	cmp    %eax,%edx
f0127576:	74 17                	je     f012758f <test_kfreeall+0x1663>
f0127578:	83 ec 04             	sub    $0x4,%esp
f012757b:	68 0c b5 13 f0       	push   $0xf013b50c
f0127580:	68 0b 0b 00 00       	push   $0xb0b
f0127585:	68 5a ac 13 f0       	push   $0xf013ac5a
f012758a:	e8 6c 8c fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012758f:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127596:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012759d:	eb 48                	jmp    f01275e7 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012759f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01275a2:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01275a7:	83 ec 04             	sub    $0x4,%esp
f01275aa:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01275b0:	51                   	push   %ecx
f01275b1:	52                   	push   %edx
f01275b2:	50                   	push   %eax
f01275b3:	e8 22 f4 fd ff       	call   f01069da <get_page_table>
f01275b8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01275bb:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01275c1:	85 c0                	test   %eax,%eax
f01275c3:	75 17                	jne    f01275dc <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01275c5:	83 ec 04             	sub    $0x4,%esp
f01275c8:	68 5c b5 13 f0       	push   $0xf013b55c
f01275cd:	68 18 0b 00 00       	push   $0xb18
f01275d2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01275d7:	e8 1f 8c fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01275dc:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01275e3:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01275e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01275eb:	78 b2                	js     f012759f <test_kfreeall+0x1673>
f01275ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01275f1:	7f 09                	jg     f01275fc <test_kfreeall+0x16d0>
f01275f3:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01275fa:	76 a3                	jbe    f012759f <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01275fc:	83 ec 0c             	sub    $0xc,%esp
f01275ff:	68 b8 b9 13 f0       	push   $0xf013b9b8
f0127604:	e8 79 96 fd ff       	call   f0100c82 <cprintf>
f0127609:	83 c4 10             	add    $0x10,%esp

	return 1;
f012760c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127611:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127614:	5b                   	pop    %ebx
f0127615:	5f                   	pop    %edi
f0127616:	5d                   	pop    %ebp
f0127617:	c3                   	ret    

f0127618 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127618:	55                   	push   %ebp
f0127619:	89 e5                	mov    %esp,%ebp
f012761b:	57                   	push   %edi
f012761c:	53                   	push   %ebx
f012761d:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127623:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127627:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012762b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127631:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127637:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012763e:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127645:	e8 7f 52 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012764a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012764d:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127653:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127658:	b8 00 00 00 00       	mov    $0x0,%eax
f012765d:	89 d7                	mov    %edx,%edi
f012765f:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127661:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0127667:	b9 14 00 00 00       	mov    $0x14,%ecx
f012766c:	b8 00 00 00 00       	mov    $0x0,%eax
f0127671:	89 d7                	mov    %edx,%edi
f0127673:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127675:	e8 4f 52 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012767a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012767d:	e8 ba c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127682:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127685:	83 ec 0c             	sub    $0xc,%esp
f0127688:	68 00 fc 1f 00       	push   $0x1ffc00
f012768d:	e8 6c 01 fe ff       	call   f01077fe <kmalloc>
f0127692:	83 c4 10             	add    $0x10,%esp
f0127695:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012769b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01276a1:	89 c1                	mov    %eax,%ecx
f01276a3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01276aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01276ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01276b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01276b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01276b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01276bd:	f7 75 d4             	divl   -0x2c(%ebp)
f01276c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01276c3:	29 d0                	sub    %edx,%eax
f01276c5:	89 c3                	mov    %eax,%ebx
f01276c7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01276ce:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01276d3:	0f b6 d0             	movzbl %al,%edx
f01276d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01276d9:	01 d0                	add    %edx,%eax
f01276db:	48                   	dec    %eax
f01276dc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01276df:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01276e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01276e7:	f7 75 cc             	divl   -0x34(%ebp)
f01276ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01276ed:	29 d0                	sub    %edx,%eax
f01276ef:	01 c3                	add    %eax,%ebx
f01276f1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01276f8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01276fd:	0f b6 c0             	movzbl %al,%eax
f0127700:	c1 e0 04             	shl    $0x4,%eax
f0127703:	89 c2                	mov    %eax,%edx
f0127705:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127708:	01 d0                	add    %edx,%eax
f012770a:	48                   	dec    %eax
f012770b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012770e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127711:	ba 00 00 00 00       	mov    $0x0,%edx
f0127716:	f7 75 c4             	divl   -0x3c(%ebp)
f0127719:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012771c:	29 d0                	sub    %edx,%eax
f012771e:	01 d8                	add    %ebx,%eax
f0127720:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127725:	39 c1                	cmp    %eax,%ecx
f0127727:	74 17                	je     f0127740 <test_kexpand+0x128>
f0127729:	83 ec 04             	sub    $0x4,%esp
f012772c:	68 40 ad 13 f0       	push   $0xf013ad40
f0127731:	68 43 0b 00 00       	push   $0xb43
f0127736:	68 5a ac 13 f0       	push   $0xf013ac5a
f012773b:	e8 bb 8a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127740:	e8 f7 c5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127745:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127748:	74 17                	je     f0127761 <test_kexpand+0x149>
f012774a:	83 ec 04             	sub    $0x4,%esp
f012774d:	68 74 ac 13 f0       	push   $0xf013ac74
f0127752:	68 44 0b 00 00       	push   $0xb44
f0127757:	68 5a ac 13 f0       	push   $0xf013ac5a
f012775c:	e8 9a 8a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127761:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127764:	e8 60 51 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127769:	29 c3                	sub    %eax,%ebx
f012776b:	89 d8                	mov    %ebx,%eax
f012776d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127772:	74 17                	je     f012778b <test_kexpand+0x173>
f0127774:	83 ec 04             	sub    $0x4,%esp
f0127777:	68 dc ac 13 f0       	push   $0xf013acdc
f012777c:	68 45 0b 00 00       	push   $0xb45
f0127781:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127786:	e8 70 8a fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012778b:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127792:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127795:	e8 2f 51 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012779a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012779d:	e8 9a c5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01277a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01277a5:	83 ec 0c             	sub    $0xc,%esp
f01277a8:	68 00 fc 1f 00       	push   $0x1ffc00
f01277ad:	e8 4c 00 fe ff       	call   f01077fe <kmalloc>
f01277b2:	83 c4 10             	add    $0x10,%esp
f01277b5:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01277bb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01277c1:	89 c1                	mov    %eax,%ecx
f01277c3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01277ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01277cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01277d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01277d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01277d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01277dd:	f7 75 bc             	divl   -0x44(%ebp)
f01277e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01277e3:	29 d0                	sub    %edx,%eax
f01277e5:	89 c3                	mov    %eax,%ebx
f01277e7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01277ee:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01277f3:	0f b6 d0             	movzbl %al,%edx
f01277f6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01277f9:	01 d0                	add    %edx,%eax
f01277fb:	48                   	dec    %eax
f01277fc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01277ff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127802:	ba 00 00 00 00       	mov    $0x0,%edx
f0127807:	f7 75 b4             	divl   -0x4c(%ebp)
f012780a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012780d:	29 d0                	sub    %edx,%eax
f012780f:	01 c3                	add    %eax,%ebx
f0127811:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127818:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012781d:	0f b6 c0             	movzbl %al,%eax
f0127820:	c1 e0 04             	shl    $0x4,%eax
f0127823:	89 c2                	mov    %eax,%edx
f0127825:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127828:	01 d0                	add    %edx,%eax
f012782a:	48                   	dec    %eax
f012782b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012782e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127831:	ba 00 00 00 00       	mov    $0x0,%edx
f0127836:	f7 75 ac             	divl   -0x54(%ebp)
f0127839:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012783c:	29 d0                	sub    %edx,%eax
f012783e:	01 d8                	add    %ebx,%eax
f0127840:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127845:	39 c1                	cmp    %eax,%ecx
f0127847:	74 17                	je     f0127860 <test_kexpand+0x248>
f0127849:	83 ec 04             	sub    $0x4,%esp
f012784c:	68 40 ad 13 f0       	push   $0xf013ad40
f0127851:	68 4c 0b 00 00       	push   $0xb4c
f0127856:	68 5a ac 13 f0       	push   $0xf013ac5a
f012785b:	e8 9b 89 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127860:	e8 d7 c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127865:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127868:	74 17                	je     f0127881 <test_kexpand+0x269>
f012786a:	83 ec 04             	sub    $0x4,%esp
f012786d:	68 74 ac 13 f0       	push   $0xf013ac74
f0127872:	68 4d 0b 00 00       	push   $0xb4d
f0127877:	68 5a ac 13 f0       	push   $0xf013ac5a
f012787c:	e8 7a 89 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127881:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127884:	e8 40 50 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127889:	29 c3                	sub    %eax,%ebx
f012788b:	89 d8                	mov    %ebx,%eax
f012788d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127892:	74 17                	je     f01278ab <test_kexpand+0x293>
f0127894:	83 ec 04             	sub    $0x4,%esp
f0127897:	68 dc ac 13 f0       	push   $0xf013acdc
f012789c:	68 4e 0b 00 00       	push   $0xb4e
f01278a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01278a6:	e8 50 89 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01278ab:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01278b2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01278b5:	e8 0f 50 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01278ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278bd:	e8 7a c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01278c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01278c5:	83 ec 0c             	sub    $0xc,%esp
f01278c8:	68 00 08 00 00       	push   $0x800
f01278cd:	e8 2c ff fd ff       	call   f01077fe <kmalloc>
f01278d2:	83 c4 10             	add    $0x10,%esp
f01278d5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278db:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01278e1:	89 c1                	mov    %eax,%ecx
f01278e3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01278ea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01278ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01278f2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01278f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01278f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01278fd:	f7 75 a4             	divl   -0x5c(%ebp)
f0127900:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127903:	29 d0                	sub    %edx,%eax
f0127905:	89 c3                	mov    %eax,%ebx
f0127907:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012790e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127913:	0f b6 d0             	movzbl %al,%edx
f0127916:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127919:	01 d0                	add    %edx,%eax
f012791b:	48                   	dec    %eax
f012791c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012791f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127922:	ba 00 00 00 00       	mov    $0x0,%edx
f0127927:	f7 75 9c             	divl   -0x64(%ebp)
f012792a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012792d:	29 d0                	sub    %edx,%eax
f012792f:	01 c3                	add    %eax,%ebx
f0127931:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127938:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012793d:	0f b6 c0             	movzbl %al,%eax
f0127940:	c1 e0 04             	shl    $0x4,%eax
f0127943:	89 c2                	mov    %eax,%edx
f0127945:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127948:	01 d0                	add    %edx,%eax
f012794a:	48                   	dec    %eax
f012794b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012794e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127951:	ba 00 00 00 00       	mov    $0x0,%edx
f0127956:	f7 75 94             	divl   -0x6c(%ebp)
f0127959:	8b 45 90             	mov    -0x70(%ebp),%eax
f012795c:	29 d0                	sub    %edx,%eax
f012795e:	01 d8                	add    %ebx,%eax
f0127960:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127965:	39 c1                	cmp    %eax,%ecx
f0127967:	74 17                	je     f0127980 <test_kexpand+0x368>
f0127969:	83 ec 04             	sub    $0x4,%esp
f012796c:	68 40 ad 13 f0       	push   $0xf013ad40
f0127971:	68 55 0b 00 00       	push   $0xb55
f0127976:	68 5a ac 13 f0       	push   $0xf013ac5a
f012797b:	e8 7b 88 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127980:	e8 b7 c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127985:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127988:	74 17                	je     f01279a1 <test_kexpand+0x389>
f012798a:	83 ec 04             	sub    $0x4,%esp
f012798d:	68 74 ac 13 f0       	push   $0xf013ac74
f0127992:	68 56 0b 00 00       	push   $0xb56
f0127997:	68 5a ac 13 f0       	push   $0xf013ac5a
f012799c:	e8 5a 88 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279a1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279a4:	e8 20 4f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01279a9:	29 c3                	sub    %eax,%ebx
f01279ab:	89 d8                	mov    %ebx,%eax
f01279ad:	83 f8 01             	cmp    $0x1,%eax
f01279b0:	74 17                	je     f01279c9 <test_kexpand+0x3b1>
f01279b2:	83 ec 04             	sub    $0x4,%esp
f01279b5:	68 dc ac 13 f0       	push   $0xf013acdc
f01279ba:	68 57 0b 00 00       	push   $0xb57
f01279bf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01279c4:	e8 32 88 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01279c9:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01279d0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01279d3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01279d9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01279dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279e3:	eb 0e                	jmp    f01279f3 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01279e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01279e8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01279eb:	01 d0                	add    %edx,%eax
f01279ed:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01279f0:	ff 45 f4             	incl   -0xc(%ebp)
f01279f3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01279f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01279fc:	7f e7                	jg     f01279e5 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01279fe:	e8 c6 4e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127a03:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a06:	e8 31 c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127a0b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127a0e:	83 ec 0c             	sub    $0xc,%esp
f0127a11:	68 00 08 00 00       	push   $0x800
f0127a16:	e8 e3 fd fd ff       	call   f01077fe <kmalloc>
f0127a1b:	83 c4 10             	add    $0x10,%esp
f0127a1e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a24:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127a2a:	89 c1                	mov    %eax,%ecx
f0127a2c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127a33:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127a36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127a3b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127a3e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127a41:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a46:	f7 75 88             	divl   -0x78(%ebp)
f0127a49:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127a4c:	29 d0                	sub    %edx,%eax
f0127a4e:	89 c3                	mov    %eax,%ebx
f0127a50:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127a57:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127a5c:	0f b6 d0             	movzbl %al,%edx
f0127a5f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a62:	01 d0                	add    %edx,%eax
f0127a64:	48                   	dec    %eax
f0127a65:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127a6b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127a71:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a76:	f7 75 80             	divl   -0x80(%ebp)
f0127a79:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127a7f:	29 d0                	sub    %edx,%eax
f0127a81:	01 c3                	add    %eax,%ebx
f0127a83:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127a8a:	10 00 00 
f0127a8d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127a92:	0f b6 c0             	movzbl %al,%eax
f0127a95:	c1 e0 04             	shl    $0x4,%eax
f0127a98:	89 c2                	mov    %eax,%edx
f0127a9a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127aa0:	01 d0                	add    %edx,%eax
f0127aa2:	48                   	dec    %eax
f0127aa3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127aa9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127aaf:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ab4:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127aba:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127ac0:	29 d0                	sub    %edx,%eax
f0127ac2:	01 d8                	add    %ebx,%eax
f0127ac4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127ac9:	39 c1                	cmp    %eax,%ecx
f0127acb:	74 17                	je     f0127ae4 <test_kexpand+0x4cc>
f0127acd:	83 ec 04             	sub    $0x4,%esp
f0127ad0:	68 40 ad 13 f0       	push   $0xf013ad40
f0127ad5:	68 63 0b 00 00       	push   $0xb63
f0127ada:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127adf:	e8 17 87 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ae4:	e8 53 c2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127ae9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127aec:	74 17                	je     f0127b05 <test_kexpand+0x4ed>
f0127aee:	83 ec 04             	sub    $0x4,%esp
f0127af1:	68 74 ac 13 f0       	push   $0xf013ac74
f0127af6:	68 64 0b 00 00       	push   $0xb64
f0127afb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127b00:	e8 f6 86 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b05:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b08:	e8 bc 4d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127b0d:	29 c3                	sub    %eax,%ebx
f0127b0f:	89 d8                	mov    %ebx,%eax
f0127b11:	83 f8 01             	cmp    $0x1,%eax
f0127b14:	74 17                	je     f0127b2d <test_kexpand+0x515>
f0127b16:	83 ec 04             	sub    $0x4,%esp
f0127b19:	68 dc ac 13 f0       	push   $0xf013acdc
f0127b1e:	68 65 0b 00 00       	push   $0xb65
f0127b23:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127b28:	e8 ce 86 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127b2d:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127b34:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127b37:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127b3d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127b40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b47:	eb 0e                	jmp    f0127b57 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127b49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b4c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b4f:	01 d0                	add    %edx,%eax
f0127b51:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127b54:	ff 45 f4             	incl   -0xc(%ebp)
f0127b57:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b5d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b60:	7f e7                	jg     f0127b49 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127b62:	e8 62 4d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127b67:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b6a:	e8 cd c1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127b6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127b72:	83 ec 0c             	sub    $0xc,%esp
f0127b75:	68 00 1c 00 00       	push   $0x1c00
f0127b7a:	e8 7f fc fd ff       	call   f01077fe <kmalloc>
f0127b7f:	83 c4 10             	add    $0x10,%esp
f0127b82:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127b88:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127b8e:	89 c1                	mov    %eax,%ecx
f0127b90:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127b97:	10 00 00 
f0127b9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127ba0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127ba5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127bab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127bb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bb6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127bbc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127bc2:	29 d0                	sub    %edx,%eax
f0127bc4:	89 c3                	mov    %eax,%ebx
f0127bc6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127bcd:	10 00 00 
f0127bd0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127bd5:	0f b6 d0             	movzbl %al,%edx
f0127bd8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127bde:	01 d0                	add    %edx,%eax
f0127be0:	48                   	dec    %eax
f0127be1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127be7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127bed:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bf2:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127bf8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127bfe:	29 d0                	sub    %edx,%eax
f0127c00:	01 c3                	add    %eax,%ebx
f0127c02:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127c09:	10 00 00 
f0127c0c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127c11:	0f b6 c0             	movzbl %al,%eax
f0127c14:	c1 e0 04             	shl    $0x4,%eax
f0127c17:	89 c2                	mov    %eax,%edx
f0127c19:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127c1f:	01 d0                	add    %edx,%eax
f0127c21:	48                   	dec    %eax
f0127c22:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127c28:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127c2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c33:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127c39:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127c3f:	29 d0                	sub    %edx,%eax
f0127c41:	01 d8                	add    %ebx,%eax
f0127c43:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127c48:	39 c1                	cmp    %eax,%ecx
f0127c4a:	74 17                	je     f0127c63 <test_kexpand+0x64b>
f0127c4c:	83 ec 04             	sub    $0x4,%esp
f0127c4f:	68 40 ad 13 f0       	push   $0xf013ad40
f0127c54:	68 71 0b 00 00       	push   $0xb71
f0127c59:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127c5e:	e8 98 85 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c63:	e8 d4 c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127c68:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c6b:	74 17                	je     f0127c84 <test_kexpand+0x66c>
f0127c6d:	83 ec 04             	sub    $0x4,%esp
f0127c70:	68 74 ac 13 f0       	push   $0xf013ac74
f0127c75:	68 72 0b 00 00       	push   $0xb72
f0127c7a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127c7f:	e8 77 85 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c84:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c87:	e8 3d 4c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127c8c:	29 c3                	sub    %eax,%ebx
f0127c8e:	89 d8                	mov    %ebx,%eax
f0127c90:	83 f8 02             	cmp    $0x2,%eax
f0127c93:	74 17                	je     f0127cac <test_kexpand+0x694>
f0127c95:	83 ec 04             	sub    $0x4,%esp
f0127c98:	68 dc ac 13 f0       	push   $0xf013acdc
f0127c9d:	68 73 0b 00 00       	push   $0xb73
f0127ca2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127ca7:	e8 4f 85 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127cac:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127cb3:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127cb6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127cbc:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127cbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127cc6:	eb 0e                	jmp    f0127cd6 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127cc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127ccb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127cce:	01 d0                	add    %edx,%eax
f0127cd0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127cd3:	ff 45 f4             	incl   -0xc(%ebp)
f0127cd6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127cdc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127cdf:	7f e7                	jg     f0127cc8 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ce1:	e8 e3 4b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127ce6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ce9:	e8 4e c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127cee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127cf1:	83 ec 0c             	sub    $0xc,%esp
f0127cf4:	68 00 fc 2f 00       	push   $0x2ffc00
f0127cf9:	e8 00 fb fd ff       	call   f01077fe <kmalloc>
f0127cfe:	83 c4 10             	add    $0x10,%esp
f0127d01:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127d07:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127d0d:	89 c1                	mov    %eax,%ecx
f0127d0f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127d16:	10 00 00 
f0127d19:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127d1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d24:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127d2a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127d30:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d35:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127d3b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127d41:	29 d0                	sub    %edx,%eax
f0127d43:	89 c3                	mov    %eax,%ebx
f0127d45:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127d4c:	10 00 00 
f0127d4f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127d54:	0f b6 d0             	movzbl %al,%edx
f0127d57:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127d5d:	01 d0                	add    %edx,%eax
f0127d5f:	48                   	dec    %eax
f0127d60:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127d66:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d71:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127d77:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d7d:	29 d0                	sub    %edx,%eax
f0127d7f:	01 c3                	add    %eax,%ebx
f0127d81:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127d88:	10 00 00 
f0127d8b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127d90:	0f b6 c0             	movzbl %al,%eax
f0127d93:	c1 e0 04             	shl    $0x4,%eax
f0127d96:	89 c2                	mov    %eax,%edx
f0127d98:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127d9e:	01 d0                	add    %edx,%eax
f0127da0:	48                   	dec    %eax
f0127da1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127da7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127dad:	ba 00 00 00 00       	mov    $0x0,%edx
f0127db2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127db8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127dbe:	29 d0                	sub    %edx,%eax
f0127dc0:	01 d8                	add    %ebx,%eax
f0127dc2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127dc7:	39 c1                	cmp    %eax,%ecx
f0127dc9:	74 17                	je     f0127de2 <test_kexpand+0x7ca>
f0127dcb:	83 ec 04             	sub    $0x4,%esp
f0127dce:	68 40 ad 13 f0       	push   $0xf013ad40
f0127dd3:	68 7f 0b 00 00       	push   $0xb7f
f0127dd8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127ddd:	e8 19 84 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127de2:	e8 55 bf fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127de7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127dea:	74 17                	je     f0127e03 <test_kexpand+0x7eb>
f0127dec:	83 ec 04             	sub    $0x4,%esp
f0127def:	68 74 ac 13 f0       	push   $0xf013ac74
f0127df4:	68 80 0b 00 00       	push   $0xb80
f0127df9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127dfe:	e8 f8 83 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e03:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e06:	e8 be 4a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127e0b:	29 c3                	sub    %eax,%ebx
f0127e0d:	89 d8                	mov    %ebx,%eax
f0127e0f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127e14:	74 17                	je     f0127e2d <test_kexpand+0x815>
f0127e16:	83 ec 04             	sub    $0x4,%esp
f0127e19:	68 dc ac 13 f0       	push   $0xf013acdc
f0127e1e:	68 81 0b 00 00       	push   $0xb81
f0127e23:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127e28:	e8 ce 83 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127e2d:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127e34:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127e37:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127e3d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127e40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e47:	eb 0e                	jmp    f0127e57 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127e49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127e4c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127e4f:	01 d0                	add    %edx,%eax
f0127e51:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127e54:	ff 45 f4             	incl   -0xc(%ebp)
f0127e57:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e5d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e60:	7f e7                	jg     f0127e49 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e62:	e8 62 4a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127e67:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e6a:	e8 cd be fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127e6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127e72:	83 ec 0c             	sub    $0xc,%esp
f0127e75:	68 00 00 60 00       	push   $0x600000
f0127e7a:	e8 7f f9 fd ff       	call   f01077fe <kmalloc>
f0127e7f:	83 c4 10             	add    $0x10,%esp
f0127e82:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e88:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127e8e:	89 c1                	mov    %eax,%ecx
f0127e90:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127e97:	10 00 00 
f0127e9a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127ea0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127ea5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127eab:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127eb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eb6:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127ebc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127ec2:	29 d0                	sub    %edx,%eax
f0127ec4:	89 c3                	mov    %eax,%ebx
f0127ec6:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127ecd:	10 00 00 
f0127ed0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127ed5:	0f b6 d0             	movzbl %al,%edx
f0127ed8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127ede:	01 d0                	add    %edx,%eax
f0127ee0:	48                   	dec    %eax
f0127ee1:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127ee7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127eed:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ef2:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0127ef8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127efe:	29 d0                	sub    %edx,%eax
f0127f00:	01 c3                	add    %eax,%ebx
f0127f02:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0127f09:	10 00 00 
f0127f0c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127f11:	0f b6 c0             	movzbl %al,%eax
f0127f14:	c1 e0 04             	shl    $0x4,%eax
f0127f17:	89 c2                	mov    %eax,%edx
f0127f19:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127f1f:	01 d0                	add    %edx,%eax
f0127f21:	48                   	dec    %eax
f0127f22:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0127f28:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127f2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f33:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0127f39:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127f3f:	29 d0                	sub    %edx,%eax
f0127f41:	01 d8                	add    %ebx,%eax
f0127f43:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127f48:	39 c1                	cmp    %eax,%ecx
f0127f4a:	74 17                	je     f0127f63 <test_kexpand+0x94b>
f0127f4c:	83 ec 04             	sub    $0x4,%esp
f0127f4f:	68 40 ad 13 f0       	push   $0xf013ad40
f0127f54:	68 8d 0b 00 00       	push   $0xb8d
f0127f59:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127f5e:	e8 98 82 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f63:	e8 d4 bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127f68:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f6b:	74 17                	je     f0127f84 <test_kexpand+0x96c>
f0127f6d:	83 ec 04             	sub    $0x4,%esp
f0127f70:	68 74 ac 13 f0       	push   $0xf013ac74
f0127f75:	68 8e 0b 00 00       	push   $0xb8e
f0127f7a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127f7f:	e8 77 82 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f84:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f87:	e8 3d 49 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0127f8c:	29 c3                	sub    %eax,%ebx
f0127f8e:	89 d8                	mov    %ebx,%eax
f0127f90:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127f95:	74 17                	je     f0127fae <test_kexpand+0x996>
f0127f97:	83 ec 04             	sub    $0x4,%esp
f0127f9a:	68 dc ac 13 f0       	push   $0xf013acdc
f0127f9f:	68 8f 0b 00 00       	push   $0xb8f
f0127fa4:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127fa9:	e8 4d 82 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127fae:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0127fb5:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127fb8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127fbe:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127fc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127fcb:	eb 1a                	jmp    f0127fe7 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127fd0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127fd7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127fdd:	01 c2                	add    %eax,%edx
f0127fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127fe2:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127fe4:	ff 45 f4             	incl   -0xc(%ebp)
f0127fe7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127fed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ff0:	7d db                	jge    f0127fcd <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0127ff2:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127ff9:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ffc:	e8 c8 48 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128001:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128004:	e8 33 bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128009:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f012800c:	83 ec 0c             	sub    $0xc,%esp
f012800f:	68 00 00 70 00       	push   $0x700000
f0128014:	e8 7f fa fd ff       	call   f0107a98 <kexpand>
f0128019:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012801c:	e8 1b bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128021:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128024:	74 19                	je     f012803f <test_kexpand+0xa27>
f0128026:	68 f4 b9 13 f0       	push   $0xf013b9f4
f012802b:	68 25 ba 13 f0       	push   $0xf013ba25
f0128030:	68 a0 0b 00 00       	push   $0xba0
f0128035:	68 5a ac 13 f0       	push   $0xf013ac5a
f012803a:	e8 bc 81 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f012803f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128042:	e8 82 48 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128047:	29 c3                	sub    %eax,%ebx
f0128049:	89 d8                	mov    %ebx,%eax
f012804b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128050:	74 19                	je     f012806b <test_kexpand+0xa53>
f0128052:	68 3c ba 13 f0       	push   $0xf013ba3c
f0128057:	68 25 ba 13 f0       	push   $0xf013ba25
f012805c:	68 a1 0b 00 00       	push   $0xba1
f0128061:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128066:	e8 90 81 fd ff       	call   f01001fb <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012806b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128071:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128074:	eb 1a                	jmp    f0128090 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128079:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128080:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128086:	01 c2                	add    %eax,%edx
f0128088:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012808b:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f012808d:	ff 45 f4             	incl   -0xc(%ebp)
f0128090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128093:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128099:	7c db                	jl     f0128076 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f012809b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01280a2:	eb 37                	jmp    f01280db <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f01280a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01280ae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01280b4:	01 d0                	add    %edx,%eax
f01280b6:	8b 10                	mov    (%eax),%edx
f01280b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280bb:	39 c2                	cmp    %eax,%edx
f01280bd:	74 19                	je     f01280d8 <test_kexpand+0xac0>
f01280bf:	68 6c ba 13 f0       	push   $0xf013ba6c
f01280c4:	68 25 ba 13 f0       	push   $0xf013ba25
f01280c9:	68 ad 0b 00 00       	push   $0xbad
f01280ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f01280d3:	e8 23 81 fd ff       	call   f01001fb <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01280d8:	ff 45 f4             	incl   -0xc(%ebp)
f01280db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280de:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01280e4:	7c be                	jl     f01280a4 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01280e6:	e8 de 47 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01280eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280ee:	e8 49 bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01280f3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f01280f6:	83 ec 0c             	sub    $0xc,%esp
f01280f9:	68 00 00 a0 00       	push   $0xa00000
f01280fe:	e8 95 f9 fd ff       	call   f0107a98 <kexpand>
f0128103:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128106:	e8 31 bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012810b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012810e:	74 19                	je     f0128129 <test_kexpand+0xb11>
f0128110:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128115:	68 25 ba 13 f0       	push   $0xf013ba25
f012811a:	68 b8 0b 00 00       	push   $0xbb8
f012811f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128124:	e8 d2 80 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128129:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012812c:	e8 98 47 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128131:	29 c3                	sub    %eax,%ebx
f0128133:	89 d8                	mov    %ebx,%eax
f0128135:	3d 00 03 00 00       	cmp    $0x300,%eax
f012813a:	74 19                	je     f0128155 <test_kexpand+0xb3d>
f012813c:	68 78 ba 13 f0       	push   $0xf013ba78
f0128141:	68 25 ba 13 f0       	push   $0xf013ba25
f0128146:	68 b9 0b 00 00       	push   $0xbb9
f012814b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128150:	e8 a6 80 fd ff       	call   f01001fb <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128155:	e8 6f 47 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012815a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012815d:	e8 da bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128162:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128165:	83 ec 0c             	sub    $0xc,%esp
f0128168:	68 00 00 40 00       	push   $0x400000
f012816d:	e8 8c f6 fd ff       	call   f01077fe <kmalloc>
f0128172:	83 c4 10             	add    $0x10,%esp
f0128175:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f012817b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128181:	89 c1                	mov    %eax,%ecx
f0128183:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012818a:	10 00 00 
f012818d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128193:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128198:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012819e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01281a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01281a9:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01281af:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01281b5:	29 d0                	sub    %edx,%eax
f01281b7:	89 c3                	mov    %eax,%ebx
f01281b9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01281c0:	10 00 00 
f01281c3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01281c8:	0f b6 d0             	movzbl %al,%edx
f01281cb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01281d1:	01 d0                	add    %edx,%eax
f01281d3:	48                   	dec    %eax
f01281d4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01281da:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01281e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01281e5:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01281eb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01281f1:	29 d0                	sub    %edx,%eax
f01281f3:	01 c3                	add    %eax,%ebx
f01281f5:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01281fc:	10 00 00 
f01281ff:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128204:	0f b6 c0             	movzbl %al,%eax
f0128207:	c1 e0 04             	shl    $0x4,%eax
f012820a:	89 c2                	mov    %eax,%edx
f012820c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128212:	01 d0                	add    %edx,%eax
f0128214:	48                   	dec    %eax
f0128215:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012821b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128221:	ba 00 00 00 00       	mov    $0x0,%edx
f0128226:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012822c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128232:	29 d0                	sub    %edx,%eax
f0128234:	01 d8                	add    %ebx,%eax
f0128236:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f012823b:	39 c1                	cmp    %eax,%ecx
f012823d:	74 17                	je     f0128256 <test_kexpand+0xc3e>
f012823f:	83 ec 04             	sub    $0x4,%esp
f0128242:	68 a8 ba 13 f0       	push   $0xf013baa8
f0128247:	68 c4 0b 00 00       	push   $0xbc4
f012824c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128251:	e8 a5 7f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128256:	e8 e1 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012825b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012825e:	74 17                	je     f0128277 <test_kexpand+0xc5f>
f0128260:	83 ec 04             	sub    $0x4,%esp
f0128263:	68 74 ac 13 f0       	push   $0xf013ac74
f0128268:	68 c5 0b 00 00       	push   $0xbc5
f012826d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128272:	e8 84 7f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128277:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012827a:	e8 4a 46 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012827f:	29 c3                	sub    %eax,%ebx
f0128281:	89 d8                	mov    %ebx,%eax
f0128283:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128288:	74 17                	je     f01282a1 <test_kexpand+0xc89>
f012828a:	83 ec 04             	sub    $0x4,%esp
f012828d:	68 dc ac 13 f0       	push   $0xf013acdc
f0128292:	68 c6 0b 00 00       	push   $0xbc6
f0128297:	68 5a ac 13 f0       	push   $0xf013ac5a
f012829c:	e8 5a 7f fd ff       	call   f01001fb <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f01282a1:	e8 23 46 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01282a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282a9:	e8 8e ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01282ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01282b1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01282b7:	83 ec 0c             	sub    $0xc,%esp
f01282ba:	50                   	push   %eax
f01282bb:	e8 00 f6 fd ff       	call   f01078c0 <kfree>
f01282c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282c3:	e8 74 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01282c8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282cb:	74 17                	je     f01282e4 <test_kexpand+0xccc>
f01282cd:	83 ec 04             	sub    $0x4,%esp
f01282d0:	68 74 ac 13 f0       	push   $0xf013ac74
f01282d5:	68 cf 0b 00 00       	push   $0xbcf
f01282da:	68 5a ac 13 f0       	push   $0xf013ac5a
f01282df:	e8 17 7f fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01282e4:	e8 e0 45 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01282e9:	89 c2                	mov    %eax,%edx
f01282eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01282ee:	29 c2                	sub    %eax,%edx
f01282f0:	89 d0                	mov    %edx,%eax
f01282f2:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01282f7:	74 17                	je     f0128310 <test_kexpand+0xcf8>
f01282f9:	83 ec 04             	sub    $0x4,%esp
f01282fc:	68 0c b5 13 f0       	push   $0xf013b50c
f0128301:	68 d0 0b 00 00       	push   $0xbd0
f0128306:	68 5a ac 13 f0       	push   $0xf013ac5a
f012830b:	e8 eb 7e fd ff       	call   f01001fb <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128310:	e8 b4 45 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128315:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128318:	e8 1f ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012831d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128320:	83 ec 0c             	sub    $0xc,%esp
f0128323:	68 00 50 40 00       	push   $0x405000
f0128328:	e8 6b f7 fd ff       	call   f0107a98 <kexpand>
f012832d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128330:	e8 07 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128335:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128338:	74 19                	je     f0128353 <test_kexpand+0xd3b>
f012833a:	68 f4 b9 13 f0       	push   $0xf013b9f4
f012833f:	68 25 ba 13 f0       	push   $0xf013ba25
f0128344:	68 da 0b 00 00       	push   $0xbda
f0128349:	68 5a ac 13 f0       	push   $0xf013ac5a
f012834e:	e8 a8 7e fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128353:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128356:	e8 6e 45 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012835b:	29 c3                	sub    %eax,%ebx
f012835d:	89 d8                	mov    %ebx,%eax
f012835f:	83 f8 05             	cmp    $0x5,%eax
f0128362:	74 19                	je     f012837d <test_kexpand+0xd65>
f0128364:	68 d0 ba 13 f0       	push   $0xf013bad0
f0128369:	68 25 ba 13 f0       	push   $0xf013ba25
f012836e:	68 db 0b 00 00       	push   $0xbdb
f0128373:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128378:	e8 7e 7e fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012837d:	83 ec 0c             	sub    $0xc,%esp
f0128380:	68 b8 b9 13 f0       	push   $0xf013b9b8
f0128385:	e8 f8 88 fd ff       	call   f0100c82 <cprintf>
f012838a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012838d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128392:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128395:	5b                   	pop    %ebx
f0128396:	5f                   	pop    %edi
f0128397:	5d                   	pop    %ebp
f0128398:	c3                   	ret    

f0128399 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128399:	55                   	push   %ebp
f012839a:	89 e5                	mov    %esp,%ebp
f012839c:	57                   	push   %edi
f012839d:	53                   	push   %ebx
f012839e:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f01283a4:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01283a8:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01283ac:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01283b2:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01283b8:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01283bf:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01283c6:	e8 fe 44 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01283cb:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01283ce:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01283d4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01283de:	89 d7                	mov    %edx,%edi
f01283e0:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01283e2:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01283e8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01283f2:	89 d7                	mov    %edx,%edi
f01283f4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01283f6:	e8 ce 44 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01283fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283fe:	e8 39 b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128403:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128406:	83 ec 0c             	sub    $0xc,%esp
f0128409:	68 00 fc 1f 00       	push   $0x1ffc00
f012840e:	e8 eb f3 fd ff       	call   f01077fe <kmalloc>
f0128413:	83 c4 10             	add    $0x10,%esp
f0128416:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012841c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128422:	89 c1                	mov    %eax,%ecx
f0128424:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012842b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012842e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128433:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128436:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128439:	ba 00 00 00 00       	mov    $0x0,%edx
f012843e:	f7 75 d4             	divl   -0x2c(%ebp)
f0128441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128444:	29 d0                	sub    %edx,%eax
f0128446:	89 c3                	mov    %eax,%ebx
f0128448:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012844f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128454:	0f b6 d0             	movzbl %al,%edx
f0128457:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012845a:	01 d0                	add    %edx,%eax
f012845c:	48                   	dec    %eax
f012845d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128460:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128463:	ba 00 00 00 00       	mov    $0x0,%edx
f0128468:	f7 75 cc             	divl   -0x34(%ebp)
f012846b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012846e:	29 d0                	sub    %edx,%eax
f0128470:	01 c3                	add    %eax,%ebx
f0128472:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128479:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012847e:	0f b6 c0             	movzbl %al,%eax
f0128481:	c1 e0 04             	shl    $0x4,%eax
f0128484:	89 c2                	mov    %eax,%edx
f0128486:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128489:	01 d0                	add    %edx,%eax
f012848b:	48                   	dec    %eax
f012848c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012848f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128492:	ba 00 00 00 00       	mov    $0x0,%edx
f0128497:	f7 75 c4             	divl   -0x3c(%ebp)
f012849a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012849d:	29 d0                	sub    %edx,%eax
f012849f:	01 d8                	add    %ebx,%eax
f01284a1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01284a6:	39 c1                	cmp    %eax,%ecx
f01284a8:	74 17                	je     f01284c1 <test_kshrink+0x128>
f01284aa:	83 ec 04             	sub    $0x4,%esp
f01284ad:	68 40 ad 13 f0       	push   $0xf013ad40
f01284b2:	68 01 0c 00 00       	push   $0xc01
f01284b7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01284bc:	e8 3a 7d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01284c1:	e8 76 b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01284c6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01284c9:	74 17                	je     f01284e2 <test_kshrink+0x149>
f01284cb:	83 ec 04             	sub    $0x4,%esp
f01284ce:	68 74 ac 13 f0       	push   $0xf013ac74
f01284d3:	68 02 0c 00 00       	push   $0xc02
f01284d8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01284dd:	e8 19 7d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284e2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284e5:	e8 df 43 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01284ea:	29 c3                	sub    %eax,%ebx
f01284ec:	89 d8                	mov    %ebx,%eax
f01284ee:	3d 00 02 00 00       	cmp    $0x200,%eax
f01284f3:	74 17                	je     f012850c <test_kshrink+0x173>
f01284f5:	83 ec 04             	sub    $0x4,%esp
f01284f8:	68 dc ac 13 f0       	push   $0xf013acdc
f01284fd:	68 03 0c 00 00       	push   $0xc03
f0128502:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128507:	e8 ef 7c fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012850c:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128513:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128516:	e8 ae 43 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012851b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012851e:	e8 19 b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128523:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128526:	83 ec 0c             	sub    $0xc,%esp
f0128529:	68 00 fc 1f 00       	push   $0x1ffc00
f012852e:	e8 cb f2 fd ff       	call   f01077fe <kmalloc>
f0128533:	83 c4 10             	add    $0x10,%esp
f0128536:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012853c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128542:	89 c1                	mov    %eax,%ecx
f0128544:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012854b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012854e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128553:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128556:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128559:	ba 00 00 00 00       	mov    $0x0,%edx
f012855e:	f7 75 bc             	divl   -0x44(%ebp)
f0128561:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128564:	29 d0                	sub    %edx,%eax
f0128566:	89 c3                	mov    %eax,%ebx
f0128568:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012856f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128574:	0f b6 d0             	movzbl %al,%edx
f0128577:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012857a:	01 d0                	add    %edx,%eax
f012857c:	48                   	dec    %eax
f012857d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128580:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128583:	ba 00 00 00 00       	mov    $0x0,%edx
f0128588:	f7 75 b4             	divl   -0x4c(%ebp)
f012858b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012858e:	29 d0                	sub    %edx,%eax
f0128590:	01 c3                	add    %eax,%ebx
f0128592:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128599:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012859e:	0f b6 c0             	movzbl %al,%eax
f01285a1:	c1 e0 04             	shl    $0x4,%eax
f01285a4:	89 c2                	mov    %eax,%edx
f01285a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01285a9:	01 d0                	add    %edx,%eax
f01285ab:	48                   	dec    %eax
f01285ac:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01285af:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01285b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01285b7:	f7 75 ac             	divl   -0x54(%ebp)
f01285ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01285bd:	29 d0                	sub    %edx,%eax
f01285bf:	01 d8                	add    %ebx,%eax
f01285c1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01285c6:	39 c1                	cmp    %eax,%ecx
f01285c8:	74 17                	je     f01285e1 <test_kshrink+0x248>
f01285ca:	83 ec 04             	sub    $0x4,%esp
f01285cd:	68 40 ad 13 f0       	push   $0xf013ad40
f01285d2:	68 0a 0c 00 00       	push   $0xc0a
f01285d7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01285dc:	e8 1a 7c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285e1:	e8 56 b7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01285e6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285e9:	74 17                	je     f0128602 <test_kshrink+0x269>
f01285eb:	83 ec 04             	sub    $0x4,%esp
f01285ee:	68 74 ac 13 f0       	push   $0xf013ac74
f01285f3:	68 0b 0c 00 00       	push   $0xc0b
f01285f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01285fd:	e8 f9 7b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128602:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128605:	e8 bf 42 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012860a:	29 c3                	sub    %eax,%ebx
f012860c:	89 d8                	mov    %ebx,%eax
f012860e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128613:	74 17                	je     f012862c <test_kshrink+0x293>
f0128615:	83 ec 04             	sub    $0x4,%esp
f0128618:	68 dc ac 13 f0       	push   $0xf013acdc
f012861d:	68 0c 0c 00 00       	push   $0xc0c
f0128622:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128627:	e8 cf 7b fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012862c:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128633:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128636:	e8 8e 42 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012863b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012863e:	e8 f9 b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128643:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128646:	83 ec 0c             	sub    $0xc,%esp
f0128649:	68 00 08 00 00       	push   $0x800
f012864e:	e8 ab f1 fd ff       	call   f01077fe <kmalloc>
f0128653:	83 c4 10             	add    $0x10,%esp
f0128656:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012865c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128662:	89 c1                	mov    %eax,%ecx
f0128664:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012866b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012866e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128673:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128676:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128679:	ba 00 00 00 00       	mov    $0x0,%edx
f012867e:	f7 75 a4             	divl   -0x5c(%ebp)
f0128681:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128684:	29 d0                	sub    %edx,%eax
f0128686:	89 c3                	mov    %eax,%ebx
f0128688:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012868f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128694:	0f b6 d0             	movzbl %al,%edx
f0128697:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012869a:	01 d0                	add    %edx,%eax
f012869c:	48                   	dec    %eax
f012869d:	89 45 98             	mov    %eax,-0x68(%ebp)
f01286a0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01286a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01286a8:	f7 75 9c             	divl   -0x64(%ebp)
f01286ab:	8b 45 98             	mov    -0x68(%ebp),%eax
f01286ae:	29 d0                	sub    %edx,%eax
f01286b0:	01 c3                	add    %eax,%ebx
f01286b2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01286b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01286be:	0f b6 c0             	movzbl %al,%eax
f01286c1:	c1 e0 04             	shl    $0x4,%eax
f01286c4:	89 c2                	mov    %eax,%edx
f01286c6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01286c9:	01 d0                	add    %edx,%eax
f01286cb:	48                   	dec    %eax
f01286cc:	89 45 90             	mov    %eax,-0x70(%ebp)
f01286cf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01286d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01286d7:	f7 75 94             	divl   -0x6c(%ebp)
f01286da:	8b 45 90             	mov    -0x70(%ebp),%eax
f01286dd:	29 d0                	sub    %edx,%eax
f01286df:	01 d8                	add    %ebx,%eax
f01286e1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01286e6:	39 c1                	cmp    %eax,%ecx
f01286e8:	74 17                	je     f0128701 <test_kshrink+0x368>
f01286ea:	83 ec 04             	sub    $0x4,%esp
f01286ed:	68 40 ad 13 f0       	push   $0xf013ad40
f01286f2:	68 13 0c 00 00       	push   $0xc13
f01286f7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01286fc:	e8 fa 7a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128701:	e8 36 b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128706:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128709:	74 17                	je     f0128722 <test_kshrink+0x389>
f012870b:	83 ec 04             	sub    $0x4,%esp
f012870e:	68 74 ac 13 f0       	push   $0xf013ac74
f0128713:	68 14 0c 00 00       	push   $0xc14
f0128718:	68 5a ac 13 f0       	push   $0xf013ac5a
f012871d:	e8 d9 7a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128722:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128725:	e8 9f 41 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012872a:	29 c3                	sub    %eax,%ebx
f012872c:	89 d8                	mov    %ebx,%eax
f012872e:	83 f8 01             	cmp    $0x1,%eax
f0128731:	74 17                	je     f012874a <test_kshrink+0x3b1>
f0128733:	83 ec 04             	sub    $0x4,%esp
f0128736:	68 dc ac 13 f0       	push   $0xf013acdc
f012873b:	68 15 0c 00 00       	push   $0xc15
f0128740:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128745:	e8 b1 7a fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012874a:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128751:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128754:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012875a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012875d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128764:	eb 0e                	jmp    f0128774 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0128766:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128769:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012876c:	01 d0                	add    %edx,%eax
f012876e:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128771:	ff 45 f4             	incl   -0xc(%ebp)
f0128774:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012877a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012877d:	7f e7                	jg     f0128766 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012877f:	e8 45 41 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128784:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128787:	e8 b0 b5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012878c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012878f:	83 ec 0c             	sub    $0xc,%esp
f0128792:	68 00 08 00 00       	push   $0x800
f0128797:	e8 62 f0 fd ff       	call   f01077fe <kmalloc>
f012879c:	83 c4 10             	add    $0x10,%esp
f012879f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01287a5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01287ab:	89 c1                	mov    %eax,%ecx
f01287ad:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01287b4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01287b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01287bc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01287bf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01287c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01287c7:	f7 75 88             	divl   -0x78(%ebp)
f01287ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01287cd:	29 d0                	sub    %edx,%eax
f01287cf:	89 c3                	mov    %eax,%ebx
f01287d1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01287d8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01287dd:	0f b6 d0             	movzbl %al,%edx
f01287e0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01287e3:	01 d0                	add    %edx,%eax
f01287e5:	48                   	dec    %eax
f01287e6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01287ec:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01287f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01287f7:	f7 75 80             	divl   -0x80(%ebp)
f01287fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128800:	29 d0                	sub    %edx,%eax
f0128802:	01 c3                	add    %eax,%ebx
f0128804:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012880b:	10 00 00 
f012880e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128813:	0f b6 c0             	movzbl %al,%eax
f0128816:	c1 e0 04             	shl    $0x4,%eax
f0128819:	89 c2                	mov    %eax,%edx
f012881b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128821:	01 d0                	add    %edx,%eax
f0128823:	48                   	dec    %eax
f0128824:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012882a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128830:	ba 00 00 00 00       	mov    $0x0,%edx
f0128835:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012883b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128841:	29 d0                	sub    %edx,%eax
f0128843:	01 d8                	add    %ebx,%eax
f0128845:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012884a:	39 c1                	cmp    %eax,%ecx
f012884c:	74 17                	je     f0128865 <test_kshrink+0x4cc>
f012884e:	83 ec 04             	sub    $0x4,%esp
f0128851:	68 40 ad 13 f0       	push   $0xf013ad40
f0128856:	68 21 0c 00 00       	push   $0xc21
f012885b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128860:	e8 96 79 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128865:	e8 d2 b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012886a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012886d:	74 17                	je     f0128886 <test_kshrink+0x4ed>
f012886f:	83 ec 04             	sub    $0x4,%esp
f0128872:	68 74 ac 13 f0       	push   $0xf013ac74
f0128877:	68 22 0c 00 00       	push   $0xc22
f012887c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128881:	e8 75 79 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128886:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128889:	e8 3b 40 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012888e:	29 c3                	sub    %eax,%ebx
f0128890:	89 d8                	mov    %ebx,%eax
f0128892:	83 f8 01             	cmp    $0x1,%eax
f0128895:	74 17                	je     f01288ae <test_kshrink+0x515>
f0128897:	83 ec 04             	sub    $0x4,%esp
f012889a:	68 dc ac 13 f0       	push   $0xf013acdc
f012889f:	68 23 0c 00 00       	push   $0xc23
f01288a4:	68 5a ac 13 f0       	push   $0xf013ac5a
f01288a9:	e8 4d 79 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01288ae:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01288b5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01288b8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01288be:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01288c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288c8:	eb 0e                	jmp    f01288d8 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01288ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01288cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288d0:	01 d0                	add    %edx,%eax
f01288d2:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01288d5:	ff 45 f4             	incl   -0xc(%ebp)
f01288d8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01288de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288e1:	7f e7                	jg     f01288ca <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01288e3:	e8 e1 3f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01288e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01288eb:	e8 4c b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01288f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01288f3:	83 ec 0c             	sub    $0xc,%esp
f01288f6:	68 00 1c 00 00       	push   $0x1c00
f01288fb:	e8 fe ee fd ff       	call   f01077fe <kmalloc>
f0128900:	83 c4 10             	add    $0x10,%esp
f0128903:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128909:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012890f:	89 c1                	mov    %eax,%ecx
f0128911:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128918:	10 00 00 
f012891b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128921:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128926:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012892c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128932:	ba 00 00 00 00       	mov    $0x0,%edx
f0128937:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012893d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128943:	29 d0                	sub    %edx,%eax
f0128945:	89 c3                	mov    %eax,%ebx
f0128947:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012894e:	10 00 00 
f0128951:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128956:	0f b6 d0             	movzbl %al,%edx
f0128959:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012895f:	01 d0                	add    %edx,%eax
f0128961:	48                   	dec    %eax
f0128962:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128968:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012896e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128973:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128979:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012897f:	29 d0                	sub    %edx,%eax
f0128981:	01 c3                	add    %eax,%ebx
f0128983:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012898a:	10 00 00 
f012898d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128992:	0f b6 c0             	movzbl %al,%eax
f0128995:	c1 e0 04             	shl    $0x4,%eax
f0128998:	89 c2                	mov    %eax,%edx
f012899a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01289a0:	01 d0                	add    %edx,%eax
f01289a2:	48                   	dec    %eax
f01289a3:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01289a9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01289af:	ba 00 00 00 00       	mov    $0x0,%edx
f01289b4:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01289ba:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01289c0:	29 d0                	sub    %edx,%eax
f01289c2:	01 d8                	add    %ebx,%eax
f01289c4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01289c9:	39 c1                	cmp    %eax,%ecx
f01289cb:	74 17                	je     f01289e4 <test_kshrink+0x64b>
f01289cd:	83 ec 04             	sub    $0x4,%esp
f01289d0:	68 40 ad 13 f0       	push   $0xf013ad40
f01289d5:	68 2f 0c 00 00       	push   $0xc2f
f01289da:	68 5a ac 13 f0       	push   $0xf013ac5a
f01289df:	e8 17 78 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289e4:	e8 53 b3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01289e9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289ec:	74 17                	je     f0128a05 <test_kshrink+0x66c>
f01289ee:	83 ec 04             	sub    $0x4,%esp
f01289f1:	68 74 ac 13 f0       	push   $0xf013ac74
f01289f6:	68 30 0c 00 00       	push   $0xc30
f01289fb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128a00:	e8 f6 77 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a05:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a08:	e8 bc 3e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128a0d:	29 c3                	sub    %eax,%ebx
f0128a0f:	89 d8                	mov    %ebx,%eax
f0128a11:	83 f8 02             	cmp    $0x2,%eax
f0128a14:	74 17                	je     f0128a2d <test_kshrink+0x694>
f0128a16:	83 ec 04             	sub    $0x4,%esp
f0128a19:	68 dc ac 13 f0       	push   $0xf013acdc
f0128a1e:	68 31 0c 00 00       	push   $0xc31
f0128a23:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128a28:	e8 ce 77 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128a2d:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128a34:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128a37:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128a3d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128a40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a47:	eb 0e                	jmp    f0128a57 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128a49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a4c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128a4f:	01 d0                	add    %edx,%eax
f0128a51:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128a54:	ff 45 f4             	incl   -0xc(%ebp)
f0128a57:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128a5d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a60:	7f e7                	jg     f0128a49 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128a62:	e8 62 3e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128a67:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a6a:	e8 cd b2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128a6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128a72:	83 ec 0c             	sub    $0xc,%esp
f0128a75:	68 00 fc 2f 00       	push   $0x2ffc00
f0128a7a:	e8 7f ed fd ff       	call   f01077fe <kmalloc>
f0128a7f:	83 c4 10             	add    $0x10,%esp
f0128a82:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a88:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128a8e:	89 c1                	mov    %eax,%ecx
f0128a90:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128a97:	10 00 00 
f0128a9a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128aa0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128aa5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128aab:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128ab1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ab6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128abc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128ac2:	29 d0                	sub    %edx,%eax
f0128ac4:	89 c3                	mov    %eax,%ebx
f0128ac6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128acd:	10 00 00 
f0128ad0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128ad5:	0f b6 d0             	movzbl %al,%edx
f0128ad8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128ade:	01 d0                	add    %edx,%eax
f0128ae0:	48                   	dec    %eax
f0128ae1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128ae7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128aed:	ba 00 00 00 00       	mov    $0x0,%edx
f0128af2:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128af8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128afe:	29 d0                	sub    %edx,%eax
f0128b00:	01 c3                	add    %eax,%ebx
f0128b02:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128b09:	10 00 00 
f0128b0c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128b11:	0f b6 c0             	movzbl %al,%eax
f0128b14:	c1 e0 04             	shl    $0x4,%eax
f0128b17:	89 c2                	mov    %eax,%edx
f0128b19:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128b1f:	01 d0                	add    %edx,%eax
f0128b21:	48                   	dec    %eax
f0128b22:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128b28:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128b2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b33:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128b39:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128b3f:	29 d0                	sub    %edx,%eax
f0128b41:	01 d8                	add    %ebx,%eax
f0128b43:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128b48:	39 c1                	cmp    %eax,%ecx
f0128b4a:	74 17                	je     f0128b63 <test_kshrink+0x7ca>
f0128b4c:	83 ec 04             	sub    $0x4,%esp
f0128b4f:	68 40 ad 13 f0       	push   $0xf013ad40
f0128b54:	68 3d 0c 00 00       	push   $0xc3d
f0128b59:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128b5e:	e8 98 76 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b63:	e8 d4 b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128b68:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b6b:	74 17                	je     f0128b84 <test_kshrink+0x7eb>
f0128b6d:	83 ec 04             	sub    $0x4,%esp
f0128b70:	68 74 ac 13 f0       	push   $0xf013ac74
f0128b75:	68 3e 0c 00 00       	push   $0xc3e
f0128b7a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128b7f:	e8 77 76 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b84:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b87:	e8 3d 3d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128b8c:	29 c3                	sub    %eax,%ebx
f0128b8e:	89 d8                	mov    %ebx,%eax
f0128b90:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128b95:	74 17                	je     f0128bae <test_kshrink+0x815>
f0128b97:	83 ec 04             	sub    $0x4,%esp
f0128b9a:	68 dc ac 13 f0       	push   $0xf013acdc
f0128b9f:	68 3f 0c 00 00       	push   $0xc3f
f0128ba4:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128ba9:	e8 4d 76 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128bae:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128bb5:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128bb8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128bbe:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128bc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bc8:	eb 0e                	jmp    f0128bd8 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128bca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128bcd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128bd0:	01 d0                	add    %edx,%eax
f0128bd2:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128bd5:	ff 45 f4             	incl   -0xc(%ebp)
f0128bd8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128bde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128be1:	7f e7                	jg     f0128bca <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128be3:	e8 e1 3c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128be8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128beb:	e8 4c b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128bf0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128bf3:	83 ec 0c             	sub    $0xc,%esp
f0128bf6:	68 00 00 60 00       	push   $0x600000
f0128bfb:	e8 fe eb fd ff       	call   f01077fe <kmalloc>
f0128c00:	83 c4 10             	add    $0x10,%esp
f0128c03:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c09:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128c0f:	89 c1                	mov    %eax,%ecx
f0128c11:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128c18:	10 00 00 
f0128c1b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128c21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c26:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128c2c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c32:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c37:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128c3d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c43:	29 d0                	sub    %edx,%eax
f0128c45:	89 c3                	mov    %eax,%ebx
f0128c47:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128c4e:	10 00 00 
f0128c51:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128c56:	0f b6 d0             	movzbl %al,%edx
f0128c59:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128c5f:	01 d0                	add    %edx,%eax
f0128c61:	48                   	dec    %eax
f0128c62:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128c68:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128c6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c73:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128c79:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128c7f:	29 d0                	sub    %edx,%eax
f0128c81:	01 c3                	add    %eax,%ebx
f0128c83:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128c8a:	10 00 00 
f0128c8d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128c92:	0f b6 c0             	movzbl %al,%eax
f0128c95:	c1 e0 04             	shl    $0x4,%eax
f0128c98:	89 c2                	mov    %eax,%edx
f0128c9a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128ca0:	01 d0                	add    %edx,%eax
f0128ca2:	48                   	dec    %eax
f0128ca3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128ca9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cb4:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128cba:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128cc0:	29 d0                	sub    %edx,%eax
f0128cc2:	01 d8                	add    %ebx,%eax
f0128cc4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128cc9:	39 c1                	cmp    %eax,%ecx
f0128ccb:	74 17                	je     f0128ce4 <test_kshrink+0x94b>
f0128ccd:	83 ec 04             	sub    $0x4,%esp
f0128cd0:	68 40 ad 13 f0       	push   $0xf013ad40
f0128cd5:	68 4b 0c 00 00       	push   $0xc4b
f0128cda:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128cdf:	e8 17 75 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ce4:	e8 53 b0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128ce9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128cec:	74 17                	je     f0128d05 <test_kshrink+0x96c>
f0128cee:	83 ec 04             	sub    $0x4,%esp
f0128cf1:	68 74 ac 13 f0       	push   $0xf013ac74
f0128cf6:	68 4c 0c 00 00       	push   $0xc4c
f0128cfb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128d00:	e8 f6 74 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d05:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d08:	e8 bc 3b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128d0d:	29 c3                	sub    %eax,%ebx
f0128d0f:	89 d8                	mov    %ebx,%eax
f0128d11:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128d16:	74 17                	je     f0128d2f <test_kshrink+0x996>
f0128d18:	83 ec 04             	sub    $0x4,%esp
f0128d1b:	68 dc ac 13 f0       	push   $0xf013acdc
f0128d20:	68 4d 0c 00 00       	push   $0xc4d
f0128d25:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128d2a:	e8 cc 74 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128d2f:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128d36:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128d39:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128d3f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128d45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d4c:	eb 1a                	jmp    f0128d68 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128d58:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128d5e:	01 c2                	add    %eax,%edx
f0128d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d63:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128d65:	ff 45 f4             	incl   -0xc(%ebp)
f0128d68:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128d6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d71:	7d db                	jge    f0128d4e <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128d73:	e8 51 3b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128d78:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d7b:	e8 bc af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128d80:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0128d83:	83 ec 0c             	sub    $0xc,%esp
f0128d86:	68 00 00 50 00       	push   $0x500000
f0128d8b:	e8 eb ec fd ff       	call   f0107a7b <kshrink>
f0128d90:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128d93:	e8 a4 af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128d98:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d9b:	74 19                	je     f0128db6 <test_kshrink+0xa1d>
f0128d9d:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128da2:	68 25 ba 13 f0       	push   $0xf013ba25
f0128da7:	68 5d 0c 00 00       	push   $0xc5d
f0128dac:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128db1:	e8 45 74 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128db6:	e8 0e 3b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128dbb:	89 c2                	mov    %eax,%edx
f0128dbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128dc0:	29 c2                	sub    %eax,%edx
f0128dc2:	89 d0                	mov    %edx,%eax
f0128dc4:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128dc9:	74 19                	je     f0128de4 <test_kshrink+0xa4b>
f0128dcb:	68 00 bb 13 f0       	push   $0xf013bb00
f0128dd0:	68 25 ba 13 f0       	push   $0xf013ba25
f0128dd5:	68 5e 0c 00 00       	push   $0xc5e
f0128dda:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128ddf:	e8 17 74 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128de4:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128deb:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128df5:	eb 37                	jmp    f0128e2e <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128dfa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e01:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e07:	01 d0                	add    %edx,%eax
f0128e09:	8b 10                	mov    (%eax),%edx
f0128e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e0e:	39 c2                	cmp    %eax,%edx
f0128e10:	74 19                	je     f0128e2b <test_kshrink+0xa92>
f0128e12:	68 30 bb 13 f0       	push   $0xf013bb30
f0128e17:	68 25 ba 13 f0       	push   $0xf013ba25
f0128e1c:	68 66 0c 00 00       	push   $0xc66
f0128e21:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128e26:	e8 d0 73 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128e2b:	ff 45 f4             	incl   -0xc(%ebp)
f0128e2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e31:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128e37:	7e be                	jle    f0128df7 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128e39:	83 ec 0c             	sub    $0xc,%esp
f0128e3c:	6a 03                	push   $0x3
f0128e3e:	e8 26 3f fe ff       	call   f010cd69 <sys_bypassPageFault>
f0128e43:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128e46:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128e4c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128e4f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128e52:	05 00 00 50 00       	add    $0x500000,%eax
f0128e57:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128e5a:	e8 f8 3e fe ff       	call   f010cd57 <sys_rcr2>
f0128e5f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128e62:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128e68:	39 d0                	cmp    %edx,%eax
f0128e6a:	74 19                	je     f0128e85 <test_kshrink+0xaec>
f0128e6c:	68 3c bb 13 f0       	push   $0xf013bb3c
f0128e71:	68 25 ba 13 f0       	push   $0xf013ba25
f0128e76:	68 6f 0c 00 00       	push   $0xc6f
f0128e7b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128e80:	e8 76 73 fd ff       	call   f01001fb <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0128e85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128e88:	05 00 10 50 00       	add    $0x501000,%eax
f0128e8d:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0128e90:	e8 c2 3e fe ff       	call   f010cd57 <sys_rcr2>
f0128e95:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128e98:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128e9e:	39 d0                	cmp    %edx,%eax
f0128ea0:	74 19                	je     f0128ebb <test_kshrink+0xb22>
f0128ea2:	68 64 bb 13 f0       	push   $0xf013bb64
f0128ea7:	68 25 ba 13 f0       	push   $0xf013ba25
f0128eac:	68 72 0c 00 00       	push   $0xc72
f0128eb1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128eb6:	e8 40 73 fd ff       	call   f01001fb <_panic>

		ptr[6*Mega - kilo] = 10;
f0128ebb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128ebe:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128ec3:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128ec6:	e8 8c 3e fe ff       	call   f010cd57 <sys_rcr2>
f0128ecb:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128ece:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128ed4:	39 d0                	cmp    %edx,%eax
f0128ed6:	74 19                	je     f0128ef1 <test_kshrink+0xb58>
f0128ed8:	68 90 bb 13 f0       	push   $0xf013bb90
f0128edd:	68 25 ba 13 f0       	push   $0xf013ba25
f0128ee2:	68 75 0c 00 00       	push   $0xc75
f0128ee7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128eec:	e8 0a 73 fd ff       	call   f01001fb <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128ef1:	83 ec 0c             	sub    $0xc,%esp
f0128ef4:	6a 00                	push   $0x0
f0128ef6:	e8 6e 3e fe ff       	call   f010cd69 <sys_bypassPageFault>
f0128efb:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128efe:	e8 c6 39 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128f03:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f06:	e8 31 ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f0b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128f0e:	83 ec 0c             	sub    $0xc,%esp
f0128f11:	68 00 00 20 00       	push   $0x200000
f0128f16:	e8 60 eb fd ff       	call   f0107a7b <kshrink>
f0128f1b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128f1e:	e8 19 ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f23:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f26:	74 19                	je     f0128f41 <test_kshrink+0xba8>
f0128f28:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128f2d:	68 25 ba 13 f0       	push   $0xf013ba25
f0128f32:	68 82 0c 00 00       	push   $0xc82
f0128f37:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128f3c:	e8 ba 72 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0128f41:	e8 83 39 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128f46:	89 c2                	mov    %eax,%edx
f0128f48:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128f4b:	29 c2                	sub    %eax,%edx
f0128f4d:	89 d0                	mov    %edx,%eax
f0128f4f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128f54:	74 19                	je     f0128f6f <test_kshrink+0xbd6>
f0128f56:	68 bc bb 13 f0       	push   $0xf013bbbc
f0128f5b:	68 25 ba 13 f0       	push   $0xf013ba25
f0128f60:	68 83 0c 00 00       	push   $0xc83
f0128f65:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128f6a:	e8 8c 72 fd ff       	call   f01001fb <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f6f:	e8 55 39 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0128f74:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f77:	e8 c0 ad fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f7c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128f7f:	83 ec 0c             	sub    $0xc,%esp
f0128f82:	68 00 00 40 00       	push   $0x400000
f0128f87:	e8 72 e8 fd ff       	call   f01077fe <kmalloc>
f0128f8c:	83 c4 10             	add    $0x10,%esp
f0128f8f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0128f95:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128f9c:	10 00 00 
f0128f9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128fa5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128faa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128fb0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fbb:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128fc1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fc7:	29 d0                	sub    %edx,%eax
f0128fc9:	89 c1                	mov    %eax,%ecx
f0128fcb:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128fd2:	10 00 00 
f0128fd5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128fda:	0f b6 d0             	movzbl %al,%edx
f0128fdd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128fe3:	01 d0                	add    %edx,%eax
f0128fe5:	48                   	dec    %eax
f0128fe6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128fec:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128ff2:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ff7:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128ffd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129003:	29 d0                	sub    %edx,%eax
f0129005:	01 c1                	add    %eax,%ecx
f0129007:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012900e:	10 00 00 
f0129011:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129016:	0f b6 c0             	movzbl %al,%eax
f0129019:	c1 e0 04             	shl    $0x4,%eax
f012901c:	89 c2                	mov    %eax,%edx
f012901e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129024:	01 d0                	add    %edx,%eax
f0129026:	48                   	dec    %eax
f0129027:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012902d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129033:	ba 00 00 00 00       	mov    $0x0,%edx
f0129038:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012903e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129044:	29 d0                	sub    %edx,%eax
f0129046:	01 c8                	add    %ecx,%eax
f0129048:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f012904e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129054:	83 ec 04             	sub    $0x4,%esp
f0129057:	52                   	push   %edx
f0129058:	50                   	push   %eax
f0129059:	68 ec bb 13 f0       	push   $0xf013bbec
f012905e:	e8 1f 7c fd ff       	call   f0100c82 <cprintf>
f0129063:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129066:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012906c:	89 c1                	mov    %eax,%ecx
f012906e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129075:	10 00 00 
f0129078:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012907e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129083:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129089:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012908f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129094:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012909a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01290a0:	29 d0                	sub    %edx,%eax
f01290a2:	89 c3                	mov    %eax,%ebx
f01290a4:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01290ab:	10 00 00 
f01290ae:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01290b3:	0f b6 d0             	movzbl %al,%edx
f01290b6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01290bc:	01 d0                	add    %edx,%eax
f01290be:	48                   	dec    %eax
f01290bf:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01290c5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01290cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01290d0:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01290d6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01290dc:	29 d0                	sub    %edx,%eax
f01290de:	01 c3                	add    %eax,%ebx
f01290e0:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01290e7:	10 00 00 
f01290ea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01290ef:	0f b6 c0             	movzbl %al,%eax
f01290f2:	c1 e0 04             	shl    $0x4,%eax
f01290f5:	89 c2                	mov    %eax,%edx
f01290f7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01290fd:	01 d0                	add    %edx,%eax
f01290ff:	48                   	dec    %eax
f0129100:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129106:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012910c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129111:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129117:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012911d:	29 d0                	sub    %edx,%eax
f012911f:	01 d8                	add    %ebx,%eax
f0129121:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129126:	39 c1                	cmp    %eax,%ecx
f0129128:	74 17                	je     f0129141 <test_kshrink+0xda8>
f012912a:	83 ec 04             	sub    $0x4,%esp
f012912d:	68 08 bc 13 f0       	push   $0xf013bc08
f0129132:	68 8e 0c 00 00       	push   $0xc8e
f0129137:	68 5a ac 13 f0       	push   $0xf013ac5a
f012913c:	e8 ba 70 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129141:	e8 f6 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129146:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129149:	74 17                	je     f0129162 <test_kshrink+0xdc9>
f012914b:	83 ec 04             	sub    $0x4,%esp
f012914e:	68 74 ac 13 f0       	push   $0xf013ac74
f0129153:	68 8f 0c 00 00       	push   $0xc8f
f0129158:	68 5a ac 13 f0       	push   $0xf013ac5a
f012915d:	e8 99 70 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129162:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129165:	e8 5f 37 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012916a:	29 c3                	sub    %eax,%ebx
f012916c:	89 d8                	mov    %ebx,%eax
f012916e:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129173:	74 17                	je     f012918c <test_kshrink+0xdf3>
f0129175:	83 ec 04             	sub    $0x4,%esp
f0129178:	68 dc ac 13 f0       	push   $0xf013acdc
f012917d:	68 90 0c 00 00       	push   $0xc90
f0129182:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129187:	e8 6f 70 fd ff       	call   f01001fb <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f012918c:	e8 38 37 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129191:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129194:	e8 a3 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129199:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012919c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01291a2:	83 ec 0c             	sub    $0xc,%esp
f01291a5:	50                   	push   %eax
f01291a6:	e8 15 e7 fd ff       	call   f01078c0 <kfree>
f01291ab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291ae:	e8 89 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01291b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291b6:	74 17                	je     f01291cf <test_kshrink+0xe36>
f01291b8:	83 ec 04             	sub    $0x4,%esp
f01291bb:	68 74 ac 13 f0       	push   $0xf013ac74
f01291c0:	68 9a 0c 00 00       	push   $0xc9a
f01291c5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01291ca:	e8 2c 70 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01291cf:	e8 f5 36 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01291d4:	89 c2                	mov    %eax,%edx
f01291d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01291d9:	29 c2                	sub    %eax,%edx
f01291db:	89 d0                	mov    %edx,%eax
f01291dd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01291e2:	74 17                	je     f01291fb <test_kshrink+0xe62>
f01291e4:	83 ec 04             	sub    $0x4,%esp
f01291e7:	68 0c b5 13 f0       	push   $0xf013b50c
f01291ec:	68 9b 0c 00 00       	push   $0xc9b
f01291f1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01291f6:	e8 00 70 fd ff       	call   f01001fb <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01291fb:	e8 c9 36 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129200:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129203:	e8 34 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129208:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012920b:	83 ec 0c             	sub    $0xc,%esp
f012920e:	68 00 b0 3f 00       	push   $0x3fb000
f0129213:	e8 63 e8 fd ff       	call   f0107a7b <kshrink>
f0129218:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012921b:	e8 1c ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129220:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129223:	74 19                	je     f012923e <test_kshrink+0xea5>
f0129225:	68 f4 b9 13 f0       	push   $0xf013b9f4
f012922a:	68 25 ba 13 f0       	push   $0xf013ba25
f012922f:	68 a5 0c 00 00       	push   $0xca5
f0129234:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129239:	e8 bd 6f fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f012923e:	e8 86 36 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129243:	89 c2                	mov    %eax,%edx
f0129245:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129248:	29 c2                	sub    %eax,%edx
f012924a:	89 d0                	mov    %edx,%eax
f012924c:	83 f8 05             	cmp    $0x5,%eax
f012924f:	74 19                	je     f012926a <test_kshrink+0xed1>
f0129251:	68 5c bc 13 f0       	push   $0xf013bc5c
f0129256:	68 25 ba 13 f0       	push   $0xf013ba25
f012925b:	68 a6 0c 00 00       	push   $0xca6
f0129260:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129265:	e8 91 6f fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012926a:	83 ec 0c             	sub    $0xc,%esp
f012926d:	68 b8 b9 13 f0       	push   $0xf013b9b8
f0129272:	e8 0b 7a fd ff       	call   f0100c82 <cprintf>
f0129277:	83 c4 10             	add    $0x10,%esp

	return 1;
f012927a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012927f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129282:	5b                   	pop    %ebx
f0129283:	5f                   	pop    %edi
f0129284:	5d                   	pop    %ebp
f0129285:	c3                   	ret    

f0129286 <test_kfreelast>:


int test_kfreelast()
{
f0129286:	55                   	push   %ebp
f0129287:	89 e5                	mov    %esp,%ebp
f0129289:	57                   	push   %edi
f012928a:	53                   	push   %ebx
f012928b:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129291:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129295:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129299:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012929f:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f01292a5:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01292ac:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01292b3:	e8 11 36 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01292b8:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01292bb:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f01292c1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01292c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01292cb:	89 d7                	mov    %edx,%edi
f01292cd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01292cf:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01292d5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01292da:	b8 00 00 00 00       	mov    $0x0,%eax
f01292df:	89 d7                	mov    %edx,%edi
f01292e1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01292e3:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f01292e9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01292ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01292f3:	89 d7                	mov    %edx,%edi
f01292f5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01292f7:	e8 cd 35 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01292fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292ff:	e8 38 aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129304:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129307:	83 ec 0c             	sub    $0xc,%esp
f012930a:	68 00 fc 1f 00       	push   $0x1ffc00
f012930f:	e8 ea e4 fd ff       	call   f01077fe <kmalloc>
f0129314:	83 c4 10             	add    $0x10,%esp
f0129317:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012931d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129323:	89 c1                	mov    %eax,%ecx
f0129325:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012932c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012932f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129334:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129337:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012933a:	ba 00 00 00 00       	mov    $0x0,%edx
f012933f:	f7 75 cc             	divl   -0x34(%ebp)
f0129342:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129345:	29 d0                	sub    %edx,%eax
f0129347:	89 c3                	mov    %eax,%ebx
f0129349:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129350:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129355:	0f b6 d0             	movzbl %al,%edx
f0129358:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012935b:	01 d0                	add    %edx,%eax
f012935d:	48                   	dec    %eax
f012935e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129361:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129364:	ba 00 00 00 00       	mov    $0x0,%edx
f0129369:	f7 75 c4             	divl   -0x3c(%ebp)
f012936c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012936f:	29 d0                	sub    %edx,%eax
f0129371:	01 c3                	add    %eax,%ebx
f0129373:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012937a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012937f:	0f b6 c0             	movzbl %al,%eax
f0129382:	c1 e0 04             	shl    $0x4,%eax
f0129385:	89 c2                	mov    %eax,%edx
f0129387:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012938a:	01 d0                	add    %edx,%eax
f012938c:	48                   	dec    %eax
f012938d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129390:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129393:	ba 00 00 00 00       	mov    $0x0,%edx
f0129398:	f7 75 bc             	divl   -0x44(%ebp)
f012939b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012939e:	29 d0                	sub    %edx,%eax
f01293a0:	01 d8                	add    %ebx,%eax
f01293a2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01293a7:	39 c1                	cmp    %eax,%ecx
f01293a9:	74 17                	je     f01293c2 <test_kfreelast+0x13c>
f01293ab:	83 ec 04             	sub    $0x4,%esp
f01293ae:	68 40 ad 13 f0       	push   $0xf013ad40
f01293b3:	68 ca 0c 00 00       	push   $0xcca
f01293b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01293bd:	e8 39 6e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293c2:	e8 75 a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01293c7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293ca:	74 17                	je     f01293e3 <test_kfreelast+0x15d>
f01293cc:	83 ec 04             	sub    $0x4,%esp
f01293cf:	68 74 ac 13 f0       	push   $0xf013ac74
f01293d4:	68 cb 0c 00 00       	push   $0xccb
f01293d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01293de:	e8 18 6e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293e3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01293e6:	e8 de 34 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01293eb:	29 c3                	sub    %eax,%ebx
f01293ed:	89 d8                	mov    %ebx,%eax
f01293ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f01293f4:	74 17                	je     f012940d <test_kfreelast+0x187>
f01293f6:	83 ec 04             	sub    $0x4,%esp
f01293f9:	68 dc ac 13 f0       	push   $0xf013acdc
f01293fe:	68 cc 0c 00 00       	push   $0xccc
f0129403:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129408:	e8 ee 6d fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012940d:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129414:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129417:	e8 ad 34 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012941c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012941f:	e8 18 a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129424:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129427:	83 ec 0c             	sub    $0xc,%esp
f012942a:	68 00 fc 1f 00       	push   $0x1ffc00
f012942f:	e8 ca e3 fd ff       	call   f01077fe <kmalloc>
f0129434:	83 c4 10             	add    $0x10,%esp
f0129437:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012943d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129443:	89 c1                	mov    %eax,%ecx
f0129445:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012944c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012944f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129454:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129457:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012945a:	ba 00 00 00 00       	mov    $0x0,%edx
f012945f:	f7 75 b4             	divl   -0x4c(%ebp)
f0129462:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129465:	29 d0                	sub    %edx,%eax
f0129467:	89 c3                	mov    %eax,%ebx
f0129469:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129470:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129475:	0f b6 d0             	movzbl %al,%edx
f0129478:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012947b:	01 d0                	add    %edx,%eax
f012947d:	48                   	dec    %eax
f012947e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129481:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129484:	ba 00 00 00 00       	mov    $0x0,%edx
f0129489:	f7 75 ac             	divl   -0x54(%ebp)
f012948c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012948f:	29 d0                	sub    %edx,%eax
f0129491:	01 c3                	add    %eax,%ebx
f0129493:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012949a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012949f:	0f b6 c0             	movzbl %al,%eax
f01294a2:	c1 e0 04             	shl    $0x4,%eax
f01294a5:	89 c2                	mov    %eax,%edx
f01294a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01294aa:	01 d0                	add    %edx,%eax
f01294ac:	48                   	dec    %eax
f01294ad:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01294b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01294b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01294b8:	f7 75 a4             	divl   -0x5c(%ebp)
f01294bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01294be:	29 d0                	sub    %edx,%eax
f01294c0:	01 d8                	add    %ebx,%eax
f01294c2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01294c7:	39 c1                	cmp    %eax,%ecx
f01294c9:	74 17                	je     f01294e2 <test_kfreelast+0x25c>
f01294cb:	83 ec 04             	sub    $0x4,%esp
f01294ce:	68 40 ad 13 f0       	push   $0xf013ad40
f01294d3:	68 d3 0c 00 00       	push   $0xcd3
f01294d8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01294dd:	e8 19 6d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294e2:	e8 55 a8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01294e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01294ea:	74 17                	je     f0129503 <test_kfreelast+0x27d>
f01294ec:	83 ec 04             	sub    $0x4,%esp
f01294ef:	68 74 ac 13 f0       	push   $0xf013ac74
f01294f4:	68 d4 0c 00 00       	push   $0xcd4
f01294f9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01294fe:	e8 f8 6c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129503:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129506:	e8 be 33 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012950b:	29 c3                	sub    %eax,%ebx
f012950d:	89 d8                	mov    %ebx,%eax
f012950f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129514:	74 17                	je     f012952d <test_kfreelast+0x2a7>
f0129516:	83 ec 04             	sub    $0x4,%esp
f0129519:	68 dc ac 13 f0       	push   $0xf013acdc
f012951e:	68 d5 0c 00 00       	push   $0xcd5
f0129523:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129528:	e8 ce 6c fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012952d:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129534:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129537:	e8 8d 33 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012953c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012953f:	e8 f8 a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129544:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129547:	83 ec 0c             	sub    $0xc,%esp
f012954a:	68 00 08 00 00       	push   $0x800
f012954f:	e8 aa e2 fd ff       	call   f01077fe <kmalloc>
f0129554:	83 c4 10             	add    $0x10,%esp
f0129557:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012955d:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129563:	89 c1                	mov    %eax,%ecx
f0129565:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012956c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012956f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129574:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129577:	8b 45 98             	mov    -0x68(%ebp),%eax
f012957a:	ba 00 00 00 00       	mov    $0x0,%edx
f012957f:	f7 75 9c             	divl   -0x64(%ebp)
f0129582:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129585:	29 d0                	sub    %edx,%eax
f0129587:	89 c3                	mov    %eax,%ebx
f0129589:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129590:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129595:	0f b6 d0             	movzbl %al,%edx
f0129598:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012959b:	01 d0                	add    %edx,%eax
f012959d:	48                   	dec    %eax
f012959e:	89 45 90             	mov    %eax,-0x70(%ebp)
f01295a1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01295a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01295a9:	f7 75 94             	divl   -0x6c(%ebp)
f01295ac:	8b 45 90             	mov    -0x70(%ebp),%eax
f01295af:	29 d0                	sub    %edx,%eax
f01295b1:	01 c3                	add    %eax,%ebx
f01295b3:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01295ba:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01295bf:	0f b6 c0             	movzbl %al,%eax
f01295c2:	c1 e0 04             	shl    $0x4,%eax
f01295c5:	89 c2                	mov    %eax,%edx
f01295c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01295ca:	01 d0                	add    %edx,%eax
f01295cc:	48                   	dec    %eax
f01295cd:	89 45 88             	mov    %eax,-0x78(%ebp)
f01295d0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01295d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01295d8:	f7 75 8c             	divl   -0x74(%ebp)
f01295db:	8b 45 88             	mov    -0x78(%ebp),%eax
f01295de:	29 d0                	sub    %edx,%eax
f01295e0:	01 d8                	add    %ebx,%eax
f01295e2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01295e7:	39 c1                	cmp    %eax,%ecx
f01295e9:	74 17                	je     f0129602 <test_kfreelast+0x37c>
f01295eb:	83 ec 04             	sub    $0x4,%esp
f01295ee:	68 40 ad 13 f0       	push   $0xf013ad40
f01295f3:	68 dc 0c 00 00       	push   $0xcdc
f01295f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01295fd:	e8 f9 6b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129602:	e8 35 a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129607:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012960a:	74 17                	je     f0129623 <test_kfreelast+0x39d>
f012960c:	83 ec 04             	sub    $0x4,%esp
f012960f:	68 74 ac 13 f0       	push   $0xf013ac74
f0129614:	68 dd 0c 00 00       	push   $0xcdd
f0129619:	68 5a ac 13 f0       	push   $0xf013ac5a
f012961e:	e8 d8 6b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129623:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129626:	e8 9e 32 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012962b:	29 c3                	sub    %eax,%ebx
f012962d:	89 d8                	mov    %ebx,%eax
f012962f:	83 f8 01             	cmp    $0x1,%eax
f0129632:	74 17                	je     f012964b <test_kfreelast+0x3c5>
f0129634:	83 ec 04             	sub    $0x4,%esp
f0129637:	68 dc ac 13 f0       	push   $0xf013acdc
f012963c:	68 de 0c 00 00       	push   $0xcde
f0129641:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129646:	e8 b0 6b fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012964b:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129652:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129655:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012965b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012965e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129665:	eb 0e                	jmp    f0129675 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0129667:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012966a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012966d:	01 d0                	add    %edx,%eax
f012966f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129672:	ff 45 f4             	incl   -0xc(%ebp)
f0129675:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012967b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012967e:	7f e7                	jg     f0129667 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129680:	e8 44 32 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129685:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129688:	e8 af a6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012968d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129690:	83 ec 0c             	sub    $0xc,%esp
f0129693:	68 00 08 00 00       	push   $0x800
f0129698:	e8 61 e1 fd ff       	call   f01077fe <kmalloc>
f012969d:	83 c4 10             	add    $0x10,%esp
f01296a0:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296a6:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01296ac:	89 c1                	mov    %eax,%ecx
f01296ae:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01296b5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01296b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296bd:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01296c3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01296c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01296ce:	f7 75 80             	divl   -0x80(%ebp)
f01296d1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01296d7:	29 d0                	sub    %edx,%eax
f01296d9:	89 c3                	mov    %eax,%ebx
f01296db:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01296e2:	10 00 00 
f01296e5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01296ea:	0f b6 d0             	movzbl %al,%edx
f01296ed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01296f3:	01 d0                	add    %edx,%eax
f01296f5:	48                   	dec    %eax
f01296f6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01296fc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129702:	ba 00 00 00 00       	mov    $0x0,%edx
f0129707:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012970d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129713:	29 d0                	sub    %edx,%eax
f0129715:	01 c3                	add    %eax,%ebx
f0129717:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012971e:	10 00 00 
f0129721:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129726:	0f b6 c0             	movzbl %al,%eax
f0129729:	c1 e0 04             	shl    $0x4,%eax
f012972c:	89 c2                	mov    %eax,%edx
f012972e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129734:	01 d0                	add    %edx,%eax
f0129736:	48                   	dec    %eax
f0129737:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012973d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129743:	ba 00 00 00 00       	mov    $0x0,%edx
f0129748:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012974e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129754:	29 d0                	sub    %edx,%eax
f0129756:	01 d8                	add    %ebx,%eax
f0129758:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012975d:	39 c1                	cmp    %eax,%ecx
f012975f:	74 17                	je     f0129778 <test_kfreelast+0x4f2>
f0129761:	83 ec 04             	sub    $0x4,%esp
f0129764:	68 40 ad 13 f0       	push   $0xf013ad40
f0129769:	68 ea 0c 00 00       	push   $0xcea
f012976e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129773:	e8 83 6a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129778:	e8 bf a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012977d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129780:	74 17                	je     f0129799 <test_kfreelast+0x513>
f0129782:	83 ec 04             	sub    $0x4,%esp
f0129785:	68 74 ac 13 f0       	push   $0xf013ac74
f012978a:	68 eb 0c 00 00       	push   $0xceb
f012978f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129794:	e8 62 6a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129799:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012979c:	e8 28 31 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01297a1:	29 c3                	sub    %eax,%ebx
f01297a3:	89 d8                	mov    %ebx,%eax
f01297a5:	83 f8 01             	cmp    $0x1,%eax
f01297a8:	74 17                	je     f01297c1 <test_kfreelast+0x53b>
f01297aa:	83 ec 04             	sub    $0x4,%esp
f01297ad:	68 dc ac 13 f0       	push   $0xf013acdc
f01297b2:	68 ec 0c 00 00       	push   $0xcec
f01297b7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01297bc:	e8 3a 6a fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01297c1:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01297c8:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01297cb:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01297d1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01297d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297db:	eb 0e                	jmp    f01297eb <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f01297dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01297e0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01297e3:	01 d0                	add    %edx,%eax
f01297e5:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01297e8:	ff 45 f4             	incl   -0xc(%ebp)
f01297eb:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01297f4:	7f e7                	jg     f01297dd <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01297f6:	e8 ce 30 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f01297fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297fe:	e8 39 a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129803:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129806:	83 ec 0c             	sub    $0xc,%esp
f0129809:	68 00 1c 00 00       	push   $0x1c00
f012980e:	e8 eb df fd ff       	call   f01077fe <kmalloc>
f0129813:	83 c4 10             	add    $0x10,%esp
f0129816:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012981c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129822:	89 c1                	mov    %eax,%ecx
f0129824:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012982b:	10 00 00 
f012982e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129834:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129839:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012983f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129845:	ba 00 00 00 00       	mov    $0x0,%edx
f012984a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129850:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129856:	29 d0                	sub    %edx,%eax
f0129858:	89 c3                	mov    %eax,%ebx
f012985a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129861:	10 00 00 
f0129864:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129869:	0f b6 d0             	movzbl %al,%edx
f012986c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129872:	01 d0                	add    %edx,%eax
f0129874:	48                   	dec    %eax
f0129875:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012987b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129881:	ba 00 00 00 00       	mov    $0x0,%edx
f0129886:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012988c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129892:	29 d0                	sub    %edx,%eax
f0129894:	01 c3                	add    %eax,%ebx
f0129896:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012989d:	10 00 00 
f01298a0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01298a5:	0f b6 c0             	movzbl %al,%eax
f01298a8:	c1 e0 04             	shl    $0x4,%eax
f01298ab:	89 c2                	mov    %eax,%edx
f01298ad:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01298b3:	01 d0                	add    %edx,%eax
f01298b5:	48                   	dec    %eax
f01298b6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01298bc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01298c7:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01298cd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298d3:	29 d0                	sub    %edx,%eax
f01298d5:	01 d8                	add    %ebx,%eax
f01298d7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01298dc:	39 c1                	cmp    %eax,%ecx
f01298de:	74 17                	je     f01298f7 <test_kfreelast+0x671>
f01298e0:	83 ec 04             	sub    $0x4,%esp
f01298e3:	68 40 ad 13 f0       	push   $0xf013ad40
f01298e8:	68 f8 0c 00 00       	push   $0xcf8
f01298ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f01298f2:	e8 04 69 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298f7:	e8 40 a4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01298fc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298ff:	74 17                	je     f0129918 <test_kfreelast+0x692>
f0129901:	83 ec 04             	sub    $0x4,%esp
f0129904:	68 74 ac 13 f0       	push   $0xf013ac74
f0129909:	68 f9 0c 00 00       	push   $0xcf9
f012990e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129913:	e8 e3 68 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129918:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012991b:	e8 a9 2f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129920:	29 c3                	sub    %eax,%ebx
f0129922:	89 d8                	mov    %ebx,%eax
f0129924:	83 f8 02             	cmp    $0x2,%eax
f0129927:	74 17                	je     f0129940 <test_kfreelast+0x6ba>
f0129929:	83 ec 04             	sub    $0x4,%esp
f012992c:	68 dc ac 13 f0       	push   $0xf013acdc
f0129931:	68 fa 0c 00 00       	push   $0xcfa
f0129936:	68 5a ac 13 f0       	push   $0xf013ac5a
f012993b:	e8 bb 68 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129940:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0129947:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012994a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129950:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129953:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012995a:	eb 0e                	jmp    f012996a <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012995c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012995f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129962:	01 d0                	add    %edx,%eax
f0129964:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129967:	ff 45 f4             	incl   -0xc(%ebp)
f012996a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129970:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129973:	7f e7                	jg     f012995c <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129975:	e8 4f 2f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012997a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012997d:	e8 ba a3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129982:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129985:	83 ec 0c             	sub    $0xc,%esp
f0129988:	68 00 fc 2f 00       	push   $0x2ffc00
f012998d:	e8 6c de fd ff       	call   f01077fe <kmalloc>
f0129992:	83 c4 10             	add    $0x10,%esp
f0129995:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012999b:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f01299a1:	89 c1                	mov    %eax,%ecx
f01299a3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01299aa:	10 00 00 
f01299ad:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01299b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299b8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01299be:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01299c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01299c9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01299cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01299d5:	29 d0                	sub    %edx,%eax
f01299d7:	89 c3                	mov    %eax,%ebx
f01299d9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01299e0:	10 00 00 
f01299e3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01299e8:	0f b6 d0             	movzbl %al,%edx
f01299eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01299f1:	01 d0                	add    %edx,%eax
f01299f3:	48                   	dec    %eax
f01299f4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01299fa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129a00:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a05:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129a0b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129a11:	29 d0                	sub    %edx,%eax
f0129a13:	01 c3                	add    %eax,%ebx
f0129a15:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129a1c:	10 00 00 
f0129a1f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129a24:	0f b6 c0             	movzbl %al,%eax
f0129a27:	c1 e0 04             	shl    $0x4,%eax
f0129a2a:	89 c2                	mov    %eax,%edx
f0129a2c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129a32:	01 d0                	add    %edx,%eax
f0129a34:	48                   	dec    %eax
f0129a35:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129a3b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a41:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a46:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129a4c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a52:	29 d0                	sub    %edx,%eax
f0129a54:	01 d8                	add    %ebx,%eax
f0129a56:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129a5b:	39 c1                	cmp    %eax,%ecx
f0129a5d:	74 17                	je     f0129a76 <test_kfreelast+0x7f0>
f0129a5f:	83 ec 04             	sub    $0x4,%esp
f0129a62:	68 40 ad 13 f0       	push   $0xf013ad40
f0129a67:	68 06 0d 00 00       	push   $0xd06
f0129a6c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129a71:	e8 85 67 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a76:	e8 c1 a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129a7b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a7e:	74 17                	je     f0129a97 <test_kfreelast+0x811>
f0129a80:	83 ec 04             	sub    $0x4,%esp
f0129a83:	68 74 ac 13 f0       	push   $0xf013ac74
f0129a88:	68 07 0d 00 00       	push   $0xd07
f0129a8d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129a92:	e8 64 67 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a97:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a9a:	e8 2a 2e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129a9f:	29 c3                	sub    %eax,%ebx
f0129aa1:	89 d8                	mov    %ebx,%eax
f0129aa3:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129aa8:	74 17                	je     f0129ac1 <test_kfreelast+0x83b>
f0129aaa:	83 ec 04             	sub    $0x4,%esp
f0129aad:	68 dc ac 13 f0       	push   $0xf013acdc
f0129ab2:	68 08 0d 00 00       	push   $0xd08
f0129ab7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129abc:	e8 3a 67 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129ac1:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129ac8:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129acb:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129ad1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129ad4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129adb:	eb 0e                	jmp    f0129aeb <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129add:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ae0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ae3:	01 d0                	add    %edx,%eax
f0129ae5:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129ae8:	ff 45 f4             	incl   -0xc(%ebp)
f0129aeb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129af1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129af4:	7f e7                	jg     f0129add <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129af6:	e8 ce 2d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129afb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129afe:	e8 39 a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129b03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129b06:	83 ec 0c             	sub    $0xc,%esp
f0129b09:	68 00 fc 5f 00       	push   $0x5ffc00
f0129b0e:	e8 eb dc fd ff       	call   f01077fe <kmalloc>
f0129b13:	83 c4 10             	add    $0x10,%esp
f0129b16:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129b1c:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129b22:	89 c1                	mov    %eax,%ecx
f0129b24:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129b2b:	10 00 00 
f0129b2e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129b34:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b39:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129b3f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b4a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129b50:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129b56:	29 d0                	sub    %edx,%eax
f0129b58:	89 c3                	mov    %eax,%ebx
f0129b5a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129b61:	10 00 00 
f0129b64:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129b69:	0f b6 d0             	movzbl %al,%edx
f0129b6c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129b72:	01 d0                	add    %edx,%eax
f0129b74:	48                   	dec    %eax
f0129b75:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129b7b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129b81:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b86:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129b8c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129b92:	29 d0                	sub    %edx,%eax
f0129b94:	01 c3                	add    %eax,%ebx
f0129b96:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129b9d:	10 00 00 
f0129ba0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129ba5:	0f b6 c0             	movzbl %al,%eax
f0129ba8:	c1 e0 04             	shl    $0x4,%eax
f0129bab:	89 c2                	mov    %eax,%edx
f0129bad:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129bb3:	01 d0                	add    %edx,%eax
f0129bb5:	48                   	dec    %eax
f0129bb6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129bbc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129bc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bc7:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129bcd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129bd3:	29 d0                	sub    %edx,%eax
f0129bd5:	01 d8                	add    %ebx,%eax
f0129bd7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129bdc:	39 c1                	cmp    %eax,%ecx
f0129bde:	74 17                	je     f0129bf7 <test_kfreelast+0x971>
f0129be0:	83 ec 04             	sub    $0x4,%esp
f0129be3:	68 40 ad 13 f0       	push   $0xf013ad40
f0129be8:	68 14 0d 00 00       	push   $0xd14
f0129bed:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129bf2:	e8 04 66 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bf7:	e8 40 a1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129bfc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129bff:	74 17                	je     f0129c18 <test_kfreelast+0x992>
f0129c01:	83 ec 04             	sub    $0x4,%esp
f0129c04:	68 74 ac 13 f0       	push   $0xf013ac74
f0129c09:	68 15 0d 00 00       	push   $0xd15
f0129c0e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129c13:	e8 e3 65 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c18:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c1b:	e8 a9 2c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129c20:	29 c3                	sub    %eax,%ebx
f0129c22:	89 d8                	mov    %ebx,%eax
f0129c24:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129c29:	74 17                	je     f0129c42 <test_kfreelast+0x9bc>
f0129c2b:	83 ec 04             	sub    $0x4,%esp
f0129c2e:	68 dc ac 13 f0       	push   $0xf013acdc
f0129c33:	68 16 0d 00 00       	push   $0xd16
f0129c38:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129c3d:	e8 b9 65 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129c42:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129c49:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129c4c:	e8 78 2c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129c51:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c54:	e8 e3 a0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129c59:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129c5c:	83 ec 0c             	sub    $0xc,%esp
f0129c5f:	68 00 38 00 00       	push   $0x3800
f0129c64:	e8 95 db fd ff       	call   f01077fe <kmalloc>
f0129c69:	83 c4 10             	add    $0x10,%esp
f0129c6c:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129c72:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129c78:	89 c1                	mov    %eax,%ecx
f0129c7a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129c81:	10 00 00 
f0129c84:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129c8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129c8f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129c95:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129c9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ca0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129ca6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129cac:	29 d0                	sub    %edx,%eax
f0129cae:	89 c3                	mov    %eax,%ebx
f0129cb0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129cb7:	10 00 00 
f0129cba:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129cbf:	0f b6 d0             	movzbl %al,%edx
f0129cc2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129cc8:	01 d0                	add    %edx,%eax
f0129cca:	48                   	dec    %eax
f0129ccb:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129cd1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129cd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cdc:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129ce2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129ce8:	29 d0                	sub    %edx,%eax
f0129cea:	01 c3                	add    %eax,%ebx
f0129cec:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129cf3:	10 00 00 
f0129cf6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129cfb:	0f b6 c0             	movzbl %al,%eax
f0129cfe:	c1 e0 04             	shl    $0x4,%eax
f0129d01:	89 c2                	mov    %eax,%edx
f0129d03:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129d09:	01 d0                	add    %edx,%eax
f0129d0b:	48                   	dec    %eax
f0129d0c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129d12:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129d18:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d1d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129d23:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129d29:	29 d0                	sub    %edx,%eax
f0129d2b:	01 d8                	add    %ebx,%eax
f0129d2d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129d32:	39 c1                	cmp    %eax,%ecx
f0129d34:	74 17                	je     f0129d4d <test_kfreelast+0xac7>
f0129d36:	83 ec 04             	sub    $0x4,%esp
f0129d39:	68 40 ad 13 f0       	push   $0xf013ad40
f0129d3e:	68 1d 0d 00 00       	push   $0xd1d
f0129d43:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129d48:	e8 ae 64 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d4d:	e8 ea 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129d52:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d55:	74 17                	je     f0129d6e <test_kfreelast+0xae8>
f0129d57:	83 ec 04             	sub    $0x4,%esp
f0129d5a:	68 74 ac 13 f0       	push   $0xf013ac74
f0129d5f:	68 1e 0d 00 00       	push   $0xd1e
f0129d64:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129d69:	e8 8d 64 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d6e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d71:	e8 53 2b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129d76:	29 c3                	sub    %eax,%ebx
f0129d78:	89 d8                	mov    %ebx,%eax
f0129d7a:	83 f8 04             	cmp    $0x4,%eax
f0129d7d:	74 17                	je     f0129d96 <test_kfreelast+0xb10>
f0129d7f:	83 ec 04             	sub    $0x4,%esp
f0129d82:	68 dc ac 13 f0       	push   $0xf013acdc
f0129d87:	68 1f 0d 00 00       	push   $0xd1f
f0129d8c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129d91:	e8 65 64 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129d96:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129d9d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129da0:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129da6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129da9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129db0:	eb 0e                	jmp    f0129dc0 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129db2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129db5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129db8:	01 d0                	add    %edx,%eax
f0129dba:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129dbd:	ff 45 f4             	incl   -0xc(%ebp)
f0129dc0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129dc6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129dc9:	7f e7                	jg     f0129db2 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129dcb:	e8 f9 2a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129dd0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129dd6:	e8 61 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ddb:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129de1:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129de7:	83 ec 0c             	sub    $0xc,%esp
f0129dea:	50                   	push   %eax
f0129deb:	e8 d0 da fd ff       	call   f01078c0 <kfree>
f0129df0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129df3:	e8 44 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129df8:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129dfe:	74 17                	je     f0129e17 <test_kfreelast+0xb91>
f0129e00:	83 ec 04             	sub    $0x4,%esp
f0129e03:	68 74 ac 13 f0       	push   $0xf013ac74
f0129e08:	68 2e 0d 00 00       	push   $0xd2e
f0129e0d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129e12:	e8 e4 63 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129e17:	e8 ad 2a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129e1c:	89 c2                	mov    %eax,%edx
f0129e1e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e24:	29 c2                	sub    %eax,%edx
f0129e26:	89 d0                	mov    %edx,%eax
f0129e28:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129e2d:	74 17                	je     f0129e46 <test_kfreelast+0xbc0>
f0129e2f:	83 ec 04             	sub    $0x4,%esp
f0129e32:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0129e37:	68 2f 0d 00 00       	push   $0xd2f
f0129e3c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129e41:	e8 b5 63 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e46:	e8 7e 2a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129e4b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e51:	e8 e6 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129e56:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129e5c:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129e62:	83 ec 0c             	sub    $0xc,%esp
f0129e65:	50                   	push   %eax
f0129e66:	e8 55 da fd ff       	call   f01078c0 <kfree>
f0129e6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e6e:	e8 c9 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129e73:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129e79:	74 17                	je     f0129e92 <test_kfreelast+0xc0c>
f0129e7b:	83 ec 04             	sub    $0x4,%esp
f0129e7e:	68 74 ac 13 f0       	push   $0xf013ac74
f0129e83:	68 35 0d 00 00       	push   $0xd35
f0129e88:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129e8d:	e8 69 63 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0129e92:	e8 32 2a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129e97:	89 c2                	mov    %eax,%edx
f0129e99:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e9f:	29 c2                	sub    %eax,%edx
f0129ea1:	89 d0                	mov    %edx,%eax
f0129ea3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129ea8:	74 17                	je     f0129ec1 <test_kfreelast+0xc3b>
f0129eaa:	83 ec 04             	sub    $0x4,%esp
f0129ead:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0129eb2:	68 36 0d 00 00       	push   $0xd36
f0129eb7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129ebc:	e8 3a 63 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ec1:	e8 03 2a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129ec6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ecc:	e8 6b 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ed1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129ed7:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129edd:	83 ec 0c             	sub    $0xc,%esp
f0129ee0:	50                   	push   %eax
f0129ee1:	e8 da d9 fd ff       	call   f01078c0 <kfree>
f0129ee6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ee9:	e8 4e 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129eee:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129ef4:	74 17                	je     f0129f0d <test_kfreelast+0xc87>
f0129ef6:	83 ec 04             	sub    $0x4,%esp
f0129ef9:	68 74 ac 13 f0       	push   $0xf013ac74
f0129efe:	68 3c 0d 00 00       	push   $0xd3c
f0129f03:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129f08:	e8 ee 62 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129f0d:	e8 b7 29 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f0129f12:	89 c2                	mov    %eax,%edx
f0129f14:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129f1a:	29 c2                	sub    %eax,%edx
f0129f1c:	89 d0                	mov    %edx,%eax
f0129f1e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129f23:	74 17                	je     f0129f3c <test_kfreelast+0xcb6>
f0129f25:	83 ec 04             	sub    $0x4,%esp
f0129f28:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0129f2d:	68 3d 0d 00 00       	push   $0xd3d
f0129f32:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129f37:	e8 bf 62 fd ff       	call   f01001fb <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0129f3c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129f42:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129f45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129f4c:	eb 1e                	jmp    f0129f6c <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0129f4e:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129f54:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129f57:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f5a:	01 c8                	add    %ecx,%eax
f0129f5c:	8a 00                	mov    (%eax),%al
f0129f5e:	0f be c0             	movsbl %al,%eax
f0129f61:	01 d0                	add    %edx,%eax
f0129f63:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129f69:	ff 45 f4             	incl   -0xc(%ebp)
f0129f6c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129f72:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f75:	7f d7                	jg     f0129f4e <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0129f77:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129f7d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129f83:	01 c0                	add    %eax,%eax
f0129f85:	39 c2                	cmp    %eax,%edx
f0129f87:	74 17                	je     f0129fa0 <test_kfreelast+0xd1a>
f0129f89:	83 ec 04             	sub    $0x4,%esp
f0129f8c:	68 40 b4 13 f0       	push   $0xf013b440
f0129f91:	68 48 0d 00 00       	push   $0xd48
f0129f96:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129f9b:	e8 5b 62 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0129fa0:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129fa6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129fa9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129fb0:	eb 1e                	jmp    f0129fd0 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f0129fb2:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129fb8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129fbb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129fbe:	01 c8                	add    %ecx,%eax
f0129fc0:	8a 00                	mov    (%eax),%al
f0129fc2:	0f be c0             	movsbl %al,%eax
f0129fc5:	01 d0                	add    %edx,%eax
f0129fc7:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129fcd:	ff 45 f4             	incl   -0xc(%ebp)
f0129fd0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129fd6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129fd9:	7f d7                	jg     f0129fb2 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129fdb:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129fe1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129fe7:	89 c1                	mov    %eax,%ecx
f0129fe9:	01 c9                	add    %ecx,%ecx
f0129feb:	01 c8                	add    %ecx,%eax
f0129fed:	39 c2                	cmp    %eax,%edx
f0129fef:	74 17                	je     f012a008 <test_kfreelast+0xd82>
f0129ff1:	83 ec 04             	sub    $0x4,%esp
f0129ff4:	68 40 b4 13 f0       	push   $0xf013b440
f0129ff9:	68 50 0d 00 00       	push   $0xd50
f0129ffe:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a003:	e8 f3 61 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a008:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a00e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a011:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a018:	eb 1e                	jmp    f012a038 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a01a:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a020:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a023:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a026:	01 c8                	add    %ecx,%eax
f012a028:	8a 00                	mov    (%eax),%al
f012a02a:	0f be c0             	movsbl %al,%eax
f012a02d:	01 d0                	add    %edx,%eax
f012a02f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a035:	ff 45 f4             	incl   -0xc(%ebp)
f012a038:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a03e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a041:	7f d7                	jg     f012a01a <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a043:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a049:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a04f:	c1 e2 02             	shl    $0x2,%edx
f012a052:	39 d0                	cmp    %edx,%eax
f012a054:	74 17                	je     f012a06d <test_kfreelast+0xde7>
f012a056:	83 ec 04             	sub    $0x4,%esp
f012a059:	68 40 b4 13 f0       	push   $0xf013b440
f012a05e:	68 58 0d 00 00       	push   $0xd58
f012a063:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a068:	e8 8e 61 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a06d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a073:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a07d:	eb 1e                	jmp    f012a09d <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a07f:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a085:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a088:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a08b:	01 c8                	add    %ecx,%eax
f012a08d:	8a 00                	mov    (%eax),%al
f012a08f:	0f be c0             	movsbl %al,%eax
f012a092:	01 d0                	add    %edx,%eax
f012a094:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a09a:	ff 45 f4             	incl   -0xc(%ebp)
f012a09d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a0a3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a0a6:	7f d7                	jg     f012a07f <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a0a8:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a0ae:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a0b4:	89 d0                	mov    %edx,%eax
f012a0b6:	c1 e0 02             	shl    $0x2,%eax
f012a0b9:	01 d0                	add    %edx,%eax
f012a0bb:	39 c1                	cmp    %eax,%ecx
f012a0bd:	74 17                	je     f012a0d6 <test_kfreelast+0xe50>
f012a0bf:	83 ec 04             	sub    $0x4,%esp
f012a0c2:	68 40 b4 13 f0       	push   $0xf013b440
f012a0c7:	68 60 0d 00 00       	push   $0xd60
f012a0cc:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a0d1:	e8 25 61 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a0d6:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a0dc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a0df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0e6:	eb 1e                	jmp    f012a106 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a0e8:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a0ee:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a0f1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a0f4:	01 c8                	add    %ecx,%eax
f012a0f6:	8a 00                	mov    (%eax),%al
f012a0f8:	0f be c0             	movsbl %al,%eax
f012a0fb:	01 d0                	add    %edx,%eax
f012a0fd:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a103:	ff 45 f4             	incl   -0xc(%ebp)
f012a106:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a10c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a10f:	7f d7                	jg     f012a0e8 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a111:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a117:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a11d:	89 d0                	mov    %edx,%eax
f012a11f:	01 c0                	add    %eax,%eax
f012a121:	01 d0                	add    %edx,%eax
f012a123:	01 c0                	add    %eax,%eax
f012a125:	01 d0                	add    %edx,%eax
f012a127:	39 c1                	cmp    %eax,%ecx
f012a129:	74 17                	je     f012a142 <test_kfreelast+0xebc>
f012a12b:	83 ec 04             	sub    $0x4,%esp
f012a12e:	68 40 b4 13 f0       	push   $0xf013b440
f012a133:	68 68 0d 00 00       	push   $0xd68
f012a138:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a13d:	e8 b9 60 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a142:	e8 82 27 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a147:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a14a:	e8 ed 9b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a14f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a152:	83 ec 0c             	sub    $0xc,%esp
f012a155:	68 00 50 00 00       	push   $0x5000
f012a15a:	e8 9f d6 fd ff       	call   f01077fe <kmalloc>
f012a15f:	83 c4 10             	add    $0x10,%esp
f012a162:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a168:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a16e:	89 c1                	mov    %eax,%ecx
f012a170:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a177:	10 00 00 
f012a17a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a180:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a185:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a18b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a191:	ba 00 00 00 00       	mov    $0x0,%edx
f012a196:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a19c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a1a2:	29 d0                	sub    %edx,%eax
f012a1a4:	89 c3                	mov    %eax,%ebx
f012a1a6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a1ad:	10 00 00 
f012a1b0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a1b5:	0f b6 d0             	movzbl %al,%edx
f012a1b8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a1be:	01 d0                	add    %edx,%eax
f012a1c0:	48                   	dec    %eax
f012a1c1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a1c7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a1cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1d2:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a1d8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a1de:	29 d0                	sub    %edx,%eax
f012a1e0:	01 c3                	add    %eax,%ebx
f012a1e2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a1e9:	10 00 00 
f012a1ec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a1f1:	0f b6 c0             	movzbl %al,%eax
f012a1f4:	c1 e0 04             	shl    $0x4,%eax
f012a1f7:	89 c2                	mov    %eax,%edx
f012a1f9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a1ff:	01 d0                	add    %edx,%eax
f012a201:	48                   	dec    %eax
f012a202:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a208:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a20e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a213:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a219:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a21f:	29 d0                	sub    %edx,%eax
f012a221:	01 d8                	add    %ebx,%eax
f012a223:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a228:	39 c1                	cmp    %eax,%ecx
f012a22a:	74 17                	je     f012a243 <test_kfreelast+0xfbd>
f012a22c:	83 ec 04             	sub    $0x4,%esp
f012a22f:	68 40 ad 13 f0       	push   $0xf013ad40
f012a234:	68 71 0d 00 00       	push   $0xd71
f012a239:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a23e:	e8 b8 5f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a243:	e8 f4 9a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a248:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a24b:	74 17                	je     f012a264 <test_kfreelast+0xfde>
f012a24d:	83 ec 04             	sub    $0x4,%esp
f012a250:	68 74 ac 13 f0       	push   $0xf013ac74
f012a255:	68 72 0d 00 00       	push   $0xd72
f012a25a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a25f:	e8 97 5f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a264:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a267:	e8 5d 26 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a26c:	29 c3                	sub    %eax,%ebx
f012a26e:	89 d8                	mov    %ebx,%eax
f012a270:	83 f8 05             	cmp    $0x5,%eax
f012a273:	74 17                	je     f012a28c <test_kfreelast+0x1006>
f012a275:	83 ec 04             	sub    $0x4,%esp
f012a278:	68 dc ac 13 f0       	push   $0xf013acdc
f012a27d:	68 73 0d 00 00       	push   $0xd73
f012a282:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a287:	e8 6f 5f fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a28c:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a293:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a296:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a29c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a29f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a2a6:	eb 0e                	jmp    f012a2b6 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a2a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a2ab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a2ae:	01 d0                	add    %edx,%eax
f012a2b0:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a2b3:	ff 45 f4             	incl   -0xc(%ebp)
f012a2b6:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a2bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a2bf:	7f e7                	jg     f012a2a8 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a2c1:	e8 03 26 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a2c6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2c9:	e8 6e 9a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a2ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a2d1:	83 ec 0c             	sub    $0xc,%esp
f012a2d4:	68 00 00 10 00       	push   $0x100000
f012a2d9:	e8 20 d5 fd ff       	call   f01077fe <kmalloc>
f012a2de:	83 c4 10             	add    $0x10,%esp
f012a2e1:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a2e7:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a2ed:	89 c1                	mov    %eax,%ecx
f012a2ef:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a2f6:	10 00 00 
f012a2f9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a2ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a304:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a30a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a310:	ba 00 00 00 00       	mov    $0x0,%edx
f012a315:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a31b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a321:	29 d0                	sub    %edx,%eax
f012a323:	89 c3                	mov    %eax,%ebx
f012a325:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a32c:	10 00 00 
f012a32f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a334:	0f b6 d0             	movzbl %al,%edx
f012a337:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a33d:	01 d0                	add    %edx,%eax
f012a33f:	48                   	dec    %eax
f012a340:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a346:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a34c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a351:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a357:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a35d:	29 d0                	sub    %edx,%eax
f012a35f:	01 c3                	add    %eax,%ebx
f012a361:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a368:	10 00 00 
f012a36b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a370:	0f b6 c0             	movzbl %al,%eax
f012a373:	c1 e0 04             	shl    $0x4,%eax
f012a376:	89 c2                	mov    %eax,%edx
f012a378:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a37e:	01 d0                	add    %edx,%eax
f012a380:	48                   	dec    %eax
f012a381:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a387:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a38d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a392:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a398:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a39e:	29 d0                	sub    %edx,%eax
f012a3a0:	01 d8                	add    %ebx,%eax
f012a3a2:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a3a7:	39 c1                	cmp    %eax,%ecx
f012a3a9:	74 17                	je     f012a3c2 <test_kfreelast+0x113c>
f012a3ab:	83 ec 04             	sub    $0x4,%esp
f012a3ae:	68 40 ad 13 f0       	push   $0xf013ad40
f012a3b3:	68 7f 0d 00 00       	push   $0xd7f
f012a3b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a3bd:	e8 39 5e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3c2:	e8 75 99 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a3c7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3ca:	74 17                	je     f012a3e3 <test_kfreelast+0x115d>
f012a3cc:	83 ec 04             	sub    $0x4,%esp
f012a3cf:	68 74 ac 13 f0       	push   $0xf013ac74
f012a3d4:	68 80 0d 00 00       	push   $0xd80
f012a3d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a3de:	e8 18 5e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a3e3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a3e6:	e8 de 24 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a3eb:	29 c3                	sub    %eax,%ebx
f012a3ed:	89 d8                	mov    %ebx,%eax
f012a3ef:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a3f4:	74 17                	je     f012a40d <test_kfreelast+0x1187>
f012a3f6:	83 ec 04             	sub    $0x4,%esp
f012a3f9:	68 dc ac 13 f0       	push   $0xf013acdc
f012a3fe:	68 81 0d 00 00       	push   $0xd81
f012a403:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a408:	e8 ee 5d fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a40d:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a414:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a417:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a41d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a420:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a427:	eb 0e                	jmp    f012a437 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a429:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a42c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a42f:	01 d0                	add    %edx,%eax
f012a431:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a434:	ff 45 f4             	incl   -0xc(%ebp)
f012a437:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a43d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a440:	7f e7                	jg     f012a429 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a442:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a449:	e8 7b 24 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a44e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a451:	e8 e6 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a456:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a459:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a45f:	83 ec 0c             	sub    $0xc,%esp
f012a462:	50                   	push   %eax
f012a463:	e8 58 d4 fd ff       	call   f01078c0 <kfree>
f012a468:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a46b:	e8 cc 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a470:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a473:	74 17                	je     f012a48c <test_kfreelast+0x1206>
f012a475:	83 ec 04             	sub    $0x4,%esp
f012a478:	68 74 ac 13 f0       	push   $0xf013ac74
f012a47d:	68 91 0d 00 00       	push   $0xd91
f012a482:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a487:	e8 6f 5d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a48c:	e8 38 24 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a491:	89 c2                	mov    %eax,%edx
f012a493:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a496:	29 c2                	sub    %eax,%edx
f012a498:	89 d0                	mov    %edx,%eax
f012a49a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a49f:	74 17                	je     f012a4b8 <test_kfreelast+0x1232>
f012a4a1:	83 ec 04             	sub    $0x4,%esp
f012a4a4:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012a4a9:	68 92 0d 00 00       	push   $0xd92
f012a4ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a4b3:	e8 43 5d fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a4b8:	e8 0c 24 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a4bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4c0:	e8 77 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a4c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a4c8:	83 ec 0c             	sub    $0xc,%esp
f012a4cb:	68 00 78 00 00       	push   $0x7800
f012a4d0:	e8 29 d3 fd ff       	call   f01077fe <kmalloc>
f012a4d5:	83 c4 10             	add    $0x10,%esp
f012a4d8:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a4de:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a4e4:	89 c1                	mov    %eax,%ecx
f012a4e6:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a4ed:	10 00 00 
f012a4f0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a4f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4fb:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a501:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a507:	ba 00 00 00 00       	mov    $0x0,%edx
f012a50c:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a512:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a518:	29 d0                	sub    %edx,%eax
f012a51a:	89 c3                	mov    %eax,%ebx
f012a51c:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a523:	10 00 00 
f012a526:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a52b:	0f b6 d0             	movzbl %al,%edx
f012a52e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a534:	01 d0                	add    %edx,%eax
f012a536:	48                   	dec    %eax
f012a537:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a53d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a543:	ba 00 00 00 00       	mov    $0x0,%edx
f012a548:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a54e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a554:	29 d0                	sub    %edx,%eax
f012a556:	01 c3                	add    %eax,%ebx
f012a558:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a55f:	10 00 00 
f012a562:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a567:	0f b6 c0             	movzbl %al,%eax
f012a56a:	c1 e0 04             	shl    $0x4,%eax
f012a56d:	89 c2                	mov    %eax,%edx
f012a56f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a575:	01 d0                	add    %edx,%eax
f012a577:	48                   	dec    %eax
f012a578:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a57e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a584:	ba 00 00 00 00       	mov    $0x0,%edx
f012a589:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a58f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a595:	29 d0                	sub    %edx,%eax
f012a597:	01 d8                	add    %ebx,%eax
f012a599:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a59e:	39 c1                	cmp    %eax,%ecx
f012a5a0:	74 17                	je     f012a5b9 <test_kfreelast+0x1333>
f012a5a2:	83 ec 04             	sub    $0x4,%esp
f012a5a5:	68 40 ad 13 f0       	push   $0xf013ad40
f012a5aa:	68 9b 0d 00 00       	push   $0xd9b
f012a5af:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a5b4:	e8 42 5c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5b9:	e8 7e 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a5be:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5c1:	74 17                	je     f012a5da <test_kfreelast+0x1354>
f012a5c3:	83 ec 04             	sub    $0x4,%esp
f012a5c6:	68 74 ac 13 f0       	push   $0xf013ac74
f012a5cb:	68 9c 0d 00 00       	push   $0xd9c
f012a5d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a5d5:	e8 21 5c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a5da:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a5dd:	e8 e7 22 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a5e2:	29 c3                	sub    %eax,%ebx
f012a5e4:	89 d8                	mov    %ebx,%eax
f012a5e6:	83 f8 08             	cmp    $0x8,%eax
f012a5e9:	74 17                	je     f012a602 <test_kfreelast+0x137c>
f012a5eb:	83 ec 04             	sub    $0x4,%esp
f012a5ee:	68 dc ac 13 f0       	push   $0xf013acdc
f012a5f3:	68 9d 0d 00 00       	push   $0xd9d
f012a5f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a5fd:	e8 f9 5b fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a602:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a609:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a60c:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a612:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a615:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a61c:	eb 0e                	jmp    f012a62c <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a61e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a621:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a624:	01 d0                	add    %edx,%eax
f012a626:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a629:	ff 45 f4             	incl   -0xc(%ebp)
f012a62c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a632:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a635:	7f e7                	jg     f012a61e <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a637:	e8 8d 22 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a63c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a63f:	e8 f8 96 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a644:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a647:	83 ec 0c             	sub    $0xc,%esp
f012a64a:	68 00 00 10 00       	push   $0x100000
f012a64f:	e8 aa d1 fd ff       	call   f01077fe <kmalloc>
f012a654:	83 c4 10             	add    $0x10,%esp
f012a657:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a65d:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a663:	89 c1                	mov    %eax,%ecx
f012a665:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a66c:	10 00 00 
f012a66f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a675:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a67a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a680:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a686:	ba 00 00 00 00       	mov    $0x0,%edx
f012a68b:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a691:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a697:	29 d0                	sub    %edx,%eax
f012a699:	89 c3                	mov    %eax,%ebx
f012a69b:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a6a2:	10 00 00 
f012a6a5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a6aa:	0f b6 d0             	movzbl %al,%edx
f012a6ad:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a6b3:	01 d0                	add    %edx,%eax
f012a6b5:	48                   	dec    %eax
f012a6b6:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a6bc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a6c2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6c7:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a6cd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a6d3:	29 d0                	sub    %edx,%eax
f012a6d5:	01 c3                	add    %eax,%ebx
f012a6d7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a6de:	10 00 00 
f012a6e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a6e6:	0f b6 c0             	movzbl %al,%eax
f012a6e9:	c1 e0 04             	shl    $0x4,%eax
f012a6ec:	89 c2                	mov    %eax,%edx
f012a6ee:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a6f4:	01 d0                	add    %edx,%eax
f012a6f6:	48                   	dec    %eax
f012a6f7:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a6fd:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a703:	ba 00 00 00 00       	mov    $0x0,%edx
f012a708:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a70e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a714:	29 d0                	sub    %edx,%eax
f012a716:	01 d8                	add    %ebx,%eax
f012a718:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a71d:	39 c1                	cmp    %eax,%ecx
f012a71f:	74 17                	je     f012a738 <test_kfreelast+0x14b2>
f012a721:	83 ec 04             	sub    $0x4,%esp
f012a724:	68 40 ad 13 f0       	push   $0xf013ad40
f012a729:	68 a9 0d 00 00       	push   $0xda9
f012a72e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a733:	e8 c3 5a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a738:	e8 ff 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a73d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a740:	74 17                	je     f012a759 <test_kfreelast+0x14d3>
f012a742:	83 ec 04             	sub    $0x4,%esp
f012a745:	68 74 ac 13 f0       	push   $0xf013ac74
f012a74a:	68 aa 0d 00 00       	push   $0xdaa
f012a74f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a754:	e8 a2 5a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a759:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a75c:	e8 68 21 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a761:	29 c3                	sub    %eax,%ebx
f012a763:	89 d8                	mov    %ebx,%eax
f012a765:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a76a:	74 17                	je     f012a783 <test_kfreelast+0x14fd>
f012a76c:	83 ec 04             	sub    $0x4,%esp
f012a76f:	68 dc ac 13 f0       	push   $0xf013acdc
f012a774:	68 ab 0d 00 00       	push   $0xdab
f012a779:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a77e:	e8 78 5a fd ff       	call   f01001fb <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a783:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a78a:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a78d:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a793:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a796:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a79d:	eb 0e                	jmp    f012a7ad <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a79f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7a2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7a5:	01 d0                	add    %edx,%eax
f012a7a7:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a7aa:	ff 45 f4             	incl   -0xc(%ebp)
f012a7ad:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a7b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7b6:	7f e7                	jg     f012a79f <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a7b8:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a7bc:	83 ec 08             	sub    $0x8,%esp
f012a7bf:	ff 75 f0             	pushl  -0x10(%ebp)
f012a7c2:	68 8c bc 13 f0       	push   $0xf013bc8c
f012a7c7:	e8 b6 64 fd ff       	call   f0100c82 <cprintf>
f012a7cc:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a7cf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7d6:	e8 ee 20 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a7db:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7de:	e8 59 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a7e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a7e6:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a7ec:	83 ec 0c             	sub    $0xc,%esp
f012a7ef:	50                   	push   %eax
f012a7f0:	e8 cb d0 fd ff       	call   f01078c0 <kfree>
f012a7f5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a7f8:	e8 3f 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a7fd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a800:	74 1d                	je     f012a81f <test_kfreelast+0x1599>
f012a802:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a806:	75 17                	jne    f012a81f <test_kfreelast+0x1599>
f012a808:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a80f:	83 ec 0c             	sub    $0xc,%esp
f012a812:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012a817:	e8 66 64 fd ff       	call   f0100c82 <cprintf>
f012a81c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a81f:	e8 a5 20 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a824:	89 c2                	mov    %eax,%edx
f012a826:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a829:	29 c2                	sub    %eax,%edx
f012a82b:	89 d0                	mov    %edx,%eax
f012a82d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a832:	74 1d                	je     f012a851 <test_kfreelast+0x15cb>
f012a834:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a838:	75 17                	jne    f012a851 <test_kfreelast+0x15cb>
f012a83a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a841:	83 ec 0c             	sub    $0xc,%esp
f012a844:	68 20 bd 13 f0       	push   $0xf013bd20
f012a849:	e8 34 64 fd ff       	call   f0100c82 <cprintf>
f012a84e:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a851:	e8 73 20 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a856:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a859:	e8 de 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a85e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a861:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a867:	83 ec 0c             	sub    $0xc,%esp
f012a86a:	50                   	push   %eax
f012a86b:	e8 50 d0 fd ff       	call   f01078c0 <kfree>
f012a870:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a873:	e8 c4 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a878:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a87b:	74 1d                	je     f012a89a <test_kfreelast+0x1614>
f012a87d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a881:	75 17                	jne    f012a89a <test_kfreelast+0x1614>
f012a883:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a88a:	83 ec 0c             	sub    $0xc,%esp
f012a88d:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012a892:	e8 eb 63 fd ff       	call   f0100c82 <cprintf>
f012a897:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a89a:	e8 2a 20 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a89f:	89 c2                	mov    %eax,%edx
f012a8a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a8a4:	29 c2                	sub    %eax,%edx
f012a8a6:	89 d0                	mov    %edx,%eax
f012a8a8:	83 f8 08             	cmp    $0x8,%eax
f012a8ab:	74 1d                	je     f012a8ca <test_kfreelast+0x1644>
f012a8ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8b1:	75 17                	jne    f012a8ca <test_kfreelast+0x1644>
f012a8b3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8ba:	83 ec 0c             	sub    $0xc,%esp
f012a8bd:	68 20 bd 13 f0       	push   $0xf013bd20
f012a8c2:	e8 bb 63 fd ff       	call   f0100c82 <cprintf>
f012a8c7:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a8ca:	e8 fa 1f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012a8cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8d2:	e8 65 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a8d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a8da:	83 ec 0c             	sub    $0xc,%esp
f012a8dd:	68 00 28 00 00       	push   $0x2800
f012a8e2:	e8 17 cf fd ff       	call   f01077fe <kmalloc>
f012a8e7:	83 c4 10             	add    $0x10,%esp
f012a8ea:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a8f0:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a8f6:	89 c1                	mov    %eax,%ecx
f012a8f8:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a8ff:	10 00 00 
f012a902:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a908:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a90d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a913:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a919:	ba 00 00 00 00       	mov    $0x0,%edx
f012a91e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a924:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a92a:	29 d0                	sub    %edx,%eax
f012a92c:	89 c3                	mov    %eax,%ebx
f012a92e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a935:	10 00 00 
f012a938:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a93d:	0f b6 d0             	movzbl %al,%edx
f012a940:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a946:	01 d0                	add    %edx,%eax
f012a948:	48                   	dec    %eax
f012a949:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a94f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a955:	ba 00 00 00 00       	mov    $0x0,%edx
f012a95a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a960:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a966:	29 d0                	sub    %edx,%eax
f012a968:	01 c3                	add    %eax,%ebx
f012a96a:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a971:	10 00 00 
f012a974:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a979:	0f b6 c0             	movzbl %al,%eax
f012a97c:	c1 e0 04             	shl    $0x4,%eax
f012a97f:	89 c2                	mov    %eax,%edx
f012a981:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a987:	01 d0                	add    %edx,%eax
f012a989:	48                   	dec    %eax
f012a98a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a990:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a996:	ba 00 00 00 00       	mov    $0x0,%edx
f012a99b:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a9a1:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a9a7:	29 d0                	sub    %edx,%eax
f012a9a9:	01 d8                	add    %ebx,%eax
f012a9ab:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a9b0:	39 c1                	cmp    %eax,%ecx
f012a9b2:	74 1d                	je     f012a9d1 <test_kfreelast+0x174b>
f012a9b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9b8:	75 17                	jne    f012a9d1 <test_kfreelast+0x174b>
f012a9ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9c1:	83 ec 0c             	sub    $0xc,%esp
f012a9c4:	68 58 bd 13 f0       	push   $0xf013bd58
f012a9c9:	e8 b4 62 fd ff       	call   f0100c82 <cprintf>
f012a9ce:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9d1:	e8 66 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a9d6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9d9:	74 1d                	je     f012a9f8 <test_kfreelast+0x1772>
f012a9db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9df:	75 17                	jne    f012a9f8 <test_kfreelast+0x1772>
f012a9e1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9e8:	83 ec 0c             	sub    $0xc,%esp
f012a9eb:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012a9f0:	e8 8d 62 fd ff       	call   f0100c82 <cprintf>
f012a9f5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a9f8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a9fb:	e8 c9 1e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012aa00:	29 c3                	sub    %eax,%ebx
f012aa02:	89 d8                	mov    %ebx,%eax
f012aa04:	83 f8 03             	cmp    $0x3,%eax
f012aa07:	74 1d                	je     f012aa26 <test_kfreelast+0x17a0>
f012aa09:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa0d:	75 17                	jne    f012aa26 <test_kfreelast+0x17a0>
f012aa0f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa16:	83 ec 0c             	sub    $0xc,%esp
f012aa19:	68 c0 bd 13 f0       	push   $0xf013bdc0
f012aa1e:	e8 5f 62 fd ff       	call   f0100c82 <cprintf>
f012aa23:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012aa26:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012aa2d:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012aa30:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aa36:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012aa39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa40:	eb 0e                	jmp    f012aa50 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012aa42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa45:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa48:	01 d0                	add    %edx,%eax
f012aa4a:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012aa4d:	ff 45 f4             	incl   -0xc(%ebp)
f012aa50:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012aa56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa59:	7f e7                	jg     f012aa42 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012aa5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa5f:	75 17                	jne    f012aa78 <test_kfreelast+0x17f2>
f012aa61:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012aa65:	83 ec 08             	sub    $0x8,%esp
f012aa68:	ff 75 f0             	pushl  -0x10(%ebp)
f012aa6b:	68 8c bc 13 f0       	push   $0xf013bc8c
f012aa70:	e8 0d 62 fd ff       	call   f0100c82 <cprintf>
f012aa75:	83 c4 10             	add    $0x10,%esp
f012aa78:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012aa7f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aa85:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012aa88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa8f:	eb 1e                	jmp    f012aaaf <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012aa91:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012aa97:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa9a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa9d:	01 c8                	add    %ecx,%eax
f012aa9f:	8a 00                	mov    (%eax),%al
f012aaa1:	0f be c0             	movsbl %al,%eax
f012aaa4:	01 d0                	add    %edx,%eax
f012aaa6:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012aaac:	ff 45 f4             	incl   -0xc(%ebp)
f012aaaf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012aab5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aab8:	7f d7                	jg     f012aa91 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012aaba:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012aac0:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012aac6:	89 d0                	mov    %edx,%eax
f012aac8:	01 c0                	add    %eax,%eax
f012aaca:	01 d0                	add    %edx,%eax
f012aacc:	c1 e0 02             	shl    $0x2,%eax
f012aacf:	39 c1                	cmp    %eax,%ecx
f012aad1:	74 1d                	je     f012aaf0 <test_kfreelast+0x186a>
f012aad3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aad7:	75 17                	jne    f012aaf0 <test_kfreelast+0x186a>
f012aad9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aae0:	83 ec 0c             	sub    $0xc,%esp
f012aae3:	68 04 be 13 f0       	push   $0xf013be04
f012aae8:	e8 95 61 fd ff       	call   f0100c82 <cprintf>
f012aaed:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012aaf0:	83 ec 0c             	sub    $0xc,%esp
f012aaf3:	6a 03                	push   $0x3
f012aaf5:	e8 6f 22 fe ff       	call   f010cd69 <sys_bypassPageFault>
f012aafa:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012aafd:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ab03:	05 00 30 00 00       	add    $0x3000,%eax
f012ab08:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012ab0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab12:	eb 3c                	jmp    f012ab50 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012ab14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab17:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab1a:	01 d0                	add    %edx,%eax
f012ab1c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab1f:	e8 33 22 fe ff       	call   f010cd57 <sys_rcr2>
f012ab24:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab27:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012ab2a:	01 ca                	add    %ecx,%edx
f012ab2c:	39 d0                	cmp    %edx,%eax
f012ab2e:	74 1d                	je     f012ab4d <test_kfreelast+0x18c7>
f012ab30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab34:	75 17                	jne    f012ab4d <test_kfreelast+0x18c7>
f012ab36:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab3d:	83 ec 0c             	sub    $0xc,%esp
f012ab40:	68 38 be 13 f0       	push   $0xf013be38
f012ab45:	e8 38 61 fd ff       	call   f0100c82 <cprintf>
f012ab4a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012ab4d:	ff 45 f4             	incl   -0xc(%ebp)
f012ab50:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012ab57:	7e bb                	jle    f012ab14 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ab59:	83 ec 0c             	sub    $0xc,%esp
f012ab5c:	6a 00                	push   $0x0
f012ab5e:	e8 06 22 fe ff       	call   f010cd69 <sys_bypassPageFault>
f012ab63:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ab66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab6a:	75 17                	jne    f012ab83 <test_kfreelast+0x18fd>
f012ab6c:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012ab70:	83 ec 08             	sub    $0x8,%esp
f012ab73:	ff 75 f0             	pushl  -0x10(%ebp)
f012ab76:	68 8c bc 13 f0       	push   $0xf013bc8c
f012ab7b:	e8 02 61 fd ff       	call   f0100c82 <cprintf>
f012ab80:	83 c4 10             	add    $0x10,%esp
f012ab83:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab8a:	e8 3a 1d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ab8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab92:	e8 a5 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ab97:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012ab9a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aba0:	83 ec 0c             	sub    $0xc,%esp
f012aba3:	50                   	push   %eax
f012aba4:	e8 17 cd fd ff       	call   f01078c0 <kfree>
f012aba9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012abac:	e8 8b 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012abb1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abb4:	74 1d                	je     f012abd3 <test_kfreelast+0x194d>
f012abb6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abba:	75 17                	jne    f012abd3 <test_kfreelast+0x194d>
f012abbc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abc3:	83 ec 0c             	sub    $0xc,%esp
f012abc6:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012abcb:	e8 b2 60 fd ff       	call   f0100c82 <cprintf>
f012abd0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012abd3:	e8 f1 1c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012abd8:	89 c2                	mov    %eax,%edx
f012abda:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012abdd:	29 c2                	sub    %eax,%edx
f012abdf:	89 d0                	mov    %edx,%eax
f012abe1:	83 f8 03             	cmp    $0x3,%eax
f012abe4:	74 1d                	je     f012ac03 <test_kfreelast+0x197d>
f012abe6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abea:	75 17                	jne    f012ac03 <test_kfreelast+0x197d>
f012abec:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abf3:	83 ec 0c             	sub    $0xc,%esp
f012abf6:	68 20 bd 13 f0       	push   $0xf013bd20
f012abfb:	e8 82 60 fd ff       	call   f0100c82 <cprintf>
f012ac00:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac03:	e8 c1 1c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ac08:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac0b:	e8 2c 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac10:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012ac13:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ac19:	83 ec 0c             	sub    $0xc,%esp
f012ac1c:	50                   	push   %eax
f012ac1d:	e8 9e cc fd ff       	call   f01078c0 <kfree>
f012ac22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac25:	e8 12 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac2a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac2d:	74 1d                	je     f012ac4c <test_kfreelast+0x19c6>
f012ac2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac33:	75 17                	jne    f012ac4c <test_kfreelast+0x19c6>
f012ac35:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac3c:	83 ec 0c             	sub    $0xc,%esp
f012ac3f:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012ac44:	e8 39 60 fd ff       	call   f0100c82 <cprintf>
f012ac49:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ac4c:	e8 78 1c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ac51:	89 c2                	mov    %eax,%edx
f012ac53:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac56:	29 c2                	sub    %eax,%edx
f012ac58:	89 d0                	mov    %edx,%eax
f012ac5a:	83 f8 04             	cmp    $0x4,%eax
f012ac5d:	74 1d                	je     f012ac7c <test_kfreelast+0x19f6>
f012ac5f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac63:	75 17                	jne    f012ac7c <test_kfreelast+0x19f6>
f012ac65:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac6c:	83 ec 0c             	sub    $0xc,%esp
f012ac6f:	68 20 bd 13 f0       	push   $0xf013bd20
f012ac74:	e8 09 60 fd ff       	call   f0100c82 <cprintf>
f012ac79:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac7c:	e8 48 1c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ac81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac84:	e8 b3 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ac8c:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ac92:	83 ec 0c             	sub    $0xc,%esp
f012ac95:	50                   	push   %eax
f012ac96:	e8 25 cc fd ff       	call   f01078c0 <kfree>
f012ac9b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac9e:	e8 99 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012aca3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aca6:	74 1d                	je     f012acc5 <test_kfreelast+0x1a3f>
f012aca8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acac:	75 17                	jne    f012acc5 <test_kfreelast+0x1a3f>
f012acae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acb5:	83 ec 0c             	sub    $0xc,%esp
f012acb8:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012acbd:	e8 c0 5f fd ff       	call   f0100c82 <cprintf>
f012acc2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012acc5:	e8 ff 1b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012acca:	89 c2                	mov    %eax,%edx
f012accc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012accf:	29 c2                	sub    %eax,%edx
f012acd1:	89 d0                	mov    %edx,%eax
f012acd3:	83 f8 05             	cmp    $0x5,%eax
f012acd6:	74 1d                	je     f012acf5 <test_kfreelast+0x1a6f>
f012acd8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acdc:	75 17                	jne    f012acf5 <test_kfreelast+0x1a6f>
f012acde:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ace5:	83 ec 0c             	sub    $0xc,%esp
f012ace8:	68 20 bd 13 f0       	push   $0xf013bd20
f012aced:	e8 90 5f fd ff       	call   f0100c82 <cprintf>
f012acf2:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012acf5:	e8 cf 1b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012acfa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acfd:	e8 3a 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ad02:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012ad05:	83 ec 0c             	sub    $0xc,%esp
f012ad08:	68 00 c8 00 00       	push   $0xc800
f012ad0d:	e8 ec ca fd ff       	call   f01077fe <kmalloc>
f012ad12:	83 c4 10             	add    $0x10,%esp
f012ad15:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012ad1b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ad21:	89 c1                	mov    %eax,%ecx
f012ad23:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012ad2a:	10 00 00 
f012ad2d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012ad33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ad38:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012ad3e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ad44:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad49:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012ad4f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ad55:	29 d0                	sub    %edx,%eax
f012ad57:	89 c3                	mov    %eax,%ebx
f012ad59:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012ad60:	10 00 00 
f012ad63:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ad68:	0f b6 d0             	movzbl %al,%edx
f012ad6b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012ad71:	01 d0                	add    %edx,%eax
f012ad73:	48                   	dec    %eax
f012ad74:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012ad7a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ad80:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad85:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012ad8b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ad91:	29 d0                	sub    %edx,%eax
f012ad93:	01 c3                	add    %eax,%ebx
f012ad95:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012ad9c:	10 00 00 
f012ad9f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ada4:	0f b6 c0             	movzbl %al,%eax
f012ada7:	c1 e0 04             	shl    $0x4,%eax
f012adaa:	89 c2                	mov    %eax,%edx
f012adac:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012adb2:	01 d0                	add    %edx,%eax
f012adb4:	48                   	dec    %eax
f012adb5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012adbb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012adc1:	ba 00 00 00 00       	mov    $0x0,%edx
f012adc6:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012adcc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012add2:	29 d0                	sub    %edx,%eax
f012add4:	01 d8                	add    %ebx,%eax
f012add6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012addb:	39 c1                	cmp    %eax,%ecx
f012addd:	74 1d                	je     f012adfc <test_kfreelast+0x1b76>
f012addf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ade3:	75 17                	jne    f012adfc <test_kfreelast+0x1b76>
f012ade5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adec:	83 ec 0c             	sub    $0xc,%esp
f012adef:	68 58 bd 13 f0       	push   $0xf013bd58
f012adf4:	e8 89 5e fd ff       	call   f0100c82 <cprintf>
f012adf9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012adfc:	e8 3b 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae01:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae04:	74 1d                	je     f012ae23 <test_kfreelast+0x1b9d>
f012ae06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae0a:	75 17                	jne    f012ae23 <test_kfreelast+0x1b9d>
f012ae0c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae13:	83 ec 0c             	sub    $0xc,%esp
f012ae16:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012ae1b:	e8 62 5e fd ff       	call   f0100c82 <cprintf>
f012ae20:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ae23:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ae26:	e8 9e 1a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ae2b:	29 c3                	sub    %eax,%ebx
f012ae2d:	89 d8                	mov    %ebx,%eax
f012ae2f:	83 f8 0d             	cmp    $0xd,%eax
f012ae32:	74 1d                	je     f012ae51 <test_kfreelast+0x1bcb>
f012ae34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae38:	75 17                	jne    f012ae51 <test_kfreelast+0x1bcb>
f012ae3a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae41:	83 ec 0c             	sub    $0xc,%esp
f012ae44:	68 c0 bd 13 f0       	push   $0xf013bdc0
f012ae49:	e8 34 5e fd ff       	call   f0100c82 <cprintf>
f012ae4e:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012ae51:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012ae58:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012ae5b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ae61:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012ae64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae6b:	eb 0e                	jmp    f012ae7b <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012ae6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae70:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae73:	01 d0                	add    %edx,%eax
f012ae75:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012ae78:	ff 45 f4             	incl   -0xc(%ebp)
f012ae7b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ae81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae84:	7f e7                	jg     f012ae6d <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012ae86:	e8 3e 1a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ae8b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae8e:	e8 a9 8e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012ae96:	83 ec 0c             	sub    $0xc,%esp
f012ae99:	68 00 fc 2f 00       	push   $0x2ffc00
f012ae9e:	e8 5b c9 fd ff       	call   f01077fe <kmalloc>
f012aea3:	83 c4 10             	add    $0x10,%esp
f012aea6:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012aeac:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012aeb2:	89 c1                	mov    %eax,%ecx
f012aeb4:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012aebb:	10 00 00 
f012aebe:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012aec4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aec9:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012aecf:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012aed5:	ba 00 00 00 00       	mov    $0x0,%edx
f012aeda:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012aee0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012aee6:	29 d0                	sub    %edx,%eax
f012aee8:	89 c3                	mov    %eax,%ebx
f012aeea:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012aef1:	10 00 00 
f012aef4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012aef9:	0f b6 d0             	movzbl %al,%edx
f012aefc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012af02:	01 d0                	add    %edx,%eax
f012af04:	48                   	dec    %eax
f012af05:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012af0b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012af11:	ba 00 00 00 00       	mov    $0x0,%edx
f012af16:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012af1c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012af22:	29 d0                	sub    %edx,%eax
f012af24:	01 c3                	add    %eax,%ebx
f012af26:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012af2d:	10 00 00 
f012af30:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012af35:	0f b6 c0             	movzbl %al,%eax
f012af38:	c1 e0 04             	shl    $0x4,%eax
f012af3b:	89 c2                	mov    %eax,%edx
f012af3d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012af43:	01 d0                	add    %edx,%eax
f012af45:	48                   	dec    %eax
f012af46:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012af4c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af52:	ba 00 00 00 00       	mov    $0x0,%edx
f012af57:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012af5d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af63:	29 d0                	sub    %edx,%eax
f012af65:	01 d8                	add    %ebx,%eax
f012af67:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012af6c:	39 c1                	cmp    %eax,%ecx
f012af6e:	74 1d                	je     f012af8d <test_kfreelast+0x1d07>
f012af70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af74:	75 17                	jne    f012af8d <test_kfreelast+0x1d07>
f012af76:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af7d:	83 ec 0c             	sub    $0xc,%esp
f012af80:	68 58 bd 13 f0       	push   $0xf013bd58
f012af85:	e8 f8 5c fd ff       	call   f0100c82 <cprintf>
f012af8a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af8d:	e8 aa 8d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012af92:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af95:	74 1d                	je     f012afb4 <test_kfreelast+0x1d2e>
f012af97:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af9b:	75 17                	jne    f012afb4 <test_kfreelast+0x1d2e>
f012af9d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afa4:	83 ec 0c             	sub    $0xc,%esp
f012afa7:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012afac:	e8 d1 5c fd ff       	call   f0100c82 <cprintf>
f012afb1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012afb4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012afb7:	e8 0d 19 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012afbc:	29 c3                	sub    %eax,%ebx
f012afbe:	89 d8                	mov    %ebx,%eax
f012afc0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012afc5:	74 1d                	je     f012afe4 <test_kfreelast+0x1d5e>
f012afc7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afcb:	75 17                	jne    f012afe4 <test_kfreelast+0x1d5e>
f012afcd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afd4:	83 ec 0c             	sub    $0xc,%esp
f012afd7:	68 c0 bd 13 f0       	push   $0xf013bdc0
f012afdc:	e8 a1 5c fd ff       	call   f0100c82 <cprintf>
f012afe1:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012afe4:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012afeb:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012afee:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012aff4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012aff7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012affe:	eb 0e                	jmp    f012b00e <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b000:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b003:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b006:	01 d0                	add    %edx,%eax
f012b008:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b00b:	ff 45 f4             	incl   -0xc(%ebp)
f012b00e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b014:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b017:	7f e7                	jg     f012b000 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b019:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b01d:	75 17                	jne    f012b036 <test_kfreelast+0x1db0>
f012b01f:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b023:	83 ec 08             	sub    $0x8,%esp
f012b026:	ff 75 f0             	pushl  -0x10(%ebp)
f012b029:	68 8c bc 13 f0       	push   $0xf013bc8c
f012b02e:	e8 4f 5c fd ff       	call   f0100c82 <cprintf>
f012b033:	83 c4 10             	add    $0x10,%esp
f012b036:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b03d:	e8 87 18 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b042:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b045:	e8 f2 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b04a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b04d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b053:	83 ec 0c             	sub    $0xc,%esp
f012b056:	50                   	push   %eax
f012b057:	e8 64 c8 fd ff       	call   f01078c0 <kfree>
f012b05c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b05f:	e8 d8 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b064:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b067:	74 1d                	je     f012b086 <test_kfreelast+0x1e00>
f012b069:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b06d:	75 17                	jne    f012b086 <test_kfreelast+0x1e00>
f012b06f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b076:	83 ec 0c             	sub    $0xc,%esp
f012b079:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b07e:	e8 ff 5b fd ff       	call   f0100c82 <cprintf>
f012b083:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b086:	e8 3e 18 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b08b:	89 c2                	mov    %eax,%edx
f012b08d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b090:	29 c2                	sub    %eax,%edx
f012b092:	89 d0                	mov    %edx,%eax
f012b094:	83 f8 0d             	cmp    $0xd,%eax
f012b097:	74 1d                	je     f012b0b6 <test_kfreelast+0x1e30>
f012b099:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b09d:	75 17                	jne    f012b0b6 <test_kfreelast+0x1e30>
f012b09f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0a6:	83 ec 0c             	sub    $0xc,%esp
f012b0a9:	68 20 bd 13 f0       	push   $0xf013bd20
f012b0ae:	e8 cf 5b fd ff       	call   f0100c82 <cprintf>
f012b0b3:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b0b6:	83 ec 0c             	sub    $0xc,%esp
f012b0b9:	6a 03                	push   $0x3
f012b0bb:	e8 a9 1c fe ff       	call   f010cd69 <sys_bypassPageFault>
f012b0c0:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b0c3:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b0c9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b0cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b0d3:	eb 3c                	jmp    f012b111 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b0d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b0d8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0db:	01 d0                	add    %edx,%eax
f012b0dd:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b0e0:	e8 72 1c fe ff       	call   f010cd57 <sys_rcr2>
f012b0e5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b0e8:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b0eb:	01 ca                	add    %ecx,%edx
f012b0ed:	39 d0                	cmp    %edx,%eax
f012b0ef:	74 1d                	je     f012b10e <test_kfreelast+0x1e88>
f012b0f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0f5:	75 17                	jne    f012b10e <test_kfreelast+0x1e88>
f012b0f7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0fe:	83 ec 0c             	sub    $0xc,%esp
f012b101:	68 38 be 13 f0       	push   $0xf013be38
f012b106:	e8 77 5b fd ff       	call   f0100c82 <cprintf>
f012b10b:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b10e:	ff 45 f4             	incl   -0xc(%ebp)
f012b111:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b118:	7e bb                	jle    f012b0d5 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b11a:	83 ec 0c             	sub    $0xc,%esp
f012b11d:	6a 00                	push   $0x0
f012b11f:	e8 45 1c fe ff       	call   f010cd69 <sys_bypassPageFault>
f012b124:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b127:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b12d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b130:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b137:	eb 1e                	jmp    f012b157 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b139:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b13f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b142:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b145:	01 c8                	add    %ecx,%eax
f012b147:	8a 00                	mov    (%eax),%al
f012b149:	0f be c0             	movsbl %al,%eax
f012b14c:	01 d0                	add    %edx,%eax
f012b14e:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b154:	ff 45 f4             	incl   -0xc(%ebp)
f012b157:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b15d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b160:	7f d7                	jg     f012b139 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b162:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b168:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b16e:	89 d0                	mov    %edx,%eax
f012b170:	01 c0                	add    %eax,%eax
f012b172:	01 d0                	add    %edx,%eax
f012b174:	01 c0                	add    %eax,%eax
f012b176:	01 d0                	add    %edx,%eax
f012b178:	01 c0                	add    %eax,%eax
f012b17a:	39 c1                	cmp    %eax,%ecx
f012b17c:	74 1d                	je     f012b19b <test_kfreelast+0x1f15>
f012b17e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b182:	75 17                	jne    f012b19b <test_kfreelast+0x1f15>
f012b184:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b18b:	83 ec 0c             	sub    $0xc,%esp
f012b18e:	68 04 be 13 f0       	push   $0xf013be04
f012b193:	e8 ea 5a fd ff       	call   f0100c82 <cprintf>
f012b198:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b19b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b19f:	75 17                	jne    f012b1b8 <test_kfreelast+0x1f32>
f012b1a1:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b1a5:	83 ec 08             	sub    $0x8,%esp
f012b1a8:	ff 75 f0             	pushl  -0x10(%ebp)
f012b1ab:	68 8c bc 13 f0       	push   $0xf013bc8c
f012b1b0:	e8 cd 5a fd ff       	call   f0100c82 <cprintf>
f012b1b5:	83 c4 10             	add    $0x10,%esp
f012b1b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1bf:	e8 05 17 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b1c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1c7:	e8 70 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b1cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b1cf:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b1d5:	83 ec 0c             	sub    $0xc,%esp
f012b1d8:	50                   	push   %eax
f012b1d9:	e8 e2 c6 fd ff       	call   f01078c0 <kfree>
f012b1de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1e1:	e8 56 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b1e6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1e9:	74 1d                	je     f012b208 <test_kfreelast+0x1f82>
f012b1eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1ef:	75 17                	jne    f012b208 <test_kfreelast+0x1f82>
f012b1f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1f8:	83 ec 0c             	sub    $0xc,%esp
f012b1fb:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b200:	e8 7d 5a fd ff       	call   f0100c82 <cprintf>
f012b205:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b208:	e8 bc 16 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b20d:	89 c2                	mov    %eax,%edx
f012b20f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b212:	29 c2                	sub    %eax,%edx
f012b214:	89 d0                	mov    %edx,%eax
f012b216:	83 f8 02             	cmp    $0x2,%eax
f012b219:	74 1d                	je     f012b238 <test_kfreelast+0x1fb2>
f012b21b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b21f:	75 17                	jne    f012b238 <test_kfreelast+0x1fb2>
f012b221:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b228:	83 ec 0c             	sub    $0xc,%esp
f012b22b:	68 20 bd 13 f0       	push   $0xf013bd20
f012b230:	e8 4d 5a fd ff       	call   f0100c82 <cprintf>
f012b235:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b238:	e8 8c 16 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b23d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b240:	e8 f7 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b245:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b248:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b24e:	83 ec 0c             	sub    $0xc,%esp
f012b251:	50                   	push   %eax
f012b252:	e8 69 c6 fd ff       	call   f01078c0 <kfree>
f012b257:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b25a:	e8 dd 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b25f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b262:	74 1d                	je     f012b281 <test_kfreelast+0x1ffb>
f012b264:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b268:	75 17                	jne    f012b281 <test_kfreelast+0x1ffb>
f012b26a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b271:	83 ec 0c             	sub    $0xc,%esp
f012b274:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b279:	e8 04 5a fd ff       	call   f0100c82 <cprintf>
f012b27e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b281:	e8 43 16 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b286:	89 c2                	mov    %eax,%edx
f012b288:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b28b:	29 c2                	sub    %eax,%edx
f012b28d:	89 d0                	mov    %edx,%eax
f012b28f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b294:	74 1d                	je     f012b2b3 <test_kfreelast+0x202d>
f012b296:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b29a:	75 17                	jne    f012b2b3 <test_kfreelast+0x202d>
f012b29c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2a3:	83 ec 0c             	sub    $0xc,%esp
f012b2a6:	68 20 bd 13 f0       	push   $0xf013bd20
f012b2ab:	e8 d2 59 fd ff       	call   f0100c82 <cprintf>
f012b2b0:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b2b3:	e8 11 16 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b2b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2bb:	e8 7c 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b2c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b2c3:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b2c9:	83 ec 0c             	sub    $0xc,%esp
f012b2cc:	50                   	push   %eax
f012b2cd:	e8 ee c5 fd ff       	call   f01078c0 <kfree>
f012b2d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b2d5:	e8 62 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b2da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2dd:	74 1d                	je     f012b2fc <test_kfreelast+0x2076>
f012b2df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2e3:	75 17                	jne    f012b2fc <test_kfreelast+0x2076>
f012b2e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2ec:	83 ec 0c             	sub    $0xc,%esp
f012b2ef:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b2f4:	e8 89 59 fd ff       	call   f0100c82 <cprintf>
f012b2f9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b2fc:	e8 c8 15 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b301:	89 c2                	mov    %eax,%edx
f012b303:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b306:	29 c2                	sub    %eax,%edx
f012b308:	89 d0                	mov    %edx,%eax
f012b30a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b30f:	74 1d                	je     f012b32e <test_kfreelast+0x20a8>
f012b311:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b315:	75 17                	jne    f012b32e <test_kfreelast+0x20a8>
f012b317:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b31e:	83 ec 0c             	sub    $0xc,%esp
f012b321:	68 20 bd 13 f0       	push   $0xf013bd20
f012b326:	e8 57 59 fd ff       	call   f0100c82 <cprintf>
f012b32b:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b32e:	e8 96 15 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b333:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b336:	e8 01 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b33b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b33e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b344:	83 ec 0c             	sub    $0xc,%esp
f012b347:	50                   	push   %eax
f012b348:	e8 73 c5 fd ff       	call   f01078c0 <kfree>
f012b34d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b350:	e8 e7 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b355:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b358:	74 1d                	je     f012b377 <test_kfreelast+0x20f1>
f012b35a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b35e:	75 17                	jne    f012b377 <test_kfreelast+0x20f1>
f012b360:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b367:	83 ec 0c             	sub    $0xc,%esp
f012b36a:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b36f:	e8 0e 59 fd ff       	call   f0100c82 <cprintf>
f012b374:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b377:	e8 4d 15 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b37c:	89 c2                	mov    %eax,%edx
f012b37e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b381:	29 c2                	sub    %eax,%edx
f012b383:	89 d0                	mov    %edx,%eax
f012b385:	83 f8 01             	cmp    $0x1,%eax
f012b388:	74 1d                	je     f012b3a7 <test_kfreelast+0x2121>
f012b38a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b38e:	75 17                	jne    f012b3a7 <test_kfreelast+0x2121>
f012b390:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b397:	83 ec 0c             	sub    $0xc,%esp
f012b39a:	68 20 bd 13 f0       	push   $0xf013bd20
f012b39f:	e8 de 58 fd ff       	call   f0100c82 <cprintf>
f012b3a4:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b3a7:	e8 1d 15 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b3ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3af:	e8 88 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b3b7:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b3bd:	83 ec 0c             	sub    $0xc,%esp
f012b3c0:	50                   	push   %eax
f012b3c1:	e8 fa c4 fd ff       	call   f01078c0 <kfree>
f012b3c6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3c9:	e8 6e 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3ce:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3d1:	74 1d                	je     f012b3f0 <test_kfreelast+0x216a>
f012b3d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3d7:	75 17                	jne    f012b3f0 <test_kfreelast+0x216a>
f012b3d9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3e0:	83 ec 0c             	sub    $0xc,%esp
f012b3e3:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b3e8:	e8 95 58 fd ff       	call   f0100c82 <cprintf>
f012b3ed:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b3f0:	e8 d4 14 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b3f5:	89 c2                	mov    %eax,%edx
f012b3f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b3fa:	29 c2                	sub    %eax,%edx
f012b3fc:	89 d0                	mov    %edx,%eax
f012b3fe:	83 f8 01             	cmp    $0x1,%eax
f012b401:	74 1d                	je     f012b420 <test_kfreelast+0x219a>
f012b403:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b407:	75 17                	jne    f012b420 <test_kfreelast+0x219a>
f012b409:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b410:	83 ec 0c             	sub    $0xc,%esp
f012b413:	68 20 bd 13 f0       	push   $0xf013bd20
f012b418:	e8 65 58 fd ff       	call   f0100c82 <cprintf>
f012b41d:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b420:	e8 a4 14 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b425:	89 c2                	mov    %eax,%edx
f012b427:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b42a:	39 c2                	cmp    %eax,%edx
f012b42c:	74 1d                	je     f012b44b <test_kfreelast+0x21c5>
f012b42e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b432:	75 17                	jne    f012b44b <test_kfreelast+0x21c5>
f012b434:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b43b:	83 ec 0c             	sub    $0xc,%esp
f012b43e:	68 80 be 13 f0       	push   $0xf013be80
f012b443:	e8 3a 58 fd ff       	call   f0100c82 <cprintf>
f012b448:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b44b:	83 ec 0c             	sub    $0xc,%esp
f012b44e:	6a 03                	push   $0x3
f012b450:	e8 14 19 fe ff       	call   f010cd69 <sys_bypassPageFault>
f012b455:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b458:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b45f:	e9 8e 00 00 00       	jmp    f012b4f2 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b464:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b467:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b46e:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b471:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b474:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b477:	e8 db 18 fe ff       	call   f010cd57 <sys_rcr2>
f012b47c:	89 c2                	mov    %eax,%edx
f012b47e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b481:	39 c2                	cmp    %eax,%edx
f012b483:	74 1d                	je     f012b4a2 <test_kfreelast+0x221c>
f012b485:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b489:	75 17                	jne    f012b4a2 <test_kfreelast+0x221c>
f012b48b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b492:	83 ec 0c             	sub    $0xc,%esp
f012b495:	68 38 be 13 f0       	push   $0xf013be38
f012b49a:	e8 e3 57 fd ff       	call   f0100c82 <cprintf>
f012b49f:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b4a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b4a5:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b4ac:	89 c2                	mov    %eax,%edx
f012b4ae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4b1:	01 d0                	add    %edx,%eax
f012b4b3:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b4b6:	e8 9c 18 fe ff       	call   f010cd57 <sys_rcr2>
f012b4bb:	89 c2                	mov    %eax,%edx
f012b4bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b4c0:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b4c7:	89 c1                	mov    %eax,%ecx
f012b4c9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4cc:	01 c8                	add    %ecx,%eax
f012b4ce:	39 c2                	cmp    %eax,%edx
f012b4d0:	74 1d                	je     f012b4ef <test_kfreelast+0x2269>
f012b4d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4d6:	75 17                	jne    f012b4ef <test_kfreelast+0x2269>
f012b4d8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4df:	83 ec 0c             	sub    $0xc,%esp
f012b4e2:	68 38 be 13 f0       	push   $0xf013be38
f012b4e7:	e8 96 57 fd ff       	call   f0100c82 <cprintf>
f012b4ec:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b4ef:	ff 45 f4             	incl   -0xc(%ebp)
f012b4f2:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b4f6:	0f 8e 68 ff ff ff    	jle    f012b464 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b4fc:	83 ec 0c             	sub    $0xc,%esp
f012b4ff:	6a 00                	push   $0x0
f012b501:	e8 63 18 fe ff       	call   f010cd69 <sys_bypassPageFault>
f012b506:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b509:	e8 bb 13 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b50e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b511:	e8 26 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b516:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b519:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b51f:	83 ec 0c             	sub    $0xc,%esp
f012b522:	50                   	push   %eax
f012b523:	e8 98 c3 fd ff       	call   f01078c0 <kfree>
f012b528:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b52b:	e8 0c 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b530:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b533:	74 1d                	je     f012b552 <test_kfreelast+0x22cc>
f012b535:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b539:	75 17                	jne    f012b552 <test_kfreelast+0x22cc>
f012b53b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b542:	83 ec 0c             	sub    $0xc,%esp
f012b545:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b54a:	e8 33 57 fd ff       	call   f0100c82 <cprintf>
f012b54f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b552:	e8 72 13 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b557:	89 c2                	mov    %eax,%edx
f012b559:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b55c:	39 c2                	cmp    %eax,%edx
f012b55e:	74 1d                	je     f012b57d <test_kfreelast+0x22f7>
f012b560:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b564:	75 17                	jne    f012b57d <test_kfreelast+0x22f7>
f012b566:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b56d:	83 ec 0c             	sub    $0xc,%esp
f012b570:	68 b8 be 13 f0       	push   $0xf013beb8
f012b575:	e8 08 57 fd ff       	call   f0100c82 <cprintf>
f012b57a:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b57d:	e8 47 13 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b582:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b585:	e8 b2 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b58a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b58d:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b593:	83 ec 0c             	sub    $0xc,%esp
f012b596:	50                   	push   %eax
f012b597:	e8 24 c3 fd ff       	call   f01078c0 <kfree>
f012b59c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b59f:	e8 98 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b5a4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5a7:	74 1d                	je     f012b5c6 <test_kfreelast+0x2340>
f012b5a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5ad:	75 17                	jne    f012b5c6 <test_kfreelast+0x2340>
f012b5af:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5b6:	83 ec 0c             	sub    $0xc,%esp
f012b5b9:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b5be:	e8 bf 56 fd ff       	call   f0100c82 <cprintf>
f012b5c3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b5c6:	e8 fe 12 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b5cb:	89 c2                	mov    %eax,%edx
f012b5cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b5d0:	39 c2                	cmp    %eax,%edx
f012b5d2:	74 1d                	je     f012b5f1 <test_kfreelast+0x236b>
f012b5d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5d8:	75 17                	jne    f012b5f1 <test_kfreelast+0x236b>
f012b5da:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5e1:	83 ec 0c             	sub    $0xc,%esp
f012b5e4:	68 b8 be 13 f0       	push   $0xf013beb8
f012b5e9:	e8 94 56 fd ff       	call   f0100c82 <cprintf>
f012b5ee:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b5f1:	e8 d3 12 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b5f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5f9:	e8 3e 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b5fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b601:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b607:	83 ec 0c             	sub    $0xc,%esp
f012b60a:	50                   	push   %eax
f012b60b:	e8 b0 c2 fd ff       	call   f01078c0 <kfree>
f012b610:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b613:	e8 24 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b618:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b61b:	74 1d                	je     f012b63a <test_kfreelast+0x23b4>
f012b61d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b621:	75 17                	jne    f012b63a <test_kfreelast+0x23b4>
f012b623:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b62a:	83 ec 0c             	sub    $0xc,%esp
f012b62d:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b632:	e8 4b 56 fd ff       	call   f0100c82 <cprintf>
f012b637:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b63a:	e8 8a 12 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b63f:	89 c2                	mov    %eax,%edx
f012b641:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b644:	39 c2                	cmp    %eax,%edx
f012b646:	74 1d                	je     f012b665 <test_kfreelast+0x23df>
f012b648:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b64c:	75 17                	jne    f012b665 <test_kfreelast+0x23df>
f012b64e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b655:	83 ec 0c             	sub    $0xc,%esp
f012b658:	68 b8 be 13 f0       	push   $0xf013beb8
f012b65d:	e8 20 56 fd ff       	call   f0100c82 <cprintf>
f012b662:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b665:	e8 5f 12 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b66a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b66d:	e8 ca 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b672:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b675:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b67b:	83 ec 0c             	sub    $0xc,%esp
f012b67e:	50                   	push   %eax
f012b67f:	e8 3c c2 fd ff       	call   f01078c0 <kfree>
f012b684:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b687:	e8 b0 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b68c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b68f:	74 1d                	je     f012b6ae <test_kfreelast+0x2428>
f012b691:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b695:	75 17                	jne    f012b6ae <test_kfreelast+0x2428>
f012b697:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b69e:	83 ec 0c             	sub    $0xc,%esp
f012b6a1:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b6a6:	e8 d7 55 fd ff       	call   f0100c82 <cprintf>
f012b6ab:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b6ae:	e8 16 12 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b6b3:	89 c2                	mov    %eax,%edx
f012b6b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6b8:	39 c2                	cmp    %eax,%edx
f012b6ba:	74 1d                	je     f012b6d9 <test_kfreelast+0x2453>
f012b6bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6c0:	75 17                	jne    f012b6d9 <test_kfreelast+0x2453>
f012b6c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6c9:	83 ec 0c             	sub    $0xc,%esp
f012b6cc:	68 b8 be 13 f0       	push   $0xf013beb8
f012b6d1:	e8 ac 55 fd ff       	call   f0100c82 <cprintf>
f012b6d6:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b6d9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6dd:	75 17                	jne    f012b6f6 <test_kfreelast+0x2470>
f012b6df:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b6e3:	83 ec 08             	sub    $0x8,%esp
f012b6e6:	ff 75 f0             	pushl  -0x10(%ebp)
f012b6e9:	68 8c bc 13 f0       	push   $0xf013bc8c
f012b6ee:	e8 8f 55 fd ff       	call   f0100c82 <cprintf>
f012b6f3:	83 c4 10             	add    $0x10,%esp
f012b6f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b6fd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b702:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b705:	5b                   	pop    %ebx
f012b706:	5f                   	pop    %edi
f012b707:	5d                   	pop    %ebp
f012b708:	c3                   	ret    

f012b709 <test_krealloc>:

int test_krealloc() {
f012b709:	55                   	push   %ebp
f012b70a:	89 e5                	mov    %esp,%ebp
f012b70c:	57                   	push   %edi
f012b70d:	53                   	push   %ebx
f012b70e:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b714:	83 ec 0c             	sub    $0xc,%esp
f012b717:	68 9c ab 13 f0       	push   $0xf013ab9c
f012b71c:	e8 61 55 fd ff       	call   f0100c82 <cprintf>
f012b721:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b724:	83 ec 0c             	sub    $0xc,%esp
f012b727:	68 cc ab 13 f0       	push   $0xf013abcc
f012b72c:	e8 51 55 fd ff       	call   f0100c82 <cprintf>
f012b731:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b734:	83 ec 0c             	sub    $0xc,%esp
f012b737:	68 9c ab 13 f0       	push   $0xf013ab9c
f012b73c:	e8 41 55 fd ff       	call   f0100c82 <cprintf>
f012b741:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b744:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b748:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b74c:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b752:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b758:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b75f:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b766:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b76c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b771:	b8 00 00 00 00       	mov    $0x0,%eax
f012b776:	89 d7                	mov    %edx,%edi
f012b778:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b77a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b781:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b787:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b78c:	b8 00 00 00 00       	mov    $0x0,%eax
f012b791:	89 d7                	mov    %edx,%edi
f012b793:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b795:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b79b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b7a0:	b8 00 00 00 00       	mov    $0x0,%eax
f012b7a5:	89 d7                	mov    %edx,%edi
f012b7a7:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b7a9:	e8 1b 11 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b7ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b7b1:	83 ec 08             	sub    $0x8,%esp
f012b7b4:	68 00 fc 0f 00       	push   $0xffc00
f012b7b9:	6a 00                	push   $0x0
f012b7bb:	e8 f5 c2 fd ff       	call   f0107ab5 <krealloc>
f012b7c0:	83 c4 10             	add    $0x10,%esp
f012b7c3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b7c9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b7cf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b7d4:	77 17                	ja     f012b7ed <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b7d6:	83 ec 04             	sub    $0x4,%esp
f012b7d9:	68 00 bf 13 f0       	push   $0xf013bf00
f012b7de:	68 e2 0e 00 00       	push   $0xee2
f012b7e3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b7e8:	e8 0e 4a fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b7ed:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b7f3:	89 c1                	mov    %eax,%ecx
f012b7f5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b7fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b7ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b804:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b807:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b80a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b80f:	f7 75 b4             	divl   -0x4c(%ebp)
f012b812:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b815:	29 d0                	sub    %edx,%eax
f012b817:	89 c3                	mov    %eax,%ebx
f012b819:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b820:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b825:	0f b6 d0             	movzbl %al,%edx
f012b828:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b82b:	01 d0                	add    %edx,%eax
f012b82d:	48                   	dec    %eax
f012b82e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b831:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b834:	ba 00 00 00 00       	mov    $0x0,%edx
f012b839:	f7 75 ac             	divl   -0x54(%ebp)
f012b83c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b83f:	29 d0                	sub    %edx,%eax
f012b841:	01 c3                	add    %eax,%ebx
f012b843:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b84a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b84f:	0f b6 c0             	movzbl %al,%eax
f012b852:	c1 e0 04             	shl    $0x4,%eax
f012b855:	89 c2                	mov    %eax,%edx
f012b857:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b85a:	01 d0                	add    %edx,%eax
f012b85c:	48                   	dec    %eax
f012b85d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b860:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b863:	ba 00 00 00 00       	mov    $0x0,%edx
f012b868:	f7 75 a4             	divl   -0x5c(%ebp)
f012b86b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b86e:	29 d0                	sub    %edx,%eax
f012b870:	01 d8                	add    %ebx,%eax
f012b872:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b877:	39 c1                	cmp    %eax,%ecx
f012b879:	74 17                	je     f012b892 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b87b:	83 ec 04             	sub    $0x4,%esp
f012b87e:	68 3c bf 13 f0       	push   $0xf013bf3c
f012b883:	68 e4 0e 00 00       	push   $0xee4
f012b888:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b88d:	e8 69 49 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b892:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b895:	e8 2f 10 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b89a:	29 c3                	sub    %eax,%ebx
f012b89c:	89 d8                	mov    %ebx,%eax
f012b89e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b8a3:	74 17                	je     f012b8bc <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b8a5:	83 ec 04             	sub    $0x4,%esp
f012b8a8:	68 6e bf 13 f0       	push   $0xf013bf6e
f012b8ad:	68 e7 0e 00 00       	push   $0xee7
f012b8b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b8b7:	e8 3f 49 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b8bc:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b8c3:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b8c6:	e8 fe 0f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b8cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b8ce:	83 ec 08             	sub    $0x8,%esp
f012b8d1:	68 00 fc 0f 00       	push   $0xffc00
f012b8d6:	6a 00                	push   $0x0
f012b8d8:	e8 d8 c1 fd ff       	call   f0107ab5 <krealloc>
f012b8dd:	83 c4 10             	add    $0x10,%esp
f012b8e0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b8e6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b8ec:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b8f1:	77 17                	ja     f012b90a <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b8f3:	83 ec 04             	sub    $0x4,%esp
f012b8f6:	68 00 bf 13 f0       	push   $0xf013bf00
f012b8fb:	68 ef 0e 00 00       	push   $0xeef
f012b900:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b905:	e8 f1 48 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b90a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b910:	89 c1                	mov    %eax,%ecx
f012b912:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b919:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b91c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b921:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b924:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b927:	ba 00 00 00 00       	mov    $0x0,%edx
f012b92c:	f7 75 9c             	divl   -0x64(%ebp)
f012b92f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b932:	29 d0                	sub    %edx,%eax
f012b934:	89 c3                	mov    %eax,%ebx
f012b936:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b93d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b942:	0f b6 d0             	movzbl %al,%edx
f012b945:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b948:	01 d0                	add    %edx,%eax
f012b94a:	48                   	dec    %eax
f012b94b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b94e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b951:	ba 00 00 00 00       	mov    $0x0,%edx
f012b956:	f7 75 94             	divl   -0x6c(%ebp)
f012b959:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b95c:	29 d0                	sub    %edx,%eax
f012b95e:	01 c3                	add    %eax,%ebx
f012b960:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b967:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b96c:	0f b6 c0             	movzbl %al,%eax
f012b96f:	c1 e0 04             	shl    $0x4,%eax
f012b972:	89 c2                	mov    %eax,%edx
f012b974:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b977:	01 d0                	add    %edx,%eax
f012b979:	48                   	dec    %eax
f012b97a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b97d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b980:	ba 00 00 00 00       	mov    $0x0,%edx
f012b985:	f7 75 8c             	divl   -0x74(%ebp)
f012b988:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b98b:	29 d0                	sub    %edx,%eax
f012b98d:	01 d8                	add    %ebx,%eax
f012b98f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b994:	39 c1                	cmp    %eax,%ecx
f012b996:	74 17                	je     f012b9af <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b998:	83 ec 04             	sub    $0x4,%esp
f012b99b:	68 3c bf 13 f0       	push   $0xf013bf3c
f012b9a0:	68 f1 0e 00 00       	push   $0xef1
f012b9a5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b9aa:	e8 4c 48 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b9af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b9b2:	e8 12 0f fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b9b7:	29 c3                	sub    %eax,%ebx
f012b9b9:	89 d8                	mov    %ebx,%eax
f012b9bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b9c0:	74 17                	je     f012b9d9 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b9c2:	83 ec 04             	sub    $0x4,%esp
f012b9c5:	68 6e bf 13 f0       	push   $0xf013bf6e
f012b9ca:	68 f3 0e 00 00       	push   $0xef3
f012b9cf:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b9d4:	e8 22 48 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b9d9:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b9e0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b9e3:	e8 e1 0e fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012b9e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b9eb:	83 ec 08             	sub    $0x8,%esp
f012b9ee:	68 00 fc 0f 00       	push   $0xffc00
f012b9f3:	6a 00                	push   $0x0
f012b9f5:	e8 bb c0 fd ff       	call   f0107ab5 <krealloc>
f012b9fa:	83 c4 10             	add    $0x10,%esp
f012b9fd:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012ba03:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ba09:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012ba0e:	77 17                	ja     f012ba27 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ba10:	83 ec 04             	sub    $0x4,%esp
f012ba13:	68 00 bf 13 f0       	push   $0xf013bf00
f012ba18:	68 fb 0e 00 00       	push   $0xefb
f012ba1d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ba22:	e8 d4 47 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012ba27:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ba2d:	89 c1                	mov    %eax,%ecx
f012ba2f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012ba36:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ba3e:	89 45 80             	mov    %eax,-0x80(%ebp)
f012ba41:	8b 45 80             	mov    -0x80(%ebp),%eax
f012ba44:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba49:	f7 75 84             	divl   -0x7c(%ebp)
f012ba4c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012ba4f:	29 d0                	sub    %edx,%eax
f012ba51:	89 c3                	mov    %eax,%ebx
f012ba53:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012ba5a:	10 00 00 
f012ba5d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ba62:	0f b6 d0             	movzbl %al,%edx
f012ba65:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012ba6b:	01 d0                	add    %edx,%eax
f012ba6d:	48                   	dec    %eax
f012ba6e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012ba74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012ba7a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba7f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012ba85:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012ba8b:	29 d0                	sub    %edx,%eax
f012ba8d:	01 c3                	add    %eax,%ebx
f012ba8f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012ba96:	10 00 00 
f012ba99:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ba9e:	0f b6 c0             	movzbl %al,%eax
f012baa1:	c1 e0 04             	shl    $0x4,%eax
f012baa4:	89 c2                	mov    %eax,%edx
f012baa6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012baac:	01 d0                	add    %edx,%eax
f012baae:	48                   	dec    %eax
f012baaf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012bab5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012babb:	ba 00 00 00 00       	mov    $0x0,%edx
f012bac0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012bac6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bacc:	29 d0                	sub    %edx,%eax
f012bace:	01 d8                	add    %ebx,%eax
f012bad0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bad5:	39 c1                	cmp    %eax,%ecx
f012bad7:	74 17                	je     f012baf0 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012bad9:	83 ec 04             	sub    $0x4,%esp
f012badc:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bae1:	68 fd 0e 00 00       	push   $0xefd
f012bae6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012baeb:	e8 0b 47 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012baf0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012baf3:	e8 d1 0d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012baf8:	29 c3                	sub    %eax,%ebx
f012bafa:	89 d8                	mov    %ebx,%eax
f012bafc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bb01:	74 17                	je     f012bb1a <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012bb03:	83 ec 04             	sub    $0x4,%esp
f012bb06:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bb0b:	68 ff 0e 00 00       	push   $0xeff
f012bb10:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bb15:	e8 e1 46 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bb1a:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012bb21:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bb24:	e8 a0 0d fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bb29:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bb2c:	83 ec 08             	sub    $0x8,%esp
f012bb2f:	68 00 fc 0f 00       	push   $0xffc00
f012bb34:	6a 00                	push   $0x0
f012bb36:	e8 7a bf fd ff       	call   f0107ab5 <krealloc>
f012bb3b:	83 c4 10             	add    $0x10,%esp
f012bb3e:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bb44:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bb4a:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bb4f:	77 17                	ja     f012bb68 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb51:	83 ec 04             	sub    $0x4,%esp
f012bb54:	68 00 bf 13 f0       	push   $0xf013bf00
f012bb59:	68 06 0f 00 00       	push   $0xf06
f012bb5e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bb63:	e8 93 46 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bb68:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bb6e:	89 c1                	mov    %eax,%ecx
f012bb70:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012bb77:	10 00 00 
f012bb7a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012bb80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb85:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012bb8b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bb91:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb96:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012bb9c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bba2:	29 d0                	sub    %edx,%eax
f012bba4:	89 c3                	mov    %eax,%ebx
f012bba6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012bbad:	10 00 00 
f012bbb0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bbb5:	0f b6 d0             	movzbl %al,%edx
f012bbb8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012bbbe:	01 d0                	add    %edx,%eax
f012bbc0:	48                   	dec    %eax
f012bbc1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012bbc7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bbcd:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbd2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012bbd8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bbde:	29 d0                	sub    %edx,%eax
f012bbe0:	01 c3                	add    %eax,%ebx
f012bbe2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012bbe9:	10 00 00 
f012bbec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bbf1:	0f b6 c0             	movzbl %al,%eax
f012bbf4:	c1 e0 04             	shl    $0x4,%eax
f012bbf7:	89 c2                	mov    %eax,%edx
f012bbf9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012bbff:	01 d0                	add    %edx,%eax
f012bc01:	48                   	dec    %eax
f012bc02:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012bc08:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bc0e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc13:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012bc19:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bc1f:	29 d0                	sub    %edx,%eax
f012bc21:	01 d8                	add    %ebx,%eax
f012bc23:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bc28:	39 c1                	cmp    %eax,%ecx
f012bc2a:	74 17                	je     f012bc43 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012bc2c:	83 ec 04             	sub    $0x4,%esp
f012bc2f:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bc34:	68 08 0f 00 00       	push   $0xf08
f012bc39:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bc3e:	e8 b8 45 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bc43:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bc46:	e8 7e 0c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bc4b:	29 c3                	sub    %eax,%ebx
f012bc4d:	89 d8                	mov    %ebx,%eax
f012bc4f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bc54:	74 17                	je     f012bc6d <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012bc56:	83 ec 04             	sub    $0x4,%esp
f012bc59:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bc5e:	68 0a 0f 00 00       	push   $0xf0a
f012bc63:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bc68:	e8 8e 45 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bc6d:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012bc74:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bc77:	e8 4d 0c fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bc7c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012bc7f:	83 ec 08             	sub    $0x8,%esp
f012bc82:	68 00 fc 1f 00       	push   $0x1ffc00
f012bc87:	6a 00                	push   $0x0
f012bc89:	e8 27 be fd ff       	call   f0107ab5 <krealloc>
f012bc8e:	83 c4 10             	add    $0x10,%esp
f012bc91:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bc97:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bc9d:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bca2:	77 17                	ja     f012bcbb <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bca4:	83 ec 04             	sub    $0x4,%esp
f012bca7:	68 00 bf 13 f0       	push   $0xf013bf00
f012bcac:	68 11 0f 00 00       	push   $0xf11
f012bcb1:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bcb6:	e8 40 45 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bcbb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bcc1:	89 c1                	mov    %eax,%ecx
f012bcc3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bcca:	10 00 00 
f012bccd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bcd3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bcd8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bcde:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bce4:	ba 00 00 00 00       	mov    $0x0,%edx
f012bce9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bcef:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bcf5:	29 d0                	sub    %edx,%eax
f012bcf7:	89 c3                	mov    %eax,%ebx
f012bcf9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bd00:	10 00 00 
f012bd03:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bd08:	0f b6 d0             	movzbl %al,%edx
f012bd0b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bd11:	01 d0                	add    %edx,%eax
f012bd13:	48                   	dec    %eax
f012bd14:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bd1a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bd20:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd25:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012bd2b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bd31:	29 d0                	sub    %edx,%eax
f012bd33:	01 c3                	add    %eax,%ebx
f012bd35:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012bd3c:	10 00 00 
f012bd3f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bd44:	0f b6 c0             	movzbl %al,%eax
f012bd47:	c1 e0 04             	shl    $0x4,%eax
f012bd4a:	89 c2                	mov    %eax,%edx
f012bd4c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012bd52:	01 d0                	add    %edx,%eax
f012bd54:	48                   	dec    %eax
f012bd55:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012bd5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bd61:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd66:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012bd6c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bd72:	29 d0                	sub    %edx,%eax
f012bd74:	01 d8                	add    %ebx,%eax
f012bd76:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bd7b:	39 c1                	cmp    %eax,%ecx
f012bd7d:	74 17                	je     f012bd96 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012bd7f:	83 ec 04             	sub    $0x4,%esp
f012bd82:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bd87:	68 13 0f 00 00       	push   $0xf13
f012bd8c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bd91:	e8 65 44 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bd96:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd99:	e8 2b 0b fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bd9e:	29 c3                	sub    %eax,%ebx
f012bda0:	89 d8                	mov    %ebx,%eax
f012bda2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bda7:	74 17                	je     f012bdc0 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012bda9:	83 ec 04             	sub    $0x4,%esp
f012bdac:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bdb1:	68 15 0f 00 00       	push   $0xf15
f012bdb6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bdbb:	e8 3b 44 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bdc0:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012bdc7:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bdca:	e8 fa 0a fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bdcf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012bdd2:	83 ec 08             	sub    $0x8,%esp
f012bdd5:	68 00 fc 1f 00       	push   $0x1ffc00
f012bdda:	6a 00                	push   $0x0
f012bddc:	e8 d4 bc fd ff       	call   f0107ab5 <krealloc>
f012bde1:	83 c4 10             	add    $0x10,%esp
f012bde4:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012bdea:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bdf0:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012bdf5:	77 17                	ja     f012be0e <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdf7:	83 ec 04             	sub    $0x4,%esp
f012bdfa:	68 00 bf 13 f0       	push   $0xf013bf00
f012bdff:	68 1c 0f 00 00       	push   $0xf1c
f012be04:	68 5a ac 13 f0       	push   $0xf013ac5a
f012be09:	e8 ed 43 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012be0e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012be14:	89 c1                	mov    %eax,%ecx
f012be16:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012be1d:	10 00 00 
f012be20:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012be26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012be2b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012be31:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012be37:	ba 00 00 00 00       	mov    $0x0,%edx
f012be3c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012be42:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012be48:	29 d0                	sub    %edx,%eax
f012be4a:	89 c3                	mov    %eax,%ebx
f012be4c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012be53:	10 00 00 
f012be56:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012be5b:	0f b6 d0             	movzbl %al,%edx
f012be5e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012be64:	01 d0                	add    %edx,%eax
f012be66:	48                   	dec    %eax
f012be67:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012be6d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012be73:	ba 00 00 00 00       	mov    $0x0,%edx
f012be78:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012be7e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012be84:	29 d0                	sub    %edx,%eax
f012be86:	01 c3                	add    %eax,%ebx
f012be88:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012be8f:	10 00 00 
f012be92:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012be97:	0f b6 c0             	movzbl %al,%eax
f012be9a:	c1 e0 04             	shl    $0x4,%eax
f012be9d:	89 c2                	mov    %eax,%edx
f012be9f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012bea5:	01 d0                	add    %edx,%eax
f012bea7:	48                   	dec    %eax
f012bea8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012beae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012beb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012beb9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012bebf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bec5:	29 d0                	sub    %edx,%eax
f012bec7:	01 d8                	add    %ebx,%eax
f012bec9:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bece:	39 c1                	cmp    %eax,%ecx
f012bed0:	74 17                	je     f012bee9 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012bed2:	83 ec 04             	sub    $0x4,%esp
f012bed5:	68 3c bf 13 f0       	push   $0xf013bf3c
f012beda:	68 1e 0f 00 00       	push   $0xf1e
f012bedf:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bee4:	e8 12 43 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bee9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012beec:	e8 d8 09 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bef1:	29 c3                	sub    %eax,%ebx
f012bef3:	89 d8                	mov    %ebx,%eax
f012bef5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012befa:	74 17                	je     f012bf13 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012befc:	83 ec 04             	sub    $0x4,%esp
f012beff:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bf04:	68 20 0f 00 00       	push   $0xf20
f012bf09:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bf0e:	e8 e8 42 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bf13:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012bf1a:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bf1d:	e8 a7 09 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012bf22:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bf25:	83 ec 08             	sub    $0x8,%esp
f012bf28:	68 00 fc 2f 00       	push   $0x2ffc00
f012bf2d:	6a 00                	push   $0x0
f012bf2f:	e8 81 bb fd ff       	call   f0107ab5 <krealloc>
f012bf34:	83 c4 10             	add    $0x10,%esp
f012bf37:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bf3d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bf43:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bf48:	77 17                	ja     f012bf61 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf4a:	83 ec 04             	sub    $0x4,%esp
f012bf4d:	68 00 bf 13 f0       	push   $0xf013bf00
f012bf52:	68 27 0f 00 00       	push   $0xf27
f012bf57:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bf5c:	e8 9a 42 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bf61:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bf67:	89 c1                	mov    %eax,%ecx
f012bf69:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012bf70:	10 00 00 
f012bf73:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012bf79:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bf7e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012bf84:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bf8a:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf8f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012bf95:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bf9b:	29 d0                	sub    %edx,%eax
f012bf9d:	89 c3                	mov    %eax,%ebx
f012bf9f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012bfa6:	10 00 00 
f012bfa9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bfae:	0f b6 d0             	movzbl %al,%edx
f012bfb1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012bfb7:	01 d0                	add    %edx,%eax
f012bfb9:	48                   	dec    %eax
f012bfba:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012bfc0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012bfc6:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfcb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012bfd1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012bfd7:	29 d0                	sub    %edx,%eax
f012bfd9:	01 c3                	add    %eax,%ebx
f012bfdb:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012bfe2:	10 00 00 
f012bfe5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bfea:	0f b6 c0             	movzbl %al,%eax
f012bfed:	c1 e0 04             	shl    $0x4,%eax
f012bff0:	89 c2                	mov    %eax,%edx
f012bff2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012bff8:	01 d0                	add    %edx,%eax
f012bffa:	48                   	dec    %eax
f012bffb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c001:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c007:	ba 00 00 00 00       	mov    $0x0,%edx
f012c00c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c012:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c018:	29 d0                	sub    %edx,%eax
f012c01a:	01 d8                	add    %ebx,%eax
f012c01c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c021:	39 c1                	cmp    %eax,%ecx
f012c023:	74 17                	je     f012c03c <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c025:	83 ec 04             	sub    $0x4,%esp
f012c028:	68 3c bf 13 f0       	push   $0xf013bf3c
f012c02d:	68 29 0f 00 00       	push   $0xf29
f012c032:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c037:	e8 bf 41 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c03c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c03f:	e8 85 08 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c044:	29 c3                	sub    %eax,%ebx
f012c046:	89 d8                	mov    %ebx,%eax
f012c048:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c04d:	74 17                	je     f012c066 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c04f:	83 ec 04             	sub    $0x4,%esp
f012c052:	68 a4 b0 13 f0       	push   $0xf013b0a4
f012c057:	68 2b 0f 00 00       	push   $0xf2b
f012c05c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c061:	e8 95 41 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c066:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c06d:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c070:	e8 54 08 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c075:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c078:	83 ec 08             	sub    $0x8,%esp
f012c07b:	68 00 fc 2f 00       	push   $0x2ffc00
f012c080:	6a 00                	push   $0x0
f012c082:	e8 2e ba fd ff       	call   f0107ab5 <krealloc>
f012c087:	83 c4 10             	add    $0x10,%esp
f012c08a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c090:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c096:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c09b:	77 17                	ja     f012c0b4 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c09d:	83 ec 04             	sub    $0x4,%esp
f012c0a0:	68 00 bf 13 f0       	push   $0xf013bf00
f012c0a5:	68 32 0f 00 00       	push   $0xf32
f012c0aa:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c0af:	e8 47 41 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c0b4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c0ba:	89 c1                	mov    %eax,%ecx
f012c0bc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c0c3:	10 00 00 
f012c0c6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c0cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c0d1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c0d7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c0dd:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0e2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c0e8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c0ee:	29 d0                	sub    %edx,%eax
f012c0f0:	89 c3                	mov    %eax,%ebx
f012c0f2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c0f9:	10 00 00 
f012c0fc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c101:	0f b6 d0             	movzbl %al,%edx
f012c104:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c10a:	01 d0                	add    %edx,%eax
f012c10c:	48                   	dec    %eax
f012c10d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c113:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c119:	ba 00 00 00 00       	mov    $0x0,%edx
f012c11e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c124:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c12a:	29 d0                	sub    %edx,%eax
f012c12c:	01 c3                	add    %eax,%ebx
f012c12e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c135:	10 00 00 
f012c138:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c13d:	0f b6 c0             	movzbl %al,%eax
f012c140:	c1 e0 04             	shl    $0x4,%eax
f012c143:	89 c2                	mov    %eax,%edx
f012c145:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c14b:	01 d0                	add    %edx,%eax
f012c14d:	48                   	dec    %eax
f012c14e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c154:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c15a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c15f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c165:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c16b:	29 d0                	sub    %edx,%eax
f012c16d:	01 d8                	add    %ebx,%eax
f012c16f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c174:	39 c1                	cmp    %eax,%ecx
f012c176:	74 17                	je     f012c18f <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c178:	83 ec 04             	sub    $0x4,%esp
f012c17b:	68 3c bf 13 f0       	push   $0xf013bf3c
f012c180:	68 34 0f 00 00       	push   $0xf34
f012c185:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c18a:	e8 6c 40 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c18f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c192:	e8 32 07 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c197:	29 c3                	sub    %eax,%ebx
f012c199:	89 d8                	mov    %ebx,%eax
f012c19b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c1a0:	74 17                	je     f012c1b9 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c1a2:	83 ec 04             	sub    $0x4,%esp
f012c1a5:	68 6e bf 13 f0       	push   $0xf013bf6e
f012c1aa:	68 36 0f 00 00       	push   $0xf36
f012c1af:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c1b4:	e8 42 40 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c1b9:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c1c0:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c1c3:	e8 01 07 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c1c8:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c1cb:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c1d2:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c1d5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c1db:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c1e1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c1e7:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c1ea:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c1ec:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c1f2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c1f8:	01 c2                	add    %eax,%edx
f012c1fa:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c1fd:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c1ff:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c205:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c20b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c212:	eb 11                	jmp    f012c225 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c214:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c217:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c21d:	01 d0                	add    %edx,%eax
f012c21f:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c222:	ff 45 f4             	incl   -0xc(%ebp)
f012c225:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c22b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c22e:	7d e4                	jge    f012c214 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c230:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c236:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c23c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c242:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c248:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c24e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c255:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c25b:	01 d0                	add    %edx,%eax
f012c25d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c263:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c269:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c26f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c276:	eb 1b                	jmp    f012c293 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c278:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c27b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c282:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c288:	01 d0                	add    %edx,%eax
f012c28a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c290:	ff 45 f0             	incl   -0x10(%ebp)
f012c293:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c299:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c29c:	7d da                	jge    f012c278 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c29e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c2a4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c2aa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c2b1:	eb 17                	jmp    f012c2ca <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c2b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c2b6:	01 c0                	add    %eax,%eax
f012c2b8:	89 c2                	mov    %eax,%edx
f012c2ba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2c0:	01 d0                	add    %edx,%eax
f012c2c2:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c2c7:	ff 45 ec             	incl   -0x14(%ebp)
f012c2ca:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c2d0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c2d3:	7d de                	jge    f012c2b3 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c2d5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c2db:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c2e1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2e7:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c2ec:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c2f2:	01 c0                	add    %eax,%eax
f012c2f4:	89 c2                	mov    %eax,%edx
f012c2f6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2fc:	01 d0                	add    %edx,%eax
f012c2fe:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c303:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c309:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c30f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c316:	eb 49                	jmp    f012c361 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c318:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c31b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c322:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c328:	01 d0                	add    %edx,%eax
f012c32a:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c32d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c330:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c337:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c33d:	01 d0                	add    %edx,%eax
f012c33f:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c345:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c348:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c34f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c355:	01 d0                	add    %edx,%eax
f012c357:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c35e:	ff 45 e8             	incl   -0x18(%ebp)
f012c361:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c367:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c36a:	7d ac                	jge    f012c318 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c36c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c372:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c378:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c37e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c381:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c387:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c38d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c393:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c39a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c3a0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3ad:	01 d0                	add    %edx,%eax
f012c3af:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c3b2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c3b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3c5:	01 d0                	add    %edx,%eax
f012c3c7:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c3cd:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c3d3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3e0:	01 d0                	add    %edx,%eax
f012c3e2:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c3e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c3ef:	8a 00                	mov    (%eax),%al
f012c3f1:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c3f4:	75 17                	jne    f012c40d <test_krealloc+0xd04>
f012c3f6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c3fc:	89 c2                	mov    %eax,%edx
f012c3fe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c404:	01 d0                	add    %edx,%eax
f012c406:	8a 00                	mov    (%eax),%al
f012c408:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c40b:	74 17                	je     f012c424 <test_krealloc+0xd1b>
			panic(
f012c40d:	83 ec 04             	sub    $0x4,%esp
f012c410:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c415:	68 79 0f 00 00       	push   $0xf79
f012c41a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c41f:	e8 d7 3d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c424:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c42a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c430:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c436:	8a 00                	mov    (%eax),%al
f012c438:	3c 02                	cmp    $0x2,%al
f012c43a:	75 16                	jne    f012c452 <test_krealloc+0xd49>
f012c43c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c442:	89 c2                	mov    %eax,%edx
f012c444:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c44a:	01 d0                	add    %edx,%eax
f012c44c:	8a 00                	mov    (%eax),%al
f012c44e:	3c 02                	cmp    $0x2,%al
f012c450:	74 20                	je     f012c472 <test_krealloc+0xd69>
			panic(
f012c452:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c458:	8a 00                	mov    (%eax),%al
f012c45a:	0f be c0             	movsbl %al,%eax
f012c45d:	50                   	push   %eax
f012c45e:	68 cc bf 13 f0       	push   $0xf013bfcc
f012c463:	68 7f 0f 00 00       	push   $0xf7f
f012c468:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c46d:	e8 89 3d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c472:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c478:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c47e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c484:	8b 00                	mov    (%eax),%eax
f012c486:	83 f8 03             	cmp    $0x3,%eax
f012c489:	75 1c                	jne    f012c4a7 <test_krealloc+0xd9e>
f012c48b:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c491:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c498:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c49e:	01 d0                	add    %edx,%eax
f012c4a0:	8b 00                	mov    (%eax),%eax
f012c4a2:	83 f8 03             	cmp    $0x3,%eax
f012c4a5:	74 17                	je     f012c4be <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c4a7:	83 ec 04             	sub    $0x4,%esp
f012c4aa:	68 18 c0 13 f0       	push   $0xf013c018
f012c4af:	68 83 0f 00 00       	push   $0xf83
f012c4b4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c4b9:	e8 3d 3d fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012c4be:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4c4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c4ca:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c4d0:	8b 00                	mov    (%eax),%eax
f012c4d2:	83 f8 04             	cmp    $0x4,%eax
f012c4d5:	75 1c                	jne    f012c4f3 <test_krealloc+0xdea>
f012c4d7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c4dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c4e4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c4ea:	01 d0                	add    %edx,%eax
f012c4ec:	8b 00                	mov    (%eax),%eax
f012c4ee:	83 f8 04             	cmp    $0x4,%eax
f012c4f1:	74 17                	je     f012c50a <test_krealloc+0xe01>
			panic(
f012c4f3:	83 ec 04             	sub    $0x4,%esp
f012c4f6:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c4fb:	68 88 0f 00 00       	push   $0xf88
f012c500:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c505:	e8 f1 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c50a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c510:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c516:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c51c:	66 8b 00             	mov    (%eax),%ax
f012c51f:	66 83 f8 05          	cmp    $0x5,%ax
f012c523:	75 1b                	jne    f012c540 <test_krealloc+0xe37>
f012c525:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c52b:	01 c0                	add    %eax,%eax
f012c52d:	89 c2                	mov    %eax,%edx
f012c52f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c535:	01 d0                	add    %edx,%eax
f012c537:	66 8b 00             	mov    (%eax),%ax
f012c53a:	66 83 f8 05          	cmp    $0x5,%ax
f012c53e:	74 17                	je     f012c557 <test_krealloc+0xe4e>
			panic(
f012c540:	83 ec 04             	sub    $0x4,%esp
f012c543:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c548:	68 8d 0f 00 00       	push   $0xf8d
f012c54d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c552:	e8 a4 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c557:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c55d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c563:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c569:	66 8b 00             	mov    (%eax),%ax
f012c56c:	66 83 f8 06          	cmp    $0x6,%ax
f012c570:	75 1b                	jne    f012c58d <test_krealloc+0xe84>
f012c572:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c578:	01 c0                	add    %eax,%eax
f012c57a:	89 c2                	mov    %eax,%edx
f012c57c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c582:	01 d0                	add    %edx,%eax
f012c584:	66 8b 00             	mov    (%eax),%ax
f012c587:	66 83 f8 06          	cmp    $0x6,%ax
f012c58b:	74 17                	je     f012c5a4 <test_krealloc+0xe9b>
			panic(
f012c58d:	83 ec 04             	sub    $0x4,%esp
f012c590:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c595:	68 92 0f 00 00       	push   $0xf92
f012c59a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c59f:	e8 57 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c5a4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c5aa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c5b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5b6:	8a 00                	mov    (%eax),%al
f012c5b8:	3c 07                	cmp    $0x7,%al
f012c5ba:	75 1b                	jne    f012c5d7 <test_krealloc+0xece>
f012c5bc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c5c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c5c9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5cf:	01 d0                	add    %edx,%eax
f012c5d1:	8a 00                	mov    (%eax),%al
f012c5d3:	3c 07                	cmp    $0x7,%al
f012c5d5:	74 17                	je     f012c5ee <test_krealloc+0xee5>
			panic(
f012c5d7:	83 ec 04             	sub    $0x4,%esp
f012c5da:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c5df:	68 97 0f 00 00       	push   $0xf97
f012c5e4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c5e9:	e8 0d 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c5ee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5f4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c5f8:	66 83 f8 07          	cmp    $0x7,%ax
f012c5fc:	75 1f                	jne    f012c61d <test_krealloc+0xf14>
f012c5fe:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c604:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c60b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c611:	01 d0                	add    %edx,%eax
f012c613:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c617:	66 83 f8 07          	cmp    $0x7,%ax
f012c61b:	74 17                	je     f012c634 <test_krealloc+0xf2b>
			panic(
f012c61d:	83 ec 04             	sub    $0x4,%esp
f012c620:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c625:	68 9a 0f 00 00       	push   $0xf9a
f012c62a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c62f:	e8 c7 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c634:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c63a:	8b 40 04             	mov    0x4(%eax),%eax
f012c63d:	83 f8 07             	cmp    $0x7,%eax
f012c640:	75 1d                	jne    f012c65f <test_krealloc+0xf56>
f012c642:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c648:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c64f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c655:	01 d0                	add    %edx,%eax
f012c657:	8b 40 04             	mov    0x4(%eax),%eax
f012c65a:	83 f8 07             	cmp    $0x7,%eax
f012c65d:	74 17                	je     f012c676 <test_krealloc+0xf6d>
			panic(
f012c65f:	83 ec 04             	sub    $0x4,%esp
f012c662:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c667:	68 9d 0f 00 00       	push   $0xf9d
f012c66c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c671:	e8 85 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c676:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c67c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c682:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c688:	8a 00                	mov    (%eax),%al
f012c68a:	3c 08                	cmp    $0x8,%al
f012c68c:	75 1b                	jne    f012c6a9 <test_krealloc+0xfa0>
f012c68e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c694:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c69b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6a1:	01 d0                	add    %edx,%eax
f012c6a3:	8a 00                	mov    (%eax),%al
f012c6a5:	3c 08                	cmp    $0x8,%al
f012c6a7:	74 17                	je     f012c6c0 <test_krealloc+0xfb7>
			panic(
f012c6a9:	83 ec 04             	sub    $0x4,%esp
f012c6ac:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c6b1:	68 a2 0f 00 00       	push   $0xfa2
f012c6b6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c6bb:	e8 3b 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c6c0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6c6:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c6ca:	66 83 f8 08          	cmp    $0x8,%ax
f012c6ce:	75 1f                	jne    f012c6ef <test_krealloc+0xfe6>
f012c6d0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c6d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6e3:	01 d0                	add    %edx,%eax
f012c6e5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c6e9:	66 83 f8 08          	cmp    $0x8,%ax
f012c6ed:	74 17                	je     f012c706 <test_krealloc+0xffd>
			panic(
f012c6ef:	83 ec 04             	sub    $0x4,%esp
f012c6f2:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c6f7:	68 a5 0f 00 00       	push   $0xfa5
f012c6fc:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c701:	e8 f5 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c706:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c70c:	8b 40 04             	mov    0x4(%eax),%eax
f012c70f:	83 f8 08             	cmp    $0x8,%eax
f012c712:	75 1d                	jne    f012c731 <test_krealloc+0x1028>
f012c714:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c71a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c721:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c727:	01 d0                	add    %edx,%eax
f012c729:	8b 40 04             	mov    0x4(%eax),%eax
f012c72c:	83 f8 08             	cmp    $0x8,%eax
f012c72f:	74 17                	je     f012c748 <test_krealloc+0x103f>
			panic(
f012c731:	83 ec 04             	sub    $0x4,%esp
f012c734:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c739:	68 a8 0f 00 00       	push   $0xfa8
f012c73e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c743:	e8 b3 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c748:	e8 7c 01 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c74d:	89 c2                	mov    %eax,%edx
f012c74f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c752:	39 c2                	cmp    %eax,%edx
f012c754:	74 17                	je     f012c76d <test_krealloc+0x1064>
			panic(
f012c756:	83 ec 04             	sub    $0x4,%esp
f012c759:	68 4c c0 13 f0       	push   $0xf013c04c
f012c75e:	68 ac 0f 00 00       	push   $0xfac
f012c763:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c768:	e8 8e 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c76d:	83 ec 0c             	sub    $0xc,%esp
f012c770:	68 98 c0 13 f0       	push   $0xf013c098
f012c775:	e8 08 45 fd ff       	call   f0100c82 <cprintf>
f012c77a:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c77d:	e8 47 01 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c782:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c785:	e8 b2 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c78a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c790:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c796:	83 ec 08             	sub    $0x8,%esp
f012c799:	6a 00                	push   $0x0
f012c79b:	50                   	push   %eax
f012c79c:	e8 14 b3 fd ff       	call   f0107ab5 <krealloc>
f012c7a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c7a4:	e8 93 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c7a9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c7af:	74 17                	je     f012c7c8 <test_krealloc+0x10bf>
			panic(
f012c7b1:	83 ec 04             	sub    $0x4,%esp
f012c7b4:	68 bc c0 13 f0       	push   $0xf013c0bc
f012c7b9:	68 b9 0f 00 00       	push   $0xfb9
f012c7be:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c7c3:	e8 33 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c7c8:	e8 fc 00 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c7cd:	89 c2                	mov    %eax,%edx
f012c7cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c7d2:	29 c2                	sub    %eax,%edx
f012c7d4:	89 d0                	mov    %edx,%eax
f012c7d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7db:	74 17                	je     f012c7f4 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c7dd:	83 ec 04             	sub    $0x4,%esp
f012c7e0:	68 30 c1 13 f0       	push   $0xf013c130
f012c7e5:	68 bb 0f 00 00       	push   $0xfbb
f012c7ea:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c7ef:	e8 07 3a fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7f4:	e8 d0 00 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c7f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c7fc:	e8 3b 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c801:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c807:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c80d:	83 ec 08             	sub    $0x8,%esp
f012c810:	6a 00                	push   $0x0
f012c812:	50                   	push   %eax
f012c813:	e8 9d b2 fd ff       	call   f0107ab5 <krealloc>
f012c818:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c81b:	e8 1c 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c820:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c826:	74 17                	je     f012c83f <test_krealloc+0x1136>
			panic(
f012c828:	83 ec 04             	sub    $0x4,%esp
f012c82b:	68 bc c0 13 f0       	push   $0xf013c0bc
f012c830:	68 c4 0f 00 00       	push   $0xfc4
f012c835:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c83a:	e8 bc 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c83f:	e8 85 00 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c844:	89 c2                	mov    %eax,%edx
f012c846:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c849:	29 c2                	sub    %eax,%edx
f012c84b:	89 d0                	mov    %edx,%eax
f012c84d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c852:	74 17                	je     f012c86b <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c854:	83 ec 04             	sub    $0x4,%esp
f012c857:	68 30 c1 13 f0       	push   $0xf013c130
f012c85c:	68 c6 0f 00 00       	push   $0xfc6
f012c861:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c866:	e8 90 39 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c86b:	e8 59 00 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c870:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c873:	e8 c4 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c878:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c87e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c884:	83 ec 08             	sub    $0x8,%esp
f012c887:	6a 00                	push   $0x0
f012c889:	50                   	push   %eax
f012c88a:	e8 26 b2 fd ff       	call   f0107ab5 <krealloc>
f012c88f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c892:	e8 a5 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c897:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c89d:	74 17                	je     f012c8b6 <test_krealloc+0x11ad>
			panic(
f012c89f:	83 ec 04             	sub    $0x4,%esp
f012c8a2:	68 74 ac 13 f0       	push   $0xf013ac74
f012c8a7:	68 ce 0f 00 00       	push   $0xfce
f012c8ac:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c8b1:	e8 45 39 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c8b6:	e8 0e 00 fe ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c8bb:	89 c2                	mov    %eax,%edx
f012c8bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8c0:	29 c2                	sub    %eax,%edx
f012c8c2:	89 d0                	mov    %edx,%eax
f012c8c4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c8c9:	74 17                	je     f012c8e2 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c8cb:	83 ec 04             	sub    $0x4,%esp
f012c8ce:	68 30 c1 13 f0       	push   $0xf013c130
f012c8d3:	68 d0 0f 00 00       	push   $0xfd0
f012c8d8:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c8dd:	e8 19 39 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c8e2:	e8 e2 ff fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c8e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c8ea:	e8 4d 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c8ef:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c8f5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c8fb:	83 ec 08             	sub    $0x8,%esp
f012c8fe:	6a 00                	push   $0x0
f012c900:	50                   	push   %eax
f012c901:	e8 af b1 fd ff       	call   f0107ab5 <krealloc>
f012c906:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c909:	e8 2e 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c90e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c914:	74 17                	je     f012c92d <test_krealloc+0x1224>
			panic(
f012c916:	83 ec 04             	sub    $0x4,%esp
f012c919:	68 bc c0 13 f0       	push   $0xf013c0bc
f012c91e:	68 d8 0f 00 00       	push   $0xfd8
f012c923:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c928:	e8 ce 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c92d:	e8 97 ff fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012c932:	89 c2                	mov    %eax,%edx
f012c934:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c937:	29 c2                	sub    %eax,%edx
f012c939:	89 d0                	mov    %edx,%eax
f012c93b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c940:	74 17                	je     f012c959 <test_krealloc+0x1250>
			panic(
f012c942:	83 ec 04             	sub    $0x4,%esp
f012c945:	68 64 c1 13 f0       	push   $0xf013c164
f012c94a:	68 db 0f 00 00       	push   $0xfdb
f012c94f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c954:	e8 a2 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c959:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c960:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c967:	eb 48                	jmp    f012c9b1 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c969:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c96c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012c971:	83 ec 04             	sub    $0x4,%esp
f012c974:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c97a:	51                   	push   %ecx
f012c97b:	52                   	push   %edx
f012c97c:	50                   	push   %eax
f012c97d:	e8 58 a0 fd ff       	call   f01069da <get_page_table>
f012c982:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c985:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c98b:	85 c0                	test   %eax,%eax
f012c98d:	75 17                	jne    f012c9a6 <test_krealloc+0x129d>
					panic(
f012c98f:	83 ec 04             	sub    $0x4,%esp
f012c992:	68 5c b5 13 f0       	push   $0xf013b55c
f012c997:	68 e7 0f 00 00       	push   $0xfe7
f012c99c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c9a1:	e8 55 38 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c9a6:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c9ad:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c9b1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c9b5:	78 b2                	js     f012c969 <test_krealloc+0x1260>
f012c9b7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c9bb:	7f 09                	jg     f012c9c6 <test_krealloc+0x12bd>
f012c9bd:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c9c4:	76 a3                	jbe    f012c969 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c9c6:	83 ec 0c             	sub    $0xc,%esp
f012c9c9:	68 a3 c1 13 f0       	push   $0xf013c1a3
f012c9ce:	e8 af 42 fd ff       	call   f0100c82 <cprintf>
f012c9d3:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c9d6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c9dc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9e2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c9e9:	eb 21                	jmp    f012ca0c <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c9eb:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c9f1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c9f4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c9fa:	01 c8                	add    %ecx,%eax
f012c9fc:	8a 00                	mov    (%eax),%al
f012c9fe:	0f be c0             	movsbl %al,%eax
f012ca01:	01 d0                	add    %edx,%eax
f012ca03:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ca09:	ff 45 dc             	incl   -0x24(%ebp)
f012ca0c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ca12:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca15:	7d d4                	jge    f012c9eb <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ca17:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012ca1d:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ca23:	42                   	inc    %edx
f012ca24:	01 d2                	add    %edx,%edx
f012ca26:	39 d0                	cmp    %edx,%eax
f012ca28:	74 17                	je     f012ca41 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012ca2a:	83 ec 04             	sub    $0x4,%esp
f012ca2d:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ca32:	68 f9 0f 00 00       	push   $0xff9
f012ca37:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ca3c:	e8 ba 37 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ca41:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca47:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ca4d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ca54:	eb 25                	jmp    f012ca7b <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012ca56:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012ca5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ca5f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ca66:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ca6c:	01 c8                	add    %ecx,%eax
f012ca6e:	8b 00                	mov    (%eax),%eax
f012ca70:	01 d0                	add    %edx,%eax
f012ca72:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ca78:	ff 45 dc             	incl   -0x24(%ebp)
f012ca7b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ca81:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca84:	7d d0                	jge    f012ca56 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ca86:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012ca8c:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012ca92:	42                   	inc    %edx
f012ca93:	c1 e2 02             	shl    $0x2,%edx
f012ca96:	39 d0                	cmp    %edx,%eax
f012ca98:	74 17                	je     f012cab1 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ca9a:	83 ec 04             	sub    $0x4,%esp
f012ca9d:	68 ac c1 13 f0       	push   $0xf013c1ac
f012caa2:	68 03 10 00 00       	push   $0x1003
f012caa7:	68 5a ac 13 f0       	push   $0xf013ac5a
f012caac:	e8 4a 37 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012cab1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cab7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cabd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cac4:	eb 24                	jmp    f012caea <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012cac6:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cacc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cacf:	01 c0                	add    %eax,%eax
f012cad1:	89 c1                	mov    %eax,%ecx
f012cad3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cad9:	01 c8                	add    %ecx,%eax
f012cadb:	66 8b 00             	mov    (%eax),%ax
f012cade:	98                   	cwtl   
f012cadf:	01 d0                	add    %edx,%eax
f012cae1:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cae7:	ff 45 dc             	incl   -0x24(%ebp)
f012caea:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012caf0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012caf3:	7d d1                	jge    f012cac6 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012caf5:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cafb:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb01:	8d 48 01             	lea    0x1(%eax),%ecx
f012cb04:	89 c8                	mov    %ecx,%eax
f012cb06:	c1 e0 02             	shl    $0x2,%eax
f012cb09:	01 c8                	add    %ecx,%eax
f012cb0b:	39 c2                	cmp    %eax,%edx
f012cb0d:	74 17                	je     f012cb26 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012cb0f:	83 ec 04             	sub    $0x4,%esp
f012cb12:	68 ac c1 13 f0       	push   $0xf013c1ac
f012cb17:	68 0d 10 00 00       	push   $0x100d
f012cb1c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cb21:	e8 d5 36 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cb26:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cb2c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cb32:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cb39:	eb 70                	jmp    f012cbab <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012cb3b:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012cb41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb44:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb4b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb51:	01 c8                	add    %ecx,%eax
f012cb53:	8a 00                	mov    (%eax),%al
f012cb55:	0f be c0             	movsbl %al,%eax
f012cb58:	01 d0                	add    %edx,%eax
f012cb5a:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012cb60:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012cb66:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb69:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb70:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb76:	01 c8                	add    %ecx,%eax
f012cb78:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb7c:	98                   	cwtl   
f012cb7d:	01 d0                	add    %edx,%eax
f012cb7f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012cb85:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012cb8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb8e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb95:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb9b:	01 c8                	add    %ecx,%eax
f012cb9d:	8b 40 04             	mov    0x4(%eax),%eax
f012cba0:	01 d0                	add    %edx,%eax
f012cba2:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cba8:	ff 45 dc             	incl   -0x24(%ebp)
f012cbab:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbb1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cbb4:	7d 85                	jge    f012cb3b <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cbb6:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012cbbc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbc2:	8d 50 01             	lea    0x1(%eax),%edx
f012cbc5:	89 d0                	mov    %edx,%eax
f012cbc7:	01 c0                	add    %eax,%eax
f012cbc9:	01 d0                	add    %edx,%eax
f012cbcb:	01 c0                	add    %eax,%eax
f012cbcd:	01 d0                	add    %edx,%eax
f012cbcf:	39 c1                	cmp    %eax,%ecx
f012cbd1:	75 3a                	jne    f012cc0d <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cbd3:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012cbd9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbdf:	8d 50 01             	lea    0x1(%eax),%edx
f012cbe2:	89 d0                	mov    %edx,%eax
f012cbe4:	01 c0                	add    %eax,%eax
f012cbe6:	01 d0                	add    %edx,%eax
f012cbe8:	01 c0                	add    %eax,%eax
f012cbea:	01 d0                	add    %edx,%eax
f012cbec:	39 c1                	cmp    %eax,%ecx
f012cbee:	75 1d                	jne    f012cc0d <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cbf0:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012cbf6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbfc:	8d 50 01             	lea    0x1(%eax),%edx
f012cbff:	89 d0                	mov    %edx,%eax
f012cc01:	01 c0                	add    %eax,%eax
f012cc03:	01 d0                	add    %edx,%eax
f012cc05:	01 c0                	add    %eax,%eax
f012cc07:	01 d0                	add    %edx,%eax
f012cc09:	39 c1                	cmp    %eax,%ecx
f012cc0b:	74 17                	je     f012cc24 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012cc0d:	83 ec 04             	sub    $0x4,%esp
f012cc10:	68 ac c1 13 f0       	push   $0xf013c1ac
f012cc15:	68 1b 10 00 00       	push   $0x101b
f012cc1a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cc1f:	e8 d7 35 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cc24:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012cc2b:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cc2e:	e8 96 fc fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cc33:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cc36:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc3c:	83 ec 08             	sub    $0x8,%esp
f012cc3f:	68 00 3c 00 00       	push   $0x3c00
f012cc44:	50                   	push   %eax
f012cc45:	e8 6b ae fd ff       	call   f0107ab5 <krealloc>
f012cc4a:	83 c4 10             	add    $0x10,%esp
f012cc4d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc53:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cc59:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc5e:	77 17                	ja     f012cc77 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc60:	83 ec 04             	sub    $0x4,%esp
f012cc63:	68 00 bf 13 f0       	push   $0xf013bf00
f012cc68:	68 27 10 00 00       	push   $0x1027
f012cc6d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cc72:	e8 84 35 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cc77:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc7d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cc83:	74 17                	je     f012cc9c <test_krealloc+0x1593>
			panic(
f012cc85:	83 ec 04             	sub    $0x4,%esp
f012cc88:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012cc8d:	68 2a 10 00 00       	push   $0x102a
f012cc92:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cc97:	e8 5f 35 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cc9c:	e8 28 fc fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cca1:	89 c2                	mov    %eax,%edx
f012cca3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cca6:	39 c2                	cmp    %eax,%edx
f012cca8:	74 17                	je     f012ccc1 <test_krealloc+0x15b8>
			panic(
f012ccaa:	83 ec 04             	sub    $0x4,%esp
f012ccad:	68 50 c2 13 f0       	push   $0xf013c250
f012ccb2:	68 2d 10 00 00       	push   $0x102d
f012ccb7:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ccbc:	e8 3a 35 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ccc1:	e8 03 fc fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ccc6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ccc9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cccf:	83 ec 08             	sub    $0x8,%esp
f012ccd2:	68 00 fc 0f 00       	push   $0xffc00
f012ccd7:	50                   	push   %eax
f012ccd8:	e8 d8 ad fd ff       	call   f0107ab5 <krealloc>
f012ccdd:	83 c4 10             	add    $0x10,%esp
f012cce0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cce6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ccec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ccf1:	77 17                	ja     f012cd0a <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ccf3:	83 ec 04             	sub    $0x4,%esp
f012ccf6:	68 00 bf 13 f0       	push   $0xf013bf00
f012ccfb:	68 33 10 00 00       	push   $0x1033
f012cd00:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd05:	e8 f1 34 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012cd0a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd10:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cd16:	74 17                	je     f012cd2f <test_krealloc+0x1626>
			panic(
f012cd18:	83 ec 04             	sub    $0x4,%esp
f012cd1b:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012cd20:	68 36 10 00 00       	push   $0x1036
f012cd25:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd2a:	e8 cc 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cd2f:	e8 95 fb fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cd34:	89 c2                	mov    %eax,%edx
f012cd36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd39:	39 c2                	cmp    %eax,%edx
f012cd3b:	74 17                	je     f012cd54 <test_krealloc+0x164b>
			panic(
f012cd3d:	83 ec 04             	sub    $0x4,%esp
f012cd40:	68 50 c2 13 f0       	push   $0xf013c250
f012cd45:	68 39 10 00 00       	push   $0x1039
f012cd4a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd4f:	e8 a7 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cd54:	e8 70 fb fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cd59:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cd5c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd62:	83 ec 08             	sub    $0x8,%esp
f012cd65:	68 00 fc 0f 00       	push   $0xffc00
f012cd6a:	50                   	push   %eax
f012cd6b:	e8 45 ad fd ff       	call   f0107ab5 <krealloc>
f012cd70:	83 c4 10             	add    $0x10,%esp
f012cd73:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd79:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cd7f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd84:	77 17                	ja     f012cd9d <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd86:	83 ec 04             	sub    $0x4,%esp
f012cd89:	68 00 bf 13 f0       	push   $0xf013bf00
f012cd8e:	68 3f 10 00 00       	push   $0x103f
f012cd93:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd98:	e8 5e 34 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cd9d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cda3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cda9:	74 17                	je     f012cdc2 <test_krealloc+0x16b9>
			panic(
f012cdab:	83 ec 04             	sub    $0x4,%esp
f012cdae:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012cdb3:	68 42 10 00 00       	push   $0x1042
f012cdb8:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cdbd:	e8 39 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cdc2:	e8 02 fb fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cdc7:	89 c2                	mov    %eax,%edx
f012cdc9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cdcc:	39 c2                	cmp    %eax,%edx
f012cdce:	74 17                	je     f012cde7 <test_krealloc+0x16de>
			panic(
f012cdd0:	83 ec 04             	sub    $0x4,%esp
f012cdd3:	68 50 c2 13 f0       	push   $0xf013c250
f012cdd8:	68 45 10 00 00       	push   $0x1045
f012cddd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cde2:	e8 14 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cde7:	e8 dd fa fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cdec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cdef:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cdf5:	83 ec 08             	sub    $0x8,%esp
f012cdf8:	68 00 fc 0f 00       	push   $0xffc00
f012cdfd:	50                   	push   %eax
f012cdfe:	e8 b2 ac fd ff       	call   f0107ab5 <krealloc>
f012ce03:	83 c4 10             	add    $0x10,%esp
f012ce06:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce0c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ce12:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce17:	77 17                	ja     f012ce30 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce19:	83 ec 04             	sub    $0x4,%esp
f012ce1c:	68 00 bf 13 f0       	push   $0xf013bf00
f012ce21:	68 4d 10 00 00       	push   $0x104d
f012ce26:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ce2b:	e8 cb 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012ce30:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ce36:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ce3c:	74 17                	je     f012ce55 <test_krealloc+0x174c>
			panic(
f012ce3e:	83 ec 04             	sub    $0x4,%esp
f012ce41:	68 94 c2 13 f0       	push   $0xf013c294
f012ce46:	68 50 10 00 00       	push   $0x1050
f012ce4b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ce50:	e8 a6 33 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ce55:	e8 6f fa fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ce5a:	89 c2                	mov    %eax,%edx
f012ce5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce5f:	39 c2                	cmp    %eax,%edx
f012ce61:	74 17                	je     f012ce7a <test_krealloc+0x1771>
			panic(
f012ce63:	83 ec 04             	sub    $0x4,%esp
f012ce66:	68 50 c2 13 f0       	push   $0xf013c250
f012ce6b:	68 53 10 00 00       	push   $0x1053
f012ce70:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ce75:	e8 81 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012ce7a:	83 ec 0c             	sub    $0xc,%esp
f012ce7d:	68 73 b4 13 f0       	push   $0xf013b473
f012ce82:	e8 fb 3d fd ff       	call   f0100c82 <cprintf>
f012ce87:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ce8a:	e8 3a fa fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ce8f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012ce92:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ce98:	83 ec 08             	sub    $0x8,%esp
f012ce9b:	68 00 18 10 00       	push   $0x101800
f012cea0:	50                   	push   %eax
f012cea1:	e8 0f ac fd ff       	call   f0107ab5 <krealloc>
f012cea6:	83 c4 10             	add    $0x10,%esp
f012cea9:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ceac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ceaf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ceb4:	77 17                	ja     f012cecd <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ceb6:	83 ec 04             	sub    $0x4,%esp
f012ceb9:	68 00 bf 13 f0       	push   $0xf013bf00
f012cebe:	68 5c 10 00 00       	push   $0x105c
f012cec3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cec8:	e8 2e 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cecd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ced3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ced6:	74 17                	je     f012ceef <test_krealloc+0x17e6>
			panic(
f012ced8:	83 ec 04             	sub    $0x4,%esp
f012cedb:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012cee0:	68 5f 10 00 00       	push   $0x105f
f012cee5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ceea:	e8 0c 33 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ceef:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cef2:	e8 d2 f9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cef7:	29 c3                	sub    %eax,%ebx
f012cef9:	89 d8                	mov    %ebx,%eax
f012cefb:	83 f8 02             	cmp    $0x2,%eax
f012cefe:	74 17                	je     f012cf17 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf00:	83 ec 04             	sub    $0x4,%esp
f012cf03:	68 70 c3 13 f0       	push   $0xf013c370
f012cf08:	68 61 10 00 00       	push   $0x1061
f012cf0d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf12:	e8 e4 32 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012cf17:	e8 ad f9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cf1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cf1f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf25:	83 ec 08             	sub    $0x8,%esp
f012cf28:	68 00 fc 3f 00       	push   $0x3ffc00
f012cf2d:	50                   	push   %eax
f012cf2e:	e8 82 ab fd ff       	call   f0107ab5 <krealloc>
f012cf33:	83 c4 10             	add    $0x10,%esp
f012cf36:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf41:	77 17                	ja     f012cf5a <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf43:	83 ec 04             	sub    $0x4,%esp
f012cf46:	68 00 bf 13 f0       	push   $0xf013bf00
f012cf4b:	68 67 10 00 00       	push   $0x1067
f012cf50:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf55:	e8 a1 32 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012cf5a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cf63:	74 17                	je     f012cf7c <test_krealloc+0x1873>
			panic(
f012cf65:	83 ec 04             	sub    $0x4,%esp
f012cf68:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012cf6d:	68 6a 10 00 00       	push   $0x106a
f012cf72:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf77:	e8 7f 32 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012cf7c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf7f:	e8 45 f9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cf84:	29 c3                	sub    %eax,%ebx
f012cf86:	89 d8                	mov    %ebx,%eax
f012cf88:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cf8d:	74 17                	je     f012cfa6 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf8f:	83 ec 04             	sub    $0x4,%esp
f012cf92:	68 70 c3 13 f0       	push   $0xf013c370
f012cf97:	68 6d 10 00 00       	push   $0x106d
f012cf9c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cfa1:	e8 55 32 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012cfa6:	83 ec 0c             	sub    $0xc,%esp
f012cfa9:	68 b8 b4 13 f0       	push   $0xf013b4b8
f012cfae:	e8 cf 3c fd ff       	call   f0100c82 <cprintf>
f012cfb3:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012cfb6:	e8 0e f9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012cfbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012cfbe:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfc4:	83 ec 08             	sub    $0x8,%esp
f012cfc7:	68 00 fc 9f 00       	push   $0x9ffc00
f012cfcc:	50                   	push   %eax
f012cfcd:	e8 e3 aa fd ff       	call   f0107ab5 <krealloc>
f012cfd2:	83 c4 10             	add    $0x10,%esp
f012cfd5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfd8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cfdb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfe0:	77 17                	ja     f012cff9 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfe2:	83 ec 04             	sub    $0x4,%esp
f012cfe5:	68 00 bf 13 f0       	push   $0xf013bf00
f012cfea:	68 78 10 00 00       	push   $0x1078
f012cfef:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cff4:	e8 02 32 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012cff9:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d000:	10 00 00 
f012d003:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d009:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d00e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d014:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d01a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d01f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d025:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d02b:	29 d0                	sub    %edx,%eax
f012d02d:	89 c1                	mov    %eax,%ecx
f012d02f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d036:	10 00 00 
f012d039:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d03e:	0f b6 d0             	movzbl %al,%edx
f012d041:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d047:	01 d0                	add    %edx,%eax
f012d049:	48                   	dec    %eax
f012d04a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d050:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d056:	ba 00 00 00 00       	mov    $0x0,%edx
f012d05b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d061:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d067:	29 d0                	sub    %edx,%eax
f012d069:	01 c1                	add    %eax,%ecx
f012d06b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d072:	10 00 00 
f012d075:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d07a:	0f b6 c0             	movzbl %al,%eax
f012d07d:	c1 e0 04             	shl    $0x4,%eax
f012d080:	89 c2                	mov    %eax,%edx
f012d082:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d088:	01 d0                	add    %edx,%eax
f012d08a:	48                   	dec    %eax
f012d08b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d091:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d097:	ba 00 00 00 00       	mov    $0x0,%edx
f012d09c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d0a2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d0a8:	29 d0                	sub    %edx,%eax
f012d0aa:	01 c8                	add    %ecx,%eax
f012d0ac:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d0b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0b5:	39 c2                	cmp    %eax,%edx
f012d0b7:	74 18                	je     f012d0d1 <test_krealloc+0x19c8>
			panic(
f012d0b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0bc:	50                   	push   %eax
f012d0bd:	68 a4 c3 13 f0       	push   $0xf013c3a4
f012d0c2:	68 7c 10 00 00       	push   $0x107c
f012d0c7:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d0cc:	e8 2a 31 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d0d1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d0d7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d0da:	75 17                	jne    f012d0f3 <test_krealloc+0x19ea>
			panic(
f012d0dc:	83 ec 04             	sub    $0x4,%esp
f012d0df:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012d0e4:	68 7f 10 00 00       	push   $0x107f
f012d0e9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d0ee:	e8 08 31 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d0f3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d0f6:	e8 ce f7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d0fb:	29 c3                	sub    %eax,%ebx
f012d0fd:	89 d8                	mov    %ebx,%eax
f012d0ff:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d104:	74 17                	je     f012d11d <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d106:	83 ec 04             	sub    $0x4,%esp
f012d109:	68 70 c3 13 f0       	push   $0xf013c370
f012d10e:	68 82 10 00 00       	push   $0x1082
f012d113:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d118:	e8 de 30 fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012d11d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d120:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d126:	e8 9e f7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d12b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d12e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d134:	83 ec 08             	sub    $0x8,%esp
f012d137:	68 00 fc 5f 00       	push   $0x5ffc00
f012d13c:	50                   	push   %eax
f012d13d:	e8 73 a9 fd ff       	call   f0107ab5 <krealloc>
f012d142:	83 c4 10             	add    $0x10,%esp
f012d145:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d148:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d14b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d150:	77 17                	ja     f012d169 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d152:	83 ec 04             	sub    $0x4,%esp
f012d155:	68 00 bf 13 f0       	push   $0xf013bf00
f012d15a:	68 8b 10 00 00       	push   $0x108b
f012d15f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d164:	e8 92 30 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[6])
f012d169:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d16f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d172:	74 17                	je     f012d18b <test_krealloc+0x1a82>
			panic(
f012d174:	83 ec 04             	sub    $0x4,%esp
f012d177:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012d17c:	68 8e 10 00 00       	push   $0x108e
f012d181:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d186:	e8 70 30 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d18b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d18e:	e8 36 f7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d193:	29 c3                	sub    %eax,%ebx
f012d195:	89 d8                	mov    %ebx,%eax
f012d197:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d19c:	74 17                	je     f012d1b5 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d19e:	83 ec 04             	sub    $0x4,%esp
f012d1a1:	68 70 c3 13 f0       	push   $0xf013c370
f012d1a6:	68 91 10 00 00       	push   $0x1091
f012d1ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d1b0:	e8 46 30 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d1b5:	e8 0f f7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d1ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d1bd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d1c3:	83 ec 08             	sub    $0x8,%esp
f012d1c6:	68 00 fc 3f 01       	push   $0x13ffc00
f012d1cb:	50                   	push   %eax
f012d1cc:	e8 e4 a8 fd ff       	call   f0107ab5 <krealloc>
f012d1d1:	83 c4 10             	add    $0x10,%esp
f012d1d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d1d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1da:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1df:	77 17                	ja     f012d1f8 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1e1:	83 ec 04             	sub    $0x4,%esp
f012d1e4:	68 00 bf 13 f0       	push   $0xf013bf00
f012d1e9:	68 98 10 00 00       	push   $0x1098
f012d1ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d1f3:	e8 03 30 fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012d1f8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d1fe:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d201:	75 17                	jne    f012d21a <test_krealloc+0x1b11>
			panic(
f012d203:	83 ec 04             	sub    $0x4,%esp
f012d206:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012d20b:	68 9b 10 00 00       	push   $0x109b
f012d210:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d215:	e8 e1 2f fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d21a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d221:	10 00 00 
f012d224:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d22a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d22f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d235:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d23b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d240:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d246:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d24c:	29 d0                	sub    %edx,%eax
f012d24e:	89 c1                	mov    %eax,%ecx
f012d250:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d257:	10 00 00 
f012d25a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d25f:	0f b6 d0             	movzbl %al,%edx
f012d262:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d268:	01 d0                	add    %edx,%eax
f012d26a:	48                   	dec    %eax
f012d26b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d271:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d277:	ba 00 00 00 00       	mov    $0x0,%edx
f012d27c:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d282:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d288:	29 d0                	sub    %edx,%eax
f012d28a:	01 c1                	add    %eax,%ecx
f012d28c:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d293:	10 00 00 
f012d296:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d29b:	0f b6 c0             	movzbl %al,%eax
f012d29e:	c1 e0 04             	shl    $0x4,%eax
f012d2a1:	89 c2                	mov    %eax,%edx
f012d2a3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d2a9:	01 d0                	add    %edx,%eax
f012d2ab:	48                   	dec    %eax
f012d2ac:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d2b2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d2bd:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d2c3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2c9:	29 d0                	sub    %edx,%eax
f012d2cb:	01 c8                	add    %ecx,%eax
f012d2cd:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d2d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2d6:	39 c2                	cmp    %eax,%edx
f012d2d8:	74 17                	je     f012d2f1 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d2da:	83 ec 04             	sub    $0x4,%esp
f012d2dd:	68 6c c4 13 f0       	push   $0xf013c46c
f012d2e2:	68 9d 10 00 00       	push   $0x109d
f012d2e7:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d2ec:	e8 0a 2f fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d2f1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2f4:	e8 d0 f5 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d2f9:	29 c3                	sub    %eax,%ebx
f012d2fb:	89 d8                	mov    %ebx,%eax
f012d2fd:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d302:	74 17                	je     f012d31b <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d304:	83 ec 04             	sub    $0x4,%esp
f012d307:	68 70 c3 13 f0       	push   $0xf013c370
f012d30c:	68 a0 10 00 00       	push   $0x10a0
f012d311:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d316:	e8 e0 2e fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012d31b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d31e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d324:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d32a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d330:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d337:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d33a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d341:	eb 21                	jmp    f012d364 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d343:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d349:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d34c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d352:	01 c8                	add    %ecx,%eax
f012d354:	8a 00                	mov    (%eax),%al
f012d356:	0f be c0             	movsbl %al,%eax
f012d359:	01 d0                	add    %edx,%eax
f012d35b:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d361:	ff 45 d8             	incl   -0x28(%ebp)
f012d364:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d36a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d36d:	7d d4                	jge    f012d343 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d36f:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d375:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d37b:	42                   	inc    %edx
f012d37c:	01 d2                	add    %edx,%edx
f012d37e:	39 d0                	cmp    %edx,%eax
f012d380:	74 17                	je     f012d399 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d382:	83 ec 04             	sub    $0x4,%esp
f012d385:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012d38a:	68 ae 10 00 00       	push   $0x10ae
f012d38f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d394:	e8 62 2e fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d399:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d39f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d3a5:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d3ac:	00 00 00 
		sums[1] = 0;
f012d3af:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d3b6:	00 00 00 
		sums[2] = 0;
f012d3b9:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d3c0:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d3c3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d3ca:	eb 70                	jmp    f012d43c <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d3cc:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d3d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3d5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3dc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3e2:	01 c8                	add    %ecx,%eax
f012d3e4:	8a 00                	mov    (%eax),%al
f012d3e6:	0f be c0             	movsbl %al,%eax
f012d3e9:	01 d0                	add    %edx,%eax
f012d3eb:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d3f1:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d3f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3fa:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d401:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d407:	01 c8                	add    %ecx,%eax
f012d409:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d40d:	98                   	cwtl   
f012d40e:	01 d0                	add    %edx,%eax
f012d410:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d416:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d41c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d41f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d426:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d42c:	01 c8                	add    %ecx,%eax
f012d42e:	8b 40 04             	mov    0x4(%eax),%eax
f012d431:	01 d0                	add    %edx,%eax
f012d433:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d439:	ff 45 d8             	incl   -0x28(%ebp)
f012d43c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d442:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d445:	7d 85                	jge    f012d3cc <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d447:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d44d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d453:	8d 50 01             	lea    0x1(%eax),%edx
f012d456:	89 d0                	mov    %edx,%eax
f012d458:	01 c0                	add    %eax,%eax
f012d45a:	01 d0                	add    %edx,%eax
f012d45c:	01 c0                	add    %eax,%eax
f012d45e:	01 d0                	add    %edx,%eax
f012d460:	39 c1                	cmp    %eax,%ecx
f012d462:	75 3a                	jne    f012d49e <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d464:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d46a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d470:	8d 50 01             	lea    0x1(%eax),%edx
f012d473:	89 d0                	mov    %edx,%eax
f012d475:	01 c0                	add    %eax,%eax
f012d477:	01 d0                	add    %edx,%eax
f012d479:	01 c0                	add    %eax,%eax
f012d47b:	01 d0                	add    %edx,%eax
f012d47d:	39 c1                	cmp    %eax,%ecx
f012d47f:	75 1d                	jne    f012d49e <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d481:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d487:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d48d:	8d 50 01             	lea    0x1(%eax),%edx
f012d490:	89 d0                	mov    %edx,%eax
f012d492:	01 c0                	add    %eax,%eax
f012d494:	01 d0                	add    %edx,%eax
f012d496:	01 c0                	add    %eax,%eax
f012d498:	01 d0                	add    %edx,%eax
f012d49a:	39 c1                	cmp    %eax,%ecx
f012d49c:	74 17                	je     f012d4b5 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d49e:	83 ec 04             	sub    $0x4,%esp
f012d4a1:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012d4a6:	68 c0 10 00 00       	push   $0x10c0
f012d4ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d4b0:	e8 46 2d fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d4b5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d4bb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d4c1:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d4c8:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4cb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d4d2:	eb 24                	jmp    f012d4f8 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d4d4:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d4da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d4dd:	01 c0                	add    %eax,%eax
f012d4df:	89 c1                	mov    %eax,%ecx
f012d4e1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d4e7:	01 c8                	add    %ecx,%eax
f012d4e9:	66 8b 00             	mov    (%eax),%ax
f012d4ec:	98                   	cwtl   
f012d4ed:	01 d0                	add    %edx,%eax
f012d4ef:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4f5:	ff 45 d8             	incl   -0x28(%ebp)
f012d4f8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d4fe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d501:	7d d1                	jge    f012d4d4 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d503:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d509:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d50f:	8d 48 01             	lea    0x1(%eax),%ecx
f012d512:	89 c8                	mov    %ecx,%eax
f012d514:	c1 e0 02             	shl    $0x2,%eax
f012d517:	01 c8                	add    %ecx,%eax
f012d519:	39 c2                	cmp    %eax,%edx
f012d51b:	74 17                	je     f012d534 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d51d:	83 ec 04             	sub    $0x4,%esp
f012d520:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012d525:	68 ca 10 00 00       	push   $0x10ca
f012d52a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d52f:	e8 c7 2c fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d534:	e8 90 f3 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d539:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d53c:	e8 fb 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d541:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d547:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d54d:	83 ec 08             	sub    $0x8,%esp
f012d550:	6a 00                	push   $0x0
f012d552:	50                   	push   %eax
f012d553:	e8 5d a5 fd ff       	call   f0107ab5 <krealloc>
f012d558:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d55b:	e8 dc 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d560:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d566:	74 17                	je     f012d57f <test_krealloc+0x1e76>
			panic(
f012d568:	83 ec 04             	sub    $0x4,%esp
f012d56b:	68 74 ac 13 f0       	push   $0xf013ac74
f012d570:	68 d2 10 00 00       	push   $0x10d2
f012d575:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d57a:	e8 7c 2c fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d57f:	e8 45 f3 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d584:	89 c2                	mov    %eax,%edx
f012d586:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d589:	29 c2                	sub    %eax,%edx
f012d58b:	89 d0                	mov    %edx,%eax
f012d58d:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d592:	74 17                	je     f012d5ab <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d594:	83 ec 04             	sub    $0x4,%esp
f012d597:	68 30 c1 13 f0       	push   $0xf013c130
f012d59c:	68 d4 10 00 00       	push   $0x10d4
f012d5a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d5a6:	e8 50 2c fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d5ab:	e8 19 f3 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d5b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5b3:	e8 84 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d5b8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d5be:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d5c4:	83 ec 0c             	sub    $0xc,%esp
f012d5c7:	50                   	push   %eax
f012d5c8:	e8 f3 a2 fd ff       	call   f01078c0 <kfree>
f012d5cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5d0:	e8 67 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d5d5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d5db:	74 17                	je     f012d5f4 <test_krealloc+0x1eeb>
			panic(
f012d5dd:	83 ec 04             	sub    $0x4,%esp
f012d5e0:	68 74 ac 13 f0       	push   $0xf013ac74
f012d5e5:	68 dc 10 00 00       	push   $0x10dc
f012d5ea:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d5ef:	e8 07 2c fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d5f4:	e8 d0 f2 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d5f9:	89 c2                	mov    %eax,%edx
f012d5fb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5fe:	29 c2                	sub    %eax,%edx
f012d600:	89 d0                	mov    %edx,%eax
f012d602:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d607:	74 17                	je     f012d620 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d609:	83 ec 04             	sub    $0x4,%esp
f012d60c:	68 30 c1 13 f0       	push   $0xf013c130
f012d611:	68 de 10 00 00       	push   $0x10de
f012d616:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d61b:	e8 db 2b fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d620:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d627:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d62e:	eb 48                	jmp    f012d678 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d630:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d633:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012d638:	83 ec 04             	sub    $0x4,%esp
f012d63b:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d641:	51                   	push   %ecx
f012d642:	52                   	push   %edx
f012d643:	50                   	push   %eax
f012d644:	e8 91 93 fd ff       	call   f01069da <get_page_table>
f012d649:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d64c:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d652:	85 c0                	test   %eax,%eax
f012d654:	75 17                	jne    f012d66d <test_krealloc+0x1f64>
					panic(
f012d656:	83 ec 04             	sub    $0x4,%esp
f012d659:	68 5c b5 13 f0       	push   $0xf013b55c
f012d65e:	68 eb 10 00 00       	push   $0x10eb
f012d663:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d668:	e8 8e 2b fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d66d:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d674:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d678:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d67c:	78 b2                	js     f012d630 <test_krealloc+0x1f27>
f012d67e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d682:	7f 09                	jg     f012d68d <test_krealloc+0x1f84>
f012d684:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d68b:	76 a3                	jbe    f012d630 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d68d:	83 ec 0c             	sub    $0xc,%esp
f012d690:	68 3e ae 13 f0       	push   $0xf013ae3e
f012d695:	e8 e8 35 fd ff       	call   f0100c82 <cprintf>
f012d69a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d69d:	83 ec 0c             	sub    $0xc,%esp
f012d6a0:	68 cc c4 13 f0       	push   $0xf013c4cc
f012d6a5:	e8 d8 35 fd ff       	call   f0100c82 <cprintf>
f012d6aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d6ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d6b2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d6b5:	5b                   	pop    %ebx
f012d6b6:	5f                   	pop    %edi
f012d6b7:	5d                   	pop    %ebp
f012d6b8:	c3                   	ret    

f012d6b9 <test_krealloc_BF>:


int test_krealloc_BF() {
f012d6b9:	55                   	push   %ebp
f012d6ba:	89 e5                	mov    %esp,%ebp
f012d6bc:	57                   	push   %edi
f012d6bd:	53                   	push   %ebx
f012d6be:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d6c4:	83 ec 0c             	sub    $0xc,%esp
f012d6c7:	68 9c ab 13 f0       	push   $0xf013ab9c
f012d6cc:	e8 b1 35 fd ff       	call   f0100c82 <cprintf>
f012d6d1:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d6d4:	83 ec 0c             	sub    $0xc,%esp
f012d6d7:	68 cc ab 13 f0       	push   $0xf013abcc
f012d6dc:	e8 a1 35 fd ff       	call   f0100c82 <cprintf>
f012d6e1:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d6e4:	83 ec 0c             	sub    $0xc,%esp
f012d6e7:	68 9c ab 13 f0       	push   $0xf013ab9c
f012d6ec:	e8 91 35 fd ff       	call   f0100c82 <cprintf>
f012d6f1:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d6f4:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d6f8:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d6fc:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d702:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d708:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d70f:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d716:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d71c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d721:	b8 00 00 00 00       	mov    $0x0,%eax
f012d726:	89 d7                	mov    %edx,%edi
f012d728:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d72a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d731:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d737:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d73c:	b8 00 00 00 00       	mov    $0x0,%eax
f012d741:	89 d7                	mov    %edx,%edi
f012d743:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d745:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d74b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d750:	b8 00 00 00 00       	mov    $0x0,%eax
f012d755:	89 d7                	mov    %edx,%edi
f012d757:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d759:	e8 6b f1 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d75e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d761:	83 ec 08             	sub    $0x8,%esp
f012d764:	68 00 fc 0f 00       	push   $0xffc00
f012d769:	6a 00                	push   $0x0
f012d76b:	e8 45 a3 fd ff       	call   f0107ab5 <krealloc>
f012d770:	83 c4 10             	add    $0x10,%esp
f012d773:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d779:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d77f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d784:	77 17                	ja     f012d79d <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d786:	83 ec 04             	sub    $0x4,%esp
f012d789:	68 00 bf 13 f0       	push   $0xf013bf00
f012d78e:	68 1a 11 00 00       	push   $0x111a
f012d793:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d798:	e8 5e 2a fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d79d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d7a3:	89 c1                	mov    %eax,%ecx
f012d7a5:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d7ac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d7af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d7b4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d7b7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d7ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7bf:	f7 75 b4             	divl   -0x4c(%ebp)
f012d7c2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d7c5:	29 d0                	sub    %edx,%eax
f012d7c7:	89 c3                	mov    %eax,%ebx
f012d7c9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d7d0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d7d5:	0f b6 d0             	movzbl %al,%edx
f012d7d8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d7db:	01 d0                	add    %edx,%eax
f012d7dd:	48                   	dec    %eax
f012d7de:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d7e1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d7e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7e9:	f7 75 ac             	divl   -0x54(%ebp)
f012d7ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d7ef:	29 d0                	sub    %edx,%eax
f012d7f1:	01 c3                	add    %eax,%ebx
f012d7f3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d7fa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d7ff:	0f b6 c0             	movzbl %al,%eax
f012d802:	c1 e0 04             	shl    $0x4,%eax
f012d805:	89 c2                	mov    %eax,%edx
f012d807:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d80a:	01 d0                	add    %edx,%eax
f012d80c:	48                   	dec    %eax
f012d80d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d810:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d813:	ba 00 00 00 00       	mov    $0x0,%edx
f012d818:	f7 75 a4             	divl   -0x5c(%ebp)
f012d81b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d81e:	29 d0                	sub    %edx,%eax
f012d820:	01 d8                	add    %ebx,%eax
f012d822:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d827:	39 c1                	cmp    %eax,%ecx
f012d829:	74 17                	je     f012d842 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d82b:	83 ec 04             	sub    $0x4,%esp
f012d82e:	68 3c bf 13 f0       	push   $0xf013bf3c
f012d833:	68 1c 11 00 00       	push   $0x111c
f012d838:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d83d:	e8 b9 29 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d842:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d845:	e8 7f f0 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d84a:	29 c3                	sub    %eax,%ebx
f012d84c:	89 d8                	mov    %ebx,%eax
f012d84e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d853:	74 17                	je     f012d86c <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d855:	83 ec 04             	sub    $0x4,%esp
f012d858:	68 6e bf 13 f0       	push   $0xf013bf6e
f012d85d:	68 1f 11 00 00       	push   $0x111f
f012d862:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d867:	e8 8f 29 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d86c:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d873:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d876:	e8 4e f0 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d87b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d87e:	83 ec 08             	sub    $0x8,%esp
f012d881:	68 00 fc 0f 00       	push   $0xffc00
f012d886:	6a 00                	push   $0x0
f012d888:	e8 28 a2 fd ff       	call   f0107ab5 <krealloc>
f012d88d:	83 c4 10             	add    $0x10,%esp
f012d890:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d896:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d89c:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d8a1:	77 17                	ja     f012d8ba <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d8a3:	83 ec 04             	sub    $0x4,%esp
f012d8a6:	68 00 bf 13 f0       	push   $0xf013bf00
f012d8ab:	68 27 11 00 00       	push   $0x1127
f012d8b0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d8b5:	e8 41 29 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d8ba:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d8c0:	89 c1                	mov    %eax,%ecx
f012d8c2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d8c9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d8cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d8d1:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d8d4:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d8d7:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8dc:	f7 75 9c             	divl   -0x64(%ebp)
f012d8df:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d8e2:	29 d0                	sub    %edx,%eax
f012d8e4:	89 c3                	mov    %eax,%ebx
f012d8e6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d8ed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d8f2:	0f b6 d0             	movzbl %al,%edx
f012d8f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d8f8:	01 d0                	add    %edx,%eax
f012d8fa:	48                   	dec    %eax
f012d8fb:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d8fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d901:	ba 00 00 00 00       	mov    $0x0,%edx
f012d906:	f7 75 94             	divl   -0x6c(%ebp)
f012d909:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d90c:	29 d0                	sub    %edx,%eax
f012d90e:	01 c3                	add    %eax,%ebx
f012d910:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d917:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d91c:	0f b6 c0             	movzbl %al,%eax
f012d91f:	c1 e0 04             	shl    $0x4,%eax
f012d922:	89 c2                	mov    %eax,%edx
f012d924:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d927:	01 d0                	add    %edx,%eax
f012d929:	48                   	dec    %eax
f012d92a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d92d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d930:	ba 00 00 00 00       	mov    $0x0,%edx
f012d935:	f7 75 8c             	divl   -0x74(%ebp)
f012d938:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d93b:	29 d0                	sub    %edx,%eax
f012d93d:	01 d8                	add    %ebx,%eax
f012d93f:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d944:	39 c1                	cmp    %eax,%ecx
f012d946:	74 17                	je     f012d95f <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d948:	83 ec 04             	sub    $0x4,%esp
f012d94b:	68 3c bf 13 f0       	push   $0xf013bf3c
f012d950:	68 29 11 00 00       	push   $0x1129
f012d955:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d95a:	e8 9c 28 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d95f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d962:	e8 62 ef fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d967:	29 c3                	sub    %eax,%ebx
f012d969:	89 d8                	mov    %ebx,%eax
f012d96b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d970:	74 17                	je     f012d989 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d972:	83 ec 04             	sub    $0x4,%esp
f012d975:	68 6e bf 13 f0       	push   $0xf013bf6e
f012d97a:	68 2b 11 00 00       	push   $0x112b
f012d97f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d984:	e8 72 28 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d989:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d990:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d993:	e8 31 ef fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012d998:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d99b:	83 ec 08             	sub    $0x8,%esp
f012d99e:	68 00 fc 0f 00       	push   $0xffc00
f012d9a3:	6a 00                	push   $0x0
f012d9a5:	e8 0b a1 fd ff       	call   f0107ab5 <krealloc>
f012d9aa:	83 c4 10             	add    $0x10,%esp
f012d9ad:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d9b3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d9b9:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d9be:	77 17                	ja     f012d9d7 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9c0:	83 ec 04             	sub    $0x4,%esp
f012d9c3:	68 00 bf 13 f0       	push   $0xf013bf00
f012d9c8:	68 33 11 00 00       	push   $0x1133
f012d9cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d9d2:	e8 24 28 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d9d7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d9dd:	89 c1                	mov    %eax,%ecx
f012d9df:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d9e6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d9e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d9ee:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d9f1:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d9f4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9f9:	f7 75 84             	divl   -0x7c(%ebp)
f012d9fc:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d9ff:	29 d0                	sub    %edx,%eax
f012da01:	89 c3                	mov    %eax,%ebx
f012da03:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012da0a:	10 00 00 
f012da0d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012da12:	0f b6 d0             	movzbl %al,%edx
f012da15:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012da1b:	01 d0                	add    %edx,%eax
f012da1d:	48                   	dec    %eax
f012da1e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012da24:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012da2a:	ba 00 00 00 00       	mov    $0x0,%edx
f012da2f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012da35:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012da3b:	29 d0                	sub    %edx,%eax
f012da3d:	01 c3                	add    %eax,%ebx
f012da3f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012da46:	10 00 00 
f012da49:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012da4e:	0f b6 c0             	movzbl %al,%eax
f012da51:	c1 e0 04             	shl    $0x4,%eax
f012da54:	89 c2                	mov    %eax,%edx
f012da56:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012da5c:	01 d0                	add    %edx,%eax
f012da5e:	48                   	dec    %eax
f012da5f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012da65:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012da6b:	ba 00 00 00 00       	mov    $0x0,%edx
f012da70:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012da76:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012da7c:	29 d0                	sub    %edx,%eax
f012da7e:	01 d8                	add    %ebx,%eax
f012da80:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012da85:	39 c1                	cmp    %eax,%ecx
f012da87:	74 17                	je     f012daa0 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012da89:	83 ec 04             	sub    $0x4,%esp
f012da8c:	68 3c bf 13 f0       	push   $0xf013bf3c
f012da91:	68 35 11 00 00       	push   $0x1135
f012da96:	68 5a ac 13 f0       	push   $0xf013ac5a
f012da9b:	e8 5b 27 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012daa0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012daa3:	e8 21 ee fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012daa8:	29 c3                	sub    %eax,%ebx
f012daaa:	89 d8                	mov    %ebx,%eax
f012daac:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dab1:	74 17                	je     f012daca <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012dab3:	83 ec 04             	sub    $0x4,%esp
f012dab6:	68 6e bf 13 f0       	push   $0xf013bf6e
f012dabb:	68 37 11 00 00       	push   $0x1137
f012dac0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dac5:	e8 31 27 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012daca:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012dad1:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dad4:	e8 f0 ed fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dad9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012dadc:	83 ec 08             	sub    $0x8,%esp
f012dadf:	68 00 fc 0f 00       	push   $0xffc00
f012dae4:	6a 00                	push   $0x0
f012dae6:	e8 ca 9f fd ff       	call   f0107ab5 <krealloc>
f012daeb:	83 c4 10             	add    $0x10,%esp
f012daee:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012daf4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dafa:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012daff:	77 17                	ja     f012db18 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db01:	83 ec 04             	sub    $0x4,%esp
f012db04:	68 00 bf 13 f0       	push   $0xf013bf00
f012db09:	68 3e 11 00 00       	push   $0x113e
f012db0e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012db13:	e8 e3 26 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012db18:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012db1e:	89 c1                	mov    %eax,%ecx
f012db20:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012db27:	10 00 00 
f012db2a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012db30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012db35:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012db3b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012db41:	ba 00 00 00 00       	mov    $0x0,%edx
f012db46:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012db4c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012db52:	29 d0                	sub    %edx,%eax
f012db54:	89 c3                	mov    %eax,%ebx
f012db56:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012db5d:	10 00 00 
f012db60:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012db65:	0f b6 d0             	movzbl %al,%edx
f012db68:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012db6e:	01 d0                	add    %edx,%eax
f012db70:	48                   	dec    %eax
f012db71:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012db77:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012db7d:	ba 00 00 00 00       	mov    $0x0,%edx
f012db82:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012db88:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012db8e:	29 d0                	sub    %edx,%eax
f012db90:	01 c3                	add    %eax,%ebx
f012db92:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012db99:	10 00 00 
f012db9c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dba1:	0f b6 c0             	movzbl %al,%eax
f012dba4:	c1 e0 04             	shl    $0x4,%eax
f012dba7:	89 c2                	mov    %eax,%edx
f012dba9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012dbaf:	01 d0                	add    %edx,%eax
f012dbb1:	48                   	dec    %eax
f012dbb2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012dbb8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dbbe:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbc3:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012dbc9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dbcf:	29 d0                	sub    %edx,%eax
f012dbd1:	01 d8                	add    %ebx,%eax
f012dbd3:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012dbd8:	39 c1                	cmp    %eax,%ecx
f012dbda:	74 17                	je     f012dbf3 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012dbdc:	83 ec 04             	sub    $0x4,%esp
f012dbdf:	68 3c bf 13 f0       	push   $0xf013bf3c
f012dbe4:	68 40 11 00 00       	push   $0x1140
f012dbe9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dbee:	e8 08 26 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dbf3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbf6:	e8 ce ec fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dbfb:	29 c3                	sub    %eax,%ebx
f012dbfd:	89 d8                	mov    %ebx,%eax
f012dbff:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dc04:	74 17                	je     f012dc1d <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012dc06:	83 ec 04             	sub    $0x4,%esp
f012dc09:	68 6e bf 13 f0       	push   $0xf013bf6e
f012dc0e:	68 42 11 00 00       	push   $0x1142
f012dc13:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dc18:	e8 de 25 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dc1d:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012dc24:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012dc27:	e8 9d ec fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dc2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012dc2f:	83 ec 08             	sub    $0x8,%esp
f012dc32:	68 00 fc 1f 00       	push   $0x1ffc00
f012dc37:	6a 00                	push   $0x0
f012dc39:	e8 77 9e fd ff       	call   f0107ab5 <krealloc>
f012dc3e:	83 c4 10             	add    $0x10,%esp
f012dc41:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012dc47:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dc4d:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012dc52:	77 17                	ja     f012dc6b <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc54:	83 ec 04             	sub    $0x4,%esp
f012dc57:	68 00 bf 13 f0       	push   $0xf013bf00
f012dc5c:	68 49 11 00 00       	push   $0x1149
f012dc61:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dc66:	e8 90 25 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012dc6b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dc71:	89 c1                	mov    %eax,%ecx
f012dc73:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012dc7a:	10 00 00 
f012dc7d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012dc83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dc88:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012dc8e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012dc94:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc99:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012dc9f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012dca5:	29 d0                	sub    %edx,%eax
f012dca7:	89 c3                	mov    %eax,%ebx
f012dca9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012dcb0:	10 00 00 
f012dcb3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dcb8:	0f b6 d0             	movzbl %al,%edx
f012dcbb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012dcc1:	01 d0                	add    %edx,%eax
f012dcc3:	48                   	dec    %eax
f012dcc4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012dcca:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dcd0:	ba 00 00 00 00       	mov    $0x0,%edx
f012dcd5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012dcdb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dce1:	29 d0                	sub    %edx,%eax
f012dce3:	01 c3                	add    %eax,%ebx
f012dce5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012dcec:	10 00 00 
f012dcef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dcf4:	0f b6 c0             	movzbl %al,%eax
f012dcf7:	c1 e0 04             	shl    $0x4,%eax
f012dcfa:	89 c2                	mov    %eax,%edx
f012dcfc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012dd02:	01 d0                	add    %edx,%eax
f012dd04:	48                   	dec    %eax
f012dd05:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012dd0b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dd11:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd16:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012dd1c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dd22:	29 d0                	sub    %edx,%eax
f012dd24:	01 d8                	add    %ebx,%eax
f012dd26:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012dd2b:	39 c1                	cmp    %eax,%ecx
f012dd2d:	74 17                	je     f012dd46 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012dd2f:	83 ec 04             	sub    $0x4,%esp
f012dd32:	68 3c bf 13 f0       	push   $0xf013bf3c
f012dd37:	68 4b 11 00 00       	push   $0x114b
f012dd3c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dd41:	e8 b5 24 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012dd46:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd49:	e8 7b eb fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dd4e:	29 c3                	sub    %eax,%ebx
f012dd50:	89 d8                	mov    %ebx,%eax
f012dd52:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dd57:	74 17                	je     f012dd70 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012dd59:	83 ec 04             	sub    $0x4,%esp
f012dd5c:	68 6e bf 13 f0       	push   $0xf013bf6e
f012dd61:	68 4d 11 00 00       	push   $0x114d
f012dd66:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dd6b:	e8 8b 24 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dd70:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012dd77:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012dd7a:	e8 4a eb fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dd7f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012dd82:	83 ec 08             	sub    $0x8,%esp
f012dd85:	68 00 fc 1f 00       	push   $0x1ffc00
f012dd8a:	6a 00                	push   $0x0
f012dd8c:	e8 24 9d fd ff       	call   f0107ab5 <krealloc>
f012dd91:	83 c4 10             	add    $0x10,%esp
f012dd94:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012dd9a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dda0:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012dda5:	77 17                	ja     f012ddbe <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dda7:	83 ec 04             	sub    $0x4,%esp
f012ddaa:	68 00 bf 13 f0       	push   $0xf013bf00
f012ddaf:	68 54 11 00 00       	push   $0x1154
f012ddb4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ddb9:	e8 3d 24 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012ddbe:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ddc4:	89 c1                	mov    %eax,%ecx
f012ddc6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ddcd:	10 00 00 
f012ddd0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ddd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dddb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012dde1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012dde7:	ba 00 00 00 00       	mov    $0x0,%edx
f012ddec:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ddf2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ddf8:	29 d0                	sub    %edx,%eax
f012ddfa:	89 c3                	mov    %eax,%ebx
f012ddfc:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012de03:	10 00 00 
f012de06:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de0b:	0f b6 d0             	movzbl %al,%edx
f012de0e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012de14:	01 d0                	add    %edx,%eax
f012de16:	48                   	dec    %eax
f012de17:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012de1d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012de23:	ba 00 00 00 00       	mov    $0x0,%edx
f012de28:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012de2e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012de34:	29 d0                	sub    %edx,%eax
f012de36:	01 c3                	add    %eax,%ebx
f012de38:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012de3f:	10 00 00 
f012de42:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de47:	0f b6 c0             	movzbl %al,%eax
f012de4a:	c1 e0 04             	shl    $0x4,%eax
f012de4d:	89 c2                	mov    %eax,%edx
f012de4f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012de55:	01 d0                	add    %edx,%eax
f012de57:	48                   	dec    %eax
f012de58:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012de5e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012de64:	ba 00 00 00 00       	mov    $0x0,%edx
f012de69:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012de6f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012de75:	29 d0                	sub    %edx,%eax
f012de77:	01 d8                	add    %ebx,%eax
f012de79:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012de7e:	39 c1                	cmp    %eax,%ecx
f012de80:	74 17                	je     f012de99 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012de82:	83 ec 04             	sub    $0x4,%esp
f012de85:	68 3c bf 13 f0       	push   $0xf013bf3c
f012de8a:	68 56 11 00 00       	push   $0x1156
f012de8f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012de94:	e8 62 23 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012de99:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de9c:	e8 28 ea fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dea1:	29 c3                	sub    %eax,%ebx
f012dea3:	89 d8                	mov    %ebx,%eax
f012dea5:	3d 00 02 00 00       	cmp    $0x200,%eax
f012deaa:	74 17                	je     f012dec3 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012deac:	83 ec 04             	sub    $0x4,%esp
f012deaf:	68 6e bf 13 f0       	push   $0xf013bf6e
f012deb4:	68 58 11 00 00       	push   $0x1158
f012deb9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012debe:	e8 38 23 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dec3:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012deca:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012decd:	e8 f7 e9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ded2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012ded5:	83 ec 08             	sub    $0x8,%esp
f012ded8:	68 00 fc 2f 00       	push   $0x2ffc00
f012dedd:	6a 00                	push   $0x0
f012dedf:	e8 d1 9b fd ff       	call   f0107ab5 <krealloc>
f012dee4:	83 c4 10             	add    $0x10,%esp
f012dee7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012deed:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012def3:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012def8:	77 17                	ja     f012df11 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012defa:	83 ec 04             	sub    $0x4,%esp
f012defd:	68 00 bf 13 f0       	push   $0xf013bf00
f012df02:	68 5f 11 00 00       	push   $0x115f
f012df07:	68 5a ac 13 f0       	push   $0xf013ac5a
f012df0c:	e8 ea 22 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012df11:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012df17:	89 c1                	mov    %eax,%ecx
f012df19:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012df20:	10 00 00 
f012df23:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012df29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df2e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012df34:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012df3a:	ba 00 00 00 00       	mov    $0x0,%edx
f012df3f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012df45:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012df4b:	29 d0                	sub    %edx,%eax
f012df4d:	89 c3                	mov    %eax,%ebx
f012df4f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012df56:	10 00 00 
f012df59:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012df5e:	0f b6 d0             	movzbl %al,%edx
f012df61:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012df67:	01 d0                	add    %edx,%eax
f012df69:	48                   	dec    %eax
f012df6a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012df70:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012df76:	ba 00 00 00 00       	mov    $0x0,%edx
f012df7b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012df81:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012df87:	29 d0                	sub    %edx,%eax
f012df89:	01 c3                	add    %eax,%ebx
f012df8b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012df92:	10 00 00 
f012df95:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012df9a:	0f b6 c0             	movzbl %al,%eax
f012df9d:	c1 e0 04             	shl    $0x4,%eax
f012dfa0:	89 c2                	mov    %eax,%edx
f012dfa2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012dfa8:	01 d0                	add    %edx,%eax
f012dfaa:	48                   	dec    %eax
f012dfab:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012dfb1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012dfb7:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfbc:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012dfc2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012dfc8:	29 d0                	sub    %edx,%eax
f012dfca:	01 d8                	add    %ebx,%eax
f012dfcc:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012dfd1:	39 c1                	cmp    %eax,%ecx
f012dfd3:	74 17                	je     f012dfec <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012dfd5:	83 ec 04             	sub    $0x4,%esp
f012dfd8:	68 3c bf 13 f0       	push   $0xf013bf3c
f012dfdd:	68 61 11 00 00       	push   $0x1161
f012dfe2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dfe7:	e8 0f 22 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012dfec:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dfef:	e8 d5 e8 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012dff4:	29 c3                	sub    %eax,%ebx
f012dff6:	89 d8                	mov    %ebx,%eax
f012dff8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dffd:	74 17                	je     f012e016 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012dfff:	83 ec 04             	sub    $0x4,%esp
f012e002:	68 a4 b0 13 f0       	push   $0xf013b0a4
f012e007:	68 63 11 00 00       	push   $0x1163
f012e00c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e011:	e8 e5 21 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e016:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e01d:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e020:	e8 a4 e8 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e025:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e028:	83 ec 08             	sub    $0x8,%esp
f012e02b:	68 00 fc 2f 00       	push   $0x2ffc00
f012e030:	6a 00                	push   $0x0
f012e032:	e8 7e 9a fd ff       	call   f0107ab5 <krealloc>
f012e037:	83 c4 10             	add    $0x10,%esp
f012e03a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e040:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e046:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e04b:	77 17                	ja     f012e064 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e04d:	83 ec 04             	sub    $0x4,%esp
f012e050:	68 00 bf 13 f0       	push   $0xf013bf00
f012e055:	68 6a 11 00 00       	push   $0x116a
f012e05a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e05f:	e8 97 21 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e064:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e06a:	89 c1                	mov    %eax,%ecx
f012e06c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e073:	10 00 00 
f012e076:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e07c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e081:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e087:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e08d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e092:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e098:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e09e:	29 d0                	sub    %edx,%eax
f012e0a0:	89 c3                	mov    %eax,%ebx
f012e0a2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e0a9:	10 00 00 
f012e0ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e0b1:	0f b6 d0             	movzbl %al,%edx
f012e0b4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e0ba:	01 d0                	add    %edx,%eax
f012e0bc:	48                   	dec    %eax
f012e0bd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e0c3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e0c9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0ce:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e0d4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e0da:	29 d0                	sub    %edx,%eax
f012e0dc:	01 c3                	add    %eax,%ebx
f012e0de:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e0e5:	10 00 00 
f012e0e8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e0ed:	0f b6 c0             	movzbl %al,%eax
f012e0f0:	c1 e0 04             	shl    $0x4,%eax
f012e0f3:	89 c2                	mov    %eax,%edx
f012e0f5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e0fb:	01 d0                	add    %edx,%eax
f012e0fd:	48                   	dec    %eax
f012e0fe:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e104:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e10a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e10f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e115:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e11b:	29 d0                	sub    %edx,%eax
f012e11d:	01 d8                	add    %ebx,%eax
f012e11f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e124:	39 c1                	cmp    %eax,%ecx
f012e126:	74 17                	je     f012e13f <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e128:	83 ec 04             	sub    $0x4,%esp
f012e12b:	68 3c bf 13 f0       	push   $0xf013bf3c
f012e130:	68 6c 11 00 00       	push   $0x116c
f012e135:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e13a:	e8 bc 20 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e13f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e142:	e8 82 e7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e147:	29 c3                	sub    %eax,%ebx
f012e149:	89 d8                	mov    %ebx,%eax
f012e14b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e150:	74 17                	je     f012e169 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e152:	83 ec 04             	sub    $0x4,%esp
f012e155:	68 6e bf 13 f0       	push   $0xf013bf6e
f012e15a:	68 6e 11 00 00       	push   $0x116e
f012e15f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e164:	e8 92 20 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e169:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e170:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e173:	e8 51 e7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e178:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e17b:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e182:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e185:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e18b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e191:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e197:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e19a:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e19c:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e1a2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e1a8:	01 c2                	add    %eax,%edx
f012e1aa:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e1ad:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e1af:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e1b5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e1bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e1c2:	eb 11                	jmp    f012e1d5 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e1c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e1c7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e1cd:	01 d0                	add    %edx,%eax
f012e1cf:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e1d2:	ff 45 f4             	incl   -0xc(%ebp)
f012e1d5:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e1db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e1de:	7d e4                	jge    f012e1c4 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e1e0:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e1e6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e1ec:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e1f2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e1f8:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e1fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e205:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e20b:	01 d0                	add    %edx,%eax
f012e20d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e213:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e219:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e21f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e226:	eb 1b                	jmp    f012e243 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e228:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e22b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e232:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e238:	01 d0                	add    %edx,%eax
f012e23a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e240:	ff 45 f0             	incl   -0x10(%ebp)
f012e243:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e249:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e24c:	7d da                	jge    f012e228 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e24e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e254:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e25a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e261:	eb 17                	jmp    f012e27a <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e263:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e266:	01 c0                	add    %eax,%eax
f012e268:	89 c2                	mov    %eax,%edx
f012e26a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e270:	01 d0                	add    %edx,%eax
f012e272:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e277:	ff 45 ec             	incl   -0x14(%ebp)
f012e27a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e280:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e283:	7d de                	jge    f012e263 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e285:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e28b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e291:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e297:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e29c:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e2a2:	01 c0                	add    %eax,%eax
f012e2a4:	89 c2                	mov    %eax,%edx
f012e2a6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e2ac:	01 d0                	add    %edx,%eax
f012e2ae:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e2b3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e2b9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e2bf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e2c6:	eb 49                	jmp    f012e311 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e2c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e2cb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2d8:	01 d0                	add    %edx,%eax
f012e2da:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e2dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e2e0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2e7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2ed:	01 d0                	add    %edx,%eax
f012e2ef:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e2f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e2f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2ff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e305:	01 d0                	add    %edx,%eax
f012e307:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e30e:	ff 45 e8             	incl   -0x18(%ebp)
f012e311:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e317:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e31a:	7d ac                	jge    f012e2c8 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e31c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e322:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e328:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e32e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e331:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e337:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e33d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e343:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e34a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e350:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e357:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e35d:	01 d0                	add    %edx,%eax
f012e35f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e362:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e368:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e36f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e375:	01 d0                	add    %edx,%eax
f012e377:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e37d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e383:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e38a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e390:	01 d0                	add    %edx,%eax
f012e392:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e399:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e39f:	8a 00                	mov    (%eax),%al
f012e3a1:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e3a4:	75 17                	jne    f012e3bd <test_krealloc_BF+0xd04>
f012e3a6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e3ac:	89 c2                	mov    %eax,%edx
f012e3ae:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e3b4:	01 d0                	add    %edx,%eax
f012e3b6:	8a 00                	mov    (%eax),%al
f012e3b8:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e3bb:	74 17                	je     f012e3d4 <test_krealloc_BF+0xd1b>
			panic(
f012e3bd:	83 ec 04             	sub    $0x4,%esp
f012e3c0:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e3c5:	68 b1 11 00 00       	push   $0x11b1
f012e3ca:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e3cf:	e8 27 1e fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e3d4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e3da:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e3e0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e3e6:	8a 00                	mov    (%eax),%al
f012e3e8:	3c 02                	cmp    $0x2,%al
f012e3ea:	75 16                	jne    f012e402 <test_krealloc_BF+0xd49>
f012e3ec:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e3f2:	89 c2                	mov    %eax,%edx
f012e3f4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e3fa:	01 d0                	add    %edx,%eax
f012e3fc:	8a 00                	mov    (%eax),%al
f012e3fe:	3c 02                	cmp    $0x2,%al
f012e400:	74 20                	je     f012e422 <test_krealloc_BF+0xd69>
			panic(
f012e402:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e408:	8a 00                	mov    (%eax),%al
f012e40a:	0f be c0             	movsbl %al,%eax
f012e40d:	50                   	push   %eax
f012e40e:	68 cc bf 13 f0       	push   $0xf013bfcc
f012e413:	68 b7 11 00 00       	push   $0x11b7
f012e418:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e41d:	e8 d9 1d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e422:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e428:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e42e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e434:	8b 00                	mov    (%eax),%eax
f012e436:	83 f8 03             	cmp    $0x3,%eax
f012e439:	75 1c                	jne    f012e457 <test_krealloc_BF+0xd9e>
f012e43b:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e441:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e448:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e44e:	01 d0                	add    %edx,%eax
f012e450:	8b 00                	mov    (%eax),%eax
f012e452:	83 f8 03             	cmp    $0x3,%eax
f012e455:	74 17                	je     f012e46e <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e457:	83 ec 04             	sub    $0x4,%esp
f012e45a:	68 18 c0 13 f0       	push   $0xf013c018
f012e45f:	68 bb 11 00 00       	push   $0x11bb
f012e464:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e469:	e8 8d 1d fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012e46e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e474:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e47a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e480:	8b 00                	mov    (%eax),%eax
f012e482:	83 f8 04             	cmp    $0x4,%eax
f012e485:	75 1c                	jne    f012e4a3 <test_krealloc_BF+0xdea>
f012e487:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e48d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e494:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e49a:	01 d0                	add    %edx,%eax
f012e49c:	8b 00                	mov    (%eax),%eax
f012e49e:	83 f8 04             	cmp    $0x4,%eax
f012e4a1:	74 17                	je     f012e4ba <test_krealloc_BF+0xe01>
			panic(
f012e4a3:	83 ec 04             	sub    $0x4,%esp
f012e4a6:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e4ab:	68 c0 11 00 00       	push   $0x11c0
f012e4b0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e4b5:	e8 41 1d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e4ba:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e4c0:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e4c6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e4cc:	66 8b 00             	mov    (%eax),%ax
f012e4cf:	66 83 f8 05          	cmp    $0x5,%ax
f012e4d3:	75 1b                	jne    f012e4f0 <test_krealloc_BF+0xe37>
f012e4d5:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e4db:	01 c0                	add    %eax,%eax
f012e4dd:	89 c2                	mov    %eax,%edx
f012e4df:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e4e5:	01 d0                	add    %edx,%eax
f012e4e7:	66 8b 00             	mov    (%eax),%ax
f012e4ea:	66 83 f8 05          	cmp    $0x5,%ax
f012e4ee:	74 17                	je     f012e507 <test_krealloc_BF+0xe4e>
			panic(
f012e4f0:	83 ec 04             	sub    $0x4,%esp
f012e4f3:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e4f8:	68 c5 11 00 00       	push   $0x11c5
f012e4fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e502:	e8 f4 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e507:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e50d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e513:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e519:	66 8b 00             	mov    (%eax),%ax
f012e51c:	66 83 f8 06          	cmp    $0x6,%ax
f012e520:	75 1b                	jne    f012e53d <test_krealloc_BF+0xe84>
f012e522:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e528:	01 c0                	add    %eax,%eax
f012e52a:	89 c2                	mov    %eax,%edx
f012e52c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e532:	01 d0                	add    %edx,%eax
f012e534:	66 8b 00             	mov    (%eax),%ax
f012e537:	66 83 f8 06          	cmp    $0x6,%ax
f012e53b:	74 17                	je     f012e554 <test_krealloc_BF+0xe9b>
			panic(
f012e53d:	83 ec 04             	sub    $0x4,%esp
f012e540:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e545:	68 ca 11 00 00       	push   $0x11ca
f012e54a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e54f:	e8 a7 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e554:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e55a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e560:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e566:	8a 00                	mov    (%eax),%al
f012e568:	3c 07                	cmp    $0x7,%al
f012e56a:	75 1b                	jne    f012e587 <test_krealloc_BF+0xece>
f012e56c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e572:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e579:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e57f:	01 d0                	add    %edx,%eax
f012e581:	8a 00                	mov    (%eax),%al
f012e583:	3c 07                	cmp    $0x7,%al
f012e585:	74 17                	je     f012e59e <test_krealloc_BF+0xee5>
			panic(
f012e587:	83 ec 04             	sub    $0x4,%esp
f012e58a:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e58f:	68 cf 11 00 00       	push   $0x11cf
f012e594:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e599:	e8 5d 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e59e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5a4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e5a8:	66 83 f8 07          	cmp    $0x7,%ax
f012e5ac:	75 1f                	jne    f012e5cd <test_krealloc_BF+0xf14>
f012e5ae:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5bb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5c1:	01 d0                	add    %edx,%eax
f012e5c3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e5c7:	66 83 f8 07          	cmp    $0x7,%ax
f012e5cb:	74 17                	je     f012e5e4 <test_krealloc_BF+0xf2b>
			panic(
f012e5cd:	83 ec 04             	sub    $0x4,%esp
f012e5d0:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e5d5:	68 d2 11 00 00       	push   $0x11d2
f012e5da:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e5df:	e8 17 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e5e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5ea:	8b 40 04             	mov    0x4(%eax),%eax
f012e5ed:	83 f8 07             	cmp    $0x7,%eax
f012e5f0:	75 1d                	jne    f012e60f <test_krealloc_BF+0xf56>
f012e5f2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5f8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5ff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e605:	01 d0                	add    %edx,%eax
f012e607:	8b 40 04             	mov    0x4(%eax),%eax
f012e60a:	83 f8 07             	cmp    $0x7,%eax
f012e60d:	74 17                	je     f012e626 <test_krealloc_BF+0xf6d>
			panic(
f012e60f:	83 ec 04             	sub    $0x4,%esp
f012e612:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e617:	68 d5 11 00 00       	push   $0x11d5
f012e61c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e621:	e8 d5 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e626:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e62c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e632:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e638:	8a 00                	mov    (%eax),%al
f012e63a:	3c 08                	cmp    $0x8,%al
f012e63c:	75 1b                	jne    f012e659 <test_krealloc_BF+0xfa0>
f012e63e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e644:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e64b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e651:	01 d0                	add    %edx,%eax
f012e653:	8a 00                	mov    (%eax),%al
f012e655:	3c 08                	cmp    $0x8,%al
f012e657:	74 17                	je     f012e670 <test_krealloc_BF+0xfb7>
			panic(
f012e659:	83 ec 04             	sub    $0x4,%esp
f012e65c:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e661:	68 da 11 00 00       	push   $0x11da
f012e666:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e66b:	e8 8b 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e670:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e676:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e67a:	66 83 f8 08          	cmp    $0x8,%ax
f012e67e:	75 1f                	jne    f012e69f <test_krealloc_BF+0xfe6>
f012e680:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e686:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e68d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e693:	01 d0                	add    %edx,%eax
f012e695:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e699:	66 83 f8 08          	cmp    $0x8,%ax
f012e69d:	74 17                	je     f012e6b6 <test_krealloc_BF+0xffd>
			panic(
f012e69f:	83 ec 04             	sub    $0x4,%esp
f012e6a2:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e6a7:	68 dd 11 00 00       	push   $0x11dd
f012e6ac:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e6b1:	e8 45 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e6b6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6bc:	8b 40 04             	mov    0x4(%eax),%eax
f012e6bf:	83 f8 08             	cmp    $0x8,%eax
f012e6c2:	75 1d                	jne    f012e6e1 <test_krealloc_BF+0x1028>
f012e6c4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e6ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e6d1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6d7:	01 d0                	add    %edx,%eax
f012e6d9:	8b 40 04             	mov    0x4(%eax),%eax
f012e6dc:	83 f8 08             	cmp    $0x8,%eax
f012e6df:	74 17                	je     f012e6f8 <test_krealloc_BF+0x103f>
			panic(
f012e6e1:	83 ec 04             	sub    $0x4,%esp
f012e6e4:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e6e9:	68 e0 11 00 00       	push   $0x11e0
f012e6ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e6f3:	e8 03 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e6f8:	e8 cc e1 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e6fd:	89 c2                	mov    %eax,%edx
f012e6ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e702:	39 c2                	cmp    %eax,%edx
f012e704:	74 17                	je     f012e71d <test_krealloc_BF+0x1064>
			panic(
f012e706:	83 ec 04             	sub    $0x4,%esp
f012e709:	68 4c c0 13 f0       	push   $0xf013c04c
f012e70e:	68 e4 11 00 00       	push   $0x11e4
f012e713:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e718:	e8 de 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e71d:	83 ec 0c             	sub    $0xc,%esp
f012e720:	68 98 c0 13 f0       	push   $0xf013c098
f012e725:	e8 58 25 fd ff       	call   f0100c82 <cprintf>
f012e72a:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e72d:	e8 97 e1 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e732:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e735:	e8 02 56 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e73a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e740:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e746:	83 ec 08             	sub    $0x8,%esp
f012e749:	6a 00                	push   $0x0
f012e74b:	50                   	push   %eax
f012e74c:	e8 64 93 fd ff       	call   f0107ab5 <krealloc>
f012e751:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e754:	e8 e3 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e759:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e75f:	74 17                	je     f012e778 <test_krealloc_BF+0x10bf>
			panic(
f012e761:	83 ec 04             	sub    $0x4,%esp
f012e764:	68 bc c0 13 f0       	push   $0xf013c0bc
f012e769:	68 f1 11 00 00       	push   $0x11f1
f012e76e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e773:	e8 83 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e778:	e8 4c e1 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e77d:	89 c2                	mov    %eax,%edx
f012e77f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e782:	29 c2                	sub    %eax,%edx
f012e784:	89 d0                	mov    %edx,%eax
f012e786:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e78b:	74 17                	je     f012e7a4 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e78d:	83 ec 04             	sub    $0x4,%esp
f012e790:	68 30 c1 13 f0       	push   $0xf013c130
f012e795:	68 f3 11 00 00       	push   $0x11f3
f012e79a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e79f:	e8 57 1a fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e7a4:	e8 20 e1 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e7a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e7ac:	e8 8b 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e7b1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e7b7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7bd:	83 ec 08             	sub    $0x8,%esp
f012e7c0:	6a 00                	push   $0x0
f012e7c2:	50                   	push   %eax
f012e7c3:	e8 ed 92 fd ff       	call   f0107ab5 <krealloc>
f012e7c8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e7cb:	e8 6c 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e7d0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e7d6:	74 17                	je     f012e7ef <test_krealloc_BF+0x1136>
			panic(
f012e7d8:	83 ec 04             	sub    $0x4,%esp
f012e7db:	68 bc c0 13 f0       	push   $0xf013c0bc
f012e7e0:	68 fc 11 00 00       	push   $0x11fc
f012e7e5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e7ea:	e8 0c 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e7ef:	e8 d5 e0 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e7f4:	89 c2                	mov    %eax,%edx
f012e7f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e7f9:	29 c2                	sub    %eax,%edx
f012e7fb:	89 d0                	mov    %edx,%eax
f012e7fd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e802:	74 17                	je     f012e81b <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e804:	83 ec 04             	sub    $0x4,%esp
f012e807:	68 30 c1 13 f0       	push   $0xf013c130
f012e80c:	68 fe 11 00 00       	push   $0x11fe
f012e811:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e816:	e8 e0 19 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e81b:	e8 a9 e0 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e820:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e823:	e8 14 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e828:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e82e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e834:	83 ec 08             	sub    $0x8,%esp
f012e837:	6a 00                	push   $0x0
f012e839:	50                   	push   %eax
f012e83a:	e8 76 92 fd ff       	call   f0107ab5 <krealloc>
f012e83f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e842:	e8 f5 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e847:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e84d:	74 17                	je     f012e866 <test_krealloc_BF+0x11ad>
			panic(
f012e84f:	83 ec 04             	sub    $0x4,%esp
f012e852:	68 74 ac 13 f0       	push   $0xf013ac74
f012e857:	68 06 12 00 00       	push   $0x1206
f012e85c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e861:	e8 95 19 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e866:	e8 5e e0 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e86b:	89 c2                	mov    %eax,%edx
f012e86d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e870:	29 c2                	sub    %eax,%edx
f012e872:	89 d0                	mov    %edx,%eax
f012e874:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e879:	74 17                	je     f012e892 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e87b:	83 ec 04             	sub    $0x4,%esp
f012e87e:	68 30 c1 13 f0       	push   $0xf013c130
f012e883:	68 08 12 00 00       	push   $0x1208
f012e888:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e88d:	e8 69 19 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e892:	e8 32 e0 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e897:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e89a:	e8 9d 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e89f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e8a5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e8ab:	83 ec 08             	sub    $0x8,%esp
f012e8ae:	6a 00                	push   $0x0
f012e8b0:	50                   	push   %eax
f012e8b1:	e8 ff 91 fd ff       	call   f0107ab5 <krealloc>
f012e8b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e8b9:	e8 7e 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e8be:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e8c4:	74 17                	je     f012e8dd <test_krealloc_BF+0x1224>
			panic(
f012e8c6:	83 ec 04             	sub    $0x4,%esp
f012e8c9:	68 bc c0 13 f0       	push   $0xf013c0bc
f012e8ce:	68 10 12 00 00       	push   $0x1210
f012e8d3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e8d8:	e8 1e 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e8dd:	e8 e7 df fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012e8e2:	89 c2                	mov    %eax,%edx
f012e8e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e8e7:	29 c2                	sub    %eax,%edx
f012e8e9:	89 d0                	mov    %edx,%eax
f012e8eb:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e8f0:	74 17                	je     f012e909 <test_krealloc_BF+0x1250>
			panic(
f012e8f2:	83 ec 04             	sub    $0x4,%esp
f012e8f5:	68 64 c1 13 f0       	push   $0xf013c164
f012e8fa:	68 13 12 00 00       	push   $0x1213
f012e8ff:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e904:	e8 f2 18 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e909:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e910:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e917:	eb 48                	jmp    f012e961 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e919:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e91c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012e921:	83 ec 04             	sub    $0x4,%esp
f012e924:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e92a:	51                   	push   %ecx
f012e92b:	52                   	push   %edx
f012e92c:	50                   	push   %eax
f012e92d:	e8 a8 80 fd ff       	call   f01069da <get_page_table>
f012e932:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e935:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e93b:	85 c0                	test   %eax,%eax
f012e93d:	75 17                	jne    f012e956 <test_krealloc_BF+0x129d>
					panic(
f012e93f:	83 ec 04             	sub    $0x4,%esp
f012e942:	68 5c b5 13 f0       	push   $0xf013b55c
f012e947:	68 1f 12 00 00       	push   $0x121f
f012e94c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e951:	e8 a5 18 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e956:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e95d:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e961:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e965:	78 b2                	js     f012e919 <test_krealloc_BF+0x1260>
f012e967:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e96b:	7f 09                	jg     f012e976 <test_krealloc_BF+0x12bd>
f012e96d:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e974:	76 a3                	jbe    f012e919 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e976:	83 ec 0c             	sub    $0xc,%esp
f012e979:	68 a3 c1 13 f0       	push   $0xf013c1a3
f012e97e:	e8 ff 22 fd ff       	call   f0100c82 <cprintf>
f012e983:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e986:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e98c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e992:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e999:	eb 21                	jmp    f012e9bc <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e99b:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e9a1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e9a4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e9aa:	01 c8                	add    %ecx,%eax
f012e9ac:	8a 00                	mov    (%eax),%al
f012e9ae:	0f be c0             	movsbl %al,%eax
f012e9b1:	01 d0                	add    %edx,%eax
f012e9b3:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e9b9:	ff 45 dc             	incl   -0x24(%ebp)
f012e9bc:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e9c2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e9c5:	7d d4                	jge    f012e99b <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e9c7:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e9cd:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e9d3:	42                   	inc    %edx
f012e9d4:	01 d2                	add    %edx,%edx
f012e9d6:	39 d0                	cmp    %edx,%eax
f012e9d8:	74 17                	je     f012e9f1 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e9da:	83 ec 04             	sub    $0x4,%esp
f012e9dd:	68 ac c1 13 f0       	push   $0xf013c1ac
f012e9e2:	68 31 12 00 00       	push   $0x1231
f012e9e7:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e9ec:	e8 0a 18 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e9f1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e9f7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e9fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ea04:	eb 25                	jmp    f012ea2b <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012ea06:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012ea0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ea0f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ea16:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea1c:	01 c8                	add    %ecx,%eax
f012ea1e:	8b 00                	mov    (%eax),%eax
f012ea20:	01 d0                	add    %edx,%eax
f012ea22:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ea28:	ff 45 dc             	incl   -0x24(%ebp)
f012ea2b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ea31:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ea34:	7d d0                	jge    f012ea06 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ea36:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ea3c:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ea42:	42                   	inc    %edx
f012ea43:	c1 e2 02             	shl    $0x2,%edx
f012ea46:	39 d0                	cmp    %edx,%eax
f012ea48:	74 17                	je     f012ea61 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ea4a:	83 ec 04             	sub    $0x4,%esp
f012ea4d:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ea52:	68 3b 12 00 00       	push   $0x123b
f012ea57:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ea5c:	e8 9a 17 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ea61:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea67:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ea6d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ea74:	eb 24                	jmp    f012ea9a <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012ea76:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ea7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ea7f:	01 c0                	add    %eax,%eax
f012ea81:	89 c1                	mov    %eax,%ecx
f012ea83:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ea89:	01 c8                	add    %ecx,%eax
f012ea8b:	66 8b 00             	mov    (%eax),%ax
f012ea8e:	98                   	cwtl   
f012ea8f:	01 d0                	add    %edx,%eax
f012ea91:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ea97:	ff 45 dc             	incl   -0x24(%ebp)
f012ea9a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eaa0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eaa3:	7d d1                	jge    f012ea76 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012eaa5:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eaab:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eab1:	8d 48 01             	lea    0x1(%eax),%ecx
f012eab4:	89 c8                	mov    %ecx,%eax
f012eab6:	c1 e0 02             	shl    $0x2,%eax
f012eab9:	01 c8                	add    %ecx,%eax
f012eabb:	39 c2                	cmp    %eax,%edx
f012eabd:	74 17                	je     f012ead6 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012eabf:	83 ec 04             	sub    $0x4,%esp
f012eac2:	68 ac c1 13 f0       	push   $0xf013c1ac
f012eac7:	68 45 12 00 00       	push   $0x1245
f012eacc:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ead1:	e8 25 17 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ead6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eadc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012eae2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eae9:	eb 70                	jmp    f012eb5b <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012eaeb:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012eaf1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eaf4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eafb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb01:	01 c8                	add    %ecx,%eax
f012eb03:	8a 00                	mov    (%eax),%al
f012eb05:	0f be c0             	movsbl %al,%eax
f012eb08:	01 d0                	add    %edx,%eax
f012eb0a:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012eb10:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012eb16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb19:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb20:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb26:	01 c8                	add    %ecx,%eax
f012eb28:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eb2c:	98                   	cwtl   
f012eb2d:	01 d0                	add    %edx,%eax
f012eb2f:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012eb35:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012eb3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb3e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb4b:	01 c8                	add    %ecx,%eax
f012eb4d:	8b 40 04             	mov    0x4(%eax),%eax
f012eb50:	01 d0                	add    %edx,%eax
f012eb52:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012eb58:	ff 45 dc             	incl   -0x24(%ebp)
f012eb5b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb61:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eb64:	7d 85                	jge    f012eaeb <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012eb66:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012eb6c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb72:	8d 50 01             	lea    0x1(%eax),%edx
f012eb75:	89 d0                	mov    %edx,%eax
f012eb77:	01 c0                	add    %eax,%eax
f012eb79:	01 d0                	add    %edx,%eax
f012eb7b:	01 c0                	add    %eax,%eax
f012eb7d:	01 d0                	add    %edx,%eax
f012eb7f:	39 c1                	cmp    %eax,%ecx
f012eb81:	75 3a                	jne    f012ebbd <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012eb83:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012eb89:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb8f:	8d 50 01             	lea    0x1(%eax),%edx
f012eb92:	89 d0                	mov    %edx,%eax
f012eb94:	01 c0                	add    %eax,%eax
f012eb96:	01 d0                	add    %edx,%eax
f012eb98:	01 c0                	add    %eax,%eax
f012eb9a:	01 d0                	add    %edx,%eax
f012eb9c:	39 c1                	cmp    %eax,%ecx
f012eb9e:	75 1d                	jne    f012ebbd <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012eba0:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012eba6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebac:	8d 50 01             	lea    0x1(%eax),%edx
f012ebaf:	89 d0                	mov    %edx,%eax
f012ebb1:	01 c0                	add    %eax,%eax
f012ebb3:	01 d0                	add    %edx,%eax
f012ebb5:	01 c0                	add    %eax,%eax
f012ebb7:	01 d0                	add    %edx,%eax
f012ebb9:	39 c1                	cmp    %eax,%ecx
f012ebbb:	74 17                	je     f012ebd4 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ebbd:	83 ec 04             	sub    $0x4,%esp
f012ebc0:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ebc5:	68 53 12 00 00       	push   $0x1253
f012ebca:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ebcf:	e8 27 16 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ebd4:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ebdb:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ebde:	e8 e6 dc fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ebe3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ebe6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ebec:	83 ec 08             	sub    $0x8,%esp
f012ebef:	68 00 3c 00 00       	push   $0x3c00
f012ebf4:	50                   	push   %eax
f012ebf5:	e8 bb 8e fd ff       	call   f0107ab5 <krealloc>
f012ebfa:	83 c4 10             	add    $0x10,%esp
f012ebfd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ec03:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ec09:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ec0e:	77 17                	ja     f012ec27 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ec10:	83 ec 04             	sub    $0x4,%esp
f012ec13:	68 00 bf 13 f0       	push   $0xf013bf00
f012ec18:	68 5f 12 00 00       	push   $0x125f
f012ec1d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ec22:	e8 d4 15 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ec27:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ec2d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ec33:	74 17                	je     f012ec4c <test_krealloc_BF+0x1593>
			panic(
f012ec35:	83 ec 04             	sub    $0x4,%esp
f012ec38:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012ec3d:	68 62 12 00 00       	push   $0x1262
f012ec42:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ec47:	e8 af 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ec4c:	e8 78 dc fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ec51:	89 c2                	mov    %eax,%edx
f012ec53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ec56:	39 c2                	cmp    %eax,%edx
f012ec58:	74 17                	je     f012ec71 <test_krealloc_BF+0x15b8>
			panic(
f012ec5a:	83 ec 04             	sub    $0x4,%esp
f012ec5d:	68 50 c2 13 f0       	push   $0xf013c250
f012ec62:	68 65 12 00 00       	push   $0x1265
f012ec67:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ec6c:	e8 8a 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ec71:	e8 53 dc fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ec76:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ec79:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec7f:	83 ec 08             	sub    $0x8,%esp
f012ec82:	68 00 fc 0f 00       	push   $0xffc00
f012ec87:	50                   	push   %eax
f012ec88:	e8 28 8e fd ff       	call   f0107ab5 <krealloc>
f012ec8d:	83 c4 10             	add    $0x10,%esp
f012ec90:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ec96:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ec9c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eca1:	77 17                	ja     f012ecba <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eca3:	83 ec 04             	sub    $0x4,%esp
f012eca6:	68 00 bf 13 f0       	push   $0xf013bf00
f012ecab:	68 6b 12 00 00       	push   $0x126b
f012ecb0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ecb5:	e8 41 15 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ecba:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ecc0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ecc6:	74 17                	je     f012ecdf <test_krealloc_BF+0x1626>
			panic(
f012ecc8:	83 ec 04             	sub    $0x4,%esp
f012eccb:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012ecd0:	68 6e 12 00 00       	push   $0x126e
f012ecd5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ecda:	e8 1c 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ecdf:	e8 e5 db fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ece4:	89 c2                	mov    %eax,%edx
f012ece6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ece9:	39 c2                	cmp    %eax,%edx
f012eceb:	74 17                	je     f012ed04 <test_krealloc_BF+0x164b>
			panic(
f012eced:	83 ec 04             	sub    $0x4,%esp
f012ecf0:	68 50 c2 13 f0       	push   $0xf013c250
f012ecf5:	68 71 12 00 00       	push   $0x1271
f012ecfa:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ecff:	e8 f7 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ed04:	e8 c0 db fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ed09:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012ed0c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed12:	83 ec 08             	sub    $0x8,%esp
f012ed15:	68 00 fc 0f 00       	push   $0xffc00
f012ed1a:	50                   	push   %eax
f012ed1b:	e8 95 8d fd ff       	call   f0107ab5 <krealloc>
f012ed20:	83 c4 10             	add    $0x10,%esp
f012ed23:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ed29:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ed2f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ed34:	77 17                	ja     f012ed4d <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed36:	83 ec 04             	sub    $0x4,%esp
f012ed39:	68 00 bf 13 f0       	push   $0xf013bf00
f012ed3e:	68 77 12 00 00       	push   $0x1277
f012ed43:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ed48:	e8 ae 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ed4d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed53:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ed59:	74 17                	je     f012ed72 <test_krealloc_BF+0x16b9>
			panic(
f012ed5b:	83 ec 04             	sub    $0x4,%esp
f012ed5e:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012ed63:	68 7a 12 00 00       	push   $0x127a
f012ed68:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ed6d:	e8 89 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ed72:	e8 52 db fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ed77:	89 c2                	mov    %eax,%edx
f012ed79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed7c:	39 c2                	cmp    %eax,%edx
f012ed7e:	74 17                	je     f012ed97 <test_krealloc_BF+0x16de>
			panic(
f012ed80:	83 ec 04             	sub    $0x4,%esp
f012ed83:	68 50 c2 13 f0       	push   $0xf013c250
f012ed88:	68 7d 12 00 00       	push   $0x127d
f012ed8d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ed92:	e8 64 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ed97:	e8 2d db fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ed9c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ed9f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eda5:	83 ec 08             	sub    $0x8,%esp
f012eda8:	68 00 fc 0f 00       	push   $0xffc00
f012edad:	50                   	push   %eax
f012edae:	e8 02 8d fd ff       	call   f0107ab5 <krealloc>
f012edb3:	83 c4 10             	add    $0x10,%esp
f012edb6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012edbc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012edc2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012edc7:	77 17                	ja     f012ede0 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012edc9:	83 ec 04             	sub    $0x4,%esp
f012edcc:	68 00 bf 13 f0       	push   $0xf013bf00
f012edd1:	68 85 12 00 00       	push   $0x1285
f012edd6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012eddb:	e8 1b 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012ede0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ede6:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012edec:	74 17                	je     f012ee05 <test_krealloc_BF+0x174c>
			panic(
f012edee:	83 ec 04             	sub    $0x4,%esp
f012edf1:	68 94 c2 13 f0       	push   $0xf013c294
f012edf6:	68 88 12 00 00       	push   $0x1288
f012edfb:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee00:	e8 f6 13 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ee05:	e8 bf da fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ee0a:	89 c2                	mov    %eax,%edx
f012ee0c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee0f:	39 c2                	cmp    %eax,%edx
f012ee11:	74 17                	je     f012ee2a <test_krealloc_BF+0x1771>
			panic(
f012ee13:	83 ec 04             	sub    $0x4,%esp
f012ee16:	68 50 c2 13 f0       	push   $0xf013c250
f012ee1b:	68 8b 12 00 00       	push   $0x128b
f012ee20:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee25:	e8 d1 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012ee2a:	83 ec 0c             	sub    $0xc,%esp
f012ee2d:	68 73 b4 13 f0       	push   $0xf013b473
f012ee32:	e8 4b 1e fd ff       	call   f0100c82 <cprintf>
f012ee37:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ee3a:	e8 8a da fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ee3f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012ee42:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee48:	83 ec 08             	sub    $0x8,%esp
f012ee4b:	68 00 18 10 00       	push   $0x101800
f012ee50:	50                   	push   %eax
f012ee51:	e8 5f 8c fd ff       	call   f0107ab5 <krealloc>
f012ee56:	83 c4 10             	add    $0x10,%esp
f012ee59:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ee5c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ee5f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ee64:	77 17                	ja     f012ee7d <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee66:	83 ec 04             	sub    $0x4,%esp
f012ee69:	68 00 bf 13 f0       	push   $0xf013bf00
f012ee6e:	68 93 12 00 00       	push   $0x1293
f012ee73:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee78:	e8 7e 13 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ee7d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee83:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ee86:	74 17                	je     f012ee9f <test_krealloc_BF+0x17e6>
			panic(
f012ee88:	83 ec 04             	sub    $0x4,%esp
f012ee8b:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ee90:	68 96 12 00 00       	push   $0x1296
f012ee95:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee9a:	e8 5c 13 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ee9f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eea2:	e8 22 da fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012eea7:	29 c3                	sub    %eax,%ebx
f012eea9:	89 d8                	mov    %ebx,%eax
f012eeab:	83 f8 02             	cmp    $0x2,%eax
f012eeae:	74 17                	je     f012eec7 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012eeb0:	83 ec 04             	sub    $0x4,%esp
f012eeb3:	68 70 c3 13 f0       	push   $0xf013c370
f012eeb8:	68 98 12 00 00       	push   $0x1298
f012eebd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012eec2:	e8 34 13 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012eec7:	e8 fd d9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012eecc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012eecf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eed5:	83 ec 08             	sub    $0x8,%esp
f012eed8:	68 00 fc 3f 00       	push   $0x3ffc00
f012eedd:	50                   	push   %eax
f012eede:	e8 d2 8b fd ff       	call   f0107ab5 <krealloc>
f012eee3:	83 c4 10             	add    $0x10,%esp
f012eee6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eee9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eeec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eef1:	77 17                	ja     f012ef0a <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eef3:	83 ec 04             	sub    $0x4,%esp
f012eef6:	68 00 bf 13 f0       	push   $0xf013bf00
f012eefb:	68 9e 12 00 00       	push   $0x129e
f012ef00:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ef05:	e8 f1 12 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ef0a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef10:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ef13:	74 17                	je     f012ef2c <test_krealloc_BF+0x1873>
			panic(
f012ef15:	83 ec 04             	sub    $0x4,%esp
f012ef18:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ef1d:	68 a1 12 00 00       	push   $0x12a1
f012ef22:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ef27:	e8 cf 12 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012ef2c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef2f:	e8 95 d9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ef34:	29 c3                	sub    %eax,%ebx
f012ef36:	89 d8                	mov    %ebx,%eax
f012ef38:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ef3d:	74 17                	je     f012ef56 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012ef3f:	83 ec 04             	sub    $0x4,%esp
f012ef42:	68 70 c3 13 f0       	push   $0xf013c370
f012ef47:	68 a4 12 00 00       	push   $0x12a4
f012ef4c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ef51:	e8 a5 12 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012ef56:	83 ec 0c             	sub    $0xc,%esp
f012ef59:	68 b8 b4 13 f0       	push   $0xf013b4b8
f012ef5e:	e8 1f 1d fd ff       	call   f0100c82 <cprintf>
f012ef63:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ef66:	e8 5e d9 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012ef6b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ef6e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef74:	83 ec 08             	sub    $0x8,%esp
f012ef77:	68 00 fc 9f 00       	push   $0x9ffc00
f012ef7c:	50                   	push   %eax
f012ef7d:	e8 33 8b fd ff       	call   f0107ab5 <krealloc>
f012ef82:	83 c4 10             	add    $0x10,%esp
f012ef85:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ef88:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef8b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ef90:	77 17                	ja     f012efa9 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ef92:	83 ec 04             	sub    $0x4,%esp
f012ef95:	68 00 bf 13 f0       	push   $0xf013bf00
f012ef9a:	68 af 12 00 00       	push   $0x12af
f012ef9f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012efa4:	e8 52 12 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012efa9:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012efb0:	10 00 00 
f012efb3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012efb9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012efbe:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012efc4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012efca:	ba 00 00 00 00       	mov    $0x0,%edx
f012efcf:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012efd5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012efdb:	29 d0                	sub    %edx,%eax
f012efdd:	89 c1                	mov    %eax,%ecx
f012efdf:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012efe6:	10 00 00 
f012efe9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012efee:	0f b6 d0             	movzbl %al,%edx
f012eff1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012eff7:	01 d0                	add    %edx,%eax
f012eff9:	48                   	dec    %eax
f012effa:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f000:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f006:	ba 00 00 00 00       	mov    $0x0,%edx
f012f00b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f011:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f017:	29 d0                	sub    %edx,%eax
f012f019:	01 c1                	add    %eax,%ecx
f012f01b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f022:	10 00 00 
f012f025:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f02a:	0f b6 c0             	movzbl %al,%eax
f012f02d:	c1 e0 04             	shl    $0x4,%eax
f012f030:	89 c2                	mov    %eax,%edx
f012f032:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f038:	01 d0                	add    %edx,%eax
f012f03a:	48                   	dec    %eax
f012f03b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f041:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f047:	ba 00 00 00 00       	mov    $0x0,%edx
f012f04c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f052:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f058:	29 d0                	sub    %edx,%eax
f012f05a:	01 c8                	add    %ecx,%eax
f012f05c:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f062:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f065:	39 c2                	cmp    %eax,%edx
f012f067:	74 18                	je     f012f081 <test_krealloc_BF+0x19c8>
			panic(
f012f069:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f06c:	50                   	push   %eax
f012f06d:	68 a4 c3 13 f0       	push   $0xf013c3a4
f012f072:	68 b3 12 00 00       	push   $0x12b3
f012f077:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f07c:	e8 7a 11 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f081:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f087:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f08a:	75 17                	jne    f012f0a3 <test_krealloc_BF+0x19ea>
			panic(
f012f08c:	83 ec 04             	sub    $0x4,%esp
f012f08f:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012f094:	68 b6 12 00 00       	push   $0x12b6
f012f099:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f09e:	e8 58 11 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f0a3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f0a6:	e8 1e d8 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f0ab:	29 c3                	sub    %eax,%ebx
f012f0ad:	89 d8                	mov    %ebx,%eax
f012f0af:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f0b4:	74 17                	je     f012f0cd <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f0b6:	83 ec 04             	sub    $0x4,%esp
f012f0b9:	68 70 c3 13 f0       	push   $0xf013c370
f012f0be:	68 b9 12 00 00       	push   $0x12b9
f012f0c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f0c8:	e8 2e 11 fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012f0cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0d0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f0d6:	e8 ee d7 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f0db:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f0de:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f0e4:	83 ec 08             	sub    $0x8,%esp
f012f0e7:	68 00 fc 3f 00       	push   $0x3ffc00
f012f0ec:	50                   	push   %eax
f012f0ed:	e8 c3 89 fd ff       	call   f0107ab5 <krealloc>
f012f0f2:	83 c4 10             	add    $0x10,%esp
f012f0f5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f0f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0fb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f100:	77 17                	ja     f012f119 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f102:	83 ec 04             	sub    $0x4,%esp
f012f105:	68 00 bf 13 f0       	push   $0xf013bf00
f012f10a:	68 c2 12 00 00       	push   $0x12c2
f012f10f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f114:	e8 e2 10 fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f119:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f11f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f122:	75 17                	jne    f012f13b <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f124:	83 ec 04             	sub    $0x4,%esp
f012f127:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012f12c:	68 c4 12 00 00       	push   $0x12c4
f012f131:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f136:	e8 c0 10 fd ff       	call   f01001fb <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f13b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f142:	10 00 00 
f012f145:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f14b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f150:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f156:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f15c:	ba 00 00 00 00       	mov    $0x0,%edx
f012f161:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f167:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f16d:	29 d0                	sub    %edx,%eax
f012f16f:	89 c1                	mov    %eax,%ecx
f012f171:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f178:	10 00 00 
f012f17b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f180:	0f b6 d0             	movzbl %al,%edx
f012f183:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f189:	01 d0                	add    %edx,%eax
f012f18b:	48                   	dec    %eax
f012f18c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f192:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f198:	ba 00 00 00 00       	mov    $0x0,%edx
f012f19d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f1a3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f1a9:	29 d0                	sub    %edx,%eax
f012f1ab:	01 c1                	add    %eax,%ecx
f012f1ad:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f1b4:	10 00 00 
f012f1b7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f1bc:	0f b6 c0             	movzbl %al,%eax
f012f1bf:	c1 e0 04             	shl    $0x4,%eax
f012f1c2:	89 c2                	mov    %eax,%edx
f012f1c4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f1ca:	01 d0                	add    %edx,%eax
f012f1cc:	48                   	dec    %eax
f012f1cd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f1d3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f1d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012f1de:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f1e4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f1ea:	29 d0                	sub    %edx,%eax
f012f1ec:	01 c8                	add    %ecx,%eax
f012f1ee:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f1f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f1f7:	39 c2                	cmp    %eax,%edx
f012f1f9:	74 17                	je     f012f212 <test_krealloc_BF+0x1b59>
f012f1fb:	83 ec 04             	sub    $0x4,%esp
f012f1fe:	68 3c bf 13 f0       	push   $0xf013bf3c
f012f203:	68 c5 12 00 00       	push   $0x12c5
f012f208:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f20d:	e8 e9 0f fd ff       	call   f01001fb <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f212:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f215:	e8 af d6 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f21a:	29 c3                	sub    %eax,%ebx
f012f21c:	89 d8                	mov    %ebx,%eax
f012f21e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f223:	74 17                	je     f012f23c <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f225:	83 ec 04             	sub    $0x4,%esp
f012f228:	68 70 c3 13 f0       	push   $0xf013c370
f012f22d:	68 c9 12 00 00       	push   $0x12c9
f012f232:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f237:	e8 bf 0f fd ff       	call   f01001fb <_panic>
		ptr_allocations[6] = newAddress;
f012f23c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f23f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f245:	e8 7f d6 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f24a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f24d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f253:	83 ec 08             	sub    $0x8,%esp
f012f256:	68 00 fc 3f 01       	push   $0x13ffc00
f012f25b:	50                   	push   %eax
f012f25c:	e8 54 88 fd ff       	call   f0107ab5 <krealloc>
f012f261:	83 c4 10             	add    $0x10,%esp
f012f264:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f267:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f26a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f26f:	77 17                	ja     f012f288 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f271:	83 ec 04             	sub    $0x4,%esp
f012f274:	68 00 bf 13 f0       	push   $0xf013bf00
f012f279:	68 cf 12 00 00       	push   $0x12cf
f012f27e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f283:	e8 73 0f fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f288:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f28e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f291:	75 17                	jne    f012f2aa <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f293:	83 ec 04             	sub    $0x4,%esp
f012f296:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012f29b:	68 d1 12 00 00       	push   $0x12d1
f012f2a0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f2a5:	e8 51 0f fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f2aa:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f2b1:	10 00 00 
f012f2b4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f2ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f2bf:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f2c5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f2cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012f2d0:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f2d6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f2dc:	29 d0                	sub    %edx,%eax
f012f2de:	89 c1                	mov    %eax,%ecx
f012f2e0:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f2e7:	10 00 00 
f012f2ea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f2ef:	0f b6 d0             	movzbl %al,%edx
f012f2f2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f2f8:	01 d0                	add    %edx,%eax
f012f2fa:	48                   	dec    %eax
f012f2fb:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f301:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f307:	ba 00 00 00 00       	mov    $0x0,%edx
f012f30c:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f312:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f318:	29 d0                	sub    %edx,%eax
f012f31a:	01 c1                	add    %eax,%ecx
f012f31c:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f323:	10 00 00 
f012f326:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f32b:	0f b6 c0             	movzbl %al,%eax
f012f32e:	c1 e0 04             	shl    $0x4,%eax
f012f331:	89 c2                	mov    %eax,%edx
f012f333:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f339:	01 d0                	add    %edx,%eax
f012f33b:	48                   	dec    %eax
f012f33c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f342:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f348:	ba 00 00 00 00       	mov    $0x0,%edx
f012f34d:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f353:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f359:	29 d0                	sub    %edx,%eax
f012f35b:	01 c8                	add    %ecx,%eax
f012f35d:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f363:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f366:	39 c2                	cmp    %eax,%edx
f012f368:	74 17                	je     f012f381 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f36a:	83 ec 04             	sub    $0x4,%esp
f012f36d:	68 08 c5 13 f0       	push   $0xf013c508
f012f372:	68 d3 12 00 00       	push   $0x12d3
f012f377:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f37c:	e8 7a 0e fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f381:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f384:	e8 40 d5 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f389:	29 c3                	sub    %eax,%ebx
f012f38b:	89 d8                	mov    %ebx,%eax
f012f38d:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f392:	74 17                	je     f012f3ab <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f394:	83 ec 04             	sub    $0x4,%esp
f012f397:	68 70 c3 13 f0       	push   $0xf013c370
f012f39c:	68 d6 12 00 00       	push   $0x12d6
f012f3a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f3a6:	e8 50 0e fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012f3ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3ae:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f3b4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f3ba:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f3c0:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f3c7:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f3ca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f3d1:	eb 21                	jmp    f012f3f4 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f3d3:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f3d9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f3dc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f3e2:	01 c8                	add    %ecx,%eax
f012f3e4:	8a 00                	mov    (%eax),%al
f012f3e6:	0f be c0             	movsbl %al,%eax
f012f3e9:	01 d0                	add    %edx,%eax
f012f3eb:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f3f1:	ff 45 d8             	incl   -0x28(%ebp)
f012f3f4:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f3fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f3fd:	7d d4                	jge    f012f3d3 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f3ff:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f405:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f40b:	42                   	inc    %edx
f012f40c:	01 d2                	add    %edx,%edx
f012f40e:	39 d0                	cmp    %edx,%eax
f012f410:	74 17                	je     f012f429 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f412:	83 ec 04             	sub    $0x4,%esp
f012f415:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012f41a:	68 e4 12 00 00       	push   $0x12e4
f012f41f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f424:	e8 d2 0d fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f429:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f42f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f435:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f43c:	00 00 00 
		sums[1] = 0;
f012f43f:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f446:	00 00 00 
		sums[2] = 0;
f012f449:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f450:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f453:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f45a:	eb 70                	jmp    f012f4cc <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f45c:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f462:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f465:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f46c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f472:	01 c8                	add    %ecx,%eax
f012f474:	8a 00                	mov    (%eax),%al
f012f476:	0f be c0             	movsbl %al,%eax
f012f479:	01 d0                	add    %edx,%eax
f012f47b:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f481:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f487:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f48a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f491:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f497:	01 c8                	add    %ecx,%eax
f012f499:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f49d:	98                   	cwtl   
f012f49e:	01 d0                	add    %edx,%eax
f012f4a0:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f4a6:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f4ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f4af:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4b6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4bc:	01 c8                	add    %ecx,%eax
f012f4be:	8b 40 04             	mov    0x4(%eax),%eax
f012f4c1:	01 d0                	add    %edx,%eax
f012f4c3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f4c9:	ff 45 d8             	incl   -0x28(%ebp)
f012f4cc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f4d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f4d5:	7d 85                	jge    f012f45c <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f4d7:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f4dd:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f4e3:	8d 50 01             	lea    0x1(%eax),%edx
f012f4e6:	89 d0                	mov    %edx,%eax
f012f4e8:	01 c0                	add    %eax,%eax
f012f4ea:	01 d0                	add    %edx,%eax
f012f4ec:	01 c0                	add    %eax,%eax
f012f4ee:	01 d0                	add    %edx,%eax
f012f4f0:	39 c1                	cmp    %eax,%ecx
f012f4f2:	75 3a                	jne    f012f52e <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f4f4:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f4fa:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f500:	8d 50 01             	lea    0x1(%eax),%edx
f012f503:	89 d0                	mov    %edx,%eax
f012f505:	01 c0                	add    %eax,%eax
f012f507:	01 d0                	add    %edx,%eax
f012f509:	01 c0                	add    %eax,%eax
f012f50b:	01 d0                	add    %edx,%eax
f012f50d:	39 c1                	cmp    %eax,%ecx
f012f50f:	75 1d                	jne    f012f52e <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f511:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f517:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f51d:	8d 50 01             	lea    0x1(%eax),%edx
f012f520:	89 d0                	mov    %edx,%eax
f012f522:	01 c0                	add    %eax,%eax
f012f524:	01 d0                	add    %edx,%eax
f012f526:	01 c0                	add    %eax,%eax
f012f528:	01 d0                	add    %edx,%eax
f012f52a:	39 c1                	cmp    %eax,%ecx
f012f52c:	74 17                	je     f012f545 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f52e:	83 ec 04             	sub    $0x4,%esp
f012f531:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012f536:	68 f6 12 00 00       	push   $0x12f6
f012f53b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f540:	e8 b6 0c fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f545:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f54b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f551:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f558:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f55b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f562:	eb 24                	jmp    f012f588 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f564:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f56a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f56d:	01 c0                	add    %eax,%eax
f012f56f:	89 c1                	mov    %eax,%ecx
f012f571:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f577:	01 c8                	add    %ecx,%eax
f012f579:	66 8b 00             	mov    (%eax),%ax
f012f57c:	98                   	cwtl   
f012f57d:	01 d0                	add    %edx,%eax
f012f57f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f585:	ff 45 d8             	incl   -0x28(%ebp)
f012f588:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f58e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f591:	7d d1                	jge    f012f564 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f593:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f599:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f59f:	8d 48 01             	lea    0x1(%eax),%ecx
f012f5a2:	89 c8                	mov    %ecx,%eax
f012f5a4:	c1 e0 02             	shl    $0x2,%eax
f012f5a7:	01 c8                	add    %ecx,%eax
f012f5a9:	39 c2                	cmp    %eax,%edx
f012f5ab:	74 17                	je     f012f5c4 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f5ad:	83 ec 04             	sub    $0x4,%esp
f012f5b0:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012f5b5:	68 00 13 00 00       	push   $0x1300
f012f5ba:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f5bf:	e8 37 0c fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f5c4:	e8 00 d3 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f5c9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f5cc:	e8 6b 47 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f5d1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f5d7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f5dd:	83 ec 08             	sub    $0x8,%esp
f012f5e0:	6a 00                	push   $0x0
f012f5e2:	50                   	push   %eax
f012f5e3:	e8 cd 84 fd ff       	call   f0107ab5 <krealloc>
f012f5e8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5eb:	e8 4c 47 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f5f0:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5f6:	74 17                	je     f012f60f <test_krealloc_BF+0x1f56>
			panic(
f012f5f8:	83 ec 04             	sub    $0x4,%esp
f012f5fb:	68 74 ac 13 f0       	push   $0xf013ac74
f012f600:	68 08 13 00 00       	push   $0x1308
f012f605:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f60a:	e8 ec 0b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f60f:	e8 b5 d2 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f614:	89 c2                	mov    %eax,%edx
f012f616:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f619:	29 c2                	sub    %eax,%edx
f012f61b:	89 d0                	mov    %edx,%eax
f012f61d:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f622:	74 17                	je     f012f63b <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f624:	83 ec 04             	sub    $0x4,%esp
f012f627:	68 30 c1 13 f0       	push   $0xf013c130
f012f62c:	68 0a 13 00 00       	push   $0x130a
f012f631:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f636:	e8 c0 0b fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f63b:	e8 89 d2 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f640:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f643:	e8 f4 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f648:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f64e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f654:	83 ec 0c             	sub    $0xc,%esp
f012f657:	50                   	push   %eax
f012f658:	e8 63 82 fd ff       	call   f01078c0 <kfree>
f012f65d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f660:	e8 d7 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f665:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f66b:	74 17                	je     f012f684 <test_krealloc_BF+0x1fcb>
			panic(
f012f66d:	83 ec 04             	sub    $0x4,%esp
f012f670:	68 74 ac 13 f0       	push   $0xf013ac74
f012f675:	68 12 13 00 00       	push   $0x1312
f012f67a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f67f:	e8 77 0b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f684:	e8 40 d2 fd ff       	call   f010c8c9 <sys_calculate_free_frames>
f012f689:	89 c2                	mov    %eax,%edx
f012f68b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f68e:	29 c2                	sub    %eax,%edx
f012f690:	89 d0                	mov    %edx,%eax
f012f692:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f697:	74 17                	je     f012f6b0 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f699:	83 ec 04             	sub    $0x4,%esp
f012f69c:	68 30 c1 13 f0       	push   $0xf013c130
f012f6a1:	68 14 13 00 00       	push   $0x1314
f012f6a6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f6ab:	e8 4b 0b fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f6b0:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f6b7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f6be:	eb 48                	jmp    f012f708 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f6c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f6c3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f6c8:	83 ec 04             	sub    $0x4,%esp
f012f6cb:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f6d1:	51                   	push   %ecx
f012f6d2:	52                   	push   %edx
f012f6d3:	50                   	push   %eax
f012f6d4:	e8 01 73 fd ff       	call   f01069da <get_page_table>
f012f6d9:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f6dc:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f6e2:	85 c0                	test   %eax,%eax
f012f6e4:	75 17                	jne    f012f6fd <test_krealloc_BF+0x2044>
					panic(
f012f6e6:	83 ec 04             	sub    $0x4,%esp
f012f6e9:	68 5c b5 13 f0       	push   $0xf013b55c
f012f6ee:	68 21 13 00 00       	push   $0x1321
f012f6f3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f6f8:	e8 fe 0a fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f6fd:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f704:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f708:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f70c:	78 b2                	js     f012f6c0 <test_krealloc_BF+0x2007>
f012f70e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f712:	7f 09                	jg     f012f71d <test_krealloc_BF+0x2064>
f012f714:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f71b:	76 a3                	jbe    f012f6c0 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f71d:	83 ec 0c             	sub    $0xc,%esp
f012f720:	68 3e ae 13 f0       	push   $0xf013ae3e
f012f725:	e8 58 15 fd ff       	call   f0100c82 <cprintf>
f012f72a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f72d:	83 ec 0c             	sub    $0xc,%esp
f012f730:	68 40 c5 13 f0       	push   $0xf013c540
f012f735:	e8 48 15 fd ff       	call   f0100c82 <cprintf>
f012f73a:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f73d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f742:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f745:	5b                   	pop    %ebx
f012f746:	5f                   	pop    %edi
f012f747:	5d                   	pop    %ebp
f012f748:	c3                   	ret    

f012f749 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f749:	55                   	push   %ebp
f012f74a:	89 e5                	mov    %esp,%ebp
f012f74c:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012f74f:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f012f754:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012f759:	74 17                	je     f012f772 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012f75b:	83 ec 04             	sub    $0x4,%esp
f012f75e:	68 80 c5 13 f0       	push   $0xf013c580
f012f763:	68 39 13 00 00       	push   $0x1339
f012f768:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f76d:	e8 89 0a fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012f772:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f012f777:	8b 15 04 7b 65 f0    	mov    0xf0657b04,%edx
f012f77d:	4a                   	dec    %edx
f012f77e:	39 d0                	cmp    %edx,%eax
f012f780:	74 17                	je     f012f799 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012f782:	83 ec 04             	sub    $0x4,%esp
f012f785:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012f78a:	68 3f 13 00 00       	push   $0x133f
f012f78f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f794:	e8 62 0a fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012f799:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f012f79e:	85 c0                	test   %eax,%eax
f012f7a0:	74 17                	je     f012f7b9 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012f7a2:	83 ec 04             	sub    $0x4,%esp
f012f7a5:	68 10 c6 13 f0       	push   $0xf013c610
f012f7aa:	68 45 13 00 00       	push   $0x1345
f012f7af:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f7b4:	e8 42 0a fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012f7b9:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f012f7be:	83 f8 01             	cmp    $0x1,%eax
f012f7c1:	74 17                	je     f012f7da <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012f7c3:	83 ec 04             	sub    $0x4,%esp
f012f7c6:	68 48 c6 13 f0       	push   $0xf013c648
f012f7cb:	68 4b 13 00 00       	push   $0x134b
f012f7d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f7d5:	e8 21 0a fd ff       	call   f01001fb <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012f7da:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f012f7df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012f7e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f7e6:	74 66                	je     f012f84e <test_initialize_dyn_block_system+0x105>
f012f7e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f7eb:	8b 48 0c             	mov    0xc(%eax),%ecx
f012f7ee:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012f7f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f7f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f7fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012f800:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f803:	ba 00 00 00 00       	mov    $0x0,%edx
f012f808:	f7 75 ec             	divl   -0x14(%ebp)
f012f80b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f80e:	29 d0                	sub    %edx,%eax
f012f810:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012f815:	29 c2                	sub    %eax,%edx
f012f817:	89 d0                	mov    %edx,%eax
f012f819:	39 c1                	cmp    %eax,%ecx
f012f81b:	75 31                	jne    f012f84e <test_initialize_dyn_block_system+0x105>
f012f81d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f820:	8b 48 08             	mov    0x8(%eax),%ecx
f012f823:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012f82a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f82d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f832:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012f835:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f838:	ba 00 00 00 00       	mov    $0x0,%edx
f012f83d:	f7 75 e4             	divl   -0x1c(%ebp)
f012f840:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f843:	29 d0                	sub    %edx,%eax
f012f845:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f84a:	39 c1                	cmp    %eax,%ecx
f012f84c:	74 17                	je     f012f865 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012f84e:	83 ec 04             	sub    $0x4,%esp
f012f851:	68 80 c6 13 f0       	push   $0xf013c680
f012f856:	68 52 13 00 00       	push   $0x1352
f012f85b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f860:	e8 96 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012f865:	8b 45 14             	mov    0x14(%ebp),%eax
f012f868:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012f86b:	74 17                	je     f012f884 <test_initialize_dyn_block_system+0x13b>
f012f86d:	83 ec 04             	sub    $0x4,%esp
f012f870:	68 74 ac 13 f0       	push   $0xf013ac74
f012f875:	68 56 13 00 00       	push   $0x1356
f012f87a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f87f:	e8 77 09 fd ff       	call   f01001fb <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012f884:	8b 45 08             	mov    0x8(%ebp),%eax
f012f887:	2b 45 10             	sub    0x10(%ebp),%eax
f012f88a:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012f88f:	74 1b                	je     f012f8ac <test_initialize_dyn_block_system+0x163>
f012f891:	8b 45 08             	mov    0x8(%ebp),%eax
f012f894:	2b 45 10             	sub    0x10(%ebp),%eax
f012f897:	50                   	push   %eax
f012f898:	68 bc c6 13 f0       	push   $0xf013c6bc
f012f89d:	68 57 13 00 00       	push   $0x1357
f012f8a2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f8a7:	e8 4f 09 fd ff       	call   f01001fb <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012f8ac:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012f8b3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f8b8:	83 ec 04             	sub    $0x4,%esp
f012f8bb:	6a 00                	push   $0x0
f012f8bd:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8c0:	50                   	push   %eax
f012f8c1:	e8 e9 5f fe ff       	call   f01158af <CB>
f012f8c6:	83 c4 10             	add    $0x10,%esp
f012f8c9:	83 f8 01             	cmp    $0x1,%eax
f012f8cc:	75 35                	jne    f012f903 <test_initialize_dyn_block_system+0x1ba>
f012f8ce:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f8d3:	83 ec 04             	sub    $0x4,%esp
f012f8d6:	6a 01                	push   $0x1
f012f8d8:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8db:	50                   	push   %eax
f012f8dc:	e8 ce 5f fe ff       	call   f01158af <CB>
f012f8e1:	83 c4 10             	add    $0x10,%esp
f012f8e4:	83 f8 01             	cmp    $0x1,%eax
f012f8e7:	75 1a                	jne    f012f903 <test_initialize_dyn_block_system+0x1ba>
f012f8e9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f8ee:	83 ec 04             	sub    $0x4,%esp
f012f8f1:	6a 02                	push   $0x2
f012f8f3:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8f6:	50                   	push   %eax
f012f8f7:	e8 b3 5f fe ff       	call   f01158af <CB>
f012f8fc:	83 c4 10             	add    $0x10,%esp
f012f8ff:	85 c0                	test   %eax,%eax
f012f901:	74 17                	je     f012f91a <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012f903:	83 ec 04             	sub    $0x4,%esp
f012f906:	68 00 c7 13 f0       	push   $0xf013c700
f012f90b:	68 5f 13 00 00       	push   $0x135f
f012f910:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f915:	e8 e1 08 fd ff       	call   f01001fb <_panic>

			a+=4096;
f012f91a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012f921:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012f928:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f92b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f930:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012f933:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f936:	ba 00 00 00 00       	mov    $0x0,%edx
f012f93b:	f7 75 dc             	divl   -0x24(%ebp)
f012f93e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f941:	29 d0                	sub    %edx,%eax
f012f943:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f948:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f94b:	74 05                	je     f012f952 <test_initialize_dyn_block_system+0x209>
				break;
		}
f012f94d:	e9 61 ff ff ff       	jmp    f012f8b3 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012f952:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012f953:	83 ec 0c             	sub    $0xc,%esp
f012f956:	68 60 c7 13 f0       	push   $0xf013c760
f012f95b:	e8 22 13 fd ff       	call   f0100c82 <cprintf>
f012f960:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f963:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f968:	c9                   	leave  
f012f969:	c3                   	ret    

f012f96a <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f96a:	55                   	push   %ebp
f012f96b:	89 e5                	mov    %esp,%ebp
f012f96d:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f970:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f974:	77 07                	ja     f012f97d <nearest_pow2_ceil+0x13>
f012f976:	b8 01 00 00 00       	mov    $0x1,%eax
f012f97b:	eb 20                	jmp    f012f99d <nearest_pow2_ceil+0x33>
    int power = 2;
f012f97d:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f984:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f987:	eb 08                	jmp    f012f991 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012f989:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f98c:	01 c0                	add    %eax,%eax
f012f98e:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012f991:	d1 6d 08             	shrl   0x8(%ebp)
f012f994:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f998:	75 ef                	jne    f012f989 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012f99a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f99d:	c9                   	leave  
f012f99e:	c3                   	ret    

f012f99f <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012f99f:	55                   	push   %ebp
f012f9a0:	89 e5                	mov    %esp,%ebp
f012f9a2:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f9a5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f9a9:	77 07                	ja     f012f9b2 <log2_ceil+0x13>
f012f9ab:	b8 01 00 00 00       	mov    $0x1,%eax
f012f9b0:	eb 1b                	jmp    f012f9cd <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012f9b2:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f9b9:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f9bc:	eb 03                	jmp    f012f9c1 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012f9be:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012f9c1:	d1 6d 08             	shrl   0x8(%ebp)
f012f9c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f9c8:	75 f4                	jne    f012f9be <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012f9ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f9cd:	c9                   	leave  
f012f9ce:	c3                   	ret    

f012f9cf <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012f9cf:	55                   	push   %ebp
f012f9d0:	89 e5                	mov    %esp,%ebp
f012f9d2:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012f9d5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9d8:	8b 00                	mov    (%eax),%eax
f012f9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012f9dd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9e0:	8b 00                	mov    (%eax),%eax
f012f9e2:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012f9e5:	eb 52                	jmp    f012fa39 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012f9e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f9ea:	8b 00                	mov    (%eax),%eax
f012f9ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012f9ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f9f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f9f5:	75 12                	jne    f012fa09 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012f9f7:	83 ec 0c             	sub    $0xc,%esp
f012f9fa:	68 b8 c7 13 f0       	push   $0xf013c7b8
f012f9ff:	e8 7e 12 fd ff       	call   f0100c82 <cprintf>
f012fa04:	83 c4 10             	add    $0x10,%esp
			break;
f012fa07:	eb 3f                	jmp    f012fa48 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012fa09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fa0d:	74 38                	je     f012fa47 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012fa0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fa12:	8b 00                	mov    (%eax),%eax
f012fa14:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012fa17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fa1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fa1d:	75 12                	jne    f012fa31 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012fa1f:	83 ec 0c             	sub    $0xc,%esp
f012fa22:	68 d4 c7 13 f0       	push   $0xf013c7d4
f012fa27:	e8 56 12 fd ff       	call   f0100c82 <cprintf>
f012fa2c:	83 c4 10             	add    $0x10,%esp
			break;
f012fa2f:	eb 17                	jmp    f012fa48 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012fa31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa34:	8b 00                	mov    (%eax),%eax
f012fa36:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012fa39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fa3d:	74 09                	je     f012fa48 <detect_loop_in_FrameInfo_list+0x79>
f012fa3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fa43:	75 a2                	jne    f012f9e7 <detect_loop_in_FrameInfo_list+0x18>
f012fa45:	eb 01                	jmp    f012fa48 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012fa47:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012fa48:	83 ec 0c             	sub    $0xc,%esp
f012fa4b:	68 eb c7 13 f0       	push   $0xf013c7eb
f012fa50:	e8 2d 12 fd ff       	call   f0100c82 <cprintf>
f012fa55:	83 c4 10             	add    $0x10,%esp
}
f012fa58:	90                   	nop
f012fa59:	c9                   	leave  
f012fa5a:	c3                   	ret    

f012fa5b <scarce_memory>:

void scarce_memory()
{
f012fa5b:	55                   	push   %ebp
f012fa5c:	89 e5                	mov    %esp,%ebp
f012fa5e:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012fa61:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fa66:	ba 64 00 00 00       	mov    $0x64,%edx
f012fa6b:	29 c2                	sub    %eax,%edx
f012fa6d:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fa72:	0f af c2             	imul   %edx,%eax
f012fa75:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fa7a:	f7 e2                	mul    %edx
f012fa7c:	89 d0                	mov    %edx,%eax
f012fa7e:	c1 e8 05             	shr    $0x5,%eax
f012fa81:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012fa84:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fa89:	ba 64 00 00 00       	mov    $0x64,%edx
f012fa8e:	29 c2                	sub    %eax,%edx
f012fa90:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fa95:	89 d1                	mov    %edx,%ecx
f012fa97:	0f af c8             	imul   %eax,%ecx
f012fa9a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fa9f:	f7 e1                	mul    %ecx
f012faa1:	c1 ea 05             	shr    $0x5,%edx
f012faa4:	89 d0                	mov    %edx,%eax
f012faa6:	c1 e0 02             	shl    $0x2,%eax
f012faa9:	01 d0                	add    %edx,%eax
f012faab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fab2:	01 d0                	add    %edx,%eax
f012fab4:	c1 e0 02             	shl    $0x2,%eax
f012fab7:	29 c1                	sub    %eax,%ecx
f012fab9:	89 ca                	mov    %ecx,%edx
f012fabb:	85 d2                	test   %edx,%edx
f012fabd:	74 03                	je     f012fac2 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012fabf:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012fac2:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f012fac8:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f012facd:	29 c2                	sub    %eax,%edx
f012facf:	89 d0                	mov    %edx,%eax
f012fad1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012fad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fad7:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fada:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012fadd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fae4:	eb 12                	jmp    f012faf8 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012fae6:	83 ec 0c             	sub    $0xc,%esp
f012fae9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012faec:	50                   	push   %eax
f012faed:	e8 29 6d fd ff       	call   f010681b <allocate_frame>
f012faf2:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012faf5:	ff 45 f0             	incl   -0x10(%ebp)
f012faf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fafb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fafe:	76 e6                	jbe    f012fae6 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012fb00:	90                   	nop
f012fb01:	c9                   	leave  
f012fb02:	c3                   	ret    

f012fb03 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012fb03:	55                   	push   %ebp
f012fb04:	89 e5                	mov    %esp,%ebp
f012fb06:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012fb09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012fb10:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012fb17:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012fb1e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fb22:	0f 85 d0 01 00 00    	jne    f012fcf8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fb28:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012fb2f:	e9 de 00 00 00       	jmp    f012fc12 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f012fb34:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fb3b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fb40:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fb43:	c1 e2 04             	shl    $0x4,%edx
f012fb46:	01 d0                	add    %edx,%eax
f012fb48:	8b 00                	mov    (%eax),%eax
f012fb4a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fb4d:	e9 85 00 00 00       	jmp    f012fbd7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012fb52:	83 ec 0c             	sub    $0xc,%esp
f012fb55:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fb58:	e8 29 82 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fb5d:	83 c4 10             	add    $0x10,%esp
f012fb60:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fb63:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fb68:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fb6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fb71:	0f af c2             	imul   %edx,%eax
f012fb74:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fb79:	f7 e2                	mul    %edx
f012fb7b:	89 d0                	mov    %edx,%eax
f012fb7d:	c1 e8 05             	shr    $0x5,%eax
f012fb80:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fb83:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fb88:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fb8e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fb91:	89 d1                	mov    %edx,%ecx
f012fb93:	0f af c8             	imul   %eax,%ecx
f012fb96:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fb9b:	f7 e1                	mul    %ecx
f012fb9d:	c1 ea 05             	shr    $0x5,%edx
f012fba0:	89 d0                	mov    %edx,%eax
f012fba2:	c1 e0 02             	shl    $0x2,%eax
f012fba5:	01 d0                	add    %edx,%eax
f012fba7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fbae:	01 d0                	add    %edx,%eax
f012fbb0:	c1 e0 02             	shl    $0x2,%eax
f012fbb3:	29 c1                	sub    %eax,%ecx
f012fbb5:	89 ca                	mov    %ecx,%edx
f012fbb7:	85 d2                	test   %edx,%edx
f012fbb9:	74 03                	je     f012fbbe <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f012fbbb:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012fbbe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fbc1:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fbc4:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fbc9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fbcc:	c1 e2 04             	shl    $0x4,%edx
f012fbcf:	01 d0                	add    %edx,%eax
f012fbd1:	8b 40 08             	mov    0x8(%eax),%eax
f012fbd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fbd7:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fbdc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fbdf:	c1 e2 04             	shl    $0x4,%edx
f012fbe2:	01 d0                	add    %edx,%eax
f012fbe4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fbe8:	74 08                	je     f012fbf2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f012fbea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fbed:	8b 52 44             	mov    0x44(%edx),%edx
f012fbf0:	eb 05                	jmp    f012fbf7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f012fbf2:	ba 00 00 00 00       	mov    $0x0,%edx
f012fbf7:	89 50 08             	mov    %edx,0x8(%eax)
f012fbfa:	8b 40 08             	mov    0x8(%eax),%eax
f012fbfd:	85 c0                	test   %eax,%eax
f012fbff:	0f 85 4d ff ff ff    	jne    f012fb52 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f012fc05:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fc09:	0f 85 43 ff ff ff    	jne    f012fb52 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fc0f:	ff 45 e8             	incl   -0x18(%ebp)
f012fc12:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fc17:	0f b6 c0             	movzbl %al,%eax
f012fc1a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fc1d:	0f 8f 11 ff ff ff    	jg     f012fb34 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012fc23:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fc2a:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f012fc2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fc32:	eb 19                	jmp    f012fc4d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012fc34:	83 ec 0c             	sub    $0xc,%esp
f012fc37:	ff 75 dc             	pushl  -0x24(%ebp)
f012fc3a:	e8 47 81 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fc3f:	83 c4 10             	add    $0x10,%esp
f012fc42:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fc45:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fc4a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fc4d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fc51:	74 08                	je     f012fc5b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f012fc53:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fc56:	8b 40 44             	mov    0x44(%eax),%eax
f012fc59:	eb 05                	jmp    f012fc60 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f012fc5b:	b8 00 00 00 00       	mov    $0x0,%eax
f012fc60:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f012fc65:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fc6a:	85 c0                	test   %eax,%eax
f012fc6c:	75 c6                	jne    f012fc34 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f012fc6e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fc72:	75 c0                	jne    f012fc34 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012fc74:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc79:	85 c0                	test   %eax,%eax
f012fc7b:	0f 84 ec 00 00 00    	je     f012fd6d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fc81:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc86:	83 ec 0c             	sub    $0xc,%esp
f012fc89:	50                   	push   %eax
f012fc8a:	e8 f7 80 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fc8f:	83 c4 10             	add    $0x10,%esp
f012fc92:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fc95:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc9a:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fca0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fca3:	0f af c2             	imul   %edx,%eax
f012fca6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fcab:	f7 e2                	mul    %edx
f012fcad:	89 d0                	mov    %edx,%eax
f012fcaf:	c1 e8 05             	shr    $0x5,%eax
f012fcb2:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fcb5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fcba:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fcc0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fcc3:	89 d1                	mov    %edx,%ecx
f012fcc5:	0f af c8             	imul   %eax,%ecx
f012fcc8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fccd:	f7 e1                	mul    %ecx
f012fccf:	c1 ea 05             	shr    $0x5,%edx
f012fcd2:	89 d0                	mov    %edx,%eax
f012fcd4:	c1 e0 02             	shl    $0x2,%eax
f012fcd7:	01 d0                	add    %edx,%eax
f012fcd9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fce0:	01 d0                	add    %edx,%eax
f012fce2:	c1 e0 02             	shl    $0x2,%eax
f012fce5:	29 c1                	sub    %eax,%ecx
f012fce7:	89 ca                	mov    %ecx,%edx
f012fce9:	85 d2                	test   %edx,%edx
f012fceb:	74 03                	je     f012fcf0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f012fced:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fcf0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fcf3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fcf6:	eb 75                	jmp    f012fd6d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fcf8:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fcfd:	83 ec 0c             	sub    $0xc,%esp
f012fd00:	50                   	push   %eax
f012fd01:	e8 80 80 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fd06:	83 c4 10             	add    $0x10,%esp
f012fd09:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fd0c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd11:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd17:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fd1a:	0f af c2             	imul   %edx,%eax
f012fd1d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fd22:	f7 e2                	mul    %edx
f012fd24:	89 d0                	mov    %edx,%eax
f012fd26:	c1 e8 05             	shr    $0x5,%eax
f012fd29:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fd2c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd31:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd37:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fd3a:	89 d1                	mov    %edx,%ecx
f012fd3c:	0f af c8             	imul   %eax,%ecx
f012fd3f:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fd44:	f7 e1                	mul    %ecx
f012fd46:	c1 ea 05             	shr    $0x5,%edx
f012fd49:	89 d0                	mov    %edx,%eax
f012fd4b:	c1 e0 02             	shl    $0x2,%eax
f012fd4e:	01 d0                	add    %edx,%eax
f012fd50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fd57:	01 d0                	add    %edx,%eax
f012fd59:	c1 e0 02             	shl    $0x2,%eax
f012fd5c:	29 c1                	sub    %eax,%ecx
f012fd5e:	89 ca                	mov    %ecx,%edx
f012fd60:	85 d2                	test   %edx,%edx
f012fd62:	74 03                	je     f012fd67 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f012fd64:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fd67:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012fd6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012fd6d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fd70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd73:	01 c2                	add    %eax,%edx
f012fd75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd78:	01 d0                	add    %edx,%eax
}
f012fd7a:	c9                   	leave  
f012fd7b:	c3                   	ret    

f012fd7c <schenv>:


void schenv()
{
f012fd7c:	55                   	push   %ebp
f012fd7d:	89 e5                	mov    %esp,%ebp
f012fd7f:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012fd82:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__ne = NULL;
f012fd89:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012fd90:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fd93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fd9a:	eb 3f                	jmp    f012fddb <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f012fd9c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fda1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fda4:	c1 e2 04             	shl    $0x4,%edx
f012fda7:	01 d0                	add    %edx,%eax
f012fda9:	83 ec 0c             	sub    $0xc,%esp
f012fdac:	50                   	push   %eax
f012fdad:	e8 47 46 fd ff       	call   f01043f9 <queue_size>
f012fdb2:	83 c4 10             	add    $0x10,%esp
f012fdb5:	85 c0                	test   %eax,%eax
f012fdb7:	74 1f                	je     f012fdd8 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012fdb9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fdbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fdc1:	c1 e2 04             	shl    $0x4,%edx
f012fdc4:	01 d0                	add    %edx,%eax
f012fdc6:	8b 40 04             	mov    0x4(%eax),%eax
f012fdc9:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = i;
f012fdce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdd1:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
			break;
f012fdd6:	eb 10                	jmp    f012fde8 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fdd8:	ff 45 f4             	incl   -0xc(%ebp)
f012fddb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fde0:	0f b6 c0             	movzbl %al,%eax
f012fde3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fde6:	7f b4                	jg     f012fd9c <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012fde8:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fded:	85 c0                	test   %eax,%eax
f012fdef:	0f 84 86 00 00 00    	je     f012fe7b <schenv+0xff>
	{
		if (__ne != NULL)
f012fdf5:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012fdfa:	85 c0                	test   %eax,%eax
f012fdfc:	74 4b                	je     f012fe49 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f012fdfe:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe03:	0f b6 c0             	movzbl %al,%eax
f012fe06:	8d 50 01             	lea    0x1(%eax),%edx
f012fe09:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012fe0e:	0f b6 c0             	movzbl %al,%eax
f012fe11:	39 c2                	cmp    %eax,%edx
f012fe13:	7d 66                	jge    f012fe7b <schenv+0xff>
			{
				__ne = curenv;
f012fe15:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe1a:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fe1f:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe24:	0f b6 c0             	movzbl %al,%eax
f012fe27:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012fe2d:	0f b6 d2             	movzbl %dl,%edx
f012fe30:	4a                   	dec    %edx
f012fe31:	39 d0                	cmp    %edx,%eax
f012fe33:	7d 08                	jge    f012fe3d <schenv+0xc1>
f012fe35:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe3a:	40                   	inc    %eax
f012fe3b:	eb 05                	jmp    f012fe42 <schenv+0xc6>
f012fe3d:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe42:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012fe47:	eb 32                	jmp    f012fe7b <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012fe49:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe4e:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fe53:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe58:	0f b6 c0             	movzbl %al,%eax
f012fe5b:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012fe61:	0f b6 d2             	movzbl %dl,%edx
f012fe64:	4a                   	dec    %edx
f012fe65:	39 d0                	cmp    %edx,%eax
f012fe67:	7d 08                	jge    f012fe71 <schenv+0xf5>
f012fe69:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe6e:	40                   	inc    %eax
f012fe6f:	eb 05                	jmp    f012fe76 <schenv+0xfa>
f012fe71:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe76:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		}
	}
}
f012fe7b:	90                   	nop
f012fe7c:	c9                   	leave  
f012fe7d:	c3                   	ret    

f012fe7e <chksch>:

void chksch(uint8 onoff)
{
f012fe7e:	55                   	push   %ebp
f012fe7f:	89 e5                	mov    %esp,%ebp
f012fe81:	83 ec 04             	sub    $0x4,%esp
f012fe84:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe87:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012fe8a:	c7 05 94 7b 65 f0 00 	movl   $0x0,0xf0657b94
f012fe91:	00 00 00 
	__ne = NULL;
f012fe94:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012fe9b:	00 00 00 
	__pl = 0 ;
f012fe9e:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	__nl = 0 ;
f012fea5:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__chkstatus = onoff;
f012feac:	8a 45 fc             	mov    -0x4(%ebp),%al
f012feaf:	a2 34 7b 65 f0       	mov    %al,0xf0657b34
}
f012feb4:	90                   	nop
f012feb5:	c9                   	leave  
f012feb6:	c3                   	ret    

f012feb7 <chk1>:
void chk1()
{
f012feb7:	55                   	push   %ebp
f012feb8:	89 e5                	mov    %esp,%ebp
f012feba:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012febd:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f012fec2:	84 c0                	test   %al,%al
f012fec4:	74 2b                	je     f012fef1 <chk1+0x3a>
		return ;
	__pe = curenv;
f012fec6:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fecb:	a3 94 7b 65 f0       	mov    %eax,0xf0657b94
	__pl = __nl ;
f012fed0:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012fed5:	a2 e0 7a 65 f0       	mov    %al,0xf0657ae0
	if (__pe == NULL)
f012feda:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f012fedf:	85 c0                	test   %eax,%eax
f012fee1:	75 07                	jne    f012feea <chk1+0x33>
	{
		__pl = 0;
f012fee3:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012feea:	e8 8d fe ff ff       	call   f012fd7c <schenv>
f012feef:	eb 01                	jmp    f012fef2 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012fef1:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012fef2:	c9                   	leave  
f012fef3:	c3                   	ret    

f012fef4 <chk2>:
void chk2(struct Env* __se)
{
f012fef4:	55                   	push   %ebp
f012fef5:	89 e5                	mov    %esp,%ebp
f012fef7:	53                   	push   %ebx
f012fef8:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012fefb:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f012ff00:	84 c0                	test   %al,%al
f012ff02:	0f 84 43 02 00 00    	je     f013014b <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012ff08:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ff0d:	39 45 08             	cmp    %eax,0x8(%ebp)
f012ff10:	74 19                	je     f012ff2b <chk2+0x37>
f012ff12:	68 05 c8 13 f0       	push   $0xf013c805
f012ff17:	68 12 c8 13 f0       	push   $0xf013c812
f012ff1c:	68 c0 00 00 00       	push   $0xc0
f012ff21:	68 27 c8 13 f0       	push   $0xf013c827
f012ff26:	e8 3f 03 fd ff       	call   f010026a <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012ff2b:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ff30:	85 c0                	test   %eax,%eax
f012ff32:	0f 84 25 01 00 00    	je     f013005d <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012ff38:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f012ff3e:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ff43:	0f b6 c0             	movzbl %al,%eax
f012ff46:	01 d0                	add    %edx,%eax
f012ff48:	8a 00                	mov    (%eax),%al
f012ff4a:	0f b6 d8             	movzbl %al,%ebx
f012ff4d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012ff52:	99                   	cltd   
f012ff53:	f7 fb                	idiv   %ebx
f012ff55:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012ff5b:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f012ff61:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ff66:	0f b6 c0             	movzbl %al,%eax
f012ff69:	01 d0                	add    %edx,%eax
f012ff6b:	8a 00                	mov    (%eax),%al
f012ff6d:	0f b6 d8             	movzbl %al,%ebx
f012ff70:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012ff75:	99                   	cltd   
f012ff76:	f7 fb                	idiv   %ebx
f012ff78:	89 c3                	mov    %eax,%ebx
f012ff7a:	89 c8                	mov    %ecx,%eax
f012ff7c:	99                   	cltd   
f012ff7d:	f7 fb                	idiv   %ebx
f012ff7f:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012ff83:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ff87:	83 e0 01             	and    $0x1,%eax
f012ff8a:	66 85 c0             	test   %ax,%ax
f012ff8d:	74 07                	je     f012ff96 <chk2+0xa2>
f012ff8f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ff93:	40                   	inc    %eax
f012ff94:	eb 04                	jmp    f012ff9a <chk2+0xa6>
f012ff96:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ff9a:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012ff9e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012ffa2:	89 d0                	mov    %edx,%eax
f012ffa4:	c1 e0 02             	shl    $0x2,%eax
f012ffa7:	01 d0                	add    %edx,%eax
f012ffa9:	01 c0                	add    %eax,%eax
f012ffab:	01 d0                	add    %edx,%eax
f012ffad:	c1 e0 02             	shl    $0x2,%eax
f012ffb0:	01 d0                	add    %edx,%eax
f012ffb2:	01 c0                	add    %eax,%eax
f012ffb4:	89 c1                	mov    %eax,%ecx
f012ffb6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ffbb:	f7 e9                	imul   %ecx
f012ffbd:	c1 fa 05             	sar    $0x5,%edx
f012ffc0:	89 c8                	mov    %ecx,%eax
f012ffc2:	c1 f8 1f             	sar    $0x1f,%eax
f012ffc5:	29 c2                	sub    %eax,%edx
f012ffc7:	89 d0                	mov    %edx,%eax
f012ffc9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012ffcd:	e8 f8 42 fd ff       	call   f01042ca <kclock_read_cnt0>
f012ffd2:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012ffd6:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012ffda:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012ffde:	76 0a                	jbe    f012ffea <chk2+0xf6>
f012ffe0:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012ffe4:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012ffe8:	76 19                	jbe    f0130003 <chk2+0x10f>
f012ffea:	68 40 c8 13 f0       	push   $0xf013c840
f012ffef:	68 12 c8 13 f0       	push   $0xf013c812
f012fff4:	68 ca 00 00 00       	push   $0xca
f012fff9:	68 27 c8 13 f0       	push   $0xf013c827
f012fffe:	e8 67 02 fd ff       	call   f010026a <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130003:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013000a:	eb 44                	jmp    f0130050 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f013000c:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f0130011:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130014:	89 c2                	mov    %eax,%edx
f0130016:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f013001b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013001e:	c1 e1 04             	shl    $0x4,%ecx
f0130021:	01 c8                	add    %ecx,%eax
f0130023:	83 ec 08             	sub    $0x8,%esp
f0130026:	52                   	push   %edx
f0130027:	50                   	push   %eax
f0130028:	e8 9e 45 fd ff       	call   f01045cb <find_env_in_queue>
f013002d:	83 c4 10             	add    $0x10,%esp
f0130030:	85 c0                	test   %eax,%eax
f0130032:	74 19                	je     f013004d <chk2+0x159>
f0130034:	68 64 c8 13 f0       	push   $0xf013c864
f0130039:	68 12 c8 13 f0       	push   $0xf013c812
f013003e:	68 ce 00 00 00       	push   $0xce
f0130043:	68 27 c8 13 f0       	push   $0xf013c827
f0130048:	e8 1d 02 fd ff       	call   f010026a <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f013004d:	ff 45 f4             	incl   -0xc(%ebp)
f0130050:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0130055:	0f b6 c0             	movzbl %al,%eax
f0130058:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013005b:	7f af                	jg     f013000c <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f013005d:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f0130062:	85 c0                	test   %eax,%eax
f0130064:	0f 84 e2 00 00 00    	je     f013014c <chk2+0x258>
f013006a:	8b 15 94 7b 65 f0    	mov    0xf0657b94,%edx
f0130070:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f0130075:	39 c2                	cmp    %eax,%edx
f0130077:	0f 84 cf 00 00 00    	je     f013014c <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f013007d:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130082:	0f b6 c0             	movzbl %al,%eax
f0130085:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f013008b:	0f b6 d2             	movzbl %dl,%edx
f013008e:	4a                   	dec    %edx
f013008f:	39 d0                	cmp    %edx,%eax
f0130091:	74 08                	je     f013009b <chk2+0x1a7>
f0130093:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130098:	40                   	inc    %eax
f0130099:	eb 05                	jmp    f01300a0 <chk2+0x1ac>
f013009b:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f01300a0:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f01300a3:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f01300a8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01300ab:	89 c2                	mov    %eax,%edx
f01300ad:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01300b2:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f01300b6:	c1 e1 04             	shl    $0x4,%ecx
f01300b9:	01 c8                	add    %ecx,%eax
f01300bb:	83 ec 08             	sub    $0x8,%esp
f01300be:	52                   	push   %edx
f01300bf:	50                   	push   %eax
f01300c0:	e8 06 45 fd ff       	call   f01045cb <find_env_in_queue>
f01300c5:	83 c4 10             	add    $0x10,%esp
f01300c8:	85 c0                	test   %eax,%eax
f01300ca:	75 19                	jne    f01300e5 <chk2+0x1f1>
f01300cc:	68 a4 c8 13 f0       	push   $0xf013c8a4
f01300d1:	68 12 c8 13 f0       	push   $0xf013c812
f01300d6:	68 d4 00 00 00       	push   $0xd4
f01300db:	68 27 c8 13 f0       	push   $0xf013c827
f01300e0:	e8 85 01 fd ff       	call   f010026a <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f01300e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01300ec:	eb 4e                	jmp    f013013c <chk2+0x248>
		{
			if (i == __tl) continue;
f01300ee:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f01300f2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01300f5:	74 41                	je     f0130138 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f01300f7:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f01300fc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01300ff:	89 c2                	mov    %eax,%edx
f0130101:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0130106:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130109:	c1 e1 04             	shl    $0x4,%ecx
f013010c:	01 c8                	add    %ecx,%eax
f013010e:	83 ec 08             	sub    $0x8,%esp
f0130111:	52                   	push   %edx
f0130112:	50                   	push   %eax
f0130113:	e8 b3 44 fd ff       	call   f01045cb <find_env_in_queue>
f0130118:	83 c4 10             	add    $0x10,%esp
f013011b:	85 c0                	test   %eax,%eax
f013011d:	74 1a                	je     f0130139 <chk2+0x245>
f013011f:	68 e8 c8 13 f0       	push   $0xf013c8e8
f0130124:	68 12 c8 13 f0       	push   $0xf013c812
f0130129:	68 d8 00 00 00       	push   $0xd8
f013012e:	68 27 c8 13 f0       	push   $0xf013c827
f0130133:	e8 32 01 fd ff       	call   f010026a <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130138:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130139:	ff 45 f0             	incl   -0x10(%ebp)
f013013c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0130141:	0f b6 c0             	movzbl %al,%eax
f0130144:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130147:	7f a5                	jg     f01300ee <chk2+0x1fa>
f0130149:	eb 01                	jmp    f013014c <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f013014b:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f013014c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f013014f:	c9                   	leave  
f0130150:	c3                   	ret    

f0130151 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130151:	55                   	push   %ebp
f0130152:	89 e5                	mov    %esp,%ebp
f0130154:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130157:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013015e:	eb 40                	jmp    f01301a0 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130160:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130163:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130169:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f013016e:	83 ec 08             	sub    $0x8,%esp
f0130171:	52                   	push   %edx
f0130172:	50                   	push   %eax
f0130173:	e8 9b 01 00 00       	call   f0130313 <check_va2pa>
f0130178:	83 c4 10             	add    $0x10,%esp
f013017b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013017e:	74 19                	je     f0130199 <check_boot_pgdir+0x48>
f0130180:	68 28 c9 13 f0       	push   $0xf013c928
f0130185:	68 12 c8 13 f0       	push   $0xf013c812
f013018a:	68 fa 00 00 00       	push   $0xfa
f013018f:	68 27 c8 13 f0       	push   $0xf013c827
f0130194:	e8 62 00 fd ff       	call   f01001fb <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130199:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01301a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301a3:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f01301a9:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f01301ae:	39 c2                	cmp    %eax,%edx
f01301b0:	72 ae                	jb     f0130160 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01301b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01301b9:	eb 74                	jmp    f013022f <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f01301bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301be:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f01301c4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01301c9:	83 ec 08             	sub    $0x8,%esp
f01301cc:	52                   	push   %edx
f01301cd:	50                   	push   %eax
f01301ce:	e8 40 01 00 00       	call   f0130313 <check_va2pa>
f01301d3:	83 c4 10             	add    $0x10,%esp
f01301d6:	c7 45 f0 00 90 18 f0 	movl   $0xf0189000,-0x10(%ebp)
f01301dd:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f01301e4:	77 17                	ja     f01301fd <check_boot_pgdir+0xac>
f01301e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01301e9:	68 60 c9 13 f0       	push   $0xf013c960
f01301ee:	68 04 01 00 00       	push   $0x104
f01301f3:	68 27 c8 13 f0       	push   $0xf013c827
f01301f8:	e8 fe ff fc ff       	call   f01001fb <_panic>
f01301fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130200:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130206:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130209:	01 ca                	add    %ecx,%edx
f013020b:	39 d0                	cmp    %edx,%eax
f013020d:	74 19                	je     f0130228 <check_boot_pgdir+0xd7>
f013020f:	68 94 c9 13 f0       	push   $0xf013c994
f0130214:	68 12 c8 13 f0       	push   $0xf013c812
f0130219:	68 04 01 00 00       	push   $0x104
f013021e:	68 27 c8 13 f0       	push   $0xf013c827
f0130223:	e8 d3 ff fc ff       	call   f01001fb <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130228:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f013022f:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130236:	76 83                	jbe    f01301bb <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130238:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013023f:	e9 af 00 00 00       	jmp    f01302f3 <check_boot_pgdir+0x1a2>
		switch (i) {
f0130244:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130247:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f013024c:	74 11                	je     f013025f <check_boot_pgdir+0x10e>
f013024e:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130253:	72 36                	jb     f013028b <check_boot_pgdir+0x13a>
f0130255:	2d bd 03 00 00       	sub    $0x3bd,%eax
f013025a:	83 f8 02             	cmp    $0x2,%eax
f013025d:	77 2c                	ja     f013028b <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f013025f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130264:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130267:	c1 e2 02             	shl    $0x2,%edx
f013026a:	01 d0                	add    %edx,%eax
f013026c:	8b 00                	mov    (%eax),%eax
f013026e:	85 c0                	test   %eax,%eax
f0130270:	75 7a                	jne    f01302ec <check_boot_pgdir+0x19b>
f0130272:	68 16 ca 13 f0       	push   $0xf013ca16
f0130277:	68 12 c8 13 f0       	push   $0xf013c812
f013027c:	68 0f 01 00 00       	push   $0x10f
f0130281:	68 27 c8 13 f0       	push   $0xf013c827
f0130286:	e8 70 ff fc ff       	call   f01001fb <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f013028b:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130292:	76 2c                	jbe    f01302c0 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130294:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013029c:	c1 e2 02             	shl    $0x2,%edx
f013029f:	01 d0                	add    %edx,%eax
f01302a1:	8b 00                	mov    (%eax),%eax
f01302a3:	85 c0                	test   %eax,%eax
f01302a5:	75 48                	jne    f01302ef <check_boot_pgdir+0x19e>
f01302a7:	68 16 ca 13 f0       	push   $0xf013ca16
f01302ac:	68 12 c8 13 f0       	push   $0xf013c812
f01302b1:	68 13 01 00 00       	push   $0x113
f01302b6:	68 27 c8 13 f0       	push   $0xf013c827
f01302bb:	e8 3b ff fc ff       	call   f01001fb <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01302c0:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01302c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01302c8:	c1 e2 02             	shl    $0x2,%edx
f01302cb:	01 d0                	add    %edx,%eax
f01302cd:	8b 00                	mov    (%eax),%eax
f01302cf:	85 c0                	test   %eax,%eax
f01302d1:	74 1c                	je     f01302ef <check_boot_pgdir+0x19e>
f01302d3:	68 2c ca 13 f0       	push   $0xf013ca2c
f01302d8:	68 12 c8 13 f0       	push   $0xf013c812
f01302dd:	68 15 01 00 00       	push   $0x115
f01302e2:	68 27 c8 13 f0       	push   $0xf013c827
f01302e7:	e8 0f ff fc ff       	call   f01001fb <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01302ec:	90                   	nop
f01302ed:	eb 01                	jmp    f01302f0 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01302ef:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01302f0:	ff 45 f4             	incl   -0xc(%ebp)
f01302f3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01302fa:	0f 86 44 ff ff ff    	jbe    f0130244 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130300:	83 ec 0c             	sub    $0xc,%esp
f0130303:	68 48 ca 13 f0       	push   $0xf013ca48
f0130308:	e8 75 09 fd ff       	call   f0100c82 <cprintf>
f013030d:	83 c4 10             	add    $0x10,%esp
}
f0130310:	90                   	nop
f0130311:	c9                   	leave  
f0130312:	c3                   	ret    

f0130313 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130313:	55                   	push   %ebp
f0130314:	89 e5                	mov    %esp,%ebp
f0130316:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130319:	8b 45 0c             	mov    0xc(%ebp),%eax
f013031c:	c1 e8 16             	shr    $0x16,%eax
f013031f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130326:	8b 45 08             	mov    0x8(%ebp),%eax
f0130329:	01 d0                	add    %edx,%eax
f013032b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f013032e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130331:	8b 00                	mov    (%eax),%eax
f0130333:	83 e0 01             	and    $0x1,%eax
f0130336:	85 c0                	test   %eax,%eax
f0130338:	75 0a                	jne    f0130344 <check_va2pa+0x31>
		return ~0;
f013033a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013033f:	e9 87 00 00 00       	jmp    f01303cb <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130344:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130347:	8b 00                	mov    (%eax),%eax
f0130349:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f013034e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130351:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130354:	c1 e8 0c             	shr    $0xc,%eax
f0130357:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013035a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f013035f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130362:	72 17                	jb     f013037b <check_va2pa+0x68>
f0130364:	ff 75 f0             	pushl  -0x10(%ebp)
f0130367:	68 68 ca 13 f0       	push   $0xf013ca68
f013036c:	68 2b 01 00 00       	push   $0x12b
f0130371:	68 27 c8 13 f0       	push   $0xf013c827
f0130376:	e8 80 fe fc ff       	call   f01001fb <_panic>
f013037b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013037e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130383:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130386:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130389:	c1 e8 0c             	shr    $0xc,%eax
f013038c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130391:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130398:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013039b:	01 d0                	add    %edx,%eax
f013039d:	8b 00                	mov    (%eax),%eax
f013039f:	83 e0 01             	and    $0x1,%eax
f01303a2:	85 c0                	test   %eax,%eax
f01303a4:	75 07                	jne    f01303ad <check_va2pa+0x9a>
		return ~0;
f01303a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01303ab:	eb 1e                	jmp    f01303cb <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f01303ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303b0:	c1 e8 0c             	shr    $0xc,%eax
f01303b3:	25 ff 03 00 00       	and    $0x3ff,%eax
f01303b8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01303bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01303c2:	01 d0                	add    %edx,%eax
f01303c4:	8b 00                	mov    (%eax),%eax
f01303c6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01303cb:	c9                   	leave  
f01303cc:	c3                   	ret    

f01303cd <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01303cd:	55                   	push   %ebp
f01303ce:	89 e5                	mov    %esp,%ebp
f01303d0:	53                   	push   %ebx
f01303d1:	83 ec 14             	sub    $0x14,%esp
f01303d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01303d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01303da:	8b 45 14             	mov    0x14(%ebp),%eax
f01303dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01303e0:	8b 45 18             	mov    0x18(%ebp),%eax
f01303e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01303e8:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01303eb:	77 55                	ja     f0130442 <printnum+0x75>
f01303ed:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01303f0:	72 05                	jb     f01303f7 <printnum+0x2a>
f01303f2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01303f5:	77 4b                	ja     f0130442 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01303f7:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01303fa:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01303fd:	8b 45 18             	mov    0x18(%ebp),%eax
f0130400:	ba 00 00 00 00       	mov    $0x0,%edx
f0130405:	52                   	push   %edx
f0130406:	50                   	push   %eax
f0130407:	ff 75 f4             	pushl  -0xc(%ebp)
f013040a:	ff 75 f0             	pushl  -0x10(%ebp)
f013040d:	e8 0a 28 00 00       	call   f0132c1c <__udivdi3>
f0130412:	83 c4 10             	add    $0x10,%esp
f0130415:	83 ec 04             	sub    $0x4,%esp
f0130418:	ff 75 20             	pushl  0x20(%ebp)
f013041b:	53                   	push   %ebx
f013041c:	ff 75 18             	pushl  0x18(%ebp)
f013041f:	52                   	push   %edx
f0130420:	50                   	push   %eax
f0130421:	ff 75 0c             	pushl  0xc(%ebp)
f0130424:	ff 75 08             	pushl  0x8(%ebp)
f0130427:	e8 a1 ff ff ff       	call   f01303cd <printnum>
f013042c:	83 c4 20             	add    $0x20,%esp
f013042f:	eb 1a                	jmp    f013044b <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130431:	83 ec 08             	sub    $0x8,%esp
f0130434:	ff 75 0c             	pushl  0xc(%ebp)
f0130437:	ff 75 20             	pushl  0x20(%ebp)
f013043a:	8b 45 08             	mov    0x8(%ebp),%eax
f013043d:	ff d0                	call   *%eax
f013043f:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130442:	ff 4d 1c             	decl   0x1c(%ebp)
f0130445:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130449:	7f e6                	jg     f0130431 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f013044b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f013044e:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130453:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130456:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130459:	53                   	push   %ebx
f013045a:	51                   	push   %ecx
f013045b:	52                   	push   %edx
f013045c:	50                   	push   %eax
f013045d:	e8 ca 28 00 00       	call   f0132d2c <__umoddi3>
f0130462:	83 c4 10             	add    $0x10,%esp
f0130465:	05 b4 cc 13 f0       	add    $0xf013ccb4,%eax
f013046a:	8a 00                	mov    (%eax),%al
f013046c:	0f be c0             	movsbl %al,%eax
f013046f:	83 ec 08             	sub    $0x8,%esp
f0130472:	ff 75 0c             	pushl  0xc(%ebp)
f0130475:	50                   	push   %eax
f0130476:	8b 45 08             	mov    0x8(%ebp),%eax
f0130479:	ff d0                	call   *%eax
f013047b:	83 c4 10             	add    $0x10,%esp
}
f013047e:	90                   	nop
f013047f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130482:	c9                   	leave  
f0130483:	c3                   	ret    

f0130484 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130484:	55                   	push   %ebp
f0130485:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130487:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f013048b:	7e 1c                	jle    f01304a9 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f013048d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130490:	8b 00                	mov    (%eax),%eax
f0130492:	8d 50 08             	lea    0x8(%eax),%edx
f0130495:	8b 45 08             	mov    0x8(%ebp),%eax
f0130498:	89 10                	mov    %edx,(%eax)
f013049a:	8b 45 08             	mov    0x8(%ebp),%eax
f013049d:	8b 00                	mov    (%eax),%eax
f013049f:	83 e8 08             	sub    $0x8,%eax
f01304a2:	8b 50 04             	mov    0x4(%eax),%edx
f01304a5:	8b 00                	mov    (%eax),%eax
f01304a7:	eb 40                	jmp    f01304e9 <getuint+0x65>
	else if (lflag)
f01304a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01304ad:	74 1e                	je     f01304cd <getuint+0x49>
		return va_arg(*ap, unsigned long);
f01304af:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b2:	8b 00                	mov    (%eax),%eax
f01304b4:	8d 50 04             	lea    0x4(%eax),%edx
f01304b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ba:	89 10                	mov    %edx,(%eax)
f01304bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01304bf:	8b 00                	mov    (%eax),%eax
f01304c1:	83 e8 04             	sub    $0x4,%eax
f01304c4:	8b 00                	mov    (%eax),%eax
f01304c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01304cb:	eb 1c                	jmp    f01304e9 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01304cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01304d0:	8b 00                	mov    (%eax),%eax
f01304d2:	8d 50 04             	lea    0x4(%eax),%edx
f01304d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01304d8:	89 10                	mov    %edx,(%eax)
f01304da:	8b 45 08             	mov    0x8(%ebp),%eax
f01304dd:	8b 00                	mov    (%eax),%eax
f01304df:	83 e8 04             	sub    $0x4,%eax
f01304e2:	8b 00                	mov    (%eax),%eax
f01304e4:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01304e9:	5d                   	pop    %ebp
f01304ea:	c3                   	ret    

f01304eb <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01304eb:	55                   	push   %ebp
f01304ec:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01304ee:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01304f2:	7e 1c                	jle    f0130510 <getint+0x25>
		return va_arg(*ap, long long);
f01304f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01304f7:	8b 00                	mov    (%eax),%eax
f01304f9:	8d 50 08             	lea    0x8(%eax),%edx
f01304fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ff:	89 10                	mov    %edx,(%eax)
f0130501:	8b 45 08             	mov    0x8(%ebp),%eax
f0130504:	8b 00                	mov    (%eax),%eax
f0130506:	83 e8 08             	sub    $0x8,%eax
f0130509:	8b 50 04             	mov    0x4(%eax),%edx
f013050c:	8b 00                	mov    (%eax),%eax
f013050e:	eb 38                	jmp    f0130548 <getint+0x5d>
	else if (lflag)
f0130510:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130514:	74 1a                	je     f0130530 <getint+0x45>
		return va_arg(*ap, long);
f0130516:	8b 45 08             	mov    0x8(%ebp),%eax
f0130519:	8b 00                	mov    (%eax),%eax
f013051b:	8d 50 04             	lea    0x4(%eax),%edx
f013051e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130521:	89 10                	mov    %edx,(%eax)
f0130523:	8b 45 08             	mov    0x8(%ebp),%eax
f0130526:	8b 00                	mov    (%eax),%eax
f0130528:	83 e8 04             	sub    $0x4,%eax
f013052b:	8b 00                	mov    (%eax),%eax
f013052d:	99                   	cltd   
f013052e:	eb 18                	jmp    f0130548 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130530:	8b 45 08             	mov    0x8(%ebp),%eax
f0130533:	8b 00                	mov    (%eax),%eax
f0130535:	8d 50 04             	lea    0x4(%eax),%edx
f0130538:	8b 45 08             	mov    0x8(%ebp),%eax
f013053b:	89 10                	mov    %edx,(%eax)
f013053d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130540:	8b 00                	mov    (%eax),%eax
f0130542:	83 e8 04             	sub    $0x4,%eax
f0130545:	8b 00                	mov    (%eax),%eax
f0130547:	99                   	cltd   
}
f0130548:	5d                   	pop    %ebp
f0130549:	c3                   	ret    

f013054a <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f013054a:	55                   	push   %ebp
f013054b:	89 e5                	mov    %esp,%ebp
f013054d:	56                   	push   %esi
f013054e:	53                   	push   %ebx
f013054f:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130552:	eb 17                	jmp    f013056b <vprintfmt+0x21>
			if (ch == '\0')
f0130554:	85 db                	test   %ebx,%ebx
f0130556:	0f 84 af 03 00 00    	je     f013090b <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f013055c:	83 ec 08             	sub    $0x8,%esp
f013055f:	ff 75 0c             	pushl  0xc(%ebp)
f0130562:	53                   	push   %ebx
f0130563:	8b 45 08             	mov    0x8(%ebp),%eax
f0130566:	ff d0                	call   *%eax
f0130568:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013056b:	8b 45 10             	mov    0x10(%ebp),%eax
f013056e:	8d 50 01             	lea    0x1(%eax),%edx
f0130571:	89 55 10             	mov    %edx,0x10(%ebp)
f0130574:	8a 00                	mov    (%eax),%al
f0130576:	0f b6 d8             	movzbl %al,%ebx
f0130579:	83 fb 25             	cmp    $0x25,%ebx
f013057c:	75 d6                	jne    f0130554 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f013057e:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130582:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130589:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130590:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130597:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f013059e:	8b 45 10             	mov    0x10(%ebp),%eax
f01305a1:	8d 50 01             	lea    0x1(%eax),%edx
f01305a4:	89 55 10             	mov    %edx,0x10(%ebp)
f01305a7:	8a 00                	mov    (%eax),%al
f01305a9:	0f b6 d8             	movzbl %al,%ebx
f01305ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
f01305af:	83 f8 55             	cmp    $0x55,%eax
f01305b2:	0f 87 2b 03 00 00    	ja     f01308e3 <vprintfmt+0x399>
f01305b8:	8b 04 85 d8 cc 13 f0 	mov    -0xfec3328(,%eax,4),%eax
f01305bf:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01305c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01305c5:	eb d7                	jmp    f013059e <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01305c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01305cb:	eb d1                	jmp    f013059e <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01305cd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01305d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01305d7:	89 d0                	mov    %edx,%eax
f01305d9:	c1 e0 02             	shl    $0x2,%eax
f01305dc:	01 d0                	add    %edx,%eax
f01305de:	01 c0                	add    %eax,%eax
f01305e0:	01 d8                	add    %ebx,%eax
f01305e2:	83 e8 30             	sub    $0x30,%eax
f01305e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01305e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01305eb:	8a 00                	mov    (%eax),%al
f01305ed:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01305f0:	83 fb 2f             	cmp    $0x2f,%ebx
f01305f3:	7e 3e                	jle    f0130633 <vprintfmt+0xe9>
f01305f5:	83 fb 39             	cmp    $0x39,%ebx
f01305f8:	7f 39                	jg     f0130633 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01305fa:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01305fd:	eb d5                	jmp    f01305d4 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01305ff:	8b 45 14             	mov    0x14(%ebp),%eax
f0130602:	83 c0 04             	add    $0x4,%eax
f0130605:	89 45 14             	mov    %eax,0x14(%ebp)
f0130608:	8b 45 14             	mov    0x14(%ebp),%eax
f013060b:	83 e8 04             	sub    $0x4,%eax
f013060e:	8b 00                	mov    (%eax),%eax
f0130610:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130613:	eb 1f                	jmp    f0130634 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130615:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130619:	79 83                	jns    f013059e <vprintfmt+0x54>
				width = 0;
f013061b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130622:	e9 77 ff ff ff       	jmp    f013059e <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130627:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f013062e:	e9 6b ff ff ff       	jmp    f013059e <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130633:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130634:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130638:	0f 89 60 ff ff ff    	jns    f013059e <vprintfmt+0x54>
				width = precision, precision = -1;
f013063e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130641:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130644:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f013064b:	e9 4e ff ff ff       	jmp    f013059e <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130650:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130653:	e9 46 ff ff ff       	jmp    f013059e <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0130658:	8b 45 14             	mov    0x14(%ebp),%eax
f013065b:	83 c0 04             	add    $0x4,%eax
f013065e:	89 45 14             	mov    %eax,0x14(%ebp)
f0130661:	8b 45 14             	mov    0x14(%ebp),%eax
f0130664:	83 e8 04             	sub    $0x4,%eax
f0130667:	8b 00                	mov    (%eax),%eax
f0130669:	83 ec 08             	sub    $0x8,%esp
f013066c:	ff 75 0c             	pushl  0xc(%ebp)
f013066f:	50                   	push   %eax
f0130670:	8b 45 08             	mov    0x8(%ebp),%eax
f0130673:	ff d0                	call   *%eax
f0130675:	83 c4 10             	add    $0x10,%esp
			break;
f0130678:	e9 89 02 00 00       	jmp    f0130906 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f013067d:	8b 45 14             	mov    0x14(%ebp),%eax
f0130680:	83 c0 04             	add    $0x4,%eax
f0130683:	89 45 14             	mov    %eax,0x14(%ebp)
f0130686:	8b 45 14             	mov    0x14(%ebp),%eax
f0130689:	83 e8 04             	sub    $0x4,%eax
f013068c:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f013068e:	85 db                	test   %ebx,%ebx
f0130690:	79 02                	jns    f0130694 <vprintfmt+0x14a>
				err = -err;
f0130692:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130694:	83 fb 64             	cmp    $0x64,%ebx
f0130697:	7f 0b                	jg     f01306a4 <vprintfmt+0x15a>
f0130699:	8b 34 9d 20 cb 13 f0 	mov    -0xfec34e0(,%ebx,4),%esi
f01306a0:	85 f6                	test   %esi,%esi
f01306a2:	75 19                	jne    f01306bd <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f01306a4:	53                   	push   %ebx
f01306a5:	68 c5 cc 13 f0       	push   $0xf013ccc5
f01306aa:	ff 75 0c             	pushl  0xc(%ebp)
f01306ad:	ff 75 08             	pushl  0x8(%ebp)
f01306b0:	e8 5e 02 00 00       	call   f0130913 <printfmt>
f01306b5:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01306b8:	e9 49 02 00 00       	jmp    f0130906 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01306bd:	56                   	push   %esi
f01306be:	68 ce cc 13 f0       	push   $0xf013ccce
f01306c3:	ff 75 0c             	pushl  0xc(%ebp)
f01306c6:	ff 75 08             	pushl  0x8(%ebp)
f01306c9:	e8 45 02 00 00       	call   f0130913 <printfmt>
f01306ce:	83 c4 10             	add    $0x10,%esp
			break;
f01306d1:	e9 30 02 00 00       	jmp    f0130906 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01306d6:	8b 45 14             	mov    0x14(%ebp),%eax
f01306d9:	83 c0 04             	add    $0x4,%eax
f01306dc:	89 45 14             	mov    %eax,0x14(%ebp)
f01306df:	8b 45 14             	mov    0x14(%ebp),%eax
f01306e2:	83 e8 04             	sub    $0x4,%eax
f01306e5:	8b 30                	mov    (%eax),%esi
f01306e7:	85 f6                	test   %esi,%esi
f01306e9:	75 05                	jne    f01306f0 <vprintfmt+0x1a6>
				p = "(null)";
f01306eb:	be d1 cc 13 f0       	mov    $0xf013ccd1,%esi
			if (width > 0 && padc != '-')
f01306f0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01306f4:	7e 6d                	jle    f0130763 <vprintfmt+0x219>
f01306f6:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01306fa:	74 67                	je     f0130763 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01306fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01306ff:	83 ec 08             	sub    $0x8,%esp
f0130702:	50                   	push   %eax
f0130703:	56                   	push   %esi
f0130704:	e8 12 05 00 00       	call   f0130c1b <strnlen>
f0130709:	83 c4 10             	add    $0x10,%esp
f013070c:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f013070f:	eb 16                	jmp    f0130727 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130711:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130715:	83 ec 08             	sub    $0x8,%esp
f0130718:	ff 75 0c             	pushl  0xc(%ebp)
f013071b:	50                   	push   %eax
f013071c:	8b 45 08             	mov    0x8(%ebp),%eax
f013071f:	ff d0                	call   *%eax
f0130721:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130724:	ff 4d e4             	decl   -0x1c(%ebp)
f0130727:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013072b:	7f e4                	jg     f0130711 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013072d:	eb 34                	jmp    f0130763 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013072f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130733:	74 1c                	je     f0130751 <vprintfmt+0x207>
f0130735:	83 fb 1f             	cmp    $0x1f,%ebx
f0130738:	7e 05                	jle    f013073f <vprintfmt+0x1f5>
f013073a:	83 fb 7e             	cmp    $0x7e,%ebx
f013073d:	7e 12                	jle    f0130751 <vprintfmt+0x207>
					putch('?', putdat);
f013073f:	83 ec 08             	sub    $0x8,%esp
f0130742:	ff 75 0c             	pushl  0xc(%ebp)
f0130745:	6a 3f                	push   $0x3f
f0130747:	8b 45 08             	mov    0x8(%ebp),%eax
f013074a:	ff d0                	call   *%eax
f013074c:	83 c4 10             	add    $0x10,%esp
f013074f:	eb 0f                	jmp    f0130760 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130751:	83 ec 08             	sub    $0x8,%esp
f0130754:	ff 75 0c             	pushl  0xc(%ebp)
f0130757:	53                   	push   %ebx
f0130758:	8b 45 08             	mov    0x8(%ebp),%eax
f013075b:	ff d0                	call   *%eax
f013075d:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130760:	ff 4d e4             	decl   -0x1c(%ebp)
f0130763:	89 f0                	mov    %esi,%eax
f0130765:	8d 70 01             	lea    0x1(%eax),%esi
f0130768:	8a 00                	mov    (%eax),%al
f013076a:	0f be d8             	movsbl %al,%ebx
f013076d:	85 db                	test   %ebx,%ebx
f013076f:	74 24                	je     f0130795 <vprintfmt+0x24b>
f0130771:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130775:	78 b8                	js     f013072f <vprintfmt+0x1e5>
f0130777:	ff 4d e0             	decl   -0x20(%ebp)
f013077a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013077e:	79 af                	jns    f013072f <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130780:	eb 13                	jmp    f0130795 <vprintfmt+0x24b>
				putch(' ', putdat);
f0130782:	83 ec 08             	sub    $0x8,%esp
f0130785:	ff 75 0c             	pushl  0xc(%ebp)
f0130788:	6a 20                	push   $0x20
f013078a:	8b 45 08             	mov    0x8(%ebp),%eax
f013078d:	ff d0                	call   *%eax
f013078f:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130792:	ff 4d e4             	decl   -0x1c(%ebp)
f0130795:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130799:	7f e7                	jg     f0130782 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f013079b:	e9 66 01 00 00       	jmp    f0130906 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01307a0:	83 ec 08             	sub    $0x8,%esp
f01307a3:	ff 75 e8             	pushl  -0x18(%ebp)
f01307a6:	8d 45 14             	lea    0x14(%ebp),%eax
f01307a9:	50                   	push   %eax
f01307aa:	e8 3c fd ff ff       	call   f01304eb <getint>
f01307af:	83 c4 10             	add    $0x10,%esp
f01307b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01307b5:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01307b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307be:	85 d2                	test   %edx,%edx
f01307c0:	79 23                	jns    f01307e5 <vprintfmt+0x29b>
				putch('-', putdat);
f01307c2:	83 ec 08             	sub    $0x8,%esp
f01307c5:	ff 75 0c             	pushl  0xc(%ebp)
f01307c8:	6a 2d                	push   $0x2d
f01307ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01307cd:	ff d0                	call   *%eax
f01307cf:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01307d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307d8:	f7 d8                	neg    %eax
f01307da:	83 d2 00             	adc    $0x0,%edx
f01307dd:	f7 da                	neg    %edx
f01307df:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01307e2:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01307e5:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01307ec:	e9 bc 00 00 00       	jmp    f01308ad <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01307f1:	83 ec 08             	sub    $0x8,%esp
f01307f4:	ff 75 e8             	pushl  -0x18(%ebp)
f01307f7:	8d 45 14             	lea    0x14(%ebp),%eax
f01307fa:	50                   	push   %eax
f01307fb:	e8 84 fc ff ff       	call   f0130484 <getuint>
f0130800:	83 c4 10             	add    $0x10,%esp
f0130803:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130806:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130809:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130810:	e9 98 00 00 00       	jmp    f01308ad <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0130815:	83 ec 08             	sub    $0x8,%esp
f0130818:	ff 75 0c             	pushl  0xc(%ebp)
f013081b:	6a 58                	push   $0x58
f013081d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130820:	ff d0                	call   *%eax
f0130822:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130825:	83 ec 08             	sub    $0x8,%esp
f0130828:	ff 75 0c             	pushl  0xc(%ebp)
f013082b:	6a 58                	push   $0x58
f013082d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130830:	ff d0                	call   *%eax
f0130832:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0130835:	83 ec 08             	sub    $0x8,%esp
f0130838:	ff 75 0c             	pushl  0xc(%ebp)
f013083b:	6a 58                	push   $0x58
f013083d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130840:	ff d0                	call   *%eax
f0130842:	83 c4 10             	add    $0x10,%esp
			break;
f0130845:	e9 bc 00 00 00       	jmp    f0130906 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f013084a:	83 ec 08             	sub    $0x8,%esp
f013084d:	ff 75 0c             	pushl  0xc(%ebp)
f0130850:	6a 30                	push   $0x30
f0130852:	8b 45 08             	mov    0x8(%ebp),%eax
f0130855:	ff d0                	call   *%eax
f0130857:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f013085a:	83 ec 08             	sub    $0x8,%esp
f013085d:	ff 75 0c             	pushl  0xc(%ebp)
f0130860:	6a 78                	push   $0x78
f0130862:	8b 45 08             	mov    0x8(%ebp),%eax
f0130865:	ff d0                	call   *%eax
f0130867:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f013086a:	8b 45 14             	mov    0x14(%ebp),%eax
f013086d:	83 c0 04             	add    $0x4,%eax
f0130870:	89 45 14             	mov    %eax,0x14(%ebp)
f0130873:	8b 45 14             	mov    0x14(%ebp),%eax
f0130876:	83 e8 04             	sub    $0x4,%eax
f0130879:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f013087b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013087e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0130885:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f013088c:	eb 1f                	jmp    f01308ad <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f013088e:	83 ec 08             	sub    $0x8,%esp
f0130891:	ff 75 e8             	pushl  -0x18(%ebp)
f0130894:	8d 45 14             	lea    0x14(%ebp),%eax
f0130897:	50                   	push   %eax
f0130898:	e8 e7 fb ff ff       	call   f0130484 <getuint>
f013089d:	83 c4 10             	add    $0x10,%esp
f01308a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01308a3:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01308a6:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01308ad:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01308b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01308b4:	83 ec 04             	sub    $0x4,%esp
f01308b7:	52                   	push   %edx
f01308b8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01308bb:	50                   	push   %eax
f01308bc:	ff 75 f4             	pushl  -0xc(%ebp)
f01308bf:	ff 75 f0             	pushl  -0x10(%ebp)
f01308c2:	ff 75 0c             	pushl  0xc(%ebp)
f01308c5:	ff 75 08             	pushl  0x8(%ebp)
f01308c8:	e8 00 fb ff ff       	call   f01303cd <printnum>
f01308cd:	83 c4 20             	add    $0x20,%esp
			break;
f01308d0:	eb 34                	jmp    f0130906 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01308d2:	83 ec 08             	sub    $0x8,%esp
f01308d5:	ff 75 0c             	pushl  0xc(%ebp)
f01308d8:	53                   	push   %ebx
f01308d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01308dc:	ff d0                	call   *%eax
f01308de:	83 c4 10             	add    $0x10,%esp
			break;
f01308e1:	eb 23                	jmp    f0130906 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01308e3:	83 ec 08             	sub    $0x8,%esp
f01308e6:	ff 75 0c             	pushl  0xc(%ebp)
f01308e9:	6a 25                	push   $0x25
f01308eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01308ee:	ff d0                	call   *%eax
f01308f0:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01308f3:	ff 4d 10             	decl   0x10(%ebp)
f01308f6:	eb 03                	jmp    f01308fb <vprintfmt+0x3b1>
f01308f8:	ff 4d 10             	decl   0x10(%ebp)
f01308fb:	8b 45 10             	mov    0x10(%ebp),%eax
f01308fe:	48                   	dec    %eax
f01308ff:	8a 00                	mov    (%eax),%al
f0130901:	3c 25                	cmp    $0x25,%al
f0130903:	75 f3                	jne    f01308f8 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0130905:	90                   	nop
		}
	}
f0130906:	e9 47 fc ff ff       	jmp    f0130552 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f013090b:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f013090c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013090f:	5b                   	pop    %ebx
f0130910:	5e                   	pop    %esi
f0130911:	5d                   	pop    %ebp
f0130912:	c3                   	ret    

f0130913 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130913:	55                   	push   %ebp
f0130914:	89 e5                	mov    %esp,%ebp
f0130916:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130919:	8d 45 10             	lea    0x10(%ebp),%eax
f013091c:	83 c0 04             	add    $0x4,%eax
f013091f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130922:	8b 45 10             	mov    0x10(%ebp),%eax
f0130925:	ff 75 f4             	pushl  -0xc(%ebp)
f0130928:	50                   	push   %eax
f0130929:	ff 75 0c             	pushl  0xc(%ebp)
f013092c:	ff 75 08             	pushl  0x8(%ebp)
f013092f:	e8 16 fc ff ff       	call   f013054a <vprintfmt>
f0130934:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0130937:	90                   	nop
f0130938:	c9                   	leave  
f0130939:	c3                   	ret    

f013093a <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f013093a:	55                   	push   %ebp
f013093b:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f013093d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130940:	8b 40 08             	mov    0x8(%eax),%eax
f0130943:	8d 50 01             	lea    0x1(%eax),%edx
f0130946:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130949:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f013094c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013094f:	8b 10                	mov    (%eax),%edx
f0130951:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130954:	8b 40 04             	mov    0x4(%eax),%eax
f0130957:	39 c2                	cmp    %eax,%edx
f0130959:	73 12                	jae    f013096d <sprintputch+0x33>
		*b->buf++ = ch;
f013095b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013095e:	8b 00                	mov    (%eax),%eax
f0130960:	8d 48 01             	lea    0x1(%eax),%ecx
f0130963:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130966:	89 0a                	mov    %ecx,(%edx)
f0130968:	8b 55 08             	mov    0x8(%ebp),%edx
f013096b:	88 10                	mov    %dl,(%eax)
}
f013096d:	90                   	nop
f013096e:	5d                   	pop    %ebp
f013096f:	c3                   	ret    

f0130970 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130970:	55                   	push   %ebp
f0130971:	89 e5                	mov    %esp,%ebp
f0130973:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0130976:	8b 45 08             	mov    0x8(%ebp),%eax
f0130979:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013097c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013097f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130982:	8b 45 08             	mov    0x8(%ebp),%eax
f0130985:	01 d0                	add    %edx,%eax
f0130987:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013098a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130991:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130995:	74 06                	je     f013099d <vsnprintf+0x2d>
f0130997:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013099b:	7f 07                	jg     f01309a4 <vsnprintf+0x34>
		return -E_INVAL;
f013099d:	b8 03 00 00 00       	mov    $0x3,%eax
f01309a2:	eb 20                	jmp    f01309c4 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01309a4:	ff 75 14             	pushl  0x14(%ebp)
f01309a7:	ff 75 10             	pushl  0x10(%ebp)
f01309aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01309ad:	50                   	push   %eax
f01309ae:	68 3a 09 13 f0       	push   $0xf013093a
f01309b3:	e8 92 fb ff ff       	call   f013054a <vprintfmt>
f01309b8:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01309bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01309be:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01309c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01309c4:	c9                   	leave  
f01309c5:	c3                   	ret    

f01309c6 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01309c6:	55                   	push   %ebp
f01309c7:	89 e5                	mov    %esp,%ebp
f01309c9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01309cc:	8d 45 10             	lea    0x10(%ebp),%eax
f01309cf:	83 c0 04             	add    $0x4,%eax
f01309d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01309d5:	8b 45 10             	mov    0x10(%ebp),%eax
f01309d8:	ff 75 f4             	pushl  -0xc(%ebp)
f01309db:	50                   	push   %eax
f01309dc:	ff 75 0c             	pushl  0xc(%ebp)
f01309df:	ff 75 08             	pushl  0x8(%ebp)
f01309e2:	e8 89 ff ff ff       	call   f0130970 <vsnprintf>
f01309e7:	83 c4 10             	add    $0x10,%esp
f01309ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01309ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01309f0:	c9                   	leave  
f01309f1:	c3                   	ret    

f01309f2 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01309f2:	55                   	push   %ebp
f01309f3:	89 e5                	mov    %esp,%ebp
f01309f5:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01309f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01309fc:	74 13                	je     f0130a11 <readline+0x1f>
		cprintf("%s", prompt);
f01309fe:	83 ec 08             	sub    $0x8,%esp
f0130a01:	ff 75 08             	pushl  0x8(%ebp)
f0130a04:	68 30 ce 13 f0       	push   $0xf013ce30
f0130a09:	e8 74 02 fd ff       	call   f0100c82 <cprintf>
f0130a0e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130a11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130a18:	83 ec 0c             	sub    $0xc,%esp
f0130a1b:	6a 00                	push   $0x0
f0130a1d:	e8 0d 02 fd ff       	call   f0100c2f <iscons>
f0130a22:	83 c4 10             	add    $0x10,%esp
f0130a25:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130a28:	e8 e9 01 fd ff       	call   f0100c16 <getchar>
f0130a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130a30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130a34:	79 22                	jns    f0130a58 <readline+0x66>
			if (c != -E_EOF)
f0130a36:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130a3a:	0f 84 ad 00 00 00    	je     f0130aed <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130a40:	83 ec 08             	sub    $0x8,%esp
f0130a43:	ff 75 ec             	pushl  -0x14(%ebp)
f0130a46:	68 33 ce 13 f0       	push   $0xf013ce33
f0130a4b:	e8 32 02 fd ff       	call   f0100c82 <cprintf>
f0130a50:	83 c4 10             	add    $0x10,%esp
			return;
f0130a53:	e9 95 00 00 00       	jmp    f0130aed <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130a58:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130a5c:	7e 34                	jle    f0130a92 <readline+0xa0>
f0130a5e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130a65:	7f 2b                	jg     f0130a92 <readline+0xa0>
			if (echoing)
f0130a67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130a6b:	74 0e                	je     f0130a7b <readline+0x89>
				cputchar(c);
f0130a6d:	83 ec 0c             	sub    $0xc,%esp
f0130a70:	ff 75 ec             	pushl  -0x14(%ebp)
f0130a73:	e8 87 01 fd ff       	call   f0100bff <cputchar>
f0130a78:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a7e:	8d 50 01             	lea    0x1(%eax),%edx
f0130a81:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130a84:	89 c2                	mov    %eax,%edx
f0130a86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a89:	01 d0                	add    %edx,%eax
f0130a8b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130a8e:	88 10                	mov    %dl,(%eax)
f0130a90:	eb 56                	jmp    f0130ae8 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0130a92:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130a96:	75 1f                	jne    f0130ab7 <readline+0xc5>
f0130a98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130a9c:	7e 19                	jle    f0130ab7 <readline+0xc5>
			if (echoing)
f0130a9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130aa2:	74 0e                	je     f0130ab2 <readline+0xc0>
				cputchar(c);
f0130aa4:	83 ec 0c             	sub    $0xc,%esp
f0130aa7:	ff 75 ec             	pushl  -0x14(%ebp)
f0130aaa:	e8 50 01 fd ff       	call   f0100bff <cputchar>
f0130aaf:	83 c4 10             	add    $0x10,%esp

			i--;
f0130ab2:	ff 4d f4             	decl   -0xc(%ebp)
f0130ab5:	eb 31                	jmp    f0130ae8 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130ab7:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130abb:	74 0a                	je     f0130ac7 <readline+0xd5>
f0130abd:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130ac1:	0f 85 61 ff ff ff    	jne    f0130a28 <readline+0x36>
			if (echoing)
f0130ac7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130acb:	74 0e                	je     f0130adb <readline+0xe9>
				cputchar(c);
f0130acd:	83 ec 0c             	sub    $0xc,%esp
f0130ad0:	ff 75 ec             	pushl  -0x14(%ebp)
f0130ad3:	e8 27 01 fd ff       	call   f0100bff <cputchar>
f0130ad8:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130adb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130ade:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ae1:	01 d0                	add    %edx,%eax
f0130ae3:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130ae6:	eb 06                	jmp    f0130aee <readline+0xfc>
		}
	}
f0130ae8:	e9 3b ff ff ff       	jmp    f0130a28 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130aed:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130aee:	c9                   	leave  
f0130aef:	c3                   	ret    

f0130af0 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130af0:	55                   	push   %ebp
f0130af1:	89 e5                	mov    %esp,%ebp
f0130af3:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130af6:	e8 4f bf fd ff       	call   f010ca4a <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130afb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130aff:	74 13                	je     f0130b14 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130b01:	83 ec 08             	sub    $0x8,%esp
f0130b04:	ff 75 08             	pushl  0x8(%ebp)
f0130b07:	68 30 ce 13 f0       	push   $0xf013ce30
f0130b0c:	e8 71 01 fd ff       	call   f0100c82 <cprintf>
f0130b11:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130b14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130b1b:	83 ec 0c             	sub    $0xc,%esp
f0130b1e:	6a 00                	push   $0x0
f0130b20:	e8 0a 01 fd ff       	call   f0100c2f <iscons>
f0130b25:	83 c4 10             	add    $0x10,%esp
f0130b28:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130b2b:	e8 e6 00 fd ff       	call   f0100c16 <getchar>
f0130b30:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130b33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130b37:	79 23                	jns    f0130b5c <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130b39:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130b3d:	74 13                	je     f0130b52 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130b3f:	83 ec 08             	sub    $0x8,%esp
f0130b42:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b45:	68 33 ce 13 f0       	push   $0xf013ce33
f0130b4a:	e8 33 01 fd ff       	call   f0100c82 <cprintf>
f0130b4f:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130b52:	e8 0d bf fd ff       	call   f010ca64 <sys_enable_interrupt>
			return;
f0130b57:	e9 9a 00 00 00       	jmp    f0130bf6 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130b5c:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130b60:	7e 34                	jle    f0130b96 <atomic_readline+0xa6>
f0130b62:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130b69:	7f 2b                	jg     f0130b96 <atomic_readline+0xa6>
			if (echoing)
f0130b6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b6f:	74 0e                	je     f0130b7f <atomic_readline+0x8f>
				cputchar(c);
f0130b71:	83 ec 0c             	sub    $0xc,%esp
f0130b74:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b77:	e8 83 00 fd ff       	call   f0100bff <cputchar>
f0130b7c:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b82:	8d 50 01             	lea    0x1(%eax),%edx
f0130b85:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130b88:	89 c2                	mov    %eax,%edx
f0130b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b8d:	01 d0                	add    %edx,%eax
f0130b8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130b92:	88 10                	mov    %dl,(%eax)
f0130b94:	eb 5b                	jmp    f0130bf1 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130b96:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130b9a:	75 1f                	jne    f0130bbb <atomic_readline+0xcb>
f0130b9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ba0:	7e 19                	jle    f0130bbb <atomic_readline+0xcb>
			if (echoing)
f0130ba2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130ba6:	74 0e                	je     f0130bb6 <atomic_readline+0xc6>
				cputchar(c);
f0130ba8:	83 ec 0c             	sub    $0xc,%esp
f0130bab:	ff 75 ec             	pushl  -0x14(%ebp)
f0130bae:	e8 4c 00 fd ff       	call   f0100bff <cputchar>
f0130bb3:	83 c4 10             	add    $0x10,%esp
			i--;
f0130bb6:	ff 4d f4             	decl   -0xc(%ebp)
f0130bb9:	eb 36                	jmp    f0130bf1 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130bbb:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130bbf:	74 0a                	je     f0130bcb <atomic_readline+0xdb>
f0130bc1:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130bc5:	0f 85 60 ff ff ff    	jne    f0130b2b <atomic_readline+0x3b>
			if (echoing)
f0130bcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130bcf:	74 0e                	je     f0130bdf <atomic_readline+0xef>
				cputchar(c);
f0130bd1:	83 ec 0c             	sub    $0xc,%esp
f0130bd4:	ff 75 ec             	pushl  -0x14(%ebp)
f0130bd7:	e8 23 00 fd ff       	call   f0100bff <cputchar>
f0130bdc:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130bdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130be2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130be5:	01 d0                	add    %edx,%eax
f0130be7:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130bea:	e8 75 be fd ff       	call   f010ca64 <sys_enable_interrupt>
			return;
f0130bef:	eb 05                	jmp    f0130bf6 <atomic_readline+0x106>
		}
	}
f0130bf1:	e9 35 ff ff ff       	jmp    f0130b2b <atomic_readline+0x3b>
}
f0130bf6:	c9                   	leave  
f0130bf7:	c3                   	ret    

f0130bf8 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130bf8:	55                   	push   %ebp
f0130bf9:	89 e5                	mov    %esp,%ebp
f0130bfb:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130bfe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c05:	eb 06                	jmp    f0130c0d <strlen+0x15>
		n++;
f0130c07:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130c0a:	ff 45 08             	incl   0x8(%ebp)
f0130c0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c10:	8a 00                	mov    (%eax),%al
f0130c12:	84 c0                	test   %al,%al
f0130c14:	75 f1                	jne    f0130c07 <strlen+0xf>
		n++;
	return n;
f0130c16:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130c19:	c9                   	leave  
f0130c1a:	c3                   	ret    

f0130c1b <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130c1b:	55                   	push   %ebp
f0130c1c:	89 e5                	mov    %esp,%ebp
f0130c1e:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130c21:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c28:	eb 09                	jmp    f0130c33 <strnlen+0x18>
		n++;
f0130c2a:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130c2d:	ff 45 08             	incl   0x8(%ebp)
f0130c30:	ff 4d 0c             	decl   0xc(%ebp)
f0130c33:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130c37:	74 09                	je     f0130c42 <strnlen+0x27>
f0130c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c3c:	8a 00                	mov    (%eax),%al
f0130c3e:	84 c0                	test   %al,%al
f0130c40:	75 e8                	jne    f0130c2a <strnlen+0xf>
		n++;
	return n;
f0130c42:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130c45:	c9                   	leave  
f0130c46:	c3                   	ret    

f0130c47 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0130c47:	55                   	push   %ebp
f0130c48:	89 e5                	mov    %esp,%ebp
f0130c4a:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130c4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c50:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130c53:	90                   	nop
f0130c54:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c57:	8d 50 01             	lea    0x1(%eax),%edx
f0130c5a:	89 55 08             	mov    %edx,0x8(%ebp)
f0130c5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130c60:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130c63:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130c66:	8a 12                	mov    (%edx),%dl
f0130c68:	88 10                	mov    %dl,(%eax)
f0130c6a:	8a 00                	mov    (%eax),%al
f0130c6c:	84 c0                	test   %al,%al
f0130c6e:	75 e4                	jne    f0130c54 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0130c70:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130c73:	c9                   	leave  
f0130c74:	c3                   	ret    

f0130c75 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0130c75:	55                   	push   %ebp
f0130c76:	89 e5                	mov    %esp,%ebp
f0130c78:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0130c7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0130c81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c88:	eb 1f                	jmp    f0130ca9 <strncpy+0x34>
		*dst++ = *src;
f0130c8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c8d:	8d 50 01             	lea    0x1(%eax),%edx
f0130c90:	89 55 08             	mov    %edx,0x8(%ebp)
f0130c93:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130c96:	8a 12                	mov    (%edx),%dl
f0130c98:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c9d:	8a 00                	mov    (%eax),%al
f0130c9f:	84 c0                	test   %al,%al
f0130ca1:	74 03                	je     f0130ca6 <strncpy+0x31>
			src++;
f0130ca3:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130ca6:	ff 45 fc             	incl   -0x4(%ebp)
f0130ca9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130cac:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130caf:	72 d9                	jb     f0130c8a <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0130cb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130cb4:	c9                   	leave  
f0130cb5:	c3                   	ret    

f0130cb6 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130cb6:	55                   	push   %ebp
f0130cb7:	89 e5                	mov    %esp,%ebp
f0130cb9:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130cbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cbf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130cc2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130cc6:	74 30                	je     f0130cf8 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130cc8:	eb 16                	jmp    f0130ce0 <strlcpy+0x2a>
			*dst++ = *src++;
f0130cca:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ccd:	8d 50 01             	lea    0x1(%eax),%edx
f0130cd0:	89 55 08             	mov    %edx,0x8(%ebp)
f0130cd3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130cd6:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130cd9:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130cdc:	8a 12                	mov    (%edx),%dl
f0130cde:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130ce0:	ff 4d 10             	decl   0x10(%ebp)
f0130ce3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130ce7:	74 09                	je     f0130cf2 <strlcpy+0x3c>
f0130ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130cec:	8a 00                	mov    (%eax),%al
f0130cee:	84 c0                	test   %al,%al
f0130cf0:	75 d8                	jne    f0130cca <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130cf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cf5:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130cf8:	8b 55 08             	mov    0x8(%ebp),%edx
f0130cfb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130cfe:	29 c2                	sub    %eax,%edx
f0130d00:	89 d0                	mov    %edx,%eax
}
f0130d02:	c9                   	leave  
f0130d03:	c3                   	ret    

f0130d04 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130d04:	55                   	push   %ebp
f0130d05:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130d07:	eb 06                	jmp    f0130d0f <strcmp+0xb>
		p++, q++;
f0130d09:	ff 45 08             	incl   0x8(%ebp)
f0130d0c:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130d0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d12:	8a 00                	mov    (%eax),%al
f0130d14:	84 c0                	test   %al,%al
f0130d16:	74 0e                	je     f0130d26 <strcmp+0x22>
f0130d18:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d1b:	8a 10                	mov    (%eax),%dl
f0130d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d20:	8a 00                	mov    (%eax),%al
f0130d22:	38 c2                	cmp    %al,%dl
f0130d24:	74 e3                	je     f0130d09 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130d26:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d29:	8a 00                	mov    (%eax),%al
f0130d2b:	0f b6 d0             	movzbl %al,%edx
f0130d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d31:	8a 00                	mov    (%eax),%al
f0130d33:	0f b6 c0             	movzbl %al,%eax
f0130d36:	29 c2                	sub    %eax,%edx
f0130d38:	89 d0                	mov    %edx,%eax
}
f0130d3a:	5d                   	pop    %ebp
f0130d3b:	c3                   	ret    

f0130d3c <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130d3c:	55                   	push   %ebp
f0130d3d:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130d3f:	eb 09                	jmp    f0130d4a <strncmp+0xe>
		n--, p++, q++;
f0130d41:	ff 4d 10             	decl   0x10(%ebp)
f0130d44:	ff 45 08             	incl   0x8(%ebp)
f0130d47:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0130d4a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130d4e:	74 17                	je     f0130d67 <strncmp+0x2b>
f0130d50:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d53:	8a 00                	mov    (%eax),%al
f0130d55:	84 c0                	test   %al,%al
f0130d57:	74 0e                	je     f0130d67 <strncmp+0x2b>
f0130d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d5c:	8a 10                	mov    (%eax),%dl
f0130d5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d61:	8a 00                	mov    (%eax),%al
f0130d63:	38 c2                	cmp    %al,%dl
f0130d65:	74 da                	je     f0130d41 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0130d67:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130d6b:	75 07                	jne    f0130d74 <strncmp+0x38>
		return 0;
f0130d6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0130d72:	eb 14                	jmp    f0130d88 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0130d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d77:	8a 00                	mov    (%eax),%al
f0130d79:	0f b6 d0             	movzbl %al,%edx
f0130d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d7f:	8a 00                	mov    (%eax),%al
f0130d81:	0f b6 c0             	movzbl %al,%eax
f0130d84:	29 c2                	sub    %eax,%edx
f0130d86:	89 d0                	mov    %edx,%eax
}
f0130d88:	5d                   	pop    %ebp
f0130d89:	c3                   	ret    

f0130d8a <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0130d8a:	55                   	push   %ebp
f0130d8b:	89 e5                	mov    %esp,%ebp
f0130d8d:	83 ec 04             	sub    $0x4,%esp
f0130d90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d93:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130d96:	eb 12                	jmp    f0130daa <strchr+0x20>
		if (*s == c)
f0130d98:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d9b:	8a 00                	mov    (%eax),%al
f0130d9d:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130da0:	75 05                	jne    f0130da7 <strchr+0x1d>
			return (char *) s;
f0130da2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130da5:	eb 11                	jmp    f0130db8 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130da7:	ff 45 08             	incl   0x8(%ebp)
f0130daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dad:	8a 00                	mov    (%eax),%al
f0130daf:	84 c0                	test   %al,%al
f0130db1:	75 e5                	jne    f0130d98 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130db3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130db8:	c9                   	leave  
f0130db9:	c3                   	ret    

f0130dba <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130dba:	55                   	push   %ebp
f0130dbb:	89 e5                	mov    %esp,%ebp
f0130dbd:	83 ec 04             	sub    $0x4,%esp
f0130dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dc3:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130dc6:	eb 0d                	jmp    f0130dd5 <strfind+0x1b>
		if (*s == c)
f0130dc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dcb:	8a 00                	mov    (%eax),%al
f0130dcd:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130dd0:	74 0e                	je     f0130de0 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130dd2:	ff 45 08             	incl   0x8(%ebp)
f0130dd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dd8:	8a 00                	mov    (%eax),%al
f0130dda:	84 c0                	test   %al,%al
f0130ddc:	75 ea                	jne    f0130dc8 <strfind+0xe>
f0130dde:	eb 01                	jmp    f0130de1 <strfind+0x27>
		if (*s == c)
			break;
f0130de0:	90                   	nop
	return (char *) s;
f0130de1:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130de4:	c9                   	leave  
f0130de5:	c3                   	ret    

f0130de6 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130de6:	55                   	push   %ebp
f0130de7:	89 e5                	mov    %esp,%ebp
f0130de9:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130dec:	8b 45 08             	mov    0x8(%ebp),%eax
f0130def:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130df2:	8b 45 10             	mov    0x10(%ebp),%eax
f0130df5:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130df8:	eb 0e                	jmp    f0130e08 <memset+0x22>
		*p++ = c;
f0130dfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0130e00:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130e03:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130e06:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0130e08:	ff 4d f8             	decl   -0x8(%ebp)
f0130e0b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130e0f:	79 e9                	jns    f0130dfa <memset+0x14>
		*p++ = c;

	return v;
f0130e11:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130e14:	c9                   	leave  
f0130e15:	c3                   	ret    

f0130e16 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130e16:	55                   	push   %ebp
f0130e17:	89 e5                	mov    %esp,%ebp
f0130e19:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e25:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0130e28:	eb 16                	jmp    f0130e40 <memcpy+0x2a>
		*d++ = *s++;
f0130e2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e2d:	8d 50 01             	lea    0x1(%eax),%edx
f0130e30:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130e33:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130e36:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130e39:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130e3c:	8a 12                	mov    (%edx),%dl
f0130e3e:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130e40:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e43:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130e46:	89 55 10             	mov    %edx,0x10(%ebp)
f0130e49:	85 c0                	test   %eax,%eax
f0130e4b:	75 dd                	jne    f0130e2a <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130e4d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130e50:	c9                   	leave  
f0130e51:	c3                   	ret    

f0130e52 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130e52:	55                   	push   %ebp
f0130e53:	89 e5                	mov    %esp,%ebp
f0130e55:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130e58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130e5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e61:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130e64:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e67:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130e6a:	73 50                	jae    f0130ebc <memmove+0x6a>
f0130e6c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130e6f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e72:	01 d0                	add    %edx,%eax
f0130e74:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130e77:	76 43                	jbe    f0130ebc <memmove+0x6a>
		s += n;
f0130e79:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e7c:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0130e7f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e82:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0130e85:	eb 10                	jmp    f0130e97 <memmove+0x45>
			*--d = *--s;
f0130e87:	ff 4d f8             	decl   -0x8(%ebp)
f0130e8a:	ff 4d fc             	decl   -0x4(%ebp)
f0130e8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e90:	8a 10                	mov    (%eax),%dl
f0130e92:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e95:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0130e97:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e9a:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130e9d:	89 55 10             	mov    %edx,0x10(%ebp)
f0130ea0:	85 c0                	test   %eax,%eax
f0130ea2:	75 e3                	jne    f0130e87 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0130ea4:	eb 23                	jmp    f0130ec9 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0130ea6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130ea9:	8d 50 01             	lea    0x1(%eax),%edx
f0130eac:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130eaf:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130eb2:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130eb5:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130eb8:	8a 12                	mov    (%edx),%dl
f0130eba:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0130ebc:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ebf:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130ec2:	89 55 10             	mov    %edx,0x10(%ebp)
f0130ec5:	85 c0                	test   %eax,%eax
f0130ec7:	75 dd                	jne    f0130ea6 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0130ec9:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130ecc:	c9                   	leave  
f0130ecd:	c3                   	ret    

f0130ece <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0130ece:	55                   	push   %ebp
f0130ecf:	89 e5                	mov    %esp,%ebp
f0130ed1:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ed7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130eda:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130edd:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130ee0:	eb 2a                	jmp    f0130f0c <memcmp+0x3e>
		if (*s1 != *s2)
f0130ee2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ee5:	8a 10                	mov    (%eax),%dl
f0130ee7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130eea:	8a 00                	mov    (%eax),%al
f0130eec:	38 c2                	cmp    %al,%dl
f0130eee:	74 16                	je     f0130f06 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130ef0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ef3:	8a 00                	mov    (%eax),%al
f0130ef5:	0f b6 d0             	movzbl %al,%edx
f0130ef8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130efb:	8a 00                	mov    (%eax),%al
f0130efd:	0f b6 c0             	movzbl %al,%eax
f0130f00:	29 c2                	sub    %eax,%edx
f0130f02:	89 d0                	mov    %edx,%eax
f0130f04:	eb 18                	jmp    f0130f1e <memcmp+0x50>
		s1++, s2++;
f0130f06:	ff 45 fc             	incl   -0x4(%ebp)
f0130f09:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130f0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f0f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130f12:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f15:	85 c0                	test   %eax,%eax
f0130f17:	75 c9                	jne    f0130ee2 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130f19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130f1e:	c9                   	leave  
f0130f1f:	c3                   	ret    

f0130f20 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130f20:	55                   	push   %ebp
f0130f21:	89 e5                	mov    %esp,%ebp
f0130f23:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0130f26:	8b 55 08             	mov    0x8(%ebp),%edx
f0130f29:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f2c:	01 d0                	add    %edx,%eax
f0130f2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130f31:	eb 15                	jmp    f0130f48 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0130f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f36:	8a 00                	mov    (%eax),%al
f0130f38:	0f b6 d0             	movzbl %al,%edx
f0130f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f3e:	0f b6 c0             	movzbl %al,%eax
f0130f41:	39 c2                	cmp    %eax,%edx
f0130f43:	74 0d                	je     f0130f52 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0130f45:	ff 45 08             	incl   0x8(%ebp)
f0130f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f4b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130f4e:	72 e3                	jb     f0130f33 <memfind+0x13>
f0130f50:	eb 01                	jmp    f0130f53 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130f52:	90                   	nop
	return (void *) s;
f0130f53:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130f56:	c9                   	leave  
f0130f57:	c3                   	ret    

f0130f58 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0130f58:	55                   	push   %ebp
f0130f59:	89 e5                	mov    %esp,%ebp
f0130f5b:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0130f5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0130f65:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130f6c:	eb 03                	jmp    f0130f71 <strtol+0x19>
		s++;
f0130f6e:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130f71:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f74:	8a 00                	mov    (%eax),%al
f0130f76:	3c 20                	cmp    $0x20,%al
f0130f78:	74 f4                	je     f0130f6e <strtol+0x16>
f0130f7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f7d:	8a 00                	mov    (%eax),%al
f0130f7f:	3c 09                	cmp    $0x9,%al
f0130f81:	74 eb                	je     f0130f6e <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0130f83:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f86:	8a 00                	mov    (%eax),%al
f0130f88:	3c 2b                	cmp    $0x2b,%al
f0130f8a:	75 05                	jne    f0130f91 <strtol+0x39>
		s++;
f0130f8c:	ff 45 08             	incl   0x8(%ebp)
f0130f8f:	eb 13                	jmp    f0130fa4 <strtol+0x4c>
	else if (*s == '-')
f0130f91:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f94:	8a 00                	mov    (%eax),%al
f0130f96:	3c 2d                	cmp    $0x2d,%al
f0130f98:	75 0a                	jne    f0130fa4 <strtol+0x4c>
		s++, neg = 1;
f0130f9a:	ff 45 08             	incl   0x8(%ebp)
f0130f9d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0130fa4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fa8:	74 06                	je     f0130fb0 <strtol+0x58>
f0130faa:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0130fae:	75 20                	jne    f0130fd0 <strtol+0x78>
f0130fb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fb3:	8a 00                	mov    (%eax),%al
f0130fb5:	3c 30                	cmp    $0x30,%al
f0130fb7:	75 17                	jne    f0130fd0 <strtol+0x78>
f0130fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fbc:	40                   	inc    %eax
f0130fbd:	8a 00                	mov    (%eax),%al
f0130fbf:	3c 78                	cmp    $0x78,%al
f0130fc1:	75 0d                	jne    f0130fd0 <strtol+0x78>
		s += 2, base = 16;
f0130fc3:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0130fc7:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0130fce:	eb 28                	jmp    f0130ff8 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0130fd0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fd4:	75 15                	jne    f0130feb <strtol+0x93>
f0130fd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fd9:	8a 00                	mov    (%eax),%al
f0130fdb:	3c 30                	cmp    $0x30,%al
f0130fdd:	75 0c                	jne    f0130feb <strtol+0x93>
		s++, base = 8;
f0130fdf:	ff 45 08             	incl   0x8(%ebp)
f0130fe2:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130fe9:	eb 0d                	jmp    f0130ff8 <strtol+0xa0>
	else if (base == 0)
f0130feb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fef:	75 07                	jne    f0130ff8 <strtol+0xa0>
		base = 10;
f0130ff1:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0130ff8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ffb:	8a 00                	mov    (%eax),%al
f0130ffd:	3c 2f                	cmp    $0x2f,%al
f0130fff:	7e 19                	jle    f013101a <strtol+0xc2>
f0131001:	8b 45 08             	mov    0x8(%ebp),%eax
f0131004:	8a 00                	mov    (%eax),%al
f0131006:	3c 39                	cmp    $0x39,%al
f0131008:	7f 10                	jg     f013101a <strtol+0xc2>
			dig = *s - '0';
f013100a:	8b 45 08             	mov    0x8(%ebp),%eax
f013100d:	8a 00                	mov    (%eax),%al
f013100f:	0f be c0             	movsbl %al,%eax
f0131012:	83 e8 30             	sub    $0x30,%eax
f0131015:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131018:	eb 42                	jmp    f013105c <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f013101a:	8b 45 08             	mov    0x8(%ebp),%eax
f013101d:	8a 00                	mov    (%eax),%al
f013101f:	3c 60                	cmp    $0x60,%al
f0131021:	7e 19                	jle    f013103c <strtol+0xe4>
f0131023:	8b 45 08             	mov    0x8(%ebp),%eax
f0131026:	8a 00                	mov    (%eax),%al
f0131028:	3c 7a                	cmp    $0x7a,%al
f013102a:	7f 10                	jg     f013103c <strtol+0xe4>
			dig = *s - 'a' + 10;
f013102c:	8b 45 08             	mov    0x8(%ebp),%eax
f013102f:	8a 00                	mov    (%eax),%al
f0131031:	0f be c0             	movsbl %al,%eax
f0131034:	83 e8 57             	sub    $0x57,%eax
f0131037:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013103a:	eb 20                	jmp    f013105c <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f013103c:	8b 45 08             	mov    0x8(%ebp),%eax
f013103f:	8a 00                	mov    (%eax),%al
f0131041:	3c 40                	cmp    $0x40,%al
f0131043:	7e 39                	jle    f013107e <strtol+0x126>
f0131045:	8b 45 08             	mov    0x8(%ebp),%eax
f0131048:	8a 00                	mov    (%eax),%al
f013104a:	3c 5a                	cmp    $0x5a,%al
f013104c:	7f 30                	jg     f013107e <strtol+0x126>
			dig = *s - 'A' + 10;
f013104e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131051:	8a 00                	mov    (%eax),%al
f0131053:	0f be c0             	movsbl %al,%eax
f0131056:	83 e8 37             	sub    $0x37,%eax
f0131059:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f013105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013105f:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131062:	7d 19                	jge    f013107d <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131064:	ff 45 08             	incl   0x8(%ebp)
f0131067:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013106a:	0f af 45 10          	imul   0x10(%ebp),%eax
f013106e:	89 c2                	mov    %eax,%edx
f0131070:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131073:	01 d0                	add    %edx,%eax
f0131075:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131078:	e9 7b ff ff ff       	jmp    f0130ff8 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f013107d:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f013107e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131082:	74 08                	je     f013108c <strtol+0x134>
		*endptr = (char *) s;
f0131084:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131087:	8b 55 08             	mov    0x8(%ebp),%edx
f013108a:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f013108c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131090:	74 07                	je     f0131099 <strtol+0x141>
f0131092:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131095:	f7 d8                	neg    %eax
f0131097:	eb 03                	jmp    f013109c <strtol+0x144>
f0131099:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f013109c:	c9                   	leave  
f013109d:	c3                   	ret    

f013109e <ltostr>:

void
ltostr(long value, char *str)
{
f013109e:	55                   	push   %ebp
f013109f:	89 e5                	mov    %esp,%ebp
f01310a1:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01310a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01310ab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01310b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01310b6:	79 13                	jns    f01310cb <ltostr+0x2d>
	{
		neg = 1;
f01310b8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01310bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310c2:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01310c5:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01310c8:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01310cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01310ce:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01310d3:	99                   	cltd   
f01310d4:	f7 f9                	idiv   %ecx
f01310d6:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01310d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01310dc:	8d 50 01             	lea    0x1(%eax),%edx
f01310df:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01310e2:	89 c2                	mov    %eax,%edx
f01310e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310e7:	01 d0                	add    %edx,%eax
f01310e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01310ec:	83 c2 30             	add    $0x30,%edx
f01310ef:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f01310f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01310f4:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01310f9:	f7 e9                	imul   %ecx
f01310fb:	c1 fa 02             	sar    $0x2,%edx
f01310fe:	89 c8                	mov    %ecx,%eax
f0131100:	c1 f8 1f             	sar    $0x1f,%eax
f0131103:	29 c2                	sub    %eax,%edx
f0131105:	89 d0                	mov    %edx,%eax
f0131107:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f013110a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f013110d:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131112:	f7 e9                	imul   %ecx
f0131114:	c1 fa 02             	sar    $0x2,%edx
f0131117:	89 c8                	mov    %ecx,%eax
f0131119:	c1 f8 1f             	sar    $0x1f,%eax
f013111c:	29 c2                	sub    %eax,%edx
f013111e:	89 d0                	mov    %edx,%eax
f0131120:	c1 e0 02             	shl    $0x2,%eax
f0131123:	01 d0                	add    %edx,%eax
f0131125:	01 c0                	add    %eax,%eax
f0131127:	29 c1                	sub    %eax,%ecx
f0131129:	89 ca                	mov    %ecx,%edx
f013112b:	85 d2                	test   %edx,%edx
f013112d:	75 9c                	jne    f01310cb <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f013112f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131136:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131139:	48                   	dec    %eax
f013113a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f013113d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131141:	74 3d                	je     f0131180 <ltostr+0xe2>
		start = 1 ;
f0131143:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f013114a:	eb 34                	jmp    f0131180 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f013114c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013114f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131152:	01 d0                	add    %edx,%eax
f0131154:	8a 00                	mov    (%eax),%al
f0131156:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131159:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013115c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013115f:	01 c2                	add    %eax,%edx
f0131161:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131164:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131167:	01 c8                	add    %ecx,%eax
f0131169:	8a 00                	mov    (%eax),%al
f013116b:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f013116d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131170:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131173:	01 c2                	add    %eax,%edx
f0131175:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131178:	88 02                	mov    %al,(%edx)
		start++ ;
f013117a:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f013117d:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131183:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131186:	7c c4                	jl     f013114c <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131188:	8b 55 f8             	mov    -0x8(%ebp),%edx
f013118b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013118e:	01 d0                	add    %edx,%eax
f0131190:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131193:	90                   	nop
f0131194:	c9                   	leave  
f0131195:	c3                   	ret    

f0131196 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131196:	55                   	push   %ebp
f0131197:	89 e5                	mov    %esp,%ebp
f0131199:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f013119c:	ff 75 08             	pushl  0x8(%ebp)
f013119f:	e8 54 fa ff ff       	call   f0130bf8 <strlen>
f01311a4:	83 c4 04             	add    $0x4,%esp
f01311a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01311aa:	ff 75 0c             	pushl  0xc(%ebp)
f01311ad:	e8 46 fa ff ff       	call   f0130bf8 <strlen>
f01311b2:	83 c4 04             	add    $0x4,%esp
f01311b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01311b8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01311bf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01311c6:	eb 17                	jmp    f01311df <strcconcat+0x49>
		final[s] = str1[s] ;
f01311c8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01311cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01311ce:	01 c2                	add    %eax,%edx
f01311d0:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01311d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01311d6:	01 c8                	add    %ecx,%eax
f01311d8:	8a 00                	mov    (%eax),%al
f01311da:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01311dc:	ff 45 fc             	incl   -0x4(%ebp)
f01311df:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01311e5:	7c e1                	jl     f01311c8 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01311e7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01311ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f01311f5:	eb 1f                	jmp    f0131216 <strcconcat+0x80>
		final[s++] = str2[i] ;
f01311f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311fa:	8d 50 01             	lea    0x1(%eax),%edx
f01311fd:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131200:	89 c2                	mov    %eax,%edx
f0131202:	8b 45 10             	mov    0x10(%ebp),%eax
f0131205:	01 c2                	add    %eax,%edx
f0131207:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f013120a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013120d:	01 c8                	add    %ecx,%eax
f013120f:	8a 00                	mov    (%eax),%al
f0131211:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131213:	ff 45 f8             	incl   -0x8(%ebp)
f0131216:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131219:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013121c:	7c d9                	jl     f01311f7 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f013121e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131221:	8b 45 10             	mov    0x10(%ebp),%eax
f0131224:	01 d0                	add    %edx,%eax
f0131226:	c6 00 00             	movb   $0x0,(%eax)
}
f0131229:	90                   	nop
f013122a:	c9                   	leave  
f013122b:	c3                   	ret    

f013122c <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f013122c:	55                   	push   %ebp
f013122d:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f013122f:	8b 45 14             	mov    0x14(%ebp),%eax
f0131232:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131238:	8b 45 14             	mov    0x14(%ebp),%eax
f013123b:	8b 00                	mov    (%eax),%eax
f013123d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131244:	8b 45 10             	mov    0x10(%ebp),%eax
f0131247:	01 d0                	add    %edx,%eax
f0131249:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013124f:	eb 0c                	jmp    f013125d <strsplit+0x31>
			*string++ = 0;
f0131251:	8b 45 08             	mov    0x8(%ebp),%eax
f0131254:	8d 50 01             	lea    0x1(%eax),%edx
f0131257:	89 55 08             	mov    %edx,0x8(%ebp)
f013125a:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013125d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131260:	8a 00                	mov    (%eax),%al
f0131262:	84 c0                	test   %al,%al
f0131264:	74 18                	je     f013127e <strsplit+0x52>
f0131266:	8b 45 08             	mov    0x8(%ebp),%eax
f0131269:	8a 00                	mov    (%eax),%al
f013126b:	0f be c0             	movsbl %al,%eax
f013126e:	50                   	push   %eax
f013126f:	ff 75 0c             	pushl  0xc(%ebp)
f0131272:	e8 13 fb ff ff       	call   f0130d8a <strchr>
f0131277:	83 c4 08             	add    $0x8,%esp
f013127a:	85 c0                	test   %eax,%eax
f013127c:	75 d3                	jne    f0131251 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f013127e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131281:	8a 00                	mov    (%eax),%al
f0131283:	84 c0                	test   %al,%al
f0131285:	74 5a                	je     f01312e1 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131287:	8b 45 14             	mov    0x14(%ebp),%eax
f013128a:	8b 00                	mov    (%eax),%eax
f013128c:	83 f8 0f             	cmp    $0xf,%eax
f013128f:	75 07                	jne    f0131298 <strsplit+0x6c>
		{
			return 0;
f0131291:	b8 00 00 00 00       	mov    $0x0,%eax
f0131296:	eb 66                	jmp    f01312fe <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131298:	8b 45 14             	mov    0x14(%ebp),%eax
f013129b:	8b 00                	mov    (%eax),%eax
f013129d:	8d 48 01             	lea    0x1(%eax),%ecx
f01312a0:	8b 55 14             	mov    0x14(%ebp),%edx
f01312a3:	89 0a                	mov    %ecx,(%edx)
f01312a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01312ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01312af:	01 c2                	add    %eax,%edx
f01312b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b4:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01312b6:	eb 03                	jmp    f01312bb <strsplit+0x8f>
			string++;
f01312b8:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01312bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01312be:	8a 00                	mov    (%eax),%al
f01312c0:	84 c0                	test   %al,%al
f01312c2:	74 8b                	je     f013124f <strsplit+0x23>
f01312c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312c7:	8a 00                	mov    (%eax),%al
f01312c9:	0f be c0             	movsbl %al,%eax
f01312cc:	50                   	push   %eax
f01312cd:	ff 75 0c             	pushl  0xc(%ebp)
f01312d0:	e8 b5 fa ff ff       	call   f0130d8a <strchr>
f01312d5:	83 c4 08             	add    $0x8,%esp
f01312d8:	85 c0                	test   %eax,%eax
f01312da:	74 dc                	je     f01312b8 <strsplit+0x8c>
			string++;
	}
f01312dc:	e9 6e ff ff ff       	jmp    f013124f <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01312e1:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01312e2:	8b 45 14             	mov    0x14(%ebp),%eax
f01312e5:	8b 00                	mov    (%eax),%eax
f01312e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01312ee:	8b 45 10             	mov    0x10(%ebp),%eax
f01312f1:	01 d0                	add    %edx,%eax
f01312f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01312f9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01312fe:	c9                   	leave  
f01312ff:	c3                   	ret    

f0131300 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131300:	55                   	push   %ebp
f0131301:	89 e5                	mov    %esp,%ebp
f0131303:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131306:	90                   	nop
f0131307:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f013130e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131311:	89 c2                	mov    %eax,%edx
f0131313:	ec                   	in     (%dx),%al
f0131314:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131317:	8a 45 f7             	mov    -0x9(%ebp),%al
f013131a:	0f b6 c0             	movzbl %al,%eax
f013131d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131320:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131323:	25 c0 00 00 00       	and    $0xc0,%eax
f0131328:	83 f8 40             	cmp    $0x40,%eax
f013132b:	75 da                	jne    f0131307 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f013132d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131331:	74 11                	je     f0131344 <ide_wait_ready+0x44>
f0131333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131336:	83 e0 21             	and    $0x21,%eax
f0131339:	85 c0                	test   %eax,%eax
f013133b:	74 07                	je     f0131344 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f013133d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131342:	eb 05                	jmp    f0131349 <ide_wait_ready+0x49>
	}
	return 0;
f0131344:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131349:	c9                   	leave  
f013134a:	c3                   	ret    

f013134b <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f013134b:	55                   	push   %ebp
f013134c:	89 e5                	mov    %esp,%ebp
f013134e:	57                   	push   %edi
f013134f:	53                   	push   %ebx
f0131350:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131353:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f013135a:	76 16                	jbe    f0131372 <ide_read+0x27>
f013135c:	68 43 ce 13 f0       	push   $0xf013ce43
f0131361:	68 50 ce 13 f0       	push   $0xf013ce50
f0131366:	6a 25                	push   $0x25
f0131368:	68 65 ce 13 f0       	push   $0xf013ce65
f013136d:	e8 89 ee fc ff       	call   f01001fb <_panic>

	ide_wait_ready(0);
f0131372:	83 ec 0c             	sub    $0xc,%esp
f0131375:	6a 00                	push   $0x0
f0131377:	e8 84 ff ff ff       	call   f0131300 <ide_wait_ready>
f013137c:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f013137f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131382:	0f b6 c0             	movzbl %al,%eax
f0131385:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f013138c:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013138f:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131392:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131395:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131396:	8b 45 08             	mov    0x8(%ebp),%eax
f0131399:	0f b6 c0             	movzbl %al,%eax
f013139c:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01313a3:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01313a6:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01313a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01313ac:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01313ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01313b0:	c1 e8 08             	shr    $0x8,%eax
f01313b3:	0f b6 c0             	movzbl %al,%eax
f01313b6:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01313bd:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01313c0:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01313c3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01313c6:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01313c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01313ca:	c1 e8 10             	shr    $0x10,%eax
f01313cd:	0f b6 c0             	movzbl %al,%eax
f01313d0:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01313d7:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01313da:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01313dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01313e0:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01313e1:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f01313e6:	83 e0 01             	and    $0x1,%eax
f01313e9:	c1 e0 04             	shl    $0x4,%eax
f01313ec:	88 c2                	mov    %al,%dl
f01313ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01313f1:	c1 e8 18             	shr    $0x18,%eax
f01313f4:	83 e0 0f             	and    $0xf,%eax
f01313f7:	09 d0                	or     %edx,%eax
f01313f9:	83 c8 e0             	or     $0xffffffe0,%eax
f01313fc:	0f b6 c0             	movzbl %al,%eax
f01313ff:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131406:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131409:	8a 45 d6             	mov    -0x2a(%ebp),%al
f013140c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013140f:	ee                   	out    %al,(%dx)
f0131410:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131417:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f013141b:	8a 45 d7             	mov    -0x29(%ebp),%al
f013141e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131421:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131422:	eb 55                	jmp    f0131479 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131424:	83 ec 0c             	sub    $0xc,%esp
f0131427:	6a 01                	push   $0x1
f0131429:	e8 d2 fe ff ff       	call   f0131300 <ide_wait_ready>
f013142e:	83 c4 10             	add    $0x10,%esp
f0131431:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131434:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131438:	79 05                	jns    f013143f <ide_read+0xf4>
			return r;
f013143a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013143d:	eb 45                	jmp    f0131484 <ide_read+0x139>
f013143f:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131446:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131449:	89 45 cc             	mov    %eax,-0x34(%ebp)
f013144c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131453:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131456:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131459:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013145c:	89 cb                	mov    %ecx,%ebx
f013145e:	89 df                	mov    %ebx,%edi
f0131460:	89 c1                	mov    %eax,%ecx
f0131462:	fc                   	cld    
f0131463:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131465:	89 c8                	mov    %ecx,%eax
f0131467:	89 fb                	mov    %edi,%ebx
f0131469:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f013146c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013146f:	ff 4d 10             	decl   0x10(%ebp)
f0131472:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131479:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013147d:	75 a5                	jne    f0131424 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f013147f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131484:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131487:	5b                   	pop    %ebx
f0131488:	5f                   	pop    %edi
f0131489:	5d                   	pop    %ebp
f013148a:	c3                   	ret    

f013148b <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f013148b:	55                   	push   %ebp
f013148c:	89 e5                	mov    %esp,%ebp
f013148e:	56                   	push   %esi
f013148f:	53                   	push   %ebx
f0131490:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131493:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f013149a:	76 16                	jbe    f01314b2 <ide_write+0x27>
f013149c:	68 43 ce 13 f0       	push   $0xf013ce43
f01314a1:	68 50 ce 13 f0       	push   $0xf013ce50
f01314a6:	6a 3e                	push   $0x3e
f01314a8:	68 65 ce 13 f0       	push   $0xf013ce65
f01314ad:	e8 49 ed fc ff       	call   f01001fb <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f01314b2:	83 ec 0c             	sub    $0xc,%esp
f01314b5:	6a 00                	push   $0x0
f01314b7:	e8 44 fe ff ff       	call   f0131300 <ide_wait_ready>
f01314bc:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01314bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01314c2:	0f b6 c0             	movzbl %al,%eax
f01314c5:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01314cc:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01314cf:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01314d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01314d5:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01314d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01314d9:	0f b6 c0             	movzbl %al,%eax
f01314dc:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01314e3:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01314e6:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01314e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01314ec:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01314ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01314f0:	c1 e8 08             	shr    $0x8,%eax
f01314f3:	0f b6 c0             	movzbl %al,%eax
f01314f6:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01314fd:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131500:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131503:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131506:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131507:	8b 45 08             	mov    0x8(%ebp),%eax
f013150a:	c1 e8 10             	shr    $0x10,%eax
f013150d:	0f b6 c0             	movzbl %al,%eax
f0131510:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131517:	88 45 d5             	mov    %al,-0x2b(%ebp)
f013151a:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013151d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131520:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131521:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f0131526:	83 e0 01             	and    $0x1,%eax
f0131529:	c1 e0 04             	shl    $0x4,%eax
f013152c:	88 c2                	mov    %al,%dl
f013152e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131531:	c1 e8 18             	shr    $0x18,%eax
f0131534:	83 e0 0f             	and    $0xf,%eax
f0131537:	09 d0                	or     %edx,%eax
f0131539:	83 c8 e0             	or     $0xffffffe0,%eax
f013153c:	0f b6 c0             	movzbl %al,%eax
f013153f:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131546:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131549:	8a 45 d6             	mov    -0x2a(%ebp),%al
f013154c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013154f:	ee                   	out    %al,(%dx)
f0131550:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131557:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f013155b:	8a 45 d7             	mov    -0x29(%ebp),%al
f013155e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131561:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131562:	eb 55                	jmp    f01315b9 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131564:	83 ec 0c             	sub    $0xc,%esp
f0131567:	6a 01                	push   $0x1
f0131569:	e8 92 fd ff ff       	call   f0131300 <ide_wait_ready>
f013156e:	83 c4 10             	add    $0x10,%esp
f0131571:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131574:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131578:	79 05                	jns    f013157f <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f013157a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013157d:	eb 45                	jmp    f01315c4 <ide_write+0x139>
f013157f:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131586:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131589:	89 45 cc             	mov    %eax,-0x34(%ebp)
f013158c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131593:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131596:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131599:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013159c:	89 cb                	mov    %ecx,%ebx
f013159e:	89 de                	mov    %ebx,%esi
f01315a0:	89 c1                	mov    %eax,%ecx
f01315a2:	fc                   	cld    
f01315a3:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f01315a5:	89 c8                	mov    %ecx,%eax
f01315a7:	89 f3                	mov    %esi,%ebx
f01315a9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01315ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01315af:	ff 4d 10             	decl   0x10(%ebp)
f01315b2:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01315b9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01315bd:	75 a5                	jne    f0131564 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01315bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01315c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01315c7:	5b                   	pop    %ebx
f01315c8:	5e                   	pop    %esi
f01315c9:	5d                   	pop    %ebp
f01315ca:	c3                   	ret    

f01315cb <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01315cb:	55                   	push   %ebp
f01315cc:	89 e5                	mov    %esp,%ebp
f01315ce:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01315d1:	83 ec 0c             	sub    $0xc,%esp
f01315d4:	68 70 ce 13 f0       	push   $0xf013ce70
f01315d9:	e8 a4 f6 fc ff       	call   f0100c82 <cprintf>
f01315de:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01315e1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01315e8:	83 ec 0c             	sub    $0xc,%esp
f01315eb:	68 9c ce 13 f0       	push   $0xf013ce9c
f01315f0:	e8 8d f6 fc ff       	call   f0100c82 <cprintf>
f01315f5:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01315f8:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01315fc:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131601:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131604:	eb 56                	jmp    f013165c <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131606:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013160a:	74 1c                	je     f0131628 <print_mem_block_lists+0x5d>
f013160c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013160f:	8b 50 08             	mov    0x8(%eax),%edx
f0131612:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131615:	8b 48 08             	mov    0x8(%eax),%ecx
f0131618:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013161b:	8b 40 0c             	mov    0xc(%eax),%eax
f013161e:	01 c8                	add    %ecx,%eax
f0131620:	39 c2                	cmp    %eax,%edx
f0131622:	73 04                	jae    f0131628 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131624:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131628:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013162b:	8b 50 08             	mov    0x8(%eax),%edx
f013162e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131631:	8b 40 0c             	mov    0xc(%eax),%eax
f0131634:	01 c2                	add    %eax,%edx
f0131636:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131639:	8b 40 08             	mov    0x8(%eax),%eax
f013163c:	83 ec 04             	sub    $0x4,%esp
f013163f:	52                   	push   %edx
f0131640:	50                   	push   %eax
f0131641:	68 b1 ce 13 f0       	push   $0xf013ceb1
f0131646:	e8 37 f6 fc ff       	call   f0100c82 <cprintf>
f013164b:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f013164e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131651:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131654:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131659:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013165c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131660:	74 07                	je     f0131669 <print_mem_block_lists+0x9e>
f0131662:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131665:	8b 00                	mov    (%eax),%eax
f0131667:	eb 05                	jmp    f013166e <print_mem_block_lists+0xa3>
f0131669:	b8 00 00 00 00       	mov    $0x0,%eax
f013166e:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131673:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131678:	85 c0                	test   %eax,%eax
f013167a:	75 8a                	jne    f0131606 <print_mem_block_lists+0x3b>
f013167c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131680:	75 84                	jne    f0131606 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131682:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131686:	75 10                	jne    f0131698 <print_mem_block_lists+0xcd>
f0131688:	83 ec 0c             	sub    $0xc,%esp
f013168b:	68 c0 ce 13 f0       	push   $0xf013cec0
f0131690:	e8 ed f5 fc ff       	call   f0100c82 <cprintf>
f0131695:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0131698:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f013169f:	83 ec 0c             	sub    $0xc,%esp
f01316a2:	68 e4 ce 13 f0       	push   $0xf013cee4
f01316a7:	e8 d6 f5 fc ff       	call   f0100c82 <cprintf>
f01316ac:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f01316af:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01316b3:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f01316b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316bb:	eb 56                	jmp    f0131713 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01316bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01316c1:	74 1c                	je     f01316df <print_mem_block_lists+0x114>
f01316c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316c6:	8b 50 08             	mov    0x8(%eax),%edx
f01316c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01316cc:	8b 48 08             	mov    0x8(%eax),%ecx
f01316cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01316d2:	8b 40 0c             	mov    0xc(%eax),%eax
f01316d5:	01 c8                	add    %ecx,%eax
f01316d7:	39 c2                	cmp    %eax,%edx
f01316d9:	73 04                	jae    f01316df <print_mem_block_lists+0x114>
			sorted = 0 ;
f01316db:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01316df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e2:	8b 50 08             	mov    0x8(%eax),%edx
f01316e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e8:	8b 40 0c             	mov    0xc(%eax),%eax
f01316eb:	01 c2                	add    %eax,%edx
f01316ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316f0:	8b 40 08             	mov    0x8(%eax),%eax
f01316f3:	83 ec 04             	sub    $0x4,%esp
f01316f6:	52                   	push   %edx
f01316f7:	50                   	push   %eax
f01316f8:	68 b1 ce 13 f0       	push   $0xf013ceb1
f01316fd:	e8 80 f5 fc ff       	call   f0100c82 <cprintf>
f0131702:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131705:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131708:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013170b:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131710:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131713:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131717:	74 07                	je     f0131720 <print_mem_block_lists+0x155>
f0131719:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013171c:	8b 00                	mov    (%eax),%eax
f013171e:	eb 05                	jmp    f0131725 <print_mem_block_lists+0x15a>
f0131720:	b8 00 00 00 00       	mov    $0x0,%eax
f0131725:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f013172a:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f013172f:	85 c0                	test   %eax,%eax
f0131731:	75 8a                	jne    f01316bd <print_mem_block_lists+0xf2>
f0131733:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131737:	75 84                	jne    f01316bd <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131739:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013173d:	75 10                	jne    f013174f <print_mem_block_lists+0x184>
f013173f:	83 ec 0c             	sub    $0xc,%esp
f0131742:	68 fc ce 13 f0       	push   $0xf013cefc
f0131747:	e8 36 f5 fc ff       	call   f0100c82 <cprintf>
f013174c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f013174f:	83 ec 0c             	sub    $0xc,%esp
f0131752:	68 70 ce 13 f0       	push   $0xf013ce70
f0131757:	e8 26 f5 fc ff       	call   f0100c82 <cprintf>
f013175c:	83 c4 10             	add    $0x10,%esp

}
f013175f:	90                   	nop
f0131760:	c9                   	leave  
f0131761:	c3                   	ret    

f0131762 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131762:	55                   	push   %ebp
f0131763:	89 e5                	mov    %esp,%ebp
f0131765:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0131768:	c7 05 98 7b 65 f0 00 	movl   $0x0,0xf0657b98
f013176f:	00 00 00 
f0131772:	c7 05 9c 7b 65 f0 00 	movl   $0x0,0xf0657b9c
f0131779:	00 00 00 
f013177c:	c7 05 a4 7b 65 f0 00 	movl   $0x0,0xf0657ba4
f0131783:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0131786:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013178d:	e9 9e 00 00 00       	jmp    f0131830 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131792:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131797:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013179a:	c1 e2 04             	shl    $0x4,%edx
f013179d:	01 d0                	add    %edx,%eax
f013179f:	85 c0                	test   %eax,%eax
f01317a1:	75 14                	jne    f01317b7 <initialize_MemBlocksList+0x55>
f01317a3:	83 ec 04             	sub    $0x4,%esp
f01317a6:	68 24 cf 13 f0       	push   $0xf013cf24
f01317ab:	6a 46                	push   $0x46
f01317ad:	68 47 cf 13 f0       	push   $0xf013cf47
f01317b2:	e8 44 ea fc ff       	call   f01001fb <_panic>
f01317b7:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f01317bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317bf:	c1 e2 04             	shl    $0x4,%edx
f01317c2:	01 d0                	add    %edx,%eax
f01317c4:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01317ca:	89 10                	mov    %edx,(%eax)
f01317cc:	8b 00                	mov    (%eax),%eax
f01317ce:	85 c0                	test   %eax,%eax
f01317d0:	74 18                	je     f01317ea <initialize_MemBlocksList+0x88>
f01317d2:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01317d7:	8b 15 d8 7a 65 f0    	mov    0xf0657ad8,%edx
f01317dd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01317e0:	c1 e1 04             	shl    $0x4,%ecx
f01317e3:	01 ca                	add    %ecx,%edx
f01317e5:	89 50 04             	mov    %edx,0x4(%eax)
f01317e8:	eb 12                	jmp    f01317fc <initialize_MemBlocksList+0x9a>
f01317ea:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f01317ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317f2:	c1 e2 04             	shl    $0x4,%edx
f01317f5:	01 d0                	add    %edx,%eax
f01317f7:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01317fc:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131801:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131804:	c1 e2 04             	shl    $0x4,%edx
f0131807:	01 d0                	add    %edx,%eax
f0131809:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f013180e:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131813:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131816:	c1 e2 04             	shl    $0x4,%edx
f0131819:	01 d0                	add    %edx,%eax
f013181b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131822:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131827:	40                   	inc    %eax
f0131828:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f013182d:	ff 45 f4             	incl   -0xc(%ebp)
f0131830:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131833:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131836:	0f 82 56 ff ff ff    	jb     f0131792 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f013183c:	90                   	nop
f013183d:	c9                   	leave  
f013183e:	c3                   	ret    

f013183f <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013183f:	55                   	push   %ebp
f0131840:	89 e5                	mov    %esp,%ebp
f0131842:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131845:	8b 45 08             	mov    0x8(%ebp),%eax
f0131848:	8b 00                	mov    (%eax),%eax
f013184a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013184d:	eb 19                	jmp    f0131868 <find_block+0x29>
	{
		if(va==point->sva)
f013184f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131852:	8b 40 08             	mov    0x8(%eax),%eax
f0131855:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131858:	75 05                	jne    f013185f <find_block+0x20>
		   return point;
f013185a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013185d:	eb 36                	jmp    f0131895 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f013185f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131862:	8b 40 08             	mov    0x8(%eax),%eax
f0131865:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131868:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013186c:	74 07                	je     f0131875 <find_block+0x36>
f013186e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131871:	8b 00                	mov    (%eax),%eax
f0131873:	eb 05                	jmp    f013187a <find_block+0x3b>
f0131875:	b8 00 00 00 00       	mov    $0x0,%eax
f013187a:	8b 55 08             	mov    0x8(%ebp),%edx
f013187d:	89 42 08             	mov    %eax,0x8(%edx)
f0131880:	8b 45 08             	mov    0x8(%ebp),%eax
f0131883:	8b 40 08             	mov    0x8(%eax),%eax
f0131886:	85 c0                	test   %eax,%eax
f0131888:	75 c5                	jne    f013184f <find_block+0x10>
f013188a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013188e:	75 bf                	jne    f013184f <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131890:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131895:	c9                   	leave  
f0131896:	c3                   	ret    

f0131897 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131897:	55                   	push   %ebp
f0131898:	89 e5                	mov    %esp,%ebp
f013189a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f013189d:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f01318a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f01318a5:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f01318aa:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f01318ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01318b3:	74 24                	je     f01318d9 <insert_sorted_allocList+0x42>
f01318b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01318b8:	8b 50 08             	mov    0x8(%eax),%edx
f01318bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318be:	8b 40 08             	mov    0x8(%eax),%eax
f01318c1:	39 c2                	cmp    %eax,%edx
f01318c3:	76 14                	jbe    f01318d9 <insert_sorted_allocList+0x42>
f01318c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01318c8:	8b 50 08             	mov    0x8(%eax),%edx
f01318cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318ce:	8b 40 08             	mov    0x8(%eax),%eax
f01318d1:	39 c2                	cmp    %eax,%edx
f01318d3:	0f 82 60 01 00 00    	jb     f0131a39 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f01318d9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318dd:	75 65                	jne    f0131944 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f01318df:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01318e3:	75 14                	jne    f01318f9 <insert_sorted_allocList+0x62>
f01318e5:	83 ec 04             	sub    $0x4,%esp
f01318e8:	68 24 cf 13 f0       	push   $0xf013cf24
f01318ed:	6a 6b                	push   $0x6b
f01318ef:	68 47 cf 13 f0       	push   $0xf013cf47
f01318f4:	e8 02 e9 fc ff       	call   f01001fb <_panic>
f01318f9:	8b 15 c8 7a 65 f0    	mov    0xf0657ac8,%edx
f01318ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131902:	89 10                	mov    %edx,(%eax)
f0131904:	8b 45 08             	mov    0x8(%ebp),%eax
f0131907:	8b 00                	mov    (%eax),%eax
f0131909:	85 c0                	test   %eax,%eax
f013190b:	74 0d                	je     f013191a <insert_sorted_allocList+0x83>
f013190d:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131912:	8b 55 08             	mov    0x8(%ebp),%edx
f0131915:	89 50 04             	mov    %edx,0x4(%eax)
f0131918:	eb 08                	jmp    f0131922 <insert_sorted_allocList+0x8b>
f013191a:	8b 45 08             	mov    0x8(%ebp),%eax
f013191d:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131922:	8b 45 08             	mov    0x8(%ebp),%eax
f0131925:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f013192a:	8b 45 08             	mov    0x8(%ebp),%eax
f013192d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131934:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131939:	40                   	inc    %eax
f013193a:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013193f:	e9 dc 01 00 00       	jmp    f0131b20 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131944:	8b 45 08             	mov    0x8(%ebp),%eax
f0131947:	8b 50 08             	mov    0x8(%eax),%edx
f013194a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013194d:	8b 40 08             	mov    0x8(%eax),%eax
f0131950:	39 c2                	cmp    %eax,%edx
f0131952:	77 6c                	ja     f01319c0 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131954:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131958:	74 06                	je     f0131960 <insert_sorted_allocList+0xc9>
f013195a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013195e:	75 14                	jne    f0131974 <insert_sorted_allocList+0xdd>
f0131960:	83 ec 04             	sub    $0x4,%esp
f0131963:	68 60 cf 13 f0       	push   $0xf013cf60
f0131968:	6a 6f                	push   $0x6f
f013196a:	68 47 cf 13 f0       	push   $0xf013cf47
f013196f:	e8 87 e8 fc ff       	call   f01001fb <_panic>
f0131974:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131977:	8b 50 04             	mov    0x4(%eax),%edx
f013197a:	8b 45 08             	mov    0x8(%ebp),%eax
f013197d:	89 50 04             	mov    %edx,0x4(%eax)
f0131980:	8b 45 08             	mov    0x8(%ebp),%eax
f0131983:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131986:	89 10                	mov    %edx,(%eax)
f0131988:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013198b:	8b 40 04             	mov    0x4(%eax),%eax
f013198e:	85 c0                	test   %eax,%eax
f0131990:	74 0d                	je     f013199f <insert_sorted_allocList+0x108>
f0131992:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131995:	8b 40 04             	mov    0x4(%eax),%eax
f0131998:	8b 55 08             	mov    0x8(%ebp),%edx
f013199b:	89 10                	mov    %edx,(%eax)
f013199d:	eb 08                	jmp    f01319a7 <insert_sorted_allocList+0x110>
f013199f:	8b 45 08             	mov    0x8(%ebp),%eax
f01319a2:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f01319a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319aa:	8b 55 08             	mov    0x8(%ebp),%edx
f01319ad:	89 50 04             	mov    %edx,0x4(%eax)
f01319b0:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01319b5:	40                   	inc    %eax
f01319b6:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01319bb:	e9 60 01 00 00       	jmp    f0131b20 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f01319c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01319c3:	8b 50 08             	mov    0x8(%eax),%edx
f01319c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01319c9:	8b 40 08             	mov    0x8(%eax),%eax
f01319cc:	39 c2                	cmp    %eax,%edx
f01319ce:	0f 82 4c 01 00 00    	jb     f0131b20 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f01319d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01319d8:	75 14                	jne    f01319ee <insert_sorted_allocList+0x157>
f01319da:	83 ec 04             	sub    $0x4,%esp
f01319dd:	68 98 cf 13 f0       	push   $0xf013cf98
f01319e2:	6a 73                	push   $0x73
f01319e4:	68 47 cf 13 f0       	push   $0xf013cf47
f01319e9:	e8 0d e8 fc ff       	call   f01001fb <_panic>
f01319ee:	8b 15 cc 7a 65 f0    	mov    0xf0657acc,%edx
f01319f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01319f7:	89 50 04             	mov    %edx,0x4(%eax)
f01319fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01319fd:	8b 40 04             	mov    0x4(%eax),%eax
f0131a00:	85 c0                	test   %eax,%eax
f0131a02:	74 0c                	je     f0131a10 <insert_sorted_allocList+0x179>
f0131a04:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f0131a09:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a0c:	89 10                	mov    %edx,(%eax)
f0131a0e:	eb 08                	jmp    f0131a18 <insert_sorted_allocList+0x181>
f0131a10:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a13:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131a18:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a1b:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131a29:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131a2e:	40                   	inc    %eax
f0131a2f:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131a34:	e9 e7 00 00 00       	jmp    f0131b20 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131a39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131a3f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131a46:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a4e:	e9 9d 00 00 00       	jmp    f0131af0 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a56:	8b 00                	mov    (%eax),%eax
f0131a58:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0131a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a5e:	8b 50 08             	mov    0x8(%eax),%edx
f0131a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a64:	8b 40 08             	mov    0x8(%eax),%eax
f0131a67:	39 c2                	cmp    %eax,%edx
f0131a69:	76 7d                	jbe    f0131ae8 <insert_sorted_allocList+0x251>
f0131a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a6e:	8b 50 08             	mov    0x8(%eax),%edx
f0131a71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a74:	8b 40 08             	mov    0x8(%eax),%eax
f0131a77:	39 c2                	cmp    %eax,%edx
f0131a79:	73 6d                	jae    f0131ae8 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0131a7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a7f:	74 06                	je     f0131a87 <insert_sorted_allocList+0x1f0>
f0131a81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131a85:	75 14                	jne    f0131a9b <insert_sorted_allocList+0x204>
f0131a87:	83 ec 04             	sub    $0x4,%esp
f0131a8a:	68 bc cf 13 f0       	push   $0xf013cfbc
f0131a8f:	6a 7f                	push   $0x7f
f0131a91:	68 47 cf 13 f0       	push   $0xf013cf47
f0131a96:	e8 60 e7 fc ff       	call   f01001fb <_panic>
f0131a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a9e:	8b 10                	mov    (%eax),%edx
f0131aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aa3:	89 10                	mov    %edx,(%eax)
f0131aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aa8:	8b 00                	mov    (%eax),%eax
f0131aaa:	85 c0                	test   %eax,%eax
f0131aac:	74 0b                	je     f0131ab9 <insert_sorted_allocList+0x222>
f0131aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ab1:	8b 00                	mov    (%eax),%eax
f0131ab3:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ab6:	89 50 04             	mov    %edx,0x4(%eax)
f0131ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131abc:	8b 55 08             	mov    0x8(%ebp),%edx
f0131abf:	89 10                	mov    %edx,(%eax)
f0131ac1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ac4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ac7:	89 50 04             	mov    %edx,0x4(%eax)
f0131aca:	8b 45 08             	mov    0x8(%ebp),%eax
f0131acd:	8b 00                	mov    (%eax),%eax
f0131acf:	85 c0                	test   %eax,%eax
f0131ad1:	75 08                	jne    f0131adb <insert_sorted_allocList+0x244>
f0131ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ad6:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131adb:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131ae0:	40                   	inc    %eax
f0131ae1:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
				break;
f0131ae6:	eb 39                	jmp    f0131b21 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131ae8:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131aed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131af0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131af4:	74 07                	je     f0131afd <insert_sorted_allocList+0x266>
f0131af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131af9:	8b 00                	mov    (%eax),%eax
f0131afb:	eb 05                	jmp    f0131b02 <insert_sorted_allocList+0x26b>
f0131afd:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b02:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f0131b07:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131b0c:	85 c0                	test   %eax,%eax
f0131b0e:	0f 85 3f ff ff ff    	jne    f0131a53 <insert_sorted_allocList+0x1bc>
f0131b14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b18:	0f 85 35 ff ff ff    	jne    f0131a53 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131b1e:	eb 01                	jmp    f0131b21 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131b20:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131b21:	90                   	nop
f0131b22:	c9                   	leave  
f0131b23:	c3                   	ret    

f0131b24 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131b24:	55                   	push   %ebp
f0131b25:	89 e5                	mov    %esp,%ebp
f0131b27:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131b2a:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131b2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131b32:	e9 85 01 00 00       	jmp    f0131cbc <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b3a:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b3d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b40:	0f 82 6e 01 00 00    	jb     f0131cb4 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b49:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b4c:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b4f:	0f 85 8a 00 00 00    	jne    f0131bdf <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131b55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b59:	75 17                	jne    f0131b72 <alloc_block_FF+0x4e>
f0131b5b:	83 ec 04             	sub    $0x4,%esp
f0131b5e:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131b63:	68 93 00 00 00       	push   $0x93
f0131b68:	68 47 cf 13 f0       	push   $0xf013cf47
f0131b6d:	e8 89 e6 fc ff       	call   f01001fb <_panic>
f0131b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b75:	8b 00                	mov    (%eax),%eax
f0131b77:	85 c0                	test   %eax,%eax
f0131b79:	74 10                	je     f0131b8b <alloc_block_FF+0x67>
f0131b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b7e:	8b 00                	mov    (%eax),%eax
f0131b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b83:	8b 52 04             	mov    0x4(%edx),%edx
f0131b86:	89 50 04             	mov    %edx,0x4(%eax)
f0131b89:	eb 0b                	jmp    f0131b96 <alloc_block_FF+0x72>
f0131b8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b8e:	8b 40 04             	mov    0x4(%eax),%eax
f0131b91:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b99:	8b 40 04             	mov    0x4(%eax),%eax
f0131b9c:	85 c0                	test   %eax,%eax
f0131b9e:	74 0f                	je     f0131baf <alloc_block_FF+0x8b>
f0131ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ba3:	8b 40 04             	mov    0x4(%eax),%eax
f0131ba6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ba9:	8b 12                	mov    (%edx),%edx
f0131bab:	89 10                	mov    %edx,(%eax)
f0131bad:	eb 0a                	jmp    f0131bb9 <alloc_block_FF+0x95>
f0131baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bb2:	8b 00                	mov    (%eax),%eax
f0131bb4:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131bb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bbc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bc5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131bcc:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131bd1:	48                   	dec    %eax
f0131bd2:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return  point;
f0131bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bda:	e9 10 01 00 00       	jmp    f0131cef <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131be2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131be5:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131be8:	0f 86 c6 00 00 00    	jbe    f0131cb4 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131bee:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131bf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bf9:	8b 50 08             	mov    0x8(%eax),%edx
f0131bfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bff:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c05:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c08:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131c0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131c0f:	75 17                	jne    f0131c28 <alloc_block_FF+0x104>
f0131c11:	83 ec 04             	sub    $0x4,%esp
f0131c14:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131c19:	68 9b 00 00 00       	push   $0x9b
f0131c1e:	68 47 cf 13 f0       	push   $0xf013cf47
f0131c23:	e8 d3 e5 fc ff       	call   f01001fb <_panic>
f0131c28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c2b:	8b 00                	mov    (%eax),%eax
f0131c2d:	85 c0                	test   %eax,%eax
f0131c2f:	74 10                	je     f0131c41 <alloc_block_FF+0x11d>
f0131c31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c34:	8b 00                	mov    (%eax),%eax
f0131c36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c39:	8b 52 04             	mov    0x4(%edx),%edx
f0131c3c:	89 50 04             	mov    %edx,0x4(%eax)
f0131c3f:	eb 0b                	jmp    f0131c4c <alloc_block_FF+0x128>
f0131c41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c44:	8b 40 04             	mov    0x4(%eax),%eax
f0131c47:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c4f:	8b 40 04             	mov    0x4(%eax),%eax
f0131c52:	85 c0                	test   %eax,%eax
f0131c54:	74 0f                	je     f0131c65 <alloc_block_FF+0x141>
f0131c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c59:	8b 40 04             	mov    0x4(%eax),%eax
f0131c5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c5f:	8b 12                	mov    (%edx),%edx
f0131c61:	89 10                	mov    %edx,(%eax)
f0131c63:	eb 0a                	jmp    f0131c6f <alloc_block_FF+0x14b>
f0131c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c68:	8b 00                	mov    (%eax),%eax
f0131c6a:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c7b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c82:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131c87:	48                   	dec    %eax
f0131c88:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			   point->sva += size;
f0131c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c90:	8b 50 08             	mov    0x8(%eax),%edx
f0131c93:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c96:	01 c2                	add    %eax,%edx
f0131c98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c9b:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0131c9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ca1:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ca4:	2b 45 08             	sub    0x8(%ebp),%eax
f0131ca7:	89 c2                	mov    %eax,%edx
f0131ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cac:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0131caf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cb2:	eb 3b                	jmp    f0131cef <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131cb4:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131cb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cbc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131cc0:	74 07                	je     f0131cc9 <alloc_block_FF+0x1a5>
f0131cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cc5:	8b 00                	mov    (%eax),%eax
f0131cc7:	eb 05                	jmp    f0131cce <alloc_block_FF+0x1aa>
f0131cc9:	b8 00 00 00 00       	mov    $0x0,%eax
f0131cce:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131cd3:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131cd8:	85 c0                	test   %eax,%eax
f0131cda:	0f 85 57 fe ff ff    	jne    f0131b37 <alloc_block_FF+0x13>
f0131ce0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ce4:	0f 85 4d fe ff ff    	jne    f0131b37 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131cea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131cef:	c9                   	leave  
f0131cf0:	c3                   	ret    

f0131cf1 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131cf1:	55                   	push   %ebp
f0131cf2:	89 e5                	mov    %esp,%ebp
f0131cf4:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0131cf7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131cfe:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131d03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131d06:	e9 df 00 00 00       	jmp    f0131dea <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d0e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d11:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d14:	0f 82 c8 00 00 00    	jb     f0131de2 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d1d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d20:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d23:	0f 85 8a 00 00 00    	jne    f0131db3 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131d29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d2d:	75 17                	jne    f0131d46 <alloc_block_BF+0x55>
f0131d2f:	83 ec 04             	sub    $0x4,%esp
f0131d32:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131d37:	68 b7 00 00 00       	push   $0xb7
f0131d3c:	68 47 cf 13 f0       	push   $0xf013cf47
f0131d41:	e8 b5 e4 fc ff       	call   f01001fb <_panic>
f0131d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d49:	8b 00                	mov    (%eax),%eax
f0131d4b:	85 c0                	test   %eax,%eax
f0131d4d:	74 10                	je     f0131d5f <alloc_block_BF+0x6e>
f0131d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d52:	8b 00                	mov    (%eax),%eax
f0131d54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d57:	8b 52 04             	mov    0x4(%edx),%edx
f0131d5a:	89 50 04             	mov    %edx,0x4(%eax)
f0131d5d:	eb 0b                	jmp    f0131d6a <alloc_block_BF+0x79>
f0131d5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d62:	8b 40 04             	mov    0x4(%eax),%eax
f0131d65:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d6d:	8b 40 04             	mov    0x4(%eax),%eax
f0131d70:	85 c0                	test   %eax,%eax
f0131d72:	74 0f                	je     f0131d83 <alloc_block_BF+0x92>
f0131d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d77:	8b 40 04             	mov    0x4(%eax),%eax
f0131d7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d7d:	8b 12                	mov    (%edx),%edx
f0131d7f:	89 10                	mov    %edx,(%eax)
f0131d81:	eb 0a                	jmp    f0131d8d <alloc_block_BF+0x9c>
f0131d83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d86:	8b 00                	mov    (%eax),%eax
f0131d88:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131da0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131da5:	48                   	dec    %eax
f0131da6:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return currentMemBlock;
f0131dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dae:	e9 4d 01 00 00       	jmp    f0131f00 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0131db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131db6:	8b 40 0c             	mov    0xc(%eax),%eax
f0131db9:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131dbc:	76 24                	jbe    f0131de2 <alloc_block_BF+0xf1>
f0131dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dc1:	8b 40 0c             	mov    0xc(%eax),%eax
f0131dc4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131dc7:	73 19                	jae    f0131de2 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0131dc9:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dd3:	8b 40 0c             	mov    0xc(%eax),%eax
f0131dd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0131dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ddc:	8b 40 08             	mov    0x8(%eax),%eax
f0131ddf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131de2:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131de7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131dea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131dee:	74 07                	je     f0131df7 <alloc_block_BF+0x106>
f0131df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131df3:	8b 00                	mov    (%eax),%eax
f0131df5:	eb 05                	jmp    f0131dfc <alloc_block_BF+0x10b>
f0131df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0131dfc:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131e01:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131e06:	85 c0                	test   %eax,%eax
f0131e08:	0f 85 fd fe ff ff    	jne    f0131d0b <alloc_block_BF+0x1a>
f0131e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e12:	0f 85 f3 fe ff ff    	jne    f0131d0b <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0131e18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131e1c:	0f 84 d9 00 00 00    	je     f0131efb <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131e22:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131e27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0131e2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e2d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131e30:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131e33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e36:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e39:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0131e3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131e40:	75 17                	jne    f0131e59 <alloc_block_BF+0x168>
f0131e42:	83 ec 04             	sub    $0x4,%esp
f0131e45:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131e4a:	68 c7 00 00 00       	push   $0xc7
f0131e4f:	68 47 cf 13 f0       	push   $0xf013cf47
f0131e54:	e8 a2 e3 fc ff       	call   f01001fb <_panic>
f0131e59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e5c:	8b 00                	mov    (%eax),%eax
f0131e5e:	85 c0                	test   %eax,%eax
f0131e60:	74 10                	je     f0131e72 <alloc_block_BF+0x181>
f0131e62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e65:	8b 00                	mov    (%eax),%eax
f0131e67:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131e6a:	8b 52 04             	mov    0x4(%edx),%edx
f0131e6d:	89 50 04             	mov    %edx,0x4(%eax)
f0131e70:	eb 0b                	jmp    f0131e7d <alloc_block_BF+0x18c>
f0131e72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e75:	8b 40 04             	mov    0x4(%eax),%eax
f0131e78:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131e7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e80:	8b 40 04             	mov    0x4(%eax),%eax
f0131e83:	85 c0                	test   %eax,%eax
f0131e85:	74 0f                	je     f0131e96 <alloc_block_BF+0x1a5>
f0131e87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e8a:	8b 40 04             	mov    0x4(%eax),%eax
f0131e8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131e90:	8b 12                	mov    (%edx),%edx
f0131e92:	89 10                	mov    %edx,(%eax)
f0131e94:	eb 0a                	jmp    f0131ea0 <alloc_block_BF+0x1af>
f0131e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e99:	8b 00                	mov    (%eax),%eax
f0131e9b:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131ea0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ea3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131ea9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131eac:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131eb3:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131eb8:	48                   	dec    %eax
f0131eb9:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0131ebe:	83 ec 08             	sub    $0x8,%esp
f0131ec1:	ff 75 ec             	pushl  -0x14(%ebp)
f0131ec4:	68 64 7b 65 f0       	push   $0xf0657b64
f0131ec9:	e8 71 f9 ff ff       	call   f013183f <find_block>
f0131ece:	83 c4 10             	add    $0x10,%esp
f0131ed1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0131ed4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ed7:	8b 50 08             	mov    0x8(%eax),%edx
f0131eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0131edd:	01 c2                	add    %eax,%edx
f0131edf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ee2:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0131ee5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ee8:	8b 40 0c             	mov    0xc(%eax),%eax
f0131eeb:	2b 45 08             	sub    0x8(%ebp),%eax
f0131eee:	89 c2                	mov    %eax,%edx
f0131ef0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ef3:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0131ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ef9:	eb 05                	jmp    f0131f00 <alloc_block_BF+0x20f>
	}
	return NULL;
f0131efb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131f00:	c9                   	leave  
f0131f01:	c3                   	ret    

f0131f02 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131f02:	55                   	push   %ebp
f0131f03:	89 e5                	mov    %esp,%ebp
f0131f05:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0131f08:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0131f0d:	85 c0                	test   %eax,%eax
f0131f0f:	0f 85 de 01 00 00    	jne    f01320f3 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131f15:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131f1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f1d:	e9 9e 01 00 00       	jmp    f01320c0 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131f22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f25:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f28:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f2b:	0f 82 87 01 00 00    	jb     f01320b8 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f34:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f37:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f3a:	0f 85 95 00 00 00    	jne    f0131fd5 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0131f40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f44:	75 17                	jne    f0131f5d <alloc_block_NF+0x5b>
f0131f46:	83 ec 04             	sub    $0x4,%esp
f0131f49:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131f4e:	68 e0 00 00 00       	push   $0xe0
f0131f53:	68 47 cf 13 f0       	push   $0xf013cf47
f0131f58:	e8 9e e2 fc ff       	call   f01001fb <_panic>
f0131f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f60:	8b 00                	mov    (%eax),%eax
f0131f62:	85 c0                	test   %eax,%eax
f0131f64:	74 10                	je     f0131f76 <alloc_block_NF+0x74>
f0131f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f69:	8b 00                	mov    (%eax),%eax
f0131f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f6e:	8b 52 04             	mov    0x4(%edx),%edx
f0131f71:	89 50 04             	mov    %edx,0x4(%eax)
f0131f74:	eb 0b                	jmp    f0131f81 <alloc_block_NF+0x7f>
f0131f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f79:	8b 40 04             	mov    0x4(%eax),%eax
f0131f7c:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f84:	8b 40 04             	mov    0x4(%eax),%eax
f0131f87:	85 c0                	test   %eax,%eax
f0131f89:	74 0f                	je     f0131f9a <alloc_block_NF+0x98>
f0131f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f8e:	8b 40 04             	mov    0x4(%eax),%eax
f0131f91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f94:	8b 12                	mov    (%edx),%edx
f0131f96:	89 10                	mov    %edx,(%eax)
f0131f98:	eb 0a                	jmp    f0131fa4 <alloc_block_NF+0xa2>
f0131f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f9d:	8b 00                	mov    (%eax),%eax
f0131f9f:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fa7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fb0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131fb7:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131fbc:	48                   	dec    %eax
f0131fbd:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
				   svaOfNF = point->sva;
f0131fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fc5:	8b 40 08             	mov    0x8(%eax),%eax
f0131fc8:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   return  point;
f0131fcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd0:	e9 f8 04 00 00       	jmp    f01324cd <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0131fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd8:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fdb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131fde:	0f 86 d4 00 00 00    	jbe    f01320b8 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131fe4:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131fe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0131fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fef:	8b 50 08             	mov    0x8(%eax),%edx
f0131ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ff5:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0131ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ffb:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ffe:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132001:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132005:	75 17                	jne    f013201e <alloc_block_NF+0x11c>
f0132007:	83 ec 04             	sub    $0x4,%esp
f013200a:	68 f0 cf 13 f0       	push   $0xf013cff0
f013200f:	68 e9 00 00 00       	push   $0xe9
f0132014:	68 47 cf 13 f0       	push   $0xf013cf47
f0132019:	e8 dd e1 fc ff       	call   f01001fb <_panic>
f013201e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132021:	8b 00                	mov    (%eax),%eax
f0132023:	85 c0                	test   %eax,%eax
f0132025:	74 10                	je     f0132037 <alloc_block_NF+0x135>
f0132027:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013202a:	8b 00                	mov    (%eax),%eax
f013202c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013202f:	8b 52 04             	mov    0x4(%edx),%edx
f0132032:	89 50 04             	mov    %edx,0x4(%eax)
f0132035:	eb 0b                	jmp    f0132042 <alloc_block_NF+0x140>
f0132037:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013203a:	8b 40 04             	mov    0x4(%eax),%eax
f013203d:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132042:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132045:	8b 40 04             	mov    0x4(%eax),%eax
f0132048:	85 c0                	test   %eax,%eax
f013204a:	74 0f                	je     f013205b <alloc_block_NF+0x159>
f013204c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013204f:	8b 40 04             	mov    0x4(%eax),%eax
f0132052:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132055:	8b 12                	mov    (%edx),%edx
f0132057:	89 10                	mov    %edx,(%eax)
f0132059:	eb 0a                	jmp    f0132065 <alloc_block_NF+0x163>
f013205b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013205e:	8b 00                	mov    (%eax),%eax
f0132060:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132065:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132068:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013206e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132071:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132078:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f013207d:	48                   	dec    %eax
f013207e:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
				   svaOfNF = ReturnedBlock->sva;
f0132083:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132086:	8b 40 08             	mov    0x8(%eax),%eax
f0132089:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   point->sva += size;
f013208e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132091:	8b 50 08             	mov    0x8(%eax),%edx
f0132094:	8b 45 08             	mov    0x8(%ebp),%eax
f0132097:	01 c2                	add    %eax,%edx
f0132099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013209c:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f013209f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320a2:	8b 40 0c             	mov    0xc(%eax),%eax
f01320a5:	2b 45 08             	sub    0x8(%ebp),%eax
f01320a8:	89 c2                	mov    %eax,%edx
f01320aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320ad:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f01320b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320b3:	e9 15 04 00 00       	jmp    f01324cd <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01320b8:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01320bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320c4:	74 07                	je     f01320cd <alloc_block_NF+0x1cb>
f01320c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c9:	8b 00                	mov    (%eax),%eax
f01320cb:	eb 05                	jmp    f01320d2 <alloc_block_NF+0x1d0>
f01320cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01320d2:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01320d7:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01320dc:	85 c0                	test   %eax,%eax
f01320de:	0f 85 3e fe ff ff    	jne    f0131f22 <alloc_block_NF+0x20>
f01320e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320e8:	0f 85 34 fe ff ff    	jne    f0131f22 <alloc_block_NF+0x20>
f01320ee:	e9 d5 03 00 00       	jmp    f01324c8 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01320f3:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01320f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320fb:	e9 b1 01 00 00       	jmp    f01322b1 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132100:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132103:	8b 50 08             	mov    0x8(%eax),%edx
f0132106:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f013210b:	39 c2                	cmp    %eax,%edx
f013210d:	0f 82 96 01 00 00    	jb     f01322a9 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132113:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132116:	8b 40 0c             	mov    0xc(%eax),%eax
f0132119:	3b 45 08             	cmp    0x8(%ebp),%eax
f013211c:	0f 82 87 01 00 00    	jb     f01322a9 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132125:	8b 40 0c             	mov    0xc(%eax),%eax
f0132128:	3b 45 08             	cmp    0x8(%ebp),%eax
f013212b:	0f 85 95 00 00 00    	jne    f01321c6 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132131:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132135:	75 17                	jne    f013214e <alloc_block_NF+0x24c>
f0132137:	83 ec 04             	sub    $0x4,%esp
f013213a:	68 f0 cf 13 f0       	push   $0xf013cff0
f013213f:	68 fc 00 00 00       	push   $0xfc
f0132144:	68 47 cf 13 f0       	push   $0xf013cf47
f0132149:	e8 ad e0 fc ff       	call   f01001fb <_panic>
f013214e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132151:	8b 00                	mov    (%eax),%eax
f0132153:	85 c0                	test   %eax,%eax
f0132155:	74 10                	je     f0132167 <alloc_block_NF+0x265>
f0132157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013215a:	8b 00                	mov    (%eax),%eax
f013215c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013215f:	8b 52 04             	mov    0x4(%edx),%edx
f0132162:	89 50 04             	mov    %edx,0x4(%eax)
f0132165:	eb 0b                	jmp    f0132172 <alloc_block_NF+0x270>
f0132167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013216a:	8b 40 04             	mov    0x4(%eax),%eax
f013216d:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132175:	8b 40 04             	mov    0x4(%eax),%eax
f0132178:	85 c0                	test   %eax,%eax
f013217a:	74 0f                	je     f013218b <alloc_block_NF+0x289>
f013217c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013217f:	8b 40 04             	mov    0x4(%eax),%eax
f0132182:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132185:	8b 12                	mov    (%edx),%edx
f0132187:	89 10                	mov    %edx,(%eax)
f0132189:	eb 0a                	jmp    f0132195 <alloc_block_NF+0x293>
f013218b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013218e:	8b 00                	mov    (%eax),%eax
f0132190:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132195:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132198:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013219e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321a8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01321ad:	48                   	dec    %eax
f01321ae:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f01321b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321b6:	8b 40 08             	mov    0x8(%eax),%eax
f01321b9:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f01321be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321c1:	e9 07 03 00 00       	jmp    f01324cd <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01321c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321c9:	8b 40 0c             	mov    0xc(%eax),%eax
f01321cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321cf:	0f 86 d4 00 00 00    	jbe    f01322a9 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01321d5:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01321da:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f01321dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321e0:	8b 50 08             	mov    0x8(%eax),%edx
f01321e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01321e6:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01321e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01321ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01321ef:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01321f2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01321f6:	75 17                	jne    f013220f <alloc_block_NF+0x30d>
f01321f8:	83 ec 04             	sub    $0x4,%esp
f01321fb:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132200:	68 04 01 00 00       	push   $0x104
f0132205:	68 47 cf 13 f0       	push   $0xf013cf47
f013220a:	e8 ec df fc ff       	call   f01001fb <_panic>
f013220f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132212:	8b 00                	mov    (%eax),%eax
f0132214:	85 c0                	test   %eax,%eax
f0132216:	74 10                	je     f0132228 <alloc_block_NF+0x326>
f0132218:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013221b:	8b 00                	mov    (%eax),%eax
f013221d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132220:	8b 52 04             	mov    0x4(%edx),%edx
f0132223:	89 50 04             	mov    %edx,0x4(%eax)
f0132226:	eb 0b                	jmp    f0132233 <alloc_block_NF+0x331>
f0132228:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013222b:	8b 40 04             	mov    0x4(%eax),%eax
f013222e:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132233:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132236:	8b 40 04             	mov    0x4(%eax),%eax
f0132239:	85 c0                	test   %eax,%eax
f013223b:	74 0f                	je     f013224c <alloc_block_NF+0x34a>
f013223d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132240:	8b 40 04             	mov    0x4(%eax),%eax
f0132243:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132246:	8b 12                	mov    (%edx),%edx
f0132248:	89 10                	mov    %edx,(%eax)
f013224a:	eb 0a                	jmp    f0132256 <alloc_block_NF+0x354>
f013224c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013224f:	8b 00                	mov    (%eax),%eax
f0132251:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132256:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132259:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013225f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132262:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132269:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f013226e:	48                   	dec    %eax
f013226f:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f0132274:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132277:	8b 40 08             	mov    0x8(%eax),%eax
f013227a:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f013227f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132282:	8b 50 08             	mov    0x8(%eax),%edx
f0132285:	8b 45 08             	mov    0x8(%ebp),%eax
f0132288:	01 c2                	add    %eax,%edx
f013228a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013228d:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132290:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132293:	8b 40 0c             	mov    0xc(%eax),%eax
f0132296:	2b 45 08             	sub    0x8(%ebp),%eax
f0132299:	89 c2                	mov    %eax,%edx
f013229b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013229e:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f01322a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322a4:	e9 24 02 00 00       	jmp    f01324cd <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01322a9:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01322ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322b5:	74 07                	je     f01322be <alloc_block_NF+0x3bc>
f01322b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322ba:	8b 00                	mov    (%eax),%eax
f01322bc:	eb 05                	jmp    f01322c3 <alloc_block_NF+0x3c1>
f01322be:	b8 00 00 00 00       	mov    $0x0,%eax
f01322c3:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01322c8:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01322cd:	85 c0                	test   %eax,%eax
f01322cf:	0f 85 2b fe ff ff    	jne    f0132100 <alloc_block_NF+0x1fe>
f01322d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322d9:	0f 85 21 fe ff ff    	jne    f0132100 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01322df:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01322e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322e7:	e9 ae 01 00 00       	jmp    f013249a <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f01322ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322ef:	8b 50 08             	mov    0x8(%eax),%edx
f01322f2:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f01322f7:	39 c2                	cmp    %eax,%edx
f01322f9:	0f 83 93 01 00 00    	jae    f0132492 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f01322ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132302:	8b 40 0c             	mov    0xc(%eax),%eax
f0132305:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132308:	0f 82 84 01 00 00    	jb     f0132492 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f013230e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132311:	8b 40 0c             	mov    0xc(%eax),%eax
f0132314:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132317:	0f 85 95 00 00 00    	jne    f01323b2 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f013231d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132321:	75 17                	jne    f013233a <alloc_block_NF+0x438>
f0132323:	83 ec 04             	sub    $0x4,%esp
f0132326:	68 f0 cf 13 f0       	push   $0xf013cff0
f013232b:	68 14 01 00 00       	push   $0x114
f0132330:	68 47 cf 13 f0       	push   $0xf013cf47
f0132335:	e8 c1 de fc ff       	call   f01001fb <_panic>
f013233a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013233d:	8b 00                	mov    (%eax),%eax
f013233f:	85 c0                	test   %eax,%eax
f0132341:	74 10                	je     f0132353 <alloc_block_NF+0x451>
f0132343:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132346:	8b 00                	mov    (%eax),%eax
f0132348:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013234b:	8b 52 04             	mov    0x4(%edx),%edx
f013234e:	89 50 04             	mov    %edx,0x4(%eax)
f0132351:	eb 0b                	jmp    f013235e <alloc_block_NF+0x45c>
f0132353:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132356:	8b 40 04             	mov    0x4(%eax),%eax
f0132359:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f013235e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132361:	8b 40 04             	mov    0x4(%eax),%eax
f0132364:	85 c0                	test   %eax,%eax
f0132366:	74 0f                	je     f0132377 <alloc_block_NF+0x475>
f0132368:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013236b:	8b 40 04             	mov    0x4(%eax),%eax
f013236e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132371:	8b 12                	mov    (%edx),%edx
f0132373:	89 10                	mov    %edx,(%eax)
f0132375:	eb 0a                	jmp    f0132381 <alloc_block_NF+0x47f>
f0132377:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013237a:	8b 00                	mov    (%eax),%eax
f013237c:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132381:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132384:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013238a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013238d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132394:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132399:	48                   	dec    %eax
f013239a:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f013239f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323a2:	8b 40 08             	mov    0x8(%eax),%eax
f01323a5:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f01323aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ad:	e9 1b 01 00 00       	jmp    f01324cd <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01323b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323b5:	8b 40 0c             	mov    0xc(%eax),%eax
f01323b8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323bb:	0f 86 d1 00 00 00    	jbe    f0132492 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01323c1:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01323c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f01323c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323cc:	8b 50 08             	mov    0x8(%eax),%edx
f01323cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323d2:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01323d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323d8:	8b 55 08             	mov    0x8(%ebp),%edx
f01323db:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01323de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01323e2:	75 17                	jne    f01323fb <alloc_block_NF+0x4f9>
f01323e4:	83 ec 04             	sub    $0x4,%esp
f01323e7:	68 f0 cf 13 f0       	push   $0xf013cff0
f01323ec:	68 1c 01 00 00       	push   $0x11c
f01323f1:	68 47 cf 13 f0       	push   $0xf013cf47
f01323f6:	e8 00 de fc ff       	call   f01001fb <_panic>
f01323fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323fe:	8b 00                	mov    (%eax),%eax
f0132400:	85 c0                	test   %eax,%eax
f0132402:	74 10                	je     f0132414 <alloc_block_NF+0x512>
f0132404:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132407:	8b 00                	mov    (%eax),%eax
f0132409:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013240c:	8b 52 04             	mov    0x4(%edx),%edx
f013240f:	89 50 04             	mov    %edx,0x4(%eax)
f0132412:	eb 0b                	jmp    f013241f <alloc_block_NF+0x51d>
f0132414:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132417:	8b 40 04             	mov    0x4(%eax),%eax
f013241a:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f013241f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132422:	8b 40 04             	mov    0x4(%eax),%eax
f0132425:	85 c0                	test   %eax,%eax
f0132427:	74 0f                	je     f0132438 <alloc_block_NF+0x536>
f0132429:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013242c:	8b 40 04             	mov    0x4(%eax),%eax
f013242f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132432:	8b 12                	mov    (%edx),%edx
f0132434:	89 10                	mov    %edx,(%eax)
f0132436:	eb 0a                	jmp    f0132442 <alloc_block_NF+0x540>
f0132438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013243b:	8b 00                	mov    (%eax),%eax
f013243d:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132442:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132445:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013244b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013244e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132455:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f013245a:	48                   	dec    %eax
f013245b:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f0132460:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132463:	8b 40 08             	mov    0x8(%eax),%eax
f0132466:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f013246b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013246e:	8b 50 08             	mov    0x8(%eax),%edx
f0132471:	8b 45 08             	mov    0x8(%ebp),%eax
f0132474:	01 c2                	add    %eax,%edx
f0132476:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132479:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f013247c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013247f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132482:	2b 45 08             	sub    0x8(%ebp),%eax
f0132485:	89 c2                	mov    %eax,%edx
f0132487:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013248a:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f013248d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132490:	eb 3b                	jmp    f01324cd <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132492:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132497:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013249a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013249e:	74 07                	je     f01324a7 <alloc_block_NF+0x5a5>
f01324a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a3:	8b 00                	mov    (%eax),%eax
f01324a5:	eb 05                	jmp    f01324ac <alloc_block_NF+0x5aa>
f01324a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01324ac:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01324b1:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01324b6:	85 c0                	test   %eax,%eax
f01324b8:	0f 85 2e fe ff ff    	jne    f01322ec <alloc_block_NF+0x3ea>
f01324be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324c2:	0f 85 24 fe ff ff    	jne    f01322ec <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f01324c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01324cd:	c9                   	leave  
f01324ce:	c3                   	ret    

f01324cf <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f01324cf:	55                   	push   %ebp
f01324d0:	89 e5                	mov    %esp,%ebp
f01324d2:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f01324d5:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01324da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f01324dd:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f01324e2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f01324e5:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01324ea:	85 c0                	test   %eax,%eax
f01324ec:	74 14                	je     f0132502 <insert_sorted_with_merge_freeList+0x33>
f01324ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01324f1:	8b 50 08             	mov    0x8(%eax),%edx
f01324f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324f7:	8b 40 08             	mov    0x8(%eax),%eax
f01324fa:	39 c2                	cmp    %eax,%edx
f01324fc:	0f 87 9b 01 00 00    	ja     f013269d <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132502:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132506:	75 17                	jne    f013251f <insert_sorted_with_merge_freeList+0x50>
f0132508:	83 ec 04             	sub    $0x4,%esp
f013250b:	68 24 cf 13 f0       	push   $0xf013cf24
f0132510:	68 38 01 00 00       	push   $0x138
f0132515:	68 47 cf 13 f0       	push   $0xf013cf47
f013251a:	e8 dc dc fc ff       	call   f01001fb <_panic>
f013251f:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f0132525:	8b 45 08             	mov    0x8(%ebp),%eax
f0132528:	89 10                	mov    %edx,(%eax)
f013252a:	8b 45 08             	mov    0x8(%ebp),%eax
f013252d:	8b 00                	mov    (%eax),%eax
f013252f:	85 c0                	test   %eax,%eax
f0132531:	74 0d                	je     f0132540 <insert_sorted_with_merge_freeList+0x71>
f0132533:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0132538:	8b 55 08             	mov    0x8(%ebp),%edx
f013253b:	89 50 04             	mov    %edx,0x4(%eax)
f013253e:	eb 08                	jmp    f0132548 <insert_sorted_with_merge_freeList+0x79>
f0132540:	8b 45 08             	mov    0x8(%ebp),%eax
f0132543:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132548:	8b 45 08             	mov    0x8(%ebp),%eax
f013254b:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132550:	8b 45 08             	mov    0x8(%ebp),%eax
f0132553:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013255a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013255f:	40                   	inc    %eax
f0132560:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132565:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132569:	0f 84 a8 06 00 00    	je     f0132c17 <insert_sorted_with_merge_freeList+0x748>
f013256f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132572:	8b 50 08             	mov    0x8(%eax),%edx
f0132575:	8b 45 08             	mov    0x8(%ebp),%eax
f0132578:	8b 40 0c             	mov    0xc(%eax),%eax
f013257b:	01 c2                	add    %eax,%edx
f013257d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132580:	8b 40 08             	mov    0x8(%eax),%eax
f0132583:	39 c2                	cmp    %eax,%edx
f0132585:	0f 85 8c 06 00 00    	jne    f0132c17 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f013258b:	8b 45 08             	mov    0x8(%ebp),%eax
f013258e:	8b 50 0c             	mov    0xc(%eax),%edx
f0132591:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132594:	8b 40 0c             	mov    0xc(%eax),%eax
f0132597:	01 c2                	add    %eax,%edx
f0132599:	8b 45 08             	mov    0x8(%ebp),%eax
f013259c:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f013259f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01325a3:	75 17                	jne    f01325bc <insert_sorted_with_merge_freeList+0xed>
f01325a5:	83 ec 04             	sub    $0x4,%esp
f01325a8:	68 f0 cf 13 f0       	push   $0xf013cff0
f01325ad:	68 3c 01 00 00       	push   $0x13c
f01325b2:	68 47 cf 13 f0       	push   $0xf013cf47
f01325b7:	e8 3f dc fc ff       	call   f01001fb <_panic>
f01325bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325bf:	8b 00                	mov    (%eax),%eax
f01325c1:	85 c0                	test   %eax,%eax
f01325c3:	74 10                	je     f01325d5 <insert_sorted_with_merge_freeList+0x106>
f01325c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325c8:	8b 00                	mov    (%eax),%eax
f01325ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01325cd:	8b 52 04             	mov    0x4(%edx),%edx
f01325d0:	89 50 04             	mov    %edx,0x4(%eax)
f01325d3:	eb 0b                	jmp    f01325e0 <insert_sorted_with_merge_freeList+0x111>
f01325d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325d8:	8b 40 04             	mov    0x4(%eax),%eax
f01325db:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01325e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325e3:	8b 40 04             	mov    0x4(%eax),%eax
f01325e6:	85 c0                	test   %eax,%eax
f01325e8:	74 0f                	je     f01325f9 <insert_sorted_with_merge_freeList+0x12a>
f01325ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325ed:	8b 40 04             	mov    0x4(%eax),%eax
f01325f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01325f3:	8b 12                	mov    (%edx),%edx
f01325f5:	89 10                	mov    %edx,(%eax)
f01325f7:	eb 0a                	jmp    f0132603 <insert_sorted_with_merge_freeList+0x134>
f01325f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325fc:	8b 00                	mov    (%eax),%eax
f01325fe:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132603:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132606:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013260c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013260f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132616:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013261b:	48                   	dec    %eax
f013261c:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			head->size = 0;
f0132621:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132624:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f013262b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013262e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132635:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132639:	75 17                	jne    f0132652 <insert_sorted_with_merge_freeList+0x183>
f013263b:	83 ec 04             	sub    $0x4,%esp
f013263e:	68 24 cf 13 f0       	push   $0xf013cf24
f0132643:	68 3f 01 00 00       	push   $0x13f
f0132648:	68 47 cf 13 f0       	push   $0xf013cf47
f013264d:	e8 a9 db fc ff       	call   f01001fb <_panic>
f0132652:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132658:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013265b:	89 10                	mov    %edx,(%eax)
f013265d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132660:	8b 00                	mov    (%eax),%eax
f0132662:	85 c0                	test   %eax,%eax
f0132664:	74 0d                	je     f0132673 <insert_sorted_with_merge_freeList+0x1a4>
f0132666:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013266b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013266e:	89 50 04             	mov    %edx,0x4(%eax)
f0132671:	eb 08                	jmp    f013267b <insert_sorted_with_merge_freeList+0x1ac>
f0132673:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132676:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f013267b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013267e:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132683:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132686:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013268d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132692:	40                   	inc    %eax
f0132693:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132698:	e9 7a 05 00 00       	jmp    f0132c17 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f013269d:	8b 45 08             	mov    0x8(%ebp),%eax
f01326a0:	8b 50 08             	mov    0x8(%eax),%edx
f01326a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326a6:	8b 40 08             	mov    0x8(%eax),%eax
f01326a9:	39 c2                	cmp    %eax,%edx
f01326ab:	0f 82 14 01 00 00    	jb     f01327c5 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f01326b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326b4:	8b 50 08             	mov    0x8(%eax),%edx
f01326b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326ba:	8b 40 0c             	mov    0xc(%eax),%eax
f01326bd:	01 c2                	add    %eax,%edx
f01326bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01326c2:	8b 40 08             	mov    0x8(%eax),%eax
f01326c5:	39 c2                	cmp    %eax,%edx
f01326c7:	0f 85 90 00 00 00    	jne    f013275d <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f01326cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326d0:	8b 50 0c             	mov    0xc(%eax),%edx
f01326d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01326d6:	8b 40 0c             	mov    0xc(%eax),%eax
f01326d9:	01 c2                	add    %eax,%edx
f01326db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326de:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f01326e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01326e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f01326eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01326ee:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01326f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01326f9:	75 17                	jne    f0132712 <insert_sorted_with_merge_freeList+0x243>
f01326fb:	83 ec 04             	sub    $0x4,%esp
f01326fe:	68 24 cf 13 f0       	push   $0xf013cf24
f0132703:	68 49 01 00 00       	push   $0x149
f0132708:	68 47 cf 13 f0       	push   $0xf013cf47
f013270d:	e8 e9 da fc ff       	call   f01001fb <_panic>
f0132712:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132718:	8b 45 08             	mov    0x8(%ebp),%eax
f013271b:	89 10                	mov    %edx,(%eax)
f013271d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132720:	8b 00                	mov    (%eax),%eax
f0132722:	85 c0                	test   %eax,%eax
f0132724:	74 0d                	je     f0132733 <insert_sorted_with_merge_freeList+0x264>
f0132726:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013272b:	8b 55 08             	mov    0x8(%ebp),%edx
f013272e:	89 50 04             	mov    %edx,0x4(%eax)
f0132731:	eb 08                	jmp    f013273b <insert_sorted_with_merge_freeList+0x26c>
f0132733:	8b 45 08             	mov    0x8(%ebp),%eax
f0132736:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f013273b:	8b 45 08             	mov    0x8(%ebp),%eax
f013273e:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132743:	8b 45 08             	mov    0x8(%ebp),%eax
f0132746:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013274d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132752:	40                   	inc    %eax
f0132753:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132758:	e9 bb 04 00 00       	jmp    f0132c18 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f013275d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132761:	75 17                	jne    f013277a <insert_sorted_with_merge_freeList+0x2ab>
f0132763:	83 ec 04             	sub    $0x4,%esp
f0132766:	68 98 cf 13 f0       	push   $0xf013cf98
f013276b:	68 4c 01 00 00       	push   $0x14c
f0132770:	68 47 cf 13 f0       	push   $0xf013cf47
f0132775:	e8 81 da fc ff       	call   f01001fb <_panic>
f013277a:	8b 15 68 7b 65 f0    	mov    0xf0657b68,%edx
f0132780:	8b 45 08             	mov    0x8(%ebp),%eax
f0132783:	89 50 04             	mov    %edx,0x4(%eax)
f0132786:	8b 45 08             	mov    0x8(%ebp),%eax
f0132789:	8b 40 04             	mov    0x4(%eax),%eax
f013278c:	85 c0                	test   %eax,%eax
f013278e:	74 0c                	je     f013279c <insert_sorted_with_merge_freeList+0x2cd>
f0132790:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f0132795:	8b 55 08             	mov    0x8(%ebp),%edx
f0132798:	89 10                	mov    %edx,(%eax)
f013279a:	eb 08                	jmp    f01327a4 <insert_sorted_with_merge_freeList+0x2d5>
f013279c:	8b 45 08             	mov    0x8(%ebp),%eax
f013279f:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01327a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01327a7:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01327ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01327af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01327b5:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01327ba:	40                   	inc    %eax
f01327bb:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01327c0:	e9 53 04 00 00       	jmp    f0132c18 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01327c5:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01327ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327cd:	e9 15 04 00 00       	jmp    f0132be7 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f01327d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327d5:	8b 00                	mov    (%eax),%eax
f01327d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f01327da:	8b 45 08             	mov    0x8(%ebp),%eax
f01327dd:	8b 50 08             	mov    0x8(%eax),%edx
f01327e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327e3:	8b 40 08             	mov    0x8(%eax),%eax
f01327e6:	39 c2                	cmp    %eax,%edx
f01327e8:	0f 86 f1 03 00 00    	jbe    f0132bdf <insert_sorted_with_merge_freeList+0x710>
f01327ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01327f1:	8b 50 08             	mov    0x8(%eax),%edx
f01327f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327f7:	8b 40 08             	mov    0x8(%eax),%eax
f01327fa:	39 c2                	cmp    %eax,%edx
f01327fc:	0f 83 dd 03 00 00    	jae    f0132bdf <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132802:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132805:	8b 50 08             	mov    0x8(%eax),%edx
f0132808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013280b:	8b 40 0c             	mov    0xc(%eax),%eax
f013280e:	01 c2                	add    %eax,%edx
f0132810:	8b 45 08             	mov    0x8(%ebp),%eax
f0132813:	8b 40 08             	mov    0x8(%eax),%eax
f0132816:	39 c2                	cmp    %eax,%edx
f0132818:	0f 85 b9 01 00 00    	jne    f01329d7 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013281e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132821:	8b 50 08             	mov    0x8(%eax),%edx
f0132824:	8b 45 08             	mov    0x8(%ebp),%eax
f0132827:	8b 40 0c             	mov    0xc(%eax),%eax
f013282a:	01 c2                	add    %eax,%edx
f013282c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013282f:	8b 40 08             	mov    0x8(%eax),%eax
f0132832:	39 c2                	cmp    %eax,%edx
f0132834:	0f 85 0d 01 00 00    	jne    f0132947 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f013283a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013283d:	8b 50 0c             	mov    0xc(%eax),%edx
f0132840:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132843:	8b 40 0c             	mov    0xc(%eax),%eax
f0132846:	01 c2                	add    %eax,%edx
f0132848:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013284b:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f013284e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132852:	75 17                	jne    f013286b <insert_sorted_with_merge_freeList+0x39c>
f0132854:	83 ec 04             	sub    $0x4,%esp
f0132857:	68 f0 cf 13 f0       	push   $0xf013cff0
f013285c:	68 5c 01 00 00       	push   $0x15c
f0132861:	68 47 cf 13 f0       	push   $0xf013cf47
f0132866:	e8 90 d9 fc ff       	call   f01001fb <_panic>
f013286b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013286e:	8b 00                	mov    (%eax),%eax
f0132870:	85 c0                	test   %eax,%eax
f0132872:	74 10                	je     f0132884 <insert_sorted_with_merge_freeList+0x3b5>
f0132874:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132877:	8b 00                	mov    (%eax),%eax
f0132879:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013287c:	8b 52 04             	mov    0x4(%edx),%edx
f013287f:	89 50 04             	mov    %edx,0x4(%eax)
f0132882:	eb 0b                	jmp    f013288f <insert_sorted_with_merge_freeList+0x3c0>
f0132884:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132887:	8b 40 04             	mov    0x4(%eax),%eax
f013288a:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f013288f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132892:	8b 40 04             	mov    0x4(%eax),%eax
f0132895:	85 c0                	test   %eax,%eax
f0132897:	74 0f                	je     f01328a8 <insert_sorted_with_merge_freeList+0x3d9>
f0132899:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013289c:	8b 40 04             	mov    0x4(%eax),%eax
f013289f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01328a2:	8b 12                	mov    (%edx),%edx
f01328a4:	89 10                	mov    %edx,(%eax)
f01328a6:	eb 0a                	jmp    f01328b2 <insert_sorted_with_merge_freeList+0x3e3>
f01328a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328ab:	8b 00                	mov    (%eax),%eax
f01328ad:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01328b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01328bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328be:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328c5:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01328ca:	48                   	dec    %eax
f01328cb:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
						nextBlock->sva = 0;
f01328d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328d3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f01328da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328dd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01328e4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01328e8:	75 17                	jne    f0132901 <insert_sorted_with_merge_freeList+0x432>
f01328ea:	83 ec 04             	sub    $0x4,%esp
f01328ed:	68 24 cf 13 f0       	push   $0xf013cf24
f01328f2:	68 5f 01 00 00       	push   $0x15f
f01328f7:	68 47 cf 13 f0       	push   $0xf013cf47
f01328fc:	e8 fa d8 fc ff       	call   f01001fb <_panic>
f0132901:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132907:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013290a:	89 10                	mov    %edx,(%eax)
f013290c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013290f:	8b 00                	mov    (%eax),%eax
f0132911:	85 c0                	test   %eax,%eax
f0132913:	74 0d                	je     f0132922 <insert_sorted_with_merge_freeList+0x453>
f0132915:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013291a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013291d:	89 50 04             	mov    %edx,0x4(%eax)
f0132920:	eb 08                	jmp    f013292a <insert_sorted_with_merge_freeList+0x45b>
f0132922:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132925:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f013292a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013292d:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132932:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132935:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013293c:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132941:	40                   	inc    %eax
f0132942:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					}
					currentBlock->size += blockToInsert->size;
f0132947:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013294a:	8b 50 0c             	mov    0xc(%eax),%edx
f013294d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132950:	8b 40 0c             	mov    0xc(%eax),%eax
f0132953:	01 c2                	add    %eax,%edx
f0132955:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132958:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f013295b:	8b 45 08             	mov    0x8(%ebp),%eax
f013295e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132965:	8b 45 08             	mov    0x8(%ebp),%eax
f0132968:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013296f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132973:	75 17                	jne    f013298c <insert_sorted_with_merge_freeList+0x4bd>
f0132975:	83 ec 04             	sub    $0x4,%esp
f0132978:	68 24 cf 13 f0       	push   $0xf013cf24
f013297d:	68 64 01 00 00       	push   $0x164
f0132982:	68 47 cf 13 f0       	push   $0xf013cf47
f0132987:	e8 6f d8 fc ff       	call   f01001fb <_panic>
f013298c:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132992:	8b 45 08             	mov    0x8(%ebp),%eax
f0132995:	89 10                	mov    %edx,(%eax)
f0132997:	8b 45 08             	mov    0x8(%ebp),%eax
f013299a:	8b 00                	mov    (%eax),%eax
f013299c:	85 c0                	test   %eax,%eax
f013299e:	74 0d                	je     f01329ad <insert_sorted_with_merge_freeList+0x4de>
f01329a0:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01329a5:	8b 55 08             	mov    0x8(%ebp),%edx
f01329a8:	89 50 04             	mov    %edx,0x4(%eax)
f01329ab:	eb 08                	jmp    f01329b5 <insert_sorted_with_merge_freeList+0x4e6>
f01329ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01329b0:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01329b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01329b8:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01329bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01329c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329c7:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01329cc:	40                   	inc    %eax
f01329cd:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f01329d2:	e9 41 02 00 00       	jmp    f0132c18 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01329d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01329da:	8b 50 08             	mov    0x8(%eax),%edx
f01329dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01329e0:	8b 40 0c             	mov    0xc(%eax),%eax
f01329e3:	01 c2                	add    %eax,%edx
f01329e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329e8:	8b 40 08             	mov    0x8(%eax),%eax
f01329eb:	39 c2                	cmp    %eax,%edx
f01329ed:	0f 85 7c 01 00 00    	jne    f0132b6f <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f01329f3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01329f7:	74 06                	je     f01329ff <insert_sorted_with_merge_freeList+0x530>
f01329f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01329fd:	75 17                	jne    f0132a16 <insert_sorted_with_merge_freeList+0x547>
f01329ff:	83 ec 04             	sub    $0x4,%esp
f0132a02:	68 60 cf 13 f0       	push   $0xf013cf60
f0132a07:	68 69 01 00 00       	push   $0x169
f0132a0c:	68 47 cf 13 f0       	push   $0xf013cf47
f0132a11:	e8 e5 d7 fc ff       	call   f01001fb <_panic>
f0132a16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a19:	8b 50 04             	mov    0x4(%eax),%edx
f0132a1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a1f:	89 50 04             	mov    %edx,0x4(%eax)
f0132a22:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a25:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132a28:	89 10                	mov    %edx,(%eax)
f0132a2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a2d:	8b 40 04             	mov    0x4(%eax),%eax
f0132a30:	85 c0                	test   %eax,%eax
f0132a32:	74 0d                	je     f0132a41 <insert_sorted_with_merge_freeList+0x572>
f0132a34:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a37:	8b 40 04             	mov    0x4(%eax),%eax
f0132a3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a3d:	89 10                	mov    %edx,(%eax)
f0132a3f:	eb 08                	jmp    f0132a49 <insert_sorted_with_merge_freeList+0x57a>
f0132a41:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a44:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a4c:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a4f:	89 50 04             	mov    %edx,0x4(%eax)
f0132a52:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132a57:	40                   	inc    %eax
f0132a58:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					blockToInsert->size += nextBlock->size;
f0132a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0132a63:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a66:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a69:	01 c2                	add    %eax,%edx
f0132a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a6e:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132a71:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132a75:	75 17                	jne    f0132a8e <insert_sorted_with_merge_freeList+0x5bf>
f0132a77:	83 ec 04             	sub    $0x4,%esp
f0132a7a:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132a7f:	68 6b 01 00 00       	push   $0x16b
f0132a84:	68 47 cf 13 f0       	push   $0xf013cf47
f0132a89:	e8 6d d7 fc ff       	call   f01001fb <_panic>
f0132a8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a91:	8b 00                	mov    (%eax),%eax
f0132a93:	85 c0                	test   %eax,%eax
f0132a95:	74 10                	je     f0132aa7 <insert_sorted_with_merge_freeList+0x5d8>
f0132a97:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a9a:	8b 00                	mov    (%eax),%eax
f0132a9c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132a9f:	8b 52 04             	mov    0x4(%edx),%edx
f0132aa2:	89 50 04             	mov    %edx,0x4(%eax)
f0132aa5:	eb 0b                	jmp    f0132ab2 <insert_sorted_with_merge_freeList+0x5e3>
f0132aa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aaa:	8b 40 04             	mov    0x4(%eax),%eax
f0132aad:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ab5:	8b 40 04             	mov    0x4(%eax),%eax
f0132ab8:	85 c0                	test   %eax,%eax
f0132aba:	74 0f                	je     f0132acb <insert_sorted_with_merge_freeList+0x5fc>
f0132abc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132abf:	8b 40 04             	mov    0x4(%eax),%eax
f0132ac2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132ac5:	8b 12                	mov    (%edx),%edx
f0132ac7:	89 10                	mov    %edx,(%eax)
f0132ac9:	eb 0a                	jmp    f0132ad5 <insert_sorted_with_merge_freeList+0x606>
f0132acb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ace:	8b 00                	mov    (%eax),%eax
f0132ad0:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132ad5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ad8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ade:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ae1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ae8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132aed:	48                   	dec    %eax
f0132aee:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					nextBlock->sva = 0;
f0132af3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132af6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0132afd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b00:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132b07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b0b:	75 17                	jne    f0132b24 <insert_sorted_with_merge_freeList+0x655>
f0132b0d:	83 ec 04             	sub    $0x4,%esp
f0132b10:	68 24 cf 13 f0       	push   $0xf013cf24
f0132b15:	68 6e 01 00 00       	push   $0x16e
f0132b1a:	68 47 cf 13 f0       	push   $0xf013cf47
f0132b1f:	e8 d7 d6 fc ff       	call   f01001fb <_panic>
f0132b24:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132b2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b2d:	89 10                	mov    %edx,(%eax)
f0132b2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b32:	8b 00                	mov    (%eax),%eax
f0132b34:	85 c0                	test   %eax,%eax
f0132b36:	74 0d                	je     f0132b45 <insert_sorted_with_merge_freeList+0x676>
f0132b38:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132b3d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132b40:	89 50 04             	mov    %edx,0x4(%eax)
f0132b43:	eb 08                	jmp    f0132b4d <insert_sorted_with_merge_freeList+0x67e>
f0132b45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b48:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132b4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b50:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132b55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b58:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b5f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132b64:	40                   	inc    %eax
f0132b65:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f0132b6a:	e9 a9 00 00 00       	jmp    f0132c18 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0132b6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b73:	74 06                	je     f0132b7b <insert_sorted_with_merge_freeList+0x6ac>
f0132b75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132b79:	75 17                	jne    f0132b92 <insert_sorted_with_merge_freeList+0x6c3>
f0132b7b:	83 ec 04             	sub    $0x4,%esp
f0132b7e:	68 bc cf 13 f0       	push   $0xf013cfbc
f0132b83:	68 73 01 00 00       	push   $0x173
f0132b88:	68 47 cf 13 f0       	push   $0xf013cf47
f0132b8d:	e8 69 d6 fc ff       	call   f01001fb <_panic>
f0132b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b95:	8b 10                	mov    (%eax),%edx
f0132b97:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b9a:	89 10                	mov    %edx,(%eax)
f0132b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b9f:	8b 00                	mov    (%eax),%eax
f0132ba1:	85 c0                	test   %eax,%eax
f0132ba3:	74 0b                	je     f0132bb0 <insert_sorted_with_merge_freeList+0x6e1>
f0132ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ba8:	8b 00                	mov    (%eax),%eax
f0132baa:	8b 55 08             	mov    0x8(%ebp),%edx
f0132bad:	89 50 04             	mov    %edx,0x4(%eax)
f0132bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bb3:	8b 55 08             	mov    0x8(%ebp),%edx
f0132bb6:	89 10                	mov    %edx,(%eax)
f0132bb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132bbe:	89 50 04             	mov    %edx,0x4(%eax)
f0132bc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bc4:	8b 00                	mov    (%eax),%eax
f0132bc6:	85 c0                	test   %eax,%eax
f0132bc8:	75 08                	jne    f0132bd2 <insert_sorted_with_merge_freeList+0x703>
f0132bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bcd:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132bd2:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132bd7:	40                   	inc    %eax
f0132bd8:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					break;
f0132bdd:	eb 39                	jmp    f0132c18 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132bdf:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132be4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132be7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132beb:	74 07                	je     f0132bf4 <insert_sorted_with_merge_freeList+0x725>
f0132bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bf0:	8b 00                	mov    (%eax),%eax
f0132bf2:	eb 05                	jmp    f0132bf9 <insert_sorted_with_merge_freeList+0x72a>
f0132bf4:	b8 00 00 00 00       	mov    $0x0,%eax
f0132bf9:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132bfe:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132c03:	85 c0                	test   %eax,%eax
f0132c05:	0f 85 c7 fb ff ff    	jne    f01327d2 <insert_sorted_with_merge_freeList+0x303>
f0132c0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c0f:	0f 85 bd fb ff ff    	jne    f01327d2 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132c15:	eb 01                	jmp    f0132c18 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132c17:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132c18:	90                   	nop
f0132c19:	c9                   	leave  
f0132c1a:	c3                   	ret    
f0132c1b:	90                   	nop

f0132c1c <__udivdi3>:
f0132c1c:	55                   	push   %ebp
f0132c1d:	57                   	push   %edi
f0132c1e:	56                   	push   %esi
f0132c1f:	53                   	push   %ebx
f0132c20:	83 ec 1c             	sub    $0x1c,%esp
f0132c23:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132c27:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132c2b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132c2f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132c33:	89 ca                	mov    %ecx,%edx
f0132c35:	89 f8                	mov    %edi,%eax
f0132c37:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0132c3b:	85 f6                	test   %esi,%esi
f0132c3d:	75 2d                	jne    f0132c6c <__udivdi3+0x50>
f0132c3f:	39 cf                	cmp    %ecx,%edi
f0132c41:	77 65                	ja     f0132ca8 <__udivdi3+0x8c>
f0132c43:	89 fd                	mov    %edi,%ebp
f0132c45:	85 ff                	test   %edi,%edi
f0132c47:	75 0b                	jne    f0132c54 <__udivdi3+0x38>
f0132c49:	b8 01 00 00 00       	mov    $0x1,%eax
f0132c4e:	31 d2                	xor    %edx,%edx
f0132c50:	f7 f7                	div    %edi
f0132c52:	89 c5                	mov    %eax,%ebp
f0132c54:	31 d2                	xor    %edx,%edx
f0132c56:	89 c8                	mov    %ecx,%eax
f0132c58:	f7 f5                	div    %ebp
f0132c5a:	89 c1                	mov    %eax,%ecx
f0132c5c:	89 d8                	mov    %ebx,%eax
f0132c5e:	f7 f5                	div    %ebp
f0132c60:	89 cf                	mov    %ecx,%edi
f0132c62:	89 fa                	mov    %edi,%edx
f0132c64:	83 c4 1c             	add    $0x1c,%esp
f0132c67:	5b                   	pop    %ebx
f0132c68:	5e                   	pop    %esi
f0132c69:	5f                   	pop    %edi
f0132c6a:	5d                   	pop    %ebp
f0132c6b:	c3                   	ret    
f0132c6c:	39 ce                	cmp    %ecx,%esi
f0132c6e:	77 28                	ja     f0132c98 <__udivdi3+0x7c>
f0132c70:	0f bd fe             	bsr    %esi,%edi
f0132c73:	83 f7 1f             	xor    $0x1f,%edi
f0132c76:	75 40                	jne    f0132cb8 <__udivdi3+0x9c>
f0132c78:	39 ce                	cmp    %ecx,%esi
f0132c7a:	72 0a                	jb     f0132c86 <__udivdi3+0x6a>
f0132c7c:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0132c80:	0f 87 9e 00 00 00    	ja     f0132d24 <__udivdi3+0x108>
f0132c86:	b8 01 00 00 00       	mov    $0x1,%eax
f0132c8b:	89 fa                	mov    %edi,%edx
f0132c8d:	83 c4 1c             	add    $0x1c,%esp
f0132c90:	5b                   	pop    %ebx
f0132c91:	5e                   	pop    %esi
f0132c92:	5f                   	pop    %edi
f0132c93:	5d                   	pop    %ebp
f0132c94:	c3                   	ret    
f0132c95:	8d 76 00             	lea    0x0(%esi),%esi
f0132c98:	31 ff                	xor    %edi,%edi
f0132c9a:	31 c0                	xor    %eax,%eax
f0132c9c:	89 fa                	mov    %edi,%edx
f0132c9e:	83 c4 1c             	add    $0x1c,%esp
f0132ca1:	5b                   	pop    %ebx
f0132ca2:	5e                   	pop    %esi
f0132ca3:	5f                   	pop    %edi
f0132ca4:	5d                   	pop    %ebp
f0132ca5:	c3                   	ret    
f0132ca6:	66 90                	xchg   %ax,%ax
f0132ca8:	89 d8                	mov    %ebx,%eax
f0132caa:	f7 f7                	div    %edi
f0132cac:	31 ff                	xor    %edi,%edi
f0132cae:	89 fa                	mov    %edi,%edx
f0132cb0:	83 c4 1c             	add    $0x1c,%esp
f0132cb3:	5b                   	pop    %ebx
f0132cb4:	5e                   	pop    %esi
f0132cb5:	5f                   	pop    %edi
f0132cb6:	5d                   	pop    %ebp
f0132cb7:	c3                   	ret    
f0132cb8:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132cbd:	89 eb                	mov    %ebp,%ebx
f0132cbf:	29 fb                	sub    %edi,%ebx
f0132cc1:	89 f9                	mov    %edi,%ecx
f0132cc3:	d3 e6                	shl    %cl,%esi
f0132cc5:	89 c5                	mov    %eax,%ebp
f0132cc7:	88 d9                	mov    %bl,%cl
f0132cc9:	d3 ed                	shr    %cl,%ebp
f0132ccb:	89 e9                	mov    %ebp,%ecx
f0132ccd:	09 f1                	or     %esi,%ecx
f0132ccf:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132cd3:	89 f9                	mov    %edi,%ecx
f0132cd5:	d3 e0                	shl    %cl,%eax
f0132cd7:	89 c5                	mov    %eax,%ebp
f0132cd9:	89 d6                	mov    %edx,%esi
f0132cdb:	88 d9                	mov    %bl,%cl
f0132cdd:	d3 ee                	shr    %cl,%esi
f0132cdf:	89 f9                	mov    %edi,%ecx
f0132ce1:	d3 e2                	shl    %cl,%edx
f0132ce3:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132ce7:	88 d9                	mov    %bl,%cl
f0132ce9:	d3 e8                	shr    %cl,%eax
f0132ceb:	09 c2                	or     %eax,%edx
f0132ced:	89 d0                	mov    %edx,%eax
f0132cef:	89 f2                	mov    %esi,%edx
f0132cf1:	f7 74 24 0c          	divl   0xc(%esp)
f0132cf5:	89 d6                	mov    %edx,%esi
f0132cf7:	89 c3                	mov    %eax,%ebx
f0132cf9:	f7 e5                	mul    %ebp
f0132cfb:	39 d6                	cmp    %edx,%esi
f0132cfd:	72 19                	jb     f0132d18 <__udivdi3+0xfc>
f0132cff:	74 0b                	je     f0132d0c <__udivdi3+0xf0>
f0132d01:	89 d8                	mov    %ebx,%eax
f0132d03:	31 ff                	xor    %edi,%edi
f0132d05:	e9 58 ff ff ff       	jmp    f0132c62 <__udivdi3+0x46>
f0132d0a:	66 90                	xchg   %ax,%ax
f0132d0c:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132d10:	89 f9                	mov    %edi,%ecx
f0132d12:	d3 e2                	shl    %cl,%edx
f0132d14:	39 c2                	cmp    %eax,%edx
f0132d16:	73 e9                	jae    f0132d01 <__udivdi3+0xe5>
f0132d18:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132d1b:	31 ff                	xor    %edi,%edi
f0132d1d:	e9 40 ff ff ff       	jmp    f0132c62 <__udivdi3+0x46>
f0132d22:	66 90                	xchg   %ax,%ax
f0132d24:	31 c0                	xor    %eax,%eax
f0132d26:	e9 37 ff ff ff       	jmp    f0132c62 <__udivdi3+0x46>
f0132d2b:	90                   	nop

f0132d2c <__umoddi3>:
f0132d2c:	55                   	push   %ebp
f0132d2d:	57                   	push   %edi
f0132d2e:	56                   	push   %esi
f0132d2f:	53                   	push   %ebx
f0132d30:	83 ec 1c             	sub    $0x1c,%esp
f0132d33:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0132d37:	8b 74 24 34          	mov    0x34(%esp),%esi
f0132d3b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132d3f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132d43:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0132d47:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0132d4b:	89 f3                	mov    %esi,%ebx
f0132d4d:	89 fa                	mov    %edi,%edx
f0132d4f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132d53:	89 34 24             	mov    %esi,(%esp)
f0132d56:	85 c0                	test   %eax,%eax
f0132d58:	75 1a                	jne    f0132d74 <__umoddi3+0x48>
f0132d5a:	39 f7                	cmp    %esi,%edi
f0132d5c:	0f 86 a2 00 00 00    	jbe    f0132e04 <__umoddi3+0xd8>
f0132d62:	89 c8                	mov    %ecx,%eax
f0132d64:	89 f2                	mov    %esi,%edx
f0132d66:	f7 f7                	div    %edi
f0132d68:	89 d0                	mov    %edx,%eax
f0132d6a:	31 d2                	xor    %edx,%edx
f0132d6c:	83 c4 1c             	add    $0x1c,%esp
f0132d6f:	5b                   	pop    %ebx
f0132d70:	5e                   	pop    %esi
f0132d71:	5f                   	pop    %edi
f0132d72:	5d                   	pop    %ebp
f0132d73:	c3                   	ret    
f0132d74:	39 f0                	cmp    %esi,%eax
f0132d76:	0f 87 ac 00 00 00    	ja     f0132e28 <__umoddi3+0xfc>
f0132d7c:	0f bd e8             	bsr    %eax,%ebp
f0132d7f:	83 f5 1f             	xor    $0x1f,%ebp
f0132d82:	0f 84 ac 00 00 00    	je     f0132e34 <__umoddi3+0x108>
f0132d88:	bf 20 00 00 00       	mov    $0x20,%edi
f0132d8d:	29 ef                	sub    %ebp,%edi
f0132d8f:	89 fe                	mov    %edi,%esi
f0132d91:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0132d95:	89 e9                	mov    %ebp,%ecx
f0132d97:	d3 e0                	shl    %cl,%eax
f0132d99:	89 d7                	mov    %edx,%edi
f0132d9b:	89 f1                	mov    %esi,%ecx
f0132d9d:	d3 ef                	shr    %cl,%edi
f0132d9f:	09 c7                	or     %eax,%edi
f0132da1:	89 e9                	mov    %ebp,%ecx
f0132da3:	d3 e2                	shl    %cl,%edx
f0132da5:	89 14 24             	mov    %edx,(%esp)
f0132da8:	89 d8                	mov    %ebx,%eax
f0132daa:	d3 e0                	shl    %cl,%eax
f0132dac:	89 c2                	mov    %eax,%edx
f0132dae:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132db2:	d3 e0                	shl    %cl,%eax
f0132db4:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132db8:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132dbc:	89 f1                	mov    %esi,%ecx
f0132dbe:	d3 e8                	shr    %cl,%eax
f0132dc0:	09 d0                	or     %edx,%eax
f0132dc2:	d3 eb                	shr    %cl,%ebx
f0132dc4:	89 da                	mov    %ebx,%edx
f0132dc6:	f7 f7                	div    %edi
f0132dc8:	89 d3                	mov    %edx,%ebx
f0132dca:	f7 24 24             	mull   (%esp)
f0132dcd:	89 c6                	mov    %eax,%esi
f0132dcf:	89 d1                	mov    %edx,%ecx
f0132dd1:	39 d3                	cmp    %edx,%ebx
f0132dd3:	0f 82 87 00 00 00    	jb     f0132e60 <__umoddi3+0x134>
f0132dd9:	0f 84 91 00 00 00    	je     f0132e70 <__umoddi3+0x144>
f0132ddf:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132de3:	29 f2                	sub    %esi,%edx
f0132de5:	19 cb                	sbb    %ecx,%ebx
f0132de7:	89 d8                	mov    %ebx,%eax
f0132de9:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132ded:	d3 e0                	shl    %cl,%eax
f0132def:	89 e9                	mov    %ebp,%ecx
f0132df1:	d3 ea                	shr    %cl,%edx
f0132df3:	09 d0                	or     %edx,%eax
f0132df5:	89 e9                	mov    %ebp,%ecx
f0132df7:	d3 eb                	shr    %cl,%ebx
f0132df9:	89 da                	mov    %ebx,%edx
f0132dfb:	83 c4 1c             	add    $0x1c,%esp
f0132dfe:	5b                   	pop    %ebx
f0132dff:	5e                   	pop    %esi
f0132e00:	5f                   	pop    %edi
f0132e01:	5d                   	pop    %ebp
f0132e02:	c3                   	ret    
f0132e03:	90                   	nop
f0132e04:	89 fd                	mov    %edi,%ebp
f0132e06:	85 ff                	test   %edi,%edi
f0132e08:	75 0b                	jne    f0132e15 <__umoddi3+0xe9>
f0132e0a:	b8 01 00 00 00       	mov    $0x1,%eax
f0132e0f:	31 d2                	xor    %edx,%edx
f0132e11:	f7 f7                	div    %edi
f0132e13:	89 c5                	mov    %eax,%ebp
f0132e15:	89 f0                	mov    %esi,%eax
f0132e17:	31 d2                	xor    %edx,%edx
f0132e19:	f7 f5                	div    %ebp
f0132e1b:	89 c8                	mov    %ecx,%eax
f0132e1d:	f7 f5                	div    %ebp
f0132e1f:	89 d0                	mov    %edx,%eax
f0132e21:	e9 44 ff ff ff       	jmp    f0132d6a <__umoddi3+0x3e>
f0132e26:	66 90                	xchg   %ax,%ax
f0132e28:	89 c8                	mov    %ecx,%eax
f0132e2a:	89 f2                	mov    %esi,%edx
f0132e2c:	83 c4 1c             	add    $0x1c,%esp
f0132e2f:	5b                   	pop    %ebx
f0132e30:	5e                   	pop    %esi
f0132e31:	5f                   	pop    %edi
f0132e32:	5d                   	pop    %ebp
f0132e33:	c3                   	ret    
f0132e34:	3b 04 24             	cmp    (%esp),%eax
f0132e37:	72 06                	jb     f0132e3f <__umoddi3+0x113>
f0132e39:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132e3d:	77 0f                	ja     f0132e4e <__umoddi3+0x122>
f0132e3f:	89 f2                	mov    %esi,%edx
f0132e41:	29 f9                	sub    %edi,%ecx
f0132e43:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0132e47:	89 14 24             	mov    %edx,(%esp)
f0132e4a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132e4e:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132e52:	8b 14 24             	mov    (%esp),%edx
f0132e55:	83 c4 1c             	add    $0x1c,%esp
f0132e58:	5b                   	pop    %ebx
f0132e59:	5e                   	pop    %esi
f0132e5a:	5f                   	pop    %edi
f0132e5b:	5d                   	pop    %ebp
f0132e5c:	c3                   	ret    
f0132e5d:	8d 76 00             	lea    0x0(%esi),%esi
f0132e60:	2b 04 24             	sub    (%esp),%eax
f0132e63:	19 fa                	sbb    %edi,%edx
f0132e65:	89 d1                	mov    %edx,%ecx
f0132e67:	89 c6                	mov    %eax,%esi
f0132e69:	e9 71 ff ff ff       	jmp    f0132ddf <__umoddi3+0xb3>
f0132e6e:	66 90                	xchg   %ax,%ax
f0132e70:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0132e74:	72 ea                	jb     f0132e60 <__umoddi3+0x134>
f0132e76:	89 d9                	mov    %ebx,%ecx
f0132e78:	e9 62 ff ff ff       	jmp    f0132ddf <__umoddi3+0xb3>
