
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 17 00 	lgdtl  0x17c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 17 f0       	mov    $0xf017bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 f8 43 6d f0 01 	movl   $0x1,0xf06d43f8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 cc 43 6d f0 01 	movl   $0x1,0xf06d43cc
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 5c 45 6d f0       	mov    $0xf06d455c,%edx
f010006a:	b8 0c 44 64 f0       	mov    $0xf064440c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 0c 44 64 f0       	push   $0xf064440c
f010007e:	e8 96 97 02 00       	call   f0129819 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 0d 58 00 00       	call   f01058a2 <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 a6 53 00 00       	call   f0105440 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 54 5b 00 00       	call   f0105bf3 <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 63 c6 00 00       	call   f010c707 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		initialize_dyn_block_system();
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 7a 66 00 00       	call   f0106732 <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 d5 c7 00 00       	call   f010c89a <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 ee 85 00 00       	call   f01086bb <env_init>
	idt_init();
f01000cd:	e8 9f 9b 00 00       	call   f0109c71 <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 38 c7 00 00       	call   f010c814 <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 13 c7 00 00       	call   f010c7fc <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 33 c7 00 00       	call   f010c82c <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 b9 51 00 00       	call   f01052ba <pic_init>
	sched_init() ;
f0100101:	e8 5d 3e 00 00       	call   f0103f63 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 c0 a4 12 f0       	push   $0xf012a4c0
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 ec a4 12 f0       	push   $0xf012a4ec
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 11 a5 12 f0       	push   $0xf012a511
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 18 a5 12 f0       	push   $0xf012a518
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 60 a5 12 f0       	push   $0xf012a560
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 a8 a5 12 f0       	push   $0xf012a5a8
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 60 a5 12 f0       	push   $0xf012a560
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 18 a5 12 f0       	push   $0xf012a518
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 ed a5 12 f0       	push   $0xf012a5ed
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 20 44 64 f0       	mov    %eax,0xf0644420

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 f2 a5 12 f0       	push   $0xf012a5f2
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 0b a6 12 f0       	push   $0xf012a60b
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 90 83 00 00       	call   f01085a0 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 ee 3b 00 00       	call   f0103e03 <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 20 44 64 f0       	mov    %eax,0xf0644420

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 f2 a5 12 f0       	push   $0xf012a5f2
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 0b a6 12 f0       	push   $0xf012a60b
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 04 49 00 00       	call   f0104b6d <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 aa 46 00 00       	call   f010492d <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 78 3b 00 00       	call   f0103e03 <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 20 44 64 f0       	mov    %eax,0xf0644420

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 f2 a5 12 f0       	push   $0xf012a5f2
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 0b a6 12 f0       	push   $0xf012a60b
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 df 3e 00 00       	call   f01041dd <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 74 46 64 f0 00 	movl   $0x0,0xf0644674
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 48 44 6d f0       	mov    0xf06d4448,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 f4 43 6d f0 00 	movl   $0x0,0xf06d43f4
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 0d a6 12 f0       	push   $0xf012a60d
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 0b a6 12 f0       	push   $0xf012a60b
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 40 44 64 f0       	mov    0xf0644440,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 40 44 64 f0       	mov    %eax,0xf0644440
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 44 44 64 f0 b4 	movl   $0x3b4,0xf0644444
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 44 44 64 f0 d4 	movl   $0x3d4,0xf0644444
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 44 44 64 f0       	mov    0xf0644444,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 44 44 64 f0       	mov    0xf0644444,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 44 44 64 f0       	mov    0xf0644444,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 44 44 64 f0       	mov    0xf0644444,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 48 44 64 f0       	mov    %eax,0xf0644448
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 4c 44 64 f0    	mov    %ax,0xf064444c
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 4c 44 64 f0    	mov    %ax,0xf064444c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 48 44 64 f0    	mov    0xf0644448,%edx
f0100690:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 4c 44 64 f0    	mov    %ax,0xf064444c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d 4c 44 64 f0 	mov    0xf064444c,%cx
f01006c3:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 4c 44 64 f0    	mov    %ax,0xf064444c
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d 48 44 64 f0    	mov    0xf0644448,%ecx
f010072d:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 4c 44 64 f0 	mov    %dx,0xf064444c
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 48 44 64 f0       	mov    0xf0644448,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 48 44 64 f0       	mov    0xf0644448,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 d0 90 02 00       	call   f0129849 <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 48 44 64 f0    	mov    0xf0644448,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 4c 44 64 f0    	mov    %ax,0xf064444c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 44 44 64 f0       	mov    0xf0644444,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 44 44 64 f0    	mov    0xf0644444,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 44 44 64 f0       	mov    0xf0644444,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 4c 44 64 f0    	mov    0xf064444c,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 44 44 64 f0    	mov    0xf0644444,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 68 46 64 f0       	mov    %eax,0xf0644668
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 c0 17 f0    	mov    -0xfe83fe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 68 46 64 f0       	mov    %eax,0xf0644668
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 68 46 64 f0       	mov    %eax,0xf0644668
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 c0 17 f0    	mov    -0xfe83fe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 68 46 64 f0       	mov    %eax,0xf0644668
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 c1 17 f0    	mov    -0xfe83ee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 68 46 64 f0       	mov    %eax,0xf0644668

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 c5 17 f0 	mov    -0xfe83ae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 68 46 64 f0       	mov    0xf0644668,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 28 a6 12 f0       	push   $0xf012a628
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 64 46 64 f0    	mov    %edx,0xf0644664
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 60 44 64 f0    	mov    %dl,-0xf9bbba0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 64 46 64 f0 00 	movl   $0x0,0xf0644664
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 60 46 64 f0    	mov    0xf0644660,%edx
f0100a22:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 60 46 64 f0       	mov    0xf0644660,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 60 46 64 f0    	mov    %edx,0xf0644660
f0100a39:	8a 80 60 44 64 f0    	mov    -0xf9bbba0(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 60 46 64 f0       	mov    0xf0644660,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 60 46 64 f0 00 	movl   $0x0,0xf0644660
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 40 44 64 f0       	mov    0xf0644440,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 64 46 64 f0    	mov    %edx,0xf0644664
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 60 44 64 f0    	mov    %dl,-0xf9bbba0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 64 46 64 f0 00 	movl   $0x0,0xf0644664
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 64 46 64 f0    	mov    %edx,0xf0644664
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 60 44 64 f0    	mov    %dl,-0xf9bbba0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 64 46 64 f0 00 	movl   $0x0,0xf0644664
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 60 46 64 f0    	mov    0xf0644660,%edx
f0100b12:	a1 64 46 64 f0       	mov    0xf0644664,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 60 46 64 f0       	mov    0xf0644660,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 60 46 64 f0    	mov    %edx,0xf0644660
f0100b29:	8a 80 60 44 64 f0    	mov    -0xf9bbba0(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 60 46 64 f0       	mov    0xf0644660,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 60 46 64 f0 00 	movl   $0x0,0xf0644660
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 40 44 64 f0       	mov    0xf0644440,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 34 a6 12 f0       	push   $0xf012a634
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 58 83 02 00       	call   f0128f7d <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 51 a6 12 f0       	push   $0xf012a651
f0100c6b:	e8 b5 87 02 00       	call   f0129425 <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100c95:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0100c98:	50                   	push   %eax
f0100c99:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0100c9c:	50                   	push   %eax
f0100c9d:	68 57 a6 12 f0       	push   $0xf012a657
f0100ca2:	ff 75 08             	pushl  0x8(%ebp)
f0100ca5:	e8 b5 8f 02 00       	call   f0129c5f <strsplit>
f0100caa:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100cb0:	85 c0                	test   %eax,%eax
f0100cb2:	75 0a                	jne    f0100cbe <execute_command+0x2f>
		return 0;
f0100cb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cb9:	e9 99 00 00 00       	jmp    f0100d57 <execute_command+0xc8>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100cc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100ccc:	eb 33                	jmp    f0100d01 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cce:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cd1:	89 d0                	mov    %edx,%eax
f0100cd3:	01 c0                	add    %eax,%eax
f0100cd5:	01 d0                	add    %edx,%eax
f0100cd7:	c1 e0 02             	shl    $0x2,%eax
f0100cda:	05 40 c5 17 f0       	add    $0xf017c540,%eax
f0100cdf:	8b 10                	mov    (%eax),%edx
f0100ce1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0100ce4:	83 ec 08             	sub    $0x8,%esp
f0100ce7:	52                   	push   %edx
f0100ce8:	50                   	push   %eax
f0100ce9:	e8 49 8a 02 00       	call   f0129737 <strcmp>
f0100cee:	83 c4 10             	add    $0x10,%esp
f0100cf1:	85 c0                	test   %eax,%eax
f0100cf3:	75 09                	jne    f0100cfe <execute_command+0x6f>
		{
			command_found = 1;
f0100cf5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100cfc:	eb 0f                	jmp    f0100d0d <execute_command+0x7e>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100cfe:	ff 45 f0             	incl   -0x10(%ebp)
f0100d01:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d04:	a1 f8 c7 17 f0       	mov    0xf017c7f8,%eax
f0100d09:	39 c2                	cmp    %eax,%edx
f0100d0b:	72 c1                	jb     f0100cce <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f0100d0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d11:	74 2b                	je     f0100d3e <execute_command+0xaf>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d16:	89 d0                	mov    %edx,%eax
f0100d18:	01 c0                	add    %eax,%eax
f0100d1a:	01 d0                	add    %edx,%eax
f0100d1c:	c1 e0 02             	shl    $0x2,%eax
f0100d1f:	05 48 c5 17 f0       	add    $0xf017c548,%eax
f0100d24:	8b 00                	mov    (%eax),%eax
f0100d26:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100d29:	83 ec 08             	sub    $0x8,%esp
f0100d2c:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f0100d2f:	51                   	push   %ecx
f0100d30:	52                   	push   %edx
f0100d31:	ff d0                	call   *%eax
f0100d33:	83 c4 10             	add    $0x10,%esp
f0100d36:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f0100d39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d3c:	eb 19                	jmp    f0100d57 <execute_command+0xc8>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100d3e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0100d41:	83 ec 08             	sub    $0x8,%esp
f0100d44:	50                   	push   %eax
f0100d45:	68 5c a6 12 f0       	push   $0xf012a65c
f0100d4a:	e8 de fe ff ff       	call   f0100c2d <cprintf>
f0100d4f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0100d52:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0100d57:	c9                   	leave  
f0100d58:	c3                   	ret    

f0100d59 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100d59:	55                   	push   %ebp
f0100d5a:	89 e5                	mov    %esp,%ebp
f0100d5c:	c7 05 f8 43 6d f0 00 	movl   $0x0,0xf06d43f8
f0100d63:	00 00 00 
f0100d66:	90                   	nop
f0100d67:	5d                   	pop    %ebp
f0100d68:	c3                   	ret    

f0100d69 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100d69:	55                   	push   %ebp
f0100d6a:	89 e5                	mov    %esp,%ebp
f0100d6c:	c7 05 f8 43 6d f0 01 	movl   $0x1,0xf06d43f8
f0100d73:	00 00 00 
f0100d76:	90                   	nop
f0100d77:	5d                   	pop    %ebp
f0100d78:	c3                   	ret    

f0100d79 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	c7 05 f8 43 6d f0 02 	movl   $0x2,0xf06d43f8
f0100d83:	00 00 00 
f0100d86:	90                   	nop
f0100d87:	5d                   	pop    %ebp
f0100d88:	c3                   	ret    

f0100d89 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100d89:	55                   	push   %ebp
f0100d8a:	89 e5                	mov    %esp,%ebp
f0100d8c:	c7 05 f8 43 6d f0 03 	movl   $0x3,0xf06d43f8
f0100d93:	00 00 00 
f0100d96:	90                   	nop
f0100d97:	5d                   	pop    %ebp
f0100d98:	c3                   	ret    

f0100d99 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100d99:	55                   	push   %ebp
f0100d9a:	89 e5                	mov    %esp,%ebp
f0100d9c:	c7 05 f8 43 6d f0 04 	movl   $0x4,0xf06d43f8
f0100da3:	00 00 00 
f0100da6:	90                   	nop
f0100da7:	5d                   	pop    %ebp
f0100da8:	c3                   	ret    

f0100da9 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100da9:	55                   	push   %ebp
f0100daa:	89 e5                	mov    %esp,%ebp
f0100dac:	a1 f8 43 6d f0       	mov    0xf06d43f8,%eax
f0100db1:	85 c0                	test   %eax,%eax
f0100db3:	75 04                	jne    f0100db9 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100db5:	b0 01                	mov    $0x1,%al
f0100db7:	eb 02                	jmp    f0100dbb <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100db9:	b0 00                	mov    $0x0,%al
f0100dbb:	5d                   	pop    %ebp
f0100dbc:	c3                   	ret    

f0100dbd <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100dbd:	55                   	push   %ebp
f0100dbe:	89 e5                	mov    %esp,%ebp
f0100dc0:	a1 f8 43 6d f0       	mov    0xf06d43f8,%eax
f0100dc5:	83 f8 01             	cmp    $0x1,%eax
f0100dc8:	75 04                	jne    f0100dce <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100dca:	b0 01                	mov    $0x1,%al
f0100dcc:	eb 02                	jmp    f0100dd0 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100dce:	b0 00                	mov    $0x0,%al
f0100dd0:	5d                   	pop    %ebp
f0100dd1:	c3                   	ret    

f0100dd2 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100dd2:	55                   	push   %ebp
f0100dd3:	89 e5                	mov    %esp,%ebp
f0100dd5:	a1 f8 43 6d f0       	mov    0xf06d43f8,%eax
f0100dda:	83 f8 02             	cmp    $0x2,%eax
f0100ddd:	75 04                	jne    f0100de3 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100ddf:	b0 01                	mov    $0x1,%al
f0100de1:	eb 02                	jmp    f0100de5 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100de3:	b0 00                	mov    $0x0,%al
f0100de5:	5d                   	pop    %ebp
f0100de6:	c3                   	ret    

f0100de7 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100de7:	55                   	push   %ebp
f0100de8:	89 e5                	mov    %esp,%ebp
f0100dea:	a1 f8 43 6d f0       	mov    0xf06d43f8,%eax
f0100def:	83 f8 03             	cmp    $0x3,%eax
f0100df2:	75 04                	jne    f0100df8 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100df4:	b0 01                	mov    $0x1,%al
f0100df6:	eb 02                	jmp    f0100dfa <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100df8:	b0 00                	mov    $0x0,%al
f0100dfa:	5d                   	pop    %ebp
f0100dfb:	c3                   	ret    

f0100dfc <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100dfc:	55                   	push   %ebp
f0100dfd:	89 e5                	mov    %esp,%ebp
f0100dff:	a1 f8 43 6d f0       	mov    0xf06d43f8,%eax
f0100e04:	83 f8 04             	cmp    $0x4,%eax
f0100e07:	75 04                	jne    f0100e0d <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100e09:	b0 01                	mov    $0x1,%al
f0100e0b:	eb 02                	jmp    f0100e0f <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100e0d:	b0 00                	mov    $0x0,%al
f0100e0f:	5d                   	pop    %ebp
f0100e10:	c3                   	ret    

f0100e11 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100e11:	55                   	push   %ebp
f0100e12:	89 e5                	mov    %esp,%ebp
f0100e14:	c7 05 cc 43 6d f0 01 	movl   $0x1,0xf06d43cc
f0100e1b:	00 00 00 
f0100e1e:	90                   	nop
f0100e1f:	5d                   	pop    %ebp
f0100e20:	c3                   	ret    

f0100e21 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100e21:	55                   	push   %ebp
f0100e22:	89 e5                	mov    %esp,%ebp
f0100e24:	c7 05 cc 43 6d f0 02 	movl   $0x2,0xf06d43cc
f0100e2b:	00 00 00 
f0100e2e:	90                   	nop
f0100e2f:	5d                   	pop    %ebp
f0100e30:	c3                   	ret    

f0100e31 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	c7 05 cc 43 6d f0 03 	movl   $0x3,0xf06d43cc
f0100e3b:	00 00 00 
f0100e3e:	90                   	nop
f0100e3f:	5d                   	pop    %ebp
f0100e40:	c3                   	ret    

f0100e41 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100e41:	55                   	push   %ebp
f0100e42:	89 e5                	mov    %esp,%ebp
f0100e44:	c7 05 cc 43 6d f0 04 	movl   $0x4,0xf06d43cc
f0100e4b:	00 00 00 
f0100e4e:	90                   	nop
f0100e4f:	5d                   	pop    %ebp
f0100e50:	c3                   	ret    

f0100e51 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e51:	55                   	push   %ebp
f0100e52:	89 e5                	mov    %esp,%ebp
f0100e54:	a1 cc 43 6d f0       	mov    0xf06d43cc,%eax
f0100e59:	83 f8 01             	cmp    $0x1,%eax
f0100e5c:	75 04                	jne    f0100e62 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100e5e:	b0 01                	mov    $0x1,%al
f0100e60:	eb 02                	jmp    f0100e64 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100e62:	b0 00                	mov    $0x0,%al
f0100e64:	5d                   	pop    %ebp
f0100e65:	c3                   	ret    

f0100e66 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100e66:	55                   	push   %ebp
f0100e67:	89 e5                	mov    %esp,%ebp
f0100e69:	a1 cc 43 6d f0       	mov    0xf06d43cc,%eax
f0100e6e:	83 f8 02             	cmp    $0x2,%eax
f0100e71:	75 04                	jne    f0100e77 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100e73:	b0 01                	mov    $0x1,%al
f0100e75:	eb 02                	jmp    f0100e79 <isUHeapPlacementStrategyBESTFIT+0x13>
f0100e77:	b0 00                	mov    $0x0,%al
f0100e79:	5d                   	pop    %ebp
f0100e7a:	c3                   	ret    

f0100e7b <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e7b:	55                   	push   %ebp
f0100e7c:	89 e5                	mov    %esp,%ebp
f0100e7e:	a1 cc 43 6d f0       	mov    0xf06d43cc,%eax
f0100e83:	83 f8 03             	cmp    $0x3,%eax
f0100e86:	75 04                	jne    f0100e8c <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100e88:	b0 01                	mov    $0x1,%al
f0100e8a:	eb 02                	jmp    f0100e8e <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100e8c:	b0 00                	mov    $0x0,%al
f0100e8e:	5d                   	pop    %ebp
f0100e8f:	c3                   	ret    

f0100e90 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100e90:	55                   	push   %ebp
f0100e91:	89 e5                	mov    %esp,%ebp
f0100e93:	a1 cc 43 6d f0       	mov    0xf06d43cc,%eax
f0100e98:	83 f8 04             	cmp    $0x4,%eax
f0100e9b:	75 04                	jne    f0100ea1 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100e9d:	b0 01                	mov    $0x1,%al
f0100e9f:	eb 02                	jmp    f0100ea3 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100ea1:	b0 00                	mov    $0x0,%al
f0100ea3:	5d                   	pop    %ebp
f0100ea4:	c3                   	ret    

f0100ea5 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100ea5:	55                   	push   %ebp
f0100ea6:	89 e5                	mov    %esp,%ebp
f0100ea8:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100eab:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eae:	c1 e8 0c             	shr    $0xc,%eax
f0100eb1:	89 c2                	mov    %eax,%edx
f0100eb3:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0100eb8:	39 c2                	cmp    %eax,%edx
f0100eba:	72 14                	jb     f0100ed0 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100ebc:	83 ec 04             	sub    $0x4,%esp
f0100ebf:	68 74 a6 12 f0       	push   $0xf012a674
f0100ec4:	6a 55                	push   $0x55
f0100ec6:	68 9c a6 12 f0       	push   $0xf012a69c
f0100ecb:	e8 d6 f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100ed0:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f0100ed6:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ed9:	c1 e8 0c             	shr    $0xc,%eax
f0100edc:	89 c1                	mov    %eax,%ecx
f0100ede:	89 c8                	mov    %ecx,%eax
f0100ee0:	01 c0                	add    %eax,%eax
f0100ee2:	01 c8                	add    %ecx,%eax
f0100ee4:	c1 e0 03             	shl    $0x3,%eax
f0100ee7:	01 d0                	add    %edx,%eax
}
f0100ee9:	c9                   	leave  
f0100eea:	c3                   	ret    

f0100eeb <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	53                   	push   %ebx
f0100eef:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ef2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ef9:	eb 3b                	jmp    f0100f36 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100efb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100efe:	89 d0                	mov    %edx,%eax
f0100f00:	01 c0                	add    %eax,%eax
f0100f02:	01 d0                	add    %edx,%eax
f0100f04:	c1 e0 02             	shl    $0x2,%eax
f0100f07:	05 44 c5 17 f0       	add    $0xf017c544,%eax
f0100f0c:	8b 10                	mov    (%eax),%edx
f0100f0e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100f11:	89 c8                	mov    %ecx,%eax
f0100f13:	01 c0                	add    %eax,%eax
f0100f15:	01 c8                	add    %ecx,%eax
f0100f17:	c1 e0 02             	shl    $0x2,%eax
f0100f1a:	05 40 c5 17 f0       	add    $0xf017c540,%eax
f0100f1f:	8b 00                	mov    (%eax),%eax
f0100f21:	83 ec 04             	sub    $0x4,%esp
f0100f24:	52                   	push   %edx
f0100f25:	50                   	push   %eax
f0100f26:	68 72 b1 12 f0       	push   $0xf012b172
f0100f2b:	e8 fd fc ff ff       	call   f0100c2d <cprintf>
f0100f30:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f33:	ff 45 f4             	incl   -0xc(%ebp)
f0100f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f39:	a1 f8 c7 17 f0       	mov    0xf017c7f8,%eax
f0100f3e:	39 c2                	cmp    %eax,%edx
f0100f40:	72 b9                	jb     f0100efb <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100f42:	83 ec 0c             	sub    $0xc,%esp
f0100f45:	68 7b b1 12 f0       	push   $0xf012b17b
f0100f4a:	e8 de fc ff ff       	call   f0100c2d <cprintf>
f0100f4f:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f59:	eb 42                	jmp    f0100f9d <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0100f5b:	8b 0d 00 cc 17 f0    	mov    0xf017cc00,%ecx
f0100f61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f64:	89 d0                	mov    %edx,%eax
f0100f66:	01 c0                	add    %eax,%eax
f0100f68:	01 d0                	add    %edx,%eax
f0100f6a:	c1 e0 02             	shl    $0x2,%eax
f0100f6d:	01 c8                	add    %ecx,%eax
f0100f6f:	8b 50 04             	mov    0x4(%eax),%edx
f0100f72:	8b 1d 00 cc 17 f0    	mov    0xf017cc00,%ebx
f0100f78:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100f7b:	89 c8                	mov    %ecx,%eax
f0100f7d:	01 c0                	add    %eax,%eax
f0100f7f:	01 c8                	add    %ecx,%eax
f0100f81:	c1 e0 02             	shl    $0x2,%eax
f0100f84:	01 d8                	add    %ebx,%eax
f0100f86:	8b 00                	mov    (%eax),%eax
f0100f88:	83 ec 04             	sub    $0x4,%esp
f0100f8b:	52                   	push   %edx
f0100f8c:	50                   	push   %eax
f0100f8d:	68 90 b1 12 f0       	push   $0xf012b190
f0100f92:	e8 96 fc ff ff       	call   f0100c2d <cprintf>
f0100f97:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100f9a:	ff 45 f4             	incl   -0xc(%ebp)
f0100f9d:	a1 04 cc 17 f0       	mov    0xf017cc04,%eax
f0100fa2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0100fa5:	7c b4                	jl     f0100f5b <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0100fa7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100fac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100faf:	c9                   	leave  
f0100fb0:	c3                   	ret    

f0100fb1 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0100fb1:	55                   	push   %ebp
f0100fb2:	89 e5                	mov    %esp,%ebp
f0100fb4:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0100fb7:	83 ec 0c             	sub    $0xc,%esp
f0100fba:	68 ac b1 12 f0       	push   $0xf012b1ac
f0100fbf:	e8 69 fc ff ff       	call   f0100c2d <cprintf>
f0100fc4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0100fc7:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0100fcc:	83 ec 04             	sub    $0x4,%esp
f0100fcf:	50                   	push   %eax
f0100fd0:	68 0c 00 10 f0       	push   $0xf010000c
f0100fd5:	68 c8 b1 12 f0       	push   $0xf012b1c8
f0100fda:	e8 4e fc ff ff       	call   f0100c2d <cprintf>
f0100fdf:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0100fe2:	b8 b1 a4 12 00       	mov    $0x12a4b1,%eax
f0100fe7:	83 ec 04             	sub    $0x4,%esp
f0100fea:	50                   	push   %eax
f0100feb:	68 b1 a4 12 f0       	push   $0xf012a4b1
f0100ff0:	68 04 b2 12 f0       	push   $0xf012b204
f0100ff5:	e8 33 fc ff ff       	call   f0100c2d <cprintf>
f0100ffa:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0100ffd:	b8 0c 44 64 00       	mov    $0x64440c,%eax
f0101002:	83 ec 04             	sub    $0x4,%esp
f0101005:	50                   	push   %eax
f0101006:	68 0c 44 64 f0       	push   $0xf064440c
f010100b:	68 40 b2 12 f0       	push   $0xf012b240
f0101010:	e8 18 fc ff ff       	call   f0100c2d <cprintf>
f0101015:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101018:	b8 5c 45 6d 00       	mov    $0x6d455c,%eax
f010101d:	83 ec 04             	sub    $0x4,%esp
f0101020:	50                   	push   %eax
f0101021:	68 5c 45 6d f0       	push   $0xf06d455c
f0101026:	68 88 b2 12 f0       	push   $0xf012b288
f010102b:	e8 fd fb ff ff       	call   f0100c2d <cprintf>
f0101030:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101033:	b8 5c 45 6d f0       	mov    $0xf06d455c,%eax
f0101038:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f010103e:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101043:	29 c2                	sub    %eax,%edx
f0101045:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101047:	85 c0                	test   %eax,%eax
f0101049:	79 05                	jns    f0101050 <command_kernel_info+0x9f>
f010104b:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101050:	c1 f8 0a             	sar    $0xa,%eax
f0101053:	83 ec 08             	sub    $0x8,%esp
f0101056:	50                   	push   %eax
f0101057:	68 c4 b2 12 f0       	push   $0xf012b2c4
f010105c:	e8 cc fb ff ff       	call   f0100c2d <cprintf>
f0101061:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101064:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101069:	c9                   	leave  
f010106a:	c3                   	ret    

f010106b <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f010106b:	55                   	push   %ebp
f010106c:	89 e5                	mov    %esp,%ebp
f010106e:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101071:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101074:	83 c0 04             	add    $0x4,%eax
f0101077:	8b 00                	mov    (%eax),%eax
f0101079:	83 ec 04             	sub    $0x4,%esp
f010107c:	6a 0a                	push   $0xa
f010107e:	6a 00                	push   $0x0
f0101080:	50                   	push   %eax
f0101081:	e8 05 89 02 00       	call   f012998b <strtol>
f0101086:	83 c4 10             	add    $0x10,%esp
f0101089:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f010108c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101093:	83 ec 04             	sub    $0x4,%esp
f0101096:	6a 00                	push   $0x0
f0101098:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010109b:	50                   	push   %eax
f010109c:	ff 75 f4             	pushl  -0xc(%ebp)
f010109f:	e8 1b 75 00 00       	call   f01085bf <envid2env>
f01010a4:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f01010a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010aa:	83 c0 0c             	add    $0xc,%eax
f01010ad:	8b 00                	mov    (%eax),%eax
f01010af:	83 ec 04             	sub    $0x4,%esp
f01010b2:	6a 10                	push   $0x10
f01010b4:	6a 00                	push   $0x0
f01010b6:	50                   	push   %eax
f01010b7:	e8 cf 88 02 00       	call   f012998b <strtol>
f01010bc:	83 c4 10             	add    $0x10,%esp
f01010bf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f01010c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01010c5:	85 c0                	test   %eax,%eax
f01010c7:	75 07                	jne    f01010d0 <command_writeusermem+0x65>
f01010c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01010ce:	eb 43                	jmp    f0101113 <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01010d0:	0f 20 d8             	mov    %cr3,%eax
f01010d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01010d6:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f01010d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f01010dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01010df:	8b 40 60             	mov    0x60(%eax),%eax
f01010e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01010e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01010e8:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f01010eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01010ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f01010f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010f4:	83 c0 08             	add    $0x8,%eax
f01010f7:	8b 00                	mov    (%eax),%eax
f01010f9:	8a 00                	mov    (%eax),%al
f01010fb:	88 c2                	mov    %al,%dl
f01010fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101100:	88 10                	mov    %dl,(%eax)
f0101102:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101105:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101108:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010110b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f010110e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101113:	c9                   	leave  
f0101114:	c3                   	ret    

f0101115 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101115:	55                   	push   %ebp
f0101116:	89 e5                	mov    %esp,%ebp
f0101118:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010111b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010111e:	83 c0 04             	add    $0x4,%eax
f0101121:	8b 00                	mov    (%eax),%eax
f0101123:	83 ec 04             	sub    $0x4,%esp
f0101126:	6a 10                	push   $0x10
f0101128:	6a 00                	push   $0x0
f010112a:	50                   	push   %eax
f010112b:	e8 5b 88 02 00       	call   f012998b <strtol>
f0101130:	83 c4 10             	add    $0x10,%esp
f0101133:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101138:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f010113b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010113e:	83 c0 08             	add    $0x8,%eax
f0101141:	8b 00                	mov    (%eax),%eax
f0101143:	83 ec 04             	sub    $0x4,%esp
f0101146:	6a 0a                	push   $0xa
f0101148:	6a 00                	push   $0x0
f010114a:	50                   	push   %eax
f010114b:	e8 3b 88 02 00       	call   f012998b <strtol>
f0101150:	83 c4 10             	add    $0x10,%esp
f0101153:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101156:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f010115d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101160:	83 c0 0c             	add    $0xc,%eax
f0101163:	8b 00                	mov    (%eax),%eax
f0101165:	83 ec 0c             	sub    $0xc,%esp
f0101168:	50                   	push   %eax
f0101169:	e8 bd 84 02 00       	call   f012962b <strlen>
f010116e:	83 c4 10             	add    $0x10,%esp
f0101171:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101174:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010117b:	eb 30                	jmp    f01011ad <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f010117d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101184:	eb 1c                	jmp    f01011a2 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101186:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101189:	83 c0 0c             	add    $0xc,%eax
f010118c:	8b 10                	mov    (%eax),%edx
f010118e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101191:	01 d0                	add    %edx,%eax
f0101193:	8a 00                	mov    (%eax),%al
f0101195:	88 c2                	mov    %al,%dl
f0101197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010119a:	88 10                	mov    %dl,(%eax)
			address++;
f010119c:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f010119f:	ff 45 ec             	incl   -0x14(%ebp)
f01011a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01011a5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01011a8:	7c dc                	jl     f0101186 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f01011aa:	ff 45 f0             	incl   -0x10(%ebp)
f01011ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01011b0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01011b3:	7c c8                	jl     f010117d <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f01011b5:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01011ba:	c9                   	leave  
f01011bb:	c3                   	ret    

f01011bc <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01011bc:	55                   	push   %ebp
f01011bd:	89 e5                	mov    %esp,%ebp
f01011bf:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01011c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c5:	83 c0 04             	add    $0x4,%eax
f01011c8:	8b 00                	mov    (%eax),%eax
f01011ca:	83 ec 04             	sub    $0x4,%esp
f01011cd:	6a 0a                	push   $0xa
f01011cf:	6a 00                	push   $0x0
f01011d1:	50                   	push   %eax
f01011d2:	e8 b4 87 02 00       	call   f012998b <strtol>
f01011d7:	83 c4 10             	add    $0x10,%esp
f01011da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01011dd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01011e4:	83 ec 04             	sub    $0x4,%esp
f01011e7:	6a 00                	push   $0x0
f01011e9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01011ec:	50                   	push   %eax
f01011ed:	ff 75 f4             	pushl  -0xc(%ebp)
f01011f0:	e8 ca 73 00 00       	call   f01085bf <envid2env>
f01011f5:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01011f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011fb:	83 c0 08             	add    $0x8,%eax
f01011fe:	8b 00                	mov    (%eax),%eax
f0101200:	83 ec 04             	sub    $0x4,%esp
f0101203:	6a 10                	push   $0x10
f0101205:	6a 00                	push   $0x0
f0101207:	50                   	push   %eax
f0101208:	e8 7e 87 02 00       	call   f012998b <strtol>
f010120d:	83 c4 10             	add    $0x10,%esp
f0101210:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101213:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101216:	85 c0                	test   %eax,%eax
f0101218:	75 07                	jne    f0101221 <command_readusermem+0x65>
f010121a:	b8 00 00 00 00       	mov    $0x0,%eax
f010121f:	eb 4e                	jmp    f010126f <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101221:	0f 20 d8             	mov    %cr3,%eax
f0101224:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101227:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f010122a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f010122d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101230:	8b 40 60             	mov    0x60(%eax),%eax
f0101233:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101236:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101239:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f010123c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010123f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101242:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101245:	8a 00                	mov    (%eax),%al
f0101247:	0f b6 c0             	movzbl %al,%eax
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	50                   	push   %eax
f010124e:	ff 75 f0             	pushl  -0x10(%ebp)
f0101251:	68 ef b2 12 f0       	push   $0xf012b2ef
f0101256:	e8 d2 f9 ff ff       	call   f0100c2d <cprintf>
f010125b:	83 c4 10             	add    $0x10,%esp
f010125e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101261:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101264:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101267:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f010126a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010126f:	c9                   	leave  
f0101270:	c3                   	ret    

f0101271 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101271:	55                   	push   %ebp
f0101272:	89 e5                	mov    %esp,%ebp
f0101274:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101277:	8b 45 0c             	mov    0xc(%ebp),%eax
f010127a:	83 c0 04             	add    $0x4,%eax
f010127d:	8b 00                	mov    (%eax),%eax
f010127f:	83 ec 04             	sub    $0x4,%esp
f0101282:	6a 10                	push   $0x10
f0101284:	6a 00                	push   $0x0
f0101286:	50                   	push   %eax
f0101287:	e8 ff 86 02 00       	call   f012998b <strtol>
f010128c:	83 c4 10             	add    $0x10,%esp
f010128f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101294:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101297:	8b 45 0c             	mov    0xc(%ebp),%eax
f010129a:	83 c0 08             	add    $0x8,%eax
f010129d:	8b 00                	mov    (%eax),%eax
f010129f:	83 ec 04             	sub    $0x4,%esp
f01012a2:	6a 0a                	push   $0xa
f01012a4:	6a 00                	push   $0x0
f01012a6:	50                   	push   %eax
f01012a7:	e8 df 86 02 00       	call   f012998b <strtol>
f01012ac:	83 c4 10             	add    $0x10,%esp
f01012af:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01012b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01012b9:	eb 22                	jmp    f01012dd <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01012bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01012be:	8d 50 01             	lea    0x1(%eax),%edx
f01012c1:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01012c4:	8a 00                	mov    (%eax),%al
f01012c6:	0f b6 c0             	movzbl %al,%eax
f01012c9:	83 ec 08             	sub    $0x8,%esp
f01012cc:	50                   	push   %eax
f01012cd:	68 09 b3 12 f0       	push   $0xf012b309
f01012d2:	e8 56 f9 ff ff       	call   f0100c2d <cprintf>
f01012d7:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01012da:	ff 45 f0             	incl   -0x10(%ebp)
f01012dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01012e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01012e3:	7c d6                	jl     f01012bb <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01012e5:	83 ec 0c             	sub    $0xc,%esp
f01012e8:	68 0c b3 12 f0       	push   $0xf012b30c
f01012ed:	e8 3b f9 ff ff       	call   f0100c2d <cprintf>
f01012f2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01012f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012fa:	c9                   	leave  
f01012fb:	c3                   	ret    

f01012fc <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01012fc:	55                   	push   %ebp
f01012fd:	89 e5                	mov    %esp,%ebp
f01012ff:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101302:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101305:	83 c0 04             	add    $0x4,%eax
f0101308:	8b 00                	mov    (%eax),%eax
f010130a:	83 ec 04             	sub    $0x4,%esp
f010130d:	6a 0a                	push   $0xa
f010130f:	6a 00                	push   $0x0
f0101311:	50                   	push   %eax
f0101312:	e8 74 86 02 00       	call   f012998b <strtol>
f0101317:	83 c4 10             	add    $0x10,%esp
f010131a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f010131d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101324:	83 ec 04             	sub    $0x4,%esp
f0101327:	6a 00                	push   $0x0
f0101329:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010132c:	50                   	push   %eax
f010132d:	ff 75 ec             	pushl  -0x14(%ebp)
f0101330:	e8 8a 72 00 00       	call   f01085bf <envid2env>
f0101335:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101338:	8b 45 0c             	mov    0xc(%ebp),%eax
f010133b:	83 c0 08             	add    $0x8,%eax
f010133e:	8b 00                	mov    (%eax),%eax
f0101340:	83 ec 04             	sub    $0x4,%esp
f0101343:	6a 10                	push   $0x10
f0101345:	6a 00                	push   $0x0
f0101347:	50                   	push   %eax
f0101348:	e8 3e 86 02 00       	call   f012998b <strtol>
f010134d:	83 c4 10             	add    $0x10,%esp
f0101350:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101353:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101356:	83 c0 0c             	add    $0xc,%eax
f0101359:	8b 00                	mov    (%eax),%eax
f010135b:	83 ec 04             	sub    $0x4,%esp
f010135e:	6a 0a                	push   $0xa
f0101360:	6a 00                	push   $0x0
f0101362:	50                   	push   %eax
f0101363:	e8 23 86 02 00       	call   f012998b <strtol>
f0101368:	83 c4 10             	add    $0x10,%esp
f010136b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f010136e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101371:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101374:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101377:	85 c0                	test   %eax,%eax
f0101379:	75 07                	jne    f0101382 <command_readuserblock+0x86>
f010137b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101380:	eb 65                	jmp    f01013e7 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101382:	0f 20 d8             	mov    %cr3,%eax
f0101385:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101388:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f010138b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f010138e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101391:	8b 40 60             	mov    0x60(%eax),%eax
f0101394:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101397:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010139a:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010139d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01013a4:	eb 28                	jmp    f01013ce <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01013a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01013a9:	8a 00                	mov    (%eax),%al
f01013ab:	0f b6 d0             	movzbl %al,%edx
f01013ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01013b1:	8a 00                	mov    (%eax),%al
f01013b3:	0f b6 c0             	movzbl %al,%eax
f01013b6:	52                   	push   %edx
f01013b7:	50                   	push   %eax
f01013b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01013bb:	68 0e b3 12 f0       	push   $0xf012b30e
f01013c0:	e8 68 f8 ff ff       	call   f0100c2d <cprintf>
f01013c5:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01013c8:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01013cb:	ff 45 f0             	incl   -0x10(%ebp)
f01013ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01013d1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01013d4:	7c d0                	jl     f01013a6 <command_readuserblock+0xaa>
f01013d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01013dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01013df:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01013e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013e7:	c9                   	leave  
f01013e8:	c3                   	ret    

f01013e9 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01013e9:	55                   	push   %ebp
f01013ea:	89 e5                	mov    %esp,%ebp
f01013ec:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01013ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f2:	83 c0 04             	add    $0x4,%eax
f01013f5:	8b 00                	mov    (%eax),%eax
f01013f7:	83 ec 04             	sub    $0x4,%esp
f01013fa:	6a 0a                	push   $0xa
f01013fc:	6a 00                	push   $0x0
f01013fe:	50                   	push   %eax
f01013ff:	e8 87 85 02 00       	call   f012998b <strtol>
f0101404:	83 c4 10             	add    $0x10,%esp
f0101407:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f010140a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101411:	83 ec 04             	sub    $0x4,%esp
f0101414:	6a 00                	push   $0x0
f0101416:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101419:	50                   	push   %eax
f010141a:	ff 75 f4             	pushl  -0xc(%ebp)
f010141d:	e8 9d 71 00 00       	call   f01085bf <envid2env>
f0101422:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101425:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101428:	85 c0                	test   %eax,%eax
f010142a:	75 0a                	jne    f0101436 <command_remove_table+0x4d>
f010142c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101431:	e9 a1 00 00 00       	jmp    f01014d7 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101436:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101439:	83 c0 08             	add    $0x8,%eax
f010143c:	8b 00                	mov    (%eax),%eax
f010143e:	83 ec 04             	sub    $0x4,%esp
f0101441:	6a 10                	push   $0x10
f0101443:	6a 00                	push   $0x0
f0101445:	50                   	push   %eax
f0101446:	e8 40 85 02 00       	call   f012998b <strtol>
f010144b:	83 c4 10             	add    $0x10,%esp
f010144e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101451:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101454:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101457:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010145a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010145d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101460:	c1 ea 16             	shr    $0x16,%edx
f0101463:	c1 e2 02             	shl    $0x2,%edx
f0101466:	01 d0                	add    %edx,%eax
f0101468:	8b 00                	mov    (%eax),%eax
f010146a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010146f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101472:	83 ec 0c             	sub    $0xc,%esp
f0101475:	ff 75 e8             	pushl  -0x18(%ebp)
f0101478:	e8 28 fa ff ff       	call   f0100ea5 <to_frame_info>
f010147d:	83 c4 10             	add    $0x10,%esp
f0101480:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101483:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101486:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010148c:	83 ec 0c             	sub    $0xc,%esp
f010148f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101492:	e8 40 4c 00 00       	call   f01060d7 <free_frame>
f0101497:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010149a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010149d:	c1 e8 16             	shr    $0x16,%eax
f01014a0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01014a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01014a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01014ac:	c1 e2 02             	shl    $0x2,%edx
f01014af:	01 c2                	add    %eax,%edx
f01014b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014b4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01014b7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01014ba:	c1 e1 02             	shl    $0x2,%ecx
f01014bd:	01 c8                	add    %ecx,%eax
f01014bf:	8b 00                	mov    (%eax),%eax
f01014c1:	83 e0 fe             	and    $0xfffffffe,%eax
f01014c4:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01014c6:	0f 20 d8             	mov    %cr3,%eax
f01014c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01014cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014cf:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01014d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01014d7:	c9                   	leave  
f01014d8:	c3                   	ret    

f01014d9 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01014d9:	55                   	push   %ebp
f01014da:	89 e5                	mov    %esp,%ebp
f01014dc:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01014df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e2:	83 c0 04             	add    $0x4,%eax
f01014e5:	8b 00                	mov    (%eax),%eax
f01014e7:	83 ec 04             	sub    $0x4,%esp
f01014ea:	6a 0a                	push   $0xa
f01014ec:	6a 00                	push   $0x0
f01014ee:	50                   	push   %eax
f01014ef:	e8 97 84 02 00       	call   f012998b <strtol>
f01014f4:	83 c4 10             	add    $0x10,%esp
f01014f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01014fa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	envid2env(envId, &env, 0 );
f0101501:	83 ec 04             	sub    $0x4,%esp
f0101504:	6a 00                	push   $0x0
f0101506:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0101509:	50                   	push   %eax
f010150a:	ff 75 f4             	pushl  -0xc(%ebp)
f010150d:	e8 ad 70 00 00       	call   f01085bf <envid2env>
f0101512:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101515:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101518:	85 c0                	test   %eax,%eax
f010151a:	75 07                	jne    f0101523 <command_allocuserpage+0x4a>
f010151c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101521:	eb 67                	jmp    f010158a <command_allocuserpage+0xb1>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101523:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101526:	83 c0 08             	add    $0x8,%eax
f0101529:	8b 00                	mov    (%eax),%eax
f010152b:	83 ec 04             	sub    $0x4,%esp
f010152e:	6a 10                	push   $0x10
f0101530:	6a 00                	push   $0x0
f0101532:	50                   	push   %eax
f0101533:	e8 53 84 02 00       	call   f012998b <strtol>
f0101538:	83 c4 10             	add    $0x10,%esp
f010153b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f010153e:	83 ec 0c             	sub    $0xc,%esp
f0101541:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101544:	50                   	push   %eax
f0101545:	e8 78 4a 00 00       	call   f0105fc2 <allocate_frame>
f010154a:	83 c4 10             	add    $0x10,%esp
f010154d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (ret == E_NO_MEM)
f0101550:	83 7d ec fc          	cmpl   $0xfffffffc,-0x14(%ebp)
f0101554:	75 17                	jne    f010156d <command_allocuserpage+0x94>
	{
		cprintf("ERROR: no enough memory\n");
f0101556:	83 ec 0c             	sub    $0xc,%esp
f0101559:	68 1f b3 12 f0       	push   $0xf012b31f
f010155e:	e8 ca f6 ff ff       	call   f0100c2d <cprintf>
f0101563:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101566:	b8 00 00 00 00       	mov    $0x0,%eax
f010156b:	eb 1d                	jmp    f010158a <command_allocuserpage+0xb1>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f010156d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0101570:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101573:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101576:	6a 06                	push   $0x6
f0101578:	ff 75 f0             	pushl  -0x10(%ebp)
f010157b:	52                   	push   %edx
f010157c:	50                   	push   %eax
f010157d:	e8 d8 4d 00 00       	call   f010635a <map_frame>
f0101582:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101585:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010158a:	c9                   	leave  
f010158b:	c3                   	ret    

f010158c <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f010158c:	55                   	push   %ebp
f010158d:	89 e5                	mov    %esp,%ebp
f010158f:	56                   	push   %esi
f0101590:	53                   	push   %ebx
f0101591:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101594:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101597:	83 ec 0c             	sub    $0xc,%esp
f010159a:	50                   	push   %eax
f010159b:	e8 2a 50 00 00       	call   f01065ca <calculate_available_frames>
f01015a0:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01015a3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01015a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01015a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f01015ac:	8b 75 ec             	mov    -0x14(%ebp),%esi
f01015af:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01015b2:	01 de                	add    %ebx,%esi
f01015b4:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01015b7:	01 f3                	add    %esi,%ebx
f01015b9:	83 ec 0c             	sub    $0xc,%esp
f01015bc:	51                   	push   %ecx
f01015bd:	52                   	push   %edx
f01015be:	50                   	push   %eax
f01015bf:	53                   	push   %ebx
f01015c0:	68 38 b3 12 f0       	push   $0xf012b338
f01015c5:	e8 63 f6 ff ff       	call   f0100c2d <cprintf>
f01015ca:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f01015cd:	a1 10 44 6d f0       	mov    0xf06d4410,%eax
f01015d2:	83 ec 08             	sub    $0x8,%esp
f01015d5:	50                   	push   %eax
f01015d6:	68 90 b3 12 f0       	push   $0xf012b390
f01015db:	e8 4d f6 ff ff       	call   f0100c2d <cprintf>
f01015e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01015eb:	5b                   	pop    %ebx
f01015ec:	5e                   	pop    %esi
f01015ed:	5d                   	pop    %ebp
f01015ee:	c3                   	ret    

f01015ef <CreateEnv>:
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);

	return env;
}*/
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01015ef:	55                   	push   %ebp
f01015f0:	89 e5                	mov    %esp,%ebp
f01015f2:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01015f5:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01015fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101603:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
//#if USE_KHEAP
	{
		switch (number_of_arguments)
f010160a:	8b 45 08             	mov    0x8(%ebp),%eax
f010160d:	83 f8 04             	cmp    $0x4,%eax
f0101610:	0f 84 94 00 00 00    	je     f01016aa <CreateEnv+0xbb>
f0101616:	83 f8 05             	cmp    $0x5,%eax
f0101619:	74 0e                	je     f0101629 <CreateEnv+0x3a>
f010161b:	83 f8 03             	cmp    $0x3,%eax
f010161e:	0f 84 ec 00 00 00    	je     f0101710 <CreateEnv+0x121>
f0101624:	e9 2f 01 00 00       	jmp    f0101758 <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101629:	83 ec 0c             	sub    $0xc,%esp
f010162c:	6a 02                	push   $0x2
f010162e:	e8 2c b1 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0101633:	83 c4 10             	add    $0x10,%esp
f0101636:	85 c0                	test   %eax,%eax
f0101638:	75 1a                	jne    f0101654 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f010163a:	83 ec 0c             	sub    $0xc,%esp
f010163d:	68 cc b3 12 f0       	push   $0xf012b3cc
f0101642:	e8 e6 f5 ff ff       	call   f0100c2d <cprintf>
f0101647:	83 c4 10             	add    $0x10,%esp
				return NULL;
f010164a:	b8 00 00 00 00       	mov    $0x0,%eax
f010164f:	e9 d5 01 00 00       	jmp    f0101829 <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101654:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101657:	83 c0 10             	add    $0x10,%eax
f010165a:	8b 00                	mov    (%eax),%eax
f010165c:	83 ec 04             	sub    $0x4,%esp
f010165f:	6a 0a                	push   $0xa
f0101661:	6a 00                	push   $0x0
f0101663:	50                   	push   %eax
f0101664:	e8 22 83 02 00       	call   f012998b <strtol>
f0101669:	83 c4 10             	add    $0x10,%esp
f010166c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f010166f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101672:	83 c0 0c             	add    $0xc,%eax
f0101675:	8b 00                	mov    (%eax),%eax
f0101677:	83 ec 04             	sub    $0x4,%esp
f010167a:	6a 0a                	push   $0xa
f010167c:	6a 00                	push   $0x0
f010167e:	50                   	push   %eax
f010167f:	e8 07 83 02 00       	call   f012998b <strtol>
f0101684:	83 c4 10             	add    $0x10,%esp
f0101687:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f010168a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010168d:	83 c0 08             	add    $0x8,%eax
f0101690:	8b 00                	mov    (%eax),%eax
f0101692:	83 ec 04             	sub    $0x4,%esp
f0101695:	6a 0a                	push   $0xa
f0101697:	6a 00                	push   $0x0
f0101699:	50                   	push   %eax
f010169a:	e8 ec 82 02 00       	call   f012998b <strtol>
f010169f:	83 c4 10             	add    $0x10,%esp
f01016a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01016a5:	e9 c8 00 00 00       	jmp    f0101772 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01016aa:	83 ec 0c             	sub    $0xc,%esp
f01016ad:	6a 02                	push   $0x2
f01016af:	e8 ab b0 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f01016b4:	83 c4 10             	add    $0x10,%esp
f01016b7:	85 c0                	test   %eax,%eax
f01016b9:	75 1d                	jne    f01016d8 <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f01016bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016be:	83 c0 0c             	add    $0xc,%eax
f01016c1:	8b 00                	mov    (%eax),%eax
f01016c3:	83 ec 04             	sub    $0x4,%esp
f01016c6:	6a 0a                	push   $0xa
f01016c8:	6a 00                	push   $0x0
f01016ca:	50                   	push   %eax
f01016cb:	e8 bb 82 02 00       	call   f012998b <strtol>
f01016d0:	83 c4 10             	add    $0x10,%esp
f01016d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01016d6:	eb 1b                	jmp    f01016f3 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f01016d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016db:	83 c0 0c             	add    $0xc,%eax
f01016de:	8b 00                	mov    (%eax),%eax
f01016e0:	83 ec 04             	sub    $0x4,%esp
f01016e3:	6a 0a                	push   $0xa
f01016e5:	6a 00                	push   $0x0
f01016e7:	50                   	push   %eax
f01016e8:	e8 9e 82 02 00       	call   f012998b <strtol>
f01016ed:	83 c4 10             	add    $0x10,%esp
f01016f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f01016f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016f6:	83 c0 08             	add    $0x8,%eax
f01016f9:	8b 00                	mov    (%eax),%eax
f01016fb:	83 ec 04             	sub    $0x4,%esp
f01016fe:	6a 0a                	push   $0xa
f0101700:	6a 00                	push   $0x0
f0101702:	50                   	push   %eax
f0101703:	e8 83 82 02 00       	call   f012998b <strtol>
f0101708:	83 c4 10             	add    $0x10,%esp
f010170b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010170e:	eb 62                	jmp    f0101772 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101710:	83 ec 0c             	sub    $0xc,%esp
f0101713:	6a 02                	push   $0x2
f0101715:	e8 45 b0 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f010171a:	83 c4 10             	add    $0x10,%esp
f010171d:	85 c0                	test   %eax,%eax
f010171f:	74 1a                	je     f010173b <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101721:	83 ec 0c             	sub    $0xc,%esp
f0101724:	68 8c b4 12 f0       	push   $0xf012b48c
f0101729:	e8 ff f4 ff ff       	call   f0100c2d <cprintf>
f010172e:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101731:	b8 00 00 00 00       	mov    $0x0,%eax
f0101736:	e9 ee 00 00 00       	jmp    f0101829 <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f010173b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010173e:	83 c0 08             	add    $0x8,%eax
f0101741:	8b 00                	mov    (%eax),%eax
f0101743:	83 ec 04             	sub    $0x4,%esp
f0101746:	6a 0a                	push   $0xa
f0101748:	6a 00                	push   $0x0
f010174a:	50                   	push   %eax
f010174b:	e8 3b 82 02 00       	call   f012998b <strtol>
f0101750:	83 c4 10             	add    $0x10,%esp
f0101753:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101756:	eb 1a                	jmp    f0101772 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101758:	83 ec 0c             	sub    $0xc,%esp
f010175b:	68 1c b5 12 f0       	push   $0xf012b51c
f0101760:	e8 c8 f4 ff ff       	call   f0100c2d <cprintf>
f0101765:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101768:	b8 00 00 00 00       	mov    $0x0,%eax
f010176d:	e9 b7 00 00 00       	jmp    f0101829 <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101772:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101779:	76 1f                	jbe    f010179a <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f010177b:	83 ec 08             	sub    $0x8,%esp
f010177e:	68 88 13 00 00       	push   $0x1388
f0101783:	68 b4 b5 12 f0       	push   $0xf012b5b4
f0101788:	e8 a0 f4 ff ff       	call   f0100c2d <cprintf>
f010178d:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101790:	b8 00 00 00 00       	mov    $0x0,%eax
f0101795:	e9 8f 00 00 00       	jmp    f0101829 <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010179a:	83 ec 0c             	sub    $0xc,%esp
f010179d:	6a 02                	push   $0x2
f010179f:	e8 bb af 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f01017a4:	83 c4 10             	add    $0x10,%esp
f01017a7:	85 c0                	test   %eax,%eax
f01017a9:	74 20                	je     f01017cb <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f01017ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01017ae:	48                   	dec    %eax
f01017af:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01017b2:	73 17                	jae    f01017cb <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f01017b4:	83 ec 0c             	sub    $0xc,%esp
f01017b7:	68 f4 b5 12 f0       	push   $0xf012b5f4
f01017bc:	e8 6c f4 ff ff       	call   f0100c2d <cprintf>
f01017c1:	83 c4 10             	add    $0x10,%esp
				return NULL;
f01017c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01017c9:	eb 5e                	jmp    f0101829 <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f01017cb:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f01017cf:	76 19                	jbe    f01017ea <CreateEnv+0x1fb>
f01017d1:	68 4c b6 12 f0       	push   $0xf012b64c
f01017d6:	68 91 b6 12 f0       	push   $0xf012b691
f01017db:	68 c2 01 00 00       	push   $0x1c2
f01017e0:	68 a6 b6 12 f0       	push   $0xf012b6a6
f01017e5:	e8 bc e9 ff ff       	call   f01001a6 <_panic>
//		{
//			LRUSecondListSize = __LRU_SNDLST_SIZE;
//		}
//	}
//#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f01017ea:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f01017ee:	76 19                	jbe    f0101809 <CreateEnv+0x21a>
f01017f0:	68 4c b6 12 f0       	push   $0xf012b64c
f01017f5:	68 91 b6 12 f0       	push   $0xf012b691
f01017fa:	68 d9 01 00 00       	push   $0x1d9
f01017ff:	68 a6 b6 12 f0       	push   $0xf012b6a6
f0101804:	e8 9d e9 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101809:	8b 45 0c             	mov    0xc(%ebp),%eax
f010180c:	83 c0 04             	add    $0x4,%eax
f010180f:	8b 00                	mov    (%eax),%eax
f0101811:	ff 75 ec             	pushl  -0x14(%ebp)
f0101814:	ff 75 f0             	pushl  -0x10(%ebp)
f0101817:	ff 75 f4             	pushl  -0xc(%ebp)
f010181a:	50                   	push   %eax
f010181b:	e8 44 60 00 00       	call   f0107864 <env_create>
f0101820:	83 c4 10             	add    $0x10,%esp
f0101823:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101826:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101829:	c9                   	leave  
f010182a:	c3                   	ret    

f010182b <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f010182b:	55                   	push   %ebp
f010182c:	89 e5                	mov    %esp,%ebp
f010182e:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101831:	83 ec 08             	sub    $0x8,%esp
f0101834:	ff 75 0c             	pushl  0xc(%ebp)
f0101837:	ff 75 08             	pushl  0x8(%ebp)
f010183a:	e8 b0 fd ff ff       	call   f01015ef <CreateEnv>
f010183f:	83 c4 10             	add    $0x10,%esp
f0101842:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101845:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101849:	75 07                	jne    f0101852 <command_run_program+0x27>
f010184b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101850:	eb 46                	jmp    f0101898 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101852:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101855:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101858:	83 ec 08             	sub    $0x8,%esp
f010185b:	50                   	push   %eax
f010185c:	68 ba b6 12 f0       	push   $0xf012b6ba
f0101861:	e8 c7 f3 ff ff       	call   f0100c2d <cprintf>
f0101866:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101869:	c7 05 10 44 6d f0 00 	movl   $0x0,0xf06d4410
f0101870:	00 00 00 

	sched_new_env(env);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 f4             	pushl  -0xc(%ebp)
f0101879:	e8 11 30 00 00       	call   f010488f <sched_new_env>
f010187e:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101884:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101887:	83 ec 0c             	sub    $0xc,%esp
f010188a:	50                   	push   %eax
f010188b:	e8 1c 30 00 00       	call   f01048ac <sched_run_env>
f0101890:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101893:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101898:	c9                   	leave  
f0101899:	c3                   	ret    

f010189a <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f010189a:	55                   	push   %ebp
f010189b:	89 e5                	mov    %esp,%ebp
f010189d:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01018a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018a3:	83 c0 04             	add    $0x4,%eax
f01018a6:	8b 00                	mov    (%eax),%eax
f01018a8:	83 ec 04             	sub    $0x4,%esp
f01018ab:	6a 0a                	push   $0xa
f01018ad:	6a 00                	push   $0x0
f01018af:	50                   	push   %eax
f01018b0:	e8 d6 80 02 00       	call   f012998b <strtol>
f01018b5:	83 c4 10             	add    $0x10,%esp
f01018b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f01018bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01018be:	83 ec 0c             	sub    $0xc,%esp
f01018c1:	50                   	push   %eax
f01018c2:	e8 11 34 00 00       	call   f0104cd8 <sched_kill_env>
f01018c7:	83 c4 10             	add    $0x10,%esp

	return 0;
f01018ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018cf:	c9                   	leave  
f01018d0:	c3                   	ret    

f01018d1 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f01018d1:	55                   	push   %ebp
f01018d2:	89 e5                	mov    %esp,%ebp
f01018d4:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f01018d7:	83 ec 08             	sub    $0x8,%esp
f01018da:	ff 75 0c             	pushl  0xc(%ebp)
f01018dd:	ff 75 08             	pushl  0x8(%ebp)
f01018e0:	e8 0a fd ff ff       	call   f01015ef <CreateEnv>
f01018e5:	83 c4 10             	add    $0x10,%esp
f01018e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f01018eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01018ef:	75 07                	jne    f01018f8 <commnad_load_env+0x27>
		return 0 ;
f01018f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01018f6:	eb 2a                	jmp    f0101922 <commnad_load_env+0x51>

	sched_new_env(env) ;
f01018f8:	83 ec 0c             	sub    $0xc,%esp
f01018fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01018fe:	e8 8c 2f 00 00       	call   f010488f <sched_new_env>
f0101903:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101909:	8b 40 4c             	mov    0x4c(%eax),%eax
f010190c:	83 ec 08             	sub    $0x8,%esp
f010190f:	50                   	push   %eax
f0101910:	68 ba b6 12 f0       	push   $0xf012b6ba
f0101915:	e8 13 f3 ff ff       	call   f0100c2d <cprintf>
f010191a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010191d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101922:	c9                   	leave  
f0101923:	c3                   	ret    

f0101924 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101924:	55                   	push   %ebp
f0101925:	89 e5                	mov    %esp,%ebp
f0101927:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f010192a:	c7 05 10 44 6d f0 00 	movl   $0x0,0xf06d4410
f0101931:	00 00 00 
	sched_run_all();
f0101934:	e8 97 2b 00 00       	call   f01044d0 <sched_run_all>

	return 0 ;
f0101939:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010193e:	c9                   	leave  
f010193f:	c3                   	ret    

f0101940 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101940:	55                   	push   %ebp
f0101941:	89 e5                	mov    %esp,%ebp
f0101943:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101946:	e8 7a 29 00 00       	call   f01042c5 <sched_print_all>

	return 0 ;
f010194b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101950:	c9                   	leave  
f0101951:	c3                   	ret    

f0101952 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101952:	55                   	push   %ebp
f0101953:	89 e5                	mov    %esp,%ebp
f0101955:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101958:	e8 e6 2b 00 00       	call   f0104543 <sched_kill_all>

	return 0 ;
f010195d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101962:	c9                   	leave  
f0101963:	c3                   	ret    

f0101964 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101964:	55                   	push   %ebp
f0101965:	89 e5                	mov    %esp,%ebp
f0101967:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f010196a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010196e:	7f 1a                	jg     f010198a <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101970:	83 ec 0c             	sub    $0xc,%esp
f0101973:	68 d0 b6 12 f0       	push   $0xf012b6d0
f0101978:	e8 b0 f2 ff ff       	call   f0100c2d <cprintf>
f010197d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101980:	b8 00 00 00 00       	mov    $0x0,%eax
f0101985:	e9 83 00 00 00       	jmp    f0101a0d <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f010198a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010198d:	83 c0 04             	add    $0x4,%eax
f0101990:	8b 00                	mov    (%eax),%eax
f0101992:	83 ec 04             	sub    $0x4,%esp
f0101995:	6a 0a                	push   $0xa
f0101997:	6a 00                	push   $0x0
f0101999:	50                   	push   %eax
f010199a:	e8 ec 7f 02 00       	call   f012998b <strtol>
f010199f:	83 c4 10             	add    $0x10,%esp
f01019a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f01019a5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01019a9:	75 20                	jne    f01019cb <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01019b1:	e8 1e ad 00 00       	call   f010c6d4 <setPageReplacmentAlgorithmLRU>
f01019b6:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f01019b9:	83 ec 0c             	sub    $0xc,%esp
f01019bc:	68 30 b7 12 f0       	push   $0xf012b730
f01019c1:	e8 67 f2 ff ff       	call   f0100c2d <cprintf>
f01019c6:	83 c4 10             	add    $0x10,%esp
f01019c9:	eb 3d                	jmp    f0101a08 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f01019cb:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01019cf:	75 20                	jne    f01019f1 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f01019d1:	83 ec 0c             	sub    $0xc,%esp
f01019d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01019d7:	e8 f8 ac 00 00       	call   f010c6d4 <setPageReplacmentAlgorithmLRU>
f01019dc:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f01019df:	83 ec 0c             	sub    $0xc,%esp
f01019e2:	68 74 b7 12 f0       	push   $0xf012b774
f01019e7:	e8 41 f2 ff ff       	call   f0100c2d <cprintf>
f01019ec:	83 c4 10             	add    $0x10,%esp
f01019ef:	eb 17                	jmp    f0101a08 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f01019f1:	83 ec 0c             	sub    $0xc,%esp
f01019f4:	68 b4 b7 12 f0       	push   $0xf012b7b4
f01019f9:	e8 2f f2 ff ff       	call   f0100c2d <cprintf>
f01019fe:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101a01:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a06:	eb 05                	jmp    f0101a0d <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101a08:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a0d:	c9                   	leave  
f0101a0e:	c3                   	ret    

f0101a0f <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101a0f:	55                   	push   %ebp
f0101a10:	89 e5                	mov    %esp,%ebp
f0101a12:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a18:	83 c0 04             	add    $0x4,%eax
f0101a1b:	8b 00                	mov    (%eax),%eax
f0101a1d:	83 ec 04             	sub    $0x4,%esp
f0101a20:	6a 0a                	push   $0xa
f0101a22:	6a 00                	push   $0x0
f0101a24:	50                   	push   %eax
f0101a25:	e8 61 7f 02 00       	call   f012998b <strtol>
f0101a2a:	83 c4 10             	add    $0x10,%esp
f0101a2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101a30:	83 ec 0c             	sub    $0xc,%esp
f0101a33:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a36:	e8 0c ad 00 00       	call   f010c747 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101a3b:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101a3e:	83 ec 0c             	sub    $0xc,%esp
f0101a41:	68 08 b8 12 f0       	push   $0xf012b808
f0101a46:	e8 e2 f1 ff ff       	call   f0100c2d <cprintf>
f0101a4b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101a4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a53:	c9                   	leave  
f0101a54:	c3                   	ret    

f0101a55 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101a55:	55                   	push   %ebp
f0101a56:	89 e5                	mov    %esp,%ebp
f0101a58:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101a5b:	e8 a7 ac 00 00       	call   f010c707 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101a60:	83 ec 0c             	sub    $0xc,%esp
f0101a63:	68 3c b8 12 f0       	push   $0xf012b83c
f0101a68:	e8 c0 f1 ff ff       	call   f0100c2d <cprintf>
f0101a6d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101a70:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a75:	c9                   	leave  
f0101a76:	c3                   	ret    

f0101a77 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101a77:	55                   	push   %ebp
f0101a78:	89 e5                	mov    %esp,%ebp
f0101a7a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101a7d:	e8 95 ac 00 00       	call   f010c717 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101a82:	83 ec 0c             	sub    $0xc,%esp
f0101a85:	68 68 b8 12 f0       	push   $0xf012b868
f0101a8a:	e8 9e f1 ff ff       	call   f0100c2d <cprintf>
f0101a8f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101a92:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a97:	c9                   	leave  
f0101a98:	c3                   	ret    

f0101a99 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101a99:	55                   	push   %ebp
f0101a9a:	89 e5                	mov    %esp,%ebp
f0101a9c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101a9f:	e8 83 ac 00 00       	call   f010c727 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101aa4:	83 ec 0c             	sub    $0xc,%esp
f0101aa7:	68 90 b8 12 f0       	push   $0xf012b890
f0101aac:	e8 7c f1 ff ff       	call   f0100c2d <cprintf>
f0101ab1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ab4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ab9:	c9                   	leave  
f0101aba:	c3                   	ret    

f0101abb <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101abb:	55                   	push   %ebp
f0101abc:	89 e5                	mov    %esp,%ebp
f0101abe:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101ac1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ac4:	83 c0 04             	add    $0x4,%eax
f0101ac7:	8b 00                	mov    (%eax),%eax
f0101ac9:	83 ec 04             	sub    $0x4,%esp
f0101acc:	6a 0a                	push   $0xa
f0101ace:	6a 00                	push   $0x0
f0101ad0:	50                   	push   %eax
f0101ad1:	e8 b5 7e 02 00       	call   f012998b <strtol>
f0101ad6:	83 c4 10             	add    $0x10,%esp
f0101ad9:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101adc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101ae0:	83 ec 0c             	sub    $0xc,%esp
f0101ae3:	50                   	push   %eax
f0101ae4:	e8 01 24 00 00       	call   f0103eea <sched_init_RR>
f0101ae9:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101aec:	a0 c8 43 6d f0       	mov    0xf06d43c8,%al
f0101af1:	0f b6 c0             	movzbl %al,%eax
f0101af4:	83 ec 08             	sub    $0x8,%esp
f0101af7:	50                   	push   %eax
f0101af8:	68 c4 b8 12 f0       	push   $0xf012b8c4
f0101afd:	e8 2b f1 ff ff       	call   f0100c2d <cprintf>
f0101b02:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b05:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b0a:	c9                   	leave  
f0101b0b:	c3                   	ret    

f0101b0c <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101b0c:	55                   	push   %ebp
f0101b0d:	89 e5                	mov    %esp,%ebp
f0101b0f:	53                   	push   %ebx
f0101b10:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101b13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b16:	83 c0 04             	add    $0x4,%eax
f0101b19:	8b 00                	mov    (%eax),%eax
f0101b1b:	83 ec 04             	sub    $0x4,%esp
f0101b1e:	6a 0a                	push   $0xa
f0101b20:	6a 00                	push   $0x0
f0101b22:	50                   	push   %eax
f0101b23:	e8 63 7e 02 00       	call   f012998b <strtol>
f0101b28:	83 c4 10             	add    $0x10,%esp
f0101b2b:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101b2e:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101b35:	eb 2e                	jmp    f0101b65 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b3a:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101b47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4a:	01 d0                	add    %edx,%eax
f0101b4c:	8b 00                	mov    (%eax),%eax
f0101b4e:	83 ec 04             	sub    $0x4,%esp
f0101b51:	6a 0a                	push   $0xa
f0101b53:	6a 00                	push   $0x0
f0101b55:	50                   	push   %eax
f0101b56:	e8 30 7e 02 00       	call   f012998b <strtol>
f0101b5b:	83 c4 10             	add    $0x10,%esp
f0101b5e:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101b62:	ff 45 f4             	incl   -0xc(%ebp)
f0101b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b68:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101b6b:	7c ca                	jl     f0101b37 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101b6d:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101b71:	83 ec 08             	sub    $0x8,%esp
f0101b74:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101b77:	52                   	push   %edx
f0101b78:	50                   	push   %eax
f0101b79:	e8 c2 23 00 00       	call   f0103f40 <sched_init_MLFQ>
f0101b7e:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101b81:	83 ec 0c             	sub    $0xc,%esp
f0101b84:	68 fc b8 12 f0       	push   $0xf012b8fc
f0101b89:	e8 9f f0 ff ff       	call   f0100c2d <cprintf>
f0101b8e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101b91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101b98:	eb 21                	jmp    f0101bbb <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101b9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b9d:	05 c8 43 6d f0       	add    $0xf06d43c8,%eax
f0101ba2:	8a 00                	mov    (%eax),%al
f0101ba4:	0f b6 c0             	movzbl %al,%eax
f0101ba7:	83 ec 08             	sub    $0x8,%esp
f0101baa:	50                   	push   %eax
f0101bab:	68 29 b9 12 f0       	push   $0xf012b929
f0101bb0:	e8 78 f0 ff ff       	call   f0100c2d <cprintf>
f0101bb5:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101bb8:	ff 45 f0             	incl   -0x10(%ebp)
f0101bbb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0101bc0:	0f b6 c0             	movzbl %al,%eax
f0101bc3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101bc6:	7f d2                	jg     f0101b9a <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101bc8:	83 ec 0c             	sub    $0xc,%esp
f0101bcb:	68 0c b3 12 f0       	push   $0xf012b30c
f0101bd0:	e8 58 f0 ff ff       	call   f0100c2d <cprintf>
f0101bd5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101bd8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101bdd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101be0:	c9                   	leave  
f0101be1:	c3                   	ret    

f0101be2 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101be2:	55                   	push   %ebp
f0101be3:	89 e5                	mov    %esp,%ebp
f0101be5:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101be8:	e8 86 1f 00 00       	call   f0103b73 <isSchedMethodMLFQ>
f0101bed:	85 c0                	test   %eax,%eax
f0101bef:	74 59                	je     f0101c4a <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101bf1:	83 ec 0c             	sub    $0xc,%esp
f0101bf4:	68 30 b9 12 f0       	push   $0xf012b930
f0101bf9:	e8 2f f0 ff ff       	call   f0100c2d <cprintf>
f0101bfe:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101c01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101c08:	eb 21                	jmp    f0101c2b <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101c0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c0d:	05 c8 43 6d f0       	add    $0xf06d43c8,%eax
f0101c12:	8a 00                	mov    (%eax),%al
f0101c14:	0f b6 c0             	movzbl %al,%eax
f0101c17:	83 ec 08             	sub    $0x8,%esp
f0101c1a:	50                   	push   %eax
f0101c1b:	68 29 b9 12 f0       	push   $0xf012b929
f0101c20:	e8 08 f0 ff ff       	call   f0100c2d <cprintf>
f0101c25:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101c28:	ff 45 f4             	incl   -0xc(%ebp)
f0101c2b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0101c30:	0f b6 c0             	movzbl %al,%eax
f0101c33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101c36:	7f d2                	jg     f0101c0a <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101c38:	83 ec 0c             	sub    $0xc,%esp
f0101c3b:	68 0c b3 12 f0       	push   $0xf012b30c
f0101c40:	e8 e8 ef ff ff       	call   f0100c2d <cprintf>
f0101c45:	83 c4 10             	add    $0x10,%esp
f0101c48:	eb 34                	jmp    f0101c7e <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101c4a:	e8 0a 1f 00 00       	call   f0103b59 <isSchedMethodRR>
f0101c4f:	85 c0                	test   %eax,%eax
f0101c51:	74 1b                	je     f0101c6e <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101c53:	a0 c8 43 6d f0       	mov    0xf06d43c8,%al
f0101c58:	0f b6 c0             	movzbl %al,%eax
f0101c5b:	83 ec 08             	sub    $0x8,%esp
f0101c5e:	50                   	push   %eax
f0101c5f:	68 64 b9 12 f0       	push   $0xf012b964
f0101c64:	e8 c4 ef ff ff       	call   f0100c2d <cprintf>
f0101c69:	83 c4 10             	add    $0x10,%esp
f0101c6c:	eb 10                	jmp    f0101c7e <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101c6e:	83 ec 0c             	sub    $0xc,%esp
f0101c71:	68 a0 b9 12 f0       	push   $0xf012b9a0
f0101c76:	e8 b2 ef ff ff       	call   f0100c2d <cprintf>
f0101c7b:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101c7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c83:	c9                   	leave  
f0101c84:	c3                   	ret    

f0101c85 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101c85:	55                   	push   %ebp
f0101c86:	89 e5                	mov    %esp,%ebp
f0101c88:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c8e:	83 c0 04             	add    $0x4,%eax
f0101c91:	8b 00                	mov    (%eax),%eax
f0101c93:	83 ec 04             	sub    $0x4,%esp
f0101c96:	6a 0a                	push   $0xa
f0101c98:	6a 00                	push   $0x0
f0101c9a:	50                   	push   %eax
f0101c9b:	e8 eb 7c 02 00       	call   f012998b <strtol>
f0101ca0:	83 c4 10             	add    $0x10,%esp
f0101ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101ca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ca9:	0f b6 c0             	movzbl %al,%eax
f0101cac:	83 ec 0c             	sub    $0xc,%esp
f0101caf:	50                   	push   %eax
f0101cb0:	e8 13 6c 02 00       	call   f01288c8 <chksch>
f0101cb5:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101cb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101cbc:	75 12                	jne    f0101cd0 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101cbe:	83 ec 0c             	sub    $0xc,%esp
f0101cc1:	68 c8 b9 12 f0       	push   $0xf012b9c8
f0101cc6:	e8 62 ef ff ff       	call   f0100c2d <cprintf>
f0101ccb:	83 c4 10             	add    $0x10,%esp
f0101cce:	eb 16                	jmp    f0101ce6 <command_sch_test+0x61>
	else if (status == 1)
f0101cd0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101cd4:	75 10                	jne    f0101ce6 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101cd6:	83 ec 0c             	sub    $0xc,%esp
f0101cd9:	68 f0 b9 12 f0       	push   $0xf012b9f0
f0101cde:	e8 4a ef ff ff       	call   f0100c2d <cprintf>
f0101ce3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ce6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101cf3:	e8 7d aa 00 00       	call   f010c775 <isPageReplacmentAlgorithmCLOCK>
f0101cf8:	85 c0                	test   %eax,%eax
f0101cfa:	74 15                	je     f0101d11 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101cfc:	83 ec 0c             	sub    $0xc,%esp
f0101cff:	68 14 ba 12 f0       	push   $0xf012ba14
f0101d04:	e8 24 ef ff ff       	call   f0100c2d <cprintf>
f0101d09:	83 c4 10             	add    $0x10,%esp
f0101d0c:	e9 8c 00 00 00       	jmp    f0101d9d <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101d11:	83 ec 0c             	sub    $0xc,%esp
f0101d14:	6a 01                	push   $0x1
f0101d16:	e8 44 aa 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0101d1b:	83 c4 10             	add    $0x10,%esp
f0101d1e:	85 c0                	test   %eax,%eax
f0101d20:	74 12                	je     f0101d34 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101d22:	83 ec 0c             	sub    $0xc,%esp
f0101d25:	68 3c ba 12 f0       	push   $0xf012ba3c
f0101d2a:	e8 fe ee ff ff       	call   f0100c2d <cprintf>
f0101d2f:	83 c4 10             	add    $0x10,%esp
f0101d32:	eb 69                	jmp    f0101d9d <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101d34:	83 ec 0c             	sub    $0xc,%esp
f0101d37:	6a 02                	push   $0x2
f0101d39:	e8 21 aa 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0101d3e:	83 c4 10             	add    $0x10,%esp
f0101d41:	85 c0                	test   %eax,%eax
f0101d43:	74 12                	je     f0101d57 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101d45:	83 ec 0c             	sub    $0xc,%esp
f0101d48:	68 7c ba 12 f0       	push   $0xf012ba7c
f0101d4d:	e8 db ee ff ff       	call   f0100c2d <cprintf>
f0101d52:	83 c4 10             	add    $0x10,%esp
f0101d55:	eb 46                	jmp    f0101d9d <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101d57:	e8 34 aa 00 00       	call   f010c790 <isPageReplacmentAlgorithmFIFO>
f0101d5c:	85 c0                	test   %eax,%eax
f0101d5e:	74 12                	je     f0101d72 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101d60:	83 ec 0c             	sub    $0xc,%esp
f0101d63:	68 b8 ba 12 f0       	push   $0xf012bab8
f0101d68:	e8 c0 ee ff ff       	call   f0100c2d <cprintf>
f0101d6d:	83 c4 10             	add    $0x10,%esp
f0101d70:	eb 2b                	jmp    f0101d9d <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101d72:	e8 34 aa 00 00       	call   f010c7ab <isPageReplacmentAlgorithmModifiedCLOCK>
f0101d77:	85 c0                	test   %eax,%eax
f0101d79:	74 12                	je     f0101d8d <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101d7b:	83 ec 0c             	sub    $0xc,%esp
f0101d7e:	68 dc ba 12 f0       	push   $0xf012badc
f0101d83:	e8 a5 ee ff ff       	call   f0100c2d <cprintf>
f0101d88:	83 c4 10             	add    $0x10,%esp
f0101d8b:	eb 10                	jmp    f0101d9d <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101d8d:	83 ec 0c             	sub    $0xc,%esp
f0101d90:	68 0c bb 12 f0       	push   $0xf012bb0c
f0101d95:	e8 93 ee ff ff       	call   f0100c2d <cprintf>
f0101d9a:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101da2:	c9                   	leave  
f0101da3:	c3                   	ret    

f0101da4 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101da4:	55                   	push   %ebp
f0101da5:	89 e5                	mov    %esp,%ebp
f0101da7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101daa:	e8 62 f0 ff ff       	call   f0100e11 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101daf:	83 ec 0c             	sub    $0xc,%esp
f0101db2:	68 38 bb 12 f0       	push   $0xf012bb38
f0101db7:	e8 71 ee ff ff       	call   f0100c2d <cprintf>
f0101dbc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101dbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dc4:	c9                   	leave  
f0101dc5:	c3                   	ret    

f0101dc6 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101dc6:	55                   	push   %ebp
f0101dc7:	89 e5                	mov    %esp,%ebp
f0101dc9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0101dcc:	e8 50 f0 ff ff       	call   f0100e21 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0101dd1:	83 ec 0c             	sub    $0xc,%esp
f0101dd4:	68 68 bb 12 f0       	push   $0xf012bb68
f0101dd9:	e8 4f ee ff ff       	call   f0100c2d <cprintf>
f0101dde:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101de1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de6:	c9                   	leave  
f0101de7:	c3                   	ret    

f0101de8 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0101de8:	55                   	push   %ebp
f0101de9:	89 e5                	mov    %esp,%ebp
f0101deb:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0101dee:	e8 3e f0 ff ff       	call   f0100e31 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0101df3:	83 ec 0c             	sub    $0xc,%esp
f0101df6:	68 98 bb 12 f0       	push   $0xf012bb98
f0101dfb:	e8 2d ee ff ff       	call   f0100c2d <cprintf>
f0101e00:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e03:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e08:	c9                   	leave  
f0101e09:	c3                   	ret    

f0101e0a <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0101e0a:	55                   	push   %ebp
f0101e0b:	89 e5                	mov    %esp,%ebp
f0101e0d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0101e10:	e8 2c f0 ff ff       	call   f0100e41 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0101e15:	83 ec 0c             	sub    $0xc,%esp
f0101e18:	68 c8 bb 12 f0       	push   $0xf012bbc8
f0101e1d:	e8 0b ee ff ff       	call   f0100c2d <cprintf>
f0101e22:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e2a:	c9                   	leave  
f0101e2b:	c3                   	ret    

f0101e2c <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0101e2c:	55                   	push   %ebp
f0101e2d:	89 e5                	mov    %esp,%ebp
f0101e2f:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0101e32:	e8 1a f0 ff ff       	call   f0100e51 <isUHeapPlacementStrategyFIRSTFIT>
f0101e37:	84 c0                	test   %al,%al
f0101e39:	74 12                	je     f0101e4d <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0101e3b:	83 ec 0c             	sub    $0xc,%esp
f0101e3e:	68 f8 bb 12 f0       	push   $0xf012bbf8
f0101e43:	e8 e5 ed ff ff       	call   f0100c2d <cprintf>
f0101e48:	83 c4 10             	add    $0x10,%esp
f0101e4b:	eb 61                	jmp    f0101eae <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0101e4d:	e8 14 f0 ff ff       	call   f0100e66 <isUHeapPlacementStrategyBESTFIT>
f0101e52:	84 c0                	test   %al,%al
f0101e54:	74 12                	je     f0101e68 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0101e56:	83 ec 0c             	sub    $0xc,%esp
f0101e59:	68 24 bc 12 f0       	push   $0xf012bc24
f0101e5e:	e8 ca ed ff ff       	call   f0100c2d <cprintf>
f0101e63:	83 c4 10             	add    $0x10,%esp
f0101e66:	eb 46                	jmp    f0101eae <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0101e68:	e8 0e f0 ff ff       	call   f0100e7b <isUHeapPlacementStrategyNEXTFIT>
f0101e6d:	84 c0                	test   %al,%al
f0101e6f:	74 12                	je     f0101e83 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0101e71:	83 ec 0c             	sub    $0xc,%esp
f0101e74:	68 50 bc 12 f0       	push   $0xf012bc50
f0101e79:	e8 af ed ff ff       	call   f0100c2d <cprintf>
f0101e7e:	83 c4 10             	add    $0x10,%esp
f0101e81:	eb 2b                	jmp    f0101eae <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0101e83:	e8 08 f0 ff ff       	call   f0100e90 <isUHeapPlacementStrategyWORSTFIT>
f0101e88:	84 c0                	test   %al,%al
f0101e8a:	74 12                	je     f0101e9e <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0101e8c:	83 ec 0c             	sub    $0xc,%esp
f0101e8f:	68 7c bc 12 f0       	push   $0xf012bc7c
f0101e94:	e8 94 ed ff ff       	call   f0100c2d <cprintf>
f0101e99:	83 c4 10             	add    $0x10,%esp
f0101e9c:	eb 10                	jmp    f0101eae <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0101e9e:	83 ec 0c             	sub    $0xc,%esp
f0101ea1:	68 a8 bc 12 f0       	push   $0xf012bca8
f0101ea6:	e8 82 ed ff ff       	call   f0100c2d <cprintf>
f0101eab:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb3:	c9                   	leave  
f0101eb4:	c3                   	ret    

f0101eb5 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0101eb5:	55                   	push   %ebp
f0101eb6:	89 e5                	mov    %esp,%ebp
f0101eb8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0101ebb:	e8 99 ee ff ff       	call   f0100d59 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0101ec0:	83 ec 0c             	sub    $0xc,%esp
f0101ec3:	68 d4 bc 12 f0       	push   $0xf012bcd4
f0101ec8:	e8 60 ed ff ff       	call   f0100c2d <cprintf>
f0101ecd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ed0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ed5:	c9                   	leave  
f0101ed6:	c3                   	ret    

f0101ed7 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101ed7:	55                   	push   %ebp
f0101ed8:	89 e5                	mov    %esp,%ebp
f0101eda:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0101edd:	e8 87 ee ff ff       	call   f0100d69 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0101ee2:	83 ec 0c             	sub    $0xc,%esp
f0101ee5:	68 d4 bc 12 f0       	push   $0xf012bcd4
f0101eea:	e8 3e ed ff ff       	call   f0100c2d <cprintf>
f0101eef:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ef2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ef7:	c9                   	leave  
f0101ef8:	c3                   	ret    

f0101ef9 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101ef9:	55                   	push   %ebp
f0101efa:	89 e5                	mov    %esp,%ebp
f0101efc:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0101eff:	e8 75 ee ff ff       	call   f0100d79 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0101f04:	83 ec 0c             	sub    $0xc,%esp
f0101f07:	68 08 bd 12 f0       	push   $0xf012bd08
f0101f0c:	e8 1c ed ff ff       	call   f0100c2d <cprintf>
f0101f11:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f14:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f19:	c9                   	leave  
f0101f1a:	c3                   	ret    

f0101f1b <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0101f1b:	55                   	push   %ebp
f0101f1c:	89 e5                	mov    %esp,%ebp
f0101f1e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0101f21:	e8 63 ee ff ff       	call   f0100d89 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0101f26:	83 ec 0c             	sub    $0xc,%esp
f0101f29:	68 38 bd 12 f0       	push   $0xf012bd38
f0101f2e:	e8 fa ec ff ff       	call   f0100c2d <cprintf>
f0101f33:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f3b:	c9                   	leave  
f0101f3c:	c3                   	ret    

f0101f3d <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0101f3d:	55                   	push   %ebp
f0101f3e:	89 e5                	mov    %esp,%ebp
f0101f40:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0101f43:	e8 51 ee ff ff       	call   f0100d99 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0101f48:	83 ec 0c             	sub    $0xc,%esp
f0101f4b:	68 68 bd 12 f0       	push   $0xf012bd68
f0101f50:	e8 d8 ec ff ff       	call   f0100c2d <cprintf>
f0101f55:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f58:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f5d:	c9                   	leave  
f0101f5e:	c3                   	ret    

f0101f5f <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0101f5f:	55                   	push   %ebp
f0101f60:	89 e5                	mov    %esp,%ebp
f0101f62:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0101f65:	e8 3f ee ff ff       	call   f0100da9 <isKHeapPlacementStrategyCONTALLOC>
f0101f6a:	84 c0                	test   %al,%al
f0101f6c:	74 12                	je     f0101f80 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0101f6e:	83 ec 0c             	sub    $0xc,%esp
f0101f71:	68 9c bd 12 f0       	push   $0xf012bd9c
f0101f76:	e8 b2 ec ff ff       	call   f0100c2d <cprintf>
f0101f7b:	83 c4 10             	add    $0x10,%esp
f0101f7e:	eb 7c                	jmp    f0101ffc <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0101f80:	e8 38 ee ff ff       	call   f0100dbd <isKHeapPlacementStrategyFIRSTFIT>
f0101f85:	84 c0                	test   %al,%al
f0101f87:	74 12                	je     f0101f9b <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0101f89:	83 ec 0c             	sub    $0xc,%esp
f0101f8c:	68 d8 bd 12 f0       	push   $0xf012bdd8
f0101f91:	e8 97 ec ff ff       	call   f0100c2d <cprintf>
f0101f96:	83 c4 10             	add    $0x10,%esp
f0101f99:	eb 61                	jmp    f0101ffc <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0101f9b:	e8 32 ee ff ff       	call   f0100dd2 <isKHeapPlacementStrategyBESTFIT>
f0101fa0:	84 c0                	test   %al,%al
f0101fa2:	74 12                	je     f0101fb6 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0101fa4:	83 ec 0c             	sub    $0xc,%esp
f0101fa7:	68 08 be 12 f0       	push   $0xf012be08
f0101fac:	e8 7c ec ff ff       	call   f0100c2d <cprintf>
f0101fb1:	83 c4 10             	add    $0x10,%esp
f0101fb4:	eb 46                	jmp    f0101ffc <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0101fb6:	e8 2c ee ff ff       	call   f0100de7 <isKHeapPlacementStrategyNEXTFIT>
f0101fbb:	84 c0                	test   %al,%al
f0101fbd:	74 12                	je     f0101fd1 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0101fbf:	83 ec 0c             	sub    $0xc,%esp
f0101fc2:	68 34 be 12 f0       	push   $0xf012be34
f0101fc7:	e8 61 ec ff ff       	call   f0100c2d <cprintf>
f0101fcc:	83 c4 10             	add    $0x10,%esp
f0101fcf:	eb 2b                	jmp    f0101ffc <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0101fd1:	e8 26 ee ff ff       	call   f0100dfc <isKHeapPlacementStrategyWORSTFIT>
f0101fd6:	84 c0                	test   %al,%al
f0101fd8:	74 12                	je     f0101fec <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0101fda:	83 ec 0c             	sub    $0xc,%esp
f0101fdd:	68 60 be 12 f0       	push   $0xf012be60
f0101fe2:	e8 46 ec ff ff       	call   f0100c2d <cprintf>
f0101fe7:	83 c4 10             	add    $0x10,%esp
f0101fea:	eb 10                	jmp    f0101ffc <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0101fec:	83 ec 0c             	sub    $0xc,%esp
f0101fef:	68 90 be 12 f0       	push   $0xf012be90
f0101ff4:	e8 34 ec ff ff       	call   f0100c2d <cprintf>
f0101ff9:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ffc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102001:	c9                   	leave  
f0102002:	c3                   	ret    

f0102003 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102003:	55                   	push   %ebp
f0102004:	89 e5                	mov    %esp,%ebp
f0102006:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102009:	e8 14 a8 00 00       	call   f010c822 <isBufferingEnabled>
f010200e:	84 c0                	test   %al,%al
f0102010:	75 12                	jne    f0102024 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102012:	83 ec 0c             	sub    $0xc,%esp
f0102015:	68 c0 be 12 f0       	push   $0xf012bec0
f010201a:	e8 0e ec ff ff       	call   f0100c2d <cprintf>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	eb 1d                	jmp    f0102041 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102024:	83 ec 0c             	sub    $0xc,%esp
f0102027:	6a 00                	push   $0x0
f0102029:	e8 ce a7 00 00       	call   f010c7fc <enableModifiedBuffer>
f010202e:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102031:	83 ec 0c             	sub    $0xc,%esp
f0102034:	68 fc be 12 f0       	push   $0xf012befc
f0102039:	e8 ef eb ff ff       	call   f0100c2d <cprintf>
f010203e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102041:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102046:	c9                   	leave  
f0102047:	c3                   	ret    

f0102048 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102048:	55                   	push   %ebp
f0102049:	89 e5                	mov    %esp,%ebp
f010204b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010204e:	e8 cf a7 00 00       	call   f010c822 <isBufferingEnabled>
f0102053:	84 c0                	test   %al,%al
f0102055:	75 12                	jne    f0102069 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102057:	83 ec 0c             	sub    $0xc,%esp
f010205a:	68 c0 be 12 f0       	push   $0xf012bec0
f010205f:	e8 c9 eb ff ff       	call   f0100c2d <cprintf>
f0102064:	83 c4 10             	add    $0x10,%esp
f0102067:	eb 1d                	jmp    f0102086 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102069:	83 ec 0c             	sub    $0xc,%esp
f010206c:	6a 01                	push   $0x1
f010206e:	e8 89 a7 00 00       	call   f010c7fc <enableModifiedBuffer>
f0102073:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102076:	83 ec 0c             	sub    $0xc,%esp
f0102079:	68 20 bf 12 f0       	push   $0xf012bf20
f010207e:	e8 aa eb ff ff       	call   f0100c2d <cprintf>
f0102083:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102086:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010208b:	c9                   	leave  
f010208c:	c3                   	ret    

f010208d <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f010208d:	55                   	push   %ebp
f010208e:	89 e5                	mov    %esp,%ebp
f0102090:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102093:	83 ec 0c             	sub    $0xc,%esp
f0102096:	6a 00                	push   $0x0
f0102098:	e8 77 a7 00 00       	call   f010c814 <enableBuffering>
f010209d:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01020a0:	83 ec 0c             	sub    $0xc,%esp
f01020a3:	6a 00                	push   $0x0
f01020a5:	e8 52 a7 00 00       	call   f010c7fc <enableModifiedBuffer>
f01020aa:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01020ad:	83 ec 0c             	sub    $0xc,%esp
f01020b0:	68 40 bf 12 f0       	push   $0xf012bf40
f01020b5:	e8 73 eb ff ff       	call   f0100c2d <cprintf>
f01020ba:	83 c4 10             	add    $0x10,%esp
	return 0;
f01020bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020c2:	c9                   	leave  
f01020c3:	c3                   	ret    

f01020c4 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01020c4:	55                   	push   %ebp
f01020c5:	89 e5                	mov    %esp,%ebp
f01020c7:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01020ca:	83 ec 0c             	sub    $0xc,%esp
f01020cd:	6a 01                	push   $0x1
f01020cf:	e8 40 a7 00 00       	call   f010c814 <enableBuffering>
f01020d4:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01020d7:	83 ec 0c             	sub    $0xc,%esp
f01020da:	6a 01                	push   $0x1
f01020dc:	e8 1b a7 00 00       	call   f010c7fc <enableModifiedBuffer>
f01020e1:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01020e4:	e8 51 a7 00 00       	call   f010c83a <getModifiedBufferLength>
f01020e9:	85 c0                	test   %eax,%eax
f01020eb:	75 59                	jne    f0102146 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01020ed:	83 ec 0c             	sub    $0xc,%esp
f01020f0:	68 5c bf 12 f0       	push   $0xf012bf5c
f01020f5:	e8 33 eb ff ff       	call   f0100c2d <cprintf>
f01020fa:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01020fd:	83 ec 08             	sub    $0x8,%esp
f0102100:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102103:	50                   	push   %eax
f0102104:	68 8c bf 12 f0       	push   $0xf012bf8c
f0102109:	e8 17 73 02 00       	call   f0129425 <readline>
f010210e:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102111:	83 ec 04             	sub    $0x4,%esp
f0102114:	6a 0a                	push   $0xa
f0102116:	6a 00                	push   $0x0
f0102118:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010211b:	50                   	push   %eax
f010211c:	e8 6a 78 02 00       	call   f012998b <strtol>
f0102121:	83 c4 10             	add    $0x10,%esp
f0102124:	83 ec 0c             	sub    $0xc,%esp
f0102127:	50                   	push   %eax
f0102128:	e8 ff a6 00 00       	call   f010c82c <setModifiedBufferLength>
f010212d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102130:	e8 05 a7 00 00       	call   f010c83a <getModifiedBufferLength>
f0102135:	83 ec 08             	sub    $0x8,%esp
f0102138:	50                   	push   %eax
f0102139:	68 b8 bf 12 f0       	push   $0xf012bfb8
f010213e:	e8 ea ea ff ff       	call   f0100c2d <cprintf>
f0102143:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102146:	83 ec 0c             	sub    $0xc,%esp
f0102149:	68 dd bf 12 f0       	push   $0xf012bfdd
f010214e:	e8 da ea ff ff       	call   f0100c2d <cprintf>
f0102153:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102156:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010215b:	c9                   	leave  
f010215c:	c3                   	ret    

f010215d <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010215d:	55                   	push   %ebp
f010215e:	89 e5                	mov    %esp,%ebp
f0102160:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102163:	e8 ba a6 00 00       	call   f010c822 <isBufferingEnabled>
f0102168:	84 c0                	test   %al,%al
f010216a:	75 12                	jne    f010217e <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010216c:	83 ec 0c             	sub    $0xc,%esp
f010216f:	68 f8 bf 12 f0       	push   $0xf012bff8
f0102174:	e8 b4 ea ff ff       	call   f0100c2d <cprintf>
f0102179:	83 c4 10             	add    $0x10,%esp
f010217c:	eb 19                	jmp    f0102197 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010217e:	e8 87 a6 00 00       	call   f010c80a <isModifiedBufferEnabled>
f0102183:	84 c0                	test   %al,%al
f0102185:	75 10                	jne    f0102197 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102187:	83 ec 0c             	sub    $0xc,%esp
f010218a:	68 48 c0 12 f0       	push   $0xf012c048
f010218f:	e8 99 ea ff ff       	call   f0100c2d <cprintf>
f0102194:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102197:	8b 45 0c             	mov    0xc(%ebp),%eax
f010219a:	83 c0 04             	add    $0x4,%eax
f010219d:	8b 00                	mov    (%eax),%eax
f010219f:	83 ec 04             	sub    $0x4,%esp
f01021a2:	6a 0a                	push   $0xa
f01021a4:	6a 00                	push   $0x0
f01021a6:	50                   	push   %eax
f01021a7:	e8 df 77 02 00       	call   f012998b <strtol>
f01021ac:	83 c4 10             	add    $0x10,%esp
f01021af:	83 ec 0c             	sub    $0xc,%esp
f01021b2:	50                   	push   %eax
f01021b3:	e8 74 a6 00 00       	call   f010c82c <setModifiedBufferLength>
f01021b8:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01021bb:	e8 7a a6 00 00       	call   f010c83a <getModifiedBufferLength>
f01021c0:	83 ec 08             	sub    $0x8,%esp
f01021c3:	50                   	push   %eax
f01021c4:	68 b8 bf 12 f0       	push   $0xf012bfb8
f01021c9:	e8 5f ea ff ff       	call   f0100c2d <cprintf>
f01021ce:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021d6:	c9                   	leave  
f01021d7:	c3                   	ret    

f01021d8 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01021d8:	55                   	push   %ebp
f01021d9:	89 e5                	mov    %esp,%ebp
f01021db:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01021de:	e8 3f a6 00 00       	call   f010c822 <isBufferingEnabled>
f01021e3:	84 c0                	test   %al,%al
f01021e5:	75 12                	jne    f01021f9 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01021e7:	83 ec 0c             	sub    $0xc,%esp
f01021ea:	68 f8 bf 12 f0       	push   $0xf012bff8
f01021ef:	e8 39 ea ff ff       	call   f0100c2d <cprintf>
f01021f4:	83 c4 10             	add    $0x10,%esp
f01021f7:	eb 19                	jmp    f0102212 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01021f9:	e8 0c a6 00 00       	call   f010c80a <isModifiedBufferEnabled>
f01021fe:	84 c0                	test   %al,%al
f0102200:	75 10                	jne    f0102212 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102202:	83 ec 0c             	sub    $0xc,%esp
f0102205:	68 48 c0 12 f0       	push   $0xf012c048
f010220a:	e8 1e ea ff ff       	call   f0100c2d <cprintf>
f010220f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102212:	e8 23 a6 00 00       	call   f010c83a <getModifiedBufferLength>
f0102217:	83 ec 08             	sub    $0x8,%esp
f010221a:	50                   	push   %eax
f010221b:	68 8e c0 12 f0       	push   $0xf012c08e
f0102220:	e8 08 ea ff ff       	call   f0100c2d <cprintf>
f0102225:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102228:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010222d:	c9                   	leave  
f010222e:	c3                   	ret    

f010222f <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010222f:	55                   	push   %ebp
f0102230:	89 e5                	mov    %esp,%ebp
f0102232:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102235:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f010223c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102240:	75 1b                	jne    f010225d <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102242:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102245:	83 c0 04             	add    $0x4,%eax
f0102248:	8b 00                	mov    (%eax),%eax
f010224a:	83 ec 04             	sub    $0x4,%esp
f010224d:	6a 0a                	push   $0xa
f010224f:	6a 00                	push   $0x0
f0102251:	50                   	push   %eax
f0102252:	e8 34 77 02 00       	call   f012998b <strtol>
f0102257:	83 c4 10             	add    $0x10,%esp
f010225a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f010225d:	e8 47 eb ff ff       	call   f0100da9 <isKHeapPlacementStrategyCONTALLOC>
f0102262:	84 c0                	test   %al,%al
f0102264:	74 0a                	je     f0102270 <command_test_kmalloc+0x41>
		test_kmalloc();
f0102266:	e8 fc e7 00 00       	call   f0110a67 <test_kmalloc>
f010226b:	e9 e8 00 00 00       	jmp    f0102358 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102270:	e8 48 eb ff ff       	call   f0100dbd <isKHeapPlacementStrategyFIRSTFIT>
f0102275:	84 c0                	test   %al,%al
f0102277:	74 44                	je     f01022bd <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102279:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010227d:	75 1a                	jne    f0102299 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010227f:	83 ec 0c             	sub    $0xc,%esp
f0102282:	68 ac c0 12 f0       	push   $0xf012c0ac
f0102287:	e8 a1 e9 ff ff       	call   f0100c2d <cprintf>
f010228c:	83 c4 10             	add    $0x10,%esp
			return 0;
f010228f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102294:	e9 c4 00 00 00       	jmp    f010235d <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102299:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010229d:	75 0a                	jne    f01022a9 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010229f:	e8 46 36 01 00       	call   f01158ea <test_kmalloc_firstfit1>
f01022a4:	e9 af 00 00 00       	jmp    f0102358 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01022a9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01022ad:	0f 85 a5 00 00 00    	jne    f0102358 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01022b3:	e8 d4 49 01 00       	call   f0116c8c <test_kmalloc_firstfit2>
f01022b8:	e9 9b 00 00 00       	jmp    f0102358 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01022bd:	e8 10 eb ff ff       	call   f0100dd2 <isKHeapPlacementStrategyBESTFIT>
f01022c2:	84 c0                	test   %al,%al
f01022c4:	74 44                	je     f010230a <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01022c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01022ca:	75 17                	jne    f01022e3 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f01022cc:	83 ec 0c             	sub    $0xc,%esp
f01022cf:	68 fc c0 12 f0       	push   $0xf012c0fc
f01022d4:	e8 54 e9 ff ff       	call   f0100c2d <cprintf>
f01022d9:	83 c4 10             	add    $0x10,%esp
			return 0;
f01022dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01022e1:	eb 7a                	jmp    f010235d <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01022e3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01022e7:	75 07                	jne    f01022f0 <command_test_kmalloc+0xc1>
			test_kmalloc();
f01022e9:	e8 79 e7 00 00       	call   f0110a67 <test_kmalloc>
f01022ee:	eb 68                	jmp    f0102358 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01022f0:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01022f4:	75 07                	jne    f01022fd <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01022f6:	e8 b9 10 01 00       	call   f01133b4 <test_kmalloc_bestfit1>
f01022fb:	eb 5b                	jmp    f0102358 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01022fd:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102301:	75 55                	jne    f0102358 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102303:	e8 02 23 01 00       	call   f011460a <test_kmalloc_bestfit2>
f0102308:	eb 4e                	jmp    f0102358 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010230a:	e8 d8 ea ff ff       	call   f0100de7 <isKHeapPlacementStrategyNEXTFIT>
f010230f:	84 c0                	test   %al,%al
f0102311:	74 37                	je     f010234a <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102313:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102317:	75 17                	jne    f0102330 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102319:	83 ec 0c             	sub    $0xc,%esp
f010231c:	68 4c c1 12 f0       	push   $0xf012c14c
f0102321:	e8 07 e9 ff ff       	call   f0100c2d <cprintf>
f0102326:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102329:	b8 00 00 00 00       	mov    $0x0,%eax
f010232e:	eb 2d                	jmp    f010235d <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102330:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102334:	75 07                	jne    f010233d <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102336:	e8 2c e7 00 00       	call   f0110a67 <test_kmalloc>
f010233b:	eb 1b                	jmp    f0102358 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f010233d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102341:	75 15                	jne    f0102358 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102343:	e8 77 f9 00 00       	call   f0111cbf <test_kmalloc_nextfit>
f0102348:	eb 0e                	jmp    f0102358 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010234a:	e8 ad ea ff ff       	call   f0100dfc <isKHeapPlacementStrategyWORSTFIT>
f010234f:	84 c0                	test   %al,%al
f0102351:	74 05                	je     f0102358 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102353:	e8 c9 57 01 00       	call   f0117b21 <test_kmalloc_worstfit>
	return 0;
f0102358:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010235d:	c9                   	leave  
f010235e:	c3                   	ret    

f010235f <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010235f:	55                   	push   %ebp
f0102360:	89 e5                	mov    %esp,%ebp
f0102362:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102365:	e8 68 ea ff ff       	call   f0100dd2 <isKHeapPlacementStrategyBESTFIT>
f010236a:	84 c0                	test   %al,%al
f010236c:	74 07                	je     f0102375 <command_test_kfree+0x16>
	{
		test_kfree_bestfit();
f010236e:	e8 62 86 01 00       	call   f011a9d5 <test_kfree_bestfit>
f0102373:	eb 05                	jmp    f010237a <command_test_kfree+0x1b>
	}
	else
	{
		test_kfree();
f0102375:	e8 f7 6d 01 00       	call   f0119171 <test_kfree>
	}
	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102387:	e8 ad 9e 01 00       	call   f011c239 <test_kheap_phys_addr>
	return 0;
f010238c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102391:	c9                   	leave  
f0102392:	c3                   	ret    

f0102393 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102393:	55                   	push   %ebp
f0102394:	89 e5                	mov    %esp,%ebp
f0102396:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102399:	e8 89 b2 01 00       	call   f011d627 <test_kheap_virt_addr>
	return 0;
f010239e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a3:	c9                   	leave  
f01023a4:	c3                   	ret    

f01023a5 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01023a5:	55                   	push   %ebp
f01023a6:	89 e5                	mov    %esp,%ebp
f01023a8:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01023ab:	e8 af c5 01 00       	call   f011e95f <test_three_creation_functions>
	return 0;
f01023b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023b5:	c9                   	leave  
f01023b6:	c3                   	ret    

f01023b7 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01023b7:	55                   	push   %ebp
f01023b8:	89 e5                	mov    %esp,%ebp
f01023ba:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01023bd:	e8 25 ea ff ff       	call   f0100de7 <isKHeapPlacementStrategyNEXTFIT>
f01023c2:	84 c0                	test   %al,%al
f01023c4:	74 07                	je     f01023cd <command_test_krealloc+0x16>
		test_krealloc();
f01023c6:	e8 ab 1f 02 00       	call   f0124376 <test_krealloc>
f01023cb:	eb 0e                	jmp    f01023db <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01023cd:	e8 00 ea ff ff       	call   f0100dd2 <isKHeapPlacementStrategyBESTFIT>
f01023d2:	84 c0                	test   %al,%al
f01023d4:	74 05                	je     f01023db <command_test_krealloc+0x24>
		test_krealloc_BF();
f01023d6:	e8 4b 3f 02 00       	call   f0126326 <test_krealloc_BF>
	return 0;
f01023db:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e0:	c9                   	leave  
f01023e1:	c3                   	ret    

f01023e2 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01023e2:	55                   	push   %ebp
f01023e3:	89 e5                	mov    %esp,%ebp
f01023e5:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01023e8:	e8 c2 d2 00 00       	call   f010f6af <test_priority_normal_and_higher>
	return 0;
f01023ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023f2:	c9                   	leave  
f01023f3:	c3                   	ret    

f01023f4 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01023f4:	55                   	push   %ebp
f01023f5:	89 e5                	mov    %esp,%ebp
f01023f7:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01023fa:	e8 8a dc 00 00       	call   f0110089 <test_priority_normal_and_lower>
	return 0;
f01023ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102404:	c9                   	leave  
f0102405:	c3                   	ret    

f0102406 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102406:	55                   	push   %ebp
f0102407:	89 e5                	mov    %esp,%ebp
f0102409:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010240c:	e8 88 c7 01 00       	call   f011eb99 <test_kfreeall>
	return 0;
f0102411:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102416:	c9                   	leave  
f0102417:	c3                   	ret    

f0102418 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102418:	55                   	push   %ebp
f0102419:	89 e5                	mov    %esp,%ebp
f010241b:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010241e:	e8 62 de 01 00       	call   f0120285 <test_kexpand>
	return 0;
f0102423:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102428:	c9                   	leave  
f0102429:	c3                   	ret    

f010242a <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f010242a:	55                   	push   %ebp
f010242b:	89 e5                	mov    %esp,%ebp
f010242d:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102430:	e8 d1 eb 01 00       	call   f0121006 <test_kshrink>
	return 0;
f0102435:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010243a:	c9                   	leave  
f010243b:	c3                   	ret    

f010243c <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010243c:	55                   	push   %ebp
f010243d:	89 e5                	mov    %esp,%ebp
f010243f:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102442:	e8 ac fa 01 00       	call   f0121ef3 <test_kfreelast>
	return 0;
f0102447:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010244c:	c9                   	leave  
f010244d:	c3                   	ret    

f010244e <command_test_sc_MLFQ>:

//END======================================================

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010244e:	55                   	push   %ebp
f010244f:	89 e5                	mov    %esp,%ebp
f0102451:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102454:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102457:	83 c0 04             	add    $0x4,%eax
f010245a:	8b 00                	mov    (%eax),%eax
f010245c:	83 ec 04             	sub    $0x4,%esp
f010245f:	6a 0a                	push   $0xa
f0102461:	6a 00                	push   $0x0
f0102463:	50                   	push   %eax
f0102464:	e8 22 75 02 00       	call   f012998b <strtol>
f0102469:	83 c4 10             	add    $0x10,%esp
f010246c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010246f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102476:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010247d:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f0102482:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102485:	eb 3d                	jmp    f01024c4 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f0102487:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010248a:	05 18 da 01 00       	add    $0x1da18,%eax
f010248f:	83 ec 08             	sub    $0x8,%esp
f0102492:	68 9a c1 12 f0       	push   $0xf012c19a
f0102497:	50                   	push   %eax
f0102498:	e8 9a 72 02 00       	call   f0129737 <strcmp>
f010249d:	83 c4 10             	add    $0x10,%esp
f01024a0:	85 c0                	test   %eax,%eax
f01024a2:	75 12                	jne    f01024b6 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01024a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01024a8:	74 07                	je     f01024b1 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01024aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01024b1:	ff 45 f4             	incl   -0xc(%ebp)
f01024b4:	eb 06                	jmp    f01024bc <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01024b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01024ba:	74 31                	je     f01024ed <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01024bc:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f01024c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01024c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01024c8:	74 08                	je     f01024d2 <command_test_sc_MLFQ+0x84>
f01024ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01024cd:	8b 40 44             	mov    0x44(%eax),%eax
f01024d0:	eb 05                	jmp    f01024d7 <command_test_sc_MLFQ+0x89>
f01024d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01024d7:	a3 ac 1f 6d f0       	mov    %eax,0xf06d1fac
f01024dc:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f01024e1:	85 c0                	test   %eax,%eax
f01024e3:	75 a2                	jne    f0102487 <command_test_sc_MLFQ+0x39>
f01024e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01024e9:	75 9c                	jne    f0102487 <command_test_sc_MLFQ+0x39>
f01024eb:	eb 01                	jmp    f01024ee <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01024ed:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01024ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01024f1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01024f4:	75 12                	jne    f0102508 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01024f6:	83 ec 0c             	sub    $0xc,%esp
f01024f9:	68 a4 c1 12 f0       	push   $0xf012c1a4
f01024fe:	e8 2a e7 ff ff       	call   f0100c2d <cprintf>
f0102503:	83 c4 10             	add    $0x10,%esp
f0102506:	eb 17                	jmp    f010251f <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102508:	83 ec 04             	sub    $0x4,%esp
f010250b:	68 dd c1 12 f0       	push   $0xf012c1dd
f0102510:	68 f3 03 00 00       	push   $0x3f3
f0102515:	68 a6 b6 12 f0       	push   $0xf012b6a6
f010251a:	e8 87 dc ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f010251f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102524:	c9                   	leave  
f0102525:	c3                   	ret    

f0102526 <command_test_autocomplete>:


//======================================================
//2022
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102526:	55                   	push   %ebp
f0102527:	89 e5                	mov    %esp,%ebp
f0102529:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010252c:	e8 f9 cf 00 00       	call   f010f52a <TestAutoCompleteCommand>
f0102531:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102534:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102539:	c9                   	leave  
f010253a:	c3                   	ret    

f010253b <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f010253b:	55                   	push   %ebp
f010253c:	89 e5                	mov    %esp,%ebp
f010253e:	83 ec 08             	sub    $0x8,%esp
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102541:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102544:	83 c0 04             	add    $0x4,%eax
f0102547:	8b 00                	mov    (%eax),%eax
f0102549:	83 ec 08             	sub    $0x8,%esp
f010254c:	68 f3 c1 12 f0       	push   $0xf012c1f3
f0102551:	50                   	push   %eax
f0102552:	e8 e0 71 02 00       	call   f0129737 <strcmp>
f0102557:	83 c4 10             	add    $0x10,%esp
f010255a:	85 c0                	test   %eax,%eax
f010255c:	75 0a                	jne    f0102568 <command_test_lists+0x2d>
	{
		test_initialize_MemBlocksList();
f010255e:	e8 54 a6 00 00       	call   f010cbb7 <test_initialize_MemBlocksList>
f0102563:	e9 56 01 00 00       	jmp    f01026be <command_test_lists+0x183>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102568:	8b 45 0c             	mov    0xc(%ebp),%eax
f010256b:	83 c0 04             	add    $0x4,%eax
f010256e:	8b 00                	mov    (%eax),%eax
f0102570:	83 ec 08             	sub    $0x8,%esp
f0102573:	68 f8 c1 12 f0       	push   $0xf012c1f8
f0102578:	50                   	push   %eax
f0102579:	e8 b9 71 02 00       	call   f0129737 <strcmp>
f010257e:	83 c4 10             	add    $0x10,%esp
f0102581:	85 c0                	test   %eax,%eax
f0102583:	75 0a                	jne    f010258f <command_test_lists+0x54>
	{
		test_insert_sorted_allocList();
f0102585:	e8 41 a7 00 00       	call   f010cccb <test_insert_sorted_allocList>
f010258a:	e9 2f 01 00 00       	jmp    f01026be <command_test_lists+0x183>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f010258f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102592:	83 c0 04             	add    $0x4,%eax
f0102595:	8b 00                	mov    (%eax),%eax
f0102597:	83 ec 08             	sub    $0x8,%esp
f010259a:	68 fe c1 12 f0       	push   $0xf012c1fe
f010259f:	50                   	push   %eax
f01025a0:	e8 92 71 02 00       	call   f0129737 <strcmp>
f01025a5:	83 c4 10             	add    $0x10,%esp
f01025a8:	85 c0                	test   %eax,%eax
f01025aa:	75 0a                	jne    f01025b6 <command_test_lists+0x7b>
	{
		test_find_block();
f01025ac:	e8 f5 aa 00 00       	call   f010d0a6 <test_find_block>
f01025b1:	e9 08 01 00 00       	jmp    f01026be <command_test_lists+0x183>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f01025b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025b9:	83 c0 04             	add    $0x4,%eax
f01025bc:	8b 00                	mov    (%eax),%eax
f01025be:	83 ec 08             	sub    $0x8,%esp
f01025c1:	68 03 c2 12 f0       	push   $0xf012c203
f01025c6:	50                   	push   %eax
f01025c7:	e8 6b 71 02 00       	call   f0129737 <strcmp>
f01025cc:	83 c4 10             	add    $0x10,%esp
f01025cf:	85 c0                	test   %eax,%eax
f01025d1:	74 1d                	je     f01025f0 <command_test_lists+0xb5>
f01025d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025d6:	83 c0 04             	add    $0x4,%eax
f01025d9:	8b 00                	mov    (%eax),%eax
f01025db:	83 ec 08             	sub    $0x8,%esp
f01025de:	68 06 c2 12 f0       	push   $0xf012c206
f01025e3:	50                   	push   %eax
f01025e4:	e8 4e 71 02 00       	call   f0129737 <strcmp>
f01025e9:	83 c4 10             	add    $0x10,%esp
f01025ec:	85 c0                	test   %eax,%eax
f01025ee:	75 0a                	jne    f01025fa <command_test_lists+0xbf>
	{
		test_alloc_block_FF();
f01025f0:	e8 0c ae 00 00       	call   f010d401 <test_alloc_block_FF>
f01025f5:	e9 c4 00 00 00       	jmp    f01026be <command_test_lists+0x183>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f01025fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025fd:	83 c0 04             	add    $0x4,%eax
f0102600:	8b 00                	mov    (%eax),%eax
f0102602:	83 ec 08             	sub    $0x8,%esp
f0102605:	68 09 c2 12 f0       	push   $0xf012c209
f010260a:	50                   	push   %eax
f010260b:	e8 27 71 02 00       	call   f0129737 <strcmp>
f0102610:	83 c4 10             	add    $0x10,%esp
f0102613:	85 c0                	test   %eax,%eax
f0102615:	74 1d                	je     f0102634 <command_test_lists+0xf9>
f0102617:	8b 45 0c             	mov    0xc(%ebp),%eax
f010261a:	83 c0 04             	add    $0x4,%eax
f010261d:	8b 00                	mov    (%eax),%eax
f010261f:	83 ec 08             	sub    $0x8,%esp
f0102622:	68 0c c2 12 f0       	push   $0xf012c20c
f0102627:	50                   	push   %eax
f0102628:	e8 0a 71 02 00       	call   f0129737 <strcmp>
f010262d:	83 c4 10             	add    $0x10,%esp
f0102630:	85 c0                	test   %eax,%eax
f0102632:	75 0a                	jne    f010263e <command_test_lists+0x103>
	{
		test_alloc_block_BF();
f0102634:	e8 46 b2 00 00       	call   f010d87f <test_alloc_block_BF>
f0102639:	e9 80 00 00 00       	jmp    f01026be <command_test_lists+0x183>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010263e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102641:	83 c0 04             	add    $0x4,%eax
f0102644:	8b 00                	mov    (%eax),%eax
f0102646:	83 ec 08             	sub    $0x8,%esp
f0102649:	68 0f c2 12 f0       	push   $0xf012c20f
f010264e:	50                   	push   %eax
f010264f:	e8 e3 70 02 00       	call   f0129737 <strcmp>
f0102654:	83 c4 10             	add    $0x10,%esp
f0102657:	85 c0                	test   %eax,%eax
f0102659:	74 1d                	je     f0102678 <command_test_lists+0x13d>
f010265b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010265e:	83 c0 04             	add    $0x4,%eax
f0102661:	8b 00                	mov    (%eax),%eax
f0102663:	83 ec 08             	sub    $0x8,%esp
f0102666:	68 12 c2 12 f0       	push   $0xf012c212
f010266b:	50                   	push   %eax
f010266c:	e8 c6 70 02 00       	call   f0129737 <strcmp>
f0102671:	83 c4 10             	add    $0x10,%esp
f0102674:	85 c0                	test   %eax,%eax
f0102676:	75 07                	jne    f010267f <command_test_lists+0x144>
	{
		test_alloc_block_NF();
f0102678:	e8 89 b8 00 00       	call   f010df06 <test_alloc_block_NF>
f010267d:	eb 3f                	jmp    f01026be <command_test_lists+0x183>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f010267f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102682:	83 c0 04             	add    $0x4,%eax
f0102685:	8b 00                	mov    (%eax),%eax
f0102687:	83 ec 08             	sub    $0x8,%esp
f010268a:	68 15 c2 12 f0       	push   $0xf012c215
f010268f:	50                   	push   %eax
f0102690:	e8 a2 70 02 00       	call   f0129737 <strcmp>
f0102695:	83 c4 10             	add    $0x10,%esp
f0102698:	85 c0                	test   %eax,%eax
f010269a:	74 1d                	je     f01026b9 <command_test_lists+0x17e>
f010269c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010269f:	83 c0 04             	add    $0x4,%eax
f01026a2:	8b 00                	mov    (%eax),%eax
f01026a4:	83 ec 08             	sub    $0x8,%esp
f01026a7:	68 1b c2 12 f0       	push   $0xf012c21b
f01026ac:	50                   	push   %eax
f01026ad:	e8 85 70 02 00       	call   f0129737 <strcmp>
f01026b2:	83 c4 10             	add    $0x10,%esp
f01026b5:	85 c0                	test   %eax,%eax
f01026b7:	75 05                	jne    f01026be <command_test_lists+0x183>
	{
		test_insert_sorted_with_merge_freeList();
f01026b9:	e8 d6 c0 00 00       	call   f010e794 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f01026be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026c3:	c9                   	leave  
f01026c4:	c3                   	ret    

f01026c5 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01026c5:	55                   	push   %ebp
f01026c6:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01026c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01026cb:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f01026d1:	29 d0                	sub    %edx,%eax
f01026d3:	c1 f8 03             	sar    $0x3,%eax
f01026d6:	89 c2                	mov    %eax,%edx
f01026d8:	89 d0                	mov    %edx,%eax
f01026da:	c1 e0 02             	shl    $0x2,%eax
f01026dd:	01 d0                	add    %edx,%eax
f01026df:	c1 e0 02             	shl    $0x2,%eax
f01026e2:	01 d0                	add    %edx,%eax
f01026e4:	c1 e0 02             	shl    $0x2,%eax
f01026e7:	01 d0                	add    %edx,%eax
f01026e9:	89 c1                	mov    %eax,%ecx
f01026eb:	c1 e1 08             	shl    $0x8,%ecx
f01026ee:	01 c8                	add    %ecx,%eax
f01026f0:	89 c1                	mov    %eax,%ecx
f01026f2:	c1 e1 10             	shl    $0x10,%ecx
f01026f5:	01 c8                	add    %ecx,%eax
f01026f7:	01 c0                	add    %eax,%eax
f01026f9:	01 d0                	add    %edx,%eax
}
f01026fb:	5d                   	pop    %ebp
f01026fc:	c3                   	ret    

f01026fd <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01026fd:	55                   	push   %ebp
f01026fe:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102700:	ff 75 08             	pushl  0x8(%ebp)
f0102703:	e8 bd ff ff ff       	call   f01026c5 <to_frame_number>
f0102708:	83 c4 04             	add    $0x4,%esp
f010270b:	c1 e0 0c             	shl    $0xc,%eax
}
f010270e:	c9                   	leave  
f010270f:	c3                   	ret    

f0102710 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102710:	55                   	push   %ebp
f0102711:	89 e5                	mov    %esp,%ebp
f0102713:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102716:	8b 45 08             	mov    0x8(%ebp),%eax
f0102719:	c1 e8 0c             	shr    $0xc,%eax
f010271c:	89 c2                	mov    %eax,%edx
f010271e:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0102723:	39 c2                	cmp    %eax,%edx
f0102725:	72 14                	jb     f010273b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102727:	83 ec 04             	sub    $0x4,%esp
f010272a:	68 24 c2 12 f0       	push   $0xf012c224
f010272f:	6a 55                	push   $0x55
f0102731:	68 4c c2 12 f0       	push   $0xf012c24c
f0102736:	e8 6b da ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f010273b:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f0102741:	8b 45 08             	mov    0x8(%ebp),%eax
f0102744:	c1 e8 0c             	shr    $0xc,%eax
f0102747:	89 c1                	mov    %eax,%ecx
f0102749:	89 c8                	mov    %ecx,%eax
f010274b:	01 c0                	add    %eax,%eax
f010274d:	01 c8                	add    %ecx,%eax
f010274f:	c1 e0 03             	shl    $0x3,%eax
f0102752:	01 d0                	add    %edx,%eax
}
f0102754:	c9                   	leave  
f0102755:	c3                   	ret    

f0102756 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102756:	55                   	push   %ebp
f0102757:	89 e5                	mov    %esp,%ebp
f0102759:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010275c:	8b 45 08             	mov    0x8(%ebp),%eax
f010275f:	05 00 14 00 00       	add    $0x1400,%eax
f0102764:	c1 e0 03             	shl    $0x3,%eax
f0102767:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010276a:	83 ec 04             	sub    $0x4,%esp
f010276d:	6a 08                	push   $0x8
f010276f:	ff 75 0c             	pushl  0xc(%ebp)
f0102772:	ff 75 f4             	pushl  -0xc(%ebp)
f0102775:	e8 04 76 02 00       	call   f0129d7e <ide_read>
f010277a:	83 c4 10             	add    $0x10,%esp
f010277d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102780:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102783:	c9                   	leave  
f0102784:	c3                   	ret    

f0102785 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102785:	55                   	push   %ebp
f0102786:	89 e5                	mov    %esp,%ebp
f0102788:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010278b:	8b 45 08             	mov    0x8(%ebp),%eax
f010278e:	05 00 14 00 00       	add    $0x1400,%eax
f0102793:	c1 e0 03             	shl    $0x3,%eax
f0102796:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102799:	83 ec 04             	sub    $0x4,%esp
f010279c:	6a 08                	push   $0x8
f010279e:	ff 75 0c             	pushl  0xc(%ebp)
f01027a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01027a4:	e8 15 77 02 00       	call   f0129ebe <ide_write>
f01027a9:	83 c4 10             	add    $0x10,%esp
f01027ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01027af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01027b3:	74 14                	je     f01027c9 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01027b5:	83 ec 04             	sub    $0x4,%esp
f01027b8:	68 6e c2 12 f0       	push   $0xf012c26e
f01027bd:	6a 2e                	push   $0x2e
f01027bf:	68 85 c2 12 f0       	push   $0xf012c285
f01027c4:	e8 dd d9 ff ff       	call   f01001a6 <_panic>
	return success;
f01027c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01027cc:	c9                   	leave  
f01027cd:	c3                   	ret    

f01027ce <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01027ce:	55                   	push   %ebp
f01027cf:	89 e5                	mov    %esp,%ebp
f01027d1:	53                   	push   %ebx
f01027d2:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01027d5:	c7 05 54 44 6d f0 00 	movl   $0x0,0xf06d4454
f01027dc:	00 00 00 
f01027df:	c7 05 58 44 6d f0 00 	movl   $0x0,0xf06d4458
f01027e6:	00 00 00 
f01027e9:	c7 05 60 44 6d f0 00 	movl   $0x0,0xf06d4460
f01027f0:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01027f3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01027fa:	e9 e8 00 00 00       	jmp    f01028e7 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01027ff:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102805:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102808:	89 d0                	mov    %edx,%eax
f010280a:	01 c0                	add    %eax,%eax
f010280c:	01 d0                	add    %edx,%eax
f010280e:	c1 e0 03             	shl    $0x3,%eax
f0102811:	01 c8                	add    %ecx,%eax
f0102813:	83 ec 0c             	sub    $0xc,%esp
f0102816:	50                   	push   %eax
f0102817:	e8 8b 37 00 00       	call   f0105fa7 <initialize_frame_info>
f010281c:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010281f:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102825:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102828:	89 d0                	mov    %edx,%eax
f010282a:	01 c0                	add    %eax,%eax
f010282c:	01 d0                	add    %edx,%eax
f010282e:	c1 e0 03             	shl    $0x3,%eax
f0102831:	01 c8                	add    %ecx,%eax
f0102833:	85 c0                	test   %eax,%eax
f0102835:	75 14                	jne    f010284b <initialize_disk_page_file+0x7d>
f0102837:	83 ec 04             	sub    $0x4,%esp
f010283a:	68 a4 c2 12 f0       	push   $0xf012c2a4
f010283f:	6a 59                	push   $0x59
f0102841:	68 85 c2 12 f0       	push   $0xf012c285
f0102846:	e8 5b d9 ff ff       	call   f01001a6 <_panic>
f010284b:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102851:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102854:	89 d0                	mov    %edx,%eax
f0102856:	01 c0                	add    %eax,%eax
f0102858:	01 d0                	add    %edx,%eax
f010285a:	c1 e0 03             	shl    $0x3,%eax
f010285d:	01 c8                	add    %ecx,%eax
f010285f:	8b 15 54 44 6d f0    	mov    0xf06d4454,%edx
f0102865:	89 10                	mov    %edx,(%eax)
f0102867:	8b 00                	mov    (%eax),%eax
f0102869:	85 c0                	test   %eax,%eax
f010286b:	74 1f                	je     f010288c <initialize_disk_page_file+0xbe>
f010286d:	8b 15 54 44 6d f0    	mov    0xf06d4454,%edx
f0102873:	8b 1d 40 c0 66 f0    	mov    0xf066c040,%ebx
f0102879:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010287c:	89 c8                	mov    %ecx,%eax
f010287e:	01 c0                	add    %eax,%eax
f0102880:	01 c8                	add    %ecx,%eax
f0102882:	c1 e0 03             	shl    $0x3,%eax
f0102885:	01 d8                	add    %ebx,%eax
f0102887:	89 42 04             	mov    %eax,0x4(%edx)
f010288a:	eb 19                	jmp    f01028a5 <initialize_disk_page_file+0xd7>
f010288c:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102892:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102895:	89 d0                	mov    %edx,%eax
f0102897:	01 c0                	add    %eax,%eax
f0102899:	01 d0                	add    %edx,%eax
f010289b:	c1 e0 03             	shl    $0x3,%eax
f010289e:	01 c8                	add    %ecx,%eax
f01028a0:	a3 58 44 6d f0       	mov    %eax,0xf06d4458
f01028a5:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f01028ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01028ae:	89 d0                	mov    %edx,%eax
f01028b0:	01 c0                	add    %eax,%eax
f01028b2:	01 d0                	add    %edx,%eax
f01028b4:	c1 e0 03             	shl    $0x3,%eax
f01028b7:	01 c8                	add    %ecx,%eax
f01028b9:	a3 54 44 6d f0       	mov    %eax,0xf06d4454
f01028be:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f01028c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01028c7:	89 d0                	mov    %edx,%eax
f01028c9:	01 c0                	add    %eax,%eax
f01028cb:	01 d0                	add    %edx,%eax
f01028cd:	c1 e0 03             	shl    $0x3,%eax
f01028d0:	01 c8                	add    %ecx,%eax
f01028d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01028d9:	a1 60 44 6d f0       	mov    0xf06d4460,%eax
f01028de:	40                   	inc    %eax
f01028df:	a3 60 44 6d f0       	mov    %eax,0xf06d4460
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01028e4:	ff 45 f4             	incl   -0xc(%ebp)
f01028e7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01028ee:	0f 8e 0b ff ff ff    	jle    f01027ff <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01028f4:	90                   	nop
f01028f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01028f8:	c9                   	leave  
f01028f9:	c3                   	ret    

f01028fa <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01028fa:	55                   	push   %ebp
f01028fb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01028fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0102900:	8b 15 40 c0 66 f0    	mov    0xf066c040,%edx
f0102906:	29 d0                	sub    %edx,%eax
f0102908:	c1 f8 03             	sar    $0x3,%eax
f010290b:	89 c2                	mov    %eax,%edx
f010290d:	89 d0                	mov    %edx,%eax
f010290f:	c1 e0 02             	shl    $0x2,%eax
f0102912:	01 d0                	add    %edx,%eax
f0102914:	c1 e0 02             	shl    $0x2,%eax
f0102917:	01 d0                	add    %edx,%eax
f0102919:	c1 e0 02             	shl    $0x2,%eax
f010291c:	01 d0                	add    %edx,%eax
f010291e:	89 c1                	mov    %eax,%ecx
f0102920:	c1 e1 08             	shl    $0x8,%ecx
f0102923:	01 c8                	add    %ecx,%eax
f0102925:	89 c1                	mov    %eax,%ecx
f0102927:	c1 e1 10             	shl    $0x10,%ecx
f010292a:	01 c8                	add    %ecx,%eax
f010292c:	01 c0                	add    %eax,%eax
f010292e:	01 d0                	add    %edx,%eax
}
f0102930:	5d                   	pop    %ebp
f0102931:	c3                   	ret    

f0102932 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0102932:	55                   	push   %ebp
f0102933:	89 e5                	mov    %esp,%ebp
f0102935:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0102938:	a1 54 44 6d f0       	mov    0xf06d4454,%eax
f010293d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0102940:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102944:	75 0a                	jne    f0102950 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0102946:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010294b:	e9 a7 00 00 00       	jmp    f01029f7 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0102950:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102954:	75 14                	jne    f010296a <allocate_disk_frame+0x38>
f0102956:	83 ec 04             	sub    $0x4,%esp
f0102959:	68 c7 c2 12 f0       	push   $0xf012c2c7
f010295e:	6a 78                	push   $0x78
f0102960:	68 85 c2 12 f0       	push   $0xf012c285
f0102965:	e8 3c d8 ff ff       	call   f01001a6 <_panic>
f010296a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010296d:	8b 00                	mov    (%eax),%eax
f010296f:	85 c0                	test   %eax,%eax
f0102971:	74 10                	je     f0102983 <allocate_disk_frame+0x51>
f0102973:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102976:	8b 00                	mov    (%eax),%eax
f0102978:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010297b:	8b 52 04             	mov    0x4(%edx),%edx
f010297e:	89 50 04             	mov    %edx,0x4(%eax)
f0102981:	eb 0b                	jmp    f010298e <allocate_disk_frame+0x5c>
f0102983:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102986:	8b 40 04             	mov    0x4(%eax),%eax
f0102989:	a3 58 44 6d f0       	mov    %eax,0xf06d4458
f010298e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102991:	8b 40 04             	mov    0x4(%eax),%eax
f0102994:	85 c0                	test   %eax,%eax
f0102996:	74 0f                	je     f01029a7 <allocate_disk_frame+0x75>
f0102998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010299b:	8b 40 04             	mov    0x4(%eax),%eax
f010299e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01029a1:	8b 12                	mov    (%edx),%edx
f01029a3:	89 10                	mov    %edx,(%eax)
f01029a5:	eb 0a                	jmp    f01029b1 <allocate_disk_frame+0x7f>
f01029a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029aa:	8b 00                	mov    (%eax),%eax
f01029ac:	a3 54 44 6d f0       	mov    %eax,0xf06d4454
f01029b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01029ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029bd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01029c4:	a1 60 44 6d f0       	mov    0xf06d4460,%eax
f01029c9:	48                   	dec    %eax
f01029ca:	a3 60 44 6d f0       	mov    %eax,0xf06d4460
	initialize_frame_info(ptr_frame_info);
f01029cf:	83 ec 0c             	sub    $0xc,%esp
f01029d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01029d5:	e8 cd 35 00 00       	call   f0105fa7 <initialize_frame_info>
f01029da:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01029dd:	83 ec 0c             	sub    $0xc,%esp
f01029e0:	ff 75 f4             	pushl  -0xc(%ebp)
f01029e3:	e8 12 ff ff ff       	call   f01028fa <to_disk_frame_number>
f01029e8:	83 c4 10             	add    $0x10,%esp
f01029eb:	89 c2                	mov    %eax,%edx
f01029ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01029f0:	89 10                	mov    %edx,(%eax)
	return 0;
f01029f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f7:	c9                   	leave  
f01029f8:	c3                   	ret    

f01029f9 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01029f9:	55                   	push   %ebp
f01029fa:	89 e5                	mov    %esp,%ebp
f01029fc:	53                   	push   %ebx
f01029fd:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0102a00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0102a04:	0f 84 ca 00 00 00    	je     f0102ad4 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0102a0a:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102a10:	8b 55 08             	mov    0x8(%ebp),%edx
f0102a13:	89 d0                	mov    %edx,%eax
f0102a15:	01 c0                	add    %eax,%eax
f0102a17:	01 d0                	add    %edx,%eax
f0102a19:	c1 e0 03             	shl    $0x3,%eax
f0102a1c:	01 c8                	add    %ecx,%eax
f0102a1e:	85 c0                	test   %eax,%eax
f0102a20:	75 17                	jne    f0102a39 <free_disk_frame+0x40>
f0102a22:	83 ec 04             	sub    $0x4,%esp
f0102a25:	68 a4 c2 12 f0       	push   $0xf012c2a4
f0102a2a:	68 85 00 00 00       	push   $0x85
f0102a2f:	68 85 c2 12 f0       	push   $0xf012c285
f0102a34:	e8 6d d7 ff ff       	call   f01001a6 <_panic>
f0102a39:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102a3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0102a42:	89 d0                	mov    %edx,%eax
f0102a44:	01 c0                	add    %eax,%eax
f0102a46:	01 d0                	add    %edx,%eax
f0102a48:	c1 e0 03             	shl    $0x3,%eax
f0102a4b:	01 c8                	add    %ecx,%eax
f0102a4d:	8b 15 54 44 6d f0    	mov    0xf06d4454,%edx
f0102a53:	89 10                	mov    %edx,(%eax)
f0102a55:	8b 00                	mov    (%eax),%eax
f0102a57:	85 c0                	test   %eax,%eax
f0102a59:	74 1f                	je     f0102a7a <free_disk_frame+0x81>
f0102a5b:	8b 15 54 44 6d f0    	mov    0xf06d4454,%edx
f0102a61:	8b 1d 40 c0 66 f0    	mov    0xf066c040,%ebx
f0102a67:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0102a6a:	89 c8                	mov    %ecx,%eax
f0102a6c:	01 c0                	add    %eax,%eax
f0102a6e:	01 c8                	add    %ecx,%eax
f0102a70:	c1 e0 03             	shl    $0x3,%eax
f0102a73:	01 d8                	add    %ebx,%eax
f0102a75:	89 42 04             	mov    %eax,0x4(%edx)
f0102a78:	eb 19                	jmp    f0102a93 <free_disk_frame+0x9a>
f0102a7a:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102a80:	8b 55 08             	mov    0x8(%ebp),%edx
f0102a83:	89 d0                	mov    %edx,%eax
f0102a85:	01 c0                	add    %eax,%eax
f0102a87:	01 d0                	add    %edx,%eax
f0102a89:	c1 e0 03             	shl    $0x3,%eax
f0102a8c:	01 c8                	add    %ecx,%eax
f0102a8e:	a3 58 44 6d f0       	mov    %eax,0xf06d4458
f0102a93:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102a99:	8b 55 08             	mov    0x8(%ebp),%edx
f0102a9c:	89 d0                	mov    %edx,%eax
f0102a9e:	01 c0                	add    %eax,%eax
f0102aa0:	01 d0                	add    %edx,%eax
f0102aa2:	c1 e0 03             	shl    $0x3,%eax
f0102aa5:	01 c8                	add    %ecx,%eax
f0102aa7:	a3 54 44 6d f0       	mov    %eax,0xf06d4454
f0102aac:	8b 0d 40 c0 66 f0    	mov    0xf066c040,%ecx
f0102ab2:	8b 55 08             	mov    0x8(%ebp),%edx
f0102ab5:	89 d0                	mov    %edx,%eax
f0102ab7:	01 c0                	add    %eax,%eax
f0102ab9:	01 d0                	add    %edx,%eax
f0102abb:	c1 e0 03             	shl    $0x3,%eax
f0102abe:	01 c8                	add    %ecx,%eax
f0102ac0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0102ac7:	a1 60 44 6d f0       	mov    0xf06d4460,%eax
f0102acc:	40                   	inc    %eax
f0102acd:	a3 60 44 6d f0       	mov    %eax,0xf06d4460
f0102ad2:	eb 01                	jmp    f0102ad5 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0102ad4:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0102ad5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102ad8:	c9                   	leave  
f0102ad9:	c3                   	ret    

f0102ada <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0102ada:	55                   	push   %ebp
f0102adb:	89 e5                	mov    %esp,%ebp
f0102add:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0102ae0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ae3:	c1 e8 16             	shr    $0x16,%eax
f0102ae6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102aed:	8b 45 08             	mov    0x8(%ebp),%eax
f0102af0:	01 d0                	add    %edx,%eax
f0102af2:	8b 00                	mov    (%eax),%eax
f0102af4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0102af7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102afa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102aff:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102b05:	c1 e8 0c             	shr    $0xc,%eax
f0102b08:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102b0b:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0102b10:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0102b13:	72 17                	jb     f0102b2c <get_disk_page_table+0x52>
f0102b15:	ff 75 f0             	pushl  -0x10(%ebp)
f0102b18:	68 e8 c2 12 f0       	push   $0xf012c2e8
f0102b1d:	68 92 00 00 00       	push   $0x92
f0102b22:	68 85 c2 12 f0       	push   $0xf012c285
f0102b27:	e8 7a d6 ff ff       	call   f01001a6 <_panic>
f0102b2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102b2f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102b34:	89 c2                	mov    %eax,%edx
f0102b36:	8b 45 14             	mov    0x14(%ebp),%eax
f0102b39:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0102b3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102b3f:	0f 85 b7 00 00 00    	jne    f0102bfc <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0102b45:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0102b49:	0f 84 9d 00 00 00    	je     f0102bec <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0102b4f:	83 ec 0c             	sub    $0xc,%esp
f0102b52:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0102b55:	50                   	push   %eax
f0102b56:	e8 67 34 00 00       	call   f0105fc2 <allocate_frame>
f0102b5b:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0102b5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102b61:	83 ec 0c             	sub    $0xc,%esp
f0102b64:	50                   	push   %eax
f0102b65:	e8 93 fb ff ff       	call   f01026fd <to_physical_address>
f0102b6a:	83 c4 10             	add    $0x10,%esp
f0102b6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0102b70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102b73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102b76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b79:	c1 e8 0c             	shr    $0xc,%eax
f0102b7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102b7f:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0102b84:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0102b87:	72 17                	jb     f0102ba0 <get_disk_page_table+0xc6>
f0102b89:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102b8c:	68 e8 c2 12 f0       	push   $0xf012c2e8
f0102b91:	68 ae 00 00 00       	push   $0xae
f0102b96:	68 85 c2 12 f0       	push   $0xf012c285
f0102b9b:	e8 06 d6 ff ff       	call   f01001a6 <_panic>
f0102ba0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ba3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102ba8:	89 c2                	mov    %eax,%edx
f0102baa:	8b 45 14             	mov    0x14(%ebp),%eax
f0102bad:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0102baf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102bb2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0102bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bbb:	c1 e8 16             	shr    $0x16,%eax
f0102bbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102bc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0102bc8:	01 d0                	add    %edx,%eax
f0102bca:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0102bcd:	83 ca 01             	or     $0x1,%edx
f0102bd0:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0102bd2:	8b 45 14             	mov    0x14(%ebp),%eax
f0102bd5:	8b 00                	mov    (%eax),%eax
f0102bd7:	83 ec 04             	sub    $0x4,%esp
f0102bda:	68 00 10 00 00       	push   $0x1000
f0102bdf:	6a 00                	push   $0x0
f0102be1:	50                   	push   %eax
f0102be2:	e8 32 6c 02 00       	call   f0129819 <memset>
f0102be7:	83 c4 10             	add    $0x10,%esp
f0102bea:	eb 10                	jmp    f0102bfc <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0102bec:	8b 45 14             	mov    0x14(%ebp),%eax
f0102bef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0102bf5:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bfa:	eb 05                	jmp    f0102c01 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0102bfc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c01:	c9                   	leave  
f0102c02:	c3                   	ret    

f0102c03 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0102c03:	55                   	push   %ebp
f0102c04:	89 e5                	mov    %esp,%ebp
f0102c06:	83 ec 28             	sub    $0x28,%esp
f0102c09:	8b 45 10             	mov    0x10(%ebp),%eax
f0102c0c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0102c0f:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0102c13:	74 75                	je     f0102c8a <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0102c15:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0102c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102c1f:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0102c24:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0102c2f:	f7 75 f4             	divl   -0xc(%ebp)
f0102c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c35:	29 d0                	sub    %edx,%eax
f0102c37:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0102c3a:	73 32                	jae    f0102c6e <pf_add_empty_env_page+0x6b>
f0102c3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c3f:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f0102c45:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c4a:	29 d0                	sub    %edx,%eax
f0102c4c:	c1 e0 0c             	shl    $0xc,%eax
f0102c4f:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0102c54:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0102c57:	76 15                	jbe    f0102c6e <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0102c59:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c5c:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0102c62:	8d 50 01             	lea    0x1(%eax),%edx
f0102c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c68:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0102c6e:	a1 fc 43 6d f0       	mov    0xf06d43fc,%eax
f0102c73:	83 ec 04             	sub    $0x4,%esp
f0102c76:	50                   	push   %eax
f0102c77:	ff 75 0c             	pushl  0xc(%ebp)
f0102c7a:	ff 75 08             	pushl  0x8(%ebp)
f0102c7d:	e8 b2 00 00 00       	call   f0102d34 <pf_add_env_page>
f0102c82:	83 c4 10             	add    $0x10,%esp
f0102c85:	e9 a8 00 00 00       	jmp    f0102d32 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0102c8a:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0102c91:	76 19                	jbe    f0102cac <pf_add_empty_env_page+0xa9>
f0102c93:	68 18 c3 12 f0       	push   $0xf012c318
f0102c98:	68 3e c3 12 f0       	push   $0xf012c33e
f0102c9d:	68 d1 00 00 00       	push   $0xd1
f0102ca2:	68 85 c2 12 f0       	push   $0xf012c285
f0102ca7:	e8 fa d4 ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0102cac:	8b 45 08             	mov    0x8(%ebp),%eax
f0102caf:	83 c0 64             	add    $0x64,%eax
f0102cb2:	83 ec 08             	sub    $0x8,%esp
f0102cb5:	50                   	push   %eax
f0102cb6:	ff 75 08             	pushl  0x8(%ebp)
f0102cb9:	e8 46 06 00 00       	call   f0103304 <get_disk_page_directory>
f0102cbe:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0102cc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0102cc4:	8b 40 64             	mov    0x64(%eax),%eax
f0102cc7:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0102cca:	52                   	push   %edx
f0102ccb:	6a 01                	push   $0x1
f0102ccd:	ff 75 0c             	pushl  0xc(%ebp)
f0102cd0:	50                   	push   %eax
f0102cd1:	e8 04 fe ff ff       	call   f0102ada <get_disk_page_table>
f0102cd6:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0102cd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102cdc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0102cdf:	c1 ea 0c             	shr    $0xc,%edx
f0102ce2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102ce8:	c1 e2 02             	shl    $0x2,%edx
f0102ceb:	01 d0                	add    %edx,%eax
f0102ced:	8b 00                	mov    (%eax),%eax
f0102cef:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0102cf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102cf5:	85 c0                	test   %eax,%eax
f0102cf7:	75 34                	jne    f0102d2d <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0102cf9:	83 ec 0c             	sub    $0xc,%esp
f0102cfc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0102cff:	50                   	push   %eax
f0102d00:	e8 2d fc ff ff       	call   f0102932 <allocate_disk_frame>
f0102d05:	83 c4 10             	add    $0x10,%esp
f0102d08:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0102d0b:	75 07                	jne    f0102d14 <pf_add_empty_env_page+0x111>
f0102d0d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0102d12:	eb 1e                	jmp    f0102d32 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0102d14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102d17:	8b 55 0c             	mov    0xc(%ebp),%edx
f0102d1a:	c1 ea 0c             	shr    $0xc,%edx
f0102d1d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102d23:	c1 e2 02             	shl    $0x2,%edx
f0102d26:	01 c2                	add    %eax,%edx
f0102d28:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102d2b:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0102d2d:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102d32:	c9                   	leave  
f0102d33:	c3                   	ret    

f0102d34 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0102d34:	55                   	push   %ebp
f0102d35:	89 e5                	mov    %esp,%ebp
f0102d37:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0102d3a:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0102d41:	76 19                	jbe    f0102d5c <pf_add_env_page+0x28>
f0102d43:	68 18 c3 12 f0       	push   $0xf012c318
f0102d48:	68 3e c3 12 f0       	push   $0xf012c33e
f0102d4d:	68 e6 00 00 00       	push   $0xe6
f0102d52:	68 85 c2 12 f0       	push   $0xf012c285
f0102d57:	e8 4a d4 ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0102d5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0102d5f:	83 c0 64             	add    $0x64,%eax
f0102d62:	83 ec 08             	sub    $0x8,%esp
f0102d65:	50                   	push   %eax
f0102d66:	ff 75 08             	pushl  0x8(%ebp)
f0102d69:	e8 96 05 00 00       	call   f0103304 <get_disk_page_directory>
f0102d6e:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0102d71:	8b 45 08             	mov    0x8(%ebp),%eax
f0102d74:	8b 40 64             	mov    0x64(%eax),%eax
f0102d77:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0102d7a:	52                   	push   %edx
f0102d7b:	6a 01                	push   $0x1
f0102d7d:	ff 75 0c             	pushl  0xc(%ebp)
f0102d80:	50                   	push   %eax
f0102d81:	e8 54 fd ff ff       	call   f0102ada <get_disk_page_table>
f0102d86:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0102d89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102d8c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0102d8f:	c1 ea 0c             	shr    $0xc,%edx
f0102d92:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102d98:	c1 e2 02             	shl    $0x2,%edx
f0102d9b:	01 d0                	add    %edx,%eax
f0102d9d:	8b 00                	mov    (%eax),%eax
f0102d9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0102da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102da5:	85 c0                	test   %eax,%eax
f0102da7:	75 34                	jne    f0102ddd <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0102da9:	83 ec 0c             	sub    $0xc,%esp
f0102dac:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102daf:	50                   	push   %eax
f0102db0:	e8 7d fb ff ff       	call   f0102932 <allocate_disk_frame>
f0102db5:	83 c4 10             	add    $0x10,%esp
f0102db8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0102dbb:	75 07                	jne    f0102dc4 <pf_add_env_page+0x90>
f0102dbd:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0102dc2:	eb 31                	jmp    f0102df5 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0102dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102dc7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0102dca:	c1 ea 0c             	shr    $0xc,%edx
f0102dcd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102dd3:	c1 e2 02             	shl    $0x2,%edx
f0102dd6:	01 c2                	add    %eax,%edx
f0102dd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ddb:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0102ddd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102de0:	83 ec 08             	sub    $0x8,%esp
f0102de3:	ff 75 10             	pushl  0x10(%ebp)
f0102de6:	50                   	push   %eax
f0102de7:	e8 99 f9 ff ff       	call   f0102785 <write_disk_page>
f0102dec:	83 c4 10             	add    $0x10,%esp
f0102def:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0102df2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0102df5:	c9                   	leave  
f0102df6:	c3                   	ret    

f0102df7 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0102df7:	55                   	push   %ebp
f0102df8:	89 e5                	mov    %esp,%ebp
f0102dfa:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0102dfd:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0102e04:	76 19                	jbe    f0102e1f <pf_update_env_page+0x28>
f0102e06:	68 18 c3 12 f0       	push   $0xf012c318
f0102e0b:	68 3e c3 12 f0       	push   $0xf012c33e
f0102e10:	68 08 01 00 00       	push   $0x108
f0102e15:	68 85 c2 12 f0       	push   $0xf012c285
f0102e1a:	e8 87 d3 ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0102e1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0102e22:	83 c0 64             	add    $0x64,%eax
f0102e25:	83 ec 08             	sub    $0x8,%esp
f0102e28:	50                   	push   %eax
f0102e29:	ff 75 08             	pushl  0x8(%ebp)
f0102e2c:	e8 d3 04 00 00       	call   f0103304 <get_disk_page_directory>
f0102e31:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0102e34:	8b 45 08             	mov    0x8(%ebp),%eax
f0102e37:	8b 40 64             	mov    0x64(%eax),%eax
f0102e3a:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0102e3d:	52                   	push   %edx
f0102e3e:	6a 00                	push   $0x0
f0102e40:	ff 75 0c             	pushl  0xc(%ebp)
f0102e43:	50                   	push   %eax
f0102e44:	e8 91 fc ff ff       	call   f0102ada <get_disk_page_table>
f0102e49:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0102e4c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102e4f:	85 c0                	test   %eax,%eax
f0102e51:	74 29                	je     f0102e7c <pf_update_env_page+0x85>
f0102e53:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102e56:	85 c0                	test   %eax,%eax
f0102e58:	0f 84 43 01 00 00    	je     f0102fa1 <pf_update_env_page+0x1aa>
f0102e5e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102e61:	8b 55 0c             	mov    0xc(%ebp),%edx
f0102e64:	c1 ea 0c             	shr    $0xc,%edx
f0102e67:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102e6d:	c1 e2 02             	shl    $0x2,%edx
f0102e70:	01 d0                	add    %edx,%eax
f0102e72:	8b 00                	mov    (%eax),%eax
f0102e74:	85 c0                	test   %eax,%eax
f0102e76:	0f 85 25 01 00 00    	jne    f0102fa1 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0102e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0102e82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e85:	85 c0                	test   %eax,%eax
f0102e87:	79 09                	jns    f0102e92 <pf_update_env_page+0x9b>
f0102e89:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0102e90:	76 38                	jbe    f0102eca <pf_update_env_page+0xd3>
f0102e92:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0102e99:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102e9c:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0102ea1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102ea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0102eac:	f7 75 f0             	divl   -0x10(%ebp)
f0102eaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102eb2:	29 d0                	sub    %edx,%eax
f0102eb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102eb7:	0f 87 cd 00 00 00    	ja     f0102f8a <pf_update_env_page+0x193>
f0102ebd:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0102ec4:	0f 87 c0 00 00 00    	ja     f0102f8a <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f0102eca:	8b 45 08             	mov    0x8(%ebp),%eax
f0102ecd:	8b 40 5c             	mov    0x5c(%eax),%eax
f0102ed0:	83 ec 04             	sub    $0x4,%esp
f0102ed3:	8d 55 d0             	lea    -0x30(%ebp),%edx
f0102ed6:	52                   	push   %edx
f0102ed7:	ff 75 0c             	pushl  0xc(%ebp)
f0102eda:	50                   	push   %eax
f0102edb:	e8 39 35 00 00       	call   f0106419 <get_frame_info>
f0102ee0:	83 c4 10             	add    $0x10,%esp
f0102ee3:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f0102ee6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102ee9:	3b 45 10             	cmp    0x10(%ebp),%eax
f0102eec:	75 52                	jne    f0102f40 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0102eee:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef1:	83 ec 04             	sub    $0x4,%esp
f0102ef4:	50                   	push   %eax
f0102ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ef8:	ff 75 08             	pushl  0x8(%ebp)
f0102efb:	e8 34 fe ff ff       	call   f0102d34 <pf_add_env_page>
f0102f00:	83 c4 10             	add    $0x10,%esp
f0102f03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0102f06:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0102f0a:	75 17                	jne    f0102f23 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0102f0c:	83 ec 04             	sub    $0x4,%esp
f0102f0f:	68 54 c3 12 f0       	push   $0xf012c354
f0102f14:	68 1d 01 00 00       	push   $0x11d
f0102f19:	68 85 c2 12 f0       	push   $0xf012c285
f0102f1e:	e8 83 d2 ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0102f23:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f26:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0102f2c:	8d 50 01             	lea    0x1(%eax),%edx
f0102f2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f32:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0102f38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102f3b:	e9 ff 00 00 00       	jmp    f010303f <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0102f40:	83 ec 04             	sub    $0x4,%esp
f0102f43:	6a 00                	push   $0x0
f0102f45:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f48:	ff 75 08             	pushl  0x8(%ebp)
f0102f4b:	e8 b3 fc ff ff       	call   f0102c03 <pf_add_empty_env_page>
f0102f50:	83 c4 10             	add    $0x10,%esp
f0102f53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0102f56:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0102f5a:	75 17                	jne    f0102f73 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0102f5c:	83 ec 04             	sub    $0x4,%esp
f0102f5f:	68 80 c3 12 f0       	push   $0xf012c380
f0102f64:	68 28 01 00 00       	push   $0x128
f0102f69:	68 85 c2 12 f0       	push   $0xf012c285
f0102f6e:	e8 33 d2 ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0102f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f76:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0102f7c:	8d 50 01             	lea    0x1(%eax),%edx
f0102f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f82:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0102f88:	eb 17                	jmp    f0102fa1 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0102f8a:	83 ec 04             	sub    $0x4,%esp
f0102f8d:	68 cc c3 12 f0       	push   $0xf012c3cc
f0102f92:	68 2f 01 00 00       	push   $0x12f
f0102f97:	68 85 c2 12 f0       	push   $0xf012c285
f0102f9c:	e8 05 d2 ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0102fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0102fa4:	8b 40 64             	mov    0x64(%eax),%eax
f0102fa7:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0102faa:	52                   	push   %edx
f0102fab:	6a 00                	push   $0x0
f0102fad:	ff 75 0c             	pushl  0xc(%ebp)
f0102fb0:	50                   	push   %eax
f0102fb1:	e8 24 fb ff ff       	call   f0102ada <get_disk_page_table>
f0102fb6:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0102fb9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102fbc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0102fbf:	c1 ea 0c             	shr    $0xc,%edx
f0102fc2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102fc8:	c1 e2 02             	shl    $0x2,%edx
f0102fcb:	01 d0                	add    %edx,%eax
f0102fcd:	8b 00                	mov    (%eax),%eax
f0102fcf:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0102fd2:	83 ec 0c             	sub    $0xc,%esp
f0102fd5:	ff 75 10             	pushl  0x10(%ebp)
f0102fd8:	e8 20 f7 ff ff       	call   f01026fd <to_physical_address>
f0102fdd:	83 c4 10             	add    $0x10,%esp
f0102fe0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0102fe3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102fe6:	c1 e8 0c             	shr    $0xc,%eax
f0102fe9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0102fec:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0102ff1:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f0102ff4:	72 17                	jb     f010300d <pf_update_env_page+0x216>
f0102ff6:	ff 75 dc             	pushl  -0x24(%ebp)
f0102ff9:	68 e8 c2 12 f0       	push   $0xf012c2e8
f0102ffe:	68 47 01 00 00       	push   $0x147
f0103003:	68 85 c2 12 f0       	push   $0xf012c285
f0103008:	e8 99 d1 ff ff       	call   f01001a6 <_panic>
f010300d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103010:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103015:	83 ec 08             	sub    $0x8,%esp
f0103018:	50                   	push   %eax
f0103019:	ff 75 e0             	pushl  -0x20(%ebp)
f010301c:	e8 64 f7 ff ff       	call   f0102785 <write_disk_page>
f0103021:	83 c4 10             	add    $0x10,%esp
f0103024:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103027:	8b 45 08             	mov    0x8(%ebp),%eax
f010302a:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103030:	8d 50 01             	lea    0x1(%eax),%edx
f0103033:	8b 45 08             	mov    0x8(%ebp),%eax
f0103036:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f010303c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f010303f:	c9                   	leave  
f0103040:	c3                   	ret    

f0103041 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103041:	55                   	push   %ebp
f0103042:	89 e5                	mov    %esp,%ebp
f0103044:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103047:	8b 45 0c             	mov    0xc(%ebp),%eax
f010304a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010304d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103050:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103055:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103058:	8b 45 08             	mov    0x8(%ebp),%eax
f010305b:	8b 40 64             	mov    0x64(%eax),%eax
f010305e:	85 c0                	test   %eax,%eax
f0103060:	75 0a                	jne    f010306c <pf_read_env_page+0x2b>
f0103062:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103067:	e9 90 00 00 00       	jmp    f01030fc <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f010306c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010306f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103072:	8b 40 64             	mov    0x64(%eax),%eax
f0103075:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103078:	51                   	push   %ecx
f0103079:	6a 00                	push   $0x0
f010307b:	52                   	push   %edx
f010307c:	50                   	push   %eax
f010307d:	e8 58 fa ff ff       	call   f0102ada <get_disk_page_table>
f0103082:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103085:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103088:	85 c0                	test   %eax,%eax
f010308a:	75 07                	jne    f0103093 <pf_read_env_page+0x52>
f010308c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103091:	eb 69                	jmp    f01030fc <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103093:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103096:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103099:	c1 ea 0c             	shr    $0xc,%edx
f010309c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01030a2:	c1 e2 02             	shl    $0x2,%edx
f01030a5:	01 d0                	add    %edx,%eax
f01030a7:	8b 00                	mov    (%eax),%eax
f01030a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01030ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01030b0:	75 07                	jne    f01030b9 <pf_read_env_page+0x78>
f01030b2:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01030b7:	eb 43                	jmp    f01030fc <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01030b9:	83 ec 08             	sub    $0x8,%esp
f01030bc:	ff 75 0c             	pushl  0xc(%ebp)
f01030bf:	ff 75 f0             	pushl  -0x10(%ebp)
f01030c2:	e8 8f f6 ff ff       	call   f0102756 <read_disk_page>
f01030c7:	83 c4 10             	add    $0x10,%esp
f01030ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01030cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01030d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01030d3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01030d6:	6a 40                	push   $0x40
f01030d8:	6a 00                	push   $0x0
f01030da:	52                   	push   %edx
f01030db:	50                   	push   %eax
f01030dc:	e8 e3 3b 00 00       	call   f0106cc4 <pt_set_page_permissions>
f01030e1:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01030e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01030e7:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01030ed:	8d 50 01             	lea    0x1(%eax),%edx
f01030f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01030f3:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01030f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01030fc:	c9                   	leave  
f01030fd:	c3                   	ret    

f01030fe <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01030fe:	55                   	push   %ebp
f01030ff:	89 e5                	mov    %esp,%ebp
f0103101:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103104:	8b 45 08             	mov    0x8(%ebp),%eax
f0103107:	8b 40 64             	mov    0x64(%eax),%eax
f010310a:	85 c0                	test   %eax,%eax
f010310c:	74 62                	je     f0103170 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010310e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103111:	8b 40 64             	mov    0x64(%eax),%eax
f0103114:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103117:	52                   	push   %edx
f0103118:	6a 00                	push   $0x0
f010311a:	ff 75 0c             	pushl  0xc(%ebp)
f010311d:	50                   	push   %eax
f010311e:	e8 b7 f9 ff ff       	call   f0102ada <get_disk_page_table>
f0103123:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103126:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103129:	85 c0                	test   %eax,%eax
f010312b:	74 46                	je     f0103173 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010312d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103130:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103133:	c1 ea 0c             	shr    $0xc,%edx
f0103136:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010313c:	c1 e2 02             	shl    $0x2,%edx
f010313f:	01 d0                	add    %edx,%eax
f0103141:	8b 00                	mov    (%eax),%eax
f0103143:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103146:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103149:	8b 55 0c             	mov    0xc(%ebp),%edx
f010314c:	c1 ea 0c             	shr    $0xc,%edx
f010314f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103155:	c1 e2 02             	shl    $0x2,%edx
f0103158:	01 d0                	add    %edx,%eax
f010315a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103160:	83 ec 0c             	sub    $0xc,%esp
f0103163:	ff 75 f4             	pushl  -0xc(%ebp)
f0103166:	e8 8e f8 ff ff       	call   f01029f9 <free_disk_frame>
f010316b:	83 c4 10             	add    $0x10,%esp
f010316e:	eb 04                	jmp    f0103174 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103170:	90                   	nop
f0103171:	eb 01                	jmp    f0103174 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103173:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103174:	c9                   	leave  
f0103175:	c3                   	ret    

f0103176 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103176:	55                   	push   %ebp
f0103177:	89 e5                	mov    %esp,%ebp
f0103179:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010317c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103183:	e9 ee 00 00 00       	jmp    f0103276 <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103188:	8b 45 08             	mov    0x8(%ebp),%eax
f010318b:	8b 40 64             	mov    0x64(%eax),%eax
f010318e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103191:	c1 e2 02             	shl    $0x2,%edx
f0103194:	01 d0                	add    %edx,%eax
f0103196:	8b 00                	mov    (%eax),%eax
f0103198:	83 e0 01             	and    $0x1,%eax
f010319b:	85 c0                	test   %eax,%eax
f010319d:	0f 84 cf 00 00 00    	je     f0103272 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f01031a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01031a6:	8b 40 64             	mov    0x64(%eax),%eax
f01031a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031ac:	c1 e2 02             	shl    $0x2,%edx
f01031af:	01 d0                	add    %edx,%eax
f01031b1:	8b 00                	mov    (%eax),%eax
f01031b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01031b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01031bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01031be:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01031c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01031c4:	c1 e8 0c             	shr    $0xc,%eax
f01031c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01031ca:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01031cf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01031d2:	72 17                	jb     f01031eb <pf_free_env+0x75>
f01031d4:	ff 75 e8             	pushl  -0x18(%ebp)
f01031d7:	68 e8 c2 12 f0       	push   $0xf012c2e8
f01031dc:	68 96 01 00 00       	push   $0x196
f01031e1:	68 85 c2 12 f0       	push   $0xf012c285
f01031e6:	e8 bb cf ff ff       	call   f01001a6 <_panic>
f01031eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01031ee:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01031f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01031f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01031fd:	eb 3a                	jmp    f0103239 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01031ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103202:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103209:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010320c:	01 d0                	add    %edx,%eax
f010320e:	8b 00                	mov    (%eax),%eax
f0103210:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f0103213:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103216:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010321d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103220:	01 d0                	add    %edx,%eax
f0103222:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103228:	83 ec 0c             	sub    $0xc,%esp
f010322b:	ff 75 dc             	pushl  -0x24(%ebp)
f010322e:	e8 c6 f7 ff ff       	call   f01029f9 <free_disk_frame>
f0103233:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103236:	ff 45 f0             	incl   -0x10(%ebp)
f0103239:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103240:	76 bd                	jbe    f01031ff <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103242:	8b 45 08             	mov    0x8(%ebp),%eax
f0103245:	8b 40 64             	mov    0x64(%eax),%eax
f0103248:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010324b:	c1 e2 02             	shl    $0x2,%edx
f010324e:	01 d0                	add    %edx,%eax
f0103250:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103256:	83 ec 0c             	sub    $0xc,%esp
f0103259:	ff 75 ec             	pushl  -0x14(%ebp)
f010325c:	e8 af f4 ff ff       	call   f0102710 <to_frame_info>
f0103261:	83 c4 10             	add    $0x10,%esp
f0103264:	83 ec 0c             	sub    $0xc,%esp
f0103267:	50                   	push   %eax
f0103268:	e8 e4 2e 00 00       	call   f0106151 <decrement_references>
f010326d:	83 c4 10             	add    $0x10,%esp
f0103270:	eb 01                	jmp    f0103273 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103272:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103273:	ff 45 f4             	incl   -0xc(%ebp)
f0103276:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010327d:	0f 86 05 ff ff ff    	jbe    f0103188 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103283:	8b 45 08             	mov    0x8(%ebp),%eax
f0103286:	8b 40 68             	mov    0x68(%eax),%eax
f0103289:	83 ec 0c             	sub    $0xc,%esp
f010328c:	50                   	push   %eax
f010328d:	e8 7e f4 ff ff       	call   f0102710 <to_frame_info>
f0103292:	83 c4 10             	add    $0x10,%esp
f0103295:	83 ec 0c             	sub    $0xc,%esp
f0103298:	50                   	push   %eax
f0103299:	e8 b3 2e 00 00       	call   f0106151 <decrement_references>
f010329e:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f01032a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01032a4:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f01032ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ae:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f01032b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032b8:	8b 40 6c             	mov    0x6c(%eax),%eax
f01032bb:	85 c0                	test   %eax,%eax
f01032bd:	74 42                	je     f0103301 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f01032bf:	83 ec 0c             	sub    $0xc,%esp
f01032c2:	ff 75 08             	pushl  0x8(%ebp)
f01032c5:	e8 ee 03 00 00       	call   f01036b8 <__pf_remove_env_all_tables>
f01032ca:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f01032cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d0:	8b 40 70             	mov    0x70(%eax),%eax
f01032d3:	83 ec 0c             	sub    $0xc,%esp
f01032d6:	50                   	push   %eax
f01032d7:	e8 34 f4 ff ff       	call   f0102710 <to_frame_info>
f01032dc:	83 c4 10             	add    $0x10,%esp
f01032df:	83 ec 0c             	sub    $0xc,%esp
f01032e2:	50                   	push   %eax
f01032e3:	e8 69 2e 00 00       	call   f0106151 <decrement_references>
f01032e8:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f01032f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032f8:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f01032ff:	eb 01                	jmp    f0103302 <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103301:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103302:	c9                   	leave  
f0103303:	c3                   	ret    

f0103304 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103304:	55                   	push   %ebp
f0103305:	89 e5                	mov    %esp,%ebp
f0103307:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010330a:	8b 45 08             	mov    0x8(%ebp),%eax
f010330d:	8b 50 64             	mov    0x64(%eax),%edx
f0103310:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103313:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103315:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103318:	8b 00                	mov    (%eax),%eax
f010331a:	85 c0                	test   %eax,%eax
f010331c:	0f 85 aa 00 00 00    	jne    f01033cc <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103322:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103329:	83 ec 0c             	sub    $0xc,%esp
f010332c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010332f:	50                   	push   %eax
f0103330:	e8 8d 2c 00 00       	call   f0105fc2 <allocate_frame>
f0103335:	83 c4 10             	add    $0x10,%esp
f0103338:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010333b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010333f:	79 08                	jns    f0103349 <get_disk_page_directory+0x45>
				return r;
f0103341:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103344:	e9 88 00 00 00       	jmp    f01033d1 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103349:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010334c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103352:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103355:	83 ec 0c             	sub    $0xc,%esp
f0103358:	50                   	push   %eax
f0103359:	e8 9f f3 ff ff       	call   f01026fd <to_physical_address>
f010335e:	83 c4 10             	add    $0x10,%esp
f0103361:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103364:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103367:	c1 e8 0c             	shr    $0xc,%eax
f010336a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010336d:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0103372:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103375:	72 17                	jb     f010338e <get_disk_page_directory+0x8a>
f0103377:	ff 75 f0             	pushl  -0x10(%ebp)
f010337a:	68 e8 c2 12 f0       	push   $0xf012c2e8
f010337f:	68 ee 01 00 00       	push   $0x1ee
f0103384:	68 85 c2 12 f0       	push   $0xf012c285
f0103389:	e8 18 ce ff ff       	call   f01001a6 <_panic>
f010338e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103391:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103396:	89 c2                	mov    %eax,%edx
f0103398:	8b 45 0c             	mov    0xc(%ebp),%eax
f010339b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f010339d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01033a0:	83 ec 0c             	sub    $0xc,%esp
f01033a3:	50                   	push   %eax
f01033a4:	e8 54 f3 ff ff       	call   f01026fd <to_physical_address>
f01033a9:	83 c4 10             	add    $0x10,%esp
f01033ac:	89 c2                	mov    %eax,%edx
f01033ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b1:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f01033b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033b7:	8b 00                	mov    (%eax),%eax
f01033b9:	83 ec 04             	sub    $0x4,%esp
f01033bc:	68 00 10 00 00       	push   $0x1000
f01033c1:	6a 00                	push   $0x0
f01033c3:	50                   	push   %eax
f01033c4:	e8 50 64 02 00       	call   f0129819 <memset>
f01033c9:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01033cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033d1:	c9                   	leave  
f01033d2:	c3                   	ret    

f01033d3 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01033d3:	55                   	push   %ebp
f01033d4:	89 e5                	mov    %esp,%ebp
f01033d6:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01033d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01033e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01033e7:	e9 a6 00 00 00       	jmp    f0103492 <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01033ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01033ef:	8b 40 64             	mov    0x64(%eax),%eax
f01033f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01033f5:	c1 e2 02             	shl    $0x2,%edx
f01033f8:	01 d0                	add    %edx,%eax
f01033fa:	8b 00                	mov    (%eax),%eax
f01033fc:	83 e0 01             	and    $0x1,%eax
f01033ff:	85 c0                	test   %eax,%eax
f0103401:	0f 84 87 00 00 00    	je     f010348e <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103407:	8b 45 08             	mov    0x8(%ebp),%eax
f010340a:	8b 40 64             	mov    0x64(%eax),%eax
f010340d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103410:	c1 e2 02             	shl    $0x2,%edx
f0103413:	01 d0                	add    %edx,%eax
f0103415:	8b 00                	mov    (%eax),%eax
f0103417:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010341c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f010341f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103422:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103425:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103428:	c1 e8 0c             	shr    $0xc,%eax
f010342b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010342e:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0103433:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103436:	72 17                	jb     f010344f <pf_calculate_allocated_pages+0x7c>
f0103438:	ff 75 e4             	pushl  -0x1c(%ebp)
f010343b:	68 e8 c2 12 f0       	push   $0xf012c2e8
f0103440:	68 0e 02 00 00       	push   $0x20e
f0103445:	68 85 c2 12 f0       	push   $0xf012c285
f010344a:	e8 57 cd ff ff       	call   f01001a6 <_panic>
f010344f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103452:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103457:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010345a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103461:	eb 20                	jmp    f0103483 <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103463:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103466:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010346d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103470:	01 d0                	add    %edx,%eax
f0103472:	8b 00                	mov    (%eax),%eax
f0103474:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103477:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010347b:	74 03                	je     f0103480 <pf_calculate_allocated_pages+0xad>
				counter ++;
f010347d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103480:	ff 45 ec             	incl   -0x14(%ebp)
f0103483:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010348a:	76 d7                	jbe    f0103463 <pf_calculate_allocated_pages+0x90>
f010348c:	eb 01                	jmp    f010348f <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010348e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010348f:	ff 45 f4             	incl   -0xc(%ebp)
f0103492:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103499:	0f 86 4d ff ff ff    	jbe    f01033ec <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010349f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01034a2:	c9                   	leave  
f01034a3:	c3                   	ret    

f01034a4 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f01034a4:	55                   	push   %ebp
f01034a5:	89 e5                	mov    %esp,%ebp
f01034a7:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f01034aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f01034b1:	a1 54 44 6d f0       	mov    0xf06d4454,%eax
f01034b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01034b9:	eb 0b                	jmp    f01034c6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f01034bb:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f01034be:	a1 5c 44 6d f0       	mov    0xf06d445c,%eax
f01034c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01034c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01034ca:	74 07                	je     f01034d3 <pf_calculate_free_frames+0x2f>
f01034cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01034cf:	8b 00                	mov    (%eax),%eax
f01034d1:	eb 05                	jmp    f01034d8 <pf_calculate_free_frames+0x34>
f01034d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01034d8:	a3 5c 44 6d f0       	mov    %eax,0xf06d445c
f01034dd:	a1 5c 44 6d f0       	mov    0xf06d445c,%eax
f01034e2:	85 c0                	test   %eax,%eax
f01034e4:	75 d5                	jne    f01034bb <pf_calculate_free_frames+0x17>
f01034e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01034ea:	75 cf                	jne    f01034bb <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01034ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01034ef:	c9                   	leave  
f01034f0:	c3                   	ret    

f01034f1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01034f1:	55                   	push   %ebp
f01034f2:	89 e5                	mov    %esp,%ebp
f01034f4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01034f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01034fa:	8b 50 6c             	mov    0x6c(%eax),%edx
f01034fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103500:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103502:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103505:	8b 00                	mov    (%eax),%eax
f0103507:	85 c0                	test   %eax,%eax
f0103509:	0f 85 aa 00 00 00    	jne    f01035b9 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f010350f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103516:	83 ec 0c             	sub    $0xc,%esp
f0103519:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010351c:	50                   	push   %eax
f010351d:	e8 a0 2a 00 00       	call   f0105fc2 <allocate_frame>
f0103522:	83 c4 10             	add    $0x10,%esp
f0103525:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103528:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010352c:	79 08                	jns    f0103536 <get_disk_table_directory+0x45>
				return r;
f010352e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103531:	e9 88 00 00 00       	jmp    f01035be <get_disk_table_directory+0xcd>
			p->references = 1;
f0103536:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103539:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010353f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103542:	83 ec 0c             	sub    $0xc,%esp
f0103545:	50                   	push   %eax
f0103546:	e8 b2 f1 ff ff       	call   f01026fd <to_physical_address>
f010354b:	83 c4 10             	add    $0x10,%esp
f010354e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103551:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103554:	c1 e8 0c             	shr    $0xc,%eax
f0103557:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010355a:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f010355f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103562:	72 17                	jb     f010357b <get_disk_table_directory+0x8a>
f0103564:	ff 75 f0             	pushl  -0x10(%ebp)
f0103567:	68 e8 c2 12 f0       	push   $0xf012c2e8
f010356c:	68 4c 02 00 00       	push   $0x24c
f0103571:	68 85 c2 12 f0       	push   $0xf012c285
f0103576:	e8 2b cc ff ff       	call   f01001a6 <_panic>
f010357b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010357e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103583:	89 c2                	mov    %eax,%edx
f0103585:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103588:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010358a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010358d:	83 ec 0c             	sub    $0xc,%esp
f0103590:	50                   	push   %eax
f0103591:	e8 67 f1 ff ff       	call   f01026fd <to_physical_address>
f0103596:	83 c4 10             	add    $0x10,%esp
f0103599:	89 c2                	mov    %eax,%edx
f010359b:	8b 45 08             	mov    0x8(%ebp),%eax
f010359e:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f01035a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01035a4:	8b 00                	mov    (%eax),%eax
f01035a6:	83 ec 04             	sub    $0x4,%esp
f01035a9:	68 00 10 00 00       	push   $0x1000
f01035ae:	6a 00                	push   $0x0
f01035b0:	50                   	push   %eax
f01035b1:	e8 63 62 02 00       	call   f0129819 <memset>
f01035b6:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01035b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035be:	c9                   	leave  
f01035bf:	c3                   	ret    

f01035c0 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01035c0:	55                   	push   %ebp
f01035c1:	89 e5                	mov    %esp,%ebp
f01035c3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01035c6:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035cd:	76 19                	jbe    f01035e8 <__pf_write_env_table+0x28>
f01035cf:	68 18 c3 12 f0       	push   $0xf012c318
f01035d4:	68 3e c3 12 f0       	push   $0xf012c33e
f01035d9:	68 5a 02 00 00       	push   $0x25a
f01035de:	68 85 c2 12 f0       	push   $0xf012c285
f01035e3:	e8 be cb ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01035e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01035eb:	83 c0 6c             	add    $0x6c,%eax
f01035ee:	83 ec 08             	sub    $0x8,%esp
f01035f1:	50                   	push   %eax
f01035f2:	ff 75 08             	pushl  0x8(%ebp)
f01035f5:	e8 f7 fe ff ff       	call   f01034f1 <get_disk_table_directory>
f01035fa:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01035fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103600:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103603:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103606:	c1 ea 16             	shr    $0x16,%edx
f0103609:	c1 e2 02             	shl    $0x2,%edx
f010360c:	01 d0                	add    %edx,%eax
f010360e:	8b 00                	mov    (%eax),%eax
f0103610:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	85 c0                	test   %eax,%eax
f0103618:	75 31                	jne    f010364b <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010361a:	83 ec 0c             	sub    $0xc,%esp
f010361d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103620:	50                   	push   %eax
f0103621:	e8 0c f3 ff ff       	call   f0102932 <allocate_disk_frame>
f0103626:	83 c4 10             	add    $0x10,%esp
f0103629:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010362c:	75 07                	jne    f0103635 <__pf_write_env_table+0x75>
f010362e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103633:	eb 2e                	jmp    f0103663 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103635:	8b 45 08             	mov    0x8(%ebp),%eax
f0103638:	8b 40 6c             	mov    0x6c(%eax),%eax
f010363b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010363e:	c1 ea 16             	shr    $0x16,%edx
f0103641:	c1 e2 02             	shl    $0x2,%edx
f0103644:	01 c2                	add    %eax,%edx
f0103646:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103649:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010364b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010364e:	83 ec 08             	sub    $0x8,%esp
f0103651:	ff 75 10             	pushl  0x10(%ebp)
f0103654:	50                   	push   %eax
f0103655:	e8 2b f1 ff ff       	call   f0102785 <write_disk_page>
f010365a:	83 c4 10             	add    $0x10,%esp
f010365d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103660:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103663:	c9                   	leave  
f0103664:	c3                   	ret    

f0103665 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103665:	55                   	push   %ebp
f0103666:	89 e5                	mov    %esp,%ebp
f0103668:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010366b:	8b 45 08             	mov    0x8(%ebp),%eax
f010366e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103671:	85 c0                	test   %eax,%eax
f0103673:	75 07                	jne    f010367c <__pf_read_env_table+0x17>
f0103675:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010367a:	eb 3a                	jmp    f01036b6 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010367c:	8b 45 08             	mov    0x8(%ebp),%eax
f010367f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103682:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103685:	c1 ea 16             	shr    $0x16,%edx
f0103688:	c1 e2 02             	shl    $0x2,%edx
f010368b:	01 d0                	add    %edx,%eax
f010368d:	8b 00                	mov    (%eax),%eax
f010368f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103692:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103696:	75 07                	jne    f010369f <__pf_read_env_table+0x3a>
f0103698:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010369d:	eb 17                	jmp    f01036b6 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010369f:	83 ec 08             	sub    $0x8,%esp
f01036a2:	ff 75 10             	pushl  0x10(%ebp)
f01036a5:	ff 75 f4             	pushl  -0xc(%ebp)
f01036a8:	e8 a9 f0 ff ff       	call   f0102756 <read_disk_page>
f01036ad:	83 c4 10             	add    $0x10,%esp
f01036b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01036b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01036b6:	c9                   	leave  
f01036b7:	c3                   	ret    

f01036b8 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01036b8:	55                   	push   %ebp
f01036b9:	89 e5                	mov    %esp,%ebp
f01036bb:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01036be:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c1:	8b 40 6c             	mov    0x6c(%eax),%eax
f01036c4:	85 c0                	test   %eax,%eax
f01036c6:	74 4c                	je     f0103714 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01036c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01036cf:	eb 38                	jmp    f0103709 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01036d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01036d4:	8b 40 6c             	mov    0x6c(%eax),%eax
f01036d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01036da:	c1 e2 02             	shl    $0x2,%edx
f01036dd:	01 d0                	add    %edx,%eax
f01036df:	8b 00                	mov    (%eax),%eax
f01036e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01036e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01036e7:	8b 40 6c             	mov    0x6c(%eax),%eax
f01036ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01036ed:	c1 e2 02             	shl    $0x2,%edx
f01036f0:	01 d0                	add    %edx,%eax
f01036f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01036f8:	83 ec 0c             	sub    $0xc,%esp
f01036fb:	ff 75 f0             	pushl  -0x10(%ebp)
f01036fe:	e8 f6 f2 ff ff       	call   f01029f9 <free_disk_frame>
f0103703:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103706:	ff 45 f4             	incl   -0xc(%ebp)
f0103709:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103710:	76 bf                	jbe    f01036d1 <__pf_remove_env_all_tables+0x19>
f0103712:	eb 01                	jmp    f0103715 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103714:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103715:	c9                   	leave  
f0103716:	c3                   	ret    

f0103717 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103717:	55                   	push   %ebp
f0103718:	89 e5                	mov    %esp,%ebp
f010371a:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010371d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103721:	75 10                	jne    f0103733 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103723:	83 ec 0c             	sub    $0xc,%esp
f0103726:	68 48 c4 12 f0       	push   $0xf012c448
f010372b:	e8 fd d4 ff ff       	call   f0100c2d <cprintf>
f0103730:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103733:	8b 45 08             	mov    0x8(%ebp),%eax
f0103736:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103739:	85 c0                	test   %eax,%eax
f010373b:	74 3d                	je     f010377a <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103743:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103746:	c1 ea 16             	shr    $0x16,%edx
f0103749:	c1 e2 02             	shl    $0x2,%edx
f010374c:	01 d0                	add    %edx,%eax
f010374e:	8b 00                	mov    (%eax),%eax
f0103750:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103753:	8b 45 08             	mov    0x8(%ebp),%eax
f0103756:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103759:	8b 55 0c             	mov    0xc(%ebp),%edx
f010375c:	c1 ea 16             	shr    $0x16,%edx
f010375f:	c1 e2 02             	shl    $0x2,%edx
f0103762:	01 d0                	add    %edx,%eax
f0103764:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010376a:	83 ec 0c             	sub    $0xc,%esp
f010376d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103770:	e8 84 f2 ff ff       	call   f01029f9 <free_disk_frame>
f0103775:	83 c4 10             	add    $0x10,%esp
f0103778:	eb 01                	jmp    f010377b <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010377a:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010377b:	c9                   	leave  
f010377c:	c3                   	ret    

f010377d <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010377d:	55                   	push   %ebp
f010377e:	89 e5                	mov    %esp,%ebp
f0103780:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103783:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010378a:	eb 1f                	jmp    f01037ab <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010378c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010378f:	83 ec 04             	sub    $0x4,%esp
f0103792:	6a 08                	push   $0x8
f0103794:	ff 75 08             	pushl  0x8(%ebp)
f0103797:	50                   	push   %eax
f0103798:	e8 21 67 02 00       	call   f0129ebe <ide_write>
f010379d:	83 c4 10             	add    $0x10,%esp
f01037a0:	85 c0                	test   %eax,%eax
f01037a2:	75 12                	jne    f01037b6 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01037a4:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01037ab:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01037b2:	7e d8                	jle    f010378c <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01037b4:	eb 01                	jmp    f01037b7 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01037b6:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01037b7:	90                   	nop
f01037b8:	c9                   	leave  
f01037b9:	c3                   	ret    

f01037ba <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01037ba:	55                   	push   %ebp
f01037bb:	89 e5                	mov    %esp,%ebp
f01037bd:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01037c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01037c3:	0f b6 c0             	movzbl %al,%eax
f01037c6:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01037cd:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01037d0:	8a 45 f6             	mov    -0xa(%ebp),%al
f01037d3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01037d6:	ee                   	out    %al,(%dx)
f01037d7:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01037de:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01037e1:	89 c2                	mov    %eax,%edx
f01037e3:	ec                   	in     (%dx),%al
f01037e4:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01037e7:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01037ea:	0f b6 c0             	movzbl %al,%eax
}
f01037ed:	c9                   	leave  
f01037ee:	c3                   	ret    

f01037ef <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01037ef:	55                   	push   %ebp
f01037f0:	89 e5                	mov    %esp,%ebp
f01037f2:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01037f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01037f8:	0f b6 c0             	movzbl %al,%eax
f01037fb:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103802:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103805:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103808:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010380b:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f010380c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010380f:	0f b6 c0             	movzbl %al,%eax
f0103812:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0103819:	88 45 f7             	mov    %al,-0x9(%ebp)
f010381c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010381f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0103822:	ee                   	out    %al,(%dx)
}
f0103823:	90                   	nop
f0103824:	c9                   	leave  
f0103825:	c3                   	ret    

f0103826 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0103826:	55                   	push   %ebp
f0103827:	89 e5                	mov    %esp,%ebp
f0103829:	53                   	push   %ebx
f010382a:	83 ec 24             	sub    $0x24,%esp
f010382d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103830:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0103833:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010383a:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010383e:	8a 45 ef             	mov    -0x11(%ebp),%al
f0103841:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103844:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0103845:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0103849:	77 48                	ja     f0103893 <kclock_start+0x6d>
f010384b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0103852:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0103856:	8a 45 ee             	mov    -0x12(%ebp),%al
f0103859:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010385c:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010385d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0103861:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0103866:	99                   	cltd   
f0103867:	f7 fb                	idiv   %ebx
f0103869:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010386f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0103873:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0103878:	99                   	cltd   
f0103879:	f7 fb                	idiv   %ebx
f010387b:	89 c3                	mov    %eax,%ebx
f010387d:	89 c8                	mov    %ecx,%eax
f010387f:	99                   	cltd   
f0103880:	f7 fb                	idiv   %ebx
f0103882:	0f b7 c0             	movzwl %ax,%eax
f0103885:	83 ec 0c             	sub    $0xc,%esp
f0103888:	50                   	push   %eax
f0103889:	e8 b8 01 00 00       	call   f0103a46 <kclock_write_cnt0_LSB_first>
f010388e:	83 c4 10             	add    $0x10,%esp
f0103891:	eb 13                	jmp    f01038a6 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0103893:	6a 35                	push   $0x35
f0103895:	68 6c c4 12 f0       	push   $0xf012c46c
f010389a:	6a 33                	push   $0x33
f010389c:	68 c8 c4 12 f0       	push   $0xf012c4c8
f01038a1:	e8 00 c9 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01038a6:	66 a1 fc c7 17 f0    	mov    0xf017c7fc,%ax
f01038ac:	0f b7 c0             	movzwl %ax,%eax
f01038af:	25 fe ff 00 00       	and    $0xfffe,%eax
f01038b4:	83 ec 0c             	sub    $0xc,%esp
f01038b7:	50                   	push   %eax
f01038b8:	e8 2d 1b 00 00       	call   f01053ea <irq_setmask_8259A>
f01038bd:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01038c0:	90                   	nop
f01038c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01038c4:	c9                   	leave  
f01038c5:	c3                   	ret    

f01038c6 <kclock_stop>:

void
kclock_stop(void)
{
f01038c6:	55                   	push   %ebp
f01038c7:	89 e5                	mov    %esp,%ebp
f01038c9:	83 ec 18             	sub    $0x18,%esp
f01038cc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01038d3:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01038d7:	8a 45 f3             	mov    -0xd(%ebp),%al
f01038da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038dd:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01038de:	83 ec 0c             	sub    $0xc,%esp
f01038e1:	68 ff ff 00 00       	push   $0xffff
f01038e6:	e8 ff 1a 00 00       	call   f01053ea <irq_setmask_8259A>
f01038eb:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01038ee:	90                   	nop
f01038ef:	c9                   	leave  
f01038f0:	c3                   	ret    

f01038f1 <kclock_resume>:

void
kclock_resume(void)
{
f01038f1:	55                   	push   %ebp
f01038f2:	89 e5                	mov    %esp,%ebp
f01038f4:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01038f7:	e8 8c 01 00 00       	call   f0103a88 <kclock_read_cnt0>
f01038fc:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0103900:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0103905:	77 06                	ja     f010390d <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0103907:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010390d:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0103911:	83 e0 01             	and    $0x1,%eax
f0103914:	66 85 c0             	test   %ax,%ax
f0103917:	74 09                	je     f0103922 <kclock_resume+0x31>
		cnt0++;
f0103919:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010391d:	40                   	inc    %eax
f010391e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0103922:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0103929:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010392d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0103930:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103933:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0103934:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0103938:	83 ec 0c             	sub    $0xc,%esp
f010393b:	50                   	push   %eax
f010393c:	e8 05 01 00 00       	call   f0103a46 <kclock_write_cnt0_LSB_first>
f0103941:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0103944:	66 a1 fc c7 17 f0    	mov    0xf017c7fc,%ax
f010394a:	0f b7 c0             	movzwl %ax,%eax
f010394d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0103952:	83 ec 0c             	sub    $0xc,%esp
f0103955:	50                   	push   %eax
f0103956:	e8 8f 1a 00 00       	call   f01053ea <irq_setmask_8259A>
f010395b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010395e:	90                   	nop
f010395f:	c9                   	leave  
f0103960:	c3                   	ret    

f0103961 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0103961:	55                   	push   %ebp
f0103962:	89 e5                	mov    %esp,%ebp
f0103964:	83 ec 28             	sub    $0x28,%esp
f0103967:	8b 45 08             	mov    0x8(%ebp),%eax
f010396a:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010396d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0103974:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0103978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010397b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010397e:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010397f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0103983:	83 ec 0c             	sub    $0xc,%esp
f0103986:	50                   	push   %eax
f0103987:	e8 ba 00 00 00       	call   f0103a46 <kclock_write_cnt0_LSB_first>
f010398c:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010398f:	66 a1 fc c7 17 f0    	mov    0xf017c7fc,%ax
f0103995:	0f b7 c0             	movzwl %ax,%eax
f0103998:	25 fe ff 00 00       	and    $0xfffe,%eax
f010399d:	83 ec 0c             	sub    $0xc,%esp
f01039a0:	50                   	push   %eax
f01039a1:	e8 44 1a 00 00       	call   f01053ea <irq_setmask_8259A>
f01039a6:	83 c4 10             	add    $0x10,%esp

}
f01039a9:	90                   	nop
f01039aa:	c9                   	leave  
f01039ab:	c3                   	ret    

f01039ac <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01039ac:	55                   	push   %ebp
f01039ad:	89 e5                	mov    %esp,%ebp
f01039af:	53                   	push   %ebx
f01039b0:	83 ec 24             	sub    $0x24,%esp
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01039b9:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01039bd:	77 6c                	ja     f0103a2b <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01039bf:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01039c3:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01039c8:	99                   	cltd   
f01039c9:	f7 fb                	idiv   %ebx
f01039cb:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01039d1:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01039d5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01039da:	99                   	cltd   
f01039db:	f7 fb                	idiv   %ebx
f01039dd:	89 c3                	mov    %eax,%ebx
f01039df:	89 c8                	mov    %ecx,%eax
f01039e1:	99                   	cltd   
f01039e2:	f7 fb                	idiv   %ebx
f01039e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01039e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039ea:	25 01 00 00 80       	and    $0x80000001,%eax
f01039ef:	85 c0                	test   %eax,%eax
f01039f1:	79 05                	jns    f01039f8 <kclock_set_quantum+0x4c>
f01039f3:	48                   	dec    %eax
f01039f4:	83 c8 fe             	or     $0xfffffffe,%eax
f01039f7:	40                   	inc    %eax
f01039f8:	83 f8 01             	cmp    $0x1,%eax
f01039fb:	75 03                	jne    f0103a00 <kclock_set_quantum+0x54>
			cnt++;
f01039fd:	ff 45 f4             	incl   -0xc(%ebp)
f0103a00:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0103a07:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0103a0b:	8a 45 ef             	mov    -0x11(%ebp),%al
f0103a0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103a11:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0103a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a15:	0f b7 c0             	movzwl %ax,%eax
f0103a18:	83 ec 0c             	sub    $0xc,%esp
f0103a1b:	50                   	push   %eax
f0103a1c:	e8 25 00 00 00       	call   f0103a46 <kclock_write_cnt0_LSB_first>
f0103a21:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0103a24:	e8 9d fe ff ff       	call   f01038c6 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0103a29:	eb 16                	jmp    f0103a41 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0103a2b:	6a 35                	push   $0x35
f0103a2d:	68 6c c4 12 f0       	push   $0xf012c46c
f0103a32:	68 c9 00 00 00       	push   $0xc9
f0103a37:	68 c8 c4 12 f0       	push   $0xf012c4c8
f0103a3c:	e8 65 c7 ff ff       	call   f01001a6 <_panic>
	}
}
f0103a41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103a44:	c9                   	leave  
f0103a45:	c3                   	ret    

f0103a46 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0103a46:	55                   	push   %ebp
f0103a47:	89 e5                	mov    %esp,%ebp
f0103a49:	83 ec 14             	sub    $0x14,%esp
f0103a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0103a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103a56:	0f b6 c0             	movzbl %al,%eax
f0103a59:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0103a60:	88 45 f6             	mov    %al,-0xa(%ebp)
f0103a63:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103a66:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103a69:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0103a6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103a6d:	66 c1 e8 08          	shr    $0x8,%ax
f0103a71:	0f b6 c0             	movzbl %al,%eax
f0103a74:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0103a7b:	88 45 f7             	mov    %al,-0x9(%ebp)
f0103a7e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0103a81:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0103a84:	ee                   	out    %al,(%dx)
}
f0103a85:	90                   	nop
f0103a86:	c9                   	leave  
f0103a87:	c3                   	ret    

f0103a88 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0103a88:	55                   	push   %ebp
f0103a89:	89 e5                	mov    %esp,%ebp
f0103a8b:	83 ec 20             	sub    $0x20,%esp
f0103a8e:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103a95:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103a98:	89 c2                	mov    %eax,%edx
f0103a9a:	ec                   	in     (%dx),%al
f0103a9b:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0103a9e:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0103aa1:	88 45 ff             	mov    %al,-0x1(%ebp)
f0103aa4:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103aae:	89 c2                	mov    %eax,%edx
f0103ab0:	ec                   	in     (%dx),%al
f0103ab1:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0103ab4:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0103ab7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0103aba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103abe:	c1 e0 08             	shl    $0x8,%eax
f0103ac1:	89 c2                	mov    %eax,%edx
f0103ac3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0103ac7:	09 d0                	or     %edx,%eax
f0103ac9:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0103acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103ad0:	c9                   	leave  
f0103ad1:	c3                   	ret    

f0103ad2 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0103ad2:	55                   	push   %ebp
f0103ad3:	89 e5                	mov    %esp,%ebp
f0103ad5:	83 ec 30             	sub    $0x30,%esp
f0103ad8:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103adf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103ae2:	89 c2                	mov    %eax,%edx
f0103ae4:	ec                   	in     (%dx),%al
f0103ae5:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0103ae8:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0103aeb:	88 45 ff             	mov    %al,-0x1(%ebp)
f0103aee:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0103af5:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103af9:	8a 45 dc             	mov    -0x24(%ebp),%al
f0103afc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103aff:	ee                   	out    %al,(%dx)
f0103b00:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103b07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103b0a:	89 c2                	mov    %eax,%edx
f0103b0c:	ec                   	in     (%dx),%al
f0103b0d:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0103b10:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0103b13:	88 45 f3             	mov    %al,-0xd(%ebp)
f0103b16:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103b1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103b20:	89 c2                	mov    %eax,%edx
f0103b22:	ec                   	in     (%dx),%al
f0103b23:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0103b26:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0103b29:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0103b2c:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0103b30:	c1 e0 08             	shl    $0x8,%eax
f0103b33:	89 c2                	mov    %eax,%edx
f0103b35:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0103b39:	09 d0                	or     %edx,%eax
f0103b3b:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0103b3f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0103b43:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0103b4a:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103b4d:	8a 45 df             	mov    -0x21(%ebp),%al
f0103b50:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0103b53:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0103b54:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0103b57:	c9                   	leave  
f0103b58:	c3                   	ret    

f0103b59 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0103b59:	55                   	push   %ebp
f0103b5a:	89 e5                	mov    %esp,%ebp
f0103b5c:	a1 e8 43 6d f0       	mov    0xf06d43e8,%eax
f0103b61:	85 c0                	test   %eax,%eax
f0103b63:	75 07                	jne    f0103b6c <isSchedMethodRR+0x13>
f0103b65:	b8 01 00 00 00       	mov    $0x1,%eax
f0103b6a:	eb 05                	jmp    f0103b71 <isSchedMethodRR+0x18>
f0103b6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0103b71:	5d                   	pop    %ebp
f0103b72:	c3                   	ret    

f0103b73 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0103b73:	55                   	push   %ebp
f0103b74:	89 e5                	mov    %esp,%ebp
f0103b76:	a1 e8 43 6d f0       	mov    0xf06d43e8,%eax
f0103b7b:	83 f8 01             	cmp    $0x1,%eax
f0103b7e:	75 07                	jne    f0103b87 <isSchedMethodMLFQ+0x14>
f0103b80:	b8 01 00 00 00       	mov    $0x1,%eax
f0103b85:	eb 05                	jmp    f0103b8c <isSchedMethodMLFQ+0x19>
f0103b87:	b8 00 00 00 00       	mov    $0x0,%eax
f0103b8c:	5d                   	pop    %ebp
f0103b8d:	c3                   	ret    

f0103b8e <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0103b8e:	55                   	push   %ebp
f0103b8f:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0103b91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b95:	74 1d                	je     f0103bb4 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0103b97:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ba3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103baa:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bad:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0103bb4:	90                   	nop
f0103bb5:	5d                   	pop    %ebp
f0103bb6:	c3                   	ret    

f0103bb7 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0103bb7:	55                   	push   %ebp
f0103bb8:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0103bba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103bbe:	74 08                	je     f0103bc8 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0103bc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bc3:	8b 40 0c             	mov    0xc(%eax),%eax
f0103bc6:	eb 05                	jmp    f0103bcd <queue_size+0x16>
	}
	else
	{
		return 0;
f0103bc8:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0103bcd:	5d                   	pop    %ebp
f0103bce:	c3                   	ret    

f0103bcf <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0103bcf:	55                   	push   %ebp
f0103bd0:	89 e5                	mov    %esp,%ebp
f0103bd2:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0103bd5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103bd9:	74 66                	je     f0103c41 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f0103bdb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103bdf:	75 14                	jne    f0103bf5 <enqueue+0x26>
f0103be1:	83 ec 04             	sub    $0x4,%esp
f0103be4:	68 dc c4 12 f0       	push   $0xf012c4dc
f0103be9:	6a 2f                	push   $0x2f
f0103beb:	68 ff c4 12 f0       	push   $0xf012c4ff
f0103bf0:	e8 b1 c5 ff ff       	call   f01001a6 <_panic>
f0103bf5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf8:	8b 10                	mov    (%eax),%edx
f0103bfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bfd:	89 50 44             	mov    %edx,0x44(%eax)
f0103c00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c03:	8b 40 44             	mov    0x44(%eax),%eax
f0103c06:	85 c0                	test   %eax,%eax
f0103c08:	74 0d                	je     f0103c17 <enqueue+0x48>
f0103c0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c0d:	8b 00                	mov    (%eax),%eax
f0103c0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103c12:	89 50 48             	mov    %edx,0x48(%eax)
f0103c15:	eb 09                	jmp    f0103c20 <enqueue+0x51>
f0103c17:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103c1d:	89 50 04             	mov    %edx,0x4(%eax)
f0103c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c23:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103c26:	89 10                	mov    %edx,(%eax)
f0103c28:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c2b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0103c32:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c35:	8b 40 0c             	mov    0xc(%eax),%eax
f0103c38:	8d 50 01             	lea    0x1(%eax),%edx
f0103c3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c3e:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0103c41:	90                   	nop
f0103c42:	c9                   	leave  
f0103c43:	c3                   	ret    

f0103c44 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0103c44:	55                   	push   %ebp
f0103c45:	89 e5                	mov    %esp,%ebp
f0103c47:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f0103c4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c4d:	8b 40 04             	mov    0x4(%eax),%eax
f0103c50:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0103c53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103c57:	0f 84 8a 00 00 00    	je     f0103ce7 <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f0103c5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103c61:	75 14                	jne    f0103c77 <dequeue+0x33>
f0103c63:	83 ec 04             	sub    $0x4,%esp
f0103c66:	68 10 c5 12 f0       	push   $0xf012c510
f0103c6b:	6a 38                	push   $0x38
f0103c6d:	68 ff c4 12 f0       	push   $0xf012c4ff
f0103c72:	e8 2f c5 ff ff       	call   f01001a6 <_panic>
f0103c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c7a:	8b 40 44             	mov    0x44(%eax),%eax
f0103c7d:	85 c0                	test   %eax,%eax
f0103c7f:	74 11                	je     f0103c92 <dequeue+0x4e>
f0103c81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c84:	8b 40 44             	mov    0x44(%eax),%eax
f0103c87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c8a:	8b 52 48             	mov    0x48(%edx),%edx
f0103c8d:	89 50 48             	mov    %edx,0x48(%eax)
f0103c90:	eb 0c                	jmp    f0103c9e <dequeue+0x5a>
f0103c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c95:	8b 50 48             	mov    0x48(%eax),%edx
f0103c98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c9b:	89 50 04             	mov    %edx,0x4(%eax)
f0103c9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ca1:	8b 40 48             	mov    0x48(%eax),%eax
f0103ca4:	85 c0                	test   %eax,%eax
f0103ca6:	74 11                	je     f0103cb9 <dequeue+0x75>
f0103ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cab:	8b 40 48             	mov    0x48(%eax),%eax
f0103cae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cb1:	8b 52 44             	mov    0x44(%edx),%edx
f0103cb4:	89 50 44             	mov    %edx,0x44(%eax)
f0103cb7:	eb 0b                	jmp    f0103cc4 <dequeue+0x80>
f0103cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cbc:	8b 50 44             	mov    0x44(%eax),%edx
f0103cbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cc2:	89 10                	mov    %edx,(%eax)
f0103cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cc7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0103cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cd1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0103cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cdb:	8b 40 0c             	mov    0xc(%eax),%eax
f0103cde:	8d 50 ff             	lea    -0x1(%eax),%edx
f0103ce1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce4:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0103ce7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103cea:	c9                   	leave  
f0103ceb:	c3                   	ret    

f0103cec <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0103cec:	55                   	push   %ebp
f0103ced:	89 e5                	mov    %esp,%ebp
f0103cef:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f0103cf2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103cf6:	0f 84 8a 00 00 00    	je     f0103d86 <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f0103cfc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103d00:	75 14                	jne    f0103d16 <remove_from_queue+0x2a>
f0103d02:	83 ec 04             	sub    $0x4,%esp
f0103d05:	68 10 c5 12 f0       	push   $0xf012c510
f0103d0a:	6a 41                	push   $0x41
f0103d0c:	68 ff c4 12 f0       	push   $0xf012c4ff
f0103d11:	e8 90 c4 ff ff       	call   f01001a6 <_panic>
f0103d16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d19:	8b 40 44             	mov    0x44(%eax),%eax
f0103d1c:	85 c0                	test   %eax,%eax
f0103d1e:	74 11                	je     f0103d31 <remove_from_queue+0x45>
f0103d20:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d23:	8b 40 44             	mov    0x44(%eax),%eax
f0103d26:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d29:	8b 52 48             	mov    0x48(%edx),%edx
f0103d2c:	89 50 48             	mov    %edx,0x48(%eax)
f0103d2f:	eb 0c                	jmp    f0103d3d <remove_from_queue+0x51>
f0103d31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d34:	8b 50 48             	mov    0x48(%eax),%edx
f0103d37:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d3a:	89 50 04             	mov    %edx,0x4(%eax)
f0103d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d40:	8b 40 48             	mov    0x48(%eax),%eax
f0103d43:	85 c0                	test   %eax,%eax
f0103d45:	74 11                	je     f0103d58 <remove_from_queue+0x6c>
f0103d47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d4a:	8b 40 48             	mov    0x48(%eax),%eax
f0103d4d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103d50:	8b 52 44             	mov    0x44(%edx),%edx
f0103d53:	89 50 44             	mov    %edx,0x44(%eax)
f0103d56:	eb 0b                	jmp    f0103d63 <remove_from_queue+0x77>
f0103d58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d5b:	8b 50 44             	mov    0x44(%eax),%edx
f0103d5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d61:	89 10                	mov    %edx,(%eax)
f0103d63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d66:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0103d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d70:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0103d77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d7a:	8b 40 0c             	mov    0xc(%eax),%eax
f0103d7d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0103d80:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d83:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0103d86:	90                   	nop
f0103d87:	c9                   	leave  
f0103d88:	c3                   	ret    

f0103d89 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0103d89:	55                   	push   %ebp
f0103d8a:	89 e5                	mov    %esp,%ebp
f0103d8c:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0103d8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0103d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d99:	8b 00                	mov    (%eax),%eax
f0103d9b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d9e:	eb 19                	jmp    f0103db9 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0103da0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103da3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103da6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103da9:	75 05                	jne    f0103db0 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0103dab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103dae:	eb 37                	jmp    f0103de7 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0103db0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103db3:	8b 40 08             	mov    0x8(%eax),%eax
f0103db6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103db9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dbd:	74 08                	je     f0103dc7 <find_env_in_queue+0x3e>
f0103dbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103dc2:	8b 40 44             	mov    0x44(%eax),%eax
f0103dc5:	eb 05                	jmp    f0103dcc <find_env_in_queue+0x43>
f0103dc7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dcc:	8b 55 08             	mov    0x8(%ebp),%edx
f0103dcf:	89 42 08             	mov    %eax,0x8(%edx)
f0103dd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0103dd8:	85 c0                	test   %eax,%eax
f0103dda:	75 c4                	jne    f0103da0 <find_env_in_queue+0x17>
f0103ddc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103de0:	75 be                	jne    f0103da0 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0103de2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103de7:	c9                   	leave  
f0103de8:	c3                   	ret    

f0103de9 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f0103de9:	55                   	push   %ebp
f0103dea:	89 e5                	mov    %esp,%ebp
f0103dec:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0103def:	83 ec 04             	sub    $0x4,%esp
f0103df2:	68 30 c5 12 f0       	push   $0xf012c530
f0103df7:	6a 58                	push   $0x58
f0103df9:	68 ff c4 12 f0       	push   $0xf012c4ff
f0103dfe:	e8 a3 c3 ff ff       	call   f01001a6 <_panic>

f0103e03 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0103e03:	55                   	push   %ebp
f0103e04:	89 e5                	mov    %esp,%ebp
f0103e06:	83 ec 18             	sub    $0x18,%esp
	chk1();
f0103e09:	e8 f3 4a 02 00       	call   f0128901 <chk1>
	scheduler_status = SCH_STARTED;
f0103e0e:	c7 05 f4 43 6d f0 01 	movl   $0x1,0xf06d43f4
f0103e15:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0103e18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0103e1f:	a1 e8 43 6d f0       	mov    0xf06d43e8,%eax
f0103e24:	85 c0                	test   %eax,%eax
f0103e26:	75 48                	jne    f0103e70 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0103e28:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0103e2d:	85 c0                	test   %eax,%eax
f0103e2f:	74 16                	je     f0103e47 <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0103e31:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0103e36:	83 ec 08             	sub    $0x8,%esp
f0103e39:	50                   	push   %eax
f0103e3a:	68 4c c0 66 f0       	push   $0xf066c04c
f0103e3f:	e8 8b fd ff ff       	call   f0103bcf <enqueue>
f0103e44:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0103e47:	83 ec 0c             	sub    $0xc,%esp
f0103e4a:	68 4c c0 66 f0       	push   $0xf066c04c
f0103e4f:	e8 f0 fd ff ff       	call   f0103c44 <dequeue>
f0103e54:	83 c4 10             	add    $0x10,%esp
f0103e57:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0103e5a:	a0 c8 43 6d f0       	mov    0xf06d43c8,%al
f0103e5f:	0f b6 c0             	movzbl %al,%eax
f0103e62:	83 ec 0c             	sub    $0xc,%esp
f0103e65:	50                   	push   %eax
f0103e66:	e8 41 fb ff ff       	call   f01039ac <kclock_set_quantum>
f0103e6b:	83 c4 10             	add    $0x10,%esp
f0103e6e:	eb 12                	jmp    f0103e82 <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0103e70:	a1 e8 43 6d f0       	mov    0xf06d43e8,%eax
f0103e75:	83 f8 01             	cmp    $0x1,%eax
f0103e78:	75 08                	jne    f0103e82 <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f0103e7a:	e8 6a ff ff ff       	call   f0103de9 <fos_scheduler_MLFQ>
f0103e7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0103e82:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0103e87:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0103e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e8d:	a3 74 46 64 f0       	mov    %eax,0xf0644674
	chk2(next_env) ;
f0103e92:	83 ec 0c             	sub    $0xc,%esp
f0103e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e98:	e8 a1 4a 02 00       	call   f012893e <chk2>
f0103e9d:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0103ea0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ea3:	a3 74 46 64 f0       	mov    %eax,0xf0644674

	//sched_print_all();

	if(next_env != NULL)
f0103ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103eac:	74 0b                	je     f0103eb9 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0103eae:	83 ec 0c             	sub    $0xc,%esp
f0103eb1:	ff 75 f4             	pushl  -0xc(%ebp)
f0103eb4:	e8 76 46 00 00       	call   f010852f <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0103eb9:	c7 05 74 46 64 f0 00 	movl   $0x0,0xf0644674
f0103ec0:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0103ec3:	a1 48 44 6d f0       	mov    0xf06d4448,%eax
f0103ec8:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0103ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ece:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0103ed1:	c7 05 f4 43 6d f0 00 	movl   $0x0,0xf06d43f4
f0103ed8:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0103edb:	83 ec 0c             	sub    $0xc,%esp
f0103ede:	6a 00                	push   $0x0
f0103ee0:	e8 6e cd ff ff       	call   f0100c53 <run_command_prompt>
f0103ee5:	83 c4 10             	add    $0x10,%esp
f0103ee8:	eb f1                	jmp    f0103edb <fos_scheduler+0xd8>

f0103eea <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0103eea:	55                   	push   %ebp
f0103eeb:	89 e5                	mov    %esp,%ebp
f0103eed:	83 ec 18             	sub    $0x18,%esp
f0103ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef3:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f0103ef6:	c7 05 f4 43 6d f0 00 	movl   $0x0,0xf06d43f4
f0103efd:	00 00 00 
	scheduler_method = SCH_RR;
f0103f00:	c7 05 e8 43 6d f0 00 	movl   $0x0,0xf06d43e8
f0103f07:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0103f0a:	c6 05 1c 44 6d f0 01 	movb   $0x1,0xf06d441c
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0103f11:	8a 45 f4             	mov    -0xc(%ebp),%al
f0103f14:	a2 c8 43 6d f0       	mov    %al,0xf06d43c8
	kclock_set_quantum(quantums[0]);
f0103f19:	a0 c8 43 6d f0       	mov    0xf06d43c8,%al
f0103f1e:	0f b6 c0             	movzbl %al,%eax
f0103f21:	83 ec 0c             	sub    $0xc,%esp
f0103f24:	50                   	push   %eax
f0103f25:	e8 82 fa ff ff       	call   f01039ac <kclock_set_quantum>
f0103f2a:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0103f2d:	83 ec 0c             	sub    $0xc,%esp
f0103f30:	68 4c c0 66 f0       	push   $0xf066c04c
f0103f35:	e8 54 fc ff ff       	call   f0103b8e <init_queue>
f0103f3a:	83 c4 10             	add    $0x10,%esp
}
f0103f3d:	90                   	nop
f0103f3e:	c9                   	leave  
f0103f3f:	c3                   	ret    

f0103f40 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0103f40:	55                   	push   %ebp
f0103f41:	89 e5                	mov    %esp,%ebp
f0103f43:	83 ec 18             	sub    $0x18,%esp
f0103f46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f49:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f0103f4c:	83 ec 04             	sub    $0x4,%esp
f0103f4f:	68 64 c5 12 f0       	push   $0xf012c564
f0103f54:	68 cc 00 00 00       	push   $0xcc
f0103f59:	68 ff c4 12 f0       	push   $0xf012c4ff
f0103f5e:	e8 43 c2 ff ff       	call   f01001a6 <_panic>

f0103f63 <sched_init>:
#endif
}


void sched_init()
{
f0103f63:	55                   	push   %ebp
f0103f64:	89 e5                	mov    %esp,%ebp
f0103f66:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0103f69:	c7 05 b4 1f 6d f0 00 	movl   $0x0,0xf06d1fb4
f0103f70:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0103f73:	83 ec 0c             	sub    $0xc,%esp
f0103f76:	6a 0a                	push   $0xa
f0103f78:	e8 6d ff ff ff       	call   f0103eea <sched_init_RR>
f0103f7d:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0103f80:	83 ec 0c             	sub    $0xc,%esp
f0103f83:	68 d8 43 6d f0       	push   $0xf06d43d8
f0103f88:	e8 01 fc ff ff       	call   f0103b8e <init_queue>
f0103f8d:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0103f90:	83 ec 0c             	sub    $0xc,%esp
f0103f93:	68 a4 1f 6d f0       	push   $0xf06d1fa4
f0103f98:	e8 f1 fb ff ff       	call   f0103b8e <init_queue>
f0103f9d:	83 c4 10             	add    $0x10,%esp
}
f0103fa0:	90                   	nop
f0103fa1:	c9                   	leave  
f0103fa2:	c3                   	ret    

f0103fa3 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0103fa3:	55                   	push   %ebp
f0103fa4:	89 e5                	mov    %esp,%ebp
f0103fa6:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0103fa9:	83 ec 0c             	sub    $0xc,%esp
f0103fac:	68 4c c0 66 f0       	push   $0xf066c04c
f0103fb1:	e8 58 2c 00 00       	call   f0106c0e <kfree>
f0103fb6:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f0103fb9:	83 ec 0c             	sub    $0xc,%esp
f0103fbc:	68 c8 43 6d f0       	push   $0xf06d43c8
f0103fc1:	e8 48 2c 00 00       	call   f0106c0e <kfree>
f0103fc6:	83 c4 10             	add    $0x10,%esp
}
f0103fc9:	90                   	nop
f0103fca:	c9                   	leave  
f0103fcb:	c3                   	ret    

f0103fcc <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0103fcc:	55                   	push   %ebp
f0103fcd:	89 e5                	mov    %esp,%ebp
f0103fcf:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0103fd2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103fd6:	74 1d                	je     f0103ff5 <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f0103fd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fdb:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0103fe2:	83 ec 08             	sub    $0x8,%esp
f0103fe5:	ff 75 08             	pushl  0x8(%ebp)
f0103fe8:	68 4c c0 66 f0       	push   $0xf066c04c
f0103fed:	e8 dd fb ff ff       	call   f0103bcf <enqueue>
f0103ff2:	83 c4 10             	add    $0x10,%esp
	}
}
f0103ff5:	90                   	nop
f0103ff6:	c9                   	leave  
f0103ff7:	c3                   	ret    

f0103ff8 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0103ff8:	55                   	push   %ebp
f0103ff9:	89 e5                	mov    %esp,%ebp
f0103ffb:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f0103ffe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104002:	0f 84 02 01 00 00    	je     f010410a <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104008:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010400f:	e9 e5 00 00 00       	jmp    f01040f9 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104014:	8b 45 08             	mov    0x8(%ebp),%eax
f0104017:	8b 40 4c             	mov    0x4c(%eax),%eax
f010401a:	89 c2                	mov    %eax,%edx
f010401c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010401f:	c1 e0 04             	shl    $0x4,%eax
f0104022:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104027:	52                   	push   %edx
f0104028:	50                   	push   %eax
f0104029:	e8 5b fd ff ff       	call   f0103d89 <find_env_in_queue>
f010402e:	83 c4 08             	add    $0x8,%esp
f0104031:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0104034:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104038:	0f 84 b8 00 00 00    	je     f01040f6 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f010403e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104042:	75 17                	jne    f010405b <sched_remove_ready+0x63>
f0104044:	83 ec 04             	sub    $0x4,%esp
f0104047:	68 10 c5 12 f0       	push   $0xf012c510
f010404c:	68 f5 00 00 00       	push   $0xf5
f0104051:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104056:	e8 4b c1 ff ff       	call   f01001a6 <_panic>
f010405b:	8b 45 08             	mov    0x8(%ebp),%eax
f010405e:	8b 40 44             	mov    0x44(%eax),%eax
f0104061:	85 c0                	test   %eax,%eax
f0104063:	74 11                	je     f0104076 <sched_remove_ready+0x7e>
f0104065:	8b 45 08             	mov    0x8(%ebp),%eax
f0104068:	8b 40 44             	mov    0x44(%eax),%eax
f010406b:	8b 55 08             	mov    0x8(%ebp),%edx
f010406e:	8b 52 48             	mov    0x48(%edx),%edx
f0104071:	89 50 48             	mov    %edx,0x48(%eax)
f0104074:	eb 14                	jmp    f010408a <sched_remove_ready+0x92>
f0104076:	8b 45 08             	mov    0x8(%ebp),%eax
f0104079:	8b 40 48             	mov    0x48(%eax),%eax
f010407c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010407f:	c1 e2 04             	shl    $0x4,%edx
f0104082:	81 c2 50 c0 66 f0    	add    $0xf066c050,%edx
f0104088:	89 02                	mov    %eax,(%edx)
f010408a:	8b 45 08             	mov    0x8(%ebp),%eax
f010408d:	8b 40 48             	mov    0x48(%eax),%eax
f0104090:	85 c0                	test   %eax,%eax
f0104092:	74 11                	je     f01040a5 <sched_remove_ready+0xad>
f0104094:	8b 45 08             	mov    0x8(%ebp),%eax
f0104097:	8b 40 48             	mov    0x48(%eax),%eax
f010409a:	8b 55 08             	mov    0x8(%ebp),%edx
f010409d:	8b 52 44             	mov    0x44(%edx),%edx
f01040a0:	89 50 44             	mov    %edx,0x44(%eax)
f01040a3:	eb 14                	jmp    f01040b9 <sched_remove_ready+0xc1>
f01040a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040a8:	8b 40 44             	mov    0x44(%eax),%eax
f01040ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040ae:	c1 e2 04             	shl    $0x4,%edx
f01040b1:	81 c2 4c c0 66 f0    	add    $0xf066c04c,%edx
f01040b7:	89 02                	mov    %eax,(%edx)
f01040b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01040bc:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01040cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01040d0:	c1 e0 04             	shl    $0x4,%eax
f01040d3:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f01040d8:	8b 00                	mov    (%eax),%eax
f01040da:	8d 50 ff             	lea    -0x1(%eax),%edx
f01040dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01040e0:	c1 e0 04             	shl    $0x4,%eax
f01040e3:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f01040e8:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01040ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ed:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01040f4:	eb 14                	jmp    f010410a <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01040f6:	ff 45 f4             	incl   -0xc(%ebp)
f01040f9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01040fe:	0f b6 c0             	movzbl %al,%eax
f0104101:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104104:	0f 8f 0a ff ff ff    	jg     f0104014 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f010410a:	c9                   	leave  
f010410b:	c3                   	ret    

f010410c <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f010410c:	55                   	push   %ebp
f010410d:	89 e5                	mov    %esp,%ebp
f010410f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104112:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104116:	74 1d                	je     f0104135 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104118:	8b 45 08             	mov    0x8(%ebp),%eax
f010411b:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104122:	83 ec 08             	sub    $0x8,%esp
f0104125:	ff 75 08             	pushl  0x8(%ebp)
f0104128:	68 d8 43 6d f0       	push   $0xf06d43d8
f010412d:	e8 9d fa ff ff       	call   f0103bcf <enqueue>
f0104132:	83 c4 10             	add    $0x10,%esp
	}
}
f0104135:	90                   	nop
f0104136:	c9                   	leave  
f0104137:	c3                   	ret    

f0104138 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104138:	55                   	push   %ebp
f0104139:	89 e5                	mov    %esp,%ebp
f010413b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010413e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104142:	0f 84 92 00 00 00    	je     f01041da <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104148:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010414c:	75 17                	jne    f0104165 <sched_remove_new+0x2d>
f010414e:	83 ec 04             	sub    $0x4,%esp
f0104151:	68 10 c5 12 f0       	push   $0xf012c510
f0104156:	68 09 01 00 00       	push   $0x109
f010415b:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104160:	e8 41 c0 ff ff       	call   f01001a6 <_panic>
f0104165:	8b 45 08             	mov    0x8(%ebp),%eax
f0104168:	8b 40 44             	mov    0x44(%eax),%eax
f010416b:	85 c0                	test   %eax,%eax
f010416d:	74 11                	je     f0104180 <sched_remove_new+0x48>
f010416f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104172:	8b 40 44             	mov    0x44(%eax),%eax
f0104175:	8b 55 08             	mov    0x8(%ebp),%edx
f0104178:	8b 52 48             	mov    0x48(%edx),%edx
f010417b:	89 50 48             	mov    %edx,0x48(%eax)
f010417e:	eb 0b                	jmp    f010418b <sched_remove_new+0x53>
f0104180:	8b 45 08             	mov    0x8(%ebp),%eax
f0104183:	8b 40 48             	mov    0x48(%eax),%eax
f0104186:	a3 dc 43 6d f0       	mov    %eax,0xf06d43dc
f010418b:	8b 45 08             	mov    0x8(%ebp),%eax
f010418e:	8b 40 48             	mov    0x48(%eax),%eax
f0104191:	85 c0                	test   %eax,%eax
f0104193:	74 11                	je     f01041a6 <sched_remove_new+0x6e>
f0104195:	8b 45 08             	mov    0x8(%ebp),%eax
f0104198:	8b 40 48             	mov    0x48(%eax),%eax
f010419b:	8b 55 08             	mov    0x8(%ebp),%edx
f010419e:	8b 52 44             	mov    0x44(%edx),%edx
f01041a1:	89 50 44             	mov    %edx,0x44(%eax)
f01041a4:	eb 0b                	jmp    f01041b1 <sched_remove_new+0x79>
f01041a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01041a9:	8b 40 44             	mov    0x44(%eax),%eax
f01041ac:	a3 d8 43 6d f0       	mov    %eax,0xf06d43d8
f01041b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01041b4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01041bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01041be:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01041c5:	a1 e4 43 6d f0       	mov    0xf06d43e4,%eax
f01041ca:	48                   	dec    %eax
f01041cb:	a3 e4 43 6d f0       	mov    %eax,0xf06d43e4
		env->env_status = ENV_UNKNOWN;
f01041d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01041da:	90                   	nop
f01041db:	c9                   	leave  
f01041dc:	c3                   	ret    

f01041dd <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01041dd:	55                   	push   %ebp
f01041de:	89 e5                	mov    %esp,%ebp
f01041e0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01041e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01041e7:	74 34                	je     f010421d <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01041e9:	e8 34 86 00 00       	call   f010c822 <isBufferingEnabled>
f01041ee:	84 c0                	test   %al,%al
f01041f0:	74 0e                	je     f0104200 <sched_insert_exit+0x23>
f01041f2:	83 ec 0c             	sub    $0xc,%esp
f01041f5:	ff 75 08             	pushl  0x8(%ebp)
f01041f8:	e8 9b 57 00 00       	call   f0109998 <cleanup_buffers>
f01041fd:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104200:	8b 45 08             	mov    0x8(%ebp),%eax
f0104203:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f010420a:	83 ec 08             	sub    $0x8,%esp
f010420d:	ff 75 08             	pushl  0x8(%ebp)
f0104210:	68 a4 1f 6d f0       	push   $0xf06d1fa4
f0104215:	e8 b5 f9 ff ff       	call   f0103bcf <enqueue>
f010421a:	83 c4 10             	add    $0x10,%esp
	}
}
f010421d:	90                   	nop
f010421e:	c9                   	leave  
f010421f:	c3                   	ret    

f0104220 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104220:	55                   	push   %ebp
f0104221:	89 e5                	mov    %esp,%ebp
f0104223:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104226:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010422a:	0f 84 92 00 00 00    	je     f01042c2 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104230:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104234:	75 17                	jne    f010424d <sched_remove_exit+0x2d>
f0104236:	83 ec 04             	sub    $0x4,%esp
f0104239:	68 10 c5 12 f0       	push   $0xf012c510
f010423e:	68 1b 01 00 00       	push   $0x11b
f0104243:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104248:	e8 59 bf ff ff       	call   f01001a6 <_panic>
f010424d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104250:	8b 40 44             	mov    0x44(%eax),%eax
f0104253:	85 c0                	test   %eax,%eax
f0104255:	74 11                	je     f0104268 <sched_remove_exit+0x48>
f0104257:	8b 45 08             	mov    0x8(%ebp),%eax
f010425a:	8b 40 44             	mov    0x44(%eax),%eax
f010425d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104260:	8b 52 48             	mov    0x48(%edx),%edx
f0104263:	89 50 48             	mov    %edx,0x48(%eax)
f0104266:	eb 0b                	jmp    f0104273 <sched_remove_exit+0x53>
f0104268:	8b 45 08             	mov    0x8(%ebp),%eax
f010426b:	8b 40 48             	mov    0x48(%eax),%eax
f010426e:	a3 a8 1f 6d f0       	mov    %eax,0xf06d1fa8
f0104273:	8b 45 08             	mov    0x8(%ebp),%eax
f0104276:	8b 40 48             	mov    0x48(%eax),%eax
f0104279:	85 c0                	test   %eax,%eax
f010427b:	74 11                	je     f010428e <sched_remove_exit+0x6e>
f010427d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104280:	8b 40 48             	mov    0x48(%eax),%eax
f0104283:	8b 55 08             	mov    0x8(%ebp),%edx
f0104286:	8b 52 44             	mov    0x44(%edx),%edx
f0104289:	89 50 44             	mov    %edx,0x44(%eax)
f010428c:	eb 0b                	jmp    f0104299 <sched_remove_exit+0x79>
f010428e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104291:	8b 40 44             	mov    0x44(%eax),%eax
f0104294:	a3 a4 1f 6d f0       	mov    %eax,0xf06d1fa4
f0104299:	8b 45 08             	mov    0x8(%ebp),%eax
f010429c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01042a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01042ad:	a1 b0 1f 6d f0       	mov    0xf06d1fb0,%eax
f01042b2:	48                   	dec    %eax
f01042b3:	a3 b0 1f 6d f0       	mov    %eax,0xf06d1fb0
		env->env_status = ENV_UNKNOWN;
f01042b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01042bb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01042c2:	90                   	nop
f01042c3:	c9                   	leave  
f01042c4:	c3                   	ret    

f01042c5 <sched_print_all>:

void sched_print_all()
{
f01042c5:	55                   	push   %ebp
f01042c6:	89 e5                	mov    %esp,%ebp
f01042c8:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01042cb:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f01042d0:	85 c0                	test   %eax,%eax
f01042d2:	74 6c                	je     f0104340 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01042d4:	83 ec 0c             	sub    $0xc,%esp
f01042d7:	68 90 c5 12 f0       	push   $0xf012c590
f01042dc:	e8 4c c9 ff ff       	call   f0100c2d <cprintf>
f01042e1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01042e4:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f01042e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01042ec:	eb 29                	jmp    f0104317 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01042ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042f1:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01042f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042fa:	8b 40 4c             	mov    0x4c(%eax),%eax
f01042fd:	83 ec 04             	sub    $0x4,%esp
f0104300:	52                   	push   %edx
f0104301:	50                   	push   %eax
f0104302:	68 b2 c5 12 f0       	push   $0xf012c5b2
f0104307:	e8 21 c9 ff ff       	call   f0100c2d <cprintf>
f010430c:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010430f:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104314:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104317:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010431b:	74 08                	je     f0104325 <sched_print_all+0x60>
f010431d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104320:	8b 40 44             	mov    0x44(%eax),%eax
f0104323:	eb 05                	jmp    f010432a <sched_print_all+0x65>
f0104325:	b8 00 00 00 00       	mov    $0x0,%eax
f010432a:	a3 e0 43 6d f0       	mov    %eax,0xf06d43e0
f010432f:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104334:	85 c0                	test   %eax,%eax
f0104336:	75 b6                	jne    f01042ee <sched_print_all+0x29>
f0104338:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010433c:	75 b0                	jne    f01042ee <sched_print_all+0x29>
f010433e:	eb 10                	jmp    f0104350 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104340:	83 ec 0c             	sub    $0xc,%esp
f0104343:	68 bc c5 12 f0       	push   $0xf012c5bc
f0104348:	e8 e0 c8 ff ff       	call   f0100c2d <cprintf>
f010434d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104350:	83 ec 0c             	sub    $0xc,%esp
f0104353:	68 d8 c5 12 f0       	push   $0xf012c5d8
f0104358:	e8 d0 c8 ff ff       	call   f0100c2d <cprintf>
f010435d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104360:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104367:	e9 cb 00 00 00       	jmp    f0104437 <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010436c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010436f:	c1 e0 04             	shl    $0x4,%eax
f0104372:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104377:	8b 00                	mov    (%eax),%eax
f0104379:	85 c0                	test   %eax,%eax
f010437b:	0f 84 90 00 00 00    	je     f0104411 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104381:	83 ec 08             	sub    $0x8,%esp
f0104384:	ff 75 f0             	pushl  -0x10(%ebp)
f0104387:	68 0c c6 12 f0       	push   $0xf012c60c
f010438c:	e8 9c c8 ff ff       	call   f0100c2d <cprintf>
f0104391:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104394:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104397:	c1 e0 04             	shl    $0x4,%eax
f010439a:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f010439f:	8b 00                	mov    (%eax),%eax
f01043a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043a4:	eb 31                	jmp    f01043d7 <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01043a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043a9:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01043af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043b2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01043b5:	83 ec 04             	sub    $0x4,%esp
f01043b8:	52                   	push   %edx
f01043b9:	50                   	push   %eax
f01043ba:	68 b2 c5 12 f0       	push   $0xf012c5b2
f01043bf:	e8 69 c8 ff ff       	call   f0100c2d <cprintf>
f01043c4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01043c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043ca:	c1 e0 04             	shl    $0x4,%eax
f01043cd:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f01043d2:	8b 00                	mov    (%eax),%eax
f01043d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01043db:	74 08                	je     f01043e5 <sched_print_all+0x120>
f01043dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043e0:	8b 40 44             	mov    0x44(%eax),%eax
f01043e3:	eb 05                	jmp    f01043ea <sched_print_all+0x125>
f01043e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01043ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01043ed:	c1 e2 04             	shl    $0x4,%edx
f01043f0:	81 c2 54 c0 66 f0    	add    $0xf066c054,%edx
f01043f6:	89 02                	mov    %eax,(%edx)
f01043f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043fb:	c1 e0 04             	shl    $0x4,%eax
f01043fe:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104403:	8b 00                	mov    (%eax),%eax
f0104405:	85 c0                	test   %eax,%eax
f0104407:	75 9d                	jne    f01043a6 <sched_print_all+0xe1>
f0104409:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010440d:	75 97                	jne    f01043a6 <sched_print_all+0xe1>
f010440f:	eb 13                	jmp    f0104424 <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104411:	83 ec 08             	sub    $0x8,%esp
f0104414:	ff 75 f0             	pushl  -0x10(%ebp)
f0104417:	68 34 c6 12 f0       	push   $0xf012c634
f010441c:	e8 0c c8 ff ff       	call   f0100c2d <cprintf>
f0104421:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104424:	83 ec 0c             	sub    $0xc,%esp
f0104427:	68 d8 c5 12 f0       	push   $0xf012c5d8
f010442c:	e8 fc c7 ff ff       	call   f0100c2d <cprintf>
f0104431:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104434:	ff 45 f0             	incl   -0x10(%ebp)
f0104437:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f010443c:	0f b6 c0             	movzbl %al,%eax
f010443f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104442:	0f 8f 24 ff ff ff    	jg     f010436c <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104448:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f010444d:	85 c0                	test   %eax,%eax
f010444f:	74 6c                	je     f01044bd <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104451:	83 ec 0c             	sub    $0xc,%esp
f0104454:	68 58 c6 12 f0       	push   $0xf012c658
f0104459:	e8 cf c7 ff ff       	call   f0100c2d <cprintf>
f010445e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104461:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f0104466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104469:	eb 29                	jmp    f0104494 <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f010446b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104474:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104477:	8b 40 4c             	mov    0x4c(%eax),%eax
f010447a:	83 ec 04             	sub    $0x4,%esp
f010447d:	52                   	push   %edx
f010447e:	50                   	push   %eax
f010447f:	68 b2 c5 12 f0       	push   $0xf012c5b2
f0104484:	e8 a4 c7 ff ff       	call   f0100c2d <cprintf>
f0104489:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010448c:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f0104491:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104494:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104498:	74 08                	je     f01044a2 <sched_print_all+0x1dd>
f010449a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010449d:	8b 40 44             	mov    0x44(%eax),%eax
f01044a0:	eb 05                	jmp    f01044a7 <sched_print_all+0x1e2>
f01044a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01044a7:	a3 ac 1f 6d f0       	mov    %eax,0xf06d1fac
f01044ac:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f01044b1:	85 c0                	test   %eax,%eax
f01044b3:	75 b6                	jne    f010446b <sched_print_all+0x1a6>
f01044b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044b9:	75 b0                	jne    f010446b <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f01044bb:	eb 10                	jmp    f01044cd <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01044bd:	83 ec 0c             	sub    $0xc,%esp
f01044c0:	68 7a c6 12 f0       	push   $0xf012c67a
f01044c5:	e8 63 c7 ff ff       	call   f0100c2d <cprintf>
f01044ca:	83 c4 10             	add    $0x10,%esp
	}
}
f01044cd:	90                   	nop
f01044ce:	c9                   	leave  
f01044cf:	c3                   	ret    

f01044d0 <sched_run_all>:

void sched_run_all()
{
f01044d0:	55                   	push   %ebp
f01044d1:	89 e5                	mov    %esp,%ebp
f01044d3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01044d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01044dd:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f01044e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01044e5:	eb 24                	jmp    f010450b <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f01044e7:	83 ec 0c             	sub    $0xc,%esp
f01044ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01044ed:	e8 46 fc ff ff       	call   f0104138 <sched_remove_new>
f01044f2:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f01044f5:	83 ec 0c             	sub    $0xc,%esp
f01044f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01044fb:	e8 cc fa ff ff       	call   f0103fcc <sched_insert_ready>
f0104500:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104503:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104508:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010450b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010450f:	74 08                	je     f0104519 <sched_run_all+0x49>
f0104511:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104514:	8b 40 44             	mov    0x44(%eax),%eax
f0104517:	eb 05                	jmp    f010451e <sched_run_all+0x4e>
f0104519:	b8 00 00 00 00       	mov    $0x0,%eax
f010451e:	a3 e0 43 6d f0       	mov    %eax,0xf06d43e0
f0104523:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104528:	85 c0                	test   %eax,%eax
f010452a:	75 bb                	jne    f01044e7 <sched_run_all+0x17>
f010452c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104530:	75 b5                	jne    f01044e7 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104532:	a1 f4 43 6d f0       	mov    0xf06d43f4,%eax
f0104537:	85 c0                	test   %eax,%eax
f0104539:	75 05                	jne    f0104540 <sched_run_all+0x70>
		fos_scheduler();
f010453b:	e8 c3 f8 ff ff       	call   f0103e03 <fos_scheduler>
}
f0104540:	90                   	nop
f0104541:	c9                   	leave  
f0104542:	c3                   	ret    

f0104543 <sched_kill_all>:

void sched_kill_all()
{
f0104543:	55                   	push   %ebp
f0104544:	89 e5                	mov    %esp,%ebp
f0104546:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104549:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f010454e:	85 c0                	test   %eax,%eax
f0104550:	0f 84 98 00 00 00    	je     f01045ee <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104556:	83 ec 0c             	sub    $0xc,%esp
f0104559:	68 98 c6 12 f0       	push   $0xf012c698
f010455e:	e8 ca c6 ff ff       	call   f0100c2d <cprintf>
f0104563:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104566:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f010456b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010456e:	eb 55                	jmp    f01045c5 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104570:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104573:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104579:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010457f:	83 ec 04             	sub    $0x4,%esp
f0104582:	52                   	push   %edx
f0104583:	50                   	push   %eax
f0104584:	68 c4 c6 12 f0       	push   $0xf012c6c4
f0104589:	e8 9f c6 ff ff       	call   f0100c2d <cprintf>
f010458e:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104591:	83 ec 0c             	sub    $0xc,%esp
f0104594:	ff 75 f4             	pushl  -0xc(%ebp)
f0104597:	e8 9c fb ff ff       	call   f0104138 <sched_remove_new>
f010459c:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010459f:	83 ec 0c             	sub    $0xc,%esp
f01045a2:	ff 75 f4             	pushl  -0xc(%ebp)
f01045a5:	e8 d9 3f 00 00       	call   f0108583 <env_free>
f01045aa:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01045ad:	83 ec 0c             	sub    $0xc,%esp
f01045b0:	68 d7 c6 12 f0       	push   $0xf012c6d7
f01045b5:	e8 73 c6 ff ff       	call   f0100c2d <cprintf>
f01045ba:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f01045bd:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f01045c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01045c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01045c9:	74 08                	je     f01045d3 <sched_kill_all+0x90>
f01045cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045ce:	8b 40 44             	mov    0x44(%eax),%eax
f01045d1:	eb 05                	jmp    f01045d8 <sched_kill_all+0x95>
f01045d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01045d8:	a3 e0 43 6d f0       	mov    %eax,0xf06d43e0
f01045dd:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f01045e2:	85 c0                	test   %eax,%eax
f01045e4:	75 8a                	jne    f0104570 <sched_kill_all+0x2d>
f01045e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01045ea:	75 84                	jne    f0104570 <sched_kill_all+0x2d>
f01045ec:	eb 10                	jmp    f01045fe <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f01045ee:	83 ec 0c             	sub    $0xc,%esp
f01045f1:	68 dd c6 12 f0       	push   $0xf012c6dd
f01045f6:	e8 32 c6 ff ff       	call   f0100c2d <cprintf>
f01045fb:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01045fe:	83 ec 0c             	sub    $0xc,%esp
f0104601:	68 d8 c5 12 f0       	push   $0xf012c5d8
f0104606:	e8 22 c6 ff ff       	call   f0100c2d <cprintf>
f010460b:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010460e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104615:	e9 a0 01 00 00       	jmp    f01047ba <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010461a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010461d:	c1 e0 04             	shl    $0x4,%eax
f0104620:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104625:	8b 00                	mov    (%eax),%eax
f0104627:	85 c0                	test   %eax,%eax
f0104629:	0f 84 65 01 00 00    	je     f0104794 <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f010462f:	83 ec 08             	sub    $0x8,%esp
f0104632:	ff 75 f0             	pushl  -0x10(%ebp)
f0104635:	68 f8 c6 12 f0       	push   $0xf012c6f8
f010463a:	e8 ee c5 ff ff       	call   f0100c2d <cprintf>
f010463f:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104642:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104645:	c1 e0 04             	shl    $0x4,%eax
f0104648:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f010464d:	8b 00                	mov    (%eax),%eax
f010464f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104652:	e9 fb 00 00 00       	jmp    f0104752 <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104657:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010465a:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104660:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104663:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104666:	83 ec 04             	sub    $0x4,%esp
f0104669:	52                   	push   %edx
f010466a:	50                   	push   %eax
f010466b:	68 c4 c6 12 f0       	push   $0xf012c6c4
f0104670:	e8 b8 c5 ff ff       	call   f0100c2d <cprintf>
f0104675:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104678:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010467c:	75 17                	jne    f0104695 <sched_kill_all+0x152>
f010467e:	83 ec 04             	sub    $0x4,%esp
f0104681:	68 10 c5 12 f0       	push   $0xf012c510
f0104686:	68 76 01 00 00       	push   $0x176
f010468b:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104690:	e8 11 bb ff ff       	call   f01001a6 <_panic>
f0104695:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104698:	8b 40 44             	mov    0x44(%eax),%eax
f010469b:	85 c0                	test   %eax,%eax
f010469d:	74 11                	je     f01046b0 <sched_kill_all+0x16d>
f010469f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046a2:	8b 40 44             	mov    0x44(%eax),%eax
f01046a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01046a8:	8b 52 48             	mov    0x48(%edx),%edx
f01046ab:	89 50 48             	mov    %edx,0x48(%eax)
f01046ae:	eb 14                	jmp    f01046c4 <sched_kill_all+0x181>
f01046b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046b3:	8b 40 48             	mov    0x48(%eax),%eax
f01046b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01046b9:	c1 e2 04             	shl    $0x4,%edx
f01046bc:	81 c2 50 c0 66 f0    	add    $0xf066c050,%edx
f01046c2:	89 02                	mov    %eax,(%edx)
f01046c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046c7:	8b 40 48             	mov    0x48(%eax),%eax
f01046ca:	85 c0                	test   %eax,%eax
f01046cc:	74 11                	je     f01046df <sched_kill_all+0x19c>
f01046ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046d1:	8b 40 48             	mov    0x48(%eax),%eax
f01046d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01046d7:	8b 52 44             	mov    0x44(%edx),%edx
f01046da:	89 50 44             	mov    %edx,0x44(%eax)
f01046dd:	eb 14                	jmp    f01046f3 <sched_kill_all+0x1b0>
f01046df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046e2:	8b 40 44             	mov    0x44(%eax),%eax
f01046e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01046e8:	c1 e2 04             	shl    $0x4,%edx
f01046eb:	81 c2 4c c0 66 f0    	add    $0xf066c04c,%edx
f01046f1:	89 02                	mov    %eax,(%edx)
f01046f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046f6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01046fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104700:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104707:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010470a:	c1 e0 04             	shl    $0x4,%eax
f010470d:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104712:	8b 00                	mov    (%eax),%eax
f0104714:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104717:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010471a:	c1 e0 04             	shl    $0x4,%eax
f010471d:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104722:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104724:	83 ec 0c             	sub    $0xc,%esp
f0104727:	ff 75 f4             	pushl  -0xc(%ebp)
f010472a:	e8 54 3e 00 00       	call   f0108583 <env_free>
f010472f:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104732:	83 ec 0c             	sub    $0xc,%esp
f0104735:	68 d7 c6 12 f0       	push   $0xf012c6d7
f010473a:	e8 ee c4 ff ff       	call   f0100c2d <cprintf>
f010473f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104742:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104745:	c1 e0 04             	shl    $0x4,%eax
f0104748:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f010474d:	8b 00                	mov    (%eax),%eax
f010474f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104752:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104756:	74 08                	je     f0104760 <sched_kill_all+0x21d>
f0104758:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010475b:	8b 40 44             	mov    0x44(%eax),%eax
f010475e:	eb 05                	jmp    f0104765 <sched_kill_all+0x222>
f0104760:	b8 00 00 00 00       	mov    $0x0,%eax
f0104765:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104768:	c1 e2 04             	shl    $0x4,%edx
f010476b:	81 c2 54 c0 66 f0    	add    $0xf066c054,%edx
f0104771:	89 02                	mov    %eax,(%edx)
f0104773:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104776:	c1 e0 04             	shl    $0x4,%eax
f0104779:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f010477e:	8b 00                	mov    (%eax),%eax
f0104780:	85 c0                	test   %eax,%eax
f0104782:	0f 85 cf fe ff ff    	jne    f0104657 <sched_kill_all+0x114>
f0104788:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010478c:	0f 85 c5 fe ff ff    	jne    f0104657 <sched_kill_all+0x114>
f0104792:	eb 13                	jmp    f01047a7 <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104794:	83 ec 08             	sub    $0x8,%esp
f0104797:	ff 75 f0             	pushl  -0x10(%ebp)
f010479a:	68 34 c6 12 f0       	push   $0xf012c634
f010479f:	e8 89 c4 ff ff       	call   f0100c2d <cprintf>
f01047a4:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f01047a7:	83 ec 0c             	sub    $0xc,%esp
f01047aa:	68 d8 c5 12 f0       	push   $0xf012c5d8
f01047af:	e8 79 c4 ff ff       	call   f0100c2d <cprintf>
f01047b4:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047b7:	ff 45 f0             	incl   -0x10(%ebp)
f01047ba:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01047bf:	0f b6 c0             	movzbl %al,%eax
f01047c2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01047c5:	0f 8f 4f fe ff ff    	jg     f010461a <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f01047cb:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f01047d0:	85 c0                	test   %eax,%eax
f01047d2:	0f 84 98 00 00 00    	je     f0104870 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f01047d8:	83 ec 0c             	sub    $0xc,%esp
f01047db:	68 2c c7 12 f0       	push   $0xf012c72c
f01047e0:	e8 48 c4 ff ff       	call   f0100c2d <cprintf>
f01047e5:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01047e8:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f01047ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01047f0:	eb 55                	jmp    f0104847 <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01047f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047f5:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01047fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047fe:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104801:	83 ec 04             	sub    $0x4,%esp
f0104804:	52                   	push   %edx
f0104805:	50                   	push   %eax
f0104806:	68 c4 c6 12 f0       	push   $0xf012c6c4
f010480b:	e8 1d c4 ff ff       	call   f0100c2d <cprintf>
f0104810:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0104813:	83 ec 0c             	sub    $0xc,%esp
f0104816:	ff 75 f4             	pushl  -0xc(%ebp)
f0104819:	e8 02 fa ff ff       	call   f0104220 <sched_remove_exit>
f010481e:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104821:	83 ec 0c             	sub    $0xc,%esp
f0104824:	ff 75 f4             	pushl  -0xc(%ebp)
f0104827:	e8 57 3d 00 00       	call   f0108583 <env_free>
f010482c:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010482f:	83 ec 0c             	sub    $0xc,%esp
f0104832:	68 d7 c6 12 f0       	push   $0xf012c6d7
f0104837:	e8 f1 c3 ff ff       	call   f0100c2d <cprintf>
f010483c:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010483f:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f0104844:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104847:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010484b:	74 08                	je     f0104855 <sched_kill_all+0x312>
f010484d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104850:	8b 40 44             	mov    0x44(%eax),%eax
f0104853:	eb 05                	jmp    f010485a <sched_kill_all+0x317>
f0104855:	b8 00 00 00 00       	mov    $0x0,%eax
f010485a:	a3 ac 1f 6d f0       	mov    %eax,0xf06d1fac
f010485f:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f0104864:	85 c0                	test   %eax,%eax
f0104866:	75 8a                	jne    f01047f2 <sched_kill_all+0x2af>
f0104868:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010486c:	75 84                	jne    f01047f2 <sched_kill_all+0x2af>
f010486e:	eb 10                	jmp    f0104880 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104870:	83 ec 0c             	sub    $0xc,%esp
f0104873:	68 7a c6 12 f0       	push   $0xf012c67a
f0104878:	e8 b0 c3 ff ff       	call   f0100c2d <cprintf>
f010487d:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0104880:	c7 05 74 46 64 f0 00 	movl   $0x0,0xf0644674
f0104887:	00 00 00 
	fos_scheduler();
f010488a:	e8 74 f5 ff ff       	call   f0103e03 <fos_scheduler>

f010488f <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010488f:	55                   	push   %ebp
f0104890:	89 e5                	mov    %esp,%ebp
f0104892:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0104895:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104899:	74 0e                	je     f01048a9 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010489b:	83 ec 0c             	sub    $0xc,%esp
f010489e:	ff 75 08             	pushl  0x8(%ebp)
f01048a1:	e8 66 f8 ff ff       	call   f010410c <sched_insert_new>
f01048a6:	83 c4 10             	add    $0x10,%esp
	}
}
f01048a9:	90                   	nop
f01048aa:	c9                   	leave  
f01048ab:	c3                   	ret    

f01048ac <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01048b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01048b9:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f01048be:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01048c1:	eb 3d                	jmp    f0104900 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01048c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01048c9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01048cc:	75 2a                	jne    f01048f8 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01048ce:	83 ec 0c             	sub    $0xc,%esp
f01048d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01048d4:	e8 5f f8 ff ff       	call   f0104138 <sched_remove_new>
f01048d9:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01048dc:	83 ec 0c             	sub    $0xc,%esp
f01048df:	ff 75 f4             	pushl  -0xc(%ebp)
f01048e2:	e8 e5 f6 ff ff       	call   f0103fcc <sched_insert_ready>
f01048e7:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01048ea:	a1 f4 43 6d f0       	mov    0xf06d43f4,%eax
f01048ef:	85 c0                	test   %eax,%eax
f01048f1:	75 36                	jne    f0104929 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01048f3:	e8 0b f5 ff ff       	call   f0103e03 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01048f8:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f01048fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104900:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104904:	74 08                	je     f010490e <sched_run_env+0x62>
f0104906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104909:	8b 40 44             	mov    0x44(%eax),%eax
f010490c:	eb 05                	jmp    f0104913 <sched_run_env+0x67>
f010490e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104913:	a3 e0 43 6d f0       	mov    %eax,0xf06d43e0
f0104918:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f010491d:	85 c0                	test   %eax,%eax
f010491f:	75 a2                	jne    f01048c3 <sched_run_env+0x17>
f0104921:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104925:	75 9c                	jne    f01048c3 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0104927:	eb 01                	jmp    f010492a <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0104929:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010492a:	90                   	nop
f010492b:	c9                   	leave  
f010492c:	c3                   	ret    

f010492d <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f010492d:	55                   	push   %ebp
f010492e:	89 e5                	mov    %esp,%ebp
f0104930:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010493a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0104941:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104945:	75 59                	jne    f01049a0 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104947:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f010494c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010494f:	eb 28                	jmp    f0104979 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0104951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104954:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104957:	3b 45 08             	cmp    0x8(%ebp),%eax
f010495a:	75 15                	jne    f0104971 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f010495c:	83 ec 0c             	sub    $0xc,%esp
f010495f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104962:	e8 d1 f7 ff ff       	call   f0104138 <sched_remove_new>
f0104967:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010496a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104971:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104976:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104979:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010497d:	74 08                	je     f0104987 <sched_exit_env+0x5a>
f010497f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104982:	8b 40 44             	mov    0x44(%eax),%eax
f0104985:	eb 05                	jmp    f010498c <sched_exit_env+0x5f>
f0104987:	b8 00 00 00 00       	mov    $0x0,%eax
f010498c:	a3 e0 43 6d f0       	mov    %eax,0xf06d43e0
f0104991:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104996:	85 c0                	test   %eax,%eax
f0104998:	75 b7                	jne    f0104951 <sched_exit_env+0x24>
f010499a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010499e:	75 b1                	jne    f0104951 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f01049a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049a4:	0f 85 6e 01 00 00    	jne    f0104b18 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01049aa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01049b1:	e9 4e 01 00 00       	jmp    f0104b04 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01049b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01049b9:	c1 e0 04             	shl    $0x4,%eax
f01049bc:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f01049c1:	8b 00                	mov    (%eax),%eax
f01049c3:	85 c0                	test   %eax,%eax
f01049c5:	0f 84 30 01 00 00    	je     f0104afb <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01049cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01049d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01049d5:	c1 e0 04             	shl    $0x4,%eax
f01049d8:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f01049dd:	8b 00                	mov    (%eax),%eax
f01049df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01049e2:	e9 d4 00 00 00       	jmp    f0104abb <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01049e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01049ea:	8b 40 4c             	mov    0x4c(%eax),%eax
f01049ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01049f0:	0f 85 b5 00 00 00    	jne    f0104aab <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01049f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01049fa:	75 17                	jne    f0104a13 <sched_exit_env+0xe6>
f01049fc:	83 ec 04             	sub    $0x4,%esp
f01049ff:	68 10 c5 12 f0       	push   $0xf012c510
f0104a04:	68 e1 01 00 00       	push   $0x1e1
f0104a09:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104a0e:	e8 93 b7 ff ff       	call   f01001a6 <_panic>
f0104a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a16:	8b 40 44             	mov    0x44(%eax),%eax
f0104a19:	85 c0                	test   %eax,%eax
f0104a1b:	74 11                	je     f0104a2e <sched_exit_env+0x101>
f0104a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a20:	8b 40 44             	mov    0x44(%eax),%eax
f0104a23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a26:	8b 52 48             	mov    0x48(%edx),%edx
f0104a29:	89 50 48             	mov    %edx,0x48(%eax)
f0104a2c:	eb 14                	jmp    f0104a42 <sched_exit_env+0x115>
f0104a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a31:	8b 40 48             	mov    0x48(%eax),%eax
f0104a34:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0104a37:	c1 e2 04             	shl    $0x4,%edx
f0104a3a:	81 c2 50 c0 66 f0    	add    $0xf066c050,%edx
f0104a40:	89 02                	mov    %eax,(%edx)
f0104a42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a45:	8b 40 48             	mov    0x48(%eax),%eax
f0104a48:	85 c0                	test   %eax,%eax
f0104a4a:	74 11                	je     f0104a5d <sched_exit_env+0x130>
f0104a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a4f:	8b 40 48             	mov    0x48(%eax),%eax
f0104a52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a55:	8b 52 44             	mov    0x44(%edx),%edx
f0104a58:	89 50 44             	mov    %edx,0x44(%eax)
f0104a5b:	eb 14                	jmp    f0104a71 <sched_exit_env+0x144>
f0104a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a60:	8b 40 44             	mov    0x44(%eax),%eax
f0104a63:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0104a66:	c1 e2 04             	shl    $0x4,%edx
f0104a69:	81 c2 4c c0 66 f0    	add    $0xf066c04c,%edx
f0104a6f:	89 02                	mov    %eax,(%edx)
f0104a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a74:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104a7e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104a88:	c1 e0 04             	shl    $0x4,%eax
f0104a8b:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104a90:	8b 00                	mov    (%eax),%eax
f0104a92:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104a98:	c1 e0 04             	shl    $0x4,%eax
f0104a9b:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104aa0:	89 10                	mov    %edx,(%eax)
						found = 1;
f0104aa2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0104aa9:	eb 50                	jmp    f0104afb <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104aab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104aae:	c1 e0 04             	shl    $0x4,%eax
f0104ab1:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104ab6:	8b 00                	mov    (%eax),%eax
f0104ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104abb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104abf:	74 08                	je     f0104ac9 <sched_exit_env+0x19c>
f0104ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ac4:	8b 40 44             	mov    0x44(%eax),%eax
f0104ac7:	eb 05                	jmp    f0104ace <sched_exit_env+0x1a1>
f0104ac9:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ace:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0104ad1:	c1 e2 04             	shl    $0x4,%edx
f0104ad4:	81 c2 54 c0 66 f0    	add    $0xf066c054,%edx
f0104ada:	89 02                	mov    %eax,(%edx)
f0104adc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104adf:	c1 e0 04             	shl    $0x4,%eax
f0104ae2:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104ae7:	8b 00                	mov    (%eax),%eax
f0104ae9:	85 c0                	test   %eax,%eax
f0104aeb:	0f 85 f6 fe ff ff    	jne    f01049e7 <sched_exit_env+0xba>
f0104af1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104af5:	0f 85 ec fe ff ff    	jne    f01049e7 <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0104afb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104aff:	75 16                	jne    f0104b17 <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b01:	ff 45 ec             	incl   -0x14(%ebp)
f0104b04:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0104b09:	0f b6 c0             	movzbl %al,%eax
f0104b0c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0104b0f:	0f 8f a1 fe ff ff    	jg     f01049b6 <sched_exit_env+0x89>
f0104b15:	eb 01                	jmp    f0104b18 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f0104b17:	90                   	nop
		}
	}
	if (!found)
f0104b18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104b1c:	75 1c                	jne    f0104b3a <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0104b1e:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0104b23:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b26:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104b29:	75 0f                	jne    f0104b3a <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0104b2b:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0104b30:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0104b33:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0104b3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104b3e:	74 2a                	je     f0104b6a <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0104b40:	83 ec 0c             	sub    $0xc,%esp
f0104b43:	ff 75 f4             	pushl  -0xc(%ebp)
f0104b46:	e8 92 f6 ff ff       	call   f01041dd <sched_insert_exit>
f0104b4b:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0104b4e:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0104b53:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b56:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104b59:	75 0f                	jne    f0104b6a <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0104b5b:	c7 05 74 46 64 f0 00 	movl   $0x0,0xf0644674
f0104b62:	00 00 00 
			fos_scheduler();
f0104b65:	e8 99 f2 ff ff       	call   f0103e03 <fos_scheduler>
		}
	}
}
f0104b6a:	90                   	nop
f0104b6b:	c9                   	leave  
f0104b6c:	c3                   	ret    

f0104b6d <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0104b6d:	55                   	push   %ebp
f0104b6e:	89 e5                	mov    %esp,%ebp
f0104b70:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104b73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b81:	e9 3e 01 00 00       	jmp    f0104cc4 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b89:	c1 e0 04             	shl    $0x4,%eax
f0104b8c:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104b91:	8b 00                	mov    (%eax),%eax
f0104b93:	85 c0                	test   %eax,%eax
f0104b95:	0f 84 26 01 00 00    	je     f0104cc1 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0104b9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ba2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ba5:	c1 e0 04             	shl    $0x4,%eax
f0104ba8:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104bad:	8b 00                	mov    (%eax),%eax
f0104baf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bb2:	e9 ca 00 00 00       	jmp    f0104c81 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104bb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bbb:	75 17                	jne    f0104bd4 <sched_exit_all_ready_envs+0x67>
f0104bbd:	83 ec 04             	sub    $0x4,%esp
f0104bc0:	68 10 c5 12 f0       	push   $0xf012c510
f0104bc5:	68 0c 02 00 00       	push   $0x20c
f0104bca:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104bcf:	e8 d2 b5 ff ff       	call   f01001a6 <_panic>
f0104bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	85 c0                	test   %eax,%eax
f0104bdc:	74 11                	je     f0104bef <sched_exit_all_ready_envs+0x82>
f0104bde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104be1:	8b 40 44             	mov    0x44(%eax),%eax
f0104be4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104be7:	8b 52 48             	mov    0x48(%edx),%edx
f0104bea:	89 50 48             	mov    %edx,0x48(%eax)
f0104bed:	eb 14                	jmp    f0104c03 <sched_exit_all_ready_envs+0x96>
f0104bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bf2:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bf8:	c1 e2 04             	shl    $0x4,%edx
f0104bfb:	81 c2 50 c0 66 f0    	add    $0xf066c050,%edx
f0104c01:	89 02                	mov    %eax,(%edx)
f0104c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c06:	8b 40 48             	mov    0x48(%eax),%eax
f0104c09:	85 c0                	test   %eax,%eax
f0104c0b:	74 11                	je     f0104c1e <sched_exit_all_ready_envs+0xb1>
f0104c0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c10:	8b 40 48             	mov    0x48(%eax),%eax
f0104c13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c16:	8b 52 44             	mov    0x44(%edx),%edx
f0104c19:	89 50 44             	mov    %edx,0x44(%eax)
f0104c1c:	eb 14                	jmp    f0104c32 <sched_exit_all_ready_envs+0xc5>
f0104c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c21:	8b 40 44             	mov    0x44(%eax),%eax
f0104c24:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c27:	c1 e2 04             	shl    $0x4,%edx
f0104c2a:	81 c2 4c c0 66 f0    	add    $0xf066c04c,%edx
f0104c30:	89 02                	mov    %eax,(%edx)
f0104c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c35:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c3f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104c49:	c1 e0 04             	shl    $0x4,%eax
f0104c4c:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104c51:	8b 00                	mov    (%eax),%eax
f0104c53:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104c59:	c1 e0 04             	shl    $0x4,%eax
f0104c5c:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104c61:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0104c63:	83 ec 0c             	sub    $0xc,%esp
f0104c66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104c69:	e8 6f f5 ff ff       	call   f01041dd <sched_insert_exit>
f0104c6e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104c74:	c1 e0 04             	shl    $0x4,%eax
f0104c77:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104c7c:	8b 00                	mov    (%eax),%eax
f0104c7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c85:	74 08                	je     f0104c8f <sched_exit_all_ready_envs+0x122>
f0104c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c8a:	8b 40 44             	mov    0x44(%eax),%eax
f0104c8d:	eb 05                	jmp    f0104c94 <sched_exit_all_ready_envs+0x127>
f0104c8f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c97:	c1 e2 04             	shl    $0x4,%edx
f0104c9a:	81 c2 54 c0 66 f0    	add    $0xf066c054,%edx
f0104ca0:	89 02                	mov    %eax,(%edx)
f0104ca2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ca5:	c1 e0 04             	shl    $0x4,%eax
f0104ca8:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104cad:	8b 00                	mov    (%eax),%eax
f0104caf:	85 c0                	test   %eax,%eax
f0104cb1:	0f 85 00 ff ff ff    	jne    f0104bb7 <sched_exit_all_ready_envs+0x4a>
f0104cb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cbb:	0f 85 f6 fe ff ff    	jne    f0104bb7 <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cc1:	ff 45 f0             	incl   -0x10(%ebp)
f0104cc4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0104cc9:	0f b6 c0             	movzbl %al,%eax
f0104ccc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104ccf:	0f 8f b1 fe ff ff    	jg     f0104b86 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0104cd5:	90                   	nop
f0104cd6:	c9                   	leave  
f0104cd7:	c3                   	ret    

f0104cd8 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f0104cd8:	55                   	push   %ebp
f0104cd9:	89 e5                	mov    %esp,%ebp
f0104cdb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0104ce5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0104cec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104cf0:	0f 85 a0 00 00 00    	jne    f0104d96 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104cf6:	a1 d8 43 6d f0       	mov    0xf06d43d8,%eax
f0104cfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cfe:	eb 67                	jmp    f0104d67 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0104d00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d03:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d06:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104d09:	75 54                	jne    f0104d5f <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0104d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d0e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d1a:	83 ec 04             	sub    $0x4,%esp
f0104d1d:	52                   	push   %edx
f0104d1e:	50                   	push   %eax
f0104d1f:	68 58 c7 12 f0       	push   $0xf012c758
f0104d24:	e8 04 bf ff ff       	call   f0100c2d <cprintf>
f0104d29:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0104d2c:	83 ec 0c             	sub    $0xc,%esp
f0104d2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d32:	e8 01 f4 ff ff       	call   f0104138 <sched_remove_new>
f0104d37:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0104d3a:	83 ec 0c             	sub    $0xc,%esp
f0104d3d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d40:	e8 3e 38 00 00       	call   f0108583 <env_free>
f0104d45:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104d48:	83 ec 0c             	sub    $0xc,%esp
f0104d4b:	68 d7 c6 12 f0       	push   $0xf012c6d7
f0104d50:	e8 d8 be ff ff       	call   f0100c2d <cprintf>
f0104d55:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0104d58:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d5f:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104d64:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6b:	74 08                	je     f0104d75 <sched_kill_env+0x9d>
f0104d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d70:	8b 40 44             	mov    0x44(%eax),%eax
f0104d73:	eb 05                	jmp    f0104d7a <sched_kill_env+0xa2>
f0104d75:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d7a:	a3 e0 43 6d f0       	mov    %eax,0xf06d43e0
f0104d7f:	a1 e0 43 6d f0       	mov    0xf06d43e0,%eax
f0104d84:	85 c0                	test   %eax,%eax
f0104d86:	0f 85 74 ff ff ff    	jne    f0104d00 <sched_kill_env+0x28>
f0104d8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d90:	0f 85 6a ff ff ff    	jne    f0104d00 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0104d96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104d9a:	0f 85 ad 01 00 00    	jne    f0104f4d <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104da0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104da7:	e9 8d 01 00 00       	jmp    f0104f39 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104dac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104daf:	c1 e0 04             	shl    $0x4,%eax
f0104db2:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104db7:	8b 00                	mov    (%eax),%eax
f0104db9:	85 c0                	test   %eax,%eax
f0104dbb:	0f 84 6f 01 00 00    	je     f0104f30 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f0104dc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104dc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104dcb:	c1 e0 04             	shl    $0x4,%eax
f0104dce:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0104dd3:	8b 00                	mov    (%eax),%eax
f0104dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dd8:	e9 13 01 00 00       	jmp    f0104ef0 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f0104ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104de0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104de3:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104de6:	0f 85 f4 00 00 00    	jne    f0104ee0 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0104dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104def:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104dfb:	ff 75 ec             	pushl  -0x14(%ebp)
f0104dfe:	52                   	push   %edx
f0104dff:	50                   	push   %eax
f0104e00:	68 80 c7 12 f0       	push   $0xf012c780
f0104e05:	e8 23 be ff ff       	call   f0100c2d <cprintf>
f0104e0a:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e11:	75 17                	jne    f0104e2a <sched_kill_env+0x152>
f0104e13:	83 ec 04             	sub    $0x4,%esp
f0104e16:	68 10 c5 12 f0       	push   $0xf012c510
f0104e1b:	68 33 02 00 00       	push   $0x233
f0104e20:	68 ff c4 12 f0       	push   $0xf012c4ff
f0104e25:	e8 7c b3 ff ff       	call   f01001a6 <_panic>
f0104e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e2d:	8b 40 44             	mov    0x44(%eax),%eax
f0104e30:	85 c0                	test   %eax,%eax
f0104e32:	74 11                	je     f0104e45 <sched_kill_env+0x16d>
f0104e34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e37:	8b 40 44             	mov    0x44(%eax),%eax
f0104e3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e3d:	8b 52 48             	mov    0x48(%edx),%edx
f0104e40:	89 50 48             	mov    %edx,0x48(%eax)
f0104e43:	eb 14                	jmp    f0104e59 <sched_kill_env+0x181>
f0104e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e48:	8b 40 48             	mov    0x48(%eax),%eax
f0104e4b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0104e4e:	c1 e2 04             	shl    $0x4,%edx
f0104e51:	81 c2 50 c0 66 f0    	add    $0xf066c050,%edx
f0104e57:	89 02                	mov    %eax,(%edx)
f0104e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e5c:	8b 40 48             	mov    0x48(%eax),%eax
f0104e5f:	85 c0                	test   %eax,%eax
f0104e61:	74 11                	je     f0104e74 <sched_kill_env+0x19c>
f0104e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e66:	8b 40 48             	mov    0x48(%eax),%eax
f0104e69:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e6c:	8b 52 44             	mov    0x44(%edx),%edx
f0104e6f:	89 50 44             	mov    %edx,0x44(%eax)
f0104e72:	eb 14                	jmp    f0104e88 <sched_kill_env+0x1b0>
f0104e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e77:	8b 40 44             	mov    0x44(%eax),%eax
f0104e7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0104e7d:	c1 e2 04             	shl    $0x4,%edx
f0104e80:	81 c2 4c c0 66 f0    	add    $0xf066c04c,%edx
f0104e86:	89 02                	mov    %eax,(%edx)
f0104e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e95:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104e9f:	c1 e0 04             	shl    $0x4,%eax
f0104ea2:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104ea7:	8b 00                	mov    (%eax),%eax
f0104ea9:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104eac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104eaf:	c1 e0 04             	shl    $0x4,%eax
f0104eb2:	05 58 c0 66 f0       	add    $0xf066c058,%eax
f0104eb7:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f0104eb9:	83 ec 0c             	sub    $0xc,%esp
f0104ebc:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ebf:	e8 bf 36 00 00       	call   f0108583 <env_free>
f0104ec4:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0104ec7:	83 ec 0c             	sub    $0xc,%esp
f0104eca:	68 d7 c6 12 f0       	push   $0xf012c6d7
f0104ecf:	e8 59 bd ff ff       	call   f0100c2d <cprintf>
f0104ed4:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0104ed7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0104ede:	eb 50                	jmp    f0104f30 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ee3:	c1 e0 04             	shl    $0x4,%eax
f0104ee6:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104eeb:	8b 00                	mov    (%eax),%eax
f0104eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ef0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ef4:	74 08                	je     f0104efe <sched_kill_env+0x226>
f0104ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef9:	8b 40 44             	mov    0x44(%eax),%eax
f0104efc:	eb 05                	jmp    f0104f03 <sched_kill_env+0x22b>
f0104efe:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f03:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0104f06:	c1 e2 04             	shl    $0x4,%edx
f0104f09:	81 c2 54 c0 66 f0    	add    $0xf066c054,%edx
f0104f0f:	89 02                	mov    %eax,(%edx)
f0104f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104f14:	c1 e0 04             	shl    $0x4,%eax
f0104f17:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0104f1c:	8b 00                	mov    (%eax),%eax
f0104f1e:	85 c0                	test   %eax,%eax
f0104f20:	0f 85 b7 fe ff ff    	jne    f0104ddd <sched_kill_env+0x105>
f0104f26:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f2a:	0f 85 ad fe ff ff    	jne    f0104ddd <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0104f30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104f34:	75 16                	jne    f0104f4c <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f36:	ff 45 ec             	incl   -0x14(%ebp)
f0104f39:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0104f3e:	0f b6 c0             	movzbl %al,%eax
f0104f41:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0104f44:	0f 8f 62 fe ff ff    	jg     f0104dac <sched_kill_env+0xd4>
f0104f4a:	eb 01                	jmp    f0104f4d <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f0104f4c:	90                   	nop
		}
	}
	if (!found)
f0104f4d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104f51:	0f 85 a7 00 00 00    	jne    f0104ffe <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f0104f57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104f5e:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f0104f63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f66:	eb 67                	jmp    f0104fcf <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0104f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f6e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0104f71:	75 54                	jne    f0104fc7 <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0104f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f76:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f7f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f82:	83 ec 04             	sub    $0x4,%esp
f0104f85:	52                   	push   %edx
f0104f86:	50                   	push   %eax
f0104f87:	68 ac c7 12 f0       	push   $0xf012c7ac
f0104f8c:	e8 9c bc ff ff       	call   f0100c2d <cprintf>
f0104f91:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0104f94:	83 ec 0c             	sub    $0xc,%esp
f0104f97:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f9a:	e8 81 f2 ff ff       	call   f0104220 <sched_remove_exit>
f0104f9f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0104fa2:	83 ec 0c             	sub    $0xc,%esp
f0104fa5:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fa8:	e8 d6 35 00 00       	call   f0108583 <env_free>
f0104fad:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104fb0:	83 ec 0c             	sub    $0xc,%esp
f0104fb3:	68 d7 c6 12 f0       	push   $0xf012c6d7
f0104fb8:	e8 70 bc ff ff       	call   f0100c2d <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0104fc0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fc7:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f0104fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104fd3:	74 08                	je     f0104fdd <sched_kill_env+0x305>
f0104fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fd8:	8b 40 44             	mov    0x44(%eax),%eax
f0104fdb:	eb 05                	jmp    f0104fe2 <sched_kill_env+0x30a>
f0104fdd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fe2:	a3 ac 1f 6d f0       	mov    %eax,0xf06d1fac
f0104fe7:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f0104fec:	85 c0                	test   %eax,%eax
f0104fee:	0f 85 74 ff ff ff    	jne    f0104f68 <sched_kill_env+0x290>
f0104ff4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ff8:	0f 85 6a ff ff ff    	jne    f0104f68 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f0104ffe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105002:	0f 85 a0 00 00 00    	jne    f01050a8 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f0105008:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010500d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105010:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105013:	0f 85 8f 00 00 00    	jne    f01050a8 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105019:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010501e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105021:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105024:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105027:	83 f8 02             	cmp    $0x2,%eax
f010502a:	74 19                	je     f0105045 <sched_kill_env+0x36d>
f010502c:	68 d4 c7 12 f0       	push   $0xf012c7d4
f0105031:	68 f4 c7 12 f0       	push   $0xf012c7f4
f0105036:	68 56 02 00 00       	push   $0x256
f010503b:	68 ff c4 12 f0       	push   $0xf012c4ff
f0105040:	e8 61 b1 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105045:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105048:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f010504e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105051:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105054:	83 ec 04             	sub    $0x4,%esp
f0105057:	52                   	push   %edx
f0105058:	50                   	push   %eax
f0105059:	68 0c c8 12 f0       	push   $0xf012c80c
f010505e:	e8 ca bb ff ff       	call   f0100c2d <cprintf>
f0105063:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105066:	83 ec 0c             	sub    $0xc,%esp
f0105069:	ff 75 f4             	pushl  -0xc(%ebp)
f010506c:	e8 12 35 00 00       	call   f0108583 <env_free>
f0105071:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105074:	83 ec 0c             	sub    $0xc,%esp
f0105077:	68 d7 c6 12 f0       	push   $0xf012c6d7
f010507c:	e8 ac bb ff ff       	call   f0100c2d <cprintf>
f0105081:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105084:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010508b:	a1 48 44 6d f0       	mov    0xf06d4448,%eax
f0105090:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105093:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105096:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105099:	c7 05 74 46 64 f0 00 	movl   $0x0,0xf0644674
f01050a0:	00 00 00 
			fos_scheduler();
f01050a3:	e8 5b ed ff ff       	call   f0103e03 <fos_scheduler>
		}
	}
}
f01050a8:	90                   	nop
f01050a9:	c9                   	leave  
f01050aa:	c3                   	ret    

f01050ab <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f01050ab:	55                   	push   %ebp
f01050ac:	89 e5                	mov    %esp,%ebp
f01050ae:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01050b1:	83 ec 0c             	sub    $0xc,%esp
f01050b4:	6a 01                	push   $0x1
f01050b6:	e8 a4 76 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f01050bb:	83 c4 10             	add    $0x10,%esp
f01050be:	85 c0                	test   %eax,%eax
f01050c0:	74 05                	je     f01050c7 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01050c2:	e8 05 00 00 00       	call   f01050cc <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01050c7:	e8 37 ed ff ff       	call   f0103e03 <fos_scheduler>

f01050cc <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01050cc:	55                   	push   %ebp
f01050cd:	89 e5                	mov    %esp,%ebp
f01050cf:	53                   	push   %ebx
f01050d0:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01050d3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01050d8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01050db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01050df:	0f 84 cf 01 00 00    	je     f01052b4 <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01050e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01050ec:	e9 ce 00 00 00       	jmp    f01051bf <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01050f1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01050f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050f7:	89 d0                	mov    %edx,%eax
f01050f9:	01 c0                	add    %eax,%eax
f01050fb:	01 d0                	add    %edx,%eax
f01050fd:	c1 e0 03             	shl    $0x3,%eax
f0105100:	01 c8                	add    %ecx,%eax
f0105102:	83 c0 7c             	add    $0x7c,%eax
f0105105:	8a 00                	mov    (%eax),%al
f0105107:	3c 01                	cmp    $0x1,%al
f0105109:	0f 84 ad 00 00 00    	je     f01051bc <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f010510f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105112:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105115:	89 d0                	mov    %edx,%eax
f0105117:	01 c0                	add    %eax,%eax
f0105119:	01 d0                	add    %edx,%eax
f010511b:	c1 e0 03             	shl    $0x3,%eax
f010511e:	01 c8                	add    %ecx,%eax
f0105120:	83 c0 78             	add    $0x78,%eax
f0105123:	8b 00                	mov    (%eax),%eax
f0105125:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105128:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010512b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010512e:	83 ec 08             	sub    $0x8,%esp
f0105131:	ff 75 e8             	pushl  -0x18(%ebp)
f0105134:	50                   	push   %eax
f0105135:	e8 a4 1b 00 00       	call   f0106cde <pt_get_page_permissions>
f010513a:	83 c4 10             	add    $0x10,%esp
f010513d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105140:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105143:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105146:	89 d0                	mov    %edx,%eax
f0105148:	01 c0                	add    %eax,%eax
f010514a:	01 d0                	add    %edx,%eax
f010514c:	c1 e0 03             	shl    $0x3,%eax
f010514f:	01 c8                	add    %ecx,%eax
f0105151:	83 e8 80             	sub    $0xffffff80,%eax
f0105154:	8b 00                	mov    (%eax),%eax
f0105156:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105159:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010515c:	83 e0 20             	and    $0x20,%eax
f010515f:	85 c0                	test   %eax,%eax
f0105161:	74 3b                	je     f010519e <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105163:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105166:	c1 e8 02             	shr    $0x2,%eax
f0105169:	0d 00 00 00 80       	or     $0x80000000,%eax
f010516e:	89 c1                	mov    %eax,%ecx
f0105170:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105173:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105176:	89 d0                	mov    %edx,%eax
f0105178:	01 c0                	add    %eax,%eax
f010517a:	01 d0                	add    %edx,%eax
f010517c:	c1 e0 03             	shl    $0x3,%eax
f010517f:	01 d8                	add    %ebx,%eax
f0105181:	83 e8 80             	sub    $0xffffff80,%eax
f0105184:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105186:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105189:	8b 40 5c             	mov    0x5c(%eax),%eax
f010518c:	6a 20                	push   $0x20
f010518e:	6a 00                	push   $0x0
f0105190:	ff 75 e8             	pushl  -0x18(%ebp)
f0105193:	50                   	push   %eax
f0105194:	e8 2b 1b 00 00       	call   f0106cc4 <pt_set_page_permissions>
f0105199:	83 c4 10             	add    $0x10,%esp
f010519c:	eb 1e                	jmp    f01051bc <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f010519e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01051a1:	c1 e8 02             	shr    $0x2,%eax
f01051a4:	89 c1                	mov    %eax,%ecx
f01051a6:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01051a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051ac:	89 d0                	mov    %edx,%eax
f01051ae:	01 c0                	add    %eax,%eax
f01051b0:	01 d0                	add    %edx,%eax
f01051b2:	c1 e0 03             	shl    $0x3,%eax
f01051b5:	01 d8                	add    %ebx,%eax
f01051b7:	83 e8 80             	sub    $0xffffff80,%eax
f01051ba:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01051bc:	ff 45 f4             	incl   -0xc(%ebp)
f01051bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051c2:	8b 50 74             	mov    0x74(%eax),%edx
f01051c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c8:	39 c2                	cmp    %eax,%edx
f01051ca:	0f 87 21 ff ff ff    	ja     f01050f1 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01051d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01051d7:	e9 ce 00 00 00       	jmp    f01052aa <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01051dc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01051df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01051e2:	89 d0                	mov    %edx,%eax
f01051e4:	01 c0                	add    %eax,%eax
f01051e6:	01 d0                	add    %edx,%eax
f01051e8:	c1 e0 03             	shl    $0x3,%eax
f01051eb:	01 c8                	add    %ecx,%eax
f01051ed:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01051f2:	8a 00                	mov    (%eax),%al
f01051f4:	3c 01                	cmp    $0x1,%al
f01051f6:	0f 84 ab 00 00 00    	je     f01052a7 <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01051fc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01051ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105202:	89 d0                	mov    %edx,%eax
f0105204:	01 c0                	add    %eax,%eax
f0105206:	01 d0                	add    %edx,%eax
f0105208:	c1 e0 03             	shl    $0x3,%eax
f010520b:	01 c8                	add    %ecx,%eax
f010520d:	05 38 d5 01 00       	add    $0x1d538,%eax
f0105212:	8b 00                	mov    (%eax),%eax
f0105214:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105217:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010521a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010521d:	89 d0                	mov    %edx,%eax
f010521f:	01 c0                	add    %eax,%eax
f0105221:	01 d0                	add    %edx,%eax
f0105223:	c1 e0 03             	shl    $0x3,%eax
f0105226:	01 c8                	add    %ecx,%eax
f0105228:	05 40 d5 01 00       	add    $0x1d540,%eax
f010522d:	8b 00                	mov    (%eax),%eax
f010522f:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105232:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105235:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105238:	83 ec 08             	sub    $0x8,%esp
f010523b:	ff 75 dc             	pushl  -0x24(%ebp)
f010523e:	50                   	push   %eax
f010523f:	e8 e8 1a 00 00       	call   f0106d2c <pd_is_table_used>
f0105244:	83 c4 10             	add    $0x10,%esp
f0105247:	85 c0                	test   %eax,%eax
f0105249:	74 3c                	je     f0105287 <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010524b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010524e:	c1 e8 02             	shr    $0x2,%eax
f0105251:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105256:	89 c1                	mov    %eax,%ecx
f0105258:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010525b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010525e:	89 d0                	mov    %edx,%eax
f0105260:	01 c0                	add    %eax,%eax
f0105262:	01 d0                	add    %edx,%eax
f0105264:	c1 e0 03             	shl    $0x3,%eax
f0105267:	01 d8                	add    %ebx,%eax
f0105269:	05 40 d5 01 00       	add    $0x1d540,%eax
f010526e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105270:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105273:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105276:	83 ec 08             	sub    $0x8,%esp
f0105279:	ff 75 dc             	pushl  -0x24(%ebp)
f010527c:	50                   	push   %eax
f010527d:	e8 ce 1a 00 00       	call   f0106d50 <pd_set_table_unused>
f0105282:	83 c4 10             	add    $0x10,%esp
f0105285:	eb 20                	jmp    f01052a7 <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105287:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010528a:	c1 e8 02             	shr    $0x2,%eax
f010528d:	89 c1                	mov    %eax,%ecx
f010528f:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105292:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105295:	89 d0                	mov    %edx,%eax
f0105297:	01 c0                	add    %eax,%eax
f0105299:	01 d0                	add    %edx,%eax
f010529b:	c1 e0 03             	shl    $0x3,%eax
f010529e:	01 d8                	add    %ebx,%eax
f01052a0:	05 40 d5 01 00       	add    $0x1d540,%eax
f01052a5:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01052a7:	ff 45 f0             	incl   -0x10(%ebp)
f01052aa:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01052ae:	0f 8e 28 ff ff ff    	jle    f01051dc <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f01052b4:	90                   	nop
f01052b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01052b8:	c9                   	leave  
f01052b9:	c3                   	ret    

f01052ba <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01052ba:	55                   	push   %ebp
f01052bb:	89 e5                	mov    %esp,%ebp
f01052bd:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01052c0:	c7 05 6c 46 64 f0 01 	movl   $0x1,0xf064466c
f01052c7:	00 00 00 
f01052ca:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01052d1:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01052d5:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01052d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052db:	ee                   	out    %al,(%dx)
f01052dc:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01052e3:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01052e7:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01052ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01052ed:	ee                   	out    %al,(%dx)
f01052ee:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f01052f5:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f01052f9:	8a 45 b4             	mov    -0x4c(%ebp),%al
f01052fc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052ff:	ee                   	out    %al,(%dx)
f0105300:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105307:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010530b:	8a 45 b5             	mov    -0x4b(%ebp),%al
f010530e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105311:	ee                   	out    %al,(%dx)
f0105312:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105319:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f010531d:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105320:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105323:	ee                   	out    %al,(%dx)
f0105324:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010532b:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f010532f:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105332:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105335:	ee                   	out    %al,(%dx)
f0105336:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f010533d:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105341:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105344:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105347:	ee                   	out    %al,(%dx)
f0105348:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f010534f:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105353:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105356:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105359:	ee                   	out    %al,(%dx)
f010535a:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105361:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105365:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105368:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010536b:	ee                   	out    %al,(%dx)
f010536c:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105373:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105377:	8a 45 bb             	mov    -0x45(%ebp),%al
f010537a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010537d:	ee                   	out    %al,(%dx)
f010537e:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105385:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105389:	8a 45 bc             	mov    -0x44(%ebp),%al
f010538c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010538f:	ee                   	out    %al,(%dx)
f0105390:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105397:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f010539b:	8a 45 bd             	mov    -0x43(%ebp),%al
f010539e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01053a1:	ee                   	out    %al,(%dx)
f01053a2:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01053a9:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01053ad:	8a 45 be             	mov    -0x42(%ebp),%al
f01053b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01053b3:	ee                   	out    %al,(%dx)
f01053b4:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01053bb:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01053bf:	8a 45 bf             	mov    -0x41(%ebp),%al
f01053c2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01053c5:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01053c6:	66 a1 fc c7 17 f0    	mov    0xf017c7fc,%ax
f01053cc:	66 83 f8 ff          	cmp    $0xffff,%ax
f01053d0:	74 15                	je     f01053e7 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01053d2:	66 a1 fc c7 17 f0    	mov    0xf017c7fc,%ax
f01053d8:	0f b7 c0             	movzwl %ax,%eax
f01053db:	83 ec 0c             	sub    $0xc,%esp
f01053de:	50                   	push   %eax
f01053df:	e8 06 00 00 00       	call   f01053ea <irq_setmask_8259A>
f01053e4:	83 c4 10             	add    $0x10,%esp
}
f01053e7:	90                   	nop
f01053e8:	c9                   	leave  
f01053e9:	c3                   	ret    

f01053ea <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01053ea:	55                   	push   %ebp
f01053eb:	89 e5                	mov    %esp,%ebp
f01053ed:	83 ec 14             	sub    $0x14,%esp
f01053f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01053f3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f01053f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01053fa:	66 a3 fc c7 17 f0    	mov    %ax,0xf017c7fc
	if (!didinit)
f0105400:	a1 6c 46 64 f0       	mov    0xf064466c,%eax
f0105405:	85 c0                	test   %eax,%eax
f0105407:	74 34                	je     f010543d <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105409:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010540c:	0f b6 c0             	movzbl %al,%eax
f010540f:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105416:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105419:	8a 45 f6             	mov    -0xa(%ebp),%al
f010541c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010541f:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105420:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105423:	66 c1 e8 08          	shr    $0x8,%ax
f0105427:	0f b6 c0             	movzbl %al,%eax
f010542a:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105431:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105434:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105437:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010543a:	ee                   	out    %al,(%dx)
f010543b:	eb 01                	jmp    f010543e <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f010543d:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f010543e:	c9                   	leave  
f010543f:	c3                   	ret    

f0105440 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105440:	55                   	push   %ebp
f0105441:	89 e5                	mov    %esp,%ebp
f0105443:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105446:	83 ec 08             	sub    $0x8,%esp
f0105449:	68 00 10 00 00       	push   $0x1000
f010544e:	68 00 10 00 00       	push   $0x1000
f0105453:	e8 5d 02 00 00       	call   f01056b5 <boot_allocate_space>
f0105458:	83 c4 10             	add    $0x10,%esp
f010545b:	a3 18 44 6d f0       	mov    %eax,0xf06d4418
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105460:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105465:	83 ec 04             	sub    $0x4,%esp
f0105468:	68 00 10 00 00       	push   $0x1000
f010546d:	6a 00                	push   $0x0
f010546f:	50                   	push   %eax
f0105470:	e8 a4 43 02 00       	call   f0129819 <memset>
f0105475:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105478:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f010547d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105480:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105487:	77 14                	ja     f010549d <initialize_kernel_VM+0x5d>
f0105489:	ff 75 e8             	pushl  -0x18(%ebp)
f010548c:	68 38 c8 12 f0       	push   $0xf012c838
f0105491:	6a 45                	push   $0x45
f0105493:	68 6c c8 12 f0       	push   $0xf012c86c
f0105498:	e8 09 ad ff ff       	call   f01001a6 <_panic>
f010549d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01054a0:	05 00 00 00 10       	add    $0x10000000,%eax
f01054a5:	a3 48 44 6d f0       	mov    %eax,0xf06d4448
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01054aa:	c7 45 e4 00 40 17 f0 	movl   $0xf0174000,-0x1c(%ebp)
f01054b1:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01054b8:	77 14                	ja     f01054ce <initialize_kernel_VM+0x8e>
f01054ba:	ff 75 e4             	pushl  -0x1c(%ebp)
f01054bd:	68 38 c8 12 f0       	push   $0xf012c838
f01054c2:	6a 4d                	push   $0x4d
f01054c4:	68 6c c8 12 f0       	push   $0xf012c86c
f01054c9:	e8 d8 ac ff ff       	call   f01001a6 <_panic>
f01054ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01054d1:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01054d7:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f01054dc:	83 ec 0c             	sub    $0xc,%esp
f01054df:	6a 02                	push   $0x2
f01054e1:	52                   	push   %edx
f01054e2:	68 00 80 00 00       	push   $0x8000
f01054e7:	68 00 80 bf ef       	push   $0xefbf8000
f01054ec:	50                   	push   %eax
f01054ed:	e8 24 02 00 00       	call   f0105716 <boot_map_range>
f01054f2:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01054f5:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01054fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105503:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010550a:	eb 25                	jmp    f0105531 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f010550c:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010550f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105512:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105517:	83 ec 04             	sub    $0x4,%esp
f010551a:	6a 01                	push   $0x1
f010551c:	52                   	push   %edx
f010551d:	50                   	push   %eax
f010551e:	e8 67 02 00 00       	call   f010578a <boot_get_page_table>
f0105523:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105526:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f010552d:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105531:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105535:	72 d5                	jb     f010550c <initialize_kernel_VM+0xcc>
f0105537:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010553b:	77 06                	ja     f0105543 <initialize_kernel_VM+0x103>
f010553d:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105541:	76 c9                	jbe    f010550c <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105543:	8b 15 b0 43 6d f0    	mov    0xf06d43b0,%edx
f0105549:	89 d0                	mov    %edx,%eax
f010554b:	01 c0                	add    %eax,%eax
f010554d:	01 d0                	add    %edx,%eax
f010554f:	c1 e0 03             	shl    $0x3,%eax
f0105552:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105555:	83 ec 08             	sub    $0x8,%esp
f0105558:	68 00 10 00 00       	push   $0x1000
f010555d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105560:	e8 50 01 00 00       	call   f01056b5 <boot_allocate_space>
f0105565:	83 c4 10             	add    $0x10,%esp
f0105568:	a3 f0 43 6d f0       	mov    %eax,0xf06d43f0
	memset(frames_info, 0, array_size);
f010556d:	a1 f0 43 6d f0       	mov    0xf06d43f0,%eax
f0105572:	83 ec 04             	sub    $0x4,%esp
f0105575:	ff 75 e0             	pushl  -0x20(%ebp)
f0105578:	6a 00                	push   $0x0
f010557a:	50                   	push   %eax
f010557b:	e8 99 42 02 00       	call   f0129819 <memset>
f0105580:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105583:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f010558a:	83 ec 08             	sub    $0x8,%esp
f010558d:	68 00 10 00 00       	push   $0x1000
f0105592:	ff 75 dc             	pushl  -0x24(%ebp)
f0105595:	e8 1b 01 00 00       	call   f01056b5 <boot_allocate_space>
f010559a:	83 c4 10             	add    $0x10,%esp
f010559d:	a3 40 c0 66 f0       	mov    %eax,0xf066c040
	memset(disk_frames_info , 0, disk_array_size);
f01055a2:	a1 40 c0 66 f0       	mov    0xf066c040,%eax
f01055a7:	83 ec 04             	sub    $0x4,%esp
f01055aa:	ff 75 dc             	pushl  -0x24(%ebp)
f01055ad:	6a 00                	push   $0x0
f01055af:	50                   	push   %eax
f01055b0:	e8 64 42 02 00       	call   f0129819 <memset>
f01055b5:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f01055b8:	e8 02 05 00 00       	call   f0105abf <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f01055bd:	83 ec 0c             	sub    $0xc,%esp
f01055c0:	6a 08                	push   $0x8
f01055c2:	e8 ef 2d 02 00       	call   f01283b6 <nearest_pow2_ceil>
f01055c7:	83 c4 10             	add    $0x10,%esp
f01055ca:	83 ec 04             	sub    $0x4,%esp
f01055cd:	50                   	push   %eax
f01055ce:	6a 08                	push   $0x8
f01055d0:	68 8c c8 12 f0       	push   $0xf012c88c
f01055d5:	e8 53 b6 ff ff       	call   f0100c2d <cprintf>
f01055da:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01055dd:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01055e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01055e7:	83 ec 08             	sub    $0x8,%esp
f01055ea:	68 00 10 00 00       	push   $0x1000
f01055ef:	50                   	push   %eax
f01055f0:	e8 c0 00 00 00       	call   f01056b5 <boot_allocate_space>
f01055f5:	83 c4 10             	add    $0x10,%esp
f01055f8:	a3 70 46 64 f0       	mov    %eax,0xf0644670
	memset(envs , 0, envs_size);
f01055fd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105600:	a1 70 46 64 f0       	mov    0xf0644670,%eax
f0105605:	83 ec 04             	sub    $0x4,%esp
f0105608:	52                   	push   %edx
f0105609:	6a 00                	push   $0x0
f010560b:	50                   	push   %eax
f010560c:	e8 08 42 02 00       	call   f0129819 <memset>
f0105611:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105614:	a1 70 46 64 f0       	mov    0xf0644670,%eax
f0105619:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010561c:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105623:	77 17                	ja     f010563c <initialize_kernel_VM+0x1fc>
f0105625:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105628:	68 38 c8 12 f0       	push   $0xf012c838
f010562d:	68 96 00 00 00       	push   $0x96
f0105632:	68 6c c8 12 f0       	push   $0xf012c86c
f0105637:	e8 6a ab ff ff       	call   f01001a6 <_panic>
f010563c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010563f:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105645:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105648:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f010564d:	83 ec 0c             	sub    $0xc,%esp
f0105650:	6a 04                	push   $0x4
f0105652:	51                   	push   %ecx
f0105653:	52                   	push   %edx
f0105654:	68 00 00 c0 ee       	push   $0xeec00000
f0105659:	50                   	push   %eax
f010565a:	e8 b7 00 00 00       	call   f0105716 <boot_map_range>
f010565f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105662:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105667:	05 ec 0e 00 00       	add    $0xeec,%eax
f010566c:	8b 15 18 44 6d f0    	mov    0xf06d4418,%edx
f0105672:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105678:	8b 12                	mov    (%edx),%edx
f010567a:	83 ca 05             	or     $0x5,%edx
f010567d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010567f:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105684:	83 ec 0c             	sub    $0xc,%esp
f0105687:	6a 02                	push   $0x2
f0105689:	6a 00                	push   $0x0
f010568b:	68 ff ff ff 0f       	push   $0xfffffff
f0105690:	68 00 00 00 f0       	push   $0xf0000000
f0105695:	50                   	push   %eax
f0105696:	e8 7b 00 00 00       	call   f0105716 <boot_map_range>
f010569b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f010569e:	e8 ea 34 02 00       	call   f0128b8d <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f01056a3:	c7 05 a0 1f 6d f0 19 	movl   $0x19,0xf06d1fa0
f01056aa:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f01056ad:	e8 0d 03 00 00       	call   f01059bf <turn_on_paging>
}
f01056b2:	90                   	nop
f01056b3:	c9                   	leave  
f01056b4:	c3                   	ret    

f01056b5 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f01056b5:	55                   	push   %ebp
f01056b6:	89 e5                	mov    %esp,%ebp
f01056b8:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f01056bb:	a1 14 44 6d f0       	mov    0xf06d4414,%eax
f01056c0:	85 c0                	test   %eax,%eax
f01056c2:	75 0a                	jne    f01056ce <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f01056c4:	c7 05 14 44 6d f0 5c 	movl   $0xf06d455c,0xf06d4414
f01056cb:	45 6d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f01056ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01056d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01056d4:	a1 14 44 6d f0       	mov    0xf06d4414,%eax
f01056d9:	89 c2                	mov    %eax,%edx
f01056db:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01056de:	01 d0                	add    %edx,%eax
f01056e0:	48                   	dec    %eax
f01056e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01056e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01056e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01056ec:	f7 75 fc             	divl   -0x4(%ebp)
f01056ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01056f2:	29 d0                	sub    %edx,%eax
f01056f4:	a3 14 44 6d f0       	mov    %eax,0xf06d4414

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01056f9:	a1 14 44 6d f0       	mov    0xf06d4414,%eax
f01056fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105701:	8b 15 14 44 6d f0    	mov    0xf06d4414,%edx
f0105707:	8b 45 08             	mov    0x8(%ebp),%eax
f010570a:	01 d0                	add    %edx,%eax
f010570c:	a3 14 44 6d f0       	mov    %eax,0xf06d4414

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105711:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105714:	c9                   	leave  
f0105715:	c3                   	ret    

f0105716 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105716:	55                   	push   %ebp
f0105717:	89 e5                	mov    %esp,%ebp
f0105719:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f010571c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105723:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010572a:	eb 53                	jmp    f010577f <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f010572c:	83 ec 04             	sub    $0x4,%esp
f010572f:	6a 01                	push   $0x1
f0105731:	ff 75 0c             	pushl  0xc(%ebp)
f0105734:	ff 75 08             	pushl  0x8(%ebp)
f0105737:	e8 4e 00 00 00       	call   f010578a <boot_get_page_table>
f010573c:	83 c4 10             	add    $0x10,%esp
f010573f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105742:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105745:	c1 e8 0c             	shr    $0xc,%eax
f0105748:	25 ff 03 00 00       	and    $0x3ff,%eax
f010574d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105750:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105753:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010575a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010575d:	01 c2                	add    %eax,%edx
f010575f:	8b 45 18             	mov    0x18(%ebp),%eax
f0105762:	0b 45 14             	or     0x14(%ebp),%eax
f0105765:	83 c8 01             	or     $0x1,%eax
f0105768:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010576a:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105771:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105778:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010577f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105782:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105785:	72 a5                	jb     f010572c <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105787:	90                   	nop
f0105788:	c9                   	leave  
f0105789:	c3                   	ret    

f010578a <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010578a:	55                   	push   %ebp
f010578b:	89 e5                	mov    %esp,%ebp
f010578d:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105790:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105793:	c1 e8 16             	shr    $0x16,%eax
f0105796:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105799:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010579c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01057a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01057a6:	01 d0                	add    %edx,%eax
f01057a8:	8b 00                	mov    (%eax),%eax
f01057aa:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01057ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01057b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01057b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f01057b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01057be:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01057c1:	c1 e8 0c             	shr    $0xc,%eax
f01057c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01057c7:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01057cc:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01057cf:	72 17                	jb     f01057e8 <boot_get_page_table+0x5e>
f01057d1:	ff 75 e8             	pushl  -0x18(%ebp)
f01057d4:	68 b4 c8 12 f0       	push   $0xf012c8b4
f01057d9:	68 15 01 00 00       	push   $0x115
f01057de:	68 6c c8 12 f0       	push   $0xf012c86c
f01057e3:	e8 be a9 ff ff       	call   f01001a6 <_panic>
f01057e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01057eb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01057f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01057f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01057f7:	75 72                	jne    f010586b <boot_get_page_table+0xe1>
	{
		if (create)
f01057f9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01057fd:	74 65                	je     f0105864 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01057ff:	83 ec 08             	sub    $0x8,%esp
f0105802:	68 00 10 00 00       	push   $0x1000
f0105807:	68 00 10 00 00       	push   $0x1000
f010580c:	e8 a4 fe ff ff       	call   f01056b5 <boot_allocate_space>
f0105811:	83 c4 10             	add    $0x10,%esp
f0105814:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0105817:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010581a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010581d:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0105824:	77 17                	ja     f010583d <boot_get_page_table+0xb3>
f0105826:	ff 75 dc             	pushl  -0x24(%ebp)
f0105829:	68 38 c8 12 f0       	push   $0xf012c838
f010582e:	68 1b 01 00 00       	push   $0x11b
f0105833:	68 6c c8 12 f0       	push   $0xf012c86c
f0105838:	e8 69 a9 ff ff       	call   f01001a6 <_panic>
f010583d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105840:	05 00 00 00 10       	add    $0x10000000,%eax
f0105845:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0105848:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010584b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105852:	8b 45 08             	mov    0x8(%ebp),%eax
f0105855:	01 d0                	add    %edx,%eax
f0105857:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010585a:	83 ca 03             	or     $0x3,%edx
f010585d:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f010585f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105862:	eb 0a                	jmp    f010586e <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0105864:	b8 00 00 00 00       	mov    $0x0,%eax
f0105869:	eb 03                	jmp    f010586e <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f010586b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f010586e:	c9                   	leave  
f010586f:	c3                   	ret    

f0105870 <nvram_read>:


int nvram_read(int r)
{
f0105870:	55                   	push   %ebp
f0105871:	89 e5                	mov    %esp,%ebp
f0105873:	53                   	push   %ebx
f0105874:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0105877:	8b 45 08             	mov    0x8(%ebp),%eax
f010587a:	83 ec 0c             	sub    $0xc,%esp
f010587d:	50                   	push   %eax
f010587e:	e8 37 df ff ff       	call   f01037ba <mc146818_read>
f0105883:	83 c4 10             	add    $0x10,%esp
f0105886:	89 c3                	mov    %eax,%ebx
f0105888:	8b 45 08             	mov    0x8(%ebp),%eax
f010588b:	40                   	inc    %eax
f010588c:	83 ec 0c             	sub    $0xc,%esp
f010588f:	50                   	push   %eax
f0105890:	e8 25 df ff ff       	call   f01037ba <mc146818_read>
f0105895:	83 c4 10             	add    $0x10,%esp
f0105898:	c1 e0 08             	shl    $0x8,%eax
f010589b:	09 d8                	or     %ebx,%eax
}
f010589d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01058a0:	c9                   	leave  
f01058a1:	c3                   	ret    

f01058a2 <detect_memory>:

void detect_memory()
{
f01058a2:	55                   	push   %ebp
f01058a3:	89 e5                	mov    %esp,%ebp
f01058a5:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f01058a8:	83 ec 0c             	sub    $0xc,%esp
f01058ab:	6a 15                	push   $0x15
f01058ad:	e8 be ff ff ff       	call   f0105870 <nvram_read>
f01058b2:	83 c4 10             	add    $0x10,%esp
f01058b5:	c1 e0 0a             	shl    $0xa,%eax
f01058b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01058bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01058be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01058c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01058c6:	83 ec 0c             	sub    $0xc,%esp
f01058c9:	6a 17                	push   $0x17
f01058cb:	e8 a0 ff ff ff       	call   f0105870 <nvram_read>
f01058d0:	83 c4 10             	add    $0x10,%esp
f01058d3:	c1 e0 0a             	shl    $0xa,%eax
f01058d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01058d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01058dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01058e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01058e4:	83 ec 0c             	sub    $0xc,%esp
f01058e7:	6a 34                	push   $0x34
f01058e9:	e8 82 ff ff ff       	call   f0105870 <nvram_read>
f01058ee:	83 c4 10             	add    $0x10,%esp
f01058f1:	c1 e0 10             	shl    $0x10,%eax
f01058f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01058f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01058fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01058ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0105902:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0105906:	74 18                	je     f0105920 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0105908:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010590b:	05 00 00 00 01       	add    $0x1000000,%eax
f0105910:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0105913:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105916:	2d 00 00 10 00       	sub    $0x100000,%eax
f010591b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010591e:	eb 19                	jmp    f0105939 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0105920:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105924:	74 0d                	je     f0105933 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0105926:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105929:	05 00 00 10 00       	add    $0x100000,%eax
f010592e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105931:	eb 06                	jmp    f0105939 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0105933:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105936:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0105939:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0105940:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105943:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0105946:	76 32                	jbe    f010597a <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0105948:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010594b:	c1 e8 0a             	shr    $0xa,%eax
f010594e:	89 c2                	mov    %eax,%edx
f0105950:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105953:	c1 e8 0a             	shr    $0xa,%eax
f0105956:	83 ec 04             	sub    $0x4,%esp
f0105959:	52                   	push   %edx
f010595a:	50                   	push   %eax
f010595b:	68 e4 c8 12 f0       	push   $0xf012c8e4
f0105960:	e8 c8 b2 ff ff       	call   f0100c2d <cprintf>
f0105965:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0105968:	83 ec 0c             	sub    $0xc,%esp
f010596b:	68 2c c9 12 f0       	push   $0xf012c92c
f0105970:	e8 b8 b2 ff ff       	call   f0100c2d <cprintf>
f0105975:	83 c4 10             	add    $0x10,%esp
		while(1);
f0105978:	eb fe                	jmp    f0105978 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f010597a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010597d:	c1 e8 0c             	shr    $0xc,%eax
f0105980:	a3 b0 43 6d f0       	mov    %eax,0xf06d43b0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0105985:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105988:	c1 e8 0a             	shr    $0xa,%eax
f010598b:	83 ec 08             	sub    $0x8,%esp
f010598e:	50                   	push   %eax
f010598f:	68 c0 c9 12 f0       	push   $0xf012c9c0
f0105994:	e8 94 b2 ff ff       	call   f0100c2d <cprintf>
f0105999:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f010599c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010599f:	c1 e8 0a             	shr    $0xa,%eax
f01059a2:	89 c2                	mov    %eax,%edx
f01059a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059a7:	c1 e8 0a             	shr    $0xa,%eax
f01059aa:	83 ec 04             	sub    $0x4,%esp
f01059ad:	52                   	push   %edx
f01059ae:	50                   	push   %eax
f01059af:	68 e1 c9 12 f0       	push   $0xf012c9e1
f01059b4:	e8 74 b2 ff ff       	call   f0100c2d <cprintf>
f01059b9:	83 c4 10             	add    $0x10,%esp
}
f01059bc:	90                   	nop
f01059bd:	c9                   	leave  
f01059be:	c3                   	ret    

f01059bf <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01059bf:	55                   	push   %ebp
f01059c0:	89 e5                	mov    %esp,%ebp
f01059c2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01059c5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01059cc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01059d3:	eb 24                	jmp    f01059f9 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01059d5:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f01059da:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01059dd:	c1 e2 02             	shl    $0x2,%edx
f01059e0:	01 c2                	add    %eax,%edx
f01059e2:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f01059e7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01059ea:	c1 e1 02             	shl    $0x2,%ecx
f01059ed:	01 c8                	add    %ecx,%eax
f01059ef:	8b 00                	mov    (%eax),%eax
f01059f1:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01059f3:	ff 45 fc             	incl   -0x4(%ebp)
f01059f6:	ff 45 f8             	incl   -0x8(%ebp)
f01059f9:	a1 14 44 6d f0       	mov    0xf06d4414,%eax
f01059fe:	c1 e8 16             	shr    $0x16,%eax
f0105a01:	89 c2                	mov    %eax,%edx
f0105a03:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105a06:	39 c2                	cmp    %eax,%edx
f0105a08:	77 cb                	ja     f01059d5 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0105a0a:	a1 48 44 6d f0       	mov    0xf06d4448,%eax
f0105a0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105a12:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a15:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0105a18:	0f 20 c0             	mov    %cr0,%eax
f0105a1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0105a1e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0105a21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0105a24:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0105a2b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0105a2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a32:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0105a35:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105a38:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0105a3b:	0f 01 15 30 c8 17 f0 	lgdtl  0xf017c830
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0105a42:	b8 23 00 00 00       	mov    $0x23,%eax
f0105a47:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0105a49:	b8 23 00 00 00       	mov    $0x23,%eax
f0105a4e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0105a50:	b8 10 00 00 00       	mov    $0x10,%eax
f0105a55:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0105a57:	b8 10 00 00 00       	mov    $0x10,%eax
f0105a5c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0105a5e:	b8 10 00 00 00       	mov    $0x10,%eax
f0105a63:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0105a65:	ea 6c 5a 10 f0 08 00 	ljmp   $0x8,$0xf0105a6c
	asm volatile("lldt %%ax" :: "a" (0));
f0105a6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a71:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0105a74:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0105a7b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0105a82:	eb 19                	jmp    f0105a9d <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0105a84:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105a89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a8c:	c1 e2 02             	shl    $0x2,%edx
f0105a8f:	01 d0                	add    %edx,%eax
f0105a91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0105a97:	ff 45 f4             	incl   -0xc(%ebp)
f0105a9a:	ff 45 f0             	incl   -0x10(%ebp)
f0105a9d:	a1 14 44 6d f0       	mov    0xf06d4414,%eax
f0105aa2:	c1 e8 16             	shr    $0x16,%eax
f0105aa5:	89 c2                	mov    %eax,%edx
f0105aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aaa:	39 c2                	cmp    %eax,%edx
f0105aac:	77 d6                	ja     f0105a84 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0105aae:	a1 48 44 6d f0       	mov    0xf06d4448,%eax
f0105ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105ab6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ab9:	0f 22 d8             	mov    %eax,%cr3
}
f0105abc:	90                   	nop
f0105abd:	c9                   	leave  
f0105abe:	c3                   	ret    

f0105abf <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0105abf:	55                   	push   %ebp
f0105ac0:	89 e5                	mov    %esp,%ebp
f0105ac2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105ac5:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105acd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0105ad4:	77 17                	ja     f0105aed <setup_listing_to_all_page_tables_entries+0x2e>
f0105ad6:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ad9:	68 38 c8 12 f0       	push   $0xf012c838
f0105ade:	68 ab 01 00 00       	push   $0x1ab
f0105ae3:	68 6c c8 12 f0       	push   $0xf012c86c
f0105ae8:	e8 b9 a6 ff ff       	call   f01001a6 <_panic>
f0105aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105af0:	05 00 00 00 10       	add    $0x10000000,%eax
f0105af5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0105af8:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105afd:	05 fc 0e 00 00       	add    $0xefc,%eax
f0105b02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b05:	83 ca 03             	or     $0x3,%edx
f0105b08:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0105b0a:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105b0f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0105b15:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0105b1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0105b1d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0105b24:	77 17                	ja     f0105b3d <setup_listing_to_all_page_tables_entries+0x7e>
f0105b26:	ff 75 ec             	pushl  -0x14(%ebp)
f0105b29:	68 38 c8 12 f0       	push   $0xf012c838
f0105b2e:	68 b0 01 00 00       	push   $0x1b0
f0105b33:	68 6c c8 12 f0       	push   $0xf012c86c
f0105b38:	e8 69 a6 ff ff       	call   f01001a6 <_panic>
f0105b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b40:	05 00 00 00 10       	add    $0x10000000,%eax
f0105b45:	83 c8 05             	or     $0x5,%eax
f0105b48:	89 02                	mov    %eax,(%edx)

}
f0105b4a:	90                   	nop
f0105b4b:	c9                   	leave  
f0105b4c:	c3                   	ret    

f0105b4d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0105b4d:	55                   	push   %ebp
f0105b4e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0105b50:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b53:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f0105b59:	29 d0                	sub    %edx,%eax
f0105b5b:	c1 f8 03             	sar    $0x3,%eax
f0105b5e:	89 c2                	mov    %eax,%edx
f0105b60:	89 d0                	mov    %edx,%eax
f0105b62:	c1 e0 02             	shl    $0x2,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 02             	shl    $0x2,%eax
f0105b6a:	01 d0                	add    %edx,%eax
f0105b6c:	c1 e0 02             	shl    $0x2,%eax
f0105b6f:	01 d0                	add    %edx,%eax
f0105b71:	89 c1                	mov    %eax,%ecx
f0105b73:	c1 e1 08             	shl    $0x8,%ecx
f0105b76:	01 c8                	add    %ecx,%eax
f0105b78:	89 c1                	mov    %eax,%ecx
f0105b7a:	c1 e1 10             	shl    $0x10,%ecx
f0105b7d:	01 c8                	add    %ecx,%eax
f0105b7f:	01 c0                	add    %eax,%eax
f0105b81:	01 d0                	add    %edx,%eax
}
f0105b83:	5d                   	pop    %ebp
f0105b84:	c3                   	ret    

f0105b85 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0105b85:	55                   	push   %ebp
f0105b86:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0105b88:	ff 75 08             	pushl  0x8(%ebp)
f0105b8b:	e8 bd ff ff ff       	call   f0105b4d <to_frame_number>
f0105b90:	83 c4 04             	add    $0x4,%esp
f0105b93:	c1 e0 0c             	shl    $0xc,%eax
}
f0105b96:	c9                   	leave  
f0105b97:	c3                   	ret    

f0105b98 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0105b98:	55                   	push   %ebp
f0105b99:	89 e5                	mov    %esp,%ebp
f0105b9b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0105b9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ba1:	c1 e8 0c             	shr    $0xc,%eax
f0105ba4:	89 c2                	mov    %eax,%edx
f0105ba6:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0105bab:	39 c2                	cmp    %eax,%edx
f0105bad:	72 14                	jb     f0105bc3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0105baf:	83 ec 04             	sub    $0x4,%esp
f0105bb2:	68 00 ca 12 f0       	push   $0xf012ca00
f0105bb7:	6a 55                	push   $0x55
f0105bb9:	68 25 ca 12 f0       	push   $0xf012ca25
f0105bbe:	e8 e3 a5 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0105bc3:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f0105bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bcc:	c1 e8 0c             	shr    $0xc,%eax
f0105bcf:	89 c1                	mov    %eax,%ecx
f0105bd1:	89 c8                	mov    %ecx,%eax
f0105bd3:	01 c0                	add    %eax,%eax
f0105bd5:	01 c8                	add    %ecx,%eax
f0105bd7:	c1 e0 03             	shl    $0x3,%eax
f0105bda:	01 d0                	add    %edx,%eax
}
f0105bdc:	c9                   	leave  
f0105bdd:	c3                   	ret    

f0105bde <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0105bde:	55                   	push   %ebp
f0105bdf:	89 e5                	mov    %esp,%ebp
f0105be1:	83 ec 10             	sub    $0x10,%esp
f0105be4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105be7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0105bea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105bed:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0105bf0:	90                   	nop
f0105bf1:	c9                   	leave  
f0105bf2:	c3                   	ret    

f0105bf3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0105bf3:	55                   	push   %ebp
f0105bf4:	89 e5                	mov    %esp,%ebp
f0105bf6:	53                   	push   %ebx
f0105bf7:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0105bfa:	c7 05 b8 43 6d f0 00 	movl   $0x0,0xf06d43b8
f0105c01:	00 00 00 
f0105c04:	c7 05 bc 43 6d f0 00 	movl   $0x0,0xf06d43bc
f0105c0b:	00 00 00 
f0105c0e:	c7 05 c4 43 6d f0 00 	movl   $0x0,0xf06d43c4
f0105c15:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0105c18:	c7 05 20 4f 64 f0 00 	movl   $0x0,0xf0644f20
f0105c1f:	00 00 00 
f0105c22:	c7 05 24 4f 64 f0 00 	movl   $0x0,0xf0644f24
f0105c29:	00 00 00 
f0105c2c:	c7 05 2c 4f 64 f0 00 	movl   $0x0,0xf0644f2c
f0105c33:	00 00 00 

	frames_info[0].references = 1;
f0105c36:	a1 f0 43 6d f0       	mov    0xf06d43f0,%eax
f0105c3b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0105c41:	a1 f0 43 6d f0       	mov    0xf06d43f0,%eax
f0105c46:	83 c0 18             	add    $0x18,%eax
f0105c49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0105c4f:	a1 f0 43 6d f0       	mov    0xf06d43f0,%eax
f0105c54:	83 c0 30             	add    $0x30,%eax
f0105c57:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0105c5d:	c7 05 fc 43 6d f0 00 	movl   $0xf0001000,0xf06d43fc
f0105c64:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0105c67:	c7 05 20 44 6d f0 00 	movl   $0xf0002000,0xf06d4420
f0105c6e:	20 00 f0 
	i =0;
f0105c71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0105c78:	eb 1f                	jmp    f0105c99 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0105c7a:	8b 15 fc 43 6d f0    	mov    0xf06d43fc,%edx
f0105c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c83:	01 d0                	add    %edx,%eax
f0105c85:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0105c88:	8b 15 20 44 6d f0    	mov    0xf06d4420,%edx
f0105c8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c91:	01 d0                	add    %edx,%eax
f0105c93:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0105c96:	ff 45 f4             	incl   -0xc(%ebp)
f0105c99:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105ca0:	7e d8                	jle    f0105c7a <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0105ca2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0105ca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105cac:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0105cb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0105cb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105cb7:	ba 00 00 00 00       	mov    $0x0,%edx
f0105cbc:	f7 75 f0             	divl   -0x10(%ebp)
f0105cbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105cc2:	29 d0                	sub    %edx,%eax
f0105cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0105cc7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0105cce:	e9 e8 00 00 00       	jmp    f0105dbb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0105cd3:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105cd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105cdc:	89 d0                	mov    %edx,%eax
f0105cde:	01 c0                	add    %eax,%eax
f0105ce0:	01 d0                	add    %edx,%eax
f0105ce2:	c1 e0 03             	shl    $0x3,%eax
f0105ce5:	01 c8                	add    %ecx,%eax
f0105ce7:	83 ec 0c             	sub    $0xc,%esp
f0105cea:	50                   	push   %eax
f0105ceb:	e8 b7 02 00 00       	call   f0105fa7 <initialize_frame_info>
f0105cf0:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0105cf3:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105cf9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105cfc:	89 d0                	mov    %edx,%eax
f0105cfe:	01 c0                	add    %eax,%eax
f0105d00:	01 d0                	add    %edx,%eax
f0105d02:	c1 e0 03             	shl    $0x3,%eax
f0105d05:	01 c8                	add    %ecx,%eax
f0105d07:	85 c0                	test   %eax,%eax
f0105d09:	75 14                	jne    f0105d1f <initialize_paging+0x12c>
f0105d0b:	83 ec 04             	sub    $0x4,%esp
f0105d0e:	68 40 ca 12 f0       	push   $0xf012ca40
f0105d13:	6a 5c                	push   $0x5c
f0105d15:	68 63 ca 12 f0       	push   $0xf012ca63
f0105d1a:	e8 87 a4 ff ff       	call   f01001a6 <_panic>
f0105d1f:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105d25:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d28:	89 d0                	mov    %edx,%eax
f0105d2a:	01 c0                	add    %eax,%eax
f0105d2c:	01 d0                	add    %edx,%eax
f0105d2e:	c1 e0 03             	shl    $0x3,%eax
f0105d31:	01 c8                	add    %ecx,%eax
f0105d33:	8b 15 b8 43 6d f0    	mov    0xf06d43b8,%edx
f0105d39:	89 10                	mov    %edx,(%eax)
f0105d3b:	8b 00                	mov    (%eax),%eax
f0105d3d:	85 c0                	test   %eax,%eax
f0105d3f:	74 1f                	je     f0105d60 <initialize_paging+0x16d>
f0105d41:	8b 15 b8 43 6d f0    	mov    0xf06d43b8,%edx
f0105d47:	8b 1d f0 43 6d f0    	mov    0xf06d43f0,%ebx
f0105d4d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105d50:	89 c8                	mov    %ecx,%eax
f0105d52:	01 c0                	add    %eax,%eax
f0105d54:	01 c8                	add    %ecx,%eax
f0105d56:	c1 e0 03             	shl    $0x3,%eax
f0105d59:	01 d8                	add    %ebx,%eax
f0105d5b:	89 42 04             	mov    %eax,0x4(%edx)
f0105d5e:	eb 19                	jmp    f0105d79 <initialize_paging+0x186>
f0105d60:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105d66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d69:	89 d0                	mov    %edx,%eax
f0105d6b:	01 c0                	add    %eax,%eax
f0105d6d:	01 d0                	add    %edx,%eax
f0105d6f:	c1 e0 03             	shl    $0x3,%eax
f0105d72:	01 c8                	add    %ecx,%eax
f0105d74:	a3 bc 43 6d f0       	mov    %eax,0xf06d43bc
f0105d79:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105d7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d82:	89 d0                	mov    %edx,%eax
f0105d84:	01 c0                	add    %eax,%eax
f0105d86:	01 d0                	add    %edx,%eax
f0105d88:	c1 e0 03             	shl    $0x3,%eax
f0105d8b:	01 c8                	add    %ecx,%eax
f0105d8d:	a3 b8 43 6d f0       	mov    %eax,0xf06d43b8
f0105d92:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105d98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105d9b:	89 d0                	mov    %edx,%eax
f0105d9d:	01 c0                	add    %eax,%eax
f0105d9f:	01 d0                	add    %edx,%eax
f0105da1:	c1 e0 03             	shl    $0x3,%eax
f0105da4:	01 c8                	add    %ecx,%eax
f0105da6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0105dad:	a1 c4 43 6d f0       	mov    0xf06d43c4,%eax
f0105db2:	40                   	inc    %eax
f0105db3:	a3 c4 43 6d f0       	mov    %eax,0xf06d43c4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0105db8:	ff 45 f4             	incl   -0xc(%ebp)
f0105dbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dbe:	85 c0                	test   %eax,%eax
f0105dc0:	79 05                	jns    f0105dc7 <initialize_paging+0x1d4>
f0105dc2:	05 ff 0f 00 00       	add    $0xfff,%eax
f0105dc7:	c1 f8 0c             	sar    $0xc,%eax
f0105dca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105dcd:	0f 8f 00 ff ff ff    	jg     f0105cd3 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0105dd3:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0105dda:	eb 1d                	jmp    f0105df9 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0105ddc:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105de2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105de5:	89 d0                	mov    %edx,%eax
f0105de7:	01 c0                	add    %eax,%eax
f0105de9:	01 d0                	add    %edx,%eax
f0105deb:	c1 e0 03             	shl    $0x3,%eax
f0105dee:	01 c8                	add    %ecx,%eax
f0105df0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0105df6:	ff 45 f4             	incl   -0xc(%ebp)
f0105df9:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0105e00:	7e da                	jle    f0105ddc <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0105e02:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0105e09:	a1 14 44 6d f0       	mov    0xf06d4414,%eax
f0105e0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0105e11:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0105e18:	77 14                	ja     f0105e2e <initialize_paging+0x23b>
f0105e1a:	ff 75 e0             	pushl  -0x20(%ebp)
f0105e1d:	68 80 ca 12 f0       	push   $0xf012ca80
f0105e22:	6a 64                	push   $0x64
f0105e24:	68 63 ca 12 f0       	push   $0xf012ca63
f0105e29:	e8 78 a3 ff ff       	call   f01001a6 <_panic>
f0105e2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105e31:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e3a:	01 d0                	add    %edx,%eax
f0105e3c:	48                   	dec    %eax
f0105e3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0105e40:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105e43:	ba 00 00 00 00       	mov    $0x0,%edx
f0105e48:	f7 75 e4             	divl   -0x1c(%ebp)
f0105e4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105e4e:	29 d0                	sub    %edx,%eax
f0105e50:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0105e53:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0105e5a:	eb 1d                	jmp    f0105e79 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0105e5c:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105e62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105e65:	89 d0                	mov    %edx,%eax
f0105e67:	01 c0                	add    %eax,%eax
f0105e69:	01 d0                	add    %edx,%eax
f0105e6b:	c1 e0 03             	shl    $0x3,%eax
f0105e6e:	01 c8                	add    %ecx,%eax
f0105e70:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0105e76:	ff 45 f4             	incl   -0xc(%ebp)
f0105e79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105e7c:	85 c0                	test   %eax,%eax
f0105e7e:	79 05                	jns    f0105e85 <initialize_paging+0x292>
f0105e80:	05 ff 0f 00 00       	add    $0xfff,%eax
f0105e85:	c1 f8 0c             	sar    $0xc,%eax
f0105e88:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105e8b:	7f cf                	jg     f0105e5c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0105e8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105e90:	85 c0                	test   %eax,%eax
f0105e92:	79 05                	jns    f0105e99 <initialize_paging+0x2a6>
f0105e94:	05 ff 0f 00 00       	add    $0xfff,%eax
f0105e99:	c1 f8 0c             	sar    $0xc,%eax
f0105e9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e9f:	e9 e8 00 00 00       	jmp    f0105f8c <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f0105ea4:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105eaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ead:	89 d0                	mov    %edx,%eax
f0105eaf:	01 c0                	add    %eax,%eax
f0105eb1:	01 d0                	add    %edx,%eax
f0105eb3:	c1 e0 03             	shl    $0x3,%eax
f0105eb6:	01 c8                	add    %ecx,%eax
f0105eb8:	83 ec 0c             	sub    $0xc,%esp
f0105ebb:	50                   	push   %eax
f0105ebc:	e8 e6 00 00 00       	call   f0105fa7 <initialize_frame_info>
f0105ec1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0105ec4:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105eca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ecd:	89 d0                	mov    %edx,%eax
f0105ecf:	01 c0                	add    %eax,%eax
f0105ed1:	01 d0                	add    %edx,%eax
f0105ed3:	c1 e0 03             	shl    $0x3,%eax
f0105ed6:	01 c8                	add    %ecx,%eax
f0105ed8:	85 c0                	test   %eax,%eax
f0105eda:	75 14                	jne    f0105ef0 <initialize_paging+0x2fd>
f0105edc:	83 ec 04             	sub    $0x4,%esp
f0105edf:	68 40 ca 12 f0       	push   $0xf012ca40
f0105ee4:	6a 70                	push   $0x70
f0105ee6:	68 63 ca 12 f0       	push   $0xf012ca63
f0105eeb:	e8 b6 a2 ff ff       	call   f01001a6 <_panic>
f0105ef0:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105ef6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ef9:	89 d0                	mov    %edx,%eax
f0105efb:	01 c0                	add    %eax,%eax
f0105efd:	01 d0                	add    %edx,%eax
f0105eff:	c1 e0 03             	shl    $0x3,%eax
f0105f02:	01 c8                	add    %ecx,%eax
f0105f04:	8b 15 b8 43 6d f0    	mov    0xf06d43b8,%edx
f0105f0a:	89 10                	mov    %edx,(%eax)
f0105f0c:	8b 00                	mov    (%eax),%eax
f0105f0e:	85 c0                	test   %eax,%eax
f0105f10:	74 1f                	je     f0105f31 <initialize_paging+0x33e>
f0105f12:	8b 15 b8 43 6d f0    	mov    0xf06d43b8,%edx
f0105f18:	8b 1d f0 43 6d f0    	mov    0xf06d43f0,%ebx
f0105f1e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105f21:	89 c8                	mov    %ecx,%eax
f0105f23:	01 c0                	add    %eax,%eax
f0105f25:	01 c8                	add    %ecx,%eax
f0105f27:	c1 e0 03             	shl    $0x3,%eax
f0105f2a:	01 d8                	add    %ebx,%eax
f0105f2c:	89 42 04             	mov    %eax,0x4(%edx)
f0105f2f:	eb 19                	jmp    f0105f4a <initialize_paging+0x357>
f0105f31:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105f37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105f3a:	89 d0                	mov    %edx,%eax
f0105f3c:	01 c0                	add    %eax,%eax
f0105f3e:	01 d0                	add    %edx,%eax
f0105f40:	c1 e0 03             	shl    $0x3,%eax
f0105f43:	01 c8                	add    %ecx,%eax
f0105f45:	a3 bc 43 6d f0       	mov    %eax,0xf06d43bc
f0105f4a:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105f50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105f53:	89 d0                	mov    %edx,%eax
f0105f55:	01 c0                	add    %eax,%eax
f0105f57:	01 d0                	add    %edx,%eax
f0105f59:	c1 e0 03             	shl    $0x3,%eax
f0105f5c:	01 c8                	add    %ecx,%eax
f0105f5e:	a3 b8 43 6d f0       	mov    %eax,0xf06d43b8
f0105f63:	8b 0d f0 43 6d f0    	mov    0xf06d43f0,%ecx
f0105f69:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105f6c:	89 d0                	mov    %edx,%eax
f0105f6e:	01 c0                	add    %eax,%eax
f0105f70:	01 d0                	add    %edx,%eax
f0105f72:	c1 e0 03             	shl    $0x3,%eax
f0105f75:	01 c8                	add    %ecx,%eax
f0105f77:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0105f7e:	a1 c4 43 6d f0       	mov    0xf06d43c4,%eax
f0105f83:	40                   	inc    %eax
f0105f84:	a3 c4 43 6d f0       	mov    %eax,0xf06d43c4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0105f89:	ff 45 f4             	incl   -0xc(%ebp)
f0105f8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105f8f:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0105f94:	39 c2                	cmp    %eax,%edx
f0105f96:	0f 82 08 ff ff ff    	jb     f0105ea4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0105f9c:	e8 2d c8 ff ff       	call   f01027ce <initialize_disk_page_file>
}
f0105fa1:	90                   	nop
f0105fa2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105fa5:	c9                   	leave  
f0105fa6:	c3                   	ret    

f0105fa7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0105fa7:	55                   	push   %ebp
f0105fa8:	89 e5                	mov    %esp,%ebp
f0105faa:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0105fad:	83 ec 04             	sub    $0x4,%esp
f0105fb0:	6a 18                	push   $0x18
f0105fb2:	6a 00                	push   $0x0
f0105fb4:	ff 75 08             	pushl  0x8(%ebp)
f0105fb7:	e8 5d 38 02 00       	call   f0129819 <memset>
f0105fbc:	83 c4 10             	add    $0x10,%esp
}
f0105fbf:	90                   	nop
f0105fc0:	c9                   	leave  
f0105fc1:	c3                   	ret    

f0105fc2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0105fc2:	55                   	push   %ebp
f0105fc3:	89 e5                	mov    %esp,%ebp
f0105fc5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0105fc8:	8b 15 b8 43 6d f0    	mov    0xf06d43b8,%edx
f0105fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0105fd1:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0105fd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0105fda:	8b 45 08             	mov    0x8(%ebp),%eax
f0105fdd:	8b 00                	mov    (%eax),%eax
f0105fdf:	85 c0                	test   %eax,%eax
f0105fe1:	75 17                	jne    f0105ffa <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0105fe3:	83 ec 04             	sub    $0x4,%esp
f0105fe6:	68 b4 ca 12 f0       	push   $0xf012cab4
f0105feb:	68 99 00 00 00       	push   $0x99
f0105ff0:	68 63 ca 12 f0       	push   $0xf012ca63
f0105ff5:	e8 ac a1 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0105ffa:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ffd:	8b 00                	mov    (%eax),%eax
f0105fff:	85 c0                	test   %eax,%eax
f0106001:	75 17                	jne    f010601a <allocate_frame+0x58>
f0106003:	83 ec 04             	sub    $0x4,%esp
f0106006:	68 01 cb 12 f0       	push   $0xf012cb01
f010600b:	68 9c 00 00 00       	push   $0x9c
f0106010:	68 63 ca 12 f0       	push   $0xf012ca63
f0106015:	e8 8c a1 ff ff       	call   f01001a6 <_panic>
f010601a:	8b 45 08             	mov    0x8(%ebp),%eax
f010601d:	8b 00                	mov    (%eax),%eax
f010601f:	8b 00                	mov    (%eax),%eax
f0106021:	85 c0                	test   %eax,%eax
f0106023:	74 14                	je     f0106039 <allocate_frame+0x77>
f0106025:	8b 45 08             	mov    0x8(%ebp),%eax
f0106028:	8b 00                	mov    (%eax),%eax
f010602a:	8b 00                	mov    (%eax),%eax
f010602c:	8b 55 08             	mov    0x8(%ebp),%edx
f010602f:	8b 12                	mov    (%edx),%edx
f0106031:	8b 52 04             	mov    0x4(%edx),%edx
f0106034:	89 50 04             	mov    %edx,0x4(%eax)
f0106037:	eb 0d                	jmp    f0106046 <allocate_frame+0x84>
f0106039:	8b 45 08             	mov    0x8(%ebp),%eax
f010603c:	8b 00                	mov    (%eax),%eax
f010603e:	8b 40 04             	mov    0x4(%eax),%eax
f0106041:	a3 bc 43 6d f0       	mov    %eax,0xf06d43bc
f0106046:	8b 45 08             	mov    0x8(%ebp),%eax
f0106049:	8b 00                	mov    (%eax),%eax
f010604b:	8b 40 04             	mov    0x4(%eax),%eax
f010604e:	85 c0                	test   %eax,%eax
f0106050:	74 13                	je     f0106065 <allocate_frame+0xa3>
f0106052:	8b 45 08             	mov    0x8(%ebp),%eax
f0106055:	8b 00                	mov    (%eax),%eax
f0106057:	8b 40 04             	mov    0x4(%eax),%eax
f010605a:	8b 55 08             	mov    0x8(%ebp),%edx
f010605d:	8b 12                	mov    (%edx),%edx
f010605f:	8b 12                	mov    (%edx),%edx
f0106061:	89 10                	mov    %edx,(%eax)
f0106063:	eb 0c                	jmp    f0106071 <allocate_frame+0xaf>
f0106065:	8b 45 08             	mov    0x8(%ebp),%eax
f0106068:	8b 00                	mov    (%eax),%eax
f010606a:	8b 00                	mov    (%eax),%eax
f010606c:	a3 b8 43 6d f0       	mov    %eax,0xf06d43b8
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	8b 00                	mov    (%eax),%eax
f0106076:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010607c:	8b 45 08             	mov    0x8(%ebp),%eax
f010607f:	8b 00                	mov    (%eax),%eax
f0106081:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106088:	a1 c4 43 6d f0       	mov    0xf06d43c4,%eax
f010608d:	48                   	dec    %eax
f010608e:	a3 c4 43 6d f0       	mov    %eax,0xf06d43c4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0106093:	8b 45 08             	mov    0x8(%ebp),%eax
f0106096:	8b 00                	mov    (%eax),%eax
f0106098:	8a 40 14             	mov    0x14(%eax),%al
f010609b:	84 c0                	test   %al,%al
f010609d:	74 20                	je     f01060bf <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f010609f:	8b 45 08             	mov    0x8(%ebp),%eax
f01060a2:	8b 00                	mov    (%eax),%eax
f01060a4:	8b 50 0c             	mov    0xc(%eax),%edx
f01060a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01060aa:	8b 00                	mov    (%eax),%eax
f01060ac:	8b 40 10             	mov    0x10(%eax),%eax
f01060af:	8b 40 5c             	mov    0x5c(%eax),%eax
f01060b2:	83 ec 08             	sub    $0x8,%esp
f01060b5:	52                   	push   %edx
f01060b6:	50                   	push   %eax
f01060b7:	e8 3c 0c 00 00       	call   f0106cf8 <pt_clear_page_table_entry>
f01060bc:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01060bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01060c2:	8b 00                	mov    (%eax),%eax
f01060c4:	83 ec 0c             	sub    $0xc,%esp
f01060c7:	50                   	push   %eax
f01060c8:	e8 da fe ff ff       	call   f0105fa7 <initialize_frame_info>
f01060cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01060d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01060d5:	c9                   	leave  
f01060d6:	c3                   	ret    

f01060d7 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01060d7:	55                   	push   %ebp
f01060d8:	89 e5                	mov    %esp,%ebp
f01060da:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01060dd:	83 ec 0c             	sub    $0xc,%esp
f01060e0:	ff 75 08             	pushl  0x8(%ebp)
f01060e3:	e8 bf fe ff ff       	call   f0105fa7 <initialize_frame_info>
f01060e8:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01060eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01060ef:	75 17                	jne    f0106108 <free_frame+0x31>
f01060f1:	83 ec 04             	sub    $0x4,%esp
f01060f4:	68 40 ca 12 f0       	push   $0xf012ca40
f01060f9:	68 b9 00 00 00       	push   $0xb9
f01060fe:	68 63 ca 12 f0       	push   $0xf012ca63
f0106103:	e8 9e a0 ff ff       	call   f01001a6 <_panic>
f0106108:	8b 15 b8 43 6d f0    	mov    0xf06d43b8,%edx
f010610e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106111:	89 10                	mov    %edx,(%eax)
f0106113:	8b 45 08             	mov    0x8(%ebp),%eax
f0106116:	8b 00                	mov    (%eax),%eax
f0106118:	85 c0                	test   %eax,%eax
f010611a:	74 0d                	je     f0106129 <free_frame+0x52>
f010611c:	a1 b8 43 6d f0       	mov    0xf06d43b8,%eax
f0106121:	8b 55 08             	mov    0x8(%ebp),%edx
f0106124:	89 50 04             	mov    %edx,0x4(%eax)
f0106127:	eb 08                	jmp    f0106131 <free_frame+0x5a>
f0106129:	8b 45 08             	mov    0x8(%ebp),%eax
f010612c:	a3 bc 43 6d f0       	mov    %eax,0xf06d43bc
f0106131:	8b 45 08             	mov    0x8(%ebp),%eax
f0106134:	a3 b8 43 6d f0       	mov    %eax,0xf06d43b8
f0106139:	8b 45 08             	mov    0x8(%ebp),%eax
f010613c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106143:	a1 c4 43 6d f0       	mov    0xf06d43c4,%eax
f0106148:	40                   	inc    %eax
f0106149:	a3 c4 43 6d f0       	mov    %eax,0xf06d43c4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f010614e:	90                   	nop
f010614f:	c9                   	leave  
f0106150:	c3                   	ret    

f0106151 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106151:	55                   	push   %ebp
f0106152:	89 e5                	mov    %esp,%ebp
f0106154:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106157:	8b 45 08             	mov    0x8(%ebp),%eax
f010615a:	8b 40 08             	mov    0x8(%eax),%eax
f010615d:	48                   	dec    %eax
f010615e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106161:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106165:	8b 45 08             	mov    0x8(%ebp),%eax
f0106168:	8b 40 08             	mov    0x8(%eax),%eax
f010616b:	66 85 c0             	test   %ax,%ax
f010616e:	75 0e                	jne    f010617e <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106170:	83 ec 0c             	sub    $0xc,%esp
f0106173:	ff 75 08             	pushl  0x8(%ebp)
f0106176:	e8 5c ff ff ff       	call   f01060d7 <free_frame>
f010617b:	83 c4 10             	add    $0x10,%esp
}
f010617e:	90                   	nop
f010617f:	c9                   	leave  
f0106180:	c3                   	ret    

f0106181 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106181:	55                   	push   %ebp
f0106182:	89 e5                	mov    %esp,%ebp
f0106184:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106187:	8b 45 0c             	mov    0xc(%ebp),%eax
f010618a:	c1 e8 16             	shr    $0x16,%eax
f010618d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106194:	8b 45 08             	mov    0x8(%ebp),%eax
f0106197:	01 d0                	add    %edx,%eax
f0106199:	8b 00                	mov    (%eax),%eax
f010619b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010619e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061a1:	83 e0 01             	and    $0x1,%eax
f01061a4:	85 c0                	test   %eax,%eax
f01061a6:	74 4e                	je     f01061f6 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01061a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061ab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01061b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01061b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061b6:	c1 e8 0c             	shr    $0xc,%eax
f01061b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01061bc:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01061c1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01061c4:	72 17                	jb     f01061dd <get_page_table+0x5c>
f01061c6:	ff 75 f0             	pushl  -0x10(%ebp)
f01061c9:	68 20 cb 12 f0       	push   $0xf012cb20
f01061ce:	68 e2 00 00 00       	push   $0xe2
f01061d3:	68 63 ca 12 f0       	push   $0xf012ca63
f01061d8:	e8 c9 9f ff ff       	call   f01001a6 <_panic>
f01061dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061e0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01061e5:	89 c2                	mov    %eax,%edx
f01061e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01061ea:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01061ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01061f1:	e9 8f 00 00 00       	jmp    f0106285 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01061f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01061fa:	74 7b                	je     f0106277 <get_page_table+0xf6>
f01061fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01061ff:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106202:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106205:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106208:	83 ec 0c             	sub    $0xc,%esp
f010620b:	6a 00                	push   $0x0
f010620d:	e8 45 4f 00 00       	call   f010b157 <fault_handler>
f0106212:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106215:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106218:	c1 e8 16             	shr    $0x16,%eax
f010621b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106222:	8b 45 08             	mov    0x8(%ebp),%eax
f0106225:	01 d0                	add    %edx,%eax
f0106227:	8b 00                	mov    (%eax),%eax
f0106229:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010622c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010622f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106234:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106237:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010623a:	c1 e8 0c             	shr    $0xc,%eax
f010623d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106240:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0106245:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106248:	72 17                	jb     f0106261 <get_page_table+0xe0>
f010624a:	ff 75 e8             	pushl  -0x18(%ebp)
f010624d:	68 20 cb 12 f0       	push   $0xf012cb20
f0106252:	68 fa 00 00 00       	push   $0xfa
f0106257:	68 63 ca 12 f0       	push   $0xf012ca63
f010625c:	e8 45 9f ff ff       	call   f01001a6 <_panic>
f0106261:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106264:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106269:	89 c2                	mov    %eax,%edx
f010626b:	8b 45 10             	mov    0x10(%ebp),%eax
f010626e:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106270:	b8 00 00 00 00       	mov    $0x0,%eax
f0106275:	eb 0e                	jmp    f0106285 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106277:	8b 45 10             	mov    0x10(%ebp),%eax
f010627a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106280:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106285:	c9                   	leave  
f0106286:	c3                   	ret    

f0106287 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106287:	55                   	push   %ebp
f0106288:	89 e5                	mov    %esp,%ebp
f010628a:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f010628d:	83 ec 04             	sub    $0x4,%esp
f0106290:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106293:	50                   	push   %eax
f0106294:	ff 75 0c             	pushl  0xc(%ebp)
f0106297:	ff 75 08             	pushl  0x8(%ebp)
f010629a:	e8 08 00 00 00       	call   f01062a7 <__static_cpt>
f010629f:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f01062a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01062a5:	c9                   	leave  
f01062a6:	c3                   	ret    

f01062a7 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01062a7:	55                   	push   %ebp
f01062a8:	89 e5                	mov    %esp,%ebp
f01062aa:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f01062ad:	83 ec 0c             	sub    $0xc,%esp
f01062b0:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01062b3:	50                   	push   %eax
f01062b4:	e8 09 fd ff ff       	call   f0105fc2 <allocate_frame>
f01062b9:	83 c4 10             	add    $0x10,%esp
f01062bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f01062bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01062c2:	83 ec 0c             	sub    $0xc,%esp
f01062c5:	50                   	push   %eax
f01062c6:	e8 ba f8 ff ff       	call   f0105b85 <to_physical_address>
f01062cb:	83 c4 10             	add    $0x10,%esp
f01062ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f01062d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062da:	c1 e8 0c             	shr    $0xc,%eax
f01062dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01062e0:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01062e5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01062e8:	72 17                	jb     f0106301 <__static_cpt+0x5a>
f01062ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01062ed:	68 20 cb 12 f0       	push   $0xf012cb20
f01062f2:	68 30 01 00 00       	push   $0x130
f01062f7:	68 63 ca 12 f0       	push   $0xf012ca63
f01062fc:	e8 a5 9e ff ff       	call   f01001a6 <_panic>
f0106301:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106304:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106309:	89 c2                	mov    %eax,%edx
f010630b:	8b 45 10             	mov    0x10(%ebp),%eax
f010630e:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106310:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106313:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106319:	8b 45 0c             	mov    0xc(%ebp),%eax
f010631c:	c1 e8 16             	shr    $0x16,%eax
f010631f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106326:	8b 45 08             	mov    0x8(%ebp),%eax
f0106329:	01 d0                	add    %edx,%eax
f010632b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010632e:	83 ca 07             	or     $0x7,%edx
f0106331:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106333:	8b 45 10             	mov    0x10(%ebp),%eax
f0106336:	8b 00                	mov    (%eax),%eax
f0106338:	83 ec 04             	sub    $0x4,%esp
f010633b:	68 00 10 00 00       	push   $0x1000
f0106340:	6a 00                	push   $0x0
f0106342:	50                   	push   %eax
f0106343:	e8 d1 34 02 00       	call   f0129819 <memset>
f0106348:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010634b:	0f 20 d8             	mov    %cr3,%eax
f010634e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106351:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106354:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106357:	90                   	nop
f0106358:	c9                   	leave  
f0106359:	c3                   	ret    

f010635a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f010635a:	55                   	push   %ebp
f010635b:	89 e5                	mov    %esp,%ebp
f010635d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106360:	ff 75 0c             	pushl  0xc(%ebp)
f0106363:	e8 1d f8 ff ff       	call   f0105b85 <to_physical_address>
f0106368:	83 c4 04             	add    $0x4,%esp
f010636b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f010636e:	83 ec 04             	sub    $0x4,%esp
f0106371:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106374:	50                   	push   %eax
f0106375:	ff 75 10             	pushl  0x10(%ebp)
f0106378:	ff 75 08             	pushl  0x8(%ebp)
f010637b:	e8 01 fe ff ff       	call   f0106181 <get_page_table>
f0106380:	83 c4 10             	add    $0x10,%esp
f0106383:	83 f8 01             	cmp    $0x1,%eax
f0106386:	75 15                	jne    f010639d <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106388:	83 ec 04             	sub    $0x4,%esp
f010638b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010638e:	50                   	push   %eax
f010638f:	ff 75 10             	pushl  0x10(%ebp)
f0106392:	ff 75 08             	pushl  0x8(%ebp)
f0106395:	e8 0d ff ff ff       	call   f01062a7 <__static_cpt>
f010639a:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f010639d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063a0:	8b 55 10             	mov    0x10(%ebp),%edx
f01063a3:	c1 ea 0c             	shr    $0xc,%edx
f01063a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01063ac:	c1 e2 02             	shl    $0x2,%edx
f01063af:	01 d0                	add    %edx,%eax
f01063b1:	8b 00                	mov    (%eax),%eax
f01063b3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f01063b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01063b9:	83 e0 01             	and    $0x1,%eax
f01063bc:	85 c0                	test   %eax,%eax
f01063be:	74 25                	je     f01063e5 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f01063c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01063c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01063c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01063cb:	75 07                	jne    f01063d4 <map_frame+0x7a>
			return 0;
f01063cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01063d2:	eb 43                	jmp    f0106417 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f01063d4:	83 ec 08             	sub    $0x8,%esp
f01063d7:	ff 75 10             	pushl  0x10(%ebp)
f01063da:	ff 75 08             	pushl  0x8(%ebp)
f01063dd:	e8 a7 00 00 00       	call   f0106489 <unmap_frame>
f01063e2:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f01063e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063e8:	8b 40 08             	mov    0x8(%eax),%eax
f01063eb:	40                   	inc    %eax
f01063ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01063ef:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01063f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063f6:	8b 55 10             	mov    0x10(%ebp),%edx
f01063f9:	c1 ea 0c             	shr    $0xc,%edx
f01063fc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106402:	c1 e2 02             	shl    $0x2,%edx
f0106405:	01 c2                	add    %eax,%edx
f0106407:	8b 45 14             	mov    0x14(%ebp),%eax
f010640a:	0b 45 f4             	or     -0xc(%ebp),%eax
f010640d:	83 c8 01             	or     $0x1,%eax
f0106410:	89 02                	mov    %eax,(%edx)

	return 0;
f0106412:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106417:	c9                   	leave  
f0106418:	c3                   	ret    

f0106419 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106419:	55                   	push   %ebp
f010641a:	89 e5                	mov    %esp,%ebp
f010641c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f010641f:	83 ec 04             	sub    $0x4,%esp
f0106422:	ff 75 10             	pushl  0x10(%ebp)
f0106425:	ff 75 0c             	pushl  0xc(%ebp)
f0106428:	ff 75 08             	pushl  0x8(%ebp)
f010642b:	e8 51 fd ff ff       	call   f0106181 <get_page_table>
f0106430:	83 c4 10             	add    $0x10,%esp
f0106433:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106436:	8b 45 10             	mov    0x10(%ebp),%eax
f0106439:	8b 00                	mov    (%eax),%eax
f010643b:	85 c0                	test   %eax,%eax
f010643d:	74 43                	je     f0106482 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f010643f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106442:	c1 e8 0c             	shr    $0xc,%eax
f0106445:	25 ff 03 00 00       	and    $0x3ff,%eax
f010644a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f010644d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106450:	8b 00                	mov    (%eax),%eax
f0106452:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106455:	c1 e2 02             	shl    $0x2,%edx
f0106458:	01 d0                	add    %edx,%eax
f010645a:	8b 00                	mov    (%eax),%eax
f010645c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f010645f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106463:	74 16                	je     f010647b <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106465:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106468:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010646d:	83 ec 0c             	sub    $0xc,%esp
f0106470:	50                   	push   %eax
f0106471:	e8 22 f7 ff ff       	call   f0105b98 <to_frame_info>
f0106476:	83 c4 10             	add    $0x10,%esp
f0106479:	eb 0c                	jmp    f0106487 <get_frame_info+0x6e>
		}
		return 0;
f010647b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106480:	eb 05                	jmp    f0106487 <get_frame_info+0x6e>
	}
	return 0;
f0106482:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106487:	c9                   	leave  
f0106488:	c3                   	ret    

f0106489 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106489:	55                   	push   %ebp
f010648a:	89 e5                	mov    %esp,%ebp
f010648c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f010648f:	83 ec 04             	sub    $0x4,%esp
f0106492:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106495:	50                   	push   %eax
f0106496:	ff 75 0c             	pushl  0xc(%ebp)
f0106499:	ff 75 08             	pushl  0x8(%ebp)
f010649c:	e8 78 ff ff ff       	call   f0106419 <get_frame_info>
f01064a1:	83 c4 10             	add    $0x10,%esp
f01064a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f01064a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01064ab:	74 60                	je     f010650d <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f01064ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064b0:	8a 40 14             	mov    0x14(%eax),%al
f01064b3:	84 c0                	test   %al,%al
f01064b5:	74 1c                	je     f01064d3 <unmap_frame+0x4a>
f01064b7:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01064be:	77 13                	ja     f01064d3 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f01064c0:	83 ec 08             	sub    $0x8,%esp
f01064c3:	ff 75 0c             	pushl  0xc(%ebp)
f01064c6:	68 50 cb 12 f0       	push   $0xf012cb50
f01064cb:	e8 5d a7 ff ff       	call   f0100c2d <cprintf>
f01064d0:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f01064d3:	83 ec 0c             	sub    $0xc,%esp
f01064d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01064d9:	e8 73 fc ff ff       	call   f0106151 <decrement_references>
f01064de:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f01064e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01064e4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01064e7:	c1 ea 0c             	shr    $0xc,%edx
f01064ea:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01064f0:	c1 e2 02             	shl    $0x2,%edx
f01064f3:	01 d0                	add    %edx,%eax
f01064f5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f01064fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01064fe:	83 ec 08             	sub    $0x8,%esp
f0106501:	50                   	push   %eax
f0106502:	ff 75 08             	pushl  0x8(%ebp)
f0106505:	e8 d4 f6 ff ff       	call   f0105bde <tlb_invalidate>
f010650a:	83 c4 10             	add    $0x10,%esp
	}
}
f010650d:	90                   	nop
f010650e:	c9                   	leave  
f010650f:	c3                   	ret    

f0106510 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106510:	55                   	push   %ebp
f0106511:	89 e5                	mov    %esp,%ebp
f0106513:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106516:	ff 75 0c             	pushl  0xc(%ebp)
f0106519:	e8 67 f6 ff ff       	call   f0105b85 <to_physical_address>
f010651e:	83 c4 04             	add    $0x4,%esp
f0106521:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106524:	8b 45 10             	mov    0x10(%ebp),%eax
f0106527:	c1 e8 16             	shr    $0x16,%eax
f010652a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106531:	8b 45 08             	mov    0x8(%ebp),%eax
f0106534:	01 d0                	add    %edx,%eax
f0106536:	8b 00                	mov    (%eax),%eax
f0106538:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010653b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010653e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106543:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106546:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106549:	c1 e8 0c             	shr    $0xc,%eax
f010654c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010654f:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0106554:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106557:	72 17                	jb     f0106570 <loadtime_map_frame+0x60>
f0106559:	ff 75 ec             	pushl  -0x14(%ebp)
f010655c:	68 20 cb 12 f0       	push   $0xf012cb20
f0106561:	68 e6 01 00 00       	push   $0x1e6
f0106566:	68 63 ca 12 f0       	push   $0xf012ca63
f010656b:	e8 36 9c ff ff       	call   f01001a6 <_panic>
f0106570:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106573:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106578:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f010657b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010657f:	75 15                	jne    f0106596 <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106581:	83 ec 04             	sub    $0x4,%esp
f0106584:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106587:	50                   	push   %eax
f0106588:	ff 75 10             	pushl  0x10(%ebp)
f010658b:	ff 75 08             	pushl  0x8(%ebp)
f010658e:	e8 14 fd ff ff       	call   f01062a7 <__static_cpt>
f0106593:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106596:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106599:	8b 40 08             	mov    0x8(%eax),%eax
f010659c:	40                   	inc    %eax
f010659d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01065a0:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01065a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01065a7:	8b 55 10             	mov    0x10(%ebp),%edx
f01065aa:	c1 ea 0c             	shr    $0xc,%edx
f01065ad:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01065b3:	c1 e2 02             	shl    $0x2,%edx
f01065b6:	01 c2                	add    %eax,%edx
f01065b8:	8b 45 14             	mov    0x14(%ebp),%eax
f01065bb:	0b 45 f4             	or     -0xc(%ebp),%eax
f01065be:	83 c8 01             	or     $0x1,%eax
f01065c1:	89 02                	mov    %eax,(%edx)

	return 0;
f01065c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01065c8:	c9                   	leave  
f01065c9:	c3                   	ret    

f01065ca <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f01065ca:	55                   	push   %ebp
f01065cb:	89 e5                	mov    %esp,%ebp
f01065cd:	57                   	push   %edi
f01065ce:	56                   	push   %esi
f01065cf:	53                   	push   %ebx
f01065d0:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01065d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01065da:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f01065e1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f01065e8:	a1 b8 43 6d f0       	mov    0xf06d43b8,%eax
f01065ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01065f0:	eb 1a                	jmp    f010660c <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f01065f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065f5:	8a 40 14             	mov    0x14(%eax),%al
f01065f8:	84 c0                	test   %al,%al
f01065fa:	74 05                	je     f0106601 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f01065fc:	ff 45 e8             	incl   -0x18(%ebp)
f01065ff:	eb 03                	jmp    f0106604 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106601:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106604:	a1 c0 43 6d f0       	mov    0xf06d43c0,%eax
f0106609:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010660c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106610:	74 07                	je     f0106619 <calculate_available_frames+0x4f>
f0106612:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106615:	8b 00                	mov    (%eax),%eax
f0106617:	eb 05                	jmp    f010661e <calculate_available_frames+0x54>
f0106619:	b8 00 00 00 00       	mov    $0x0,%eax
f010661e:	a3 c0 43 6d f0       	mov    %eax,0xf06d43c0
f0106623:	a1 c0 43 6d f0       	mov    0xf06d43c0,%eax
f0106628:	85 c0                	test   %eax,%eax
f010662a:	75 c6                	jne    f01065f2 <calculate_available_frames+0x28>
f010662c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106630:	75 c0                	jne    f01065f2 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106632:	a1 20 4f 64 f0       	mov    0xf0644f20,%eax
f0106637:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010663a:	eb 0b                	jmp    f0106647 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010663c:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010663f:	a1 28 4f 64 f0       	mov    0xf0644f28,%eax
f0106644:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106647:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010664b:	74 07                	je     f0106654 <calculate_available_frames+0x8a>
f010664d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106650:	8b 00                	mov    (%eax),%eax
f0106652:	eb 05                	jmp    f0106659 <calculate_available_frames+0x8f>
f0106654:	b8 00 00 00 00       	mov    $0x0,%eax
f0106659:	a3 28 4f 64 f0       	mov    %eax,0xf0644f28
f010665e:	a1 28 4f 64 f0       	mov    0xf0644f28,%eax
f0106663:	85 c0                	test   %eax,%eax
f0106665:	75 d5                	jne    f010663c <calculate_available_frames+0x72>
f0106667:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010666b:	75 cf                	jne    f010663c <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010666d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106670:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106673:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106676:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106679:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010667c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f010667f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106682:	89 c3                	mov    %eax,%ebx
f0106684:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106687:	ba 03 00 00 00       	mov    $0x3,%edx
f010668c:	89 df                	mov    %ebx,%edi
f010668e:	89 c6                	mov    %eax,%esi
f0106690:	89 d1                	mov    %edx,%ecx
f0106692:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106694:	8b 45 08             	mov    0x8(%ebp),%eax
f0106697:	83 c4 20             	add    $0x20,%esp
f010669a:	5b                   	pop    %ebx
f010669b:	5e                   	pop    %esi
f010669c:	5f                   	pop    %edi
f010669d:	5d                   	pop    %ebp
f010669e:	c2 04 00             	ret    $0x4

f01066a1 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01066a1:	55                   	push   %ebp
f01066a2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01066a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01066a7:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f01066ad:	29 d0                	sub    %edx,%eax
f01066af:	c1 f8 03             	sar    $0x3,%eax
f01066b2:	89 c2                	mov    %eax,%edx
f01066b4:	89 d0                	mov    %edx,%eax
f01066b6:	c1 e0 02             	shl    $0x2,%eax
f01066b9:	01 d0                	add    %edx,%eax
f01066bb:	c1 e0 02             	shl    $0x2,%eax
f01066be:	01 d0                	add    %edx,%eax
f01066c0:	c1 e0 02             	shl    $0x2,%eax
f01066c3:	01 d0                	add    %edx,%eax
f01066c5:	89 c1                	mov    %eax,%ecx
f01066c7:	c1 e1 08             	shl    $0x8,%ecx
f01066ca:	01 c8                	add    %ecx,%eax
f01066cc:	89 c1                	mov    %eax,%ecx
f01066ce:	c1 e1 10             	shl    $0x10,%ecx
f01066d1:	01 c8                	add    %ecx,%eax
f01066d3:	01 c0                	add    %eax,%eax
f01066d5:	01 d0                	add    %edx,%eax
}
f01066d7:	5d                   	pop    %ebp
f01066d8:	c3                   	ret    

f01066d9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01066d9:	55                   	push   %ebp
f01066da:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01066dc:	ff 75 08             	pushl  0x8(%ebp)
f01066df:	e8 bd ff ff ff       	call   f01066a1 <to_frame_number>
f01066e4:	83 c4 04             	add    $0x4,%esp
f01066e7:	c1 e0 0c             	shl    $0xc,%eax
}
f01066ea:	c9                   	leave  
f01066eb:	c3                   	ret    

f01066ec <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01066ec:	55                   	push   %ebp
f01066ed:	89 e5                	mov    %esp,%ebp
f01066ef:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01066f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01066f5:	c1 e8 0c             	shr    $0xc,%eax
f01066f8:	89 c2                	mov    %eax,%edx
f01066fa:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01066ff:	39 c2                	cmp    %eax,%edx
f0106701:	72 14                	jb     f0106717 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106703:	83 ec 04             	sub    $0x4,%esp
f0106706:	68 74 cb 12 f0       	push   $0xf012cb74
f010670b:	6a 55                	push   $0x55
f010670d:	68 99 cb 12 f0       	push   $0xf012cb99
f0106712:	e8 8f 9a ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106717:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f010671d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106720:	c1 e8 0c             	shr    $0xc,%eax
f0106723:	89 c1                	mov    %eax,%ecx
f0106725:	89 c8                	mov    %ecx,%eax
f0106727:	01 c0                	add    %eax,%eax
f0106729:	01 c8                	add    %ecx,%eax
f010672b:	c1 e0 03             	shl    $0x3,%eax
f010672e:	01 d0                	add    %edx,%eax
}
f0106730:	c9                   	leave  
f0106731:	c3                   	ret    

f0106732 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106732:	55                   	push   %ebp
f0106733:	89 e5                	mov    %esp,%ebp
f0106735:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106738:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010673f:	eb 5f                	jmp    f01067a0 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106741:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106744:	89 d0                	mov    %edx,%eax
f0106746:	01 c0                	add    %eax,%eax
f0106748:	01 d0                	add    %edx,%eax
f010674a:	01 c0                	add    %eax,%eax
f010674c:	01 d0                	add    %edx,%eax
f010674e:	c1 e0 02             	shl    $0x2,%eax
f0106751:	01 d0                	add    %edx,%eax
f0106753:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010675a:	01 d0                	add    %edx,%eax
f010675c:	c1 e0 04             	shl    $0x4,%eax
f010675f:	05 60 c0 66 f0       	add    $0xf066c060,%eax
f0106764:	83 ec 04             	sub    $0x4,%esp
f0106767:	68 50 10 00 00       	push   $0x1050
f010676c:	6a 00                	push   $0x0
f010676e:	50                   	push   %eax
f010676f:	e8 a5 30 02 00       	call   f0129819 <memset>
f0106774:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106777:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010677a:	89 d0                	mov    %edx,%eax
f010677c:	01 c0                	add    %eax,%eax
f010677e:	01 d0                	add    %edx,%eax
f0106780:	01 c0                	add    %eax,%eax
f0106782:	01 d0                	add    %edx,%eax
f0106784:	c1 e0 02             	shl    $0x2,%eax
f0106787:	01 d0                	add    %edx,%eax
f0106789:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106790:	01 d0                	add    %edx,%eax
f0106792:	c1 e0 04             	shl    $0x4,%eax
f0106795:	05 ad c0 66 f0       	add    $0xf066c0ad,%eax
f010679a:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010679d:	ff 45 f4             	incl   -0xc(%ebp)
f01067a0:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f01067a4:	7e 9b                	jle    f0106741 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01067a6:	90                   	nop
f01067a7:	c9                   	leave  
f01067a8:	c3                   	ret    

f01067a9 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01067a9:	55                   	push   %ebp
f01067aa:	89 e5                	mov    %esp,%ebp
f01067ac:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f01067af:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01067b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01067bd:	eb 34                	jmp    f01067f3 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f01067bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01067c2:	89 d0                	mov    %edx,%eax
f01067c4:	01 c0                	add    %eax,%eax
f01067c6:	01 d0                	add    %edx,%eax
f01067c8:	01 c0                	add    %eax,%eax
f01067ca:	01 d0                	add    %edx,%eax
f01067cc:	c1 e0 02             	shl    $0x2,%eax
f01067cf:	01 d0                	add    %edx,%eax
f01067d1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01067d8:	01 d0                	add    %edx,%eax
f01067da:	c1 e0 04             	shl    $0x4,%eax
f01067dd:	05 ad c0 66 f0       	add    $0xf066c0ad,%eax
f01067e2:	8a 00                	mov    (%eax),%al
f01067e4:	84 c0                	test   %al,%al
f01067e6:	74 08                	je     f01067f0 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f01067e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01067eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01067ee:	eb 09                	jmp    f01067f9 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01067f0:	ff 45 f0             	incl   -0x10(%ebp)
f01067f3:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01067f7:	7e c6                	jle    f01067bf <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01067f9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f01067fd:	75 14                	jne    f0106813 <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f01067ff:	83 ec 04             	sub    $0x4,%esp
f0106802:	68 b4 cb 12 f0       	push   $0xf012cbb4
f0106807:	6a 54                	push   $0x54
f0106809:	68 04 cc 12 f0       	push   $0xf012cc04
f010680e:	e8 93 99 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0106813:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106816:	89 d0                	mov    %edx,%eax
f0106818:	01 c0                	add    %eax,%eax
f010681a:	01 d0                	add    %edx,%eax
f010681c:	01 c0                	add    %eax,%eax
f010681e:	01 d0                	add    %edx,%eax
f0106820:	c1 e0 02             	shl    $0x2,%eax
f0106823:	01 d0                	add    %edx,%eax
f0106825:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010682c:	01 d0                	add    %edx,%eax
f010682e:	c1 e0 04             	shl    $0x4,%eax
f0106831:	8d 90 60 c0 66 f0    	lea    -0xf993fa0(%eax),%edx
f0106837:	8b 45 08             	mov    0x8(%ebp),%eax
f010683a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010683c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010683f:	89 d0                	mov    %edx,%eax
f0106841:	01 c0                	add    %eax,%eax
f0106843:	01 d0                	add    %edx,%eax
f0106845:	01 c0                	add    %eax,%eax
f0106847:	01 d0                	add    %edx,%eax
f0106849:	c1 e0 02             	shl    $0x2,%eax
f010684c:	01 d0                	add    %edx,%eax
f010684e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106855:	01 d0                	add    %edx,%eax
f0106857:	c1 e0 04             	shl    $0x4,%eax
f010685a:	05 ad c0 66 f0       	add    $0xf066c0ad,%eax
f010685f:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0106862:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106865:	89 d0                	mov    %edx,%eax
f0106867:	01 c0                	add    %eax,%eax
f0106869:	01 d0                	add    %edx,%eax
f010686b:	01 c0                	add    %eax,%eax
f010686d:	01 d0                	add    %edx,%eax
f010686f:	c1 e0 02             	shl    $0x2,%eax
f0106872:	01 d0                	add    %edx,%eax
f0106874:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010687b:	01 d0                	add    %edx,%eax
f010687d:	c1 e0 04             	shl    $0x4,%eax
f0106880:	83 c0 50             	add    $0x50,%eax
f0106883:	05 60 c0 66 f0       	add    $0xf066c060,%eax
f0106888:	83 ec 04             	sub    $0x4,%esp
f010688b:	68 00 10 00 00       	push   $0x1000
f0106890:	6a 00                	push   $0x0
f0106892:	50                   	push   %eax
f0106893:	e8 81 2f 02 00       	call   f0129819 <memset>
f0106898:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010689b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010689e:	c9                   	leave  
f010689f:	c3                   	ret    

f01068a0 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01068a0:	55                   	push   %ebp
f01068a1:	89 e5                	mov    %esp,%ebp
f01068a3:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01068a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01068ad:	e9 95 00 00 00       	jmp    f0106947 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f01068b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068b5:	89 d0                	mov    %edx,%eax
f01068b7:	01 c0                	add    %eax,%eax
f01068b9:	01 d0                	add    %edx,%eax
f01068bb:	01 c0                	add    %eax,%eax
f01068bd:	01 d0                	add    %edx,%eax
f01068bf:	c1 e0 02             	shl    $0x2,%eax
f01068c2:	01 d0                	add    %edx,%eax
f01068c4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01068cb:	01 d0                	add    %edx,%eax
f01068cd:	c1 e0 04             	shl    $0x4,%eax
f01068d0:	05 ad c0 66 f0       	add    $0xf066c0ad,%eax
f01068d5:	8a 00                	mov    (%eax),%al
f01068d7:	84 c0                	test   %al,%al
f01068d9:	75 68                	jne    f0106943 <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01068db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068de:	89 d0                	mov    %edx,%eax
f01068e0:	01 c0                	add    %eax,%eax
f01068e2:	01 d0                	add    %edx,%eax
f01068e4:	01 c0                	add    %eax,%eax
f01068e6:	01 d0                	add    %edx,%eax
f01068e8:	c1 e0 02             	shl    $0x2,%eax
f01068eb:	01 d0                	add    %edx,%eax
f01068ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01068f4:	01 d0                	add    %edx,%eax
f01068f6:	c1 e0 04             	shl    $0x4,%eax
f01068f9:	05 60 c0 66 f0       	add    $0xf066c060,%eax
f01068fe:	8b 00                	mov    (%eax),%eax
f0106900:	3b 45 08             	cmp    0x8(%ebp),%eax
f0106903:	75 3f                	jne    f0106944 <get_share_object_ID+0xa4>
f0106905:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106908:	89 d0                	mov    %edx,%eax
f010690a:	01 c0                	add    %eax,%eax
f010690c:	01 d0                	add    %edx,%eax
f010690e:	01 c0                	add    %eax,%eax
f0106910:	01 d0                	add    %edx,%eax
f0106912:	c1 e0 02             	shl    $0x2,%eax
f0106915:	01 d0                	add    %edx,%eax
f0106917:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010691e:	01 d0                	add    %edx,%eax
f0106920:	c1 e0 04             	shl    $0x4,%eax
f0106923:	05 60 c0 66 f0       	add    $0xf066c060,%eax
f0106928:	83 c0 04             	add    $0x4,%eax
f010692b:	83 ec 08             	sub    $0x8,%esp
f010692e:	50                   	push   %eax
f010692f:	ff 75 0c             	pushl  0xc(%ebp)
f0106932:	e8 00 2e 02 00       	call   f0129737 <strcmp>
f0106937:	83 c4 10             	add    $0x10,%esp
f010693a:	85 c0                	test   %eax,%eax
f010693c:	75 06                	jne    f0106944 <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f010693e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106941:	eb 13                	jmp    f0106956 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0106943:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0106944:	ff 45 f4             	incl   -0xc(%ebp)
f0106947:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010694b:	0f 8e 61 ff ff ff    	jle    f01068b2 <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0106951:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0106956:	c9                   	leave  
f0106957:	c3                   	ret    

f0106958 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0106958:	55                   	push   %ebp
f0106959:	89 e5                	mov    %esp,%ebp
f010695b:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010695e:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0106962:	76 0a                	jbe    f010696e <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0106964:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0106969:	e9 93 00 00 00       	jmp    f0106a01 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010696e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106971:	89 d0                	mov    %edx,%eax
f0106973:	01 c0                	add    %eax,%eax
f0106975:	01 d0                	add    %edx,%eax
f0106977:	01 c0                	add    %eax,%eax
f0106979:	01 d0                	add    %edx,%eax
f010697b:	c1 e0 02             	shl    $0x2,%eax
f010697e:	01 d0                	add    %edx,%eax
f0106980:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106987:	01 d0                	add    %edx,%eax
f0106989:	c1 e0 04             	shl    $0x4,%eax
f010698c:	83 c0 50             	add    $0x50,%eax
f010698f:	05 60 c0 66 f0       	add    $0xf066c060,%eax
f0106994:	83 ec 0c             	sub    $0xc,%esp
f0106997:	50                   	push   %eax
f0106998:	e8 3e 01 00 00       	call   f0106adb <clear_frames_storage>
f010699d:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01069a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01069a3:	89 d0                	mov    %edx,%eax
f01069a5:	01 c0                	add    %eax,%eax
f01069a7:	01 d0                	add    %edx,%eax
f01069a9:	01 c0                	add    %eax,%eax
f01069ab:	01 d0                	add    %edx,%eax
f01069ad:	c1 e0 02             	shl    $0x2,%eax
f01069b0:	01 d0                	add    %edx,%eax
f01069b2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01069b9:	01 d0                	add    %edx,%eax
f01069bb:	c1 e0 04             	shl    $0x4,%eax
f01069be:	05 60 c0 66 f0       	add    $0xf066c060,%eax
f01069c3:	83 ec 04             	sub    $0x4,%esp
f01069c6:	68 50 10 00 00       	push   $0x1050
f01069cb:	6a 00                	push   $0x0
f01069cd:	50                   	push   %eax
f01069ce:	e8 46 2e 02 00       	call   f0129819 <memset>
f01069d3:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01069d6:	8b 55 08             	mov    0x8(%ebp),%edx
f01069d9:	89 d0                	mov    %edx,%eax
f01069db:	01 c0                	add    %eax,%eax
f01069dd:	01 d0                	add    %edx,%eax
f01069df:	01 c0                	add    %eax,%eax
f01069e1:	01 d0                	add    %edx,%eax
f01069e3:	c1 e0 02             	shl    $0x2,%eax
f01069e6:	01 d0                	add    %edx,%eax
f01069e8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01069ef:	01 d0                	add    %edx,%eax
f01069f1:	c1 e0 04             	shl    $0x4,%eax
f01069f4:	05 ad c0 66 f0       	add    $0xf066c0ad,%eax
f01069f9:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01069fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a01:	c9                   	leave  
f0106a02:	c3                   	ret    

f0106a03 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0106a03:	55                   	push   %ebp
f0106a04:	89 e5                	mov    %esp,%ebp
f0106a06:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0106a09:	83 ec 0c             	sub    $0xc,%esp
f0106a0c:	68 00 10 00 00       	push   $0x1000
f0106a11:	e8 de 01 00 00       	call   f0106bf4 <kmalloc>
f0106a16:	83 c4 10             	add    $0x10,%esp
f0106a19:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0106a1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106a20:	75 17                	jne    f0106a39 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106a22:	83 ec 04             	sub    $0x4,%esp
f0106a25:	68 25 cc 12 f0       	push   $0xf012cc25
f0106a2a:	68 a9 00 00 00       	push   $0xa9
f0106a2f:	68 04 cc 12 f0       	push   $0xf012cc04
f0106a34:	e8 6d 97 ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0106a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a3c:	c9                   	leave  
f0106a3d:	c3                   	ret    

f0106a3e <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0106a3e:	55                   	push   %ebp
f0106a3f:	89 e5                	mov    %esp,%ebp
f0106a41:	53                   	push   %ebx
f0106a42:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0106a45:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a48:	c1 e0 0c             	shl    $0xc,%eax
f0106a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0106a4e:	83 ec 04             	sub    $0x4,%esp
f0106a51:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106a54:	50                   	push   %eax
f0106a55:	ff 75 f4             	pushl  -0xc(%ebp)
f0106a58:	ff 75 08             	pushl  0x8(%ebp)
f0106a5b:	e8 21 f7 ff ff       	call   f0106181 <get_page_table>
f0106a60:	83 c4 10             	add    $0x10,%esp
f0106a63:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0106a66:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0106a6a:	75 15                	jne    f0106a81 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0106a6c:	83 ec 04             	sub    $0x4,%esp
f0106a6f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106a72:	50                   	push   %eax
f0106a73:	ff 75 f4             	pushl  -0xc(%ebp)
f0106a76:	ff 75 08             	pushl  0x8(%ebp)
f0106a79:	e8 29 f8 ff ff       	call   f01062a7 <__static_cpt>
f0106a7e:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0106a81:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106a87:	c1 ea 0c             	shr    $0xc,%edx
f0106a8a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106a90:	c1 e2 02             	shl    $0x2,%edx
f0106a93:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0106a96:	83 ec 0c             	sub    $0xc,%esp
f0106a99:	ff 75 0c             	pushl  0xc(%ebp)
f0106a9c:	e8 38 fc ff ff       	call   f01066d9 <to_physical_address>
f0106aa1:	83 c4 10             	add    $0x10,%esp
f0106aa4:	83 c8 01             	or     $0x1,%eax
f0106aa7:	89 03                	mov    %eax,(%ebx)
}
f0106aa9:	90                   	nop
f0106aaa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106aad:	c9                   	leave  
f0106aae:	c3                   	ret    

f0106aaf <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0106aaf:	55                   	push   %ebp
f0106ab0:	89 e5                	mov    %esp,%ebp
f0106ab2:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0106ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ab8:	c1 e0 0c             	shl    $0xc,%eax
f0106abb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0106abe:	83 ec 04             	sub    $0x4,%esp
f0106ac1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106ac4:	50                   	push   %eax
f0106ac5:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ac8:	ff 75 08             	pushl  0x8(%ebp)
f0106acb:	e8 49 f9 ff ff       	call   f0106419 <get_frame_info>
f0106ad0:	83 c4 10             	add    $0x10,%esp
f0106ad3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0106ad6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0106ad9:	c9                   	leave  
f0106ada:	c3                   	ret    

f0106adb <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0106adb:	55                   	push   %ebp
f0106adc:	89 e5                	mov    %esp,%ebp
f0106ade:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0106ae1:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0106ae8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106aef:	eb 5b                	jmp    f0106b4c <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0106af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106af4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106afb:	8b 45 08             	mov    0x8(%ebp),%eax
f0106afe:	01 d0                	add    %edx,%eax
f0106b00:	8b 00                	mov    (%eax),%eax
f0106b02:	85 c0                	test   %eax,%eax
f0106b04:	74 43                	je     f0106b49 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0106b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b09:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b13:	01 d0                	add    %edx,%eax
f0106b15:	8b 00                	mov    (%eax),%eax
f0106b17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b1c:	83 ec 0c             	sub    $0xc,%esp
f0106b1f:	50                   	push   %eax
f0106b20:	e8 c7 fb ff ff       	call   f01066ec <to_frame_info>
f0106b25:	83 c4 10             	add    $0x10,%esp
f0106b28:	83 ec 0c             	sub    $0xc,%esp
f0106b2b:	50                   	push   %eax
f0106b2c:	e8 a6 f5 ff ff       	call   f01060d7 <free_frame>
f0106b31:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0106b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b37:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b41:	01 d0                	add    %edx,%eax
f0106b43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0106b49:	ff 45 f4             	incl   -0xc(%ebp)
f0106b4c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106b53:	7e 9c                	jle    f0106af1 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0106b55:	90                   	nop
f0106b56:	c9                   	leave  
f0106b57:	c3                   	ret    

f0106b58 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0106b58:	55                   	push   %ebp
f0106b59:	89 e5                	mov    %esp,%ebp
f0106b5b:	83 ec 18             	sub    $0x18,%esp
f0106b5e:	8b 45 14             	mov    0x14(%ebp),%eax
f0106b61:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f0106b64:	83 ec 04             	sub    $0x4,%esp
f0106b67:	68 44 cc 12 f0       	push   $0xf012cc44
f0106b6c:	68 fa 00 00 00       	push   $0xfa
f0106b71:	68 04 cc 12 f0       	push   $0xf012cc04
f0106b76:	e8 2b 96 ff ff       	call   f01001a6 <_panic>

f0106b7b <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0106b7b:	55                   	push   %ebp
f0106b7c:	89 e5                	mov    %esp,%ebp
f0106b7e:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0106b81:	83 ec 04             	sub    $0x4,%esp
f0106b84:	68 78 cc 12 f0       	push   $0xf012cc78
f0106b89:	68 0c 01 00 00       	push   $0x10c
f0106b8e:	68 04 cc 12 f0       	push   $0xf012cc04
f0106b93:	e8 0e 96 ff ff       	call   f01001a6 <_panic>

f0106b98 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0106b98:	55                   	push   %ebp
f0106b99:	89 e5                	mov    %esp,%ebp
f0106b9b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f0106b9e:	83 ec 04             	sub    $0x4,%esp
f0106ba1:	68 ac cc 12 f0       	push   $0xf012ccac
f0106ba6:	68 1b 01 00 00       	push   $0x11b
f0106bab:	68 04 cc 12 f0       	push   $0xf012cc04
f0106bb0:	e8 f1 95 ff ff       	call   f01001a6 <_panic>

f0106bb5 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0106bb5:	55                   	push   %ebp
f0106bb6:	89 e5                	mov    %esp,%ebp
f0106bb8:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f0106bbb:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0106bc0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f0106bc3:	83 ec 04             	sub    $0x4,%esp
f0106bc6:	68 dc cc 12 f0       	push   $0xf012ccdc
f0106bcb:	68 33 01 00 00       	push   $0x133
f0106bd0:	68 04 cc 12 f0       	push   $0xf012cc04
f0106bd5:	e8 cc 95 ff ff       	call   f01001a6 <_panic>

f0106bda <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0106bda:	55                   	push   %ebp
f0106bdb:	89 e5                	mov    %esp,%ebp
f0106bdd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	panic("initialize_dyn_block_system() is not implemented yet...!!");
f0106be0:	83 ec 04             	sub    $0x4,%esp
f0106be3:	68 0c cd 12 f0       	push   $0xf012cd0c
f0106be8:	6a 11                	push   $0x11
f0106bea:	68 46 cd 12 f0       	push   $0xf012cd46
f0106bef:	e8 b2 95 ff ff       	call   f01001a6 <_panic>

f0106bf4 <kmalloc>:
	//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}

void* kmalloc(unsigned int size)
{
f0106bf4:	55                   	push   %ebp
f0106bf5:	89 e5                	mov    %esp,%ebp
f0106bf7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	panic("kmalloc() is not implemented yet...!!");
f0106bfa:	83 ec 04             	sub    $0x4,%esp
f0106bfd:	68 58 cd 12 f0       	push   $0xf012cd58
f0106c02:	6a 22                	push   $0x22
f0106c04:	68 46 cd 12 f0       	push   $0xf012cd46
f0106c09:	e8 98 95 ff ff       	call   f01001a6 <_panic>

f0106c0e <kfree>:

	//change this "return" according to your answer
}

void kfree(void* virtual_address)
{
f0106c0e:	55                   	push   %ebp
f0106c0f:	89 e5                	mov    %esp,%ebp
f0106c11:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0106c14:	83 ec 04             	sub    $0x4,%esp
f0106c17:	68 80 cd 12 f0       	push   $0xf012cd80
f0106c1c:	6a 2f                	push   $0x2f
f0106c1e:	68 46 cd 12 f0       	push   $0xf012cd46
f0106c23:	e8 7e 95 ff ff       	call   f01001a6 <_panic>

f0106c28 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0106c28:	55                   	push   %ebp
f0106c29:	89 e5                	mov    %esp,%ebp
f0106c2b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0106c2e:	83 ec 04             	sub    $0x4,%esp
f0106c31:	68 a4 cd 12 f0       	push   $0xf012cda4
f0106c36:	6a 37                	push   $0x37
f0106c38:	68 46 cd 12 f0       	push   $0xf012cd46
f0106c3d:	e8 64 95 ff ff       	call   f01001a6 <_panic>

f0106c42 <kheap_physical_address>:
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0106c42:	55                   	push   %ebp
f0106c43:	89 e5                	mov    %esp,%ebp
f0106c45:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0106c48:	83 ec 04             	sub    $0x4,%esp
f0106c4b:	68 d8 cd 12 f0       	push   $0xf012cdd8
f0106c50:	6a 42                	push   $0x42
f0106c52:	68 46 cd 12 f0       	push   $0xf012cd46
f0106c57:	e8 4a 95 ff ff       	call   f01001a6 <_panic>

f0106c5c <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f0106c5c:	55                   	push   %ebp
f0106c5d:	89 e5                	mov    %esp,%ebp
f0106c5f:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0106c62:	83 ec 04             	sub    $0x4,%esp
f0106c65:	68 0d ce 12 f0       	push   $0xf012ce0d
f0106c6a:	6a 4b                	push   $0x4b
f0106c6c:	68 46 cd 12 f0       	push   $0xf012cd46
f0106c71:	e8 30 95 ff ff       	call   f01001a6 <_panic>

f0106c76 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0106c76:	55                   	push   %ebp
f0106c77:	89 e5                	mov    %esp,%ebp
f0106c79:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0106c7c:	83 ec 04             	sub    $0x4,%esp
f0106c7f:	68 0d ce 12 f0       	push   $0xf012ce0d
f0106c84:	6a 51                	push   $0x51
f0106c86:	68 46 cd 12 f0       	push   $0xf012cd46
f0106c8b:	e8 16 95 ff ff       	call   f01001a6 <_panic>

f0106c90 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0106c90:	55                   	push   %ebp
f0106c91:	89 e5                	mov    %esp,%ebp
f0106c93:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0106c96:	83 ec 04             	sub    $0x4,%esp
f0106c99:	68 0d ce 12 f0       	push   $0xf012ce0d
f0106c9e:	6a 56                	push   $0x56
f0106ca0:	68 46 cd 12 f0       	push   $0xf012cd46
f0106ca5:	e8 fc 94 ff ff       	call   f01001a6 <_panic>

f0106caa <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0106caa:	55                   	push   %ebp
f0106cab:	89 e5                	mov    %esp,%ebp
f0106cad:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0106cb0:	83 ec 04             	sub    $0x4,%esp
f0106cb3:	68 20 ce 12 f0       	push   $0xf012ce20
f0106cb8:	6a 6d                	push   $0x6d
f0106cba:	68 46 cd 12 f0       	push   $0xf012cd46
f0106cbf:	e8 e2 94 ff ff       	call   f01001a6 <_panic>

f0106cc4 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0106cc4:	55                   	push   %ebp
f0106cc5:	89 e5                	mov    %esp,%ebp
f0106cc7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	panic("pt_set_page_permissions() is not implemented yet...!!");
f0106cca:	83 ec 04             	sub    $0x4,%esp
f0106ccd:	68 48 ce 12 f0       	push   $0xf012ce48
f0106cd2:	6a 0e                	push   $0xe
f0106cd4:	68 7e ce 12 f0       	push   $0xf012ce7e
f0106cd9:	e8 c8 94 ff ff       	call   f01001a6 <_panic>

f0106cde <pt_get_page_permissions>:
}

inline uint32 pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0106cde:	55                   	push   %ebp
f0106cdf:	89 e5                	mov    %esp,%ebp
f0106ce1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
	panic("pt_get_page_permissions() is not implemented yet...!!");
f0106ce4:	83 ec 04             	sub    $0x4,%esp
f0106ce7:	68 98 ce 12 f0       	push   $0xf012ce98
f0106cec:	6a 15                	push   $0x15
f0106cee:	68 7e ce 12 f0       	push   $0xf012ce7e
f0106cf3:	e8 ae 94 ff ff       	call   f01001a6 <_panic>

f0106cf8 <pt_clear_page_table_entry>:
}

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0106cf8:	55                   	push   %ebp
f0106cf9:	89 e5                	mov    %esp,%ebp
f0106cfb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	panic("pt_clear_page_table_entry() is not implemented yet...!!");
f0106cfe:	83 ec 04             	sub    $0x4,%esp
f0106d01:	68 d0 ce 12 f0       	push   $0xf012ced0
f0106d06:	6a 1c                	push   $0x1c
f0106d08:	68 7e ce 12 f0       	push   $0xf012ce7e
f0106d0d:	e8 94 94 ff ff       	call   f01001a6 <_panic>

f0106d12 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline uint32 virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0106d12:	55                   	push   %ebp
f0106d13:	89 e5                	mov    %esp,%ebp
f0106d15:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	panic("virtual_to_physical() is not implemented yet...!!");
f0106d18:	83 ec 04             	sub    $0x4,%esp
f0106d1b:	68 08 cf 12 f0       	push   $0xf012cf08
f0106d20:	6a 26                	push   $0x26
f0106d22:	68 7e ce 12 f0       	push   $0xf012ce7e
f0106d27:	e8 7a 94 ff ff       	call   f01001a6 <_panic>

f0106d2c <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0106d2c:	55                   	push   %ebp
f0106d2d:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0106d2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d32:	c1 e8 16             	shr    $0x16,%eax
f0106d35:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d3f:	01 d0                	add    %edx,%eax
f0106d41:	8b 00                	mov    (%eax),%eax
f0106d43:	83 e0 20             	and    $0x20,%eax
f0106d46:	85 c0                	test   %eax,%eax
f0106d48:	0f 95 c0             	setne  %al
f0106d4b:	0f b6 c0             	movzbl %al,%eax
}
f0106d4e:	5d                   	pop    %ebp
f0106d4f:	c3                   	ret    

f0106d50 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0106d50:	55                   	push   %ebp
f0106d51:	89 e5                	mov    %esp,%ebp
f0106d53:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0106d56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d59:	c1 e8 16             	shr    $0x16,%eax
f0106d5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d63:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d66:	01 d0                	add    %edx,%eax
f0106d68:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d6b:	c1 ea 16             	shr    $0x16,%edx
f0106d6e:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0106d75:	8b 55 08             	mov    0x8(%ebp),%edx
f0106d78:	01 ca                	add    %ecx,%edx
f0106d7a:	8b 12                	mov    (%edx),%edx
f0106d7c:	83 e2 df             	and    $0xffffffdf,%edx
f0106d7f:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0106d81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d84:	83 ec 08             	sub    $0x8,%esp
f0106d87:	50                   	push   %eax
f0106d88:	6a 00                	push   $0x0
f0106d8a:	e8 4f ee ff ff       	call   f0105bde <tlb_invalidate>
f0106d8f:	83 c4 10             	add    $0x10,%esp
}
f0106d92:	90                   	nop
f0106d93:	c9                   	leave  
f0106d94:	c3                   	ret    

f0106d95 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0106d95:	55                   	push   %ebp
f0106d96:	89 e5                	mov    %esp,%ebp
f0106d98:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0106d9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d9e:	c1 e8 16             	shr    $0x16,%eax
f0106da1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106da8:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dab:	01 d0                	add    %edx,%eax
f0106dad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106db3:	0f 20 d8             	mov    %cr3,%eax
f0106db6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106db9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106dbc:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106dbf:	90                   	nop
f0106dc0:	c9                   	leave  
f0106dc1:	c3                   	ret    

f0106dc2 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0106dc2:	55                   	push   %ebp
f0106dc3:	89 e5                	mov    %esp,%ebp
f0106dc5:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0106dc8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0106dcf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0106dd6:	eb 20                	jmp    f0106df8 <env_page_ws_get_size+0x36>
f0106dd8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106ddb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106dde:	89 d0                	mov    %edx,%eax
f0106de0:	01 c0                	add    %eax,%eax
f0106de2:	01 d0                	add    %edx,%eax
f0106de4:	c1 e0 03             	shl    $0x3,%eax
f0106de7:	01 c8                	add    %ecx,%eax
f0106de9:	83 c0 7c             	add    $0x7c,%eax
f0106dec:	8a 00                	mov    (%eax),%al
f0106dee:	84 c0                	test   %al,%al
f0106df0:	75 03                	jne    f0106df5 <env_page_ws_get_size+0x33>
f0106df2:	ff 45 f8             	incl   -0x8(%ebp)
f0106df5:	ff 45 fc             	incl   -0x4(%ebp)
f0106df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dfb:	8b 50 74             	mov    0x74(%eax),%edx
f0106dfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106e01:	39 c2                	cmp    %eax,%edx
f0106e03:	77 d3                	ja     f0106dd8 <env_page_ws_get_size+0x16>
	return counter;
f0106e05:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0106e08:	c9                   	leave  
f0106e09:	c3                   	ret    

f0106e0a <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0106e0a:	55                   	push   %ebp
f0106e0b:	89 e5                	mov    %esp,%ebp
f0106e0d:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0106e10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0106e17:	eb 4c                	jmp    f0106e65 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0106e19:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106e1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e1f:	89 d0                	mov    %edx,%eax
f0106e21:	01 c0                	add    %eax,%eax
f0106e23:	01 d0                	add    %edx,%eax
f0106e25:	c1 e0 03             	shl    $0x3,%eax
f0106e28:	01 c8                	add    %ecx,%eax
f0106e2a:	83 c0 78             	add    $0x78,%eax
f0106e2d:	8b 00                	mov    (%eax),%eax
f0106e2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e35:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e3a:	89 c2                	mov    %eax,%edx
f0106e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106e42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e45:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e4a:	39 c2                	cmp    %eax,%edx
f0106e4c:	75 14                	jne    f0106e62 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0106e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e51:	83 ec 08             	sub    $0x8,%esp
f0106e54:	50                   	push   %eax
f0106e55:	ff 75 08             	pushl  0x8(%ebp)
f0106e58:	e8 bc 00 00 00       	call   f0106f19 <env_page_ws_clear_entry>
f0106e5d:	83 c4 10             	add    $0x10,%esp
			break;
f0106e60:	eb 10                	jmp    f0106e72 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0106e62:	ff 45 f4             	incl   -0xc(%ebp)
f0106e65:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e68:	8b 50 74             	mov    0x74(%eax),%edx
f0106e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e6e:	39 c2                	cmp    %eax,%edx
f0106e70:	77 a7                	ja     f0106e19 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0106e72:	90                   	nop
f0106e73:	c9                   	leave  
f0106e74:	c3                   	ret    

f0106e75 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0106e75:	55                   	push   %ebp
f0106e76:	89 e5                	mov    %esp,%ebp
f0106e78:	53                   	push   %ebx
f0106e79:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0106e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e7f:	8b 40 74             	mov    0x74(%eax),%eax
f0106e82:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0106e85:	77 16                	ja     f0106e9d <env_page_ws_set_entry+0x28>
f0106e87:	68 3c cf 12 f0       	push   $0xf012cf3c
f0106e8c:	68 72 cf 12 f0       	push   $0xf012cf72
f0106e91:	6a 26                	push   $0x26
f0106e93:	68 88 cf 12 f0       	push   $0xf012cf88
f0106e98:	e8 09 93 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0106e9d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106ea4:	76 16                	jbe    f0106ebc <env_page_ws_set_entry+0x47>
f0106ea6:	68 a8 cf 12 f0       	push   $0xf012cfa8
f0106eab:	68 72 cf 12 f0       	push   $0xf012cf72
f0106eb0:	6a 27                	push   $0x27
f0106eb2:	68 88 cf 12 f0       	push   $0xf012cf88
f0106eb7:	e8 ea 92 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0106ebc:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ebf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ec5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106eca:	89 c1                	mov    %eax,%ecx
f0106ecc:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0106ecf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed2:	89 d0                	mov    %edx,%eax
f0106ed4:	01 c0                	add    %eax,%eax
f0106ed6:	01 d0                	add    %edx,%eax
f0106ed8:	c1 e0 03             	shl    $0x3,%eax
f0106edb:	01 d8                	add    %ebx,%eax
f0106edd:	83 c0 78             	add    $0x78,%eax
f0106ee0:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0106ee2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106ee5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ee8:	89 d0                	mov    %edx,%eax
f0106eea:	01 c0                	add    %eax,%eax
f0106eec:	01 d0                	add    %edx,%eax
f0106eee:	c1 e0 03             	shl    $0x3,%eax
f0106ef1:	01 c8                	add    %ecx,%eax
f0106ef3:	83 c0 7c             	add    $0x7c,%eax
f0106ef6:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0106ef9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106eff:	89 d0                	mov    %edx,%eax
f0106f01:	01 c0                	add    %eax,%eax
f0106f03:	01 d0                	add    %edx,%eax
f0106f05:	c1 e0 03             	shl    $0x3,%eax
f0106f08:	01 c8                	add    %ecx,%eax
f0106f0a:	83 e8 80             	sub    $0xffffff80,%eax
f0106f0d:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0106f13:	90                   	nop
}
f0106f14:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106f17:	c9                   	leave  
f0106f18:	c3                   	ret    

f0106f19 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0106f19:	55                   	push   %ebp
f0106f1a:	89 e5                	mov    %esp,%ebp
f0106f1c:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0106f1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f22:	8b 40 74             	mov    0x74(%eax),%eax
f0106f25:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0106f28:	77 16                	ja     f0106f40 <env_page_ws_clear_entry+0x27>
f0106f2a:	68 dc cf 12 f0       	push   $0xf012cfdc
f0106f2f:	68 72 cf 12 f0       	push   $0xf012cf72
f0106f34:	6a 32                	push   $0x32
f0106f36:	68 88 cf 12 f0       	push   $0xf012cf88
f0106f3b:	e8 66 92 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0106f40:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106f43:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f46:	89 d0                	mov    %edx,%eax
f0106f48:	01 c0                	add    %eax,%eax
f0106f4a:	01 d0                	add    %edx,%eax
f0106f4c:	c1 e0 03             	shl    $0x3,%eax
f0106f4f:	01 c8                	add    %ecx,%eax
f0106f51:	83 c0 78             	add    $0x78,%eax
f0106f54:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0106f5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106f5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f60:	89 d0                	mov    %edx,%eax
f0106f62:	01 c0                	add    %eax,%eax
f0106f64:	01 d0                	add    %edx,%eax
f0106f66:	c1 e0 03             	shl    $0x3,%eax
f0106f69:	01 c8                	add    %ecx,%eax
f0106f6b:	83 c0 7c             	add    $0x7c,%eax
f0106f6e:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0106f71:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106f74:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f77:	89 d0                	mov    %edx,%eax
f0106f79:	01 c0                	add    %eax,%eax
f0106f7b:	01 d0                	add    %edx,%eax
f0106f7d:	c1 e0 03             	shl    $0x3,%eax
f0106f80:	01 c8                	add    %ecx,%eax
f0106f82:	83 e8 80             	sub    $0xffffff80,%eax
f0106f85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0106f8b:	90                   	nop
f0106f8c:	c9                   	leave  
f0106f8d:	c3                   	ret    

f0106f8e <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0106f8e:	55                   	push   %ebp
f0106f8f:	89 e5                	mov    %esp,%ebp
f0106f91:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0106f94:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f97:	8b 40 74             	mov    0x74(%eax),%eax
f0106f9a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0106f9d:	77 16                	ja     f0106fb5 <env_page_ws_get_virtual_address+0x27>
f0106f9f:	68 dc cf 12 f0       	push   $0xf012cfdc
f0106fa4:	68 72 cf 12 f0       	push   $0xf012cf72
f0106fa9:	6a 3a                	push   $0x3a
f0106fab:	68 88 cf 12 f0       	push   $0xf012cf88
f0106fb0:	e8 f1 91 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0106fb5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0106fb8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fbb:	89 d0                	mov    %edx,%eax
f0106fbd:	01 c0                	add    %eax,%eax
f0106fbf:	01 d0                	add    %edx,%eax
f0106fc1:	c1 e0 03             	shl    $0x3,%eax
f0106fc4:	01 c8                	add    %ecx,%eax
f0106fc6:	83 c0 78             	add    $0x78,%eax
f0106fc9:	8b 00                	mov    (%eax),%eax
f0106fcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fd1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0106fd6:	c9                   	leave  
f0106fd7:	c3                   	ret    

f0106fd8 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0106fd8:	55                   	push   %ebp
f0106fd9:	89 e5                	mov    %esp,%ebp
f0106fdb:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0106fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe1:	8b 40 74             	mov    0x74(%eax),%eax
f0106fe4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0106fe7:	77 16                	ja     f0106fff <env_page_ws_get_time_stamp+0x27>
f0106fe9:	68 dc cf 12 f0       	push   $0xf012cfdc
f0106fee:	68 72 cf 12 f0       	push   $0xf012cf72
f0106ff3:	6a 40                	push   $0x40
f0106ff5:	68 88 cf 12 f0       	push   $0xf012cf88
f0106ffa:	e8 a7 91 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0106fff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107002:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107005:	89 d0                	mov    %edx,%eax
f0107007:	01 c0                	add    %eax,%eax
f0107009:	01 d0                	add    %edx,%eax
f010700b:	c1 e0 03             	shl    $0x3,%eax
f010700e:	01 c8                	add    %ecx,%eax
f0107010:	83 e8 80             	sub    $0xffffff80,%eax
f0107013:	8b 00                	mov    (%eax),%eax
}
f0107015:	c9                   	leave  
f0107016:	c3                   	ret    

f0107017 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107017:	55                   	push   %ebp
f0107018:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010701a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010701d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107020:	89 d0                	mov    %edx,%eax
f0107022:	01 c0                	add    %eax,%eax
f0107024:	01 d0                	add    %edx,%eax
f0107026:	c1 e0 03             	shl    $0x3,%eax
f0107029:	01 c8                	add    %ecx,%eax
f010702b:	83 c0 7c             	add    $0x7c,%eax
f010702e:	8a 00                	mov    (%eax),%al
f0107030:	0f b6 c0             	movzbl %al,%eax
}
f0107033:	5d                   	pop    %ebp
f0107034:	c3                   	ret    

f0107035 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107035:	55                   	push   %ebp
f0107036:	89 e5                	mov    %esp,%ebp
f0107038:	53                   	push   %ebx
f0107039:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010703c:	83 ec 0c             	sub    $0xc,%esp
f010703f:	6a 02                	push   $0x2
f0107041:	e8 19 57 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0107046:	83 c4 10             	add    $0x10,%esp
f0107049:	85 c0                	test   %eax,%eax
f010704b:	0f 84 fe 00 00 00    	je     f010714f <env_page_ws_print+0x11a>
	{
		int i = 0;
f0107051:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0107058:	83 ec 0c             	sub    $0xc,%esp
f010705b:	68 14 d0 12 f0       	push   $0xf012d014
f0107060:	e8 c8 9b ff ff       	call   f0100c2d <cprintf>
f0107065:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107068:	8b 45 08             	mov    0x8(%ebp),%eax
f010706b:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f0107071:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107074:	eb 2c                	jmp    f01070a2 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107076:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107079:	8b 10                	mov    (%eax),%edx
f010707b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010707e:	8d 48 01             	lea    0x1(%eax),%ecx
f0107081:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107084:	83 ec 04             	sub    $0x4,%esp
f0107087:	52                   	push   %edx
f0107088:	50                   	push   %eax
f0107089:	68 2e d0 12 f0       	push   $0xf012d02e
f010708e:	e8 9a 9b ff ff       	call   f0100c2d <cprintf>
f0107093:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107096:	8b 45 08             	mov    0x8(%ebp),%eax
f0107099:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010709f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01070a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01070a6:	74 08                	je     f01070b0 <env_page_ws_print+0x7b>
f01070a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01070ab:	8b 40 10             	mov    0x10(%eax),%eax
f01070ae:	eb 05                	jmp    f01070b5 <env_page_ws_print+0x80>
f01070b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01070b5:	8b 55 08             	mov    0x8(%ebp),%edx
f01070b8:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f01070be:	8b 45 08             	mov    0x8(%ebp),%eax
f01070c1:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f01070c7:	85 c0                	test   %eax,%eax
f01070c9:	75 ab                	jne    f0107076 <env_page_ws_print+0x41>
f01070cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01070cf:	75 a5                	jne    f0107076 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01070d1:	83 ec 0c             	sub    $0xc,%esp
f01070d4:	68 36 d0 12 f0       	push   $0xf012d036
f01070d9:	e8 4f 9b ff ff       	call   f0100c2d <cprintf>
f01070de:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01070e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070e4:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f01070ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01070ed:	eb 2c                	jmp    f010711b <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01070ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01070f2:	8b 10                	mov    (%eax),%edx
f01070f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01070f7:	8d 48 01             	lea    0x1(%eax),%ecx
f01070fa:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01070fd:	83 ec 04             	sub    $0x4,%esp
f0107100:	52                   	push   %edx
f0107101:	50                   	push   %eax
f0107102:	68 2e d0 12 f0       	push   $0xf012d02e
f0107107:	e8 21 9b ff ff       	call   f0100c2d <cprintf>
f010710c:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010710f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107112:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107118:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010711b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010711f:	74 08                	je     f0107129 <env_page_ws_print+0xf4>
f0107121:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107124:	8b 40 10             	mov    0x10(%eax),%eax
f0107127:	eb 05                	jmp    f010712e <env_page_ws_print+0xf9>
f0107129:	b8 00 00 00 00       	mov    $0x0,%eax
f010712e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107131:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f0107137:	8b 45 08             	mov    0x8(%ebp),%eax
f010713a:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107140:	85 c0                	test   %eax,%eax
f0107142:	75 ab                	jne    f01070ef <env_page_ws_print+0xba>
f0107144:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107148:	75 a5                	jne    f01070ef <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010714a:	e9 94 01 00 00       	jmp    f01072e3 <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f010714f:	83 ec 0c             	sub    $0xc,%esp
f0107152:	68 51 d0 12 f0       	push   $0xf012d051
f0107157:	e8 d1 9a ff ff       	call   f0100c2d <cprintf>
f010715c:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f010715f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107166:	e9 69 01 00 00       	jmp    f01072d4 <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010716b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010716e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107171:	89 d0                	mov    %edx,%eax
f0107173:	01 c0                	add    %eax,%eax
f0107175:	01 d0                	add    %edx,%eax
f0107177:	c1 e0 03             	shl    $0x3,%eax
f010717a:	01 c8                	add    %ecx,%eax
f010717c:	83 c0 7c             	add    $0x7c,%eax
f010717f:	8a 00                	mov    (%eax),%al
f0107181:	84 c0                	test   %al,%al
f0107183:	74 43                	je     f01071c8 <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f0107185:	83 ec 0c             	sub    $0xc,%esp
f0107188:	68 5b d0 12 f0       	push   $0xf012d05b
f010718d:	e8 9b 9a ff ff       	call   f0100c2d <cprintf>
f0107192:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0107195:	8b 45 08             	mov    0x8(%ebp),%eax
f0107198:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f010719e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01071a1:	75 10                	jne    f01071b3 <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f01071a3:	83 ec 0c             	sub    $0xc,%esp
f01071a6:	68 6a d0 12 f0       	push   $0xf012d06a
f01071ab:	e8 7d 9a ff ff       	call   f0100c2d <cprintf>
f01071b0:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01071b3:	83 ec 0c             	sub    $0xc,%esp
f01071b6:	68 70 d0 12 f0       	push   $0xf012d070
f01071bb:	e8 6d 9a ff ff       	call   f0100c2d <cprintf>
f01071c0:	83 c4 10             	add    $0x10,%esp
				continue;
f01071c3:	e9 09 01 00 00       	jmp    f01072d1 <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01071c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01071cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	01 c0                	add    %eax,%eax
f01071d2:	01 d0                	add    %edx,%eax
f01071d4:	c1 e0 03             	shl    $0x3,%eax
f01071d7:	01 c8                	add    %ecx,%eax
f01071d9:	83 c0 78             	add    $0x78,%eax
f01071dc:	8b 00                	mov    (%eax),%eax
f01071de:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01071e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01071e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01071e7:	89 d0                	mov    %edx,%eax
f01071e9:	01 c0                	add    %eax,%eax
f01071eb:	01 d0                	add    %edx,%eax
f01071ed:	c1 e0 03             	shl    $0x3,%eax
f01071f0:	01 c8                	add    %ecx,%eax
f01071f2:	83 e8 80             	sub    $0xffffff80,%eax
f01071f5:	8b 00                	mov    (%eax),%eax
f01071f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01071fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01071fd:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107200:	83 ec 08             	sub    $0x8,%esp
f0107203:	ff 75 e8             	pushl  -0x18(%ebp)
f0107206:	50                   	push   %eax
f0107207:	e8 d2 fa ff ff       	call   f0106cde <pt_get_page_permissions>
f010720c:	83 c4 10             	add    $0x10,%esp
f010720f:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0107212:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107215:	83 e0 40             	and    $0x40,%eax
f0107218:	85 c0                	test   %eax,%eax
f010721a:	0f 95 c0             	setne  %al
f010721d:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107220:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107223:	83 e0 20             	and    $0x20,%eax
f0107226:	85 c0                	test   %eax,%eax
f0107228:	0f 95 c0             	setne  %al
f010722b:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010722e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107231:	25 00 02 00 00       	and    $0x200,%eax
f0107236:	85 c0                	test   %eax,%eax
f0107238:	0f 95 c0             	setne  %al
f010723b:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010723e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107241:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107244:	89 d0                	mov    %edx,%eax
f0107246:	01 c0                	add    %eax,%eax
f0107248:	01 d0                	add    %edx,%eax
f010724a:	c1 e0 03             	shl    $0x3,%eax
f010724d:	01 c8                	add    %ecx,%eax
f010724f:	83 c0 78             	add    $0x78,%eax
f0107252:	8b 00                	mov    (%eax),%eax
f0107254:	83 ec 04             	sub    $0x4,%esp
f0107257:	50                   	push   %eax
f0107258:	ff 75 ec             	pushl  -0x14(%ebp)
f010725b:	68 72 d0 12 f0       	push   $0xf012d072
f0107260:	e8 c8 99 ff ff       	call   f0100c2d <cprintf>
f0107265:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107268:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010726b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010726e:	89 d0                	mov    %edx,%eax
f0107270:	01 c0                	add    %eax,%eax
f0107272:	01 d0                	add    %edx,%eax
f0107274:	c1 e0 03             	shl    $0x3,%eax
f0107277:	01 c8                	add    %ecx,%eax
f0107279:	05 84 00 00 00       	add    $0x84,%eax
f010727e:	8b 18                	mov    (%eax),%ebx
f0107280:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107284:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107288:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010728c:	83 ec 08             	sub    $0x8,%esp
f010728f:	53                   	push   %ebx
f0107290:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107293:	51                   	push   %ecx
f0107294:	52                   	push   %edx
f0107295:	50                   	push   %eax
f0107296:	68 84 d0 12 f0       	push   $0xf012d084
f010729b:	e8 8d 99 ff ff       	call   f0100c2d <cprintf>
f01072a0:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01072a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072a6:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f01072ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01072af:	75 10                	jne    f01072c1 <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f01072b1:	83 ec 0c             	sub    $0xc,%esp
f01072b4:	68 cb d0 12 f0       	push   $0xf012d0cb
f01072b9:	e8 6f 99 ff ff       	call   f0100c2d <cprintf>
f01072be:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01072c1:	83 ec 0c             	sub    $0xc,%esp
f01072c4:	68 70 d0 12 f0       	push   $0xf012d070
f01072c9:	e8 5f 99 ff ff       	call   f0100c2d <cprintf>
f01072ce:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01072d1:	ff 45 ec             	incl   -0x14(%ebp)
f01072d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01072d7:	8b 40 74             	mov    0x74(%eax),%eax
f01072da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01072dd:	0f 87 88 fe ff ff    	ja     f010716b <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01072e3:	90                   	nop
f01072e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072e7:	c9                   	leave  
f01072e8:	c3                   	ret    

f01072e9 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01072e9:	55                   	push   %ebp
f01072ea:	89 e5                	mov    %esp,%ebp
f01072ec:	53                   	push   %ebx
f01072ed:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01072f0:	83 ec 0c             	sub    $0xc,%esp
f01072f3:	68 d0 d0 12 f0       	push   $0xf012d0d0
f01072f8:	e8 30 99 ff ff       	call   f0100c2d <cprintf>
f01072fd:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107300:	83 ec 0c             	sub    $0xc,%esp
f0107303:	68 05 d1 12 f0       	push   $0xf012d105
f0107308:	e8 20 99 ff ff       	call   f0100c2d <cprintf>
f010730d:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107317:	e9 16 01 00 00       	jmp    f0107432 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f010731c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010731f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107322:	89 d0                	mov    %edx,%eax
f0107324:	01 c0                	add    %eax,%eax
f0107326:	01 d0                	add    %edx,%eax
f0107328:	c1 e0 03             	shl    $0x3,%eax
f010732b:	01 c8                	add    %ecx,%eax
f010732d:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107332:	8a 00                	mov    (%eax),%al
f0107334:	84 c0                	test   %al,%al
f0107336:	74 43                	je     f010737b <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107338:	83 ec 0c             	sub    $0xc,%esp
f010733b:	68 5b d0 12 f0       	push   $0xf012d05b
f0107340:	e8 e8 98 ff ff       	call   f0100c2d <cprintf>
f0107345:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107348:	8b 45 08             	mov    0x8(%ebp),%eax
f010734b:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107351:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107354:	75 10                	jne    f0107366 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107356:	83 ec 0c             	sub    $0xc,%esp
f0107359:	68 6a d0 12 f0       	push   $0xf012d06a
f010735e:	e8 ca 98 ff ff       	call   f0100c2d <cprintf>
f0107363:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107366:	83 ec 0c             	sub    $0xc,%esp
f0107369:	68 70 d0 12 f0       	push   $0xf012d070
f010736e:	e8 ba 98 ff ff       	call   f0100c2d <cprintf>
f0107373:	83 c4 10             	add    $0x10,%esp
			continue;
f0107376:	e9 b4 00 00 00       	jmp    f010742f <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010737b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010737e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107381:	89 d0                	mov    %edx,%eax
f0107383:	01 c0                	add    %eax,%eax
f0107385:	01 d0                	add    %edx,%eax
f0107387:	c1 e0 03             	shl    $0x3,%eax
f010738a:	01 c8                	add    %ecx,%eax
f010738c:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107391:	8b 00                	mov    (%eax),%eax
f0107393:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107396:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107399:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010739c:	89 d0                	mov    %edx,%eax
f010739e:	01 c0                	add    %eax,%eax
f01073a0:	01 d0                	add    %edx,%eax
f01073a2:	c1 e0 03             	shl    $0x3,%eax
f01073a5:	01 c8                	add    %ecx,%eax
f01073a7:	05 38 d5 01 00       	add    $0x1d538,%eax
f01073ac:	8b 00                	mov    (%eax),%eax
f01073ae:	83 ec 04             	sub    $0x4,%esp
f01073b1:	50                   	push   %eax
f01073b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01073b5:	68 10 d1 12 f0       	push   $0xf012d110
f01073ba:	e8 6e 98 ff ff       	call   f0100c2d <cprintf>
f01073bf:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01073c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01073c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01073c8:	89 d0                	mov    %edx,%eax
f01073ca:	01 c0                	add    %eax,%eax
f01073cc:	01 d0                	add    %edx,%eax
f01073ce:	c1 e0 03             	shl    $0x3,%eax
f01073d1:	01 c8                	add    %ecx,%eax
f01073d3:	05 40 d5 01 00       	add    $0x1d540,%eax
f01073d8:	8b 18                	mov    (%eax),%ebx
f01073da:	8b 45 08             	mov    0x8(%ebp),%eax
f01073dd:	8b 40 5c             	mov    0x5c(%eax),%eax
f01073e0:	83 ec 08             	sub    $0x8,%esp
f01073e3:	ff 75 f0             	pushl  -0x10(%ebp)
f01073e6:	50                   	push   %eax
f01073e7:	e8 40 f9 ff ff       	call   f0106d2c <pd_is_table_used>
f01073ec:	83 c4 10             	add    $0x10,%esp
f01073ef:	83 ec 04             	sub    $0x4,%esp
f01073f2:	53                   	push   %ebx
f01073f3:	50                   	push   %eax
f01073f4:	68 28 d1 12 f0       	push   $0xf012d128
f01073f9:	e8 2f 98 ff ff       	call   f0100c2d <cprintf>
f01073fe:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107401:	8b 45 08             	mov    0x8(%ebp),%eax
f0107404:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f010740a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010740d:	75 10                	jne    f010741f <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f010740f:	83 ec 0c             	sub    $0xc,%esp
f0107412:	68 cb d0 12 f0       	push   $0xf012d0cb
f0107417:	e8 11 98 ff ff       	call   f0100c2d <cprintf>
f010741c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010741f:	83 ec 0c             	sub    $0xc,%esp
f0107422:	68 70 d0 12 f0       	push   $0xf012d070
f0107427:	e8 01 98 ff ff       	call   f0100c2d <cprintf>
f010742c:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010742f:	ff 45 f4             	incl   -0xc(%ebp)
f0107432:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107436:	0f 86 e0 fe ff ff    	jbe    f010731c <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010743c:	90                   	nop
f010743d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107440:	c9                   	leave  
f0107441:	c3                   	ret    

f0107442 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107442:	55                   	push   %ebp
f0107443:	89 e5                	mov    %esp,%ebp
f0107445:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107448:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010744f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107456:	eb 22                	jmp    f010747a <env_table_ws_get_size+0x38>
f0107458:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010745b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010745e:	89 d0                	mov    %edx,%eax
f0107460:	01 c0                	add    %eax,%eax
f0107462:	01 d0                	add    %edx,%eax
f0107464:	c1 e0 03             	shl    $0x3,%eax
f0107467:	01 c8                	add    %ecx,%eax
f0107469:	05 3c d5 01 00       	add    $0x1d53c,%eax
f010746e:	8a 00                	mov    (%eax),%al
f0107470:	84 c0                	test   %al,%al
f0107472:	75 03                	jne    f0107477 <env_table_ws_get_size+0x35>
f0107474:	ff 45 f8             	incl   -0x8(%ebp)
f0107477:	ff 45 fc             	incl   -0x4(%ebp)
f010747a:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010747e:	7e d8                	jle    f0107458 <env_table_ws_get_size+0x16>
	return counter;
f0107480:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107483:	c9                   	leave  
f0107484:	c3                   	ret    

f0107485 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107485:	55                   	push   %ebp
f0107486:	89 e5                	mov    %esp,%ebp
f0107488:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010748b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0107492:	eb 4e                	jmp    f01074e2 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0107494:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107497:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010749a:	89 d0                	mov    %edx,%eax
f010749c:	01 c0                	add    %eax,%eax
f010749e:	01 d0                	add    %edx,%eax
f01074a0:	c1 e0 03             	shl    $0x3,%eax
f01074a3:	01 c8                	add    %ecx,%eax
f01074a5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01074aa:	8b 00                	mov    (%eax),%eax
f01074ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01074af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01074b2:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01074b7:	89 c2                	mov    %eax,%edx
f01074b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01074bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01074c2:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01074c7:	39 c2                	cmp    %eax,%edx
f01074c9:	75 14                	jne    f01074df <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01074cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ce:	83 ec 08             	sub    $0x8,%esp
f01074d1:	50                   	push   %eax
f01074d2:	ff 75 08             	pushl  0x8(%ebp)
f01074d5:	e8 bc 00 00 00       	call   f0107596 <env_table_ws_clear_entry>
f01074da:	83 c4 10             	add    $0x10,%esp
			break;
f01074dd:	eb 09                	jmp    f01074e8 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01074df:	ff 45 f4             	incl   -0xc(%ebp)
f01074e2:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01074e6:	7e ac                	jle    f0107494 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01074e8:	90                   	nop
f01074e9:	c9                   	leave  
f01074ea:	c3                   	ret    

f01074eb <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01074eb:	55                   	push   %ebp
f01074ec:	89 e5                	mov    %esp,%ebp
f01074ee:	53                   	push   %ebx
f01074ef:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01074f2:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01074f6:	76 19                	jbe    f0107511 <env_table_ws_set_entry+0x26>
f01074f8:	68 4c d1 12 f0       	push   $0xf012d14c
f01074fd:	68 72 cf 12 f0       	push   $0xf012cf72
f0107502:	68 b6 00 00 00       	push   $0xb6
f0107507:	68 88 cf 12 f0       	push   $0xf012cf88
f010750c:	e8 95 8c ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107511:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107518:	76 19                	jbe    f0107533 <env_table_ws_set_entry+0x48>
f010751a:	68 a8 cf 12 f0       	push   $0xf012cfa8
f010751f:	68 72 cf 12 f0       	push   $0xf012cf72
f0107524:	68 b7 00 00 00       	push   $0xb7
f0107529:	68 88 cf 12 f0       	push   $0xf012cf88
f010752e:	e8 73 8c ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0107533:	8b 45 10             	mov    0x10(%ebp),%eax
f0107536:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107539:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010753c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107541:	89 c1                	mov    %eax,%ecx
f0107543:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107546:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107549:	89 d0                	mov    %edx,%eax
f010754b:	01 c0                	add    %eax,%eax
f010754d:	01 d0                	add    %edx,%eax
f010754f:	c1 e0 03             	shl    $0x3,%eax
f0107552:	01 d8                	add    %ebx,%eax
f0107554:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107559:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f010755b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010755e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107561:	89 d0                	mov    %edx,%eax
f0107563:	01 c0                	add    %eax,%eax
f0107565:	01 d0                	add    %edx,%eax
f0107567:	c1 e0 03             	shl    $0x3,%eax
f010756a:	01 c8                	add    %ecx,%eax
f010756c:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107571:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0107574:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107577:	8b 55 0c             	mov    0xc(%ebp),%edx
f010757a:	89 d0                	mov    %edx,%eax
f010757c:	01 c0                	add    %eax,%eax
f010757e:	01 d0                	add    %edx,%eax
f0107580:	c1 e0 03             	shl    $0x3,%eax
f0107583:	01 c8                	add    %ecx,%eax
f0107585:	05 40 d5 01 00       	add    $0x1d540,%eax
f010758a:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0107590:	90                   	nop
}
f0107591:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107594:	c9                   	leave  
f0107595:	c3                   	ret    

f0107596 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107596:	55                   	push   %ebp
f0107597:	89 e5                	mov    %esp,%ebp
f0107599:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010759c:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01075a0:	76 19                	jbe    f01075bb <env_table_ws_clear_entry+0x25>
f01075a2:	68 4c d1 12 f0       	push   $0xf012d14c
f01075a7:	68 72 cf 12 f0       	push   $0xf012cf72
f01075ac:	68 c2 00 00 00       	push   $0xc2
f01075b1:	68 88 cf 12 f0       	push   $0xf012cf88
f01075b6:	e8 eb 8b ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01075bb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01075be:	8b 55 0c             	mov    0xc(%ebp),%edx
f01075c1:	89 d0                	mov    %edx,%eax
f01075c3:	01 c0                	add    %eax,%eax
f01075c5:	01 d0                	add    %edx,%eax
f01075c7:	c1 e0 03             	shl    $0x3,%eax
f01075ca:	01 c8                	add    %ecx,%eax
f01075cc:	05 38 d5 01 00       	add    $0x1d538,%eax
f01075d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01075d7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01075da:	8b 55 0c             	mov    0xc(%ebp),%edx
f01075dd:	89 d0                	mov    %edx,%eax
f01075df:	01 c0                	add    %eax,%eax
f01075e1:	01 d0                	add    %edx,%eax
f01075e3:	c1 e0 03             	shl    $0x3,%eax
f01075e6:	01 c8                	add    %ecx,%eax
f01075e8:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01075ed:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01075f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01075f3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01075f6:	89 d0                	mov    %edx,%eax
f01075f8:	01 c0                	add    %eax,%eax
f01075fa:	01 d0                	add    %edx,%eax
f01075fc:	c1 e0 03             	shl    $0x3,%eax
f01075ff:	01 c8                	add    %ecx,%eax
f0107601:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107606:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010760c:	90                   	nop
f010760d:	c9                   	leave  
f010760e:	c3                   	ret    

f010760f <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f010760f:	55                   	push   %ebp
f0107610:	89 e5                	mov    %esp,%ebp
f0107612:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107615:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107619:	76 19                	jbe    f0107634 <env_table_ws_get_virtual_address+0x25>
f010761b:	68 4c d1 12 f0       	push   $0xf012d14c
f0107620:	68 72 cf 12 f0       	push   $0xf012cf72
f0107625:	68 ca 00 00 00       	push   $0xca
f010762a:	68 88 cf 12 f0       	push   $0xf012cf88
f010762f:	e8 72 8b ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0107634:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107637:	8b 55 0c             	mov    0xc(%ebp),%edx
f010763a:	89 d0                	mov    %edx,%eax
f010763c:	01 c0                	add    %eax,%eax
f010763e:	01 d0                	add    %edx,%eax
f0107640:	c1 e0 03             	shl    $0x3,%eax
f0107643:	01 c8                	add    %ecx,%eax
f0107645:	05 38 d5 01 00       	add    $0x1d538,%eax
f010764a:	8b 00                	mov    (%eax),%eax
f010764c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010764f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107652:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0107657:	c9                   	leave  
f0107658:	c3                   	ret    

f0107659 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107659:	55                   	push   %ebp
f010765a:	89 e5                	mov    %esp,%ebp
f010765c:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010765f:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107663:	76 19                	jbe    f010767e <env_table_ws_get_time_stamp+0x25>
f0107665:	68 4c d1 12 f0       	push   $0xf012d14c
f010766a:	68 72 cf 12 f0       	push   $0xf012cf72
f010766f:	68 d1 00 00 00       	push   $0xd1
f0107674:	68 88 cf 12 f0       	push   $0xf012cf88
f0107679:	e8 28 8b ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010767e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107681:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107684:	89 d0                	mov    %edx,%eax
f0107686:	01 c0                	add    %eax,%eax
f0107688:	01 d0                	add    %edx,%eax
f010768a:	c1 e0 03             	shl    $0x3,%eax
f010768d:	01 c8                	add    %ecx,%eax
f010768f:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107694:	8b 00                	mov    (%eax),%eax
}
f0107696:	c9                   	leave  
f0107697:	c3                   	ret    

f0107698 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107698:	55                   	push   %ebp
f0107699:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010769b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010769e:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076a1:	89 d0                	mov    %edx,%eax
f01076a3:	01 c0                	add    %eax,%eax
f01076a5:	01 d0                	add    %edx,%eax
f01076a7:	c1 e0 03             	shl    $0x3,%eax
f01076aa:	01 c8                	add    %ecx,%eax
f01076ac:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01076b1:	8a 00                	mov    (%eax),%al
f01076b3:	0f b6 c0             	movzbl %al,%eax
}
f01076b6:	5d                   	pop    %ebp
f01076b7:	c3                   	ret    

f01076b8 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01076b8:	55                   	push   %ebp
f01076b9:	89 e5                	mov    %esp,%ebp
f01076bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01076be:	83 ec 04             	sub    $0x4,%esp
f01076c1:	68 80 d1 12 f0       	push   $0xf012d180
f01076c6:	68 e5 00 00 00       	push   $0xe5
f01076cb:	68 88 cf 12 f0       	push   $0xf012cf88
f01076d0:	e8 d1 8a ff ff       	call   f01001a6 <_panic>

f01076d5 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f01076d5:	55                   	push   %ebp
f01076d6:	89 e5                	mov    %esp,%ebp
f01076d8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f01076db:	83 ec 04             	sub    $0x4,%esp
f01076de:	68 ac d1 12 f0       	push   $0xf012d1ac
f01076e3:	68 ec 00 00 00       	push   $0xec
f01076e8:	68 88 cf 12 f0       	push   $0xf012cf88
f01076ed:	e8 b4 8a ff ff       	call   f01001a6 <_panic>

f01076f2 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01076f2:	55                   	push   %ebp
f01076f3:	89 e5                	mov    %esp,%ebp
f01076f5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01076f8:	83 ec 04             	sub    $0x4,%esp
f01076fb:	68 dc d1 12 f0       	push   $0xf012d1dc
f0107700:	68 f3 00 00 00       	push   $0xf3
f0107705:	68 88 cf 12 f0       	push   $0xf012cf88
f010770a:	e8 97 8a ff ff       	call   f01001a6 <_panic>

f010770f <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f010770f:	55                   	push   %ebp
f0107710:	89 e5                	mov    %esp,%ebp
f0107712:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f0107715:	83 ec 04             	sub    $0x4,%esp
f0107718:	68 08 d2 12 f0       	push   $0xf012d208
f010771d:	6a 1c                	push   $0x1c
f010771f:	68 36 d2 12 f0       	push   $0xf012d236
f0107724:	e8 7d 8a ff ff       	call   f01001a6 <_panic>

f0107729 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0107729:	55                   	push   %ebp
f010772a:	89 e5                	mov    %esp,%ebp
f010772c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f010772f:	83 ec 04             	sub    $0x4,%esp
f0107732:	68 54 d2 12 f0       	push   $0xf012d254
f0107737:	6a 29                	push   $0x29
f0107739:	68 36 d2 12 f0       	push   $0xf012d236
f010773e:	e8 63 8a ff ff       	call   f01001a6 <_panic>

f0107743 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
void share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0107743:	55                   	push   %ebp
f0107744:	89 e5                	mov    %esp,%ebp
f0107746:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f0107749:	83 ec 04             	sub    $0x4,%esp
f010774c:	68 84 d2 12 f0       	push   $0xf012d284
f0107751:	6a 35                	push   $0x35
f0107753:	68 36 d2 12 f0       	push   $0xf012d236
f0107758:	e8 49 8a ff ff       	call   f01001a6 <_panic>

f010775d <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
void allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010775d:	55                   	push   %ebp
f010775e:	89 e5                	mov    %esp,%ebp
f0107760:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0107763:	83 ec 04             	sub    $0x4,%esp
f0107766:	68 b0 d2 12 f0       	push   $0xf012d2b0
f010776b:	6a 41                	push   $0x41
f010776d:	68 36 d2 12 f0       	push   $0xf012d236
f0107772:	e8 2f 8a ff ff       	call   f01001a6 <_panic>

f0107777 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0107777:	55                   	push   %ebp
f0107778:	89 e5                	mov    %esp,%ebp
f010777a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f010777d:	83 ec 04             	sub    $0x4,%esp
f0107780:	68 e0 d2 12 f0       	push   $0xf012d2e0
f0107785:	6a 4c                	push   $0x4c
f0107787:	68 36 d2 12 f0       	push   $0xf012d236
f010778c:	e8 15 8a ff ff       	call   f01001a6 <_panic>

f0107791 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0107791:	55                   	push   %ebp
f0107792:	89 e5                	mov    %esp,%ebp
f0107794:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0107797:	83 ec 04             	sub    $0x4,%esp
f010779a:	68 18 d3 12 f0       	push   $0xf012d318
f010779f:	6a 5b                	push   $0x5b
f01077a1:	68 36 d2 12 f0       	push   $0xf012d236
f01077a6:	e8 fb 89 ff ff       	call   f01001a6 <_panic>

f01077ab <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01077ab:	55                   	push   %ebp
f01077ac:	89 e5                	mov    %esp,%ebp
f01077ae:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01077b1:	83 ec 04             	sub    $0x4,%esp
f01077b4:	68 50 d3 12 f0       	push   $0xf012d350
f01077b9:	6a 70                	push   $0x70
f01077bb:	68 36 d2 12 f0       	push   $0xf012d236
f01077c0:	e8 e1 89 ff ff       	call   f01001a6 <_panic>

f01077c5 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01077c5:	55                   	push   %ebp
f01077c6:	89 e5                	mov    %esp,%ebp
f01077c8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f01077cb:	83 ec 04             	sub    $0x4,%esp
f01077ce:	68 80 d3 12 f0       	push   $0xf012d380
f01077d3:	6a 7a                	push   $0x7a
f01077d5:	68 36 d2 12 f0       	push   $0xf012d236
f01077da:	e8 c7 89 ff ff       	call   f01001a6 <_panic>

f01077df <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01077df:	55                   	push   %ebp
f01077e0:	89 e5                	mov    %esp,%ebp
f01077e2:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01077e5:	83 ec 04             	sub    $0x4,%esp
f01077e8:	68 ac d3 12 f0       	push   $0xf012d3ac
f01077ed:	68 88 00 00 00       	push   $0x88
f01077f2:	68 36 d2 12 f0       	push   $0xf012d236
f01077f7:	e8 aa 89 ff ff       	call   f01001a6 <_panic>

f01077fc <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01077fc:	55                   	push   %ebp
f01077fd:	89 e5                	mov    %esp,%ebp
f01077ff:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0107802:	83 ec 04             	sub    $0x4,%esp
f0107805:	68 ec d3 12 f0       	push   $0xf012d3ec
f010780a:	68 98 00 00 00       	push   $0x98
f010780f:	68 36 d2 12 f0       	push   $0xf012d236
f0107814:	e8 8d 89 ff ff       	call   f01001a6 <_panic>

f0107819 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107819:	55                   	push   %ebp
f010781a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010781c:	8b 45 08             	mov    0x8(%ebp),%eax
f010781f:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f0107825:	29 d0                	sub    %edx,%eax
f0107827:	c1 f8 03             	sar    $0x3,%eax
f010782a:	89 c2                	mov    %eax,%edx
f010782c:	89 d0                	mov    %edx,%eax
f010782e:	c1 e0 02             	shl    $0x2,%eax
f0107831:	01 d0                	add    %edx,%eax
f0107833:	c1 e0 02             	shl    $0x2,%eax
f0107836:	01 d0                	add    %edx,%eax
f0107838:	c1 e0 02             	shl    $0x2,%eax
f010783b:	01 d0                	add    %edx,%eax
f010783d:	89 c1                	mov    %eax,%ecx
f010783f:	c1 e1 08             	shl    $0x8,%ecx
f0107842:	01 c8                	add    %ecx,%eax
f0107844:	89 c1                	mov    %eax,%ecx
f0107846:	c1 e1 10             	shl    $0x10,%ecx
f0107849:	01 c8                	add    %ecx,%eax
f010784b:	01 c0                	add    %eax,%eax
f010784d:	01 d0                	add    %edx,%eax
}
f010784f:	5d                   	pop    %ebp
f0107850:	c3                   	ret    

f0107851 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107851:	55                   	push   %ebp
f0107852:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107854:	ff 75 08             	pushl  0x8(%ebp)
f0107857:	e8 bd ff ff ff       	call   f0107819 <to_frame_number>
f010785c:	83 c4 04             	add    $0x4,%esp
f010785f:	c1 e0 0c             	shl    $0xc,%eax
}
f0107862:	c9                   	leave  
f0107863:	c3                   	ret    

f0107864 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0107864:	55                   	push   %ebp
f0107865:	89 e5                	mov    %esp,%ebp
f0107867:	57                   	push   %edi
f0107868:	56                   	push   %esi
f0107869:	53                   	push   %ebx
f010786a:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0107870:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0107877:	83 ec 0c             	sub    $0xc,%esp
f010787a:	ff 75 08             	pushl  0x8(%ebp)
f010787d:	e8 c8 22 00 00       	call   f0109b4a <get_user_program_info>
f0107882:	83 c4 10             	add    $0x10,%esp
f0107885:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0107888:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010788c:	75 0a                	jne    f0107898 <env_create+0x34>
f010788e:	b8 00 00 00 00       	mov    $0x0,%eax
f0107893:	e9 8f 0c 00 00       	jmp    f0108527 <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0107898:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010789b:	8b 40 08             	mov    0x8(%eax),%eax
f010789e:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01078a1:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f01078a8:	00 00 00 
	if(allocate_environment(&e) < 0)
f01078ab:	83 ec 0c             	sub    $0xc,%esp
f01078ae:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01078b4:	50                   	push   %eax
f01078b5:	e8 32 10 00 00       	call   f01088ec <allocate_environment>
f01078ba:	83 c4 10             	add    $0x10,%esp
f01078bd:	85 c0                	test   %eax,%eax
f01078bf:	79 0a                	jns    f01078cb <env_create+0x67>
	{
		return 0;
f01078c1:	b8 00 00 00 00       	mov    $0x0,%eax
f01078c6:	e9 5c 0c 00 00       	jmp    f0108527 <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01078cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01078ce:	8b 00                	mov    (%eax),%eax
f01078d0:	83 ec 0c             	sub    $0xc,%esp
f01078d3:	50                   	push   %eax
f01078d4:	e8 52 1d 02 00       	call   f012962b <strlen>
f01078d9:	83 c4 10             	add    $0x10,%esp
f01078dc:	83 f8 3f             	cmp    $0x3f,%eax
f01078df:	7f 20                	jg     f0107901 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01078e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01078e4:	8b 00                	mov    (%eax),%eax
f01078e6:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01078ec:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f01078f2:	83 ec 08             	sub    $0x8,%esp
f01078f5:	50                   	push   %eax
f01078f6:	52                   	push   %edx
f01078f7:	e8 7e 1d 02 00       	call   f012967a <strcpy>
f01078fc:	83 c4 10             	add    $0x10,%esp
f01078ff:	eb 20                	jmp    f0107921 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0107901:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0107904:	8b 00                	mov    (%eax),%eax
f0107906:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010790c:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0107912:	83 ec 04             	sub    $0x4,%esp
f0107915:	6a 3f                	push   $0x3f
f0107917:	50                   	push   %eax
f0107918:	52                   	push   %edx
f0107919:	e8 8a 1d 02 00       	call   f01296a8 <strncpy>
f010791e:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0107921:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0107928:	00 00 00 

		allocate_frame(&p) ;
f010792b:	83 ec 0c             	sub    $0xc,%esp
f010792e:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0107934:	50                   	push   %eax
f0107935:	e8 88 e6 ff ff       	call   f0105fc2 <allocate_frame>
f010793a:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f010793d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0107943:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0107949:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010794f:	83 ec 0c             	sub    $0xc,%esp
f0107952:	50                   	push   %eax
f0107953:	e8 f9 fe ff ff       	call   f0107851 <to_physical_address>
f0107958:	83 c4 10             	add    $0x10,%esp
f010795b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010795e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0107961:	c1 e8 0c             	shr    $0xc,%eax
f0107964:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0107967:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f010796c:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f010796f:	72 17                	jb     f0107988 <env_create+0x124>
f0107971:	ff 75 b0             	pushl  -0x50(%ebp)
f0107974:	68 18 d4 12 f0       	push   $0xf012d418
f0107979:	68 8d 00 00 00       	push   $0x8d
f010797e:	68 47 d4 12 f0       	push   $0xf012d447
f0107983:	e8 1e 88 ff ff       	call   f01001a6 <_panic>
f0107988:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010798b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0107990:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0107993:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0107999:	83 ec 0c             	sub    $0xc,%esp
f010799c:	50                   	push   %eax
f010799d:	e8 af fe ff ff       	call   f0107851 <to_physical_address>
f01079a2:	83 c4 10             	add    $0x10,%esp
f01079a5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01079a8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01079ae:	8b 55 0c             	mov    0xc(%ebp),%edx
f01079b1:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01079b4:	83 ec 0c             	sub    $0xc,%esp
f01079b7:	6a 02                	push   $0x2
f01079b9:	e8 a1 4d 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f01079be:	83 c4 10             	add    $0x10,%esp
f01079c1:	85 c0                	test   %eax,%eax
f01079c3:	74 21                	je     f01079e6 <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01079c5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01079cb:	8b 55 10             	mov    0x10(%ebp),%edx
f01079ce:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01079d4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01079da:	8b 55 0c             	mov    0xc(%ebp),%edx
f01079dd:	2b 55 10             	sub    0x10(%ebp),%edx
f01079e0:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01079e6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f01079ea:	75 12                	jne    f01079fe <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f01079ec:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01079f2:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f01079f9:	00 00 00 
f01079fc:	eb 0f                	jmp    f0107a0d <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f01079fe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107a04:	8b 55 14             	mov    0x14(%ebp),%edx
f0107a07:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0107a0d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107a13:	83 ec 04             	sub    $0x4,%esp
f0107a16:	ff 75 a4             	pushl  -0x5c(%ebp)
f0107a19:	ff 75 a8             	pushl  -0x58(%ebp)
f0107a1c:	50                   	push   %eax
f0107a1d:	e8 ed 16 00 00       	call   f010910f <initialize_environment>
f0107a22:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0107a25:	0f 20 d8             	mov    %cr3,%eax
f0107a28:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0107a2b:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0107a2e:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0107a31:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107a37:	8b 40 60             	mov    0x60(%eax),%eax
f0107a3a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107a40:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0107a46:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0107a49:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0107a50:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0107a57:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107a5d:	8b 40 74             	mov    0x74(%eax),%eax
f0107a60:	48                   	dec    %eax
f0107a61:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0107a64:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f0107a6b:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0107a6e:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0107a74:	83 ec 08             	sub    $0x8,%esp
f0107a77:	ff 75 b8             	pushl  -0x48(%ebp)
f0107a7a:	50                   	push   %eax
f0107a7b:	e8 ff 1d 00 00       	call   f010987f <PROGRAM_SEGMENT_FIRST>
f0107a80:	83 c4 0c             	add    $0xc,%esp
f0107a83:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f0107a89:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0107a8f:	b9 05 00 00 00       	mov    $0x5,%ecx
f0107a94:	89 c7                	mov    %eax,%edi
f0107a96:	89 d6                	mov    %edx,%esi
f0107a98:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0107a9a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f0107aa0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107aa3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107aa6:	8b 40 10             	mov    0x10(%eax),%eax
f0107aa9:	83 f8 ff             	cmp    $0xffffffff,%eax
f0107aac:	75 07                	jne    f0107ab5 <env_create+0x251>
f0107aae:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0107ab5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107ab8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107abb:	e9 24 03 00 00       	jmp    f0107de4 <env_create+0x580>
	{
		segment_counter++;
f0107ac0:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0107ac3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0107aca:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0107acd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107ad3:	83 ec 0c             	sub    $0xc,%esp
f0107ad6:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f0107adc:	52                   	push   %edx
f0107add:	ff 75 dc             	pushl  -0x24(%ebp)
f0107ae0:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f0107ae6:	52                   	push   %edx
f0107ae7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107aea:	50                   	push   %eax
f0107aeb:	e8 f4 0e 00 00       	call   f01089e4 <program_segment_alloc_map_copy_workingset>
f0107af0:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0107af3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0107af9:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0107afc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aff:	8b 00                	mov    (%eax),%eax
f0107b01:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0107b04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107b07:	8b 40 0c             	mov    0xc(%eax),%eax
f0107b0a:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0107b0d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107b10:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0107b13:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0107b16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107b1b:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0107b1e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0107b25:	8b 55 90             	mov    -0x70(%ebp),%edx
f0107b28:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0107b2b:	01 d0                	add    %edx,%eax
f0107b2d:	48                   	dec    %eax
f0107b2e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0107b31:	8b 45 80             	mov    -0x80(%ebp),%eax
f0107b34:	ba 00 00 00 00       	mov    $0x0,%edx
f0107b39:	f7 75 84             	divl   -0x7c(%ebp)
f0107b3c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0107b3f:	29 d0                	sub    %edx,%eax
f0107b41:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0107b47:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107b4a:	2b 45 88             	sub    -0x78(%ebp),%eax
f0107b4d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0107b53:	a1 20 44 6d f0       	mov    0xf06d4420,%eax
f0107b58:	83 ec 04             	sub    $0x4,%esp
f0107b5b:	68 00 10 00 00       	push   $0x1000
f0107b60:	6a 00                	push   $0x0
f0107b62:	50                   	push   %eax
f0107b63:	e8 b1 1c 02 00       	call   f0129819 <memset>
f0107b68:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0107b6b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0107b6e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0107b71:	8b 15 20 44 6d f0    	mov    0xf06d4420,%edx
f0107b77:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0107b7d:	01 d0                	add    %edx,%eax
f0107b7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0107b82:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107b85:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0107b88:	eb 13                	jmp    f0107b9d <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f0107b8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107b8d:	8a 10                	mov    (%eax),%dl
f0107b8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107b92:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0107b94:	ff 45 cc             	incl   -0x34(%ebp)
f0107b97:	ff 45 d4             	incl   -0x2c(%ebp)
f0107b9a:	ff 45 d0             	incl   -0x30(%ebp)
f0107b9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107ba0:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0107ba6:	72 e2                	jb     f0107b8a <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0107ba8:	8b 15 20 44 6d f0    	mov    0xf06d4420,%edx
f0107bae:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107bb4:	83 ec 04             	sub    $0x4,%esp
f0107bb7:	52                   	push   %edx
f0107bb8:	ff 75 88             	pushl  -0x78(%ebp)
f0107bbb:	50                   	push   %eax
f0107bbc:	e8 73 b1 ff ff       	call   f0102d34 <pf_add_env_page>
f0107bc1:	83 c4 10             	add    $0x10,%esp
f0107bc4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0107bc7:	75 17                	jne    f0107be0 <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0107bc9:	83 ec 04             	sub    $0x4,%esp
f0107bcc:	68 64 d4 12 f0       	push   $0xf012d464
f0107bd1:	68 e1 00 00 00       	push   $0xe1
f0107bd6:	68 47 d4 12 f0       	push   $0xf012d447
f0107bdb:	e8 c6 85 ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0107be0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107be3:	8b 50 04             	mov    0x4(%eax),%edx
f0107be6:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107be9:	01 d0                	add    %edx,%eax
f0107beb:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0107bf1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0107bf7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107bfc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0107c02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c05:	8b 50 04             	mov    0x4(%eax),%edx
f0107c08:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107c0b:	01 d0                	add    %edx,%eax
f0107c0d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0107c13:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0107c19:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0107c1c:	eb 43                	jmp    f0107c61 <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0107c1e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0107c21:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107c27:	83 ec 04             	sub    $0x4,%esp
f0107c2a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0107c2d:	52                   	push   %edx
f0107c2e:	50                   	push   %eax
f0107c2f:	e8 00 b1 ff ff       	call   f0102d34 <pf_add_env_page>
f0107c34:	83 c4 10             	add    $0x10,%esp
f0107c37:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0107c3a:	75 17                	jne    f0107c53 <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0107c3c:	83 ec 04             	sub    $0x4,%esp
f0107c3f:	68 64 d4 12 f0       	push   $0xf012d464
f0107c44:	68 ee 00 00 00       	push   $0xee
f0107c49:	68 47 d4 12 f0       	push   $0xf012d447
f0107c4e:	e8 53 85 ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0107c53:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0107c5a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0107c61:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107c64:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0107c6a:	72 b2                	jb     f0107c1e <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0107c6c:	a1 20 44 6d f0       	mov    0xf06d4420,%eax
f0107c71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0107c74:	83 ec 04             	sub    $0x4,%esp
f0107c77:	68 00 10 00 00       	push   $0x1000
f0107c7c:	6a 00                	push   $0x0
f0107c7e:	ff 75 d0             	pushl  -0x30(%ebp)
f0107c81:	e8 93 1b 02 00       	call   f0129819 <memset>
f0107c86:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0107c89:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0107c8f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0107c92:	eb 13                	jmp    f0107ca7 <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f0107c94:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107c97:	8a 10                	mov    (%eax),%dl
f0107c99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c9c:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0107c9e:	ff 45 cc             	incl   -0x34(%ebp)
f0107ca1:	ff 45 d4             	incl   -0x2c(%ebp)
f0107ca4:	ff 45 d0             	incl   -0x30(%ebp)
f0107ca7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107caa:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0107cb0:	72 e2                	jb     f0107c94 <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0107cb2:	8b 15 20 44 6d f0    	mov    0xf06d4420,%edx
f0107cb8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107cbe:	83 ec 04             	sub    $0x4,%esp
f0107cc1:	52                   	push   %edx
f0107cc2:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0107cc8:	50                   	push   %eax
f0107cc9:	e8 66 b0 ff ff       	call   f0102d34 <pf_add_env_page>
f0107cce:	83 c4 10             	add    $0x10,%esp
f0107cd1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0107cd4:	75 17                	jne    f0107ced <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0107cd6:	83 ec 04             	sub    $0x4,%esp
f0107cd9:	68 64 d4 12 f0       	push   $0xf012d464
f0107cde:	68 fd 00 00 00       	push   $0xfd
f0107ce3:	68 47 d4 12 f0       	push   $0xf012d447
f0107ce8:	e8 b9 84 ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0107ced:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0107cf4:	10 00 00 
f0107cf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107cfa:	8b 50 04             	mov    0x4(%eax),%edx
f0107cfd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107d00:	01 c2                	add    %eax,%edx
f0107d02:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0107d08:	01 d0                	add    %edx,%eax
f0107d0a:	48                   	dec    %eax
f0107d0b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0107d11:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0107d17:	ba 00 00 00 00       	mov    $0x0,%edx
f0107d1c:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0107d22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0107d28:	29 d0                	sub    %edx,%eax
f0107d2a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0107d2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d30:	8b 50 08             	mov    0x8(%eax),%edx
f0107d33:	8b 45 90             	mov    -0x70(%ebp),%eax
f0107d36:	01 d0                	add    %edx,%eax
f0107d38:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0107d3b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0107d41:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0107d48:	eb 41                	jmp    f0107d8b <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0107d4a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107d50:	83 ec 04             	sub    $0x4,%esp
f0107d53:	6a 01                	push   $0x1
f0107d55:	ff 75 c8             	pushl  -0x38(%ebp)
f0107d58:	50                   	push   %eax
f0107d59:	e8 a5 ae ff ff       	call   f0102c03 <pf_add_empty_env_page>
f0107d5e:	83 c4 10             	add    $0x10,%esp
f0107d61:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0107d64:	75 17                	jne    f0107d7d <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0107d66:	83 ec 04             	sub    $0x4,%esp
f0107d69:	68 64 d4 12 f0       	push   $0xf012d464
f0107d6e:	68 0a 01 00 00       	push   $0x10a
f0107d73:	68 47 d4 12 f0       	push   $0xf012d447
f0107d78:	e8 29 84 ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0107d7d:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0107d84:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0107d8b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0107d92:	10 00 00 
f0107d95:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0107d9b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0107da1:	01 d0                	add    %edx,%eax
f0107da3:	48                   	dec    %eax
f0107da4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0107daa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0107db0:	ba 00 00 00 00       	mov    $0x0,%edx
f0107db5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0107dbb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0107dc1:	29 d0                	sub    %edx,%eax
f0107dc3:	89 c2                	mov    %eax,%edx
f0107dc5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107dc8:	39 c2                	cmp    %eax,%edx
f0107dca:	0f 87 7a ff ff ff    	ja     f0107d4a <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0107dd0:	83 ec 08             	sub    $0x8,%esp
f0107dd3:	ff 75 b8             	pushl  -0x48(%ebp)
f0107dd6:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107dd9:	e8 96 19 00 00       	call   f0109774 <PROGRAM_SEGMENT_NEXT>
f0107dde:	83 c4 10             	add    $0x10,%esp
f0107de1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107de4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107de8:	0f 85 d2 fc ff ff    	jne    f0107ac0 <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0107dee:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0107df5:	e9 9c 00 00 00       	jmp    f0107e96 <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0107dfa:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0107e00:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0107e03:	89 d0                	mov    %edx,%eax
f0107e05:	01 c0                	add    %eax,%eax
f0107e07:	01 d0                	add    %edx,%eax
f0107e09:	c1 e0 03             	shl    $0x3,%eax
f0107e0c:	01 c8                	add    %ecx,%eax
f0107e0e:	83 c0 7c             	add    $0x7c,%eax
f0107e11:	8a 00                	mov    (%eax),%al
f0107e13:	84 c0                	test   %al,%al
f0107e15:	75 7c                	jne    f0107e93 <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0107e17:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0107e1d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0107e20:	89 d0                	mov    %edx,%eax
f0107e22:	01 c0                	add    %eax,%eax
f0107e24:	01 d0                	add    %edx,%eax
f0107e26:	c1 e0 03             	shl    $0x3,%eax
f0107e29:	01 c8                	add    %ecx,%eax
f0107e2b:	83 c0 78             	add    $0x78,%eax
f0107e2e:	8b 00                	mov    (%eax),%eax
f0107e30:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0107e36:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107e3c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107e3f:	83 ec 04             	sub    $0x4,%esp
f0107e42:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0107e48:	52                   	push   %edx
f0107e49:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0107e4f:	50                   	push   %eax
f0107e50:	e8 2c e3 ff ff       	call   f0106181 <get_page_table>
f0107e55:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0107e58:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0107e5e:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0107e64:	c1 ea 0c             	shr    $0xc,%edx
f0107e67:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e6d:	c1 e2 02             	shl    $0x2,%edx
f0107e70:	01 d0                	add    %edx,%eax
f0107e72:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0107e78:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0107e7e:	c1 e9 0c             	shr    $0xc,%ecx
f0107e81:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107e87:	c1 e1 02             	shl    $0x2,%ecx
f0107e8a:	01 ca                	add    %ecx,%edx
f0107e8c:	8b 12                	mov    (%edx),%edx
f0107e8e:	83 e2 bf             	and    $0xffffffbf,%edx
f0107e91:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0107e93:	ff 45 c4             	incl   -0x3c(%ebp)
f0107e96:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107e9c:	8b 50 74             	mov    0x74(%eax),%edx
f0107e9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0107ea2:	39 c2                	cmp    %eax,%edx
f0107ea4:	0f 87 50 ff ff ff    	ja     f0107dfa <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0107eaa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0107ead:	8b 50 08             	mov    0x8(%eax),%edx
f0107eb0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107eb6:	83 ec 08             	sub    $0x8,%esp
f0107eb9:	52                   	push   %edx
f0107eba:	50                   	push   %eax
f0107ebb:	e8 3a 18 00 00       	call   f01096fa <set_environment_entry_point>
f0107ec0:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0107ec3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107ec9:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f0107ed0:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0107ed3:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0107eda:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0107edd:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0107ee4:	e9 9a 05 00 00       	jmp    f0108483 <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f0107ee9:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f0107ef0:	00 00 00 
		allocate_frame(&pp);
f0107ef3:	83 ec 0c             	sub    $0xc,%esp
f0107ef6:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0107efc:	50                   	push   %eax
f0107efd:	e8 c0 e0 ff ff       	call   f0105fc2 <allocate_frame>
f0107f02:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0107f05:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0107f0b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107f11:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107f14:	6a 06                	push   $0x6
f0107f16:	ff 75 c0             	pushl  -0x40(%ebp)
f0107f19:	52                   	push   %edx
f0107f1a:	50                   	push   %eax
f0107f1b:	e8 f0 e5 ff ff       	call   f0106510 <loadtime_map_frame>
f0107f20:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0107f23:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0107f26:	83 ec 04             	sub    $0x4,%esp
f0107f29:	68 00 10 00 00       	push   $0x1000
f0107f2e:	6a 00                	push   $0x0
f0107f30:	50                   	push   %eax
f0107f31:	e8 e3 18 02 00       	call   f0129819 <memset>
f0107f36:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0107f39:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107f3f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0107f45:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107f4b:	83 ec 04             	sub    $0x4,%esp
f0107f4e:	ff 75 c0             	pushl  -0x40(%ebp)
f0107f51:	52                   	push   %edx
f0107f52:	50                   	push   %eax
f0107f53:	e8 1d ef ff ff       	call   f0106e75 <env_page_ws_set_entry>
f0107f58:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0107f5b:	83 ec 0c             	sub    $0xc,%esp
f0107f5e:	6a 02                	push   $0x2
f0107f60:	e8 fa 47 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0107f65:	83 c4 10             	add    $0x10,%esp
f0107f68:	85 c0                	test   %eax,%eax
f0107f6a:	0f 84 b2 04 00 00    	je     f0108422 <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0107f70:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0107f76:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107f7c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0107f82:	89 d0                	mov    %edx,%eax
f0107f84:	01 c0                	add    %eax,%eax
f0107f86:	01 d0                	add    %edx,%eax
f0107f88:	c1 e0 03             	shl    $0x3,%eax
f0107f8b:	83 c0 70             	add    $0x70,%eax
f0107f8e:	01 c8                	add    %ecx,%eax
f0107f90:	83 c0 08             	add    $0x8,%eax
f0107f93:	85 c0                	test   %eax,%eax
f0107f95:	75 17                	jne    f0107fae <env_create+0x74a>
f0107f97:	83 ec 04             	sub    $0x4,%esp
f0107f9a:	68 a9 d4 12 f0       	push   $0xf012d4a9
f0107f9f:	68 41 01 00 00       	push   $0x141
f0107fa4:	68 47 d4 12 f0       	push   $0xf012d447
f0107fa9:	e8 f8 81 ff ff       	call   f01001a6 <_panic>
f0107fae:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0107fb4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107fba:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0107fc0:	89 d0                	mov    %edx,%eax
f0107fc2:	01 c0                	add    %eax,%eax
f0107fc4:	01 d0                	add    %edx,%eax
f0107fc6:	c1 e0 03             	shl    $0x3,%eax
f0107fc9:	01 c8                	add    %ecx,%eax
f0107fcb:	05 88 00 00 00       	add    $0x88,%eax
f0107fd0:	8b 00                	mov    (%eax),%eax
f0107fd2:	85 c0                	test   %eax,%eax
f0107fd4:	74 4d                	je     f0108023 <env_create+0x7bf>
f0107fd6:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0107fdc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0107fe2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0107fe8:	89 d0                	mov    %edx,%eax
f0107fea:	01 c0                	add    %eax,%eax
f0107fec:	01 d0                	add    %edx,%eax
f0107fee:	c1 e0 03             	shl    $0x3,%eax
f0107ff1:	01 c8                	add    %ecx,%eax
f0107ff3:	05 88 00 00 00       	add    $0x88,%eax
f0107ff8:	8b 10                	mov    (%eax),%edx
f0107ffa:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108000:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108006:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010800c:	89 c8                	mov    %ecx,%eax
f010800e:	01 c0                	add    %eax,%eax
f0108010:	01 c8                	add    %ecx,%eax
f0108012:	c1 e0 03             	shl    $0x3,%eax
f0108015:	01 d8                	add    %ebx,%eax
f0108017:	05 8c 00 00 00       	add    $0x8c,%eax
f010801c:	8b 00                	mov    (%eax),%eax
f010801e:	89 42 14             	mov    %eax,0x14(%edx)
f0108021:	eb 30                	jmp    f0108053 <env_create+0x7ef>
f0108023:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108029:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010802f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108035:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010803b:	89 c8                	mov    %ecx,%eax
f010803d:	01 c0                	add    %eax,%eax
f010803f:	01 c8                	add    %ecx,%eax
f0108041:	c1 e0 03             	shl    $0x3,%eax
f0108044:	01 d8                	add    %ebx,%eax
f0108046:	05 8c 00 00 00       	add    $0x8c,%eax
f010804b:	8b 00                	mov    (%eax),%eax
f010804d:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f0108053:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108059:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010805f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108065:	89 d0                	mov    %edx,%eax
f0108067:	01 c0                	add    %eax,%eax
f0108069:	01 d0                	add    %edx,%eax
f010806b:	c1 e0 03             	shl    $0x3,%eax
f010806e:	01 c8                	add    %ecx,%eax
f0108070:	05 8c 00 00 00       	add    $0x8c,%eax
f0108075:	8b 00                	mov    (%eax),%eax
f0108077:	85 c0                	test   %eax,%eax
f0108079:	74 4d                	je     f01080c8 <env_create+0x864>
f010807b:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108081:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108087:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010808d:	89 d0                	mov    %edx,%eax
f010808f:	01 c0                	add    %eax,%eax
f0108091:	01 d0                	add    %edx,%eax
f0108093:	c1 e0 03             	shl    $0x3,%eax
f0108096:	01 c8                	add    %ecx,%eax
f0108098:	05 8c 00 00 00       	add    $0x8c,%eax
f010809d:	8b 10                	mov    (%eax),%edx
f010809f:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01080a5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01080ab:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01080b1:	89 c8                	mov    %ecx,%eax
f01080b3:	01 c0                	add    %eax,%eax
f01080b5:	01 c8                	add    %ecx,%eax
f01080b7:	c1 e0 03             	shl    $0x3,%eax
f01080ba:	01 d8                	add    %ebx,%eax
f01080bc:	05 88 00 00 00       	add    $0x88,%eax
f01080c1:	8b 00                	mov    (%eax),%eax
f01080c3:	89 42 10             	mov    %eax,0x10(%edx)
f01080c6:	eb 30                	jmp    f01080f8 <env_create+0x894>
f01080c8:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01080ce:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01080d4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01080da:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01080e0:	89 c8                	mov    %ecx,%eax
f01080e2:	01 c0                	add    %eax,%eax
f01080e4:	01 c8                	add    %ecx,%eax
f01080e6:	c1 e0 03             	shl    $0x3,%eax
f01080e9:	01 d8                	add    %ebx,%eax
f01080eb:	05 88 00 00 00       	add    $0x88,%eax
f01080f0:	8b 00                	mov    (%eax),%eax
f01080f2:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f01080f8:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01080fe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108104:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010810a:	89 d0                	mov    %edx,%eax
f010810c:	01 c0                	add    %eax,%eax
f010810e:	01 d0                	add    %edx,%eax
f0108110:	c1 e0 03             	shl    $0x3,%eax
f0108113:	01 c8                	add    %ecx,%eax
f0108115:	05 88 00 00 00       	add    $0x88,%eax
f010811a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108120:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108126:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010812c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108132:	89 d0                	mov    %edx,%eax
f0108134:	01 c0                	add    %eax,%eax
f0108136:	01 d0                	add    %edx,%eax
f0108138:	c1 e0 03             	shl    $0x3,%eax
f010813b:	01 c8                	add    %ecx,%eax
f010813d:	05 8c 00 00 00       	add    $0x8c,%eax
f0108142:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108148:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010814e:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f0108154:	4a                   	dec    %edx
f0108155:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010815b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108161:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108167:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010816d:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0108173:	39 c2                	cmp    %eax,%edx
f0108175:	0f 83 56 01 00 00    	jae    f01082d1 <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010817b:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108181:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108187:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010818d:	89 d0                	mov    %edx,%eax
f010818f:	01 c0                	add    %eax,%eax
f0108191:	01 d0                	add    %edx,%eax
f0108193:	c1 e0 03             	shl    $0x3,%eax
f0108196:	83 c0 70             	add    $0x70,%eax
f0108199:	01 c8                	add    %ecx,%eax
f010819b:	83 c0 08             	add    $0x8,%eax
f010819e:	85 c0                	test   %eax,%eax
f01081a0:	75 17                	jne    f01081b9 <env_create+0x955>
f01081a2:	83 ec 04             	sub    $0x4,%esp
f01081a5:	68 c8 d4 12 f0       	push   $0xf012d4c8
f01081aa:	68 46 01 00 00       	push   $0x146
f01081af:	68 47 d4 12 f0       	push   $0xf012d447
f01081b4:	e8 ed 7f ff ff       	call   f01001a6 <_panic>
f01081b9:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01081bf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081c5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01081cb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081d1:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f01081d7:	89 d0                	mov    %edx,%eax
f01081d9:	01 c0                	add    %eax,%eax
f01081db:	01 d0                	add    %edx,%eax
f01081dd:	c1 e0 03             	shl    $0x3,%eax
f01081e0:	01 c8                	add    %ecx,%eax
f01081e2:	05 88 00 00 00       	add    $0x88,%eax
f01081e7:	89 18                	mov    %ebx,(%eax)
f01081e9:	89 d0                	mov    %edx,%eax
f01081eb:	01 c0                	add    %eax,%eax
f01081ed:	01 d0                	add    %edx,%eax
f01081ef:	c1 e0 03             	shl    $0x3,%eax
f01081f2:	01 c8                	add    %ecx,%eax
f01081f4:	05 88 00 00 00       	add    $0x88,%eax
f01081f9:	8b 00                	mov    (%eax),%eax
f01081fb:	85 c0                	test   %eax,%eax
f01081fd:	74 34                	je     f0108233 <env_create+0x9cf>
f01081ff:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108205:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f010820b:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108211:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108217:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010821d:	89 c8                	mov    %ecx,%eax
f010821f:	01 c0                	add    %eax,%eax
f0108221:	01 c8                	add    %ecx,%eax
f0108223:	c1 e0 03             	shl    $0x3,%eax
f0108226:	83 c0 70             	add    $0x70,%eax
f0108229:	01 d8                	add    %ebx,%eax
f010822b:	83 c0 08             	add    $0x8,%eax
f010822e:	89 42 14             	mov    %eax,0x14(%edx)
f0108231:	eb 2f                	jmp    f0108262 <env_create+0x9fe>
f0108233:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108239:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010823f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108245:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010824b:	89 c8                	mov    %ecx,%eax
f010824d:	01 c0                	add    %eax,%eax
f010824f:	01 c8                	add    %ecx,%eax
f0108251:	c1 e0 03             	shl    $0x3,%eax
f0108254:	83 c0 70             	add    $0x70,%eax
f0108257:	01 d8                	add    %ebx,%eax
f0108259:	83 c0 08             	add    $0x8,%eax
f010825c:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f0108262:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108268:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010826e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108274:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010827a:	89 c8                	mov    %ecx,%eax
f010827c:	01 c0                	add    %eax,%eax
f010827e:	01 c8                	add    %ecx,%eax
f0108280:	c1 e0 03             	shl    $0x3,%eax
f0108283:	83 c0 70             	add    $0x70,%eax
f0108286:	01 d8                	add    %ebx,%eax
f0108288:	83 c0 08             	add    $0x8,%eax
f010828b:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f0108291:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108297:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010829d:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01082a3:	89 d0                	mov    %edx,%eax
f01082a5:	01 c0                	add    %eax,%eax
f01082a7:	01 d0                	add    %edx,%eax
f01082a9:	c1 e0 03             	shl    $0x3,%eax
f01082ac:	01 c8                	add    %ecx,%eax
f01082ae:	05 8c 00 00 00       	add    $0x8c,%eax
f01082b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01082b9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01082bf:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01082c5:	42                   	inc    %edx
f01082c6:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f01082cc:	e9 51 01 00 00       	jmp    f0108422 <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01082d1:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01082d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01082dd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01082e3:	89 d0                	mov    %edx,%eax
f01082e5:	01 c0                	add    %eax,%eax
f01082e7:	01 d0                	add    %edx,%eax
f01082e9:	c1 e0 03             	shl    $0x3,%eax
f01082ec:	83 c0 70             	add    $0x70,%eax
f01082ef:	01 c8                	add    %ecx,%eax
f01082f1:	83 c0 08             	add    $0x8,%eax
f01082f4:	85 c0                	test   %eax,%eax
f01082f6:	75 17                	jne    f010830f <env_create+0xaab>
f01082f8:	83 ec 04             	sub    $0x4,%esp
f01082fb:	68 c8 d4 12 f0       	push   $0xf012d4c8
f0108300:	68 4a 01 00 00       	push   $0x14a
f0108305:	68 47 d4 12 f0       	push   $0xf012d447
f010830a:	e8 97 7e ff ff       	call   f01001a6 <_panic>
f010830f:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108315:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010831b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108321:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108327:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f010832d:	89 d0                	mov    %edx,%eax
f010832f:	01 c0                	add    %eax,%eax
f0108331:	01 d0                	add    %edx,%eax
f0108333:	c1 e0 03             	shl    $0x3,%eax
f0108336:	01 c8                	add    %ecx,%eax
f0108338:	05 88 00 00 00       	add    $0x88,%eax
f010833d:	89 18                	mov    %ebx,(%eax)
f010833f:	89 d0                	mov    %edx,%eax
f0108341:	01 c0                	add    %eax,%eax
f0108343:	01 d0                	add    %edx,%eax
f0108345:	c1 e0 03             	shl    $0x3,%eax
f0108348:	01 c8                	add    %ecx,%eax
f010834a:	05 88 00 00 00       	add    $0x88,%eax
f010834f:	8b 00                	mov    (%eax),%eax
f0108351:	85 c0                	test   %eax,%eax
f0108353:	74 34                	je     f0108389 <env_create+0xb25>
f0108355:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010835b:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0108361:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108367:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010836d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108373:	89 c8                	mov    %ecx,%eax
f0108375:	01 c0                	add    %eax,%eax
f0108377:	01 c8                	add    %ecx,%eax
f0108379:	c1 e0 03             	shl    $0x3,%eax
f010837c:	83 c0 70             	add    $0x70,%eax
f010837f:	01 d8                	add    %ebx,%eax
f0108381:	83 c0 08             	add    $0x8,%eax
f0108384:	89 42 14             	mov    %eax,0x14(%edx)
f0108387:	eb 2f                	jmp    f01083b8 <env_create+0xb54>
f0108389:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010838f:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108395:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010839b:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01083a1:	89 c8                	mov    %ecx,%eax
f01083a3:	01 c0                	add    %eax,%eax
f01083a5:	01 c8                	add    %ecx,%eax
f01083a7:	c1 e0 03             	shl    $0x3,%eax
f01083aa:	83 c0 70             	add    $0x70,%eax
f01083ad:	01 d8                	add    %ebx,%eax
f01083af:	83 c0 08             	add    $0x8,%eax
f01083b2:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f01083b8:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01083be:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01083c4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01083ca:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01083d0:	89 c8                	mov    %ecx,%eax
f01083d2:	01 c0                	add    %eax,%eax
f01083d4:	01 c8                	add    %ecx,%eax
f01083d6:	c1 e0 03             	shl    $0x3,%eax
f01083d9:	83 c0 70             	add    $0x70,%eax
f01083dc:	01 d8                	add    %ebx,%eax
f01083de:	83 c0 08             	add    $0x8,%eax
f01083e1:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f01083e7:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01083ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01083f3:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01083f9:	89 d0                	mov    %edx,%eax
f01083fb:	01 c0                	add    %eax,%eax
f01083fd:	01 d0                	add    %edx,%eax
f01083ff:	c1 e0 03             	shl    $0x3,%eax
f0108402:	01 c8                	add    %ecx,%eax
f0108404:	05 8c 00 00 00       	add    $0x8c,%eax
f0108409:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010840f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108415:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010841b:	42                   	inc    %edx
f010841c:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f0108422:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108428:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010842e:	42                   	inc    %edx
f010842f:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0108435:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010843b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108441:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108447:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010844d:	8b 5a 74             	mov    0x74(%edx),%ebx
f0108450:	ba 00 00 00 00       	mov    $0x0,%edx
f0108455:	f7 f3                	div    %ebx
f0108457:	89 d0                	mov    %edx,%eax
f0108459:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010845f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108465:	83 ec 04             	sub    $0x4,%esp
f0108468:	6a 01                	push   $0x1
f010846a:	ff 75 c0             	pushl  -0x40(%ebp)
f010846d:	50                   	push   %eax
f010846e:	e8 90 a7 ff ff       	call   f0102c03 <pf_add_empty_env_page>
f0108473:	83 c4 10             	add    $0x10,%esp
f0108476:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010847c:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0108483:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108486:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f010848c:	0f 83 57 fa ff ff    	jae    f0107ee9 <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108492:	83 ec 0c             	sub    $0xc,%esp
f0108495:	6a 02                	push   $0x2
f0108497:	e8 c3 42 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f010849c:	83 c4 10             	add    $0x10,%esp
f010849f:	85 c0                	test   %eax,%eax
f01084a1:	74 72                	je     f0108515 <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f01084a3:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01084aa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084b0:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f01084b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01084b9:	eb 2b                	jmp    f01084e6 <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01084bb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01084be:	8b 10                	mov    (%eax),%edx
f01084c0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084c6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01084c9:	6a 01                	push   $0x1
f01084cb:	6a 00                	push   $0x0
f01084cd:	52                   	push   %edx
f01084ce:	50                   	push   %eax
f01084cf:	e8 f0 e7 ff ff       	call   f0106cc4 <pt_set_page_permissions>
f01084d4:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01084d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084dd:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f01084e3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01084e6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084ec:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01084f0:	74 08                	je     f01084fa <env_create+0xc96>
f01084f2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01084f5:	8b 52 10             	mov    0x10(%edx),%edx
f01084f8:	eb 05                	jmp    f01084ff <env_create+0xc9b>
f01084fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01084ff:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f0108505:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010850b:	85 c0                	test   %eax,%eax
f010850d:	75 ac                	jne    f01084bb <env_create+0xc57>
f010850f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108513:	75 a6                	jne    f01084bb <env_create+0xc57>
f0108515:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108518:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010851b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010851e:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0108521:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f0108527:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010852a:	5b                   	pop    %ebx
f010852b:	5e                   	pop    %esi
f010852c:	5f                   	pop    %edi
f010852d:	5d                   	pop    %ebp
f010852e:	c3                   	ret    

f010852f <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010852f:	55                   	push   %ebp
f0108530:	89 e5                	mov    %esp,%ebp
f0108532:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0108535:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010853a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010853d:	74 25                	je     f0108564 <env_run+0x35>
	{
		curenv = e ;
f010853f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108542:	a3 74 46 64 f0       	mov    %eax,0xf0644674
		curenv->env_runs++ ;
f0108547:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010854c:	8b 50 58             	mov    0x58(%eax),%edx
f010854f:	42                   	inc    %edx
f0108550:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0108553:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0108558:	8b 40 60             	mov    0x60(%eax),%eax
f010855b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010855e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108561:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0108564:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0108569:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0108570:	e8 7c b3 ff ff       	call   f01038f1 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0108575:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010857a:	83 ec 0c             	sub    $0xc,%esp
f010857d:	50                   	push   %eax
f010857e:	e8 11 01 00 00       	call   f0108694 <env_pop_tf>

f0108583 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0108583:	55                   	push   %ebp
f0108584:	89 e5                	mov    %esp,%ebp
f0108586:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0108589:	83 ec 04             	sub    $0x4,%esp
f010858c:	68 ec d4 12 f0       	push   $0xf012d4ec
f0108591:	68 9d 01 00 00       	push   $0x19d
f0108596:	68 47 d4 12 f0       	push   $0xf012d447
f010859b:	e8 06 7c ff ff       	call   f01001a6 <_panic>

f01085a0 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01085a0:	55                   	push   %ebp
f01085a1:	89 e5                	mov    %esp,%ebp
f01085a3:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01085a6:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01085ab:	8b 40 4c             	mov    0x4c(%eax),%eax
f01085ae:	83 ec 0c             	sub    $0xc,%esp
f01085b1:	50                   	push   %eax
f01085b2:	e8 76 c3 ff ff       	call   f010492d <sched_exit_env>
f01085b7:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01085ba:	e8 44 b8 ff ff       	call   f0103e03 <fos_scheduler>

f01085bf <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01085bf:	55                   	push   %ebp
f01085c0:	89 e5                	mov    %esp,%ebp
f01085c2:	53                   	push   %ebx
f01085c3:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01085c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01085ca:	75 15                	jne    f01085e1 <envid2env+0x22>
		*env_store = curenv;
f01085cc:	8b 15 74 46 64 f0    	mov    0xf0644674,%edx
f01085d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085d5:	89 10                	mov    %edx,(%eax)
		return 0;
f01085d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01085dc:	e9 ae 00 00 00       	jmp    f010868f <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01085e1:	8b 1d 70 46 64 f0    	mov    0xf0644670,%ebx
f01085e7:	83 ec 0c             	sub    $0xc,%esp
f01085ea:	6a 08                	push   $0x8
f01085ec:	e8 c5 fd 01 00       	call   f01283b6 <nearest_pow2_ceil>
f01085f1:	83 c4 10             	add    $0x10,%esp
f01085f4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01085f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01085fa:	21 c2                	and    %eax,%edx
f01085fc:	89 d0                	mov    %edx,%eax
f01085fe:	01 c0                	add    %eax,%eax
f0108600:	01 d0                	add    %edx,%eax
f0108602:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0108609:	01 c8                	add    %ecx,%eax
f010860b:	c1 e0 02             	shl    $0x2,%eax
f010860e:	01 d0                	add    %edx,%eax
f0108610:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0108617:	01 c8                	add    %ecx,%eax
f0108619:	c1 e0 02             	shl    $0x2,%eax
f010861c:	01 d0                	add    %edx,%eax
f010861e:	c1 e0 02             	shl    $0x2,%eax
f0108621:	01 d0                	add    %edx,%eax
f0108623:	c1 e0 03             	shl    $0x3,%eax
f0108626:	01 d8                	add    %ebx,%eax
f0108628:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010862b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010862e:	8b 40 54             	mov    0x54(%eax),%eax
f0108631:	85 c0                	test   %eax,%eax
f0108633:	74 0b                	je     f0108640 <envid2env+0x81>
f0108635:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108638:	8b 40 4c             	mov    0x4c(%eax),%eax
f010863b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010863e:	74 10                	je     f0108650 <envid2env+0x91>
		*env_store = 0;
f0108640:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108643:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0108649:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010864e:	eb 3f                	jmp    f010868f <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0108650:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0108654:	74 2c                	je     f0108682 <envid2env+0xc3>
f0108656:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010865b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010865e:	74 22                	je     f0108682 <envid2env+0xc3>
f0108660:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108663:	8b 50 50             	mov    0x50(%eax),%edx
f0108666:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010866b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010866e:	39 c2                	cmp    %eax,%edx
f0108670:	74 10                	je     f0108682 <envid2env+0xc3>
		*env_store = 0;
f0108672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108675:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010867b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0108680:	eb 0d                	jmp    f010868f <envid2env+0xd0>
	}

	*env_store = e;
f0108682:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108685:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108688:	89 10                	mov    %edx,(%eax)
	return 0;
f010868a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010868f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108692:	c9                   	leave  
f0108693:	c3                   	ret    

f0108694 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0108694:	55                   	push   %ebp
f0108695:	89 e5                	mov    %esp,%ebp
f0108697:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010869a:	8b 65 08             	mov    0x8(%ebp),%esp
f010869d:	61                   	popa   
f010869e:	07                   	pop    %es
f010869f:	1f                   	pop    %ds
f01086a0:	83 c4 08             	add    $0x8,%esp
f01086a3:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01086a4:	83 ec 04             	sub    $0x4,%esp
f01086a7:	68 13 d5 12 f0       	push   $0xf012d513
f01086ac:	68 fc 01 00 00       	push   $0x1fc
f01086b1:	68 47 d4 12 f0       	push   $0xf012d447
f01086b6:	e8 eb 7a ff ff       	call   f01001a6 <_panic>

f01086bb <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01086bb:	55                   	push   %ebp
f01086bc:	89 e5                	mov    %esp,%ebp
f01086be:	56                   	push   %esi
f01086bf:	53                   	push   %ebx
f01086c0:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01086c3:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f01086ca:	e9 0b 02 00 00       	jmp    f01088da <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f01086cf:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f01086d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086d8:	89 d0                	mov    %edx,%eax
f01086da:	01 c0                	add    %eax,%eax
f01086dc:	01 d0                	add    %edx,%eax
f01086de:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01086e5:	01 d8                	add    %ebx,%eax
f01086e7:	c1 e0 02             	shl    $0x2,%eax
f01086ea:	01 d0                	add    %edx,%eax
f01086ec:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01086f3:	01 d8                	add    %ebx,%eax
f01086f5:	c1 e0 02             	shl    $0x2,%eax
f01086f8:	01 d0                	add    %edx,%eax
f01086fa:	c1 e0 02             	shl    $0x2,%eax
f01086fd:	01 d0                	add    %edx,%eax
f01086ff:	c1 e0 03             	shl    $0x3,%eax
f0108702:	01 c8                	add    %ecx,%eax
f0108704:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010870b:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f0108711:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108714:	89 d0                	mov    %edx,%eax
f0108716:	01 c0                	add    %eax,%eax
f0108718:	01 d0                	add    %edx,%eax
f010871a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108721:	01 d8                	add    %ebx,%eax
f0108723:	c1 e0 02             	shl    $0x2,%eax
f0108726:	01 d0                	add    %edx,%eax
f0108728:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010872f:	01 d8                	add    %ebx,%eax
f0108731:	c1 e0 02             	shl    $0x2,%eax
f0108734:	01 d0                	add    %edx,%eax
f0108736:	c1 e0 02             	shl    $0x2,%eax
f0108739:	01 d0                	add    %edx,%eax
f010873b:	c1 e0 03             	shl    $0x3,%eax
f010873e:	01 c8                	add    %ecx,%eax
f0108740:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0108747:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f010874d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108750:	89 d0                	mov    %edx,%eax
f0108752:	01 c0                	add    %eax,%eax
f0108754:	01 d0                	add    %edx,%eax
f0108756:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010875d:	01 d8                	add    %ebx,%eax
f010875f:	c1 e0 02             	shl    $0x2,%eax
f0108762:	01 d0                	add    %edx,%eax
f0108764:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010876b:	01 d8                	add    %ebx,%eax
f010876d:	c1 e0 02             	shl    $0x2,%eax
f0108770:	01 d0                	add    %edx,%eax
f0108772:	c1 e0 02             	shl    $0x2,%eax
f0108775:	01 d0                	add    %edx,%eax
f0108777:	c1 e0 03             	shl    $0x3,%eax
f010877a:	01 c8                	add    %ecx,%eax
f010877c:	85 c0                	test   %eax,%eax
f010877e:	75 17                	jne    f0108797 <env_init+0xdc>
f0108780:	83 ec 04             	sub    $0x4,%esp
f0108783:	68 c8 d4 12 f0       	push   $0xf012d4c8
f0108788:	68 18 02 00 00       	push   $0x218
f010878d:	68 47 d4 12 f0       	push   $0xf012d447
f0108792:	e8 0f 7a ff ff       	call   f01001a6 <_panic>
f0108797:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f010879d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087a0:	89 d0                	mov    %edx,%eax
f01087a2:	01 c0                	add    %eax,%eax
f01087a4:	01 d0                	add    %edx,%eax
f01087a6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01087ad:	01 d8                	add    %ebx,%eax
f01087af:	c1 e0 02             	shl    $0x2,%eax
f01087b2:	01 d0                	add    %edx,%eax
f01087b4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01087bb:	01 d8                	add    %ebx,%eax
f01087bd:	c1 e0 02             	shl    $0x2,%eax
f01087c0:	01 d0                	add    %edx,%eax
f01087c2:	c1 e0 02             	shl    $0x2,%eax
f01087c5:	01 d0                	add    %edx,%eax
f01087c7:	c1 e0 03             	shl    $0x3,%eax
f01087ca:	01 c8                	add    %ecx,%eax
f01087cc:	8b 15 78 46 64 f0    	mov    0xf0644678,%edx
f01087d2:	89 50 44             	mov    %edx,0x44(%eax)
f01087d5:	8b 40 44             	mov    0x44(%eax),%eax
f01087d8:	85 c0                	test   %eax,%eax
f01087da:	74 40                	je     f010881c <env_init+0x161>
f01087dc:	8b 0d 78 46 64 f0    	mov    0xf0644678,%ecx
f01087e2:	8b 1d 70 46 64 f0    	mov    0xf0644670,%ebx
f01087e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087eb:	89 d0                	mov    %edx,%eax
f01087ed:	01 c0                	add    %eax,%eax
f01087ef:	01 d0                	add    %edx,%eax
f01087f1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01087f8:	01 f0                	add    %esi,%eax
f01087fa:	c1 e0 02             	shl    $0x2,%eax
f01087fd:	01 d0                	add    %edx,%eax
f01087ff:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0108806:	01 f0                	add    %esi,%eax
f0108808:	c1 e0 02             	shl    $0x2,%eax
f010880b:	01 d0                	add    %edx,%eax
f010880d:	c1 e0 02             	shl    $0x2,%eax
f0108810:	01 d0                	add    %edx,%eax
f0108812:	c1 e0 03             	shl    $0x3,%eax
f0108815:	01 d8                	add    %ebx,%eax
f0108817:	89 41 48             	mov    %eax,0x48(%ecx)
f010881a:	eb 3a                	jmp    f0108856 <env_init+0x19b>
f010881c:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f0108822:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108825:	89 d0                	mov    %edx,%eax
f0108827:	01 c0                	add    %eax,%eax
f0108829:	01 d0                	add    %edx,%eax
f010882b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108832:	01 d8                	add    %ebx,%eax
f0108834:	c1 e0 02             	shl    $0x2,%eax
f0108837:	01 d0                	add    %edx,%eax
f0108839:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108840:	01 d8                	add    %ebx,%eax
f0108842:	c1 e0 02             	shl    $0x2,%eax
f0108845:	01 d0                	add    %edx,%eax
f0108847:	c1 e0 02             	shl    $0x2,%eax
f010884a:	01 d0                	add    %edx,%eax
f010884c:	c1 e0 03             	shl    $0x3,%eax
f010884f:	01 c8                	add    %ecx,%eax
f0108851:	a3 7c 46 64 f0       	mov    %eax,0xf064467c
f0108856:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f010885c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010885f:	89 d0                	mov    %edx,%eax
f0108861:	01 c0                	add    %eax,%eax
f0108863:	01 d0                	add    %edx,%eax
f0108865:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010886c:	01 d8                	add    %ebx,%eax
f010886e:	c1 e0 02             	shl    $0x2,%eax
f0108871:	01 d0                	add    %edx,%eax
f0108873:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010887a:	01 d8                	add    %ebx,%eax
f010887c:	c1 e0 02             	shl    $0x2,%eax
f010887f:	01 d0                	add    %edx,%eax
f0108881:	c1 e0 02             	shl    $0x2,%eax
f0108884:	01 d0                	add    %edx,%eax
f0108886:	c1 e0 03             	shl    $0x3,%eax
f0108889:	01 c8                	add    %ecx,%eax
f010888b:	a3 78 46 64 f0       	mov    %eax,0xf0644678
f0108890:	8b 0d 70 46 64 f0    	mov    0xf0644670,%ecx
f0108896:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108899:	89 d0                	mov    %edx,%eax
f010889b:	01 c0                	add    %eax,%eax
f010889d:	01 d0                	add    %edx,%eax
f010889f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01088a6:	01 d8                	add    %ebx,%eax
f01088a8:	c1 e0 02             	shl    $0x2,%eax
f01088ab:	01 d0                	add    %edx,%eax
f01088ad:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01088b4:	01 d8                	add    %ebx,%eax
f01088b6:	c1 e0 02             	shl    $0x2,%eax
f01088b9:	01 d0                	add    %edx,%eax
f01088bb:	c1 e0 02             	shl    $0x2,%eax
f01088be:	01 d0                	add    %edx,%eax
f01088c0:	c1 e0 03             	shl    $0x3,%eax
f01088c3:	01 c8                	add    %ecx,%eax
f01088c5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01088cc:	a1 84 46 64 f0       	mov    0xf0644684,%eax
f01088d1:	40                   	inc    %eax
f01088d2:	a3 84 46 64 f0       	mov    %eax,0xf0644684
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01088d7:	ff 4d f4             	decl   -0xc(%ebp)
f01088da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01088de:	0f 89 eb fd ff ff    	jns    f01086cf <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01088e4:	90                   	nop
f01088e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01088e8:	5b                   	pop    %ebx
f01088e9:	5e                   	pop    %esi
f01088ea:	5d                   	pop    %ebp
f01088eb:	c3                   	ret    

f01088ec <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01088ec:	55                   	push   %ebp
f01088ed:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01088ef:	8b 15 78 46 64 f0    	mov    0xf0644678,%edx
f01088f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01088f8:	89 10                	mov    %edx,(%eax)
f01088fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01088fd:	8b 00                	mov    (%eax),%eax
f01088ff:	85 c0                	test   %eax,%eax
f0108901:	75 07                	jne    f010890a <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0108903:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0108908:	eb 11                	jmp    f010891b <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010890a:	8b 45 08             	mov    0x8(%ebp),%eax
f010890d:	8b 00                	mov    (%eax),%eax
f010890f:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0108916:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010891b:	5d                   	pop    %ebp
f010891c:	c3                   	ret    

f010891d <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010891d:	55                   	push   %ebp
f010891e:	89 e5                	mov    %esp,%ebp
f0108920:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0108923:	83 ec 04             	sub    $0x4,%esp
f0108926:	68 a8 ea 01 00       	push   $0x1eaa8
f010892b:	6a 00                	push   $0x0
f010892d:	ff 75 08             	pushl  0x8(%ebp)
f0108930:	e8 e4 0e 02 00       	call   f0129819 <memset>
f0108935:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0108938:	8b 45 08             	mov    0x8(%ebp),%eax
f010893b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0108942:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108946:	75 17                	jne    f010895f <free_environment+0x42>
f0108948:	83 ec 04             	sub    $0x4,%esp
f010894b:	68 c8 d4 12 f0       	push   $0xf012d4c8
f0108950:	68 35 02 00 00       	push   $0x235
f0108955:	68 47 d4 12 f0       	push   $0xf012d447
f010895a:	e8 47 78 ff ff       	call   f01001a6 <_panic>
f010895f:	8b 15 78 46 64 f0    	mov    0xf0644678,%edx
f0108965:	8b 45 08             	mov    0x8(%ebp),%eax
f0108968:	89 50 44             	mov    %edx,0x44(%eax)
f010896b:	8b 45 08             	mov    0x8(%ebp),%eax
f010896e:	8b 40 44             	mov    0x44(%eax),%eax
f0108971:	85 c0                	test   %eax,%eax
f0108973:	74 0d                	je     f0108982 <free_environment+0x65>
f0108975:	a1 78 46 64 f0       	mov    0xf0644678,%eax
f010897a:	8b 55 08             	mov    0x8(%ebp),%edx
f010897d:	89 50 48             	mov    %edx,0x48(%eax)
f0108980:	eb 08                	jmp    f010898a <free_environment+0x6d>
f0108982:	8b 45 08             	mov    0x8(%ebp),%eax
f0108985:	a3 7c 46 64 f0       	mov    %eax,0xf064467c
f010898a:	8b 45 08             	mov    0x8(%ebp),%eax
f010898d:	a3 78 46 64 f0       	mov    %eax,0xf0644678
f0108992:	8b 45 08             	mov    0x8(%ebp),%eax
f0108995:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010899c:	a1 84 46 64 f0       	mov    0xf0644684,%eax
f01089a1:	40                   	inc    %eax
f01089a2:	a3 84 46 64 f0       	mov    %eax,0xf0644684
}
f01089a7:	90                   	nop
f01089a8:	c9                   	leave  
f01089a9:	c3                   	ret    

f01089aa <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f01089aa:	55                   	push   %ebp
f01089ab:	89 e5                	mov    %esp,%ebp
f01089ad:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f01089b0:	83 ec 04             	sub    $0x4,%esp
f01089b3:	68 20 d5 12 f0       	push   $0xf012d520
f01089b8:	68 3f 02 00 00       	push   $0x23f
f01089bd:	68 47 d4 12 f0       	push   $0xf012d447
f01089c2:	e8 df 77 ff ff       	call   f01001a6 <_panic>

f01089c7 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01089c7:	55                   	push   %ebp
f01089c8:	89 e5                	mov    %esp,%ebp
f01089ca:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f01089cd:	83 ec 04             	sub    $0x4,%esp
f01089d0:	68 54 d5 12 f0       	push   $0xf012d554
f01089d5:	68 4b 02 00 00       	push   $0x24b
f01089da:	68 47 d4 12 f0       	push   $0xf012d447
f01089df:	e8 c2 77 ff ff       	call   f01001a6 <_panic>

f01089e4 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01089e4:	55                   	push   %ebp
f01089e5:	89 e5                	mov    %esp,%ebp
f01089e7:	53                   	push   %ebx
f01089e8:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f01089eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089ee:	8b 40 0c             	mov    0xc(%eax),%eax
f01089f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01089f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01089f7:	8b 40 08             	mov    0x8(%eax),%eax
f01089fa:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01089fd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108a04:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108a07:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108a0a:	01 c2                	add    %eax,%edx
f0108a0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108a0f:	01 d0                	add    %edx,%eax
f0108a11:	48                   	dec    %eax
f0108a12:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108a15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0108a1d:	f7 75 dc             	divl   -0x24(%ebp)
f0108a20:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108a23:	29 d0                	sub    %edx,%eax
f0108a25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0108a28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108a2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0108a2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108a31:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108a36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0108a39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0108a40:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0108a47:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0108a50:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0108a57:	0f 85 12 06 00 00    	jne    f010906f <program_segment_alloc_map_copy_workingset+0x68b>
f0108a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a60:	05 18 da 01 00       	add    $0x1da18,%eax
f0108a65:	83 ec 08             	sub    $0x8,%esp
f0108a68:	68 88 d5 12 f0       	push   $0xf012d588
f0108a6d:	50                   	push   %eax
f0108a6e:	e8 c4 0c 02 00       	call   f0129737 <strcmp>
f0108a73:	83 c4 10             	add    $0x10,%esp
f0108a76:	85 c0                	test   %eax,%eax
f0108a78:	0f 84 f1 05 00 00    	je     f010906f <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0108a7e:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a81:	83 f8 06             	cmp    $0x6,%eax
f0108a84:	76 05                	jbe    f0108a8b <program_segment_alloc_map_copy_workingset+0xa7>
f0108a86:	b8 06 00 00 00       	mov    $0x6,%eax
f0108a8b:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0108a8e:	e9 dc 05 00 00       	jmp    f010906f <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0108a93:	83 ec 0c             	sub    $0xc,%esp
f0108a96:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108a99:	50                   	push   %eax
f0108a9a:	e8 23 d5 ff ff       	call   f0105fc2 <allocate_frame>
f0108a9f:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0108aa2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0108aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108aa8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108aab:	6a 06                	push   $0x6
f0108aad:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ab0:	52                   	push   %edx
f0108ab1:	50                   	push   %eax
f0108ab2:	e8 59 da ff ff       	call   f0106510 <loadtime_map_frame>
f0108ab7:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0108aba:	8b 45 08             	mov    0x8(%ebp),%eax
f0108abd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ac3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ac6:	89 d0                	mov    %edx,%eax
f0108ac8:	01 c0                	add    %eax,%eax
f0108aca:	01 d0                	add    %edx,%eax
f0108acc:	c1 e0 03             	shl    $0x3,%eax
f0108acf:	01 c8                	add    %ecx,%eax
f0108ad1:	8d 50 78             	lea    0x78(%eax),%edx
f0108ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ad7:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0108ad9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108adc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ae2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ae5:	89 d0                	mov    %edx,%eax
f0108ae7:	01 c0                	add    %eax,%eax
f0108ae9:	01 d0                	add    %edx,%eax
f0108aeb:	c1 e0 03             	shl    $0x3,%eax
f0108aee:	01 c8                	add    %ecx,%eax
f0108af0:	83 c0 7c             	add    $0x7c,%eax
f0108af3:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0108af6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108af9:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108aff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b02:	89 d0                	mov    %edx,%eax
f0108b04:	01 c0                	add    %eax,%eax
f0108b06:	01 d0                	add    %edx,%eax
f0108b08:	c1 e0 03             	shl    $0x3,%eax
f0108b0b:	01 c8                	add    %ecx,%eax
f0108b0d:	83 e8 80             	sub    $0xffffff80,%eax
f0108b10:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108b16:	83 ec 0c             	sub    $0xc,%esp
f0108b19:	6a 02                	push   $0x2
f0108b1b:	e8 3f 3c 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0108b20:	83 c4 10             	add    $0x10,%esp
f0108b23:	85 c0                	test   %eax,%eax
f0108b25:	0f 84 11 04 00 00    	je     f0108f3c <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108b2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b2e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b34:	89 d0                	mov    %edx,%eax
f0108b36:	01 c0                	add    %eax,%eax
f0108b38:	01 d0                	add    %edx,%eax
f0108b3a:	c1 e0 03             	shl    $0x3,%eax
f0108b3d:	8d 50 70             	lea    0x70(%eax),%edx
f0108b40:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b43:	01 d0                	add    %edx,%eax
f0108b45:	83 c0 08             	add    $0x8,%eax
f0108b48:	85 c0                	test   %eax,%eax
f0108b4a:	75 17                	jne    f0108b63 <program_segment_alloc_map_copy_workingset+0x17f>
f0108b4c:	83 ec 04             	sub    $0x4,%esp
f0108b4f:	68 a9 d4 12 f0       	push   $0xf012d4a9
f0108b54:	68 7d 02 00 00       	push   $0x27d
f0108b59:	68 47 d4 12 f0       	push   $0xf012d447
f0108b5e:	e8 43 76 ff ff       	call   f01001a6 <_panic>
f0108b63:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b66:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b6c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b6f:	89 d0                	mov    %edx,%eax
f0108b71:	01 c0                	add    %eax,%eax
f0108b73:	01 d0                	add    %edx,%eax
f0108b75:	c1 e0 03             	shl    $0x3,%eax
f0108b78:	01 c8                	add    %ecx,%eax
f0108b7a:	05 88 00 00 00       	add    $0x88,%eax
f0108b7f:	8b 00                	mov    (%eax),%eax
f0108b81:	85 c0                	test   %eax,%eax
f0108b83:	74 41                	je     f0108bc6 <program_segment_alloc_map_copy_workingset+0x1e2>
f0108b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b88:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b8e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b91:	89 d0                	mov    %edx,%eax
f0108b93:	01 c0                	add    %eax,%eax
f0108b95:	01 d0                	add    %edx,%eax
f0108b97:	c1 e0 03             	shl    $0x3,%eax
f0108b9a:	01 c8                	add    %ecx,%eax
f0108b9c:	05 88 00 00 00       	add    $0x88,%eax
f0108ba1:	8b 10                	mov    (%eax),%edx
f0108ba3:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ba6:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108bac:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108baf:	89 c8                	mov    %ecx,%eax
f0108bb1:	01 c0                	add    %eax,%eax
f0108bb3:	01 c8                	add    %ecx,%eax
f0108bb5:	c1 e0 03             	shl    $0x3,%eax
f0108bb8:	01 d8                	add    %ebx,%eax
f0108bba:	05 8c 00 00 00       	add    $0x8c,%eax
f0108bbf:	8b 00                	mov    (%eax),%eax
f0108bc1:	89 42 14             	mov    %eax,0x14(%edx)
f0108bc4:	eb 27                	jmp    f0108bed <program_segment_alloc_map_copy_workingset+0x209>
f0108bc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bc9:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108bcf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108bd2:	89 d0                	mov    %edx,%eax
f0108bd4:	01 c0                	add    %eax,%eax
f0108bd6:	01 d0                	add    %edx,%eax
f0108bd8:	c1 e0 03             	shl    $0x3,%eax
f0108bdb:	01 c8                	add    %ecx,%eax
f0108bdd:	05 8c 00 00 00       	add    $0x8c,%eax
f0108be2:	8b 10                	mov    (%eax),%edx
f0108be4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108be7:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0108bed:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bf0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108bf6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108bf9:	89 d0                	mov    %edx,%eax
f0108bfb:	01 c0                	add    %eax,%eax
f0108bfd:	01 d0                	add    %edx,%eax
f0108bff:	c1 e0 03             	shl    $0x3,%eax
f0108c02:	01 c8                	add    %ecx,%eax
f0108c04:	05 8c 00 00 00       	add    $0x8c,%eax
f0108c09:	8b 00                	mov    (%eax),%eax
f0108c0b:	85 c0                	test   %eax,%eax
f0108c0d:	74 41                	je     f0108c50 <program_segment_alloc_map_copy_workingset+0x26c>
f0108c0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c12:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c18:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108c1b:	89 d0                	mov    %edx,%eax
f0108c1d:	01 c0                	add    %eax,%eax
f0108c1f:	01 d0                	add    %edx,%eax
f0108c21:	c1 e0 03             	shl    $0x3,%eax
f0108c24:	01 c8                	add    %ecx,%eax
f0108c26:	05 8c 00 00 00       	add    $0x8c,%eax
f0108c2b:	8b 10                	mov    (%eax),%edx
f0108c2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c30:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108c36:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108c39:	89 c8                	mov    %ecx,%eax
f0108c3b:	01 c0                	add    %eax,%eax
f0108c3d:	01 c8                	add    %ecx,%eax
f0108c3f:	c1 e0 03             	shl    $0x3,%eax
f0108c42:	01 d8                	add    %ebx,%eax
f0108c44:	05 88 00 00 00       	add    $0x88,%eax
f0108c49:	8b 00                	mov    (%eax),%eax
f0108c4b:	89 42 10             	mov    %eax,0x10(%edx)
f0108c4e:	eb 27                	jmp    f0108c77 <program_segment_alloc_map_copy_workingset+0x293>
f0108c50:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c53:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c59:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108c5c:	89 d0                	mov    %edx,%eax
f0108c5e:	01 c0                	add    %eax,%eax
f0108c60:	01 d0                	add    %edx,%eax
f0108c62:	c1 e0 03             	shl    $0x3,%eax
f0108c65:	01 c8                	add    %ecx,%eax
f0108c67:	05 88 00 00 00       	add    $0x88,%eax
f0108c6c:	8b 10                	mov    (%eax),%edx
f0108c6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c71:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0108c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c7a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c80:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108c83:	89 d0                	mov    %edx,%eax
f0108c85:	01 c0                	add    %eax,%eax
f0108c87:	01 d0                	add    %edx,%eax
f0108c89:	c1 e0 03             	shl    $0x3,%eax
f0108c8c:	01 c8                	add    %ecx,%eax
f0108c8e:	05 88 00 00 00       	add    $0x88,%eax
f0108c93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c99:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c9c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ca2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ca5:	89 d0                	mov    %edx,%eax
f0108ca7:	01 c0                	add    %eax,%eax
f0108ca9:	01 d0                	add    %edx,%eax
f0108cab:	c1 e0 03             	shl    $0x3,%eax
f0108cae:	01 c8                	add    %ecx,%eax
f0108cb0:	05 8c 00 00 00       	add    $0x8c,%eax
f0108cb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108cbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cbe:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0108cc4:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108cc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cca:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0108cd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cd3:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108cd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cdc:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0108ce2:	48                   	dec    %eax
f0108ce3:	39 c2                	cmp    %eax,%edx
f0108ce5:	0f 83 2b 01 00 00    	jae    f0108e16 <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108ceb:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cee:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108cf4:	89 d0                	mov    %edx,%eax
f0108cf6:	01 c0                	add    %eax,%eax
f0108cf8:	01 d0                	add    %edx,%eax
f0108cfa:	c1 e0 03             	shl    $0x3,%eax
f0108cfd:	8d 50 70             	lea    0x70(%eax),%edx
f0108d00:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d03:	01 d0                	add    %edx,%eax
f0108d05:	83 c0 08             	add    $0x8,%eax
f0108d08:	85 c0                	test   %eax,%eax
f0108d0a:	75 17                	jne    f0108d23 <program_segment_alloc_map_copy_workingset+0x33f>
f0108d0c:	83 ec 04             	sub    $0x4,%esp
f0108d0f:	68 c8 d4 12 f0       	push   $0xf012d4c8
f0108d14:	68 81 02 00 00       	push   $0x281
f0108d19:	68 47 d4 12 f0       	push   $0xf012d447
f0108d1e:	e8 83 74 ff ff       	call   f01001a6 <_panic>
f0108d23:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d26:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108d2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d2f:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f0108d35:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108d38:	89 d0                	mov    %edx,%eax
f0108d3a:	01 c0                	add    %eax,%eax
f0108d3c:	01 d0                	add    %edx,%eax
f0108d3e:	c1 e0 03             	shl    $0x3,%eax
f0108d41:	01 d8                	add    %ebx,%eax
f0108d43:	05 88 00 00 00       	add    $0x88,%eax
f0108d48:	89 08                	mov    %ecx,(%eax)
f0108d4a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108d4d:	89 d0                	mov    %edx,%eax
f0108d4f:	01 c0                	add    %eax,%eax
f0108d51:	01 d0                	add    %edx,%eax
f0108d53:	c1 e0 03             	shl    $0x3,%eax
f0108d56:	01 c8                	add    %ecx,%eax
f0108d58:	05 88 00 00 00       	add    $0x88,%eax
f0108d5d:	8b 00                	mov    (%eax),%eax
f0108d5f:	85 c0                	test   %eax,%eax
f0108d61:	74 2b                	je     f0108d8e <program_segment_alloc_map_copy_workingset+0x3aa>
f0108d63:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d66:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0108d6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d6f:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d75:	89 c8                	mov    %ecx,%eax
f0108d77:	01 c0                	add    %eax,%eax
f0108d79:	01 c8                	add    %ecx,%eax
f0108d7b:	c1 e0 03             	shl    $0x3,%eax
f0108d7e:	8d 48 70             	lea    0x70(%eax),%ecx
f0108d81:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d84:	01 c8                	add    %ecx,%eax
f0108d86:	83 c0 08             	add    $0x8,%eax
f0108d89:	89 42 14             	mov    %eax,0x14(%edx)
f0108d8c:	eb 26                	jmp    f0108db4 <program_segment_alloc_map_copy_workingset+0x3d0>
f0108d8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d91:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108d97:	89 d0                	mov    %edx,%eax
f0108d99:	01 c0                	add    %eax,%eax
f0108d9b:	01 d0                	add    %edx,%eax
f0108d9d:	c1 e0 03             	shl    $0x3,%eax
f0108da0:	8d 50 70             	lea    0x70(%eax),%edx
f0108da3:	8b 45 08             	mov    0x8(%ebp),%eax
f0108da6:	01 d0                	add    %edx,%eax
f0108da8:	8d 50 08             	lea    0x8(%eax),%edx
f0108dab:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dae:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f0108db4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108db7:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108dbd:	89 d0                	mov    %edx,%eax
f0108dbf:	01 c0                	add    %eax,%eax
f0108dc1:	01 d0                	add    %edx,%eax
f0108dc3:	c1 e0 03             	shl    $0x3,%eax
f0108dc6:	8d 50 70             	lea    0x70(%eax),%edx
f0108dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dcc:	01 d0                	add    %edx,%eax
f0108dce:	8d 50 08             	lea    0x8(%eax),%edx
f0108dd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dd4:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f0108dda:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ddd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108de3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108de6:	89 d0                	mov    %edx,%eax
f0108de8:	01 c0                	add    %eax,%eax
f0108dea:	01 d0                	add    %edx,%eax
f0108dec:	c1 e0 03             	shl    $0x3,%eax
f0108def:	01 c8                	add    %ecx,%eax
f0108df1:	05 8c 00 00 00       	add    $0x8c,%eax
f0108df6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108dfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dff:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f0108e05:	8d 50 01             	lea    0x1(%eax),%edx
f0108e08:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e0b:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0108e11:	e9 26 01 00 00       	jmp    f0108f3c <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e19:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e1f:	89 d0                	mov    %edx,%eax
f0108e21:	01 c0                	add    %eax,%eax
f0108e23:	01 d0                	add    %edx,%eax
f0108e25:	c1 e0 03             	shl    $0x3,%eax
f0108e28:	8d 50 70             	lea    0x70(%eax),%edx
f0108e2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e2e:	01 d0                	add    %edx,%eax
f0108e30:	83 c0 08             	add    $0x8,%eax
f0108e33:	85 c0                	test   %eax,%eax
f0108e35:	75 17                	jne    f0108e4e <program_segment_alloc_map_copy_workingset+0x46a>
f0108e37:	83 ec 04             	sub    $0x4,%esp
f0108e3a:	68 c8 d4 12 f0       	push   $0xf012d4c8
f0108e3f:	68 86 02 00 00       	push   $0x286
f0108e44:	68 47 d4 12 f0       	push   $0xf012d447
f0108e49:	e8 58 73 ff ff       	call   f01001a6 <_panic>
f0108e4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e51:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e57:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e5a:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0108e60:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108e63:	89 d0                	mov    %edx,%eax
f0108e65:	01 c0                	add    %eax,%eax
f0108e67:	01 d0                	add    %edx,%eax
f0108e69:	c1 e0 03             	shl    $0x3,%eax
f0108e6c:	01 d8                	add    %ebx,%eax
f0108e6e:	05 88 00 00 00       	add    $0x88,%eax
f0108e73:	89 08                	mov    %ecx,(%eax)
f0108e75:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108e78:	89 d0                	mov    %edx,%eax
f0108e7a:	01 c0                	add    %eax,%eax
f0108e7c:	01 d0                	add    %edx,%eax
f0108e7e:	c1 e0 03             	shl    $0x3,%eax
f0108e81:	01 c8                	add    %ecx,%eax
f0108e83:	05 88 00 00 00       	add    $0x88,%eax
f0108e88:	8b 00                	mov    (%eax),%eax
f0108e8a:	85 c0                	test   %eax,%eax
f0108e8c:	74 2b                	je     f0108eb9 <program_segment_alloc_map_copy_workingset+0x4d5>
f0108e8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e91:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0108e97:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e9a:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108ea0:	89 c8                	mov    %ecx,%eax
f0108ea2:	01 c0                	add    %eax,%eax
f0108ea4:	01 c8                	add    %ecx,%eax
f0108ea6:	c1 e0 03             	shl    $0x3,%eax
f0108ea9:	8d 48 70             	lea    0x70(%eax),%ecx
f0108eac:	8b 45 08             	mov    0x8(%ebp),%eax
f0108eaf:	01 c8                	add    %ecx,%eax
f0108eb1:	83 c0 08             	add    $0x8,%eax
f0108eb4:	89 42 14             	mov    %eax,0x14(%edx)
f0108eb7:	eb 26                	jmp    f0108edf <program_segment_alloc_map_copy_workingset+0x4fb>
f0108eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ebc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ec2:	89 d0                	mov    %edx,%eax
f0108ec4:	01 c0                	add    %eax,%eax
f0108ec6:	01 d0                	add    %edx,%eax
f0108ec8:	c1 e0 03             	shl    $0x3,%eax
f0108ecb:	8d 50 70             	lea    0x70(%eax),%edx
f0108ece:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed1:	01 d0                	add    %edx,%eax
f0108ed3:	8d 50 08             	lea    0x8(%eax),%edx
f0108ed6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed9:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f0108edf:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ee2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ee8:	89 d0                	mov    %edx,%eax
f0108eea:	01 c0                	add    %eax,%eax
f0108eec:	01 d0                	add    %edx,%eax
f0108eee:	c1 e0 03             	shl    $0x3,%eax
f0108ef1:	8d 50 70             	lea    0x70(%eax),%edx
f0108ef4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ef7:	01 d0                	add    %edx,%eax
f0108ef9:	8d 50 08             	lea    0x8(%eax),%edx
f0108efc:	8b 45 08             	mov    0x8(%ebp),%eax
f0108eff:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f0108f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f08:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f0e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f11:	89 d0                	mov    %edx,%eax
f0108f13:	01 c0                	add    %eax,%eax
f0108f15:	01 d0                	add    %edx,%eax
f0108f17:	c1 e0 03             	shl    $0x3,%eax
f0108f1a:	01 c8                	add    %ecx,%eax
f0108f1c:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108f27:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f2a:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0108f30:	8d 50 01             	lea    0x1(%eax),%edx
f0108f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f36:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0108f3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f3f:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108f45:	8d 50 01             	lea    0x1(%eax),%edx
f0108f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f4b:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0108f51:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f54:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108f5a:	8b 55 08             	mov    0x8(%ebp),%edx
f0108f5d:	8b 4a 74             	mov    0x74(%edx),%ecx
f0108f60:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f65:	f7 f1                	div    %ecx
f0108f67:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f6a:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0108f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f73:	c1 e8 16             	shr    $0x16,%eax
f0108f76:	89 c2                	mov    %eax,%edx
f0108f78:	8b 45 18             	mov    0x18(%ebp),%eax
f0108f7b:	8b 00                	mov    (%eax),%eax
f0108f7d:	39 c2                	cmp    %eax,%edx
f0108f7f:	0f 84 d3 00 00 00    	je     f0109058 <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0108f85:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f88:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0108f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f91:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108f94:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108f97:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108f9c:	89 c1                	mov    %eax,%ecx
f0108f9e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108fa1:	89 d0                	mov    %edx,%eax
f0108fa3:	01 c0                	add    %eax,%eax
f0108fa5:	01 d0                	add    %edx,%eax
f0108fa7:	c1 e0 03             	shl    $0x3,%eax
f0108faa:	01 d8                	add    %ebx,%eax
f0108fac:	05 38 d5 01 00       	add    $0x1d538,%eax
f0108fb1:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0108fb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fb6:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0108fbc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fbf:	89 d0                	mov    %edx,%eax
f0108fc1:	01 c0                	add    %eax,%eax
f0108fc3:	01 d0                	add    %edx,%eax
f0108fc5:	c1 e0 03             	shl    $0x3,%eax
f0108fc8:	01 c8                	add    %ecx,%eax
f0108fca:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0108fcf:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0108fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108fd5:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0108fdb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fde:	89 d0                	mov    %edx,%eax
f0108fe0:	01 c0                	add    %eax,%eax
f0108fe2:	01 d0                	add    %edx,%eax
f0108fe4:	c1 e0 03             	shl    $0x3,%eax
f0108fe7:	01 c8                	add    %ecx,%eax
f0108fe9:	05 40 d5 01 00       	add    $0x1d540,%eax
f0108fee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0108ff4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ff7:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0108ffd:	8d 50 01             	lea    0x1(%eax),%edx
f0109000:	8b 45 08             	mov    0x8(%ebp),%eax
f0109003:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f0109009:	8b 45 08             	mov    0x8(%ebp),%eax
f010900c:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109012:	b9 32 00 00 00       	mov    $0x32,%ecx
f0109017:	ba 00 00 00 00       	mov    $0x0,%edx
f010901c:	f7 f1                	div    %ecx
f010901e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109021:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f0109027:	8b 45 08             	mov    0x8(%ebp),%eax
f010902a:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109030:	85 c0                	test   %eax,%eax
f0109032:	75 17                	jne    f010904b <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0109034:	83 ec 04             	sub    $0x4,%esp
f0109037:	68 8c d5 12 f0       	push   $0xf012d58c
f010903c:	68 96 02 00 00       	push   $0x296
f0109041:	68 47 d4 12 f0       	push   $0xf012d447
f0109046:	e8 5b 71 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010904b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010904e:	c1 e8 16             	shr    $0x16,%eax
f0109051:	89 c2                	mov    %eax,%edx
f0109053:	8b 45 18             	mov    0x18(%ebp),%eax
f0109056:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109058:	8b 45 10             	mov    0x10(%ebp),%eax
f010905b:	8b 00                	mov    (%eax),%eax
f010905d:	8d 50 01             	lea    0x1(%eax),%edx
f0109060:	8b 45 10             	mov    0x10(%ebp),%eax
f0109063:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109065:	ff 45 f0             	incl   -0x10(%ebp)
f0109068:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010906f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109072:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0109075:	73 0c                	jae    f0109083 <program_segment_alloc_map_copy_workingset+0x69f>
f0109077:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010907a:	3b 45 14             	cmp    0x14(%ebp),%eax
f010907d:	0f 82 10 fa ff ff    	jb     f0108a93 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0109083:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109086:	8b 00                	mov    (%eax),%eax
f0109088:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010908b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010908e:	8b 40 0c             	mov    0xc(%eax),%eax
f0109091:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109094:	eb 10                	jmp    f01090a6 <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0109096:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109099:	8a 10                	mov    (%eax),%dl
f010909b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010909e:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f01090a0:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f01090a3:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01090a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01090ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01090af:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01090b4:	89 c2                	mov    %eax,%edx
f01090b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01090b9:	8b 00                	mov    (%eax),%eax
f01090bb:	c1 e0 0c             	shl    $0xc,%eax
f01090be:	01 c2                	add    %eax,%edx
f01090c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090c3:	39 c2                	cmp    %eax,%edx
f01090c5:	76 1d                	jbe    f01090e4 <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f01090c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01090ca:	8b 50 04             	mov    0x4(%eax),%edx
f01090cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090d0:	01 c2                	add    %eax,%edx
f01090d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01090d5:	39 c2                	cmp    %eax,%edx
f01090d7:	77 bd                	ja     f0109096 <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01090d9:	eb 09                	jmp    f01090e4 <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f01090db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090de:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f01090e1:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01090e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090e7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01090ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01090ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01090f2:	89 c2                	mov    %eax,%edx
f01090f4:	8b 45 10             	mov    0x10(%ebp),%eax
f01090f7:	8b 00                	mov    (%eax),%eax
f01090f9:	c1 e0 0c             	shl    $0xc,%eax
f01090fc:	01 c2                	add    %eax,%edx
f01090fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109101:	39 c2                	cmp    %eax,%edx
f0109103:	77 d6                	ja     f01090db <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0109105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010910a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010910d:	c9                   	leave  
f010910e:	c3                   	ret    

f010910f <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010910f:	55                   	push   %ebp
f0109110:	89 e5                	mov    %esp,%ebp
f0109112:	53                   	push   %ebx
f0109113:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0109116:	8b 45 08             	mov    0x8(%ebp),%eax
f0109119:	8b 55 0c             	mov    0xc(%ebp),%edx
f010911c:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010911f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109122:	8b 55 10             	mov    0x10(%ebp),%edx
f0109125:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109128:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010912f:	eb 17                	jmp    f0109148 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f0109131:	8b 45 08             	mov    0x8(%ebp),%eax
f0109134:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109137:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010913a:	c1 e2 02             	shl    $0x2,%edx
f010913d:	01 d0                	add    %edx,%eax
f010913f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109145:	ff 45 f4             	incl   -0xc(%ebp)
f0109148:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010914b:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0109150:	76 df                	jbe    f0109131 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109152:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0109159:	eb 22                	jmp    f010917d <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010915b:	8b 45 08             	mov    0x8(%ebp),%eax
f010915e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109161:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109164:	c1 e2 02             	shl    $0x2,%edx
f0109167:	01 c2                	add    %eax,%edx
f0109169:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f010916e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0109171:	c1 e1 02             	shl    $0x2,%ecx
f0109174:	01 c8                	add    %ecx,%eax
f0109176:	8b 00                	mov    (%eax),%eax
f0109178:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010917a:	ff 45 f4             	incl   -0xc(%ebp)
f010917d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0109184:	7e d5                	jle    f010915b <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f0109186:	8b 45 08             	mov    0x8(%ebp),%eax
f0109189:	8b 15 70 46 64 f0    	mov    0xf0644670,%edx
f010918f:	29 d0                	sub    %edx,%eax
f0109191:	c1 f8 03             	sar    $0x3,%eax
f0109194:	89 c2                	mov    %eax,%edx
f0109196:	89 d0                	mov    %edx,%eax
f0109198:	c1 e0 03             	shl    $0x3,%eax
f010919b:	01 d0                	add    %edx,%eax
f010919d:	c1 e0 03             	shl    $0x3,%eax
f01091a0:	01 d0                	add    %edx,%eax
f01091a2:	01 c0                	add    %eax,%eax
f01091a4:	01 d0                	add    %edx,%eax
f01091a6:	01 c0                	add    %eax,%eax
f01091a8:	01 d0                	add    %edx,%eax
f01091aa:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01091b1:	01 c8                	add    %ecx,%eax
f01091b3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01091ba:	01 c8                	add    %ecx,%eax
f01091bc:	c1 e0 02             	shl    $0x2,%eax
f01091bf:	01 d0                	add    %edx,%eax
f01091c1:	01 c0                	add    %eax,%eax
f01091c3:	01 d0                	add    %edx,%eax
f01091c5:	01 c0                	add    %eax,%eax
f01091c7:	01 d0                	add    %edx,%eax
f01091c9:	c1 e0 02             	shl    $0x2,%eax
f01091cc:	01 d0                	add    %edx,%eax
f01091ce:	01 c0                	add    %eax,%eax
f01091d0:	01 d0                	add    %edx,%eax
f01091d2:	c1 e0 09             	shl    $0x9,%eax
f01091d5:	29 d0                	sub    %edx,%eax
f01091d7:	c1 e0 02             	shl    $0x2,%eax
f01091da:	01 d0                	add    %edx,%eax
f01091dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f01091df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091e2:	89 d0                	mov    %edx,%eax
f01091e4:	01 c0                	add    %eax,%eax
f01091e6:	01 d0                	add    %edx,%eax
f01091e8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01091ef:	01 c8                	add    %ecx,%eax
f01091f1:	c1 e0 02             	shl    $0x2,%eax
f01091f4:	01 d0                	add    %edx,%eax
f01091f6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01091fd:	01 c8                	add    %ecx,%eax
f01091ff:	c1 e0 02             	shl    $0x2,%eax
f0109202:	01 d0                	add    %edx,%eax
f0109204:	c1 e0 02             	shl    $0x2,%eax
f0109207:	01 d0                	add    %edx,%eax
f0109209:	c1 e0 03             	shl    $0x3,%eax
f010920c:	2d 00 00 40 11       	sub    $0x11400000,%eax
f0109211:	8d 50 78             	lea    0x78(%eax),%edx
f0109214:	8b 45 08             	mov    0x8(%ebp),%eax
f0109217:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010921d:	83 ec 0c             	sub    $0xc,%esp
f0109220:	6a 02                	push   $0x2
f0109222:	e8 38 35 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f0109227:	83 c4 10             	add    $0x10,%esp
f010922a:	85 c0                	test   %eax,%eax
f010922c:	0f 84 25 01 00 00    	je     f0109357 <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109232:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109239:	e9 08 01 00 00       	jmp    f0109346 <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010923e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109241:	89 d0                	mov    %edx,%eax
f0109243:	01 c0                	add    %eax,%eax
f0109245:	01 d0                	add    %edx,%eax
f0109247:	c1 e0 03             	shl    $0x3,%eax
f010924a:	8d 50 70             	lea    0x70(%eax),%edx
f010924d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109250:	01 d0                	add    %edx,%eax
f0109252:	83 c0 08             	add    $0x8,%eax
f0109255:	85 c0                	test   %eax,%eax
f0109257:	75 17                	jne    f0109270 <initialize_environment+0x161>
f0109259:	83 ec 04             	sub    $0x4,%esp
f010925c:	68 c8 d4 12 f0       	push   $0xf012d4c8
f0109261:	68 f4 02 00 00       	push   $0x2f4
f0109266:	68 47 d4 12 f0       	push   $0xf012d447
f010926b:	e8 36 6f ff ff       	call   f01001a6 <_panic>
f0109270:	8b 45 08             	mov    0x8(%ebp),%eax
f0109273:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109279:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010927c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010927f:	89 c8                	mov    %ecx,%eax
f0109281:	01 c0                	add    %eax,%eax
f0109283:	01 c8                	add    %ecx,%eax
f0109285:	c1 e0 03             	shl    $0x3,%eax
f0109288:	01 d8                	add    %ebx,%eax
f010928a:	05 88 00 00 00       	add    $0x88,%eax
f010928f:	89 10                	mov    %edx,(%eax)
f0109291:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109294:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109297:	89 d0                	mov    %edx,%eax
f0109299:	01 c0                	add    %eax,%eax
f010929b:	01 d0                	add    %edx,%eax
f010929d:	c1 e0 03             	shl    $0x3,%eax
f01092a0:	01 c8                	add    %ecx,%eax
f01092a2:	05 88 00 00 00       	add    $0x88,%eax
f01092a7:	8b 00                	mov    (%eax),%eax
f01092a9:	85 c0                	test   %eax,%eax
f01092ab:	74 25                	je     f01092d2 <initialize_environment+0x1c3>
f01092ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b0:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f01092b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01092b9:	89 c8                	mov    %ecx,%eax
f01092bb:	01 c0                	add    %eax,%eax
f01092bd:	01 c8                	add    %ecx,%eax
f01092bf:	c1 e0 03             	shl    $0x3,%eax
f01092c2:	8d 48 70             	lea    0x70(%eax),%ecx
f01092c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01092c8:	01 c8                	add    %ecx,%eax
f01092ca:	83 c0 08             	add    $0x8,%eax
f01092cd:	89 42 14             	mov    %eax,0x14(%edx)
f01092d0:	eb 20                	jmp    f01092f2 <initialize_environment+0x1e3>
f01092d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01092d5:	89 d0                	mov    %edx,%eax
f01092d7:	01 c0                	add    %eax,%eax
f01092d9:	01 d0                	add    %edx,%eax
f01092db:	c1 e0 03             	shl    $0x3,%eax
f01092de:	8d 50 70             	lea    0x70(%eax),%edx
f01092e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01092e4:	01 d0                	add    %edx,%eax
f01092e6:	8d 50 08             	lea    0x8(%eax),%edx
f01092e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01092ec:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f01092f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01092f5:	89 d0                	mov    %edx,%eax
f01092f7:	01 c0                	add    %eax,%eax
f01092f9:	01 d0                	add    %edx,%eax
f01092fb:	c1 e0 03             	shl    $0x3,%eax
f01092fe:	8d 50 70             	lea    0x70(%eax),%edx
f0109301:	8b 45 08             	mov    0x8(%ebp),%eax
f0109304:	01 d0                	add    %edx,%eax
f0109306:	8d 50 08             	lea    0x8(%eax),%edx
f0109309:	8b 45 08             	mov    0x8(%ebp),%eax
f010930c:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109312:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109315:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109318:	89 d0                	mov    %edx,%eax
f010931a:	01 c0                	add    %eax,%eax
f010931c:	01 d0                	add    %edx,%eax
f010931e:	c1 e0 03             	shl    $0x3,%eax
f0109321:	01 c8                	add    %ecx,%eax
f0109323:	05 8c 00 00 00       	add    $0x8c,%eax
f0109328:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010932e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109331:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109337:	8d 50 01             	lea    0x1(%eax),%edx
f010933a:	8b 45 08             	mov    0x8(%ebp),%eax
f010933d:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109343:	ff 45 f0             	incl   -0x10(%ebp)
f0109346:	8b 45 08             	mov    0x8(%ebp),%eax
f0109349:	8b 50 74             	mov    0x74(%eax),%edx
f010934c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010934f:	39 c2                	cmp    %eax,%edx
f0109351:	0f 87 e7 fe ff ff    	ja     f010923e <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109357:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010935e:	eb 4e                	jmp    f01093ae <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0109360:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109363:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109366:	89 d0                	mov    %edx,%eax
f0109368:	01 c0                	add    %eax,%eax
f010936a:	01 d0                	add    %edx,%eax
f010936c:	c1 e0 03             	shl    $0x3,%eax
f010936f:	01 c8                	add    %ecx,%eax
f0109371:	83 c0 78             	add    $0x78,%eax
f0109374:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010937a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010937d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109380:	89 d0                	mov    %edx,%eax
f0109382:	01 c0                	add    %eax,%eax
f0109384:	01 d0                	add    %edx,%eax
f0109386:	c1 e0 03             	shl    $0x3,%eax
f0109389:	01 c8                	add    %ecx,%eax
f010938b:	83 c0 7c             	add    $0x7c,%eax
f010938e:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0109391:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109394:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109397:	89 d0                	mov    %edx,%eax
f0109399:	01 c0                	add    %eax,%eax
f010939b:	01 d0                	add    %edx,%eax
f010939d:	c1 e0 03             	shl    $0x3,%eax
f01093a0:	01 c8                	add    %ecx,%eax
f01093a2:	83 e8 80             	sub    $0xffffff80,%eax
f01093a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f01093ab:	ff 45 f4             	incl   -0xc(%ebp)
f01093ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01093b1:	8b 50 74             	mov    0x74(%eax),%edx
f01093b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093b7:	39 c2                	cmp    %eax,%edx
f01093b9:	77 a5                	ja     f0109360 <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f01093bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01093be:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f01093c5:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f01093c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01093cf:	eb 54                	jmp    f0109425 <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f01093d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093d7:	89 d0                	mov    %edx,%eax
f01093d9:	01 c0                	add    %eax,%eax
f01093db:	01 d0                	add    %edx,%eax
f01093dd:	c1 e0 03             	shl    $0x3,%eax
f01093e0:	01 c8                	add    %ecx,%eax
f01093e2:	05 38 d5 01 00       	add    $0x1d538,%eax
f01093e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f01093ed:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093f3:	89 d0                	mov    %edx,%eax
f01093f5:	01 c0                	add    %eax,%eax
f01093f7:	01 d0                	add    %edx,%eax
f01093f9:	c1 e0 03             	shl    $0x3,%eax
f01093fc:	01 c8                	add    %ecx,%eax
f01093fe:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109403:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0109406:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109409:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010940c:	89 d0                	mov    %edx,%eax
f010940e:	01 c0                	add    %eax,%eax
f0109410:	01 d0                	add    %edx,%eax
f0109412:	c1 e0 03             	shl    $0x3,%eax
f0109415:	01 c8                	add    %ecx,%eax
f0109417:	05 40 d5 01 00       	add    $0x1d540,%eax
f010941c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109422:	ff 45 f4             	incl   -0xc(%ebp)
f0109425:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109429:	7e a6                	jle    f01093d1 <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010942b:	8b 45 08             	mov    0x8(%ebp),%eax
f010942e:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f0109435:	00 00 00 

	e->pageFaultsCounter=0;
f0109438:	8b 45 08             	mov    0x8(%ebp),%eax
f010943b:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f0109442:	00 00 00 
	e->tableFaultsCounter=0;
f0109445:	8b 45 08             	mov    0x8(%ebp),%eax
f0109448:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f010944f:	00 00 00 

	e->freeingFullWSCounter = 0;
f0109452:	8b 45 08             	mov    0x8(%ebp),%eax
f0109455:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f010945c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010945f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109462:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f0109469:	00 00 00 

	e->nModifiedPages=0;
f010946c:	8b 45 08             	mov    0x8(%ebp),%eax
f010946f:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f0109476:	00 00 00 
	e->nNotModifiedPages=0;
f0109479:	8b 45 08             	mov    0x8(%ebp),%eax
f010947c:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f0109483:	00 00 00 
	e->nClocks = 0;
f0109486:	8b 45 08             	mov    0x8(%ebp),%eax
f0109489:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f0109490:	00 00 00 

	//2020
	e->nPageIn = 0;
f0109493:	8b 45 08             	mov    0x8(%ebp),%eax
f0109496:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f010949d:	00 00 00 
	e->nPageOut = 0;
f01094a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01094a3:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f01094aa:	00 00 00 
	e->nNewPageAdded = 0;
f01094ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01094b0:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f01094b7:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f01094ba:	83 ec 0c             	sub    $0xc,%esp
f01094bd:	ff 75 08             	pushl  0x8(%ebp)
f01094c0:	e8 09 00 00 00       	call   f01094ce <complete_environment_initialization>
f01094c5:	83 c4 10             	add    $0x10,%esp
}
f01094c8:	90                   	nop
f01094c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01094cc:	c9                   	leave  
f01094cd:	c3                   	ret    

f01094ce <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f01094ce:	55                   	push   %ebp
f01094cf:	89 e5                	mov    %esp,%ebp
f01094d1:	53                   	push   %ebx
f01094d2:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f01094d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01094d8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01094db:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f01094e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01094e4:	8b 40 60             	mov    0x60(%eax),%eax
f01094e7:	83 c8 03             	or     $0x3,%eax
f01094ea:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f01094ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01094ef:	8b 40 5c             	mov    0x5c(%eax),%eax
f01094f2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01094f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01094fb:	8b 40 60             	mov    0x60(%eax),%eax
f01094fe:	83 c8 05             	or     $0x5,%eax
f0109501:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f0109503:	8b 45 08             	mov    0x8(%ebp),%eax
f0109506:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010950d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109510:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0109517:	8b 45 08             	mov    0x8(%ebp),%eax
f010951a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f0109521:	8b 45 08             	mov    0x8(%ebp),%eax
f0109524:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010952b:	8b 45 08             	mov    0x8(%ebp),%eax
f010952e:	8b 58 4c             	mov    0x4c(%eax),%ebx
f0109531:	83 ec 0c             	sub    $0xc,%esp
f0109534:	6a 08                	push   $0x8
f0109536:	e8 b0 ee 01 00       	call   f01283eb <log2_ceil>
f010953b:	83 c4 10             	add    $0x10,%esp
f010953e:	ba 01 00 00 00       	mov    $0x1,%edx
f0109543:	88 c1                	mov    %al,%cl
f0109545:	d3 e2                	shl    %cl,%edx
f0109547:	89 d0                	mov    %edx,%eax
f0109549:	01 d8                	add    %ebx,%eax
f010954b:	89 c3                	mov    %eax,%ebx
f010954d:	83 ec 0c             	sub    $0xc,%esp
f0109550:	6a 08                	push   $0x8
f0109552:	e8 5f ee 01 00       	call   f01283b6 <nearest_pow2_ceil>
f0109557:	83 c4 10             	add    $0x10,%esp
f010955a:	f7 d8                	neg    %eax
f010955c:	21 d8                	and    %ebx,%eax
f010955e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f0109561:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109565:	7f 1b                	jg     f0109582 <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f0109567:	83 ec 0c             	sub    $0xc,%esp
f010956a:	6a 08                	push   $0x8
f010956c:	e8 7a ee 01 00       	call   f01283eb <log2_ceil>
f0109571:	83 c4 10             	add    $0x10,%esp
f0109574:	ba 01 00 00 00       	mov    $0x1,%edx
f0109579:	88 c1                	mov    %al,%cl
f010957b:	d3 e2                	shl    %cl,%edx
f010957d:	89 d0                	mov    %edx,%eax
f010957f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f0109582:	8b 45 08             	mov    0x8(%ebp),%eax
f0109585:	8b 15 70 46 64 f0    	mov    0xf0644670,%edx
f010958b:	29 d0                	sub    %edx,%eax
f010958d:	c1 f8 03             	sar    $0x3,%eax
f0109590:	89 c2                	mov    %eax,%edx
f0109592:	89 d0                	mov    %edx,%eax
f0109594:	c1 e0 03             	shl    $0x3,%eax
f0109597:	01 d0                	add    %edx,%eax
f0109599:	c1 e0 03             	shl    $0x3,%eax
f010959c:	01 d0                	add    %edx,%eax
f010959e:	01 c0                	add    %eax,%eax
f01095a0:	01 d0                	add    %edx,%eax
f01095a2:	01 c0                	add    %eax,%eax
f01095a4:	01 d0                	add    %edx,%eax
f01095a6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01095ad:	01 c8                	add    %ecx,%eax
f01095af:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01095b6:	01 c8                	add    %ecx,%eax
f01095b8:	c1 e0 02             	shl    $0x2,%eax
f01095bb:	01 d0                	add    %edx,%eax
f01095bd:	01 c0                	add    %eax,%eax
f01095bf:	01 d0                	add    %edx,%eax
f01095c1:	01 c0                	add    %eax,%eax
f01095c3:	01 d0                	add    %edx,%eax
f01095c5:	c1 e0 02             	shl    $0x2,%eax
f01095c8:	01 d0                	add    %edx,%eax
f01095ca:	01 c0                	add    %eax,%eax
f01095cc:	01 d0                	add    %edx,%eax
f01095ce:	c1 e0 09             	shl    $0x9,%eax
f01095d1:	29 d0                	sub    %edx,%eax
f01095d3:	c1 e0 02             	shl    $0x2,%eax
f01095d6:	01 d0                	add    %edx,%eax
f01095d8:	0b 45 f4             	or     -0xc(%ebp),%eax
f01095db:	89 c2                	mov    %eax,%edx
f01095dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01095e0:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f01095e3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01095e8:	85 c0                	test   %eax,%eax
f01095ea:	75 0c                	jne    f01095f8 <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f01095ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01095ef:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f01095f6:	eb 0e                	jmp    f0109606 <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f01095f8:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01095fd:	8b 50 4c             	mov    0x4c(%eax),%edx
f0109600:	8b 45 08             	mov    0x8(%ebp),%eax
f0109603:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0109606:	8b 45 08             	mov    0x8(%ebp),%eax
f0109609:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f0109610:	8b 45 08             	mov    0x8(%ebp),%eax
f0109613:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010961a:	8b 45 08             	mov    0x8(%ebp),%eax
f010961d:	83 ec 04             	sub    $0x4,%esp
f0109620:	6a 44                	push   $0x44
f0109622:	6a 00                	push   $0x0
f0109624:	50                   	push   %eax
f0109625:	e8 ef 01 02 00       	call   f0129819 <memset>
f010962a:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010962d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109630:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0109636:	8b 45 08             	mov    0x8(%ebp),%eax
f0109639:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010963f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109642:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0109648:	8b 45 08             	mov    0x8(%ebp),%eax
f010964b:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f0109652:	8b 45 08             	mov    0x8(%ebp),%eax
f0109655:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010965b:	8b 45 08             	mov    0x8(%ebp),%eax
f010965e:	8b 40 38             	mov    0x38(%eax),%eax
f0109661:	80 cc 02             	or     $0x2,%ah
f0109664:	89 c2                	mov    %eax,%edx
f0109666:	8b 45 08             	mov    0x8(%ebp),%eax
f0109669:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010966c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109670:	75 17                	jne    f0109689 <complete_environment_initialization+0x1bb>
f0109672:	83 ec 04             	sub    $0x4,%esp
f0109675:	68 a9 d4 12 f0       	push   $0xf012d4a9
f010967a:	68 58 03 00 00       	push   $0x358
f010967f:	68 47 d4 12 f0       	push   $0xf012d447
f0109684:	e8 1d 6b ff ff       	call   f01001a6 <_panic>
f0109689:	8b 45 08             	mov    0x8(%ebp),%eax
f010968c:	8b 40 44             	mov    0x44(%eax),%eax
f010968f:	85 c0                	test   %eax,%eax
f0109691:	74 11                	je     f01096a4 <complete_environment_initialization+0x1d6>
f0109693:	8b 45 08             	mov    0x8(%ebp),%eax
f0109696:	8b 40 44             	mov    0x44(%eax),%eax
f0109699:	8b 55 08             	mov    0x8(%ebp),%edx
f010969c:	8b 52 48             	mov    0x48(%edx),%edx
f010969f:	89 50 48             	mov    %edx,0x48(%eax)
f01096a2:	eb 0b                	jmp    f01096af <complete_environment_initialization+0x1e1>
f01096a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a7:	8b 40 48             	mov    0x48(%eax),%eax
f01096aa:	a3 7c 46 64 f0       	mov    %eax,0xf064467c
f01096af:	8b 45 08             	mov    0x8(%ebp),%eax
f01096b2:	8b 40 48             	mov    0x48(%eax),%eax
f01096b5:	85 c0                	test   %eax,%eax
f01096b7:	74 11                	je     f01096ca <complete_environment_initialization+0x1fc>
f01096b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01096bc:	8b 40 48             	mov    0x48(%eax),%eax
f01096bf:	8b 55 08             	mov    0x8(%ebp),%edx
f01096c2:	8b 52 44             	mov    0x44(%edx),%edx
f01096c5:	89 50 44             	mov    %edx,0x44(%eax)
f01096c8:	eb 0b                	jmp    f01096d5 <complete_environment_initialization+0x207>
f01096ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01096cd:	8b 40 44             	mov    0x44(%eax),%eax
f01096d0:	a3 78 46 64 f0       	mov    %eax,0xf0644678
f01096d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01096d8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01096df:	8b 45 08             	mov    0x8(%ebp),%eax
f01096e2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01096e9:	a1 84 46 64 f0       	mov    0xf0644684,%eax
f01096ee:	48                   	dec    %eax
f01096ef:	a3 84 46 64 f0       	mov    %eax,0xf0644684
	return ;
f01096f4:	90                   	nop
}
f01096f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01096f8:	c9                   	leave  
f01096f9:	c3                   	ret    

f01096fa <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f01096fa:	55                   	push   %ebp
f01096fb:	89 e5                	mov    %esp,%ebp
f01096fd:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0109700:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109703:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109706:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109709:	8b 00                	mov    (%eax),%eax
f010970b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0109710:	74 17                	je     f0109729 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0109712:	83 ec 04             	sub    $0x4,%esp
f0109715:	68 2f d6 12 f0       	push   $0xf012d62f
f010971a:	68 64 03 00 00       	push   $0x364
f010971f:	68 47 d4 12 f0       	push   $0xf012d447
f0109724:	e8 7d 6a ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0109729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010972c:	8b 40 18             	mov    0x18(%eax),%eax
f010972f:	89 c2                	mov    %eax,%edx
f0109731:	8b 45 08             	mov    0x8(%ebp),%eax
f0109734:	89 50 30             	mov    %edx,0x30(%eax)
}
f0109737:	90                   	nop
f0109738:	c9                   	leave  
f0109739:	c3                   	ret    

f010973a <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010973a:	55                   	push   %ebp
f010973b:	89 e5                	mov    %esp,%ebp
f010973d:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f0109740:	83 ec 04             	sub    $0x4,%esp
f0109743:	68 48 d6 12 f0       	push   $0xf012d648
f0109748:	68 81 03 00 00       	push   $0x381
f010974d:	68 47 d4 12 f0       	push   $0xf012d447
f0109752:	e8 4f 6a ff ff       	call   f01001a6 <_panic>

f0109757 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f0109757:	55                   	push   %ebp
f0109758:	89 e5                	mov    %esp,%ebp
f010975a:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f010975d:	83 ec 04             	sub    $0x4,%esp
f0109760:	68 98 d6 12 f0       	push   $0xf012d698
f0109765:	68 a0 03 00 00       	push   $0x3a0
f010976a:	68 47 d4 12 f0       	push   $0xf012d447
f010976f:	e8 32 6a ff ff       	call   f01001a6 <_panic>

f0109774 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f0109774:	55                   	push   %ebp
f0109775:	89 e5                	mov    %esp,%ebp
f0109777:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010977a:	8b 45 08             	mov    0x8(%ebp),%eax
f010977d:	8b 40 10             	mov    0x10(%eax),%eax
f0109780:	8d 48 01             	lea    0x1(%eax),%ecx
f0109783:	8b 55 08             	mov    0x8(%ebp),%edx
f0109786:	89 4a 10             	mov    %ecx,0x10(%edx)
f0109789:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010978c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010978f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109792:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109795:	8b 00                	mov    (%eax),%eax
f0109797:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010979c:	74 17                	je     f01097b5 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010979e:	83 ec 04             	sub    $0x4,%esp
f01097a1:	68 2f d6 12 f0       	push   $0xf012d62f
f01097a6:	68 ae 03 00 00       	push   $0x3ae
f01097ab:	68 47 d4 12 f0       	push   $0xf012d447
f01097b0:	e8 f1 69 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f01097b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01097b8:	8b 50 1c             	mov    0x1c(%eax),%edx
f01097bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01097be:	01 d0                	add    %edx,%eax
f01097c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f01097c3:	eb 0f                	jmp    f01097d4 <PROGRAM_SEGMENT_NEXT+0x60>
f01097c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01097c8:	8b 40 10             	mov    0x10(%eax),%eax
f01097cb:	8d 50 01             	lea    0x1(%eax),%edx
f01097ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01097d1:	89 50 10             	mov    %edx,0x10(%eax)
f01097d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01097d7:	8b 40 10             	mov    0x10(%eax),%eax
f01097da:	c1 e0 05             	shl    $0x5,%eax
f01097dd:	89 c2                	mov    %eax,%edx
f01097df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01097e2:	01 d0                	add    %edx,%eax
f01097e4:	8b 00                	mov    (%eax),%eax
f01097e6:	83 f8 01             	cmp    $0x1,%eax
f01097e9:	74 13                	je     f01097fe <PROGRAM_SEGMENT_NEXT+0x8a>
f01097eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01097ee:	8b 50 10             	mov    0x10(%eax),%edx
f01097f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01097f4:	8b 40 2c             	mov    0x2c(%eax),%eax
f01097f7:	0f b7 c0             	movzwl %ax,%eax
f01097fa:	39 c2                	cmp    %eax,%edx
f01097fc:	72 c7                	jb     f01097c5 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f01097fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109801:	8b 40 10             	mov    0x10(%eax),%eax
f0109804:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f0109807:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010980a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010980d:	0f b7 c0             	movzwl %ax,%eax
f0109810:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109813:	7e 63                	jle    f0109878 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0109815:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109818:	c1 e0 05             	shl    $0x5,%eax
f010981b:	89 c2                	mov    %eax,%edx
f010981d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109820:	01 d0                	add    %edx,%eax
f0109822:	8b 50 04             	mov    0x4(%eax),%edx
f0109825:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109828:	01 c2                	add    %eax,%edx
f010982a:	8b 45 08             	mov    0x8(%ebp),%eax
f010982d:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010982f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109832:	c1 e0 05             	shl    $0x5,%eax
f0109835:	89 c2                	mov    %eax,%edx
f0109837:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010983a:	01 d0                	add    %edx,%eax
f010983c:	8b 50 14             	mov    0x14(%eax),%edx
f010983f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109842:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f0109845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109848:	c1 e0 05             	shl    $0x5,%eax
f010984b:	89 c2                	mov    %eax,%edx
f010984d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109850:	01 d0                	add    %edx,%eax
f0109852:	8b 50 10             	mov    0x10(%eax),%edx
f0109855:	8b 45 08             	mov    0x8(%ebp),%eax
f0109858:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010985b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010985e:	c1 e0 05             	shl    $0x5,%eax
f0109861:	89 c2                	mov    %eax,%edx
f0109863:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109866:	01 d0                	add    %edx,%eax
f0109868:	8b 40 08             	mov    0x8(%eax),%eax
f010986b:	89 c2                	mov    %eax,%edx
f010986d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109870:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f0109873:	8b 45 08             	mov    0x8(%ebp),%eax
f0109876:	eb 05                	jmp    f010987d <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f0109878:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010987d:	c9                   	leave  
f010987e:	c3                   	ret    

f010987f <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010987f:	55                   	push   %ebp
f0109880:	89 e5                	mov    %esp,%ebp
f0109882:	57                   	push   %edi
f0109883:	56                   	push   %esi
f0109884:	53                   	push   %ebx
f0109885:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f0109888:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010988f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109892:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109895:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109898:	8b 00                	mov    (%eax),%eax
f010989a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010989f:	74 17                	je     f01098b8 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f01098a1:	83 ec 04             	sub    $0x4,%esp
f01098a4:	68 2f d6 12 f0       	push   $0xf012d62f
f01098a9:	68 ca 03 00 00       	push   $0x3ca
f01098ae:	68 47 d4 12 f0       	push   $0xf012d447
f01098b3:	e8 ee 68 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f01098b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098bb:	8b 50 1c             	mov    0x1c(%eax),%edx
f01098be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01098c1:	01 d0                	add    %edx,%eax
f01098c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f01098c6:	eb 07                	jmp    f01098cf <PROGRAM_SEGMENT_FIRST+0x50>
f01098c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01098cb:	40                   	inc    %eax
f01098cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01098cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01098d2:	c1 e0 05             	shl    $0x5,%eax
f01098d5:	89 c2                	mov    %eax,%edx
f01098d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01098da:	01 d0                	add    %edx,%eax
f01098dc:	8b 00                	mov    (%eax),%eax
f01098de:	83 f8 01             	cmp    $0x1,%eax
f01098e1:	74 10                	je     f01098f3 <PROGRAM_SEGMENT_FIRST+0x74>
f01098e3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01098e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098e9:	8b 40 2c             	mov    0x2c(%eax),%eax
f01098ec:	0f b7 c0             	movzwl %ax,%eax
f01098ef:	39 c2                	cmp    %eax,%edx
f01098f1:	72 d5                	jb     f01098c8 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f01098f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01098f6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f01098f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098fc:	8b 40 2c             	mov    0x2c(%eax),%eax
f01098ff:	0f b7 c0             	movzwl %ax,%eax
f0109902:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0109905:	7e 68                	jle    f010996f <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0109907:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010990a:	c1 e0 05             	shl    $0x5,%eax
f010990d:	89 c2                	mov    %eax,%edx
f010990f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109912:	01 d0                	add    %edx,%eax
f0109914:	8b 50 04             	mov    0x4(%eax),%edx
f0109917:	8b 45 0c             	mov    0xc(%ebp),%eax
f010991a:	01 d0                	add    %edx,%eax
f010991c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010991f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109922:	c1 e0 05             	shl    $0x5,%eax
f0109925:	89 c2                	mov    %eax,%edx
f0109927:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010992a:	01 d0                	add    %edx,%eax
f010992c:	8b 40 14             	mov    0x14(%eax),%eax
f010992f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f0109932:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109935:	c1 e0 05             	shl    $0x5,%eax
f0109938:	89 c2                	mov    %eax,%edx
f010993a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010993d:	01 d0                	add    %edx,%eax
f010993f:	8b 40 10             	mov    0x10(%eax),%eax
f0109942:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f0109945:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109948:	c1 e0 05             	shl    $0x5,%eax
f010994b:	89 c2                	mov    %eax,%edx
f010994d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109950:	01 d0                	add    %edx,%eax
f0109952:	8b 40 08             	mov    0x8(%eax),%eax
f0109955:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f0109958:	8b 45 08             	mov    0x8(%ebp),%eax
f010995b:	89 c3                	mov    %eax,%ebx
f010995d:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0109960:	ba 05 00 00 00       	mov    $0x5,%edx
f0109965:	89 df                	mov    %ebx,%edi
f0109967:	89 c6                	mov    %eax,%esi
f0109969:	89 d1                	mov    %edx,%ecx
f010996b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010996d:	eb 1c                	jmp    f010998b <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010996f:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f0109976:	8b 45 08             	mov    0x8(%ebp),%eax
f0109979:	89 c3                	mov    %eax,%ebx
f010997b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010997e:	ba 05 00 00 00       	mov    $0x5,%edx
f0109983:	89 df                	mov    %ebx,%edi
f0109985:	89 c6                	mov    %eax,%esi
f0109987:	89 d1                	mov    %edx,%ecx
f0109989:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010998b:	8b 45 08             	mov    0x8(%ebp),%eax
f010998e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109991:	5b                   	pop    %ebx
f0109992:	5e                   	pop    %esi
f0109993:	5f                   	pop    %edi
f0109994:	5d                   	pop    %ebp
f0109995:	c2 04 00             	ret    $0x4

f0109998 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f0109998:	55                   	push   %ebp
f0109999:	89 e5                	mov    %esp,%ebp
f010999b:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010999e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f01099a5:	a1 20 4f 64 f0       	mov    0xf0644f20,%eax
f01099aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01099ad:	e9 c3 00 00 00       	jmp    f0109a75 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f01099b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099b5:	8b 40 10             	mov    0x10(%eax),%eax
f01099b8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01099bb:	0f 85 ac 00 00 00    	jne    f0109a6d <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f01099c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099c4:	8b 50 0c             	mov    0xc(%eax),%edx
f01099c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099ca:	8b 40 10             	mov    0x10(%eax),%eax
f01099cd:	8b 40 5c             	mov    0x5c(%eax),%eax
f01099d0:	83 ec 08             	sub    $0x8,%esp
f01099d3:	52                   	push   %edx
f01099d4:	50                   	push   %eax
f01099d5:	e8 1e d3 ff ff       	call   f0106cf8 <pt_clear_page_table_entry>
f01099da:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f01099dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099e1:	75 17                	jne    f01099fa <cleanup_buffers+0x62>
f01099e3:	83 ec 04             	sub    $0x4,%esp
f01099e6:	68 a9 d4 12 f0       	push   $0xf012d4a9
f01099eb:	68 f1 03 00 00       	push   $0x3f1
f01099f0:	68 47 d4 12 f0       	push   $0xf012d447
f01099f5:	e8 ac 67 ff ff       	call   f01001a6 <_panic>
f01099fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099fd:	8b 00                	mov    (%eax),%eax
f01099ff:	85 c0                	test   %eax,%eax
f0109a01:	74 10                	je     f0109a13 <cleanup_buffers+0x7b>
f0109a03:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a06:	8b 00                	mov    (%eax),%eax
f0109a08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a0b:	8b 52 04             	mov    0x4(%edx),%edx
f0109a0e:	89 50 04             	mov    %edx,0x4(%eax)
f0109a11:	eb 0b                	jmp    f0109a1e <cleanup_buffers+0x86>
f0109a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a16:	8b 40 04             	mov    0x4(%eax),%eax
f0109a19:	a3 24 4f 64 f0       	mov    %eax,0xf0644f24
f0109a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a21:	8b 40 04             	mov    0x4(%eax),%eax
f0109a24:	85 c0                	test   %eax,%eax
f0109a26:	74 0f                	je     f0109a37 <cleanup_buffers+0x9f>
f0109a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a2b:	8b 40 04             	mov    0x4(%eax),%eax
f0109a2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a31:	8b 12                	mov    (%edx),%edx
f0109a33:	89 10                	mov    %edx,(%eax)
f0109a35:	eb 0a                	jmp    f0109a41 <cleanup_buffers+0xa9>
f0109a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a3a:	8b 00                	mov    (%eax),%eax
f0109a3c:	a3 20 4f 64 f0       	mov    %eax,0xf0644f20
f0109a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0109a54:	a1 2c 4f 64 f0       	mov    0xf0644f2c,%eax
f0109a59:	48                   	dec    %eax
f0109a5a:	a3 2c 4f 64 f0       	mov    %eax,0xf0644f2c

			free_frame(ptr_fi);
f0109a5f:	83 ec 0c             	sub    $0xc,%esp
f0109a62:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a65:	e8 6d c6 ff ff       	call   f01060d7 <free_frame>
f0109a6a:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0109a6d:	a1 28 4f 64 f0       	mov    0xf0644f28,%eax
f0109a72:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a79:	74 07                	je     f0109a82 <cleanup_buffers+0xea>
f0109a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a7e:	8b 00                	mov    (%eax),%eax
f0109a80:	eb 05                	jmp    f0109a87 <cleanup_buffers+0xef>
f0109a82:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a87:	a3 28 4f 64 f0       	mov    %eax,0xf0644f28
f0109a8c:	a1 28 4f 64 f0       	mov    0xf0644f28,%eax
f0109a91:	85 c0                	test   %eax,%eax
f0109a93:	0f 85 19 ff ff ff    	jne    f01099b2 <cleanup_buffers+0x1a>
f0109a99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a9d:	0f 85 0f ff ff ff    	jne    f01099b2 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f0109aa3:	90                   	nop
f0109aa4:	c9                   	leave  
f0109aa5:	c3                   	ret    

f0109aa6 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f0109aa6:	55                   	push   %ebp
f0109aa7:	89 e5                	mov    %esp,%ebp
f0109aa9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f0109aac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0109ab0:	7e 06                	jle    f0109ab8 <set_program_priority+0x12>
f0109ab2:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f0109ab6:	7e 14                	jle    f0109acc <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f0109ab8:	83 ec 04             	sub    $0x4,%esp
f0109abb:	68 e8 d6 12 f0       	push   $0xf012d6e8
f0109ac0:	6a 10                	push   $0x10
f0109ac2:	68 0c d7 12 f0       	push   $0xf012d70c
f0109ac7:	e8 da 66 ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f0109acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109ad0:	74 75                	je     f0109b47 <set_program_priority+0xa1>
		return;
	switch(priority)
f0109ad2:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f0109ad6:	77 56                	ja     f0109b2e <set_program_priority+0x88>
f0109ad8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109adb:	c1 e0 02             	shl    $0x2,%eax
f0109ade:	05 48 d7 12 f0       	add    $0xf012d748,%eax
f0109ae3:	8b 00                	mov    (%eax),%eax
f0109ae5:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f0109ae7:	83 ec 08             	sub    $0x8,%esp
f0109aea:	6a 01                	push   $0x1
f0109aec:	ff 75 08             	pushl  0x8(%ebp)
f0109aef:	e8 fe db ff ff       	call   f01076f2 <half_WS_Size>
f0109af4:	83 c4 10             	add    $0x10,%esp
			break;
f0109af7:	eb 35                	jmp    f0109b2e <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f0109af9:	83 ec 08             	sub    $0x8,%esp
f0109afc:	6a 00                	push   $0x0
f0109afe:	ff 75 08             	pushl  0x8(%ebp)
f0109b01:	e8 ec db ff ff       	call   f01076f2 <half_WS_Size>
f0109b06:	83 c4 10             	add    $0x10,%esp
			break;
f0109b09:	eb 23                	jmp    f0109b2e <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f0109b0b:	83 ec 08             	sub    $0x8,%esp
f0109b0e:	6a 01                	push   $0x1
f0109b10:	ff 75 08             	pushl  0x8(%ebp)
f0109b13:	e8 bd db ff ff       	call   f01076d5 <double_WS_Size>
f0109b18:	83 c4 10             	add    $0x10,%esp
			break;
f0109b1b:	eb 11                	jmp    f0109b2e <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f0109b1d:	83 ec 08             	sub    $0x8,%esp
f0109b20:	6a 00                	push   $0x0
f0109b22:	ff 75 08             	pushl  0x8(%ebp)
f0109b25:	e8 ab db ff ff       	call   f01076d5 <double_WS_Size>
f0109b2a:	83 c4 10             	add    $0x10,%esp
			break;
f0109b2d:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f0109b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b31:	8b 40 74             	mov    0x74(%eax),%eax
f0109b34:	83 ec 08             	sub    $0x8,%esp
f0109b37:	50                   	push   %eax
f0109b38:	68 29 d7 12 f0       	push   $0xf012d729
f0109b3d:	e8 eb 70 ff ff       	call   f0100c2d <cprintf>
f0109b42:	83 c4 10             	add    $0x10,%esp
f0109b45:	eb 01                	jmp    f0109b48 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f0109b47:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f0109b48:	c9                   	leave  
f0109b49:	c3                   	ret    

f0109b4a <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f0109b4a:	55                   	push   %ebp
f0109b4b:	89 e5                	mov    %esp,%ebp
f0109b4d:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0109b50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109b57:	eb 29                	jmp    f0109b82 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f0109b59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b5c:	89 d0                	mov    %edx,%eax
f0109b5e:	01 c0                	add    %eax,%eax
f0109b60:	01 d0                	add    %edx,%eax
f0109b62:	c1 e0 02             	shl    $0x2,%eax
f0109b65:	05 40 c8 17 f0       	add    $0xf017c840,%eax
f0109b6a:	8b 00                	mov    (%eax),%eax
f0109b6c:	83 ec 08             	sub    $0x8,%esp
f0109b6f:	50                   	push   %eax
f0109b70:	ff 75 08             	pushl  0x8(%ebp)
f0109b73:	e8 bf fb 01 00       	call   f0129737 <strcmp>
f0109b78:	83 c4 10             	add    $0x10,%esp
f0109b7b:	85 c0                	test   %eax,%eax
f0109b7d:	74 0f                	je     f0109b8e <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0109b7f:	ff 45 f4             	incl   -0xc(%ebp)
f0109b82:	a1 04 cc 17 f0       	mov    0xf017cc04,%eax
f0109b87:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b8a:	7c cd                	jl     f0109b59 <get_user_program_info+0xf>
f0109b8c:	eb 01                	jmp    f0109b8f <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f0109b8e:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0109b8f:	a1 04 cc 17 f0       	mov    0xf017cc04,%eax
f0109b94:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109b97:	75 1a                	jne    f0109bb3 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f0109b99:	83 ec 08             	sub    $0x8,%esp
f0109b9c:	ff 75 08             	pushl  0x8(%ebp)
f0109b9f:	68 75 e1 12 f0       	push   $0xf012e175
f0109ba4:	e8 84 70 ff ff       	call   f0100c2d <cprintf>
f0109ba9:	83 c4 10             	add    $0x10,%esp
		return 0;
f0109bac:	b8 00 00 00 00       	mov    $0x0,%eax
f0109bb1:	eb 11                	jmp    f0109bc4 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f0109bb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bb6:	89 d0                	mov    %edx,%eax
f0109bb8:	01 c0                	add    %eax,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 02             	shl    $0x2,%eax
f0109bbf:	05 40 c8 17 f0       	add    $0xf017c840,%eax
}
f0109bc4:	c9                   	leave  
f0109bc5:	c3                   	ret    

f0109bc6 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f0109bc6:	55                   	push   %ebp
f0109bc7:	89 e5                	mov    %esp,%ebp
f0109bc9:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0109bcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109bd3:	eb 30                	jmp    f0109c05 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f0109bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bd8:	89 d0                	mov    %edx,%eax
f0109bda:	01 c0                	add    %eax,%eax
f0109bdc:	01 d0                	add    %edx,%eax
f0109bde:	c1 e0 02             	shl    $0x2,%eax
f0109be1:	05 40 c8 17 f0       	add    $0xf017c840,%eax
f0109be6:	8b 00                	mov    (%eax),%eax
f0109be8:	8b 55 08             	mov    0x8(%ebp),%edx
f0109beb:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0109bf1:	83 ec 08             	sub    $0x8,%esp
f0109bf4:	50                   	push   %eax
f0109bf5:	52                   	push   %edx
f0109bf6:	e8 3c fb 01 00       	call   f0129737 <strcmp>
f0109bfb:	83 c4 10             	add    $0x10,%esp
f0109bfe:	85 c0                	test   %eax,%eax
f0109c00:	74 0f                	je     f0109c11 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0109c02:	ff 45 f4             	incl   -0xc(%ebp)
f0109c05:	a1 04 cc 17 f0       	mov    0xf017cc04,%eax
f0109c0a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109c0d:	7c c6                	jl     f0109bd5 <get_user_program_info_by_env+0xf>
f0109c0f:	eb 01                	jmp    f0109c12 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f0109c11:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0109c12:	a1 04 cc 17 f0       	mov    0xf017cc04,%eax
f0109c17:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109c1a:	75 17                	jne    f0109c33 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f0109c1c:	83 ec 0c             	sub    $0xc,%esp
f0109c1f:	68 90 e1 12 f0       	push   $0xf012e190
f0109c24:	e8 04 70 ff ff       	call   f0100c2d <cprintf>
f0109c29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0109c2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109c31:	eb 11                	jmp    f0109c44 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f0109c33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c36:	89 d0                	mov    %edx,%eax
f0109c38:	01 c0                	add    %eax,%eax
f0109c3a:	01 d0                	add    %edx,%eax
f0109c3c:	c1 e0 02             	shl    $0x2,%eax
f0109c3f:	05 40 c8 17 f0       	add    $0xf017c840,%eax
}
f0109c44:	c9                   	leave  
f0109c45:	c3                   	ret    

f0109c46 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f0109c46:	55                   	push   %ebp
f0109c47:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f0109c49:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c4c:	83 f8 13             	cmp    $0x13,%eax
f0109c4f:	77 0c                	ja     f0109c5d <trapname+0x17>
		return excnames[trapno];
f0109c51:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c54:	8b 04 85 20 e5 12 f0 	mov    -0xfed1ae0(,%eax,4),%eax
f0109c5b:	eb 12                	jmp    f0109c6f <trapname+0x29>
	if (trapno == T_SYSCALL)
f0109c5d:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f0109c61:	75 07                	jne    f0109c6a <trapname+0x24>
		return "System call";
f0109c63:	b8 c0 e1 12 f0       	mov    $0xf012e1c0,%eax
f0109c68:	eb 05                	jmp    f0109c6f <trapname+0x29>
	return "(unknown trap)";
f0109c6a:	b8 cc e1 12 f0       	mov    $0xf012e1cc,%eax
}
f0109c6f:	5d                   	pop    %ebp
f0109c70:	c3                   	ret    

f0109c71 <idt_init>:


void
idt_init(void)
{
f0109c71:	55                   	push   %ebp
f0109c72:	89 e5                	mov    %esp,%ebp
f0109c74:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f0109c77:	b8 74 b2 10 f0       	mov    $0xf010b274,%eax
f0109c7c:	66 a3 10 47 64 f0    	mov    %ax,0xf0644710
f0109c82:	66 c7 05 12 47 64 f0 	movw   $0x8,0xf0644712
f0109c89:	08 00 
f0109c8b:	a0 14 47 64 f0       	mov    0xf0644714,%al
f0109c90:	83 e0 e0             	and    $0xffffffe0,%eax
f0109c93:	a2 14 47 64 f0       	mov    %al,0xf0644714
f0109c98:	a0 14 47 64 f0       	mov    0xf0644714,%al
f0109c9d:	83 e0 1f             	and    $0x1f,%eax
f0109ca0:	a2 14 47 64 f0       	mov    %al,0xf0644714
f0109ca5:	a0 15 47 64 f0       	mov    0xf0644715,%al
f0109caa:	83 e0 f0             	and    $0xfffffff0,%eax
f0109cad:	83 c8 0e             	or     $0xe,%eax
f0109cb0:	a2 15 47 64 f0       	mov    %al,0xf0644715
f0109cb5:	a0 15 47 64 f0       	mov    0xf0644715,%al
f0109cba:	83 e0 ef             	and    $0xffffffef,%eax
f0109cbd:	a2 15 47 64 f0       	mov    %al,0xf0644715
f0109cc2:	a0 15 47 64 f0       	mov    0xf0644715,%al
f0109cc7:	83 e0 9f             	and    $0xffffff9f,%eax
f0109cca:	a2 15 47 64 f0       	mov    %al,0xf0644715
f0109ccf:	a0 15 47 64 f0       	mov    0xf0644715,%al
f0109cd4:	83 c8 80             	or     $0xffffff80,%eax
f0109cd7:	a2 15 47 64 f0       	mov    %al,0xf0644715
f0109cdc:	b8 74 b2 10 f0       	mov    $0xf010b274,%eax
f0109ce1:	c1 e8 10             	shr    $0x10,%eax
f0109ce4:	66 a3 16 47 64 f0    	mov    %ax,0xf0644716
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f0109cea:	b8 7c b2 10 f0       	mov    $0xf010b27c,%eax
f0109cef:	66 a3 20 48 64 f0    	mov    %ax,0xf0644820
f0109cf5:	66 c7 05 22 48 64 f0 	movw   $0x8,0xf0644822
f0109cfc:	08 00 
f0109cfe:	a0 24 48 64 f0       	mov    0xf0644824,%al
f0109d03:	83 e0 e0             	and    $0xffffffe0,%eax
f0109d06:	a2 24 48 64 f0       	mov    %al,0xf0644824
f0109d0b:	a0 24 48 64 f0       	mov    0xf0644824,%al
f0109d10:	83 e0 1f             	and    $0x1f,%eax
f0109d13:	a2 24 48 64 f0       	mov    %al,0xf0644824
f0109d18:	a0 25 48 64 f0       	mov    0xf0644825,%al
f0109d1d:	83 e0 f0             	and    $0xfffffff0,%eax
f0109d20:	83 c8 0e             	or     $0xe,%eax
f0109d23:	a2 25 48 64 f0       	mov    %al,0xf0644825
f0109d28:	a0 25 48 64 f0       	mov    0xf0644825,%al
f0109d2d:	83 e0 ef             	and    $0xffffffef,%eax
f0109d30:	a2 25 48 64 f0       	mov    %al,0xf0644825
f0109d35:	a0 25 48 64 f0       	mov    0xf0644825,%al
f0109d3a:	83 c8 60             	or     $0x60,%eax
f0109d3d:	a2 25 48 64 f0       	mov    %al,0xf0644825
f0109d42:	a0 25 48 64 f0       	mov    0xf0644825,%al
f0109d47:	83 c8 80             	or     $0xffffff80,%eax
f0109d4a:	a2 25 48 64 f0       	mov    %al,0xf0644825
f0109d4f:	b8 7c b2 10 f0       	mov    $0xf010b27c,%eax
f0109d54:	c1 e8 10             	shr    $0x10,%eax
f0109d57:	66 a3 26 48 64 f0    	mov    %ax,0xf0644826
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f0109d5d:	b8 86 b2 10 f0       	mov    $0xf010b286,%eax
f0109d62:	66 a3 e0 46 64 f0    	mov    %ax,0xf06446e0
f0109d68:	66 c7 05 e2 46 64 f0 	movw   $0x8,0xf06446e2
f0109d6f:	08 00 
f0109d71:	a0 e4 46 64 f0       	mov    0xf06446e4,%al
f0109d76:	83 e0 e0             	and    $0xffffffe0,%eax
f0109d79:	a2 e4 46 64 f0       	mov    %al,0xf06446e4
f0109d7e:	a0 e4 46 64 f0       	mov    0xf06446e4,%al
f0109d83:	83 e0 1f             	and    $0x1f,%eax
f0109d86:	a2 e4 46 64 f0       	mov    %al,0xf06446e4
f0109d8b:	a0 e5 46 64 f0       	mov    0xf06446e5,%al
f0109d90:	83 e0 f0             	and    $0xfffffff0,%eax
f0109d93:	83 c8 0e             	or     $0xe,%eax
f0109d96:	a2 e5 46 64 f0       	mov    %al,0xf06446e5
f0109d9b:	a0 e5 46 64 f0       	mov    0xf06446e5,%al
f0109da0:	83 e0 ef             	and    $0xffffffef,%eax
f0109da3:	a2 e5 46 64 f0       	mov    %al,0xf06446e5
f0109da8:	a0 e5 46 64 f0       	mov    0xf06446e5,%al
f0109dad:	83 e0 9f             	and    $0xffffff9f,%eax
f0109db0:	a2 e5 46 64 f0       	mov    %al,0xf06446e5
f0109db5:	a0 e5 46 64 f0       	mov    0xf06446e5,%al
f0109dba:	83 c8 80             	or     $0xffffff80,%eax
f0109dbd:	a2 e5 46 64 f0       	mov    %al,0xf06446e5
f0109dc2:	b8 86 b2 10 f0       	mov    $0xf010b286,%eax
f0109dc7:	c1 e8 10             	shr    $0x10,%eax
f0109dca:	66 a3 e6 46 64 f0    	mov    %ax,0xf06446e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f0109dd0:	b8 8e b2 10 f0       	mov    $0xf010b28e,%eax
f0109dd5:	66 a3 a0 46 64 f0    	mov    %ax,0xf06446a0
f0109ddb:	66 c7 05 a2 46 64 f0 	movw   $0x8,0xf06446a2
f0109de2:	08 00 
f0109de4:	a0 a4 46 64 f0       	mov    0xf06446a4,%al
f0109de9:	83 e0 e0             	and    $0xffffffe0,%eax
f0109dec:	a2 a4 46 64 f0       	mov    %al,0xf06446a4
f0109df1:	a0 a4 46 64 f0       	mov    0xf06446a4,%al
f0109df6:	83 e0 1f             	and    $0x1f,%eax
f0109df9:	a2 a4 46 64 f0       	mov    %al,0xf06446a4
f0109dfe:	a0 a5 46 64 f0       	mov    0xf06446a5,%al
f0109e03:	83 e0 f0             	and    $0xfffffff0,%eax
f0109e06:	83 c8 0e             	or     $0xe,%eax
f0109e09:	a2 a5 46 64 f0       	mov    %al,0xf06446a5
f0109e0e:	a0 a5 46 64 f0       	mov    0xf06446a5,%al
f0109e13:	83 e0 ef             	and    $0xffffffef,%eax
f0109e16:	a2 a5 46 64 f0       	mov    %al,0xf06446a5
f0109e1b:	a0 a5 46 64 f0       	mov    0xf06446a5,%al
f0109e20:	83 c8 60             	or     $0x60,%eax
f0109e23:	a2 a5 46 64 f0       	mov    %al,0xf06446a5
f0109e28:	a0 a5 46 64 f0       	mov    0xf06446a5,%al
f0109e2d:	83 c8 80             	or     $0xffffff80,%eax
f0109e30:	a2 a5 46 64 f0       	mov    %al,0xf06446a5
f0109e35:	b8 8e b2 10 f0       	mov    $0xf010b28e,%eax
f0109e3a:	c1 e8 10             	shr    $0x10,%eax
f0109e3d:	66 a3 a6 46 64 f0    	mov    %ax,0xf06446a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f0109e43:	b8 98 b2 10 f0       	mov    $0xf010b298,%eax
f0109e48:	66 a3 a8 46 64 f0    	mov    %ax,0xf06446a8
f0109e4e:	66 c7 05 aa 46 64 f0 	movw   $0x8,0xf06446aa
f0109e55:	08 00 
f0109e57:	a0 ac 46 64 f0       	mov    0xf06446ac,%al
f0109e5c:	83 e0 e0             	and    $0xffffffe0,%eax
f0109e5f:	a2 ac 46 64 f0       	mov    %al,0xf06446ac
f0109e64:	a0 ac 46 64 f0       	mov    0xf06446ac,%al
f0109e69:	83 e0 1f             	and    $0x1f,%eax
f0109e6c:	a2 ac 46 64 f0       	mov    %al,0xf06446ac
f0109e71:	a0 ad 46 64 f0       	mov    0xf06446ad,%al
f0109e76:	83 c8 0f             	or     $0xf,%eax
f0109e79:	a2 ad 46 64 f0       	mov    %al,0xf06446ad
f0109e7e:	a0 ad 46 64 f0       	mov    0xf06446ad,%al
f0109e83:	83 e0 ef             	and    $0xffffffef,%eax
f0109e86:	a2 ad 46 64 f0       	mov    %al,0xf06446ad
f0109e8b:	a0 ad 46 64 f0       	mov    0xf06446ad,%al
f0109e90:	83 c8 60             	or     $0x60,%eax
f0109e93:	a2 ad 46 64 f0       	mov    %al,0xf06446ad
f0109e98:	a0 ad 46 64 f0       	mov    0xf06446ad,%al
f0109e9d:	83 c8 80             	or     $0xffffff80,%eax
f0109ea0:	a2 ad 46 64 f0       	mov    %al,0xf06446ad
f0109ea5:	b8 98 b2 10 f0       	mov    $0xf010b298,%eax
f0109eaa:	c1 e8 10             	shr    $0x10,%eax
f0109ead:	66 a3 ae 46 64 f0    	mov    %ax,0xf06446ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f0109eb3:	b8 a2 b2 10 f0       	mov    $0xf010b2a2,%eax
f0109eb8:	66 a3 b0 46 64 f0    	mov    %ax,0xf06446b0
f0109ebe:	66 c7 05 b2 46 64 f0 	movw   $0x8,0xf06446b2
f0109ec5:	08 00 
f0109ec7:	a0 b4 46 64 f0       	mov    0xf06446b4,%al
f0109ecc:	83 e0 e0             	and    $0xffffffe0,%eax
f0109ecf:	a2 b4 46 64 f0       	mov    %al,0xf06446b4
f0109ed4:	a0 b4 46 64 f0       	mov    0xf06446b4,%al
f0109ed9:	83 e0 1f             	and    $0x1f,%eax
f0109edc:	a2 b4 46 64 f0       	mov    %al,0xf06446b4
f0109ee1:	a0 b5 46 64 f0       	mov    0xf06446b5,%al
f0109ee6:	83 e0 f0             	and    $0xfffffff0,%eax
f0109ee9:	83 c8 0e             	or     $0xe,%eax
f0109eec:	a2 b5 46 64 f0       	mov    %al,0xf06446b5
f0109ef1:	a0 b5 46 64 f0       	mov    0xf06446b5,%al
f0109ef6:	83 e0 ef             	and    $0xffffffef,%eax
f0109ef9:	a2 b5 46 64 f0       	mov    %al,0xf06446b5
f0109efe:	a0 b5 46 64 f0       	mov    0xf06446b5,%al
f0109f03:	83 c8 60             	or     $0x60,%eax
f0109f06:	a2 b5 46 64 f0       	mov    %al,0xf06446b5
f0109f0b:	a0 b5 46 64 f0       	mov    0xf06446b5,%al
f0109f10:	83 c8 80             	or     $0xffffff80,%eax
f0109f13:	a2 b5 46 64 f0       	mov    %al,0xf06446b5
f0109f18:	b8 a2 b2 10 f0       	mov    $0xf010b2a2,%eax
f0109f1d:	c1 e8 10             	shr    $0x10,%eax
f0109f20:	66 a3 b6 46 64 f0    	mov    %ax,0xf06446b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f0109f26:	b8 ac b2 10 f0       	mov    $0xf010b2ac,%eax
f0109f2b:	66 a3 b8 46 64 f0    	mov    %ax,0xf06446b8
f0109f31:	66 c7 05 ba 46 64 f0 	movw   $0x8,0xf06446ba
f0109f38:	08 00 
f0109f3a:	a0 bc 46 64 f0       	mov    0xf06446bc,%al
f0109f3f:	83 e0 e0             	and    $0xffffffe0,%eax
f0109f42:	a2 bc 46 64 f0       	mov    %al,0xf06446bc
f0109f47:	a0 bc 46 64 f0       	mov    0xf06446bc,%al
f0109f4c:	83 e0 1f             	and    $0x1f,%eax
f0109f4f:	a2 bc 46 64 f0       	mov    %al,0xf06446bc
f0109f54:	a0 bd 46 64 f0       	mov    0xf06446bd,%al
f0109f59:	83 c8 0f             	or     $0xf,%eax
f0109f5c:	a2 bd 46 64 f0       	mov    %al,0xf06446bd
f0109f61:	a0 bd 46 64 f0       	mov    0xf06446bd,%al
f0109f66:	83 e0 ef             	and    $0xffffffef,%eax
f0109f69:	a2 bd 46 64 f0       	mov    %al,0xf06446bd
f0109f6e:	a0 bd 46 64 f0       	mov    0xf06446bd,%al
f0109f73:	83 c8 60             	or     $0x60,%eax
f0109f76:	a2 bd 46 64 f0       	mov    %al,0xf06446bd
f0109f7b:	a0 bd 46 64 f0       	mov    0xf06446bd,%al
f0109f80:	83 c8 80             	or     $0xffffff80,%eax
f0109f83:	a2 bd 46 64 f0       	mov    %al,0xf06446bd
f0109f88:	b8 ac b2 10 f0       	mov    $0xf010b2ac,%eax
f0109f8d:	c1 e8 10             	shr    $0x10,%eax
f0109f90:	66 a3 be 46 64 f0    	mov    %ax,0xf06446be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f0109f96:	b8 b6 b2 10 f0       	mov    $0xf010b2b6,%eax
f0109f9b:	66 a3 c0 46 64 f0    	mov    %ax,0xf06446c0
f0109fa1:	66 c7 05 c2 46 64 f0 	movw   $0x8,0xf06446c2
f0109fa8:	08 00 
f0109faa:	a0 c4 46 64 f0       	mov    0xf06446c4,%al
f0109faf:	83 e0 e0             	and    $0xffffffe0,%eax
f0109fb2:	a2 c4 46 64 f0       	mov    %al,0xf06446c4
f0109fb7:	a0 c4 46 64 f0       	mov    0xf06446c4,%al
f0109fbc:	83 e0 1f             	and    $0x1f,%eax
f0109fbf:	a2 c4 46 64 f0       	mov    %al,0xf06446c4
f0109fc4:	a0 c5 46 64 f0       	mov    0xf06446c5,%al
f0109fc9:	83 c8 0f             	or     $0xf,%eax
f0109fcc:	a2 c5 46 64 f0       	mov    %al,0xf06446c5
f0109fd1:	a0 c5 46 64 f0       	mov    0xf06446c5,%al
f0109fd6:	83 e0 ef             	and    $0xffffffef,%eax
f0109fd9:	a2 c5 46 64 f0       	mov    %al,0xf06446c5
f0109fde:	a0 c5 46 64 f0       	mov    0xf06446c5,%al
f0109fe3:	83 c8 60             	or     $0x60,%eax
f0109fe6:	a2 c5 46 64 f0       	mov    %al,0xf06446c5
f0109feb:	a0 c5 46 64 f0       	mov    0xf06446c5,%al
f0109ff0:	83 c8 80             	or     $0xffffff80,%eax
f0109ff3:	a2 c5 46 64 f0       	mov    %al,0xf06446c5
f0109ff8:	b8 b6 b2 10 f0       	mov    $0xf010b2b6,%eax
f0109ffd:	c1 e8 10             	shr    $0x10,%eax
f010a000:	66 a3 c6 46 64 f0    	mov    %ax,0xf06446c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010a006:	b8 c0 b2 10 f0       	mov    $0xf010b2c0,%eax
f010a00b:	66 a3 c8 46 64 f0    	mov    %ax,0xf06446c8
f010a011:	66 c7 05 ca 46 64 f0 	movw   $0x8,0xf06446ca
f010a018:	08 00 
f010a01a:	a0 cc 46 64 f0       	mov    0xf06446cc,%al
f010a01f:	83 e0 e0             	and    $0xffffffe0,%eax
f010a022:	a2 cc 46 64 f0       	mov    %al,0xf06446cc
f010a027:	a0 cc 46 64 f0       	mov    0xf06446cc,%al
f010a02c:	83 e0 1f             	and    $0x1f,%eax
f010a02f:	a2 cc 46 64 f0       	mov    %al,0xf06446cc
f010a034:	a0 cd 46 64 f0       	mov    0xf06446cd,%al
f010a039:	83 e0 f0             	and    $0xfffffff0,%eax
f010a03c:	83 c8 0e             	or     $0xe,%eax
f010a03f:	a2 cd 46 64 f0       	mov    %al,0xf06446cd
f010a044:	a0 cd 46 64 f0       	mov    0xf06446cd,%al
f010a049:	83 e0 ef             	and    $0xffffffef,%eax
f010a04c:	a2 cd 46 64 f0       	mov    %al,0xf06446cd
f010a051:	a0 cd 46 64 f0       	mov    0xf06446cd,%al
f010a056:	83 c8 60             	or     $0x60,%eax
f010a059:	a2 cd 46 64 f0       	mov    %al,0xf06446cd
f010a05e:	a0 cd 46 64 f0       	mov    0xf06446cd,%al
f010a063:	83 c8 80             	or     $0xffffff80,%eax
f010a066:	a2 cd 46 64 f0       	mov    %al,0xf06446cd
f010a06b:	b8 c0 b2 10 f0       	mov    $0xf010b2c0,%eax
f010a070:	c1 e8 10             	shr    $0x10,%eax
f010a073:	66 a3 ce 46 64 f0    	mov    %ax,0xf06446ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010a079:	b8 ca b2 10 f0       	mov    $0xf010b2ca,%eax
f010a07e:	66 a3 d0 46 64 f0    	mov    %ax,0xf06446d0
f010a084:	66 c7 05 d2 46 64 f0 	movw   $0x8,0xf06446d2
f010a08b:	08 00 
f010a08d:	a0 d4 46 64 f0       	mov    0xf06446d4,%al
f010a092:	83 e0 e0             	and    $0xffffffe0,%eax
f010a095:	a2 d4 46 64 f0       	mov    %al,0xf06446d4
f010a09a:	a0 d4 46 64 f0       	mov    0xf06446d4,%al
f010a09f:	83 e0 1f             	and    $0x1f,%eax
f010a0a2:	a2 d4 46 64 f0       	mov    %al,0xf06446d4
f010a0a7:	a0 d5 46 64 f0       	mov    0xf06446d5,%al
f010a0ac:	83 e0 f0             	and    $0xfffffff0,%eax
f010a0af:	83 c8 0e             	or     $0xe,%eax
f010a0b2:	a2 d5 46 64 f0       	mov    %al,0xf06446d5
f010a0b7:	a0 d5 46 64 f0       	mov    0xf06446d5,%al
f010a0bc:	83 e0 ef             	and    $0xffffffef,%eax
f010a0bf:	a2 d5 46 64 f0       	mov    %al,0xf06446d5
f010a0c4:	a0 d5 46 64 f0       	mov    0xf06446d5,%al
f010a0c9:	83 c8 60             	or     $0x60,%eax
f010a0cc:	a2 d5 46 64 f0       	mov    %al,0xf06446d5
f010a0d1:	a0 d5 46 64 f0       	mov    0xf06446d5,%al
f010a0d6:	83 c8 80             	or     $0xffffff80,%eax
f010a0d9:	a2 d5 46 64 f0       	mov    %al,0xf06446d5
f010a0de:	b8 ca b2 10 f0       	mov    $0xf010b2ca,%eax
f010a0e3:	c1 e8 10             	shr    $0x10,%eax
f010a0e6:	66 a3 d6 46 64 f0    	mov    %ax,0xf06446d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010a0ec:	b8 d4 b2 10 f0       	mov    $0xf010b2d4,%eax
f010a0f1:	66 a3 d8 46 64 f0    	mov    %ax,0xf06446d8
f010a0f7:	66 c7 05 da 46 64 f0 	movw   $0x8,0xf06446da
f010a0fe:	08 00 
f010a100:	a0 dc 46 64 f0       	mov    0xf06446dc,%al
f010a105:	83 e0 e0             	and    $0xffffffe0,%eax
f010a108:	a2 dc 46 64 f0       	mov    %al,0xf06446dc
f010a10d:	a0 dc 46 64 f0       	mov    0xf06446dc,%al
f010a112:	83 e0 1f             	and    $0x1f,%eax
f010a115:	a2 dc 46 64 f0       	mov    %al,0xf06446dc
f010a11a:	a0 dd 46 64 f0       	mov    0xf06446dd,%al
f010a11f:	83 e0 f0             	and    $0xfffffff0,%eax
f010a122:	83 c8 0e             	or     $0xe,%eax
f010a125:	a2 dd 46 64 f0       	mov    %al,0xf06446dd
f010a12a:	a0 dd 46 64 f0       	mov    0xf06446dd,%al
f010a12f:	83 e0 ef             	and    $0xffffffef,%eax
f010a132:	a2 dd 46 64 f0       	mov    %al,0xf06446dd
f010a137:	a0 dd 46 64 f0       	mov    0xf06446dd,%al
f010a13c:	83 c8 60             	or     $0x60,%eax
f010a13f:	a2 dd 46 64 f0       	mov    %al,0xf06446dd
f010a144:	a0 dd 46 64 f0       	mov    0xf06446dd,%al
f010a149:	83 c8 80             	or     $0xffffff80,%eax
f010a14c:	a2 dd 46 64 f0       	mov    %al,0xf06446dd
f010a151:	b8 d4 b2 10 f0       	mov    $0xf010b2d4,%eax
f010a156:	c1 e8 10             	shr    $0x10,%eax
f010a159:	66 a3 de 46 64 f0    	mov    %ax,0xf06446de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010a15f:	b8 de b2 10 f0       	mov    $0xf010b2de,%eax
f010a164:	66 a3 f0 46 64 f0    	mov    %ax,0xf06446f0
f010a16a:	66 c7 05 f2 46 64 f0 	movw   $0x8,0xf06446f2
f010a171:	08 00 
f010a173:	a0 f4 46 64 f0       	mov    0xf06446f4,%al
f010a178:	83 e0 e0             	and    $0xffffffe0,%eax
f010a17b:	a2 f4 46 64 f0       	mov    %al,0xf06446f4
f010a180:	a0 f4 46 64 f0       	mov    0xf06446f4,%al
f010a185:	83 e0 1f             	and    $0x1f,%eax
f010a188:	a2 f4 46 64 f0       	mov    %al,0xf06446f4
f010a18d:	a0 f5 46 64 f0       	mov    0xf06446f5,%al
f010a192:	83 e0 f0             	and    $0xfffffff0,%eax
f010a195:	83 c8 0e             	or     $0xe,%eax
f010a198:	a2 f5 46 64 f0       	mov    %al,0xf06446f5
f010a19d:	a0 f5 46 64 f0       	mov    0xf06446f5,%al
f010a1a2:	83 e0 ef             	and    $0xffffffef,%eax
f010a1a5:	a2 f5 46 64 f0       	mov    %al,0xf06446f5
f010a1aa:	a0 f5 46 64 f0       	mov    0xf06446f5,%al
f010a1af:	83 c8 60             	or     $0x60,%eax
f010a1b2:	a2 f5 46 64 f0       	mov    %al,0xf06446f5
f010a1b7:	a0 f5 46 64 f0       	mov    0xf06446f5,%al
f010a1bc:	83 c8 80             	or     $0xffffff80,%eax
f010a1bf:	a2 f5 46 64 f0       	mov    %al,0xf06446f5
f010a1c4:	b8 de b2 10 f0       	mov    $0xf010b2de,%eax
f010a1c9:	c1 e8 10             	shr    $0x10,%eax
f010a1cc:	66 a3 f6 46 64 f0    	mov    %ax,0xf06446f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010a1d2:	b8 e6 b2 10 f0       	mov    $0xf010b2e6,%eax
f010a1d7:	66 a3 f8 46 64 f0    	mov    %ax,0xf06446f8
f010a1dd:	66 c7 05 fa 46 64 f0 	movw   $0x8,0xf06446fa
f010a1e4:	08 00 
f010a1e6:	a0 fc 46 64 f0       	mov    0xf06446fc,%al
f010a1eb:	83 e0 e0             	and    $0xffffffe0,%eax
f010a1ee:	a2 fc 46 64 f0       	mov    %al,0xf06446fc
f010a1f3:	a0 fc 46 64 f0       	mov    0xf06446fc,%al
f010a1f8:	83 e0 1f             	and    $0x1f,%eax
f010a1fb:	a2 fc 46 64 f0       	mov    %al,0xf06446fc
f010a200:	a0 fd 46 64 f0       	mov    0xf06446fd,%al
f010a205:	83 e0 f0             	and    $0xfffffff0,%eax
f010a208:	83 c8 0e             	or     $0xe,%eax
f010a20b:	a2 fd 46 64 f0       	mov    %al,0xf06446fd
f010a210:	a0 fd 46 64 f0       	mov    0xf06446fd,%al
f010a215:	83 e0 ef             	and    $0xffffffef,%eax
f010a218:	a2 fd 46 64 f0       	mov    %al,0xf06446fd
f010a21d:	a0 fd 46 64 f0       	mov    0xf06446fd,%al
f010a222:	83 c8 60             	or     $0x60,%eax
f010a225:	a2 fd 46 64 f0       	mov    %al,0xf06446fd
f010a22a:	a0 fd 46 64 f0       	mov    0xf06446fd,%al
f010a22f:	83 c8 80             	or     $0xffffff80,%eax
f010a232:	a2 fd 46 64 f0       	mov    %al,0xf06446fd
f010a237:	b8 e6 b2 10 f0       	mov    $0xf010b2e6,%eax
f010a23c:	c1 e8 10             	shr    $0x10,%eax
f010a23f:	66 a3 fe 46 64 f0    	mov    %ax,0xf06446fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010a245:	b8 ea b2 10 f0       	mov    $0xf010b2ea,%eax
f010a24a:	66 a3 00 47 64 f0    	mov    %ax,0xf0644700
f010a250:	66 c7 05 02 47 64 f0 	movw   $0x8,0xf0644702
f010a257:	08 00 
f010a259:	a0 04 47 64 f0       	mov    0xf0644704,%al
f010a25e:	83 e0 e0             	and    $0xffffffe0,%eax
f010a261:	a2 04 47 64 f0       	mov    %al,0xf0644704
f010a266:	a0 04 47 64 f0       	mov    0xf0644704,%al
f010a26b:	83 e0 1f             	and    $0x1f,%eax
f010a26e:	a2 04 47 64 f0       	mov    %al,0xf0644704
f010a273:	a0 05 47 64 f0       	mov    0xf0644705,%al
f010a278:	83 e0 f0             	and    $0xfffffff0,%eax
f010a27b:	83 c8 0e             	or     $0xe,%eax
f010a27e:	a2 05 47 64 f0       	mov    %al,0xf0644705
f010a283:	a0 05 47 64 f0       	mov    0xf0644705,%al
f010a288:	83 e0 ef             	and    $0xffffffef,%eax
f010a28b:	a2 05 47 64 f0       	mov    %al,0xf0644705
f010a290:	a0 05 47 64 f0       	mov    0xf0644705,%al
f010a295:	83 c8 60             	or     $0x60,%eax
f010a298:	a2 05 47 64 f0       	mov    %al,0xf0644705
f010a29d:	a0 05 47 64 f0       	mov    0xf0644705,%al
f010a2a2:	83 c8 80             	or     $0xffffff80,%eax
f010a2a5:	a2 05 47 64 f0       	mov    %al,0xf0644705
f010a2aa:	b8 ea b2 10 f0       	mov    $0xf010b2ea,%eax
f010a2af:	c1 e8 10             	shr    $0x10,%eax
f010a2b2:	66 a3 06 47 64 f0    	mov    %ax,0xf0644706
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010a2b8:	b8 ee b2 10 f0       	mov    $0xf010b2ee,%eax
f010a2bd:	66 a3 08 47 64 f0    	mov    %ax,0xf0644708
f010a2c3:	66 c7 05 0a 47 64 f0 	movw   $0x8,0xf064470a
f010a2ca:	08 00 
f010a2cc:	a0 0c 47 64 f0       	mov    0xf064470c,%al
f010a2d1:	83 e0 e0             	and    $0xffffffe0,%eax
f010a2d4:	a2 0c 47 64 f0       	mov    %al,0xf064470c
f010a2d9:	a0 0c 47 64 f0       	mov    0xf064470c,%al
f010a2de:	83 e0 1f             	and    $0x1f,%eax
f010a2e1:	a2 0c 47 64 f0       	mov    %al,0xf064470c
f010a2e6:	a0 0d 47 64 f0       	mov    0xf064470d,%al
f010a2eb:	83 e0 f0             	and    $0xfffffff0,%eax
f010a2ee:	83 c8 0e             	or     $0xe,%eax
f010a2f1:	a2 0d 47 64 f0       	mov    %al,0xf064470d
f010a2f6:	a0 0d 47 64 f0       	mov    0xf064470d,%al
f010a2fb:	83 e0 ef             	and    $0xffffffef,%eax
f010a2fe:	a2 0d 47 64 f0       	mov    %al,0xf064470d
f010a303:	a0 0d 47 64 f0       	mov    0xf064470d,%al
f010a308:	83 c8 60             	or     $0x60,%eax
f010a30b:	a2 0d 47 64 f0       	mov    %al,0xf064470d
f010a310:	a0 0d 47 64 f0       	mov    0xf064470d,%al
f010a315:	83 c8 80             	or     $0xffffff80,%eax
f010a318:	a2 0d 47 64 f0       	mov    %al,0xf064470d
f010a31d:	b8 ee b2 10 f0       	mov    $0xf010b2ee,%eax
f010a322:	c1 e8 10             	shr    $0x10,%eax
f010a325:	66 a3 0e 47 64 f0    	mov    %ax,0xf064470e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010a32b:	b8 f2 b2 10 f0       	mov    $0xf010b2f2,%eax
f010a330:	66 a3 20 47 64 f0    	mov    %ax,0xf0644720
f010a336:	66 c7 05 22 47 64 f0 	movw   $0x8,0xf0644722
f010a33d:	08 00 
f010a33f:	a0 24 47 64 f0       	mov    0xf0644724,%al
f010a344:	83 e0 e0             	and    $0xffffffe0,%eax
f010a347:	a2 24 47 64 f0       	mov    %al,0xf0644724
f010a34c:	a0 24 47 64 f0       	mov    0xf0644724,%al
f010a351:	83 e0 1f             	and    $0x1f,%eax
f010a354:	a2 24 47 64 f0       	mov    %al,0xf0644724
f010a359:	a0 25 47 64 f0       	mov    0xf0644725,%al
f010a35e:	83 e0 f0             	and    $0xfffffff0,%eax
f010a361:	83 c8 0e             	or     $0xe,%eax
f010a364:	a2 25 47 64 f0       	mov    %al,0xf0644725
f010a369:	a0 25 47 64 f0       	mov    0xf0644725,%al
f010a36e:	83 e0 ef             	and    $0xffffffef,%eax
f010a371:	a2 25 47 64 f0       	mov    %al,0xf0644725
f010a376:	a0 25 47 64 f0       	mov    0xf0644725,%al
f010a37b:	83 c8 60             	or     $0x60,%eax
f010a37e:	a2 25 47 64 f0       	mov    %al,0xf0644725
f010a383:	a0 25 47 64 f0       	mov    0xf0644725,%al
f010a388:	83 c8 80             	or     $0xffffff80,%eax
f010a38b:	a2 25 47 64 f0       	mov    %al,0xf0644725
f010a390:	b8 f2 b2 10 f0       	mov    $0xf010b2f2,%eax
f010a395:	c1 e8 10             	shr    $0x10,%eax
f010a398:	66 a3 26 47 64 f0    	mov    %ax,0xf0644726
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010a39e:	b8 f8 b2 10 f0       	mov    $0xf010b2f8,%eax
f010a3a3:	66 a3 28 47 64 f0    	mov    %ax,0xf0644728
f010a3a9:	66 c7 05 2a 47 64 f0 	movw   $0x8,0xf064472a
f010a3b0:	08 00 
f010a3b2:	a0 2c 47 64 f0       	mov    0xf064472c,%al
f010a3b7:	83 e0 e0             	and    $0xffffffe0,%eax
f010a3ba:	a2 2c 47 64 f0       	mov    %al,0xf064472c
f010a3bf:	a0 2c 47 64 f0       	mov    0xf064472c,%al
f010a3c4:	83 e0 1f             	and    $0x1f,%eax
f010a3c7:	a2 2c 47 64 f0       	mov    %al,0xf064472c
f010a3cc:	a0 2d 47 64 f0       	mov    0xf064472d,%al
f010a3d1:	83 e0 f0             	and    $0xfffffff0,%eax
f010a3d4:	83 c8 0e             	or     $0xe,%eax
f010a3d7:	a2 2d 47 64 f0       	mov    %al,0xf064472d
f010a3dc:	a0 2d 47 64 f0       	mov    0xf064472d,%al
f010a3e1:	83 e0 ef             	and    $0xffffffef,%eax
f010a3e4:	a2 2d 47 64 f0       	mov    %al,0xf064472d
f010a3e9:	a0 2d 47 64 f0       	mov    0xf064472d,%al
f010a3ee:	83 c8 60             	or     $0x60,%eax
f010a3f1:	a2 2d 47 64 f0       	mov    %al,0xf064472d
f010a3f6:	a0 2d 47 64 f0       	mov    0xf064472d,%al
f010a3fb:	83 c8 80             	or     $0xffffff80,%eax
f010a3fe:	a2 2d 47 64 f0       	mov    %al,0xf064472d
f010a403:	b8 f8 b2 10 f0       	mov    $0xf010b2f8,%eax
f010a408:	c1 e8 10             	shr    $0x10,%eax
f010a40b:	66 a3 2e 47 64 f0    	mov    %ax,0xf064472e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010a411:	b8 fc b2 10 f0       	mov    $0xf010b2fc,%eax
f010a416:	66 a3 30 47 64 f0    	mov    %ax,0xf0644730
f010a41c:	66 c7 05 32 47 64 f0 	movw   $0x8,0xf0644732
f010a423:	08 00 
f010a425:	a0 34 47 64 f0       	mov    0xf0644734,%al
f010a42a:	83 e0 e0             	and    $0xffffffe0,%eax
f010a42d:	a2 34 47 64 f0       	mov    %al,0xf0644734
f010a432:	a0 34 47 64 f0       	mov    0xf0644734,%al
f010a437:	83 e0 1f             	and    $0x1f,%eax
f010a43a:	a2 34 47 64 f0       	mov    %al,0xf0644734
f010a43f:	a0 35 47 64 f0       	mov    0xf0644735,%al
f010a444:	83 e0 f0             	and    $0xfffffff0,%eax
f010a447:	83 c8 0e             	or     $0xe,%eax
f010a44a:	a2 35 47 64 f0       	mov    %al,0xf0644735
f010a44f:	a0 35 47 64 f0       	mov    0xf0644735,%al
f010a454:	83 e0 ef             	and    $0xffffffef,%eax
f010a457:	a2 35 47 64 f0       	mov    %al,0xf0644735
f010a45c:	a0 35 47 64 f0       	mov    0xf0644735,%al
f010a461:	83 c8 60             	or     $0x60,%eax
f010a464:	a2 35 47 64 f0       	mov    %al,0xf0644735
f010a469:	a0 35 47 64 f0       	mov    0xf0644735,%al
f010a46e:	83 c8 80             	or     $0xffffff80,%eax
f010a471:	a2 35 47 64 f0       	mov    %al,0xf0644735
f010a476:	b8 fc b2 10 f0       	mov    $0xf010b2fc,%eax
f010a47b:	c1 e8 10             	shr    $0x10,%eax
f010a47e:	66 a3 36 47 64 f0    	mov    %ax,0xf0644736
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010a484:	b8 02 b3 10 f0       	mov    $0xf010b302,%eax
f010a489:	66 a3 38 47 64 f0    	mov    %ax,0xf0644738
f010a48f:	66 c7 05 3a 47 64 f0 	movw   $0x8,0xf064473a
f010a496:	08 00 
f010a498:	a0 3c 47 64 f0       	mov    0xf064473c,%al
f010a49d:	83 e0 e0             	and    $0xffffffe0,%eax
f010a4a0:	a2 3c 47 64 f0       	mov    %al,0xf064473c
f010a4a5:	a0 3c 47 64 f0       	mov    0xf064473c,%al
f010a4aa:	83 e0 1f             	and    $0x1f,%eax
f010a4ad:	a2 3c 47 64 f0       	mov    %al,0xf064473c
f010a4b2:	a0 3d 47 64 f0       	mov    0xf064473d,%al
f010a4b7:	83 e0 f0             	and    $0xfffffff0,%eax
f010a4ba:	83 c8 0e             	or     $0xe,%eax
f010a4bd:	a2 3d 47 64 f0       	mov    %al,0xf064473d
f010a4c2:	a0 3d 47 64 f0       	mov    0xf064473d,%al
f010a4c7:	83 e0 ef             	and    $0xffffffef,%eax
f010a4ca:	a2 3d 47 64 f0       	mov    %al,0xf064473d
f010a4cf:	a0 3d 47 64 f0       	mov    0xf064473d,%al
f010a4d4:	83 c8 60             	or     $0x60,%eax
f010a4d7:	a2 3d 47 64 f0       	mov    %al,0xf064473d
f010a4dc:	a0 3d 47 64 f0       	mov    0xf064473d,%al
f010a4e1:	83 c8 80             	or     $0xffffff80,%eax
f010a4e4:	a2 3d 47 64 f0       	mov    %al,0xf064473d
f010a4e9:	b8 02 b3 10 f0       	mov    $0xf010b302,%eax
f010a4ee:	c1 e8 10             	shr    $0x10,%eax
f010a4f1:	66 a3 3e 47 64 f0    	mov    %ax,0xf064473e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010a4f7:	b8 08 b3 10 f0       	mov    $0xf010b308,%eax
f010a4fc:	66 a3 a0 47 64 f0    	mov    %ax,0xf06447a0
f010a502:	66 c7 05 a2 47 64 f0 	movw   $0x8,0xf06447a2
f010a509:	08 00 
f010a50b:	a0 a4 47 64 f0       	mov    0xf06447a4,%al
f010a510:	83 e0 e0             	and    $0xffffffe0,%eax
f010a513:	a2 a4 47 64 f0       	mov    %al,0xf06447a4
f010a518:	a0 a4 47 64 f0       	mov    0xf06447a4,%al
f010a51d:	83 e0 1f             	and    $0x1f,%eax
f010a520:	a2 a4 47 64 f0       	mov    %al,0xf06447a4
f010a525:	a0 a5 47 64 f0       	mov    0xf06447a5,%al
f010a52a:	83 e0 f0             	and    $0xfffffff0,%eax
f010a52d:	83 c8 0e             	or     $0xe,%eax
f010a530:	a2 a5 47 64 f0       	mov    %al,0xf06447a5
f010a535:	a0 a5 47 64 f0       	mov    0xf06447a5,%al
f010a53a:	83 e0 ef             	and    $0xffffffef,%eax
f010a53d:	a2 a5 47 64 f0       	mov    %al,0xf06447a5
f010a542:	a0 a5 47 64 f0       	mov    0xf06447a5,%al
f010a547:	83 c8 60             	or     $0x60,%eax
f010a54a:	a2 a5 47 64 f0       	mov    %al,0xf06447a5
f010a54f:	a0 a5 47 64 f0       	mov    0xf06447a5,%al
f010a554:	83 c8 80             	or     $0xffffff80,%eax
f010a557:	a2 a5 47 64 f0       	mov    %al,0xf06447a5
f010a55c:	b8 08 b3 10 f0       	mov    $0xf010b308,%eax
f010a561:	c1 e8 10             	shr    $0x10,%eax
f010a564:	66 a3 a6 47 64 f0    	mov    %ax,0xf06447a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010a56a:	b8 0e b3 10 f0       	mov    $0xf010b30e,%eax
f010a56f:	66 a3 a8 47 64 f0    	mov    %ax,0xf06447a8
f010a575:	66 c7 05 aa 47 64 f0 	movw   $0x8,0xf06447aa
f010a57c:	08 00 
f010a57e:	a0 ac 47 64 f0       	mov    0xf06447ac,%al
f010a583:	83 e0 e0             	and    $0xffffffe0,%eax
f010a586:	a2 ac 47 64 f0       	mov    %al,0xf06447ac
f010a58b:	a0 ac 47 64 f0       	mov    0xf06447ac,%al
f010a590:	83 e0 1f             	and    $0x1f,%eax
f010a593:	a2 ac 47 64 f0       	mov    %al,0xf06447ac
f010a598:	a0 ad 47 64 f0       	mov    0xf06447ad,%al
f010a59d:	83 e0 f0             	and    $0xfffffff0,%eax
f010a5a0:	83 c8 0e             	or     $0xe,%eax
f010a5a3:	a2 ad 47 64 f0       	mov    %al,0xf06447ad
f010a5a8:	a0 ad 47 64 f0       	mov    0xf06447ad,%al
f010a5ad:	83 e0 ef             	and    $0xffffffef,%eax
f010a5b0:	a2 ad 47 64 f0       	mov    %al,0xf06447ad
f010a5b5:	a0 ad 47 64 f0       	mov    0xf06447ad,%al
f010a5ba:	83 c8 60             	or     $0x60,%eax
f010a5bd:	a2 ad 47 64 f0       	mov    %al,0xf06447ad
f010a5c2:	a0 ad 47 64 f0       	mov    0xf06447ad,%al
f010a5c7:	83 c8 80             	or     $0xffffff80,%eax
f010a5ca:	a2 ad 47 64 f0       	mov    %al,0xf06447ad
f010a5cf:	b8 0e b3 10 f0       	mov    $0xf010b30e,%eax
f010a5d4:	c1 e8 10             	shr    $0x10,%eax
f010a5d7:	66 a3 ae 47 64 f0    	mov    %ax,0xf06447ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010a5dd:	b8 14 b3 10 f0       	mov    $0xf010b314,%eax
f010a5e2:	66 a3 b0 47 64 f0    	mov    %ax,0xf06447b0
f010a5e8:	66 c7 05 b2 47 64 f0 	movw   $0x8,0xf06447b2
f010a5ef:	08 00 
f010a5f1:	a0 b4 47 64 f0       	mov    0xf06447b4,%al
f010a5f6:	83 e0 e0             	and    $0xffffffe0,%eax
f010a5f9:	a2 b4 47 64 f0       	mov    %al,0xf06447b4
f010a5fe:	a0 b4 47 64 f0       	mov    0xf06447b4,%al
f010a603:	83 e0 1f             	and    $0x1f,%eax
f010a606:	a2 b4 47 64 f0       	mov    %al,0xf06447b4
f010a60b:	a0 b5 47 64 f0       	mov    0xf06447b5,%al
f010a610:	83 e0 f0             	and    $0xfffffff0,%eax
f010a613:	83 c8 0e             	or     $0xe,%eax
f010a616:	a2 b5 47 64 f0       	mov    %al,0xf06447b5
f010a61b:	a0 b5 47 64 f0       	mov    0xf06447b5,%al
f010a620:	83 e0 ef             	and    $0xffffffef,%eax
f010a623:	a2 b5 47 64 f0       	mov    %al,0xf06447b5
f010a628:	a0 b5 47 64 f0       	mov    0xf06447b5,%al
f010a62d:	83 c8 60             	or     $0x60,%eax
f010a630:	a2 b5 47 64 f0       	mov    %al,0xf06447b5
f010a635:	a0 b5 47 64 f0       	mov    0xf06447b5,%al
f010a63a:	83 c8 80             	or     $0xffffff80,%eax
f010a63d:	a2 b5 47 64 f0       	mov    %al,0xf06447b5
f010a642:	b8 14 b3 10 f0       	mov    $0xf010b314,%eax
f010a647:	c1 e8 10             	shr    $0x10,%eax
f010a64a:	66 a3 b6 47 64 f0    	mov    %ax,0xf06447b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010a650:	b8 1a b3 10 f0       	mov    $0xf010b31a,%eax
f010a655:	66 a3 b8 47 64 f0    	mov    %ax,0xf06447b8
f010a65b:	66 c7 05 ba 47 64 f0 	movw   $0x8,0xf06447ba
f010a662:	08 00 
f010a664:	a0 bc 47 64 f0       	mov    0xf06447bc,%al
f010a669:	83 e0 e0             	and    $0xffffffe0,%eax
f010a66c:	a2 bc 47 64 f0       	mov    %al,0xf06447bc
f010a671:	a0 bc 47 64 f0       	mov    0xf06447bc,%al
f010a676:	83 e0 1f             	and    $0x1f,%eax
f010a679:	a2 bc 47 64 f0       	mov    %al,0xf06447bc
f010a67e:	a0 bd 47 64 f0       	mov    0xf06447bd,%al
f010a683:	83 e0 f0             	and    $0xfffffff0,%eax
f010a686:	83 c8 0e             	or     $0xe,%eax
f010a689:	a2 bd 47 64 f0       	mov    %al,0xf06447bd
f010a68e:	a0 bd 47 64 f0       	mov    0xf06447bd,%al
f010a693:	83 e0 ef             	and    $0xffffffef,%eax
f010a696:	a2 bd 47 64 f0       	mov    %al,0xf06447bd
f010a69b:	a0 bd 47 64 f0       	mov    0xf06447bd,%al
f010a6a0:	83 c8 60             	or     $0x60,%eax
f010a6a3:	a2 bd 47 64 f0       	mov    %al,0xf06447bd
f010a6a8:	a0 bd 47 64 f0       	mov    0xf06447bd,%al
f010a6ad:	83 c8 80             	or     $0xffffff80,%eax
f010a6b0:	a2 bd 47 64 f0       	mov    %al,0xf06447bd
f010a6b5:	b8 1a b3 10 f0       	mov    $0xf010b31a,%eax
f010a6ba:	c1 e8 10             	shr    $0x10,%eax
f010a6bd:	66 a3 be 47 64 f0    	mov    %ax,0xf06447be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010a6c3:	b8 20 b3 10 f0       	mov    $0xf010b320,%eax
f010a6c8:	66 a3 c0 47 64 f0    	mov    %ax,0xf06447c0
f010a6ce:	66 c7 05 c2 47 64 f0 	movw   $0x8,0xf06447c2
f010a6d5:	08 00 
f010a6d7:	a0 c4 47 64 f0       	mov    0xf06447c4,%al
f010a6dc:	83 e0 e0             	and    $0xffffffe0,%eax
f010a6df:	a2 c4 47 64 f0       	mov    %al,0xf06447c4
f010a6e4:	a0 c4 47 64 f0       	mov    0xf06447c4,%al
f010a6e9:	83 e0 1f             	and    $0x1f,%eax
f010a6ec:	a2 c4 47 64 f0       	mov    %al,0xf06447c4
f010a6f1:	a0 c5 47 64 f0       	mov    0xf06447c5,%al
f010a6f6:	83 e0 f0             	and    $0xfffffff0,%eax
f010a6f9:	83 c8 0e             	or     $0xe,%eax
f010a6fc:	a2 c5 47 64 f0       	mov    %al,0xf06447c5
f010a701:	a0 c5 47 64 f0       	mov    0xf06447c5,%al
f010a706:	83 e0 ef             	and    $0xffffffef,%eax
f010a709:	a2 c5 47 64 f0       	mov    %al,0xf06447c5
f010a70e:	a0 c5 47 64 f0       	mov    0xf06447c5,%al
f010a713:	83 c8 60             	or     $0x60,%eax
f010a716:	a2 c5 47 64 f0       	mov    %al,0xf06447c5
f010a71b:	a0 c5 47 64 f0       	mov    0xf06447c5,%al
f010a720:	83 c8 80             	or     $0xffffff80,%eax
f010a723:	a2 c5 47 64 f0       	mov    %al,0xf06447c5
f010a728:	b8 20 b3 10 f0       	mov    $0xf010b320,%eax
f010a72d:	c1 e8 10             	shr    $0x10,%eax
f010a730:	66 a3 c6 47 64 f0    	mov    %ax,0xf06447c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010a736:	b8 26 b3 10 f0       	mov    $0xf010b326,%eax
f010a73b:	66 a3 c8 47 64 f0    	mov    %ax,0xf06447c8
f010a741:	66 c7 05 ca 47 64 f0 	movw   $0x8,0xf06447ca
f010a748:	08 00 
f010a74a:	a0 cc 47 64 f0       	mov    0xf06447cc,%al
f010a74f:	83 e0 e0             	and    $0xffffffe0,%eax
f010a752:	a2 cc 47 64 f0       	mov    %al,0xf06447cc
f010a757:	a0 cc 47 64 f0       	mov    0xf06447cc,%al
f010a75c:	83 e0 1f             	and    $0x1f,%eax
f010a75f:	a2 cc 47 64 f0       	mov    %al,0xf06447cc
f010a764:	a0 cd 47 64 f0       	mov    0xf06447cd,%al
f010a769:	83 e0 f0             	and    $0xfffffff0,%eax
f010a76c:	83 c8 0e             	or     $0xe,%eax
f010a76f:	a2 cd 47 64 f0       	mov    %al,0xf06447cd
f010a774:	a0 cd 47 64 f0       	mov    0xf06447cd,%al
f010a779:	83 e0 ef             	and    $0xffffffef,%eax
f010a77c:	a2 cd 47 64 f0       	mov    %al,0xf06447cd
f010a781:	a0 cd 47 64 f0       	mov    0xf06447cd,%al
f010a786:	83 c8 60             	or     $0x60,%eax
f010a789:	a2 cd 47 64 f0       	mov    %al,0xf06447cd
f010a78e:	a0 cd 47 64 f0       	mov    0xf06447cd,%al
f010a793:	83 c8 80             	or     $0xffffff80,%eax
f010a796:	a2 cd 47 64 f0       	mov    %al,0xf06447cd
f010a79b:	b8 26 b3 10 f0       	mov    $0xf010b326,%eax
f010a7a0:	c1 e8 10             	shr    $0x10,%eax
f010a7a3:	66 a3 ce 47 64 f0    	mov    %ax,0xf06447ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010a7a9:	b8 2c b3 10 f0       	mov    $0xf010b32c,%eax
f010a7ae:	66 a3 d0 47 64 f0    	mov    %ax,0xf06447d0
f010a7b4:	66 c7 05 d2 47 64 f0 	movw   $0x8,0xf06447d2
f010a7bb:	08 00 
f010a7bd:	a0 d4 47 64 f0       	mov    0xf06447d4,%al
f010a7c2:	83 e0 e0             	and    $0xffffffe0,%eax
f010a7c5:	a2 d4 47 64 f0       	mov    %al,0xf06447d4
f010a7ca:	a0 d4 47 64 f0       	mov    0xf06447d4,%al
f010a7cf:	83 e0 1f             	and    $0x1f,%eax
f010a7d2:	a2 d4 47 64 f0       	mov    %al,0xf06447d4
f010a7d7:	a0 d5 47 64 f0       	mov    0xf06447d5,%al
f010a7dc:	83 e0 f0             	and    $0xfffffff0,%eax
f010a7df:	83 c8 0e             	or     $0xe,%eax
f010a7e2:	a2 d5 47 64 f0       	mov    %al,0xf06447d5
f010a7e7:	a0 d5 47 64 f0       	mov    0xf06447d5,%al
f010a7ec:	83 e0 ef             	and    $0xffffffef,%eax
f010a7ef:	a2 d5 47 64 f0       	mov    %al,0xf06447d5
f010a7f4:	a0 d5 47 64 f0       	mov    0xf06447d5,%al
f010a7f9:	83 c8 60             	or     $0x60,%eax
f010a7fc:	a2 d5 47 64 f0       	mov    %al,0xf06447d5
f010a801:	a0 d5 47 64 f0       	mov    0xf06447d5,%al
f010a806:	83 c8 80             	or     $0xffffff80,%eax
f010a809:	a2 d5 47 64 f0       	mov    %al,0xf06447d5
f010a80e:	b8 2c b3 10 f0       	mov    $0xf010b32c,%eax
f010a813:	c1 e8 10             	shr    $0x10,%eax
f010a816:	66 a3 d6 47 64 f0    	mov    %ax,0xf06447d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010a81c:	b8 32 b3 10 f0       	mov    $0xf010b332,%eax
f010a821:	66 a3 d8 47 64 f0    	mov    %ax,0xf06447d8
f010a827:	66 c7 05 da 47 64 f0 	movw   $0x8,0xf06447da
f010a82e:	08 00 
f010a830:	a0 dc 47 64 f0       	mov    0xf06447dc,%al
f010a835:	83 e0 e0             	and    $0xffffffe0,%eax
f010a838:	a2 dc 47 64 f0       	mov    %al,0xf06447dc
f010a83d:	a0 dc 47 64 f0       	mov    0xf06447dc,%al
f010a842:	83 e0 1f             	and    $0x1f,%eax
f010a845:	a2 dc 47 64 f0       	mov    %al,0xf06447dc
f010a84a:	a0 dd 47 64 f0       	mov    0xf06447dd,%al
f010a84f:	83 e0 f0             	and    $0xfffffff0,%eax
f010a852:	83 c8 0e             	or     $0xe,%eax
f010a855:	a2 dd 47 64 f0       	mov    %al,0xf06447dd
f010a85a:	a0 dd 47 64 f0       	mov    0xf06447dd,%al
f010a85f:	83 e0 ef             	and    $0xffffffef,%eax
f010a862:	a2 dd 47 64 f0       	mov    %al,0xf06447dd
f010a867:	a0 dd 47 64 f0       	mov    0xf06447dd,%al
f010a86c:	83 c8 60             	or     $0x60,%eax
f010a86f:	a2 dd 47 64 f0       	mov    %al,0xf06447dd
f010a874:	a0 dd 47 64 f0       	mov    0xf06447dd,%al
f010a879:	83 c8 80             	or     $0xffffff80,%eax
f010a87c:	a2 dd 47 64 f0       	mov    %al,0xf06447dd
f010a881:	b8 32 b3 10 f0       	mov    $0xf010b332,%eax
f010a886:	c1 e8 10             	shr    $0x10,%eax
f010a889:	66 a3 de 47 64 f0    	mov    %ax,0xf06447de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010a88f:	b8 38 b3 10 f0       	mov    $0xf010b338,%eax
f010a894:	66 a3 e0 47 64 f0    	mov    %ax,0xf06447e0
f010a89a:	66 c7 05 e2 47 64 f0 	movw   $0x8,0xf06447e2
f010a8a1:	08 00 
f010a8a3:	a0 e4 47 64 f0       	mov    0xf06447e4,%al
f010a8a8:	83 e0 e0             	and    $0xffffffe0,%eax
f010a8ab:	a2 e4 47 64 f0       	mov    %al,0xf06447e4
f010a8b0:	a0 e4 47 64 f0       	mov    0xf06447e4,%al
f010a8b5:	83 e0 1f             	and    $0x1f,%eax
f010a8b8:	a2 e4 47 64 f0       	mov    %al,0xf06447e4
f010a8bd:	a0 e5 47 64 f0       	mov    0xf06447e5,%al
f010a8c2:	83 e0 f0             	and    $0xfffffff0,%eax
f010a8c5:	83 c8 0e             	or     $0xe,%eax
f010a8c8:	a2 e5 47 64 f0       	mov    %al,0xf06447e5
f010a8cd:	a0 e5 47 64 f0       	mov    0xf06447e5,%al
f010a8d2:	83 e0 ef             	and    $0xffffffef,%eax
f010a8d5:	a2 e5 47 64 f0       	mov    %al,0xf06447e5
f010a8da:	a0 e5 47 64 f0       	mov    0xf06447e5,%al
f010a8df:	83 c8 60             	or     $0x60,%eax
f010a8e2:	a2 e5 47 64 f0       	mov    %al,0xf06447e5
f010a8e7:	a0 e5 47 64 f0       	mov    0xf06447e5,%al
f010a8ec:	83 c8 80             	or     $0xffffff80,%eax
f010a8ef:	a2 e5 47 64 f0       	mov    %al,0xf06447e5
f010a8f4:	b8 38 b3 10 f0       	mov    $0xf010b338,%eax
f010a8f9:	c1 e8 10             	shr    $0x10,%eax
f010a8fc:	66 a3 e6 47 64 f0    	mov    %ax,0xf06447e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010a902:	b8 3e b3 10 f0       	mov    $0xf010b33e,%eax
f010a907:	66 a3 e8 47 64 f0    	mov    %ax,0xf06447e8
f010a90d:	66 c7 05 ea 47 64 f0 	movw   $0x8,0xf06447ea
f010a914:	08 00 
f010a916:	a0 ec 47 64 f0       	mov    0xf06447ec,%al
f010a91b:	83 e0 e0             	and    $0xffffffe0,%eax
f010a91e:	a2 ec 47 64 f0       	mov    %al,0xf06447ec
f010a923:	a0 ec 47 64 f0       	mov    0xf06447ec,%al
f010a928:	83 e0 1f             	and    $0x1f,%eax
f010a92b:	a2 ec 47 64 f0       	mov    %al,0xf06447ec
f010a930:	a0 ed 47 64 f0       	mov    0xf06447ed,%al
f010a935:	83 e0 f0             	and    $0xfffffff0,%eax
f010a938:	83 c8 0e             	or     $0xe,%eax
f010a93b:	a2 ed 47 64 f0       	mov    %al,0xf06447ed
f010a940:	a0 ed 47 64 f0       	mov    0xf06447ed,%al
f010a945:	83 e0 ef             	and    $0xffffffef,%eax
f010a948:	a2 ed 47 64 f0       	mov    %al,0xf06447ed
f010a94d:	a0 ed 47 64 f0       	mov    0xf06447ed,%al
f010a952:	83 c8 60             	or     $0x60,%eax
f010a955:	a2 ed 47 64 f0       	mov    %al,0xf06447ed
f010a95a:	a0 ed 47 64 f0       	mov    0xf06447ed,%al
f010a95f:	83 c8 80             	or     $0xffffff80,%eax
f010a962:	a2 ed 47 64 f0       	mov    %al,0xf06447ed
f010a967:	b8 3e b3 10 f0       	mov    $0xf010b33e,%eax
f010a96c:	c1 e8 10             	shr    $0x10,%eax
f010a96f:	66 a3 ee 47 64 f0    	mov    %ax,0xf06447ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010a975:	b8 44 b3 10 f0       	mov    $0xf010b344,%eax
f010a97a:	66 a3 f0 47 64 f0    	mov    %ax,0xf06447f0
f010a980:	66 c7 05 f2 47 64 f0 	movw   $0x8,0xf06447f2
f010a987:	08 00 
f010a989:	a0 f4 47 64 f0       	mov    0xf06447f4,%al
f010a98e:	83 e0 e0             	and    $0xffffffe0,%eax
f010a991:	a2 f4 47 64 f0       	mov    %al,0xf06447f4
f010a996:	a0 f4 47 64 f0       	mov    0xf06447f4,%al
f010a99b:	83 e0 1f             	and    $0x1f,%eax
f010a99e:	a2 f4 47 64 f0       	mov    %al,0xf06447f4
f010a9a3:	a0 f5 47 64 f0       	mov    0xf06447f5,%al
f010a9a8:	83 e0 f0             	and    $0xfffffff0,%eax
f010a9ab:	83 c8 0e             	or     $0xe,%eax
f010a9ae:	a2 f5 47 64 f0       	mov    %al,0xf06447f5
f010a9b3:	a0 f5 47 64 f0       	mov    0xf06447f5,%al
f010a9b8:	83 e0 ef             	and    $0xffffffef,%eax
f010a9bb:	a2 f5 47 64 f0       	mov    %al,0xf06447f5
f010a9c0:	a0 f5 47 64 f0       	mov    0xf06447f5,%al
f010a9c5:	83 c8 60             	or     $0x60,%eax
f010a9c8:	a2 f5 47 64 f0       	mov    %al,0xf06447f5
f010a9cd:	a0 f5 47 64 f0       	mov    0xf06447f5,%al
f010a9d2:	83 c8 80             	or     $0xffffff80,%eax
f010a9d5:	a2 f5 47 64 f0       	mov    %al,0xf06447f5
f010a9da:	b8 44 b3 10 f0       	mov    $0xf010b344,%eax
f010a9df:	c1 e8 10             	shr    $0x10,%eax
f010a9e2:	66 a3 f6 47 64 f0    	mov    %ax,0xf06447f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010a9e8:	b8 4a b3 10 f0       	mov    $0xf010b34a,%eax
f010a9ed:	66 a3 f8 47 64 f0    	mov    %ax,0xf06447f8
f010a9f3:	66 c7 05 fa 47 64 f0 	movw   $0x8,0xf06447fa
f010a9fa:	08 00 
f010a9fc:	a0 fc 47 64 f0       	mov    0xf06447fc,%al
f010aa01:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa04:	a2 fc 47 64 f0       	mov    %al,0xf06447fc
f010aa09:	a0 fc 47 64 f0       	mov    0xf06447fc,%al
f010aa0e:	83 e0 1f             	and    $0x1f,%eax
f010aa11:	a2 fc 47 64 f0       	mov    %al,0xf06447fc
f010aa16:	a0 fd 47 64 f0       	mov    0xf06447fd,%al
f010aa1b:	83 e0 f0             	and    $0xfffffff0,%eax
f010aa1e:	83 c8 0e             	or     $0xe,%eax
f010aa21:	a2 fd 47 64 f0       	mov    %al,0xf06447fd
f010aa26:	a0 fd 47 64 f0       	mov    0xf06447fd,%al
f010aa2b:	83 e0 ef             	and    $0xffffffef,%eax
f010aa2e:	a2 fd 47 64 f0       	mov    %al,0xf06447fd
f010aa33:	a0 fd 47 64 f0       	mov    0xf06447fd,%al
f010aa38:	83 c8 60             	or     $0x60,%eax
f010aa3b:	a2 fd 47 64 f0       	mov    %al,0xf06447fd
f010aa40:	a0 fd 47 64 f0       	mov    0xf06447fd,%al
f010aa45:	83 c8 80             	or     $0xffffff80,%eax
f010aa48:	a2 fd 47 64 f0       	mov    %al,0xf06447fd
f010aa4d:	b8 4a b3 10 f0       	mov    $0xf010b34a,%eax
f010aa52:	c1 e8 10             	shr    $0x10,%eax
f010aa55:	66 a3 fe 47 64 f0    	mov    %ax,0xf06447fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010aa5b:	b8 50 b3 10 f0       	mov    $0xf010b350,%eax
f010aa60:	66 a3 00 48 64 f0    	mov    %ax,0xf0644800
f010aa66:	66 c7 05 02 48 64 f0 	movw   $0x8,0xf0644802
f010aa6d:	08 00 
f010aa6f:	a0 04 48 64 f0       	mov    0xf0644804,%al
f010aa74:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa77:	a2 04 48 64 f0       	mov    %al,0xf0644804
f010aa7c:	a0 04 48 64 f0       	mov    0xf0644804,%al
f010aa81:	83 e0 1f             	and    $0x1f,%eax
f010aa84:	a2 04 48 64 f0       	mov    %al,0xf0644804
f010aa89:	a0 05 48 64 f0       	mov    0xf0644805,%al
f010aa8e:	83 e0 f0             	and    $0xfffffff0,%eax
f010aa91:	83 c8 0e             	or     $0xe,%eax
f010aa94:	a2 05 48 64 f0       	mov    %al,0xf0644805
f010aa99:	a0 05 48 64 f0       	mov    0xf0644805,%al
f010aa9e:	83 e0 ef             	and    $0xffffffef,%eax
f010aaa1:	a2 05 48 64 f0       	mov    %al,0xf0644805
f010aaa6:	a0 05 48 64 f0       	mov    0xf0644805,%al
f010aaab:	83 c8 60             	or     $0x60,%eax
f010aaae:	a2 05 48 64 f0       	mov    %al,0xf0644805
f010aab3:	a0 05 48 64 f0       	mov    0xf0644805,%al
f010aab8:	83 c8 80             	or     $0xffffff80,%eax
f010aabb:	a2 05 48 64 f0       	mov    %al,0xf0644805
f010aac0:	b8 50 b3 10 f0       	mov    $0xf010b350,%eax
f010aac5:	c1 e8 10             	shr    $0x10,%eax
f010aac8:	66 a3 06 48 64 f0    	mov    %ax,0xf0644806
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010aace:	b8 56 b3 10 f0       	mov    $0xf010b356,%eax
f010aad3:	66 a3 08 48 64 f0    	mov    %ax,0xf0644808
f010aad9:	66 c7 05 0a 48 64 f0 	movw   $0x8,0xf064480a
f010aae0:	08 00 
f010aae2:	a0 0c 48 64 f0       	mov    0xf064480c,%al
f010aae7:	83 e0 e0             	and    $0xffffffe0,%eax
f010aaea:	a2 0c 48 64 f0       	mov    %al,0xf064480c
f010aaef:	a0 0c 48 64 f0       	mov    0xf064480c,%al
f010aaf4:	83 e0 1f             	and    $0x1f,%eax
f010aaf7:	a2 0c 48 64 f0       	mov    %al,0xf064480c
f010aafc:	a0 0d 48 64 f0       	mov    0xf064480d,%al
f010ab01:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab04:	83 c8 0e             	or     $0xe,%eax
f010ab07:	a2 0d 48 64 f0       	mov    %al,0xf064480d
f010ab0c:	a0 0d 48 64 f0       	mov    0xf064480d,%al
f010ab11:	83 e0 ef             	and    $0xffffffef,%eax
f010ab14:	a2 0d 48 64 f0       	mov    %al,0xf064480d
f010ab19:	a0 0d 48 64 f0       	mov    0xf064480d,%al
f010ab1e:	83 c8 60             	or     $0x60,%eax
f010ab21:	a2 0d 48 64 f0       	mov    %al,0xf064480d
f010ab26:	a0 0d 48 64 f0       	mov    0xf064480d,%al
f010ab2b:	83 c8 80             	or     $0xffffff80,%eax
f010ab2e:	a2 0d 48 64 f0       	mov    %al,0xf064480d
f010ab33:	b8 56 b3 10 f0       	mov    $0xf010b356,%eax
f010ab38:	c1 e8 10             	shr    $0x10,%eax
f010ab3b:	66 a3 0e 48 64 f0    	mov    %ax,0xf064480e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010ab41:	b8 5c b3 10 f0       	mov    $0xf010b35c,%eax
f010ab46:	66 a3 10 48 64 f0    	mov    %ax,0xf0644810
f010ab4c:	66 c7 05 12 48 64 f0 	movw   $0x8,0xf0644812
f010ab53:	08 00 
f010ab55:	a0 14 48 64 f0       	mov    0xf0644814,%al
f010ab5a:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab5d:	a2 14 48 64 f0       	mov    %al,0xf0644814
f010ab62:	a0 14 48 64 f0       	mov    0xf0644814,%al
f010ab67:	83 e0 1f             	and    $0x1f,%eax
f010ab6a:	a2 14 48 64 f0       	mov    %al,0xf0644814
f010ab6f:	a0 15 48 64 f0       	mov    0xf0644815,%al
f010ab74:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab77:	83 c8 0e             	or     $0xe,%eax
f010ab7a:	a2 15 48 64 f0       	mov    %al,0xf0644815
f010ab7f:	a0 15 48 64 f0       	mov    0xf0644815,%al
f010ab84:	83 e0 ef             	and    $0xffffffef,%eax
f010ab87:	a2 15 48 64 f0       	mov    %al,0xf0644815
f010ab8c:	a0 15 48 64 f0       	mov    0xf0644815,%al
f010ab91:	83 c8 60             	or     $0x60,%eax
f010ab94:	a2 15 48 64 f0       	mov    %al,0xf0644815
f010ab99:	a0 15 48 64 f0       	mov    0xf0644815,%al
f010ab9e:	83 c8 80             	or     $0xffffff80,%eax
f010aba1:	a2 15 48 64 f0       	mov    %al,0xf0644815
f010aba6:	b8 5c b3 10 f0       	mov    $0xf010b35c,%eax
f010abab:	c1 e8 10             	shr    $0x10,%eax
f010abae:	66 a3 16 48 64 f0    	mov    %ax,0xf0644816
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010abb4:	b8 62 b3 10 f0       	mov    $0xf010b362,%eax
f010abb9:	66 a3 18 48 64 f0    	mov    %ax,0xf0644818
f010abbf:	66 c7 05 1a 48 64 f0 	movw   $0x8,0xf064481a
f010abc6:	08 00 
f010abc8:	a0 1c 48 64 f0       	mov    0xf064481c,%al
f010abcd:	83 e0 e0             	and    $0xffffffe0,%eax
f010abd0:	a2 1c 48 64 f0       	mov    %al,0xf064481c
f010abd5:	a0 1c 48 64 f0       	mov    0xf064481c,%al
f010abda:	83 e0 1f             	and    $0x1f,%eax
f010abdd:	a2 1c 48 64 f0       	mov    %al,0xf064481c
f010abe2:	a0 1d 48 64 f0       	mov    0xf064481d,%al
f010abe7:	83 e0 f0             	and    $0xfffffff0,%eax
f010abea:	83 c8 0e             	or     $0xe,%eax
f010abed:	a2 1d 48 64 f0       	mov    %al,0xf064481d
f010abf2:	a0 1d 48 64 f0       	mov    0xf064481d,%al
f010abf7:	83 e0 ef             	and    $0xffffffef,%eax
f010abfa:	a2 1d 48 64 f0       	mov    %al,0xf064481d
f010abff:	a0 1d 48 64 f0       	mov    0xf064481d,%al
f010ac04:	83 c8 60             	or     $0x60,%eax
f010ac07:	a2 1d 48 64 f0       	mov    %al,0xf064481d
f010ac0c:	a0 1d 48 64 f0       	mov    0xf064481d,%al
f010ac11:	83 c8 80             	or     $0xffffff80,%eax
f010ac14:	a2 1d 48 64 f0       	mov    %al,0xf064481d
f010ac19:	b8 62 b3 10 f0       	mov    $0xf010b362,%eax
f010ac1e:	c1 e8 10             	shr    $0x10,%eax
f010ac21:	66 a3 1e 48 64 f0    	mov    %ax,0xf064481e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010ac27:	c7 05 a4 4e 64 f0 00 	movl   $0xefc00000,0xf0644ea4
f010ac2e:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010ac31:	66 c7 05 a8 4e 64 f0 	movw   $0x10,0xf0644ea8
f010ac38:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010ac3a:	66 c7 05 28 c8 17 f0 	movw   $0x68,0xf017c828
f010ac41:	68 00 
f010ac43:	b8 a0 4e 64 f0       	mov    $0xf0644ea0,%eax
f010ac48:	66 a3 2a c8 17 f0    	mov    %ax,0xf017c82a
f010ac4e:	b8 a0 4e 64 f0       	mov    $0xf0644ea0,%eax
f010ac53:	c1 e8 10             	shr    $0x10,%eax
f010ac56:	a2 2c c8 17 f0       	mov    %al,0xf017c82c
f010ac5b:	a0 2d c8 17 f0       	mov    0xf017c82d,%al
f010ac60:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac63:	83 c8 09             	or     $0x9,%eax
f010ac66:	a2 2d c8 17 f0       	mov    %al,0xf017c82d
f010ac6b:	a0 2d c8 17 f0       	mov    0xf017c82d,%al
f010ac70:	83 c8 10             	or     $0x10,%eax
f010ac73:	a2 2d c8 17 f0       	mov    %al,0xf017c82d
f010ac78:	a0 2d c8 17 f0       	mov    0xf017c82d,%al
f010ac7d:	83 e0 9f             	and    $0xffffff9f,%eax
f010ac80:	a2 2d c8 17 f0       	mov    %al,0xf017c82d
f010ac85:	a0 2d c8 17 f0       	mov    0xf017c82d,%al
f010ac8a:	83 c8 80             	or     $0xffffff80,%eax
f010ac8d:	a2 2d c8 17 f0       	mov    %al,0xf017c82d
f010ac92:	a0 2e c8 17 f0       	mov    0xf017c82e,%al
f010ac97:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac9a:	a2 2e c8 17 f0       	mov    %al,0xf017c82e
f010ac9f:	a0 2e c8 17 f0       	mov    0xf017c82e,%al
f010aca4:	83 e0 ef             	and    $0xffffffef,%eax
f010aca7:	a2 2e c8 17 f0       	mov    %al,0xf017c82e
f010acac:	a0 2e c8 17 f0       	mov    0xf017c82e,%al
f010acb1:	83 e0 df             	and    $0xffffffdf,%eax
f010acb4:	a2 2e c8 17 f0       	mov    %al,0xf017c82e
f010acb9:	a0 2e c8 17 f0       	mov    0xf017c82e,%al
f010acbe:	83 c8 40             	or     $0x40,%eax
f010acc1:	a2 2e c8 17 f0       	mov    %al,0xf017c82e
f010acc6:	a0 2e c8 17 f0       	mov    0xf017c82e,%al
f010accb:	83 e0 7f             	and    $0x7f,%eax
f010acce:	a2 2e c8 17 f0       	mov    %al,0xf017c82e
f010acd3:	b8 a0 4e 64 f0       	mov    $0xf0644ea0,%eax
f010acd8:	c1 e8 18             	shr    $0x18,%eax
f010acdb:	a2 2f c8 17 f0       	mov    %al,0xf017c82f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010ace0:	a0 2d c8 17 f0       	mov    0xf017c82d,%al
f010ace5:	83 e0 ef             	and    $0xffffffef,%eax
f010ace8:	a2 2d c8 17 f0       	mov    %al,0xf017c82d
f010aced:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010acf3:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010acf7:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010acfa:	0f 01 1d 08 cc 17 f0 	lidtl  0xf017cc08
}
f010ad01:	90                   	nop
f010ad02:	c9                   	leave  
f010ad03:	c3                   	ret    

f010ad04 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010ad04:	55                   	push   %ebp
f010ad05:	89 e5                	mov    %esp,%ebp
f010ad07:	53                   	push   %ebx
f010ad08:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010ad0b:	83 ec 08             	sub    $0x8,%esp
f010ad0e:	ff 75 08             	pushl  0x8(%ebp)
f010ad11:	68 db e1 12 f0       	push   $0xf012e1db
f010ad16:	e8 12 5f ff ff       	call   f0100c2d <cprintf>
f010ad1b:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010ad1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad21:	83 ec 0c             	sub    $0xc,%esp
f010ad24:	50                   	push   %eax
f010ad25:	e8 fd 00 00 00       	call   f010ae27 <print_regs>
f010ad2a:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010ad2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad30:	8b 40 20             	mov    0x20(%eax),%eax
f010ad33:	0f b7 c0             	movzwl %ax,%eax
f010ad36:	83 ec 08             	sub    $0x8,%esp
f010ad39:	50                   	push   %eax
f010ad3a:	68 ed e1 12 f0       	push   $0xf012e1ed
f010ad3f:	e8 e9 5e ff ff       	call   f0100c2d <cprintf>
f010ad44:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010ad47:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad4a:	8b 40 24             	mov    0x24(%eax),%eax
f010ad4d:	0f b7 c0             	movzwl %ax,%eax
f010ad50:	83 ec 08             	sub    $0x8,%esp
f010ad53:	50                   	push   %eax
f010ad54:	68 00 e2 12 f0       	push   $0xf012e200
f010ad59:	e8 cf 5e ff ff       	call   f0100c2d <cprintf>
f010ad5e:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010ad61:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad64:	8b 58 28             	mov    0x28(%eax),%ebx
f010ad67:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6a:	8b 40 28             	mov    0x28(%eax),%eax
f010ad6d:	83 ec 0c             	sub    $0xc,%esp
f010ad70:	50                   	push   %eax
f010ad71:	e8 d0 ee ff ff       	call   f0109c46 <trapname>
f010ad76:	83 c4 10             	add    $0x10,%esp
f010ad79:	89 c2                	mov    %eax,%edx
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	8b 40 28             	mov    0x28(%eax),%eax
f010ad81:	53                   	push   %ebx
f010ad82:	52                   	push   %edx
f010ad83:	50                   	push   %eax
f010ad84:	68 13 e2 12 f0       	push   $0xf012e213
f010ad89:	e8 9f 5e ff ff       	call   f0100c2d <cprintf>
f010ad8e:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010ad91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad94:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad97:	83 ec 08             	sub    $0x8,%esp
f010ad9a:	50                   	push   %eax
f010ad9b:	68 2a e2 12 f0       	push   $0xf012e22a
f010ada0:	e8 88 5e ff ff       	call   f0100c2d <cprintf>
f010ada5:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010ada8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adab:	8b 40 30             	mov    0x30(%eax),%eax
f010adae:	83 ec 08             	sub    $0x8,%esp
f010adb1:	50                   	push   %eax
f010adb2:	68 39 e2 12 f0       	push   $0xf012e239
f010adb7:	e8 71 5e ff ff       	call   f0100c2d <cprintf>
f010adbc:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010adbf:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc2:	8b 40 34             	mov    0x34(%eax),%eax
f010adc5:	0f b7 c0             	movzwl %ax,%eax
f010adc8:	83 ec 08             	sub    $0x8,%esp
f010adcb:	50                   	push   %eax
f010adcc:	68 48 e2 12 f0       	push   $0xf012e248
f010add1:	e8 57 5e ff ff       	call   f0100c2d <cprintf>
f010add6:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010add9:	8b 45 08             	mov    0x8(%ebp),%eax
f010addc:	8b 40 38             	mov    0x38(%eax),%eax
f010addf:	83 ec 08             	sub    $0x8,%esp
f010ade2:	50                   	push   %eax
f010ade3:	68 5b e2 12 f0       	push   $0xf012e25b
f010ade8:	e8 40 5e ff ff       	call   f0100c2d <cprintf>
f010aded:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010adf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf3:	8b 40 3c             	mov    0x3c(%eax),%eax
f010adf6:	83 ec 08             	sub    $0x8,%esp
f010adf9:	50                   	push   %eax
f010adfa:	68 6a e2 12 f0       	push   $0xf012e26a
f010adff:	e8 29 5e ff ff       	call   f0100c2d <cprintf>
f010ae04:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010ae07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0a:	8b 40 40             	mov    0x40(%eax),%eax
f010ae0d:	0f b7 c0             	movzwl %ax,%eax
f010ae10:	83 ec 08             	sub    $0x8,%esp
f010ae13:	50                   	push   %eax
f010ae14:	68 79 e2 12 f0       	push   $0xf012e279
f010ae19:	e8 0f 5e ff ff       	call   f0100c2d <cprintf>
f010ae1e:	83 c4 10             	add    $0x10,%esp
}
f010ae21:	90                   	nop
f010ae22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ae25:	c9                   	leave  
f010ae26:	c3                   	ret    

f010ae27 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010ae27:	55                   	push   %ebp
f010ae28:	89 e5                	mov    %esp,%ebp
f010ae2a:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010ae2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae30:	8b 00                	mov    (%eax),%eax
f010ae32:	83 ec 08             	sub    $0x8,%esp
f010ae35:	50                   	push   %eax
f010ae36:	68 8c e2 12 f0       	push   $0xf012e28c
f010ae3b:	e8 ed 5d ff ff       	call   f0100c2d <cprintf>
f010ae40:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010ae43:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae46:	8b 40 04             	mov    0x4(%eax),%eax
f010ae49:	83 ec 08             	sub    $0x8,%esp
f010ae4c:	50                   	push   %eax
f010ae4d:	68 9b e2 12 f0       	push   $0xf012e29b
f010ae52:	e8 d6 5d ff ff       	call   f0100c2d <cprintf>
f010ae57:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010ae5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5d:	8b 40 08             	mov    0x8(%eax),%eax
f010ae60:	83 ec 08             	sub    $0x8,%esp
f010ae63:	50                   	push   %eax
f010ae64:	68 aa e2 12 f0       	push   $0xf012e2aa
f010ae69:	e8 bf 5d ff ff       	call   f0100c2d <cprintf>
f010ae6e:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010ae71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae74:	8b 40 0c             	mov    0xc(%eax),%eax
f010ae77:	83 ec 08             	sub    $0x8,%esp
f010ae7a:	50                   	push   %eax
f010ae7b:	68 b9 e2 12 f0       	push   $0xf012e2b9
f010ae80:	e8 a8 5d ff ff       	call   f0100c2d <cprintf>
f010ae85:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010ae88:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae8b:	8b 40 10             	mov    0x10(%eax),%eax
f010ae8e:	83 ec 08             	sub    $0x8,%esp
f010ae91:	50                   	push   %eax
f010ae92:	68 c8 e2 12 f0       	push   $0xf012e2c8
f010ae97:	e8 91 5d ff ff       	call   f0100c2d <cprintf>
f010ae9c:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010ae9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea2:	8b 40 14             	mov    0x14(%eax),%eax
f010aea5:	83 ec 08             	sub    $0x8,%esp
f010aea8:	50                   	push   %eax
f010aea9:	68 d7 e2 12 f0       	push   $0xf012e2d7
f010aeae:	e8 7a 5d ff ff       	call   f0100c2d <cprintf>
f010aeb3:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010aeb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb9:	8b 40 18             	mov    0x18(%eax),%eax
f010aebc:	83 ec 08             	sub    $0x8,%esp
f010aebf:	50                   	push   %eax
f010aec0:	68 e6 e2 12 f0       	push   $0xf012e2e6
f010aec5:	e8 63 5d ff ff       	call   f0100c2d <cprintf>
f010aeca:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010aecd:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed0:	8b 40 1c             	mov    0x1c(%eax),%eax
f010aed3:	83 ec 08             	sub    $0x8,%esp
f010aed6:	50                   	push   %eax
f010aed7:	68 f5 e2 12 f0       	push   $0xf012e2f5
f010aedc:	e8 4c 5d ff ff       	call   f0100c2d <cprintf>
f010aee1:	83 c4 10             	add    $0x10,%esp
}
f010aee4:	90                   	nop
f010aee5:	c9                   	leave  
f010aee6:	c3                   	ret    

f010aee7 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010aee7:	55                   	push   %ebp
f010aee8:	89 e5                	mov    %esp,%ebp
f010aeea:	57                   	push   %edi
f010aeeb:	56                   	push   %esi
f010aeec:	53                   	push   %ebx
f010aeed:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010aef0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef3:	8b 40 28             	mov    0x28(%eax),%eax
f010aef6:	83 f8 0e             	cmp    $0xe,%eax
f010aef9:	75 29                	jne    f010af24 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010aefb:	83 ec 0c             	sub    $0xc,%esp
f010aefe:	6a 01                	push   $0x1
f010af00:	e8 5a 18 00 00       	call   f010c75f <isPageReplacmentAlgorithmLRU>
f010af05:	83 c4 10             	add    $0x10,%esp
f010af08:	85 c0                	test   %eax,%eax
f010af0a:	74 05                	je     f010af11 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010af0c:	e8 bb a1 ff ff       	call   f01050cc <update_WS_time_stamps>
		}
		fault_handler(tf);
f010af11:	83 ec 0c             	sub    $0xc,%esp
f010af14:	ff 75 08             	pushl  0x8(%ebp)
f010af17:	e8 3b 02 00 00       	call   f010b157 <fault_handler>
f010af1c:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010af1f:	e9 a5 00 00 00       	jmp    f010afc9 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010af24:	8b 45 08             	mov    0x8(%ebp),%eax
f010af27:	8b 40 28             	mov    0x28(%eax),%eax
f010af2a:	83 f8 30             	cmp    $0x30,%eax
f010af2d:	75 42                	jne    f010af71 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010af2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af32:	8b 78 04             	mov    0x4(%eax),%edi
f010af35:	8b 45 08             	mov    0x8(%ebp),%eax
f010af38:	8b 30                	mov    (%eax),%esi
f010af3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3d:	8b 58 10             	mov    0x10(%eax),%ebx
f010af40:	8b 45 08             	mov    0x8(%ebp),%eax
f010af43:	8b 48 18             	mov    0x18(%eax),%ecx
f010af46:	8b 45 08             	mov    0x8(%ebp),%eax
f010af49:	8b 50 14             	mov    0x14(%eax),%edx
f010af4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4f:	8b 40 1c             	mov    0x1c(%eax),%eax
f010af52:	83 ec 08             	sub    $0x8,%esp
f010af55:	57                   	push   %edi
f010af56:	56                   	push   %esi
f010af57:	53                   	push   %ebx
f010af58:	51                   	push   %ecx
f010af59:	52                   	push   %edx
f010af5a:	50                   	push   %eax
f010af5b:	e8 4a 0f 00 00       	call   f010beaa <syscall>
f010af60:	83 c4 20             	add    $0x20,%esp
f010af63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010af66:	8b 45 08             	mov    0x8(%ebp),%eax
f010af69:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010af6c:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010af6f:	eb 58                	jmp    f010afc9 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010af71:	8b 45 08             	mov    0x8(%ebp),%eax
f010af74:	8b 40 28             	mov    0x28(%eax),%eax
f010af77:	83 f8 08             	cmp    $0x8,%eax
f010af7a:	75 17                	jne    f010af93 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010af7c:	83 ec 04             	sub    $0x4,%esp
f010af7f:	68 04 e3 12 f0       	push   $0xf012e304
f010af84:	68 e7 00 00 00       	push   $0xe7
f010af89:	68 13 e3 12 f0       	push   $0xf012e313
f010af8e:	e8 13 52 ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010af93:	8b 45 08             	mov    0x8(%ebp),%eax
f010af96:	8b 40 28             	mov    0x28(%eax),%eax
f010af99:	83 f8 20             	cmp    $0x20,%eax
f010af9c:	75 07                	jne    f010afa5 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010af9e:	e8 08 a1 ff ff       	call   f01050ab <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010afa3:	eb 24                	jmp    f010afc9 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010afa5:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa8:	8b 40 34             	mov    0x34(%eax),%eax
f010afab:	66 83 f8 08          	cmp    $0x8,%ax
f010afaf:	75 17                	jne    f010afc8 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010afb1:	83 ec 04             	sub    $0x4,%esp
f010afb4:	68 24 e3 12 f0       	push   $0xf012e324
f010afb9:	68 f4 00 00 00       	push   $0xf4
f010afbe:	68 13 e3 12 f0       	push   $0xf012e313
f010afc3:	e8 de 51 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010afc8:	90                   	nop
		}
	}
	return;
}
f010afc9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010afcc:	5b                   	pop    %ebx
f010afcd:	5e                   	pop    %esi
f010afce:	5f                   	pop    %edi
f010afcf:	5d                   	pop    %ebp
f010afd0:	c3                   	ret    

f010afd1 <trap>:

void trap(struct Trapframe *tf)
{
f010afd1:	55                   	push   %ebp
f010afd2:	89 e5                	mov    %esp,%ebp
f010afd4:	57                   	push   %edi
f010afd5:	56                   	push   %esi
f010afd6:	53                   	push   %ebx
f010afd7:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010afda:	e8 e7 88 ff ff       	call   f01038c6 <kclock_stop>

	int userTrap = 0;
f010afdf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010afe6:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe9:	8b 40 34             	mov    0x34(%eax),%eax
f010afec:	0f b7 c0             	movzwl %ax,%eax
f010afef:	83 e0 03             	and    $0x3,%eax
f010aff2:	83 f8 03             	cmp    $0x3,%eax
f010aff5:	75 49                	jne    f010b040 <trap+0x6f>
		assert(curenv);
f010aff7:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010affc:	85 c0                	test   %eax,%eax
f010affe:	75 19                	jne    f010b019 <trap+0x48>
f010b000:	68 3d e3 12 f0       	push   $0xf012e33d
f010b005:	68 44 e3 12 f0       	push   $0xf012e344
f010b00a:	68 04 01 00 00       	push   $0x104
f010b00f:	68 13 e3 12 f0       	push   $0xf012e313
f010b014:	e8 8d 51 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010b019:	8b 15 74 46 64 f0    	mov    0xf0644674,%edx
f010b01f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b022:	89 c3                	mov    %eax,%ebx
f010b024:	b8 11 00 00 00       	mov    $0x11,%eax
f010b029:	89 d7                	mov    %edx,%edi
f010b02b:	89 de                	mov    %ebx,%esi
f010b02d:	89 c1                	mov    %eax,%ecx
f010b02f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010b031:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b036:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010b039:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010b040:	8b 45 08             	mov    0x8(%ebp),%eax
f010b043:	8b 40 28             	mov    0x28(%eax),%eax
f010b046:	83 f8 20             	cmp    $0x20,%eax
f010b049:	75 40                	jne    f010b08b <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010b04b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b04f:	0f 84 a6 00 00 00    	je     f010b0fb <trap+0x12a>
		{
			assert(curenv);
f010b055:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b05a:	85 c0                	test   %eax,%eax
f010b05c:	75 19                	jne    f010b077 <trap+0xa6>
f010b05e:	68 3d e3 12 f0       	push   $0xf012e33d
f010b063:	68 44 e3 12 f0       	push   $0xf012e344
f010b068:	68 10 01 00 00       	push   $0x110
f010b06d:	68 13 e3 12 f0       	push   $0xf012e313
f010b072:	e8 2f 51 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010b077:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b07c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010b082:	42                   	inc    %edx
f010b083:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010b089:	eb 70                	jmp    f010b0fb <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010b08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08e:	8b 40 28             	mov    0x28(%eax),%eax
f010b091:	83 f8 0e             	cmp    $0xe,%eax
f010b094:	75 65                	jne    f010b0fb <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010b096:	a0 08 4f 64 f0       	mov    0xf0644f08,%al
f010b09b:	84 c0                	test   %al,%al
f010b09d:	74 5c                	je     f010b0fb <trap+0x12a>
			if (userTrap){
f010b09f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b0a3:	74 2c                	je     f010b0d1 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010b0a5:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b0aa:	8b 15 74 46 64 f0    	mov    0xf0644674,%edx
f010b0b0:	8b 52 30             	mov    0x30(%edx),%edx
f010b0b3:	89 d1                	mov    %edx,%ecx
f010b0b5:	8a 15 08 4f 64 f0    	mov    0xf0644f08,%dl
f010b0bb:	0f b6 d2             	movzbl %dl,%edx
f010b0be:	01 ca                	add    %ecx,%edx
f010b0c0:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010b0c3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b0c8:	83 ec 0c             	sub    $0xc,%esp
f010b0cb:	50                   	push   %eax
f010b0cc:	e8 5e d4 ff ff       	call   f010852f <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010b0d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d4:	8b 40 30             	mov    0x30(%eax),%eax
f010b0d7:	89 c2                	mov    %eax,%edx
f010b0d9:	a0 08 4f 64 f0       	mov    0xf0644f08,%al
f010b0de:	0f b6 c0             	movzbl %al,%eax
f010b0e1:	01 d0                	add    %edx,%eax
f010b0e3:	89 c2                	mov    %eax,%edx
f010b0e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e8:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010b0eb:	e8 01 88 ff ff       	call   f01038f1 <kclock_resume>
				env_pop_tf(tf);
f010b0f0:	83 ec 0c             	sub    $0xc,%esp
f010b0f3:	ff 75 08             	pushl  0x8(%ebp)
f010b0f6:	e8 99 d5 ff ff       	call   f0108694 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010b0fb:	83 ec 0c             	sub    $0xc,%esp
f010b0fe:	ff 75 08             	pushl  0x8(%ebp)
f010b101:	e8 e1 fd ff ff       	call   f010aee7 <trap_dispatch>
f010b106:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010b109:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b10d:	74 3d                	je     f010b14c <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010b10f:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b114:	85 c0                	test   %eax,%eax
f010b116:	74 0d                	je     f010b125 <trap+0x154>
f010b118:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b11d:	8b 40 54             	mov    0x54(%eax),%eax
f010b120:	83 f8 02             	cmp    $0x2,%eax
f010b123:	74 19                	je     f010b13e <trap+0x16d>
f010b125:	68 5c e3 12 f0       	push   $0xf012e35c
f010b12a:	68 44 e3 12 f0       	push   $0xf012e344
f010b12f:	68 25 01 00 00       	push   $0x125
f010b134:	68 13 e3 12 f0       	push   $0xf012e313
f010b139:	e8 68 50 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010b13e:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b143:	83 ec 0c             	sub    $0xc,%esp
f010b146:	50                   	push   %eax
f010b147:	e8 e3 d3 ff ff       	call   f010852f <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010b14c:	83 ec 0c             	sub    $0xc,%esp
f010b14f:	ff 75 08             	pushl  0x8(%ebp)
f010b152:	e8 3d d5 ff ff       	call   f0108694 <env_pop_tf>

f010b157 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010b157:	55                   	push   %ebp
f010b158:	89 e5                	mov    %esp,%ebp
f010b15a:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010b15d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010b164:	8b 45 08             	mov    0x8(%ebp),%eax
f010b167:	8b 40 34             	mov    0x34(%eax),%eax
f010b16a:	0f b7 c0             	movzwl %ax,%eax
f010b16d:	83 e0 03             	and    $0x3,%eax
f010b170:	83 f8 03             	cmp    $0x3,%eax
f010b173:	75 07                	jne    f010b17c <fault_handler+0x25>
		userTrap = 1;
f010b175:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010b17c:	0f 20 d0             	mov    %cr2,%eax
f010b17f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010b182:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010b185:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010b188:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b18c:	75 29                	jne    f010b1b7 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010b18e:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010b195:	77 40                	ja     f010b1d7 <fault_handler+0x80>
f010b197:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010b19e:	76 37                	jbe    f010b1d7 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010b1a0:	83 ec 04             	sub    $0x4,%esp
f010b1a3:	68 8c e3 12 f0       	push   $0xf012e38c
f010b1a8:	68 42 01 00 00       	push   $0x142
f010b1ad:	68 13 e3 12 f0       	push   $0xf012e313
f010b1b2:	e8 ef 4f ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010b1b7:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010b1be:	76 17                	jbe    f010b1d7 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010b1c0:	83 ec 04             	sub    $0x4,%esp
f010b1c3:	68 b0 e3 12 f0       	push   $0xf012e3b0
f010b1c8:	68 48 01 00 00       	push   $0x148
f010b1cd:	68 13 e3 12 f0       	push   $0xf012e313
f010b1d2:	e8 cf 4f ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010b1d7:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b1dc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010b1df:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b1e4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b1e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b1ea:	c1 ea 16             	shr    $0x16,%edx
f010b1ed:	c1 e2 02             	shl    $0x2,%edx
f010b1f0:	01 d0                	add    %edx,%eax
f010b1f2:	8b 00                	mov    (%eax),%eax
f010b1f4:	83 e0 01             	and    $0x1,%eax
f010b1f7:	85 c0                	test   %eax,%eax
f010b1f9:	75 28                	jne    f010b223 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010b1fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b1fe:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010b204:	8d 50 01             	lea    0x1(%eax),%edx
f010b207:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b20a:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010b210:	83 ec 08             	sub    $0x8,%esp
f010b213:	ff 75 ec             	pushl  -0x14(%ebp)
f010b216:	ff 75 e8             	pushl  -0x18(%ebp)
f010b219:	e8 26 16 00 00       	call   f010c844 <table_fault_handler>
f010b21e:	83 c4 10             	add    $0x10,%esp
f010b221:	eb 42                	jmp    f010b265 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010b223:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b226:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010b22c:	8d 50 01             	lea    0x1(%eax),%edx
f010b22f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b232:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010b238:	e8 e5 15 00 00       	call   f010c822 <isBufferingEnabled>
f010b23d:	84 c0                	test   %al,%al
f010b23f:	74 13                	je     f010b254 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010b241:	83 ec 08             	sub    $0x8,%esp
f010b244:	ff 75 ec             	pushl  -0x14(%ebp)
f010b247:	ff 75 e8             	pushl  -0x18(%ebp)
f010b24a:	e8 31 16 00 00       	call   f010c880 <__page_fault_handler_with_buffering>
f010b24f:	83 c4 10             	add    $0x10,%esp
f010b252:	eb 11                	jmp    f010b265 <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010b254:	83 ec 08             	sub    $0x8,%esp
f010b257:	ff 75 ec             	pushl  -0x14(%ebp)
f010b25a:	ff 75 e8             	pushl  -0x18(%ebp)
f010b25d:	e8 04 16 00 00       	call   f010c866 <page_fault_handler>
f010b262:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b265:	0f 20 d8             	mov    %cr3,%eax
f010b268:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b26b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b26e:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010b271:	90                   	nop
f010b272:	c9                   	leave  
f010b273:	c3                   	ret    

f010b274 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010b274:	6a 0e                	push   $0xe
f010b276:	e9 ed 00 00 00       	jmp    f010b368 <_alltraps>
f010b27b:	90                   	nop

f010b27c <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010b27c:	6a 00                	push   $0x0
f010b27e:	6a 30                	push   $0x30
f010b280:	e9 e3 00 00 00       	jmp    f010b368 <_alltraps>
f010b285:	90                   	nop

f010b286 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010b286:	6a 08                	push   $0x8
f010b288:	e9 db 00 00 00       	jmp    f010b368 <_alltraps>
f010b28d:	90                   	nop

f010b28e <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010b28e:	6a 00                	push   $0x0
f010b290:	6a 00                	push   $0x0
f010b292:	e9 d1 00 00 00       	jmp    f010b368 <_alltraps>
f010b297:	90                   	nop

f010b298 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010b298:	6a 00                	push   $0x0
f010b29a:	6a 01                	push   $0x1
f010b29c:	e9 c7 00 00 00       	jmp    f010b368 <_alltraps>
f010b2a1:	90                   	nop

f010b2a2 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010b2a2:	6a 00                	push   $0x0
f010b2a4:	6a 02                	push   $0x2
f010b2a6:	e9 bd 00 00 00       	jmp    f010b368 <_alltraps>
f010b2ab:	90                   	nop

f010b2ac <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010b2ac:	6a 00                	push   $0x0
f010b2ae:	6a 03                	push   $0x3
f010b2b0:	e9 b3 00 00 00       	jmp    f010b368 <_alltraps>
f010b2b5:	90                   	nop

f010b2b6 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010b2b6:	6a 00                	push   $0x0
f010b2b8:	6a 04                	push   $0x4
f010b2ba:	e9 a9 00 00 00       	jmp    f010b368 <_alltraps>
f010b2bf:	90                   	nop

f010b2c0 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010b2c0:	6a 00                	push   $0x0
f010b2c2:	6a 05                	push   $0x5
f010b2c4:	e9 9f 00 00 00       	jmp    f010b368 <_alltraps>
f010b2c9:	90                   	nop

f010b2ca <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010b2ca:	6a 00                	push   $0x0
f010b2cc:	6a 06                	push   $0x6
f010b2ce:	e9 95 00 00 00       	jmp    f010b368 <_alltraps>
f010b2d3:	90                   	nop

f010b2d4 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010b2d4:	6a 00                	push   $0x0
f010b2d6:	6a 07                	push   $0x7
f010b2d8:	e9 8b 00 00 00       	jmp    f010b368 <_alltraps>
f010b2dd:	90                   	nop

f010b2de <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010b2de:	6a 0a                	push   $0xa
f010b2e0:	e9 83 00 00 00       	jmp    f010b368 <_alltraps>
f010b2e5:	90                   	nop

f010b2e6 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010b2e6:	6a 0b                	push   $0xb
f010b2e8:	eb 7e                	jmp    f010b368 <_alltraps>

f010b2ea <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010b2ea:	6a 0c                	push   $0xc
f010b2ec:	eb 7a                	jmp    f010b368 <_alltraps>

f010b2ee <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010b2ee:	6a 0d                	push   $0xd
f010b2f0:	eb 76                	jmp    f010b368 <_alltraps>

f010b2f2 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010b2f2:	6a 00                	push   $0x0
f010b2f4:	6a 10                	push   $0x10
f010b2f6:	eb 70                	jmp    f010b368 <_alltraps>

f010b2f8 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010b2f8:	6a 11                	push   $0x11
f010b2fa:	eb 6c                	jmp    f010b368 <_alltraps>

f010b2fc <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010b2fc:	6a 00                	push   $0x0
f010b2fe:	6a 12                	push   $0x12
f010b300:	eb 66                	jmp    f010b368 <_alltraps>

f010b302 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010b302:	6a 00                	push   $0x0
f010b304:	6a 13                	push   $0x13
f010b306:	eb 60                	jmp    f010b368 <_alltraps>

f010b308 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010b308:	6a 00                	push   $0x0
f010b30a:	6a 20                	push   $0x20
f010b30c:	eb 5a                	jmp    f010b368 <_alltraps>

f010b30e <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010b30e:	6a 00                	push   $0x0
f010b310:	6a 21                	push   $0x21
f010b312:	eb 54                	jmp    f010b368 <_alltraps>

f010b314 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010b314:	6a 00                	push   $0x0
f010b316:	6a 22                	push   $0x22
f010b318:	eb 4e                	jmp    f010b368 <_alltraps>

f010b31a <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010b31a:	6a 00                	push   $0x0
f010b31c:	6a 23                	push   $0x23
f010b31e:	eb 48                	jmp    f010b368 <_alltraps>

f010b320 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010b320:	6a 00                	push   $0x0
f010b322:	6a 24                	push   $0x24
f010b324:	eb 42                	jmp    f010b368 <_alltraps>

f010b326 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010b326:	6a 00                	push   $0x0
f010b328:	6a 25                	push   $0x25
f010b32a:	eb 3c                	jmp    f010b368 <_alltraps>

f010b32c <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010b32c:	6a 00                	push   $0x0
f010b32e:	6a 26                	push   $0x26
f010b330:	eb 36                	jmp    f010b368 <_alltraps>

f010b332 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010b332:	6a 00                	push   $0x0
f010b334:	6a 27                	push   $0x27
f010b336:	eb 30                	jmp    f010b368 <_alltraps>

f010b338 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010b338:	6a 00                	push   $0x0
f010b33a:	6a 28                	push   $0x28
f010b33c:	eb 2a                	jmp    f010b368 <_alltraps>

f010b33e <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010b33e:	6a 00                	push   $0x0
f010b340:	6a 29                	push   $0x29
f010b342:	eb 24                	jmp    f010b368 <_alltraps>

f010b344 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010b344:	6a 00                	push   $0x0
f010b346:	6a 2a                	push   $0x2a
f010b348:	eb 1e                	jmp    f010b368 <_alltraps>

f010b34a <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010b34a:	6a 00                	push   $0x0
f010b34c:	6a 2b                	push   $0x2b
f010b34e:	eb 18                	jmp    f010b368 <_alltraps>

f010b350 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010b350:	6a 00                	push   $0x0
f010b352:	6a 2c                	push   $0x2c
f010b354:	eb 12                	jmp    f010b368 <_alltraps>

f010b356 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010b356:	6a 00                	push   $0x0
f010b358:	6a 2d                	push   $0x2d
f010b35a:	eb 0c                	jmp    f010b368 <_alltraps>

f010b35c <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010b35c:	6a 00                	push   $0x0
f010b35e:	6a 2e                	push   $0x2e
f010b360:	eb 06                	jmp    f010b368 <_alltraps>

f010b362 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010b362:	6a 00                	push   $0x0
f010b364:	6a 2f                	push   $0x2f
f010b366:	eb 00                	jmp    f010b368 <_alltraps>

f010b368 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010b368:	1e                   	push   %ds
push %es
f010b369:	06                   	push   %es
pushal
f010b36a:	60                   	pusha  

mov $(GD_KD), %ax
f010b36b:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010b36f:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010b371:	8e c0                	mov    %eax,%es

push %esp
f010b373:	54                   	push   %esp

call trap
f010b374:	e8 58 fc ff ff       	call   f010afd1 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010b379:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010b37a:	61                   	popa   
pop %es
f010b37b:	07                   	pop    %es
pop %ds
f010b37c:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010b37d:	83 c4 08             	add    $0x8,%esp

iret
f010b380:	cf                   	iret   

f010b381 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010b381:	55                   	push   %ebp
f010b382:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010b384:	8b 45 08             	mov    0x8(%ebp),%eax
f010b387:	8b 15 f0 43 6d f0    	mov    0xf06d43f0,%edx
f010b38d:	29 d0                	sub    %edx,%eax
f010b38f:	c1 f8 03             	sar    $0x3,%eax
f010b392:	89 c2                	mov    %eax,%edx
f010b394:	89 d0                	mov    %edx,%eax
f010b396:	c1 e0 02             	shl    $0x2,%eax
f010b399:	01 d0                	add    %edx,%eax
f010b39b:	c1 e0 02             	shl    $0x2,%eax
f010b39e:	01 d0                	add    %edx,%eax
f010b3a0:	c1 e0 02             	shl    $0x2,%eax
f010b3a3:	01 d0                	add    %edx,%eax
f010b3a5:	89 c1                	mov    %eax,%ecx
f010b3a7:	c1 e1 08             	shl    $0x8,%ecx
f010b3aa:	01 c8                	add    %ecx,%eax
f010b3ac:	89 c1                	mov    %eax,%ecx
f010b3ae:	c1 e1 10             	shl    $0x10,%ecx
f010b3b1:	01 c8                	add    %ecx,%eax
f010b3b3:	01 c0                	add    %eax,%eax
f010b3b5:	01 d0                	add    %edx,%eax
}
f010b3b7:	5d                   	pop    %ebp
f010b3b8:	c3                   	ret    

f010b3b9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010b3b9:	55                   	push   %ebp
f010b3ba:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010b3bc:	ff 75 08             	pushl  0x8(%ebp)
f010b3bf:	e8 bd ff ff ff       	call   f010b381 <to_frame_number>
f010b3c4:	83 c4 04             	add    $0x4,%esp
f010b3c7:	c1 e0 0c             	shl    $0xc,%eax
}
f010b3ca:	c9                   	leave  
f010b3cb:	c3                   	ret    

f010b3cc <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010b3cc:	55                   	push   %ebp
f010b3cd:	89 e5                	mov    %esp,%ebp
f010b3cf:	83 ec 18             	sub    $0x18,%esp
f010b3d2:	8b 45 10             	mov    0x10(%ebp),%eax
f010b3d5:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010b3d8:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010b3dc:	74 26                	je     f010b404 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010b3de:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b3e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b3e6:	8b 15 74 46 64 f0    	mov    0xf0644674,%edx
f010b3ec:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010b3f2:	83 ec 04             	sub    $0x4,%esp
f010b3f5:	50                   	push   %eax
f010b3f6:	52                   	push   %edx
f010b3f7:	68 70 e5 12 f0       	push   $0xf012e570
f010b3fc:	e8 2c 58 ff ff       	call   f0100c2d <cprintf>
f010b401:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010b404:	83 ec 04             	sub    $0x4,%esp
f010b407:	ff 75 08             	pushl  0x8(%ebp)
f010b40a:	ff 75 0c             	pushl  0xc(%ebp)
f010b40d:	68 79 e5 12 f0       	push   $0xf012e579
f010b412:	e8 16 58 ff ff       	call   f0100c2d <cprintf>
f010b417:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010b41a:	90                   	nop
f010b41b:	c9                   	leave  
f010b41c:	c3                   	ret    

f010b41d <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010b41d:	55                   	push   %ebp
f010b41e:	89 e5                	mov    %esp,%ebp
f010b420:	83 ec 18             	sub    $0x18,%esp
f010b423:	8b 45 08             	mov    0x8(%ebp),%eax
f010b426:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010b429:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010b42d:	83 ec 08             	sub    $0x8,%esp
f010b430:	50                   	push   %eax
f010b431:	68 7e e5 12 f0       	push   $0xf012e57e
f010b436:	e8 f2 57 ff ff       	call   f0100c2d <cprintf>
f010b43b:	83 c4 10             	add    $0x10,%esp
}
f010b43e:	90                   	nop
f010b43f:	c9                   	leave  
f010b440:	c3                   	ret    

f010b441 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010b441:	55                   	push   %ebp
f010b442:	89 e5                	mov    %esp,%ebp
f010b444:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010b447:	e8 1b 56 ff ff       	call   f0100a67 <cons_getc2>
f010b44c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010b44f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010b452:	c9                   	leave  
f010b453:	c3                   	ret    

f010b454 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010b454:	55                   	push   %ebp
f010b455:	89 e5                	mov    %esp,%ebp
f010b457:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010b45a:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b45f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010b462:	83 ec 0c             	sub    $0xc,%esp
f010b465:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010b468:	50                   	push   %eax
f010b469:	e8 54 ab ff ff       	call   f0105fc2 <allocate_frame>
f010b46e:	83 c4 10             	add    $0x10,%esp
f010b471:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010b474:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010b478:	75 08                	jne    f010b482 <__sys_allocate_page+0x2e>
		return r ;
f010b47a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b47d:	e9 d0 00 00 00       	jmp    f010b552 <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010b482:	8b 45 08             	mov    0x8(%ebp),%eax
f010b485:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010b48a:	77 0c                	ja     f010b498 <__sys_allocate_page+0x44>
f010b48c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b48f:	25 ff 0f 00 00       	and    $0xfff,%eax
f010b494:	85 c0                	test   %eax,%eax
f010b496:	74 0a                	je     f010b4a2 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010b498:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010b49d:	e9 b0 00 00 00       	jmp    f010b552 <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010b4a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4a5:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010b4aa:	83 f8 04             	cmp    $0x4,%eax
f010b4ad:	74 0a                	je     f010b4b9 <__sys_allocate_page+0x65>
		return E_INVAL;
f010b4af:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010b4b4:	e9 99 00 00 00       	jmp    f010b552 <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010b4b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b4bc:	83 ec 0c             	sub    $0xc,%esp
f010b4bf:	50                   	push   %eax
f010b4c0:	e8 f4 fe ff ff       	call   f010b3b9 <to_physical_address>
f010b4c5:	83 c4 10             	add    $0x10,%esp
f010b4c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010b4cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b4ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b4d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b4d4:	c1 e8 0c             	shr    $0xc,%eax
f010b4d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010b4da:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f010b4df:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b4e2:	72 17                	jb     f010b4fb <__sys_allocate_page+0xa7>
f010b4e4:	ff 75 e8             	pushl  -0x18(%ebp)
f010b4e7:	68 84 e5 12 f0       	push   $0xf012e584
f010b4ec:	68 8c 00 00 00       	push   $0x8c
f010b4f1:	68 b3 e5 12 f0       	push   $0xf012e5b3
f010b4f6:	e8 ab 4c ff ff       	call   f01001a6 <_panic>
f010b4fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b4fe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010b503:	83 ec 04             	sub    $0x4,%esp
f010b506:	68 00 10 00 00       	push   $0x1000
f010b50b:	6a 00                	push   $0x0
f010b50d:	50                   	push   %eax
f010b50e:	e8 06 e3 01 00       	call   f0129819 <memset>
f010b513:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010b516:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b519:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010b51c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b51f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b522:	ff 75 0c             	pushl  0xc(%ebp)
f010b525:	51                   	push   %ecx
f010b526:	52                   	push   %edx
f010b527:	50                   	push   %eax
f010b528:	e8 2d ae ff ff       	call   f010635a <map_frame>
f010b52d:	83 c4 10             	add    $0x10,%esp
f010b530:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010b533:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010b537:	75 14                	jne    f010b54d <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010b539:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b53c:	83 ec 0c             	sub    $0xc,%esp
f010b53f:	50                   	push   %eax
f010b540:	e8 0c ac ff ff       	call   f0106151 <decrement_references>
f010b545:	83 c4 10             	add    $0x10,%esp
		return r;
f010b548:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b54b:	eb 05                	jmp    f010b552 <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010b54d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b552:	c9                   	leave  
f010b553:	c3                   	ret    

f010b554 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010b554:	55                   	push   %ebp
f010b555:	89 e5                	mov    %esp,%ebp
f010b557:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010b55a:	83 ec 04             	sub    $0x4,%esp
f010b55d:	68 c7 e5 12 f0       	push   $0xf012e5c7
f010b562:	68 b3 00 00 00       	push   $0xb3
f010b567:	68 b3 e5 12 f0       	push   $0xf012e5b3
f010b56c:	e8 35 4c ff ff       	call   f01001a6 <_panic>

f010b571 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010b571:	55                   	push   %ebp
f010b572:	89 e5                	mov    %esp,%ebp
f010b574:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010b577:	83 ec 04             	sub    $0x4,%esp
f010b57a:	68 e8 e5 12 f0       	push   $0xf012e5e8
f010b57f:	68 c3 00 00 00       	push   $0xc3
f010b584:	68 b3 e5 12 f0       	push   $0xf012e5b3
f010b589:	e8 18 4c ff ff       	call   f01001a6 <_panic>

f010b58e <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010b58e:	55                   	push   %ebp
f010b58f:	89 e5                	mov    %esp,%ebp
f010b591:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010b594:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b599:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b59c:	83 ec 04             	sub    $0x4,%esp
f010b59f:	ff 75 0c             	pushl  0xc(%ebp)
f010b5a2:	ff 75 08             	pushl  0x8(%ebp)
f010b5a5:	50                   	push   %eax
f010b5a6:	e8 e6 c1 ff ff       	call   f0107791 <calculate_required_frames>
f010b5ab:	83 c4 10             	add    $0x10,%esp
}
f010b5ae:	c9                   	leave  
f010b5af:	c3                   	ret    

f010b5b0 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010b5b0:	55                   	push   %ebp
f010b5b1:	89 e5                	mov    %esp,%ebp
f010b5b3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010b5b6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b5b9:	83 ec 0c             	sub    $0xc,%esp
f010b5bc:	50                   	push   %eax
f010b5bd:	e8 08 b0 ff ff       	call   f01065ca <calculate_available_frames>
f010b5c2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010b5c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b5c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b5cb:	01 d0                	add    %edx,%eax
}
f010b5cd:	c9                   	leave  
f010b5ce:	c3                   	ret    

f010b5cf <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010b5cf:	55                   	push   %ebp
f010b5d0:	89 e5                	mov    %esp,%ebp
f010b5d2:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010b5d5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b5d8:	83 ec 0c             	sub    $0xc,%esp
f010b5db:	50                   	push   %eax
f010b5dc:	e8 e9 af ff ff       	call   f01065ca <calculate_available_frames>
f010b5e1:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010b5e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010b5e7:	c9                   	leave  
f010b5e8:	c3                   	ret    

f010b5e9 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010b5e9:	55                   	push   %ebp
f010b5ea:	89 e5                	mov    %esp,%ebp
f010b5ec:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010b5ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b5f2:	83 ec 0c             	sub    $0xc,%esp
f010b5f5:	50                   	push   %eax
f010b5f6:	e8 cf af ff ff       	call   f01065ca <calculate_available_frames>
f010b5fb:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010b5fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010b601:	c9                   	leave  
f010b602:	c3                   	ret    

f010b603 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010b603:	55                   	push   %ebp
f010b604:	89 e5                	mov    %esp,%ebp
f010b606:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010b609:	83 ec 0c             	sub    $0xc,%esp
f010b60c:	ff 75 08             	pushl  0x8(%ebp)
f010b60f:	e8 3b cf 01 00       	call   f012854f <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010b614:	83 c4 10             	add    $0x10,%esp
}
f010b617:	c9                   	leave  
f010b618:	c3                   	ret    

f010b619 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010b619:	55                   	push   %ebp
f010b61a:	89 e5                	mov    %esp,%ebp
f010b61c:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010b61f:	e8 83 ce 01 00       	call   f01284a7 <scarce_memory>
}
f010b624:	90                   	nop
f010b625:	c9                   	leave  
f010b626:	c3                   	ret    

f010b627 <sys_clearFFL>:

void sys_clearFFL()
{
f010b627:	55                   	push   %ebp
f010b628:	89 e5                	mov    %esp,%ebp
f010b62a:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010b62d:	a1 c4 43 6d f0       	mov    0xf06d43c4,%eax
f010b632:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010b635:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010b63c:	eb 12                	jmp    f010b650 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010b63e:	83 ec 0c             	sub    $0xc,%esp
f010b641:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010b644:	50                   	push   %eax
f010b645:	e8 78 a9 ff ff       	call   f0105fc2 <allocate_frame>
f010b64a:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010b64d:	ff 45 f4             	incl   -0xc(%ebp)
f010b650:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b653:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010b656:	7c e6                	jl     f010b63e <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010b658:	90                   	nop
f010b659:	c9                   	leave  
f010b65a:	c3                   	ret    

f010b65b <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010b65b:	55                   	push   %ebp
f010b65c:	89 e5                	mov    %esp,%ebp
f010b65e:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010b661:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b666:	83 ec 0c             	sub    $0xc,%esp
f010b669:	50                   	push   %eax
f010b66a:	e8 64 7d ff ff       	call   f01033d3 <pf_calculate_allocated_pages>
f010b66f:	83 c4 10             	add    $0x10,%esp
}
f010b672:	c9                   	leave  
f010b673:	c3                   	ret    

f010b674 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010b674:	55                   	push   %ebp
f010b675:	89 e5                	mov    %esp,%ebp
f010b677:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010b67a:	e8 a3 11 00 00       	call   f010c822 <isBufferingEnabled>
f010b67f:	84 c0                	test   %al,%al
f010b681:	74 19                	je     f010b69c <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010b683:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b688:	83 ec 04             	sub    $0x4,%esp
f010b68b:	ff 75 0c             	pushl  0xc(%ebp)
f010b68e:	ff 75 08             	pushl  0x8(%ebp)
f010b691:	50                   	push   %eax
f010b692:	e8 48 c1 ff ff       	call   f01077df <__free_user_mem_with_buffering>
f010b697:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010b69a:	eb 18                	jmp    f010b6b4 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010b69c:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b6a1:	83 ec 04             	sub    $0x4,%esp
f010b6a4:	ff 75 0c             	pushl  0xc(%ebp)
f010b6a7:	ff 75 08             	pushl  0x8(%ebp)
f010b6aa:	50                   	push   %eax
f010b6ab:	e8 15 c1 ff ff       	call   f01077c5 <free_user_mem>
f010b6b0:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010b6b3:	90                   	nop
}
f010b6b4:	c9                   	leave  
f010b6b5:	c3                   	ret    

f010b6b6 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010b6b6:	55                   	push   %ebp
f010b6b7:	89 e5                	mov    %esp,%ebp
f010b6b9:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010b6bc:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b6c1:	83 ec 04             	sub    $0x4,%esp
f010b6c4:	ff 75 0c             	pushl  0xc(%ebp)
f010b6c7:	ff 75 08             	pushl  0x8(%ebp)
f010b6ca:	50                   	push   %eax
f010b6cb:	e8 db c0 ff ff       	call   f01077ab <allocate_user_mem>
f010b6d0:	83 c4 10             	add    $0x10,%esp
	return;
f010b6d3:	90                   	nop
}
f010b6d4:	c9                   	leave  
f010b6d5:	c3                   	ret    

f010b6d6 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010b6d6:	55                   	push   %ebp
f010b6d7:	89 e5                	mov    %esp,%ebp
f010b6d9:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010b6dc:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b6e1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b6e4:	ff 75 10             	pushl  0x10(%ebp)
f010b6e7:	ff 75 0c             	pushl  0xc(%ebp)
f010b6ea:	ff 75 08             	pushl  0x8(%ebp)
f010b6ed:	50                   	push   %eax
f010b6ee:	e8 6a c0 ff ff       	call   f010775d <allocate_chunk>
f010b6f3:	83 c4 10             	add    $0x10,%esp
	return;
f010b6f6:	90                   	nop
}
f010b6f7:	c9                   	leave  
f010b6f8:	c3                   	ret    

f010b6f9 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010b6f9:	55                   	push   %ebp
f010b6fa:	89 e5                	mov    %esp,%ebp
f010b6fc:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010b6ff:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b704:	ff 75 10             	pushl  0x10(%ebp)
f010b707:	ff 75 0c             	pushl  0xc(%ebp)
f010b70a:	ff 75 08             	pushl  0x8(%ebp)
f010b70d:	50                   	push   %eax
f010b70e:	e8 e9 c0 ff ff       	call   f01077fc <move_user_mem>
f010b713:	83 c4 10             	add    $0x10,%esp
	return;
f010b716:	90                   	nop
}
f010b717:	c9                   	leave  
f010b718:	c3                   	ret    

f010b719 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010b719:	55                   	push   %ebp
f010b71a:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010b71c:	a1 cc 43 6d f0       	mov    0xf06d43cc,%eax
}
f010b721:	5d                   	pop    %ebp
f010b722:	c3                   	ret    

f010b723 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010b723:	55                   	push   %ebp
f010b724:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010b726:	8b 45 08             	mov    0x8(%ebp),%eax
f010b729:	a3 cc 43 6d f0       	mov    %eax,0xf06d43cc
}
f010b72e:	90                   	nop
f010b72f:	5d                   	pop    %ebp
f010b730:	c3                   	ret    

f010b731 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010b731:	55                   	push   %ebp
f010b732:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010b734:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b739:	8b 15 74 46 64 f0    	mov    0xf0644674,%edx
f010b73f:	8b 52 38             	mov    0x38(%edx),%edx
f010b742:	80 e6 fd             	and    $0xfd,%dh
f010b745:	89 50 38             	mov    %edx,0x38(%eax)
}
f010b748:	90                   	nop
f010b749:	5d                   	pop    %ebp
f010b74a:	c3                   	ret    

f010b74b <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010b74b:	55                   	push   %ebp
f010b74c:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010b74e:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b753:	8b 15 74 46 64 f0    	mov    0xf0644674,%edx
f010b759:	8b 52 38             	mov    0x38(%edx),%edx
f010b75c:	80 ce 02             	or     $0x2,%dh
f010b75f:	89 50 38             	mov    %edx,0x38(%eax)
}
f010b762:	90                   	nop
f010b763:	5d                   	pop    %ebp
f010b764:	c3                   	ret    

f010b765 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010b765:	55                   	push   %ebp
f010b766:	89 e5                	mov    %esp,%ebp
f010b768:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010b76b:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b770:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b773:	83 ec 04             	sub    $0x4,%esp
f010b776:	ff 75 0c             	pushl  0xc(%ebp)
f010b779:	ff 75 08             	pushl  0x8(%ebp)
f010b77c:	50                   	push   %eax
f010b77d:	e8 de 13 00 00       	call   f010cb60 <createSemaphore>
f010b782:	83 c4 10             	add    $0x10,%esp
}
f010b785:	c9                   	leave  
f010b786:	c3                   	ret    

f010b787 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010b787:	55                   	push   %ebp
f010b788:	89 e5                	mov    %esp,%ebp
f010b78a:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010b78d:	83 ec 08             	sub    $0x8,%esp
f010b790:	ff 75 0c             	pushl  0xc(%ebp)
f010b793:	ff 75 08             	pushl  0x8(%ebp)
f010b796:	e8 e2 13 00 00       	call   f010cb7d <waitSemaphore>
f010b79b:	83 c4 10             	add    $0x10,%esp
}
f010b79e:	90                   	nop
f010b79f:	c9                   	leave  
f010b7a0:	c3                   	ret    

f010b7a1 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010b7a1:	55                   	push   %ebp
f010b7a2:	89 e5                	mov    %esp,%ebp
f010b7a4:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010b7a7:	83 ec 08             	sub    $0x8,%esp
f010b7aa:	ff 75 0c             	pushl  0xc(%ebp)
f010b7ad:	ff 75 08             	pushl  0x8(%ebp)
f010b7b0:	e8 e5 13 00 00       	call   f010cb9a <signalSemaphore>
f010b7b5:	83 c4 10             	add    $0x10,%esp
}
f010b7b8:	90                   	nop
f010b7b9:	c9                   	leave  
f010b7ba:	c3                   	ret    

f010b7bb <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010b7bb:	55                   	push   %ebp
f010b7bc:	89 e5                	mov    %esp,%ebp
f010b7be:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010b7c1:	83 ec 08             	sub    $0x8,%esp
f010b7c4:	ff 75 0c             	pushl  0xc(%ebp)
f010b7c7:	ff 75 08             	pushl  0x8(%ebp)
f010b7ca:	e8 37 12 00 00       	call   f010ca06 <get_semaphore_object_ID>
f010b7cf:	83 c4 10             	add    $0x10,%esp
f010b7d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010b7d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b7d9:	78 06                	js     f010b7e1 <sys_getSemaphoreValue+0x26>
f010b7db:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010b7df:	7e 19                	jle    f010b7fa <sys_getSemaphoreValue+0x3f>
f010b7e1:	68 08 e6 12 f0       	push   $0xf012e608
f010b7e6:	68 2d e6 12 f0       	push   $0xf012e62d
f010b7eb:	68 4a 01 00 00       	push   $0x14a
f010b7f0:	68 b3 e5 12 f0       	push   $0xf012e5b3
f010b7f5:	e8 ac 49 ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010b7fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7fd:	89 d0                	mov    %edx,%eax
f010b7ff:	c1 e0 02             	shl    $0x2,%eax
f010b802:	01 d0                	add    %edx,%eax
f010b804:	01 c0                	add    %eax,%eax
f010b806:	01 d0                	add    %edx,%eax
f010b808:	01 c0                	add    %eax,%eax
f010b80a:	01 d0                	add    %edx,%eax
f010b80c:	c1 e0 02             	shl    $0x2,%eax
f010b80f:	05 14 20 6d f0       	add    $0xf06d2014,%eax
f010b814:	8b 00                	mov    (%eax),%eax
}
f010b816:	c9                   	leave  
f010b817:	c3                   	ret    

f010b818 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010b818:	55                   	push   %ebp
f010b819:	89 e5                	mov    %esp,%ebp
f010b81b:	83 ec 18             	sub    $0x18,%esp
f010b81e:	8b 45 10             	mov    0x10(%ebp),%eax
f010b821:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010b824:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010b828:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b82d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b830:	83 ec 0c             	sub    $0xc,%esp
f010b833:	ff 75 14             	pushl  0x14(%ebp)
f010b836:	52                   	push   %edx
f010b837:	ff 75 0c             	pushl  0xc(%ebp)
f010b83a:	ff 75 08             	pushl  0x8(%ebp)
f010b83d:	50                   	push   %eax
f010b83e:	e8 15 b3 ff ff       	call   f0106b58 <createSharedObject>
f010b843:	83 c4 20             	add    $0x20,%esp
}
f010b846:	c9                   	leave  
f010b847:	c3                   	ret    

f010b848 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010b848:	55                   	push   %ebp
f010b849:	89 e5                	mov    %esp,%ebp
f010b84b:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010b84e:	83 ec 08             	sub    $0x8,%esp
f010b851:	ff 75 0c             	pushl  0xc(%ebp)
f010b854:	ff 75 08             	pushl  0x8(%ebp)
f010b857:	e8 1f b3 ff ff       	call   f0106b7b <getSizeOfSharedObject>
f010b85c:	83 c4 10             	add    $0x10,%esp
}
f010b85f:	c9                   	leave  
f010b860:	c3                   	ret    

f010b861 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010b861:	55                   	push   %ebp
f010b862:	89 e5                	mov    %esp,%ebp
f010b864:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010b867:	83 ec 04             	sub    $0x4,%esp
f010b86a:	ff 75 10             	pushl  0x10(%ebp)
f010b86d:	ff 75 0c             	pushl  0xc(%ebp)
f010b870:	ff 75 08             	pushl  0x8(%ebp)
f010b873:	e8 20 b3 ff ff       	call   f0106b98 <getSharedObject>
f010b878:	83 c4 10             	add    $0x10,%esp
}
f010b87b:	c9                   	leave  
f010b87c:	c3                   	ret    

f010b87d <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010b87d:	55                   	push   %ebp
f010b87e:	89 e5                	mov    %esp,%ebp
f010b880:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010b883:	83 ec 08             	sub    $0x8,%esp
f010b886:	ff 75 0c             	pushl  0xc(%ebp)
f010b889:	ff 75 08             	pushl  0x8(%ebp)
f010b88c:	e8 24 b3 ff ff       	call   f0106bb5 <freeSharedObject>
f010b891:	83 c4 10             	add    $0x10,%esp
}
f010b894:	c9                   	leave  
f010b895:	c3                   	ret    

f010b896 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010b896:	55                   	push   %ebp
f010b897:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010b899:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010b89e:	5d                   	pop    %ebp
f010b89f:	c3                   	ret    

f010b8a0 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010b8a0:	55                   	push   %ebp
f010b8a1:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010b8a3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b8a8:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010b8ab:	5d                   	pop    %ebp
f010b8ac:	c3                   	ret    

f010b8ad <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010b8ad:	55                   	push   %ebp
f010b8ae:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010b8b0:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b8b5:	89 c2                	mov    %eax,%edx
f010b8b7:	a1 70 46 64 f0       	mov    0xf0644670,%eax
f010b8bc:	29 c2                	sub    %eax,%edx
f010b8be:	89 d0                	mov    %edx,%eax
f010b8c0:	c1 f8 03             	sar    $0x3,%eax
f010b8c3:	89 c2                	mov    %eax,%edx
f010b8c5:	89 d0                	mov    %edx,%eax
f010b8c7:	c1 e0 03             	shl    $0x3,%eax
f010b8ca:	01 d0                	add    %edx,%eax
f010b8cc:	c1 e0 03             	shl    $0x3,%eax
f010b8cf:	01 d0                	add    %edx,%eax
f010b8d1:	01 c0                	add    %eax,%eax
f010b8d3:	01 d0                	add    %edx,%eax
f010b8d5:	01 c0                	add    %eax,%eax
f010b8d7:	01 d0                	add    %edx,%eax
f010b8d9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b8e0:	01 c8                	add    %ecx,%eax
f010b8e2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b8e9:	01 c8                	add    %ecx,%eax
f010b8eb:	c1 e0 02             	shl    $0x2,%eax
f010b8ee:	01 d0                	add    %edx,%eax
f010b8f0:	01 c0                	add    %eax,%eax
f010b8f2:	01 d0                	add    %edx,%eax
f010b8f4:	01 c0                	add    %eax,%eax
f010b8f6:	01 d0                	add    %edx,%eax
f010b8f8:	c1 e0 02             	shl    $0x2,%eax
f010b8fb:	01 d0                	add    %edx,%eax
f010b8fd:	01 c0                	add    %eax,%eax
f010b8ff:	01 d0                	add    %edx,%eax
f010b901:	c1 e0 09             	shl    $0x9,%eax
f010b904:	29 d0                	sub    %edx,%eax
f010b906:	c1 e0 02             	shl    $0x2,%eax
f010b909:	01 d0                	add    %edx,%eax
}
f010b90b:	5d                   	pop    %ebp
f010b90c:	c3                   	ret    

f010b90d <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010b90d:	55                   	push   %ebp
f010b90e:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010b910:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b915:	8b 40 50             	mov    0x50(%eax),%eax
}
f010b918:	5d                   	pop    %ebp
f010b919:	c3                   	ret    

f010b91a <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010b91a:	55                   	push   %ebp
f010b91b:	89 e5                	mov    %esp,%ebp
f010b91d:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010b920:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b924:	75 0a                	jne    f010b930 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010b926:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b92b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010b92e:	eb 22                	jmp    f010b952 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010b930:	83 ec 04             	sub    $0x4,%esp
f010b933:	6a 00                	push   $0x0
f010b935:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010b938:	50                   	push   %eax
f010b939:	ff 75 08             	pushl  0x8(%ebp)
f010b93c:	e8 7e cc ff ff       	call   f01085bf <envid2env>
f010b941:	83 c4 10             	add    $0x10,%esp
f010b944:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b947:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b94b:	79 05                	jns    f010b952 <sys_destroy_env+0x38>
	{
		return r;
f010b94d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b950:	eb 5e                	jmp    f010b9b0 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010b952:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b955:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b95a:	39 c2                	cmp    %eax,%edx
f010b95c:	75 1b                	jne    f010b979 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010b95e:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b963:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b966:	83 ec 08             	sub    $0x8,%esp
f010b969:	50                   	push   %eax
f010b96a:	68 42 e6 12 f0       	push   $0xf012e642
f010b96f:	e8 b9 52 ff ff       	call   f0100c2d <cprintf>
f010b974:	83 c4 10             	add    $0x10,%esp
f010b977:	eb 20                	jmp    f010b999 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010b979:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b97c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010b97f:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010b984:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b987:	83 ec 04             	sub    $0x4,%esp
f010b98a:	52                   	push   %edx
f010b98b:	50                   	push   %eax
f010b98c:	68 5d e6 12 f0       	push   $0xf012e65d
f010b991:	e8 97 52 ff ff       	call   f0100c2d <cprintf>
f010b996:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010b999:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b99c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b99f:	83 ec 0c             	sub    $0xc,%esp
f010b9a2:	50                   	push   %eax
f010b9a3:	e8 30 93 ff ff       	call   f0104cd8 <sched_kill_env>
f010b9a8:	83 c4 10             	add    $0x10,%esp

	return 0;
f010b9ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b9b0:	c9                   	leave  
f010b9b1:	c3                   	ret    

f010b9b2 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010b9b2:	55                   	push   %ebp
f010b9b3:	89 e5                	mov    %esp,%ebp
f010b9b5:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010b9b8:	e8 e3 cb ff ff       	call   f01085a0 <env_exit>
	//env_run_cmd_prmpt();
}
f010b9bd:	90                   	nop
f010b9be:	c9                   	leave  
f010b9bf:	c3                   	ret    

f010b9c0 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010b9c0:	55                   	push   %ebp
f010b9c1:	89 e5                	mov    %esp,%ebp
f010b9c3:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010b9c6:	ff 75 14             	pushl  0x14(%ebp)
f010b9c9:	ff 75 10             	pushl  0x10(%ebp)
f010b9cc:	ff 75 0c             	pushl  0xc(%ebp)
f010b9cf:	ff 75 08             	pushl  0x8(%ebp)
f010b9d2:	e8 8d be ff ff       	call   f0107864 <env_create>
f010b9d7:	83 c4 10             	add    $0x10,%esp
f010b9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010b9dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b9e1:	75 07                	jne    f010b9ea <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010b9e3:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010b9e8:	eb 14                	jmp    f010b9fe <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010b9ea:	83 ec 0c             	sub    $0xc,%esp
f010b9ed:	ff 75 f4             	pushl  -0xc(%ebp)
f010b9f0:	e8 9a 8e ff ff       	call   f010488f <sched_new_env>
f010b9f5:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010b9f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9fb:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010b9fe:	c9                   	leave  
f010b9ff:	c3                   	ret    

f010ba00 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ba00:	55                   	push   %ebp
f010ba01:	89 e5                	mov    %esp,%ebp
f010ba03:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ba06:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba09:	83 ec 0c             	sub    $0xc,%esp
f010ba0c:	50                   	push   %eax
f010ba0d:	e8 9a 8e ff ff       	call   f01048ac <sched_run_env>
f010ba12:	83 c4 10             	add    $0x10,%esp
}
f010ba15:	90                   	nop
f010ba16:	c9                   	leave  
f010ba17:	c3                   	ret    

f010ba18 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ba18:	55                   	push   %ebp
f010ba19:	89 e5                	mov    %esp,%ebp
f010ba1b:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ba1e:	0f 31                	rdtsc  
f010ba20:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ba23:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ba26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ba2c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ba2f:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ba32:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ba35:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ba38:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ba3b:	89 01                	mov    %eax,(%ecx)
f010ba3d:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ba40:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba43:	c9                   	leave  
f010ba44:	c2 04 00             	ret    $0x4

f010ba47 <sys_rcr2>:

uint32 sys_rcr2()
{
f010ba47:	55                   	push   %ebp
f010ba48:	89 e5                	mov    %esp,%ebp
f010ba4a:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ba4d:	0f 20 d0             	mov    %cr2,%eax
f010ba50:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ba53:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ba56:	90                   	nop
}
f010ba57:	c9                   	leave  
f010ba58:	c3                   	ret    

f010ba59 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ba59:	55                   	push   %ebp
f010ba5a:	89 e5                	mov    %esp,%ebp
f010ba5c:	83 ec 04             	sub    $0x4,%esp
f010ba5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba62:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ba65:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ba68:	a2 08 4f 64 f0       	mov    %al,0xf0644f08
}
f010ba6d:	90                   	nop
f010ba6e:	c9                   	leave  
f010ba6f:	c3                   	ret    

f010ba70 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010ba70:	55                   	push   %ebp
f010ba71:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010ba73:	c7 05 50 45 6d f0 00 	movl   $0x0,0xf06d4550
f010ba7a:	00 00 00 
}
f010ba7d:	90                   	nop
f010ba7e:	5d                   	pop    %ebp
f010ba7f:	c3                   	ret    

f010ba80 <inctst>:
void inctst()
{
f010ba80:	55                   	push   %ebp
f010ba81:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010ba83:	a1 50 45 6d f0       	mov    0xf06d4550,%eax
f010ba88:	40                   	inc    %eax
f010ba89:	a3 50 45 6d f0       	mov    %eax,0xf06d4550
}
f010ba8e:	90                   	nop
f010ba8f:	5d                   	pop    %ebp
f010ba90:	c3                   	ret    

f010ba91 <gettst>:
uint32 gettst()
{
f010ba91:	55                   	push   %ebp
f010ba92:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010ba94:	a1 50 45 6d f0       	mov    0xf06d4550,%eax
}
f010ba99:	5d                   	pop    %ebp
f010ba9a:	c3                   	ret    

f010ba9b <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010ba9b:	55                   	push   %ebp
f010ba9c:	89 e5                	mov    %esp,%ebp
f010ba9e:	83 ec 28             	sub    $0x28,%esp
f010baa1:	8b 45 14             	mov    0x14(%ebp),%eax
f010baa4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010baa7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010baae:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010bab2:	83 f8 65             	cmp    $0x65,%eax
f010bab5:	74 5d                	je     f010bb14 <tst+0x79>
f010bab7:	83 f8 65             	cmp    $0x65,%eax
f010baba:	7f 0a                	jg     f010bac6 <tst+0x2b>
f010babc:	83 f8 62             	cmp    $0x62,%eax
f010babf:	74 73                	je     f010bb34 <tst+0x99>
f010bac1:	e9 91 00 00 00       	jmp    f010bb57 <tst+0xbc>
f010bac6:	83 f8 67             	cmp    $0x67,%eax
f010bac9:	74 29                	je     f010baf4 <tst+0x59>
f010bacb:	83 f8 6c             	cmp    $0x6c,%eax
f010bace:	0f 85 83 00 00 00    	jne    f010bb57 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010bad4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bad7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bada:	73 09                	jae    f010bae5 <tst+0x4a>
			chk = 1;
f010badc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010bae3:	eb 68                	jmp    f010bb4d <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010bae5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010bae9:	74 62                	je     f010bb4d <tst+0xb2>
			chk = 1;
f010baeb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010baf2:	eb 59                	jmp    f010bb4d <tst+0xb2>
	case 'g':
		if (n > v1)
f010baf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010baf7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bafa:	76 09                	jbe    f010bb05 <tst+0x6a>
			chk = 1;
f010bafc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010bb03:	eb 4b                	jmp    f010bb50 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010bb05:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010bb09:	74 45                	je     f010bb50 <tst+0xb5>
			chk = 1;
f010bb0b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010bb12:	eb 3c                	jmp    f010bb50 <tst+0xb5>
	case 'e':
		if (n == v1)
f010bb14:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb17:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bb1a:	75 09                	jne    f010bb25 <tst+0x8a>
			chk = 1;
f010bb1c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010bb23:	eb 2e                	jmp    f010bb53 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010bb25:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010bb29:	74 28                	je     f010bb53 <tst+0xb8>
			chk = 1;
f010bb2b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010bb32:	eb 1f                	jmp    f010bb53 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010bb34:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb37:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bb3a:	72 1a                	jb     f010bb56 <tst+0xbb>
f010bb3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb3f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bb42:	77 12                	ja     f010bb56 <tst+0xbb>
			chk = 1;
f010bb44:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010bb4b:	eb 09                	jmp    f010bb56 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010bb4d:	90                   	nop
f010bb4e:	eb 07                	jmp    f010bb57 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010bb50:	90                   	nop
f010bb51:	eb 04                	jmp    f010bb57 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010bb53:	90                   	nop
f010bb54:	eb 01                	jmp    f010bb57 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010bb56:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010bb57:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bb5b:	75 17                	jne    f010bb74 <tst+0xd9>
f010bb5d:	83 ec 04             	sub    $0x4,%esp
f010bb60:	68 75 e6 12 f0       	push   $0xf012e675
f010bb65:	68 00 02 00 00       	push   $0x200
f010bb6a:	68 b3 e5 12 f0       	push   $0xf012e5b3
f010bb6f:	e8 32 46 ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010bb74:	a1 50 45 6d f0       	mov    0xf06d4550,%eax
f010bb79:	40                   	inc    %eax
f010bb7a:	a3 50 45 6d f0       	mov    %eax,0xf06d4550
	return;
f010bb7f:	90                   	nop
}
f010bb80:	c9                   	leave  
f010bb81:	c3                   	ret    

f010bb82 <chktst>:

void chktst(uint32 n)
{
f010bb82:	55                   	push   %ebp
f010bb83:	89 e5                	mov    %esp,%ebp
f010bb85:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010bb88:	a1 50 45 6d f0       	mov    0xf06d4550,%eax
f010bb8d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bb90:	75 12                	jne    f010bba4 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010bb92:	83 ec 0c             	sub    $0xc,%esp
f010bb95:	68 88 e6 12 f0       	push   $0xf012e688
f010bb9a:	e8 8e 50 ff ff       	call   f0100c2d <cprintf>
f010bb9f:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010bba2:	eb 17                	jmp    f010bbbb <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010bba4:	83 ec 04             	sub    $0x4,%esp
f010bba7:	68 b4 e6 12 f0       	push   $0xf012e6b4
f010bbac:	68 0a 02 00 00       	push   $0x20a
f010bbb1:	68 b3 e5 12 f0       	push   $0xf012e5b3
f010bbb6:	e8 eb 45 ff ff       	call   f01001a6 <_panic>
}
f010bbbb:	c9                   	leave  
f010bbbc:	c3                   	ret    

f010bbbd <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010bbbd:	55                   	push   %ebp
f010bbbe:	89 e5                	mov    %esp,%ebp
f010bbc0:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010bbc3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010bbc8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010bbcb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010bbd2:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010bbd9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010bbdd:	0f 84 a5 00 00 00    	je     f010bc88 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010bbe3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010bbea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bbed:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010bbf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bbf6:	eb 4a                	jmp    f010bc42 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010bbf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bbfb:	8b 00                	mov    (%eax),%eax
f010bbfd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010bc00:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bc03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bc08:	89 c2                	mov    %eax,%edx
f010bc0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc0d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010bc14:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc17:	01 c8                	add    %ecx,%eax
f010bc19:	8b 00                	mov    (%eax),%eax
f010bc1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010bc1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bc21:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bc26:	39 c2                	cmp    %eax,%edx
f010bc28:	74 09                	je     f010bc33 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010bc2a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010bc31:	eb 3e                	jmp    f010bc71 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010bc33:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010bc36:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bc39:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010bc3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bc42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bc46:	74 08                	je     f010bc50 <sys_check_LRU_lists+0x93>
f010bc48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc4b:	8b 40 10             	mov    0x10(%eax),%eax
f010bc4e:	eb 05                	jmp    f010bc55 <sys_check_LRU_lists+0x98>
f010bc50:	b8 00 00 00 00       	mov    $0x0,%eax
f010bc55:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010bc58:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010bc5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bc61:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010bc67:	85 c0                	test   %eax,%eax
f010bc69:	75 8d                	jne    f010bbf8 <sys_check_LRU_lists+0x3b>
f010bc6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bc6f:	75 87                	jne    f010bbf8 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010bc71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bc74:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010bc7a:	8b 45 10             	mov    0x10(%ebp),%eax
f010bc7d:	39 c2                	cmp    %eax,%edx
f010bc7f:	74 07                	je     f010bc88 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010bc81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010bc88:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010bc8c:	0f 84 a5 00 00 00    	je     f010bd37 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010bc92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010bc99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bc9c:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010bca2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bca5:	eb 4a                	jmp    f010bcf1 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010bca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bcaa:	8b 00                	mov    (%eax),%eax
f010bcac:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010bcaf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bcb2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bcb7:	89 c2                	mov    %eax,%edx
f010bcb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bcbc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010bcc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bcc6:	01 c8                	add    %ecx,%eax
f010bcc8:	8b 00                	mov    (%eax),%eax
f010bcca:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010bccd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcd0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bcd5:	39 c2                	cmp    %eax,%edx
f010bcd7:	74 09                	je     f010bce2 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010bcd9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010bce0:	eb 3e                	jmp    f010bd20 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010bce2:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010bce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bce8:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010bcee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bcf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bcf5:	74 08                	je     f010bcff <sys_check_LRU_lists+0x142>
f010bcf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bcfa:	8b 40 10             	mov    0x10(%eax),%eax
f010bcfd:	eb 05                	jmp    f010bd04 <sys_check_LRU_lists+0x147>
f010bcff:	b8 00 00 00 00       	mov    $0x0,%eax
f010bd04:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010bd07:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010bd0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd10:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010bd16:	85 c0                	test   %eax,%eax
f010bd18:	75 8d                	jne    f010bca7 <sys_check_LRU_lists+0xea>
f010bd1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bd1e:	75 87                	jne    f010bca7 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010bd20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd23:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010bd29:	8b 45 14             	mov    0x14(%ebp),%eax
f010bd2c:	39 c2                	cmp    %eax,%edx
f010bd2e:	74 07                	je     f010bd37 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010bd30:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010bd37:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010bd3a:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010bd3d:	c9                   	leave  
f010bd3e:	c3                   	ret    

f010bd3f <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010bd3f:	55                   	push   %ebp
f010bd40:	89 e5                	mov    %esp,%ebp
f010bd42:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010bd45:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f010bd4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010bd4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010bd54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bd57:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010bd5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010bd60:	eb 65                	jmp    f010bdc7 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010bd62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bd69:	eb 3a                	jmp    f010bda5 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010bd6b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010bd6e:	8b 00                	mov    (%eax),%eax
f010bd70:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010bd73:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bd7b:	89 c2                	mov    %eax,%edx
f010bd7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bd80:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010bd87:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd8a:	01 c8                	add    %ecx,%eax
f010bd8c:	8b 00                	mov    (%eax),%eax
f010bd8e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010bd91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd94:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bd99:	39 c2                	cmp    %eax,%edx
f010bd9b:	75 05                	jne    f010bda2 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010bd9d:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010bda0:	eb 0b                	jmp    f010bdad <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010bda2:	ff 45 f4             	incl   -0xc(%ebp)
f010bda5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bda8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bdab:	7c be                	jl     f010bd6b <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010bdad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010bdb1:	7e 08                	jle    f010bdbb <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010bdb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010bdb6:	e9 ed 00 00 00       	jmp    f010bea8 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010bdbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bdbe:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010bdc4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010bdc7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010bdcb:	74 08                	je     f010bdd5 <sys_check_LRU_lists_free+0x96>
f010bdcd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010bdd0:	8b 40 10             	mov    0x10(%eax),%eax
f010bdd3:	eb 05                	jmp    f010bdda <sys_check_LRU_lists_free+0x9b>
f010bdd5:	b8 00 00 00 00       	mov    $0x0,%eax
f010bdda:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bddd:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010bde3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bde6:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010bdec:	85 c0                	test   %eax,%eax
f010bdee:	0f 85 6e ff ff ff    	jne    f010bd62 <sys_check_LRU_lists_free+0x23>
f010bdf4:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010bdf8:	0f 85 64 ff ff ff    	jne    f010bd62 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010bdfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010be01:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010be07:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010be0a:	eb 62                	jmp    f010be6e <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010be0c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010be13:	eb 3a                	jmp    f010be4f <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010be15:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010be18:	8b 00                	mov    (%eax),%eax
f010be1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010be1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010be20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010be25:	89 c2                	mov    %eax,%edx
f010be27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010be2a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010be31:	8b 45 08             	mov    0x8(%ebp),%eax
f010be34:	01 c8                	add    %ecx,%eax
f010be36:	8b 00                	mov    (%eax),%eax
f010be38:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010be3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010be3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010be43:	39 c2                	cmp    %eax,%edx
f010be45:	75 05                	jne    f010be4c <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010be47:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010be4a:	eb 0b                	jmp    f010be57 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010be4c:	ff 45 f0             	incl   -0x10(%ebp)
f010be4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010be52:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010be55:	7c be                	jl     f010be15 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010be57:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010be5b:	7e 05                	jle    f010be62 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010be5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010be60:	eb 46                	jmp    f010bea8 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010be62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010be65:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010be6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010be6e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010be72:	74 08                	je     f010be7c <sys_check_LRU_lists_free+0x13d>
f010be74:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010be77:	8b 40 10             	mov    0x10(%eax),%eax
f010be7a:	eb 05                	jmp    f010be81 <sys_check_LRU_lists_free+0x142>
f010be7c:	b8 00 00 00 00       	mov    $0x0,%eax
f010be81:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010be84:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010be8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010be8d:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010be93:	85 c0                	test   %eax,%eax
f010be95:	0f 85 71 ff ff ff    	jne    f010be0c <sys_check_LRU_lists_free+0xcd>
f010be9b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010be9f:	0f 85 67 ff ff ff    	jne    f010be0c <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010bea5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010bea8:	c9                   	leave  
f010bea9:	c3                   	ret    

f010beaa <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010beaa:	55                   	push   %ebp
f010beab:	89 e5                	mov    %esp,%ebp
f010bead:	56                   	push   %esi
f010beae:	53                   	push   %ebx
f010beaf:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010beb2:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010beb6:	0f 87 0e 04 00 00    	ja     f010c2ca <syscall+0x420>
f010bebc:	8b 45 08             	mov    0x8(%ebp),%eax
f010bebf:	c1 e0 02             	shl    $0x2,%eax
f010bec2:	05 d0 e6 12 f0       	add    $0xf012e6d0,%eax
f010bec7:	8b 00                	mov    (%eax),%eax
f010bec9:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010becb:	8b 45 14             	mov    0x14(%ebp),%eax
f010bece:	0f b6 d0             	movzbl %al,%edx
f010bed1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bed4:	83 ec 04             	sub    $0x4,%esp
f010bed7:	52                   	push   %edx
f010bed8:	ff 75 10             	pushl  0x10(%ebp)
f010bedb:	50                   	push   %eax
f010bedc:	e8 eb f4 ff ff       	call   f010b3cc <sys_cputs>
f010bee1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bee4:	b8 00 00 00 00       	mov    $0x0,%eax
f010bee9:	e9 e1 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010beee:	e8 4e f5 ff ff       	call   f010b441 <sys_cgetc>
f010bef3:	e9 d7 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010bef8:	83 ec 08             	sub    $0x8,%esp
f010befb:	ff 75 10             	pushl  0x10(%ebp)
f010befe:	ff 75 0c             	pushl  0xc(%ebp)
f010bf01:	e8 88 f6 ff ff       	call   f010b58e <sys_calculate_required_frames>
f010bf06:	83 c4 10             	add    $0x10,%esp
f010bf09:	e9 c1 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010bf0e:	e8 9d f6 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010bf13:	e9 b7 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010bf18:	e8 b2 f6 ff ff       	call   f010b5cf <sys_calculate_modified_frames>
f010bf1d:	e9 ad 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010bf22:	e8 c2 f6 ff ff       	call   f010b5e9 <sys_calculate_notmod_frames>
f010bf27:	e9 a3 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010bf2c:	e8 2a f7 ff ff       	call   f010b65b <sys_pf_calculate_allocated_pages>
f010bf31:	e9 99 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010bf36:	83 ec 0c             	sub    $0xc,%esp
f010bf39:	ff 75 0c             	pushl  0xc(%ebp)
f010bf3c:	e8 c2 f6 ff ff       	call   f010b603 <sys_calculate_pages_tobe_removed_ready_exit>
f010bf41:	83 c4 10             	add    $0x10,%esp
f010bf44:	e9 86 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010bf49:	e8 cb f6 ff ff       	call   f010b619 <sys_scarce_memory>
		return 0;
f010bf4e:	b8 00 00 00 00       	mov    $0x0,%eax
f010bf53:	e9 77 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010bf58:	83 ec 08             	sub    $0x8,%esp
f010bf5b:	ff 75 10             	pushl  0x10(%ebp)
f010bf5e:	ff 75 0c             	pushl  0xc(%ebp)
f010bf61:	e8 0e f7 ff ff       	call   f010b674 <sys_free_user_mem>
f010bf66:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bf69:	b8 00 00 00 00       	mov    $0x0,%eax
f010bf6e:	e9 5c 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010bf73:	8b 55 10             	mov    0x10(%ebp),%edx
f010bf76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf79:	83 ec 08             	sub    $0x8,%esp
f010bf7c:	52                   	push   %edx
f010bf7d:	50                   	push   %eax
f010bf7e:	e8 d1 f4 ff ff       	call   f010b454 <__sys_allocate_page>
f010bf83:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bf86:	b8 00 00 00 00       	mov    $0x0,%eax
f010bf8b:	e9 3f 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010bf90:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010bf93:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010bf96:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010bf99:	8b 55 10             	mov    0x10(%ebp),%edx
f010bf9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bf9f:	83 ec 0c             	sub    $0xc,%esp
f010bfa2:	56                   	push   %esi
f010bfa3:	53                   	push   %ebx
f010bfa4:	51                   	push   %ecx
f010bfa5:	52                   	push   %edx
f010bfa6:	50                   	push   %eax
f010bfa7:	e8 a8 f5 ff ff       	call   f010b554 <__sys_map_frame>
f010bfac:	83 c4 20             	add    $0x20,%esp
		return 0;
f010bfaf:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfb4:	e9 16 03 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010bfb9:	8b 55 10             	mov    0x10(%ebp),%edx
f010bfbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bfbf:	83 ec 08             	sub    $0x8,%esp
f010bfc2:	52                   	push   %edx
f010bfc3:	50                   	push   %eax
f010bfc4:	e8 a8 f5 ff ff       	call   f010b571 <__sys_unmap_frame>
f010bfc9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bfcc:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfd1:	e9 f9 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010bfd6:	83 ec 04             	sub    $0x4,%esp
f010bfd9:	ff 75 14             	pushl  0x14(%ebp)
f010bfdc:	ff 75 10             	pushl  0x10(%ebp)
f010bfdf:	ff 75 0c             	pushl  0xc(%ebp)
f010bfe2:	e8 ef f6 ff ff       	call   f010b6d6 <sys_allocate_chunk>
f010bfe7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bfea:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfef:	e9 db 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010bff4:	e8 38 f7 ff ff       	call   f010b731 <sys_disable_interrupt>
		return 0;
f010bff9:	b8 00 00 00 00       	mov    $0x0,%eax
f010bffe:	e9 cc 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010c003:	e8 43 f7 ff ff       	call   f010b74b <sys_enable_interrupt>
		return 0;
f010c008:	b8 00 00 00 00       	mov    $0x0,%eax
f010c00d:	e9 bd 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010c012:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c015:	0f be c0             	movsbl %al,%eax
f010c018:	83 ec 0c             	sub    $0xc,%esp
f010c01b:	50                   	push   %eax
f010c01c:	e8 fc f3 ff ff       	call   f010b41d <sys_cputc>
f010c021:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c024:	b8 00 00 00 00       	mov    $0x0,%eax
f010c029:	e9 a1 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010c02e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c031:	0f be c0             	movsbl %al,%eax
f010c034:	83 ec 0c             	sub    $0xc,%esp
f010c037:	50                   	push   %eax
f010c038:	e8 ea f5 ff ff       	call   f010b627 <sys_clearFFL>
f010c03d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c040:	b8 00 00 00 00       	mov    $0x0,%eax
f010c045:	e9 85 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010c04a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c04d:	83 ec 08             	sub    $0x8,%esp
f010c050:	ff 75 10             	pushl  0x10(%ebp)
f010c053:	50                   	push   %eax
f010c054:	e8 0c f7 ff ff       	call   f010b765 <sys_createSemaphore>
f010c059:	83 c4 10             	add    $0x10,%esp
f010c05c:	e9 6e 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010c061:	8b 55 10             	mov    0x10(%ebp),%edx
f010c064:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c067:	83 ec 08             	sub    $0x8,%esp
f010c06a:	52                   	push   %edx
f010c06b:	50                   	push   %eax
f010c06c:	e8 16 f7 ff ff       	call   f010b787 <sys_waitSemaphore>
f010c071:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c074:	b8 00 00 00 00       	mov    $0x0,%eax
f010c079:	e9 51 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010c07e:	8b 55 10             	mov    0x10(%ebp),%edx
f010c081:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c084:	83 ec 08             	sub    $0x8,%esp
f010c087:	52                   	push   %edx
f010c088:	50                   	push   %eax
f010c089:	e8 13 f7 ff ff       	call   f010b7a1 <sys_signalSemaphore>
f010c08e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c091:	b8 00 00 00 00       	mov    $0x0,%eax
f010c096:	e9 34 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010c09b:	8b 55 10             	mov    0x10(%ebp),%edx
f010c09e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0a1:	83 ec 08             	sub    $0x8,%esp
f010c0a4:	52                   	push   %edx
f010c0a5:	50                   	push   %eax
f010c0a6:	e8 10 f7 ff ff       	call   f010b7bb <sys_getSemaphoreValue>
f010c0ab:	83 c4 10             	add    $0x10,%esp
f010c0ae:	e9 1c 02 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010c0b3:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010c0b6:	8b 45 14             	mov    0x14(%ebp),%eax
f010c0b9:	0f b6 d0             	movzbl %al,%edx
f010c0bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0bf:	51                   	push   %ecx
f010c0c0:	52                   	push   %edx
f010c0c1:	ff 75 10             	pushl  0x10(%ebp)
f010c0c4:	50                   	push   %eax
f010c0c5:	e8 4e f7 ff ff       	call   f010b818 <sys_createSharedObject>
f010c0ca:	83 c4 10             	add    $0x10,%esp
f010c0cd:	e9 fd 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010c0d2:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010c0d5:	8b 55 10             	mov    0x10(%ebp),%edx
f010c0d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0db:	83 ec 04             	sub    $0x4,%esp
f010c0de:	51                   	push   %ecx
f010c0df:	52                   	push   %edx
f010c0e0:	50                   	push   %eax
f010c0e1:	e8 7b f7 ff ff       	call   f010b861 <sys_getSharedObject>
f010c0e6:	83 c4 10             	add    $0x10,%esp
f010c0e9:	e9 e1 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010c0ee:	8b 55 10             	mov    0x10(%ebp),%edx
f010c0f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0f4:	83 ec 08             	sub    $0x8,%esp
f010c0f7:	52                   	push   %edx
f010c0f8:	50                   	push   %eax
f010c0f9:	e8 7f f7 ff ff       	call   f010b87d <sys_freeSharedObject>
f010c0fe:	83 c4 10             	add    $0x10,%esp
f010c101:	e9 c9 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010c106:	8b 55 10             	mov    0x10(%ebp),%edx
f010c109:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c10c:	83 ec 08             	sub    $0x8,%esp
f010c10f:	52                   	push   %edx
f010c110:	50                   	push   %eax
f010c111:	e8 32 f7 ff ff       	call   f010b848 <sys_getSizeOfSharedObject>
f010c116:	83 c4 10             	add    $0x10,%esp
f010c119:	e9 b1 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010c11e:	e8 73 f7 ff ff       	call   f010b896 <sys_getMaxShares>
f010c123:	e9 a7 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010c128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c12b:	ff 75 18             	pushl  0x18(%ebp)
f010c12e:	ff 75 14             	pushl  0x14(%ebp)
f010c131:	ff 75 10             	pushl  0x10(%ebp)
f010c134:	50                   	push   %eax
f010c135:	e8 86 f8 ff ff       	call   f010b9c0 <sys_create_env>
f010c13a:	83 c4 10             	add    $0x10,%esp
f010c13d:	e9 8d 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010c142:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c145:	83 ec 0c             	sub    $0xc,%esp
f010c148:	50                   	push   %eax
f010c149:	e8 b2 f8 ff ff       	call   f010ba00 <sys_run_env>
f010c14e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c151:	b8 00 00 00 00       	mov    $0x0,%eax
f010c156:	e9 74 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010c15b:	e8 4d f7 ff ff       	call   f010b8ad <sys_getenvindex>
f010c160:	e9 6a 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010c165:	e8 36 f7 ff ff       	call   f010b8a0 <sys_getenvid>
f010c16a:	e9 60 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010c16f:	e8 99 f7 ff ff       	call   f010b90d <sys_getparentenvid>
f010c174:	e9 56 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010c179:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c17c:	83 ec 0c             	sub    $0xc,%esp
f010c17f:	50                   	push   %eax
f010c180:	e8 95 f7 ff ff       	call   f010b91a <sys_destroy_env>
f010c185:	83 c4 10             	add    $0x10,%esp
f010c188:	e9 42 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010c18d:	e8 20 f8 ff ff       	call   f010b9b2 <sys_exit_env>
		return 0;
f010c192:	b8 00 00 00 00       	mov    $0x0,%eax
f010c197:	e9 33 01 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010c19c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c19f:	83 ec 0c             	sub    $0xc,%esp
f010c1a2:	50                   	push   %eax
f010c1a3:	e8 70 f8 ff ff       	call   f010ba18 <sys_get_virtual_time>
f010c1a8:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010c1ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010c1b1:	8b 45 10             	mov    0x10(%ebp),%eax
f010c1b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010c1b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c1ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1bd:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010c1bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c1c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c1c5:	89 10                	mov    %edx,(%eax)
		return 0;
f010c1c7:	b8 00 00 00 00       	mov    $0x0,%eax
f010c1cc:	e9 fe 00 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010c1d1:	83 ec 04             	sub    $0x4,%esp
f010c1d4:	ff 75 14             	pushl  0x14(%ebp)
f010c1d7:	ff 75 10             	pushl  0x10(%ebp)
f010c1da:	ff 75 0c             	pushl  0xc(%ebp)
f010c1dd:	e8 17 f5 ff ff       	call   f010b6f9 <sys_move_user_mem>
f010c1e2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c1e5:	b8 00 00 00 00       	mov    $0x0,%eax
f010c1ea:	e9 e0 00 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010c1ef:	e8 53 f8 ff ff       	call   f010ba47 <sys_rcr2>
f010c1f4:	e9 d6 00 00 00       	jmp    f010c2cf <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010c1f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1fc:	0f b6 c0             	movzbl %al,%eax
f010c1ff:	83 ec 0c             	sub    $0xc,%esp
f010c202:	50                   	push   %eax
f010c203:	e8 51 f8 ff ff       	call   f010ba59 <sys_bypassPageFault>
f010c208:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c20b:	b8 00 00 00 00       	mov    $0x0,%eax
f010c210:	e9 ba 00 00 00       	jmp    f010c2cf <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010c215:	e8 56 f8 ff ff       	call   f010ba70 <rsttst>
		return 0;
f010c21a:	b8 00 00 00 00       	mov    $0x0,%eax
f010c21f:	e9 ab 00 00 00       	jmp    f010c2cf <syscall+0x425>
	case SYS_inctst:
		inctst();
f010c224:	e8 57 f8 ff ff       	call   f010ba80 <inctst>
		return 0;
f010c229:	b8 00 00 00 00       	mov    $0x0,%eax
f010c22e:	e9 9c 00 00 00       	jmp    f010c2cf <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010c233:	83 ec 0c             	sub    $0xc,%esp
f010c236:	ff 75 0c             	pushl  0xc(%ebp)
f010c239:	e8 44 f9 ff ff       	call   f010bb82 <chktst>
f010c23e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c241:	b8 00 00 00 00       	mov    $0x0,%eax
f010c246:	e9 84 00 00 00       	jmp    f010c2cf <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010c24b:	e8 41 f8 ff ff       	call   f010ba91 <gettst>
f010c250:	eb 7d                	jmp    f010c2cf <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010c252:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010c255:	8b 45 18             	mov    0x18(%ebp),%eax
f010c258:	0f be c0             	movsbl %al,%eax
f010c25b:	83 ec 0c             	sub    $0xc,%esp
f010c25e:	52                   	push   %edx
f010c25f:	50                   	push   %eax
f010c260:	ff 75 14             	pushl  0x14(%ebp)
f010c263:	ff 75 10             	pushl  0x10(%ebp)
f010c266:	ff 75 0c             	pushl  0xc(%ebp)
f010c269:	e8 2d f8 ff ff       	call   f010ba9b <tst>
f010c26e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010c271:	b8 00 00 00 00       	mov    $0x0,%eax
f010c276:	eb 57                	jmp    f010c2cf <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010c278:	e8 9c f4 ff ff       	call   f010b719 <sys_get_heap_strategy>
f010c27d:	eb 50                	jmp    f010c2cf <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010c27f:	83 ec 0c             	sub    $0xc,%esp
f010c282:	ff 75 0c             	pushl  0xc(%ebp)
f010c285:	e8 99 f4 ff ff       	call   f010b723 <sys_set_uheap_strategy>
f010c28a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c28d:	b8 00 00 00 00       	mov    $0x0,%eax
f010c292:	eb 3b                	jmp    f010c2cf <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010c294:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010c297:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010c29a:	8b 55 10             	mov    0x10(%ebp),%edx
f010c29d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c2a0:	53                   	push   %ebx
f010c2a1:	51                   	push   %ecx
f010c2a2:	52                   	push   %edx
f010c2a3:	50                   	push   %eax
f010c2a4:	e8 14 f9 ff ff       	call   f010bbbd <sys_check_LRU_lists>
f010c2a9:	83 c4 10             	add    $0x10,%esp
f010c2ac:	eb 21                	jmp    f010c2cf <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010c2ae:	8b 55 10             	mov    0x10(%ebp),%edx
f010c2b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c2b4:	83 ec 08             	sub    $0x8,%esp
f010c2b7:	52                   	push   %edx
f010c2b8:	50                   	push   %eax
f010c2b9:	e8 81 fa ff ff       	call   f010bd3f <sys_check_LRU_lists_free>
f010c2be:	83 c4 10             	add    $0x10,%esp
f010c2c1:	eb 0c                	jmp    f010c2cf <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010c2c3:	b8 03 00 00 00       	mov    $0x3,%eax
f010c2c8:	eb 05                	jmp    f010c2cf <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010c2ca:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010c2cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010c2d2:	5b                   	pop    %ebx
f010c2d3:	5e                   	pop    %esi
f010c2d4:	5d                   	pop    %ebp
f010c2d5:	c3                   	ret    

f010c2d6 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010c2d6:	55                   	push   %ebp
f010c2d7:	89 e5                	mov    %esp,%ebp
f010c2d9:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010c2dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c2df:	8b 00                	mov    (%eax),%eax
f010c2e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c2e4:	8b 45 10             	mov    0x10(%ebp),%eax
f010c2e7:	8b 00                	mov    (%eax),%eax
f010c2e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c2ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010c2f3:	e9 ca 00 00 00       	jmp    f010c3c2 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010c2f8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c2fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c2fe:	01 d0                	add    %edx,%eax
f010c300:	89 c2                	mov    %eax,%edx
f010c302:	c1 ea 1f             	shr    $0x1f,%edx
f010c305:	01 d0                	add    %edx,%eax
f010c307:	d1 f8                	sar    %eax
f010c309:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010c30c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c30f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010c312:	eb 03                	jmp    f010c317 <stab_binsearch+0x41>
			m--;
f010c314:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010c317:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c31a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010c31d:	7c 1e                	jl     f010c33d <stab_binsearch+0x67>
f010c31f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c322:	89 d0                	mov    %edx,%eax
f010c324:	01 c0                	add    %eax,%eax
f010c326:	01 d0                	add    %edx,%eax
f010c328:	c1 e0 02             	shl    $0x2,%eax
f010c32b:	89 c2                	mov    %eax,%edx
f010c32d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c330:	01 d0                	add    %edx,%eax
f010c332:	8a 40 04             	mov    0x4(%eax),%al
f010c335:	0f b6 c0             	movzbl %al,%eax
f010c338:	3b 45 14             	cmp    0x14(%ebp),%eax
f010c33b:	75 d7                	jne    f010c314 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010c33d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c340:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010c343:	7d 09                	jge    f010c34e <stab_binsearch+0x78>
			l = true_m + 1;
f010c345:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c348:	40                   	inc    %eax
f010c349:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010c34c:	eb 74                	jmp    f010c3c2 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010c34e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010c355:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c358:	89 d0                	mov    %edx,%eax
f010c35a:	01 c0                	add    %eax,%eax
f010c35c:	01 d0                	add    %edx,%eax
f010c35e:	c1 e0 02             	shl    $0x2,%eax
f010c361:	89 c2                	mov    %eax,%edx
f010c363:	8b 45 08             	mov    0x8(%ebp),%eax
f010c366:	01 d0                	add    %edx,%eax
f010c368:	8b 40 08             	mov    0x8(%eax),%eax
f010c36b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010c36e:	73 11                	jae    f010c381 <stab_binsearch+0xab>
			*region_left = m;
f010c370:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c373:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c376:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010c378:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c37b:	40                   	inc    %eax
f010c37c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c37f:	eb 41                	jmp    f010c3c2 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010c381:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c384:	89 d0                	mov    %edx,%eax
f010c386:	01 c0                	add    %eax,%eax
f010c388:	01 d0                	add    %edx,%eax
f010c38a:	c1 e0 02             	shl    $0x2,%eax
f010c38d:	89 c2                	mov    %eax,%edx
f010c38f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c392:	01 d0                	add    %edx,%eax
f010c394:	8b 40 08             	mov    0x8(%eax),%eax
f010c397:	3b 45 18             	cmp    0x18(%ebp),%eax
f010c39a:	76 14                	jbe    f010c3b0 <stab_binsearch+0xda>
			*region_right = m - 1;
f010c39c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c39f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010c3a2:	8b 45 10             	mov    0x10(%ebp),%eax
f010c3a5:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010c3a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3aa:	48                   	dec    %eax
f010c3ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c3ae:	eb 12                	jmp    f010c3c2 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010c3b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c3b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c3b6:	89 10                	mov    %edx,(%eax)
			l = m;
f010c3b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010c3be:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010c3c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c3c5:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010c3c8:	0f 8e 2a ff ff ff    	jle    f010c2f8 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010c3ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c3d2:	75 0f                	jne    f010c3e3 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010c3d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c3d7:	8b 00                	mov    (%eax),%eax
f010c3d9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010c3dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010c3df:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010c3e1:	eb 3d                	jmp    f010c420 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010c3e3:	8b 45 10             	mov    0x10(%ebp),%eax
f010c3e6:	8b 00                	mov    (%eax),%eax
f010c3e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c3eb:	eb 03                	jmp    f010c3f0 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010c3ed:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010c3f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c3f3:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010c3f5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010c3f8:	7d 1e                	jge    f010c418 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010c3fa:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c3fd:	89 d0                	mov    %edx,%eax
f010c3ff:	01 c0                	add    %eax,%eax
f010c401:	01 d0                	add    %edx,%eax
f010c403:	c1 e0 02             	shl    $0x2,%eax
f010c406:	89 c2                	mov    %eax,%edx
f010c408:	8b 45 08             	mov    0x8(%ebp),%eax
f010c40b:	01 d0                	add    %edx,%eax
f010c40d:	8a 40 04             	mov    0x4(%eax),%al
f010c410:	0f b6 c0             	movzbl %al,%eax
f010c413:	3b 45 14             	cmp    0x14(%ebp),%eax
f010c416:	75 d5                	jne    f010c3ed <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010c418:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c41b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c41e:	89 10                	mov    %edx,(%eax)
	}
}
f010c420:	90                   	nop
f010c421:	c9                   	leave  
f010c422:	c3                   	ret    

f010c423 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010c423:	55                   	push   %ebp
f010c424:	89 e5                	mov    %esp,%ebp
f010c426:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010c429:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c42c:	c7 00 94 e7 12 f0    	movl   $0xf012e794,(%eax)
	info->eip_line = 0;
f010c432:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c435:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010c43c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c43f:	c7 40 08 94 e7 12 f0 	movl   $0xf012e794,0x8(%eax)
	info->eip_fn_namelen = 9;
f010c446:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c449:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010c450:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c453:	8b 55 08             	mov    0x8(%ebp),%edx
f010c456:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010c459:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c45c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010c463:	8b 45 08             	mov    0x8(%ebp),%eax
f010c466:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010c46b:	76 1e                	jbe    f010c48b <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010c46d:	c7 45 f4 68 21 13 f0 	movl   $0xf0132168,-0xc(%ebp)
		stab_end = __STAB_END__;
f010c474:	c7 45 f0 84 77 16 f0 	movl   $0xf0167784,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010c47b:	c7 45 ec 85 77 16 f0 	movl   $0xf0167785,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010c482:	c7 45 e8 52 35 17 f0 	movl   $0xf0173552,-0x18(%ebp)
f010c489:	eb 2a                	jmp    f010c4b5 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010c48b:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010c492:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c495:	8b 00                	mov    (%eax),%eax
f010c497:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010c49a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c49d:	8b 40 04             	mov    0x4(%eax),%eax
f010c4a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010c4a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c4a6:	8b 40 08             	mov    0x8(%eax),%eax
f010c4a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010c4ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c4af:	8b 40 0c             	mov    0xc(%eax),%eax
f010c4b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010c4b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c4bb:	76 0a                	jbe    f010c4c7 <debuginfo_eip+0xa4>
f010c4bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4c0:	48                   	dec    %eax
f010c4c1:	8a 00                	mov    (%eax),%al
f010c4c3:	84 c0                	test   %al,%al
f010c4c5:	74 0a                	je     f010c4d1 <debuginfo_eip+0xae>
		return -1;
f010c4c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010c4cc:	e9 01 02 00 00       	jmp    f010c6d2 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010c4d1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010c4d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c4db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c4de:	29 c2                	sub    %eax,%edx
f010c4e0:	89 d0                	mov    %edx,%eax
f010c4e2:	c1 f8 02             	sar    $0x2,%eax
f010c4e5:	89 c2                	mov    %eax,%edx
f010c4e7:	89 d0                	mov    %edx,%eax
f010c4e9:	c1 e0 02             	shl    $0x2,%eax
f010c4ec:	01 d0                	add    %edx,%eax
f010c4ee:	c1 e0 02             	shl    $0x2,%eax
f010c4f1:	01 d0                	add    %edx,%eax
f010c4f3:	c1 e0 02             	shl    $0x2,%eax
f010c4f6:	01 d0                	add    %edx,%eax
f010c4f8:	89 c1                	mov    %eax,%ecx
f010c4fa:	c1 e1 08             	shl    $0x8,%ecx
f010c4fd:	01 c8                	add    %ecx,%eax
f010c4ff:	89 c1                	mov    %eax,%ecx
f010c501:	c1 e1 10             	shl    $0x10,%ecx
f010c504:	01 c8                	add    %ecx,%eax
f010c506:	01 c0                	add    %eax,%eax
f010c508:	01 d0                	add    %edx,%eax
f010c50a:	48                   	dec    %eax
f010c50b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010c50e:	ff 75 08             	pushl  0x8(%ebp)
f010c511:	6a 64                	push   $0x64
f010c513:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010c516:	50                   	push   %eax
f010c517:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010c51a:	50                   	push   %eax
f010c51b:	ff 75 f4             	pushl  -0xc(%ebp)
f010c51e:	e8 b3 fd ff ff       	call   f010c2d6 <stab_binsearch>
f010c523:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010c526:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c529:	85 c0                	test   %eax,%eax
f010c52b:	75 0a                	jne    f010c537 <debuginfo_eip+0x114>
		return -1;
f010c52d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010c532:	e9 9b 01 00 00       	jmp    f010c6d2 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010c537:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c53a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010c53d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010c540:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010c543:	ff 75 08             	pushl  0x8(%ebp)
f010c546:	6a 24                	push   $0x24
f010c548:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010c54b:	50                   	push   %eax
f010c54c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010c54f:	50                   	push   %eax
f010c550:	ff 75 f4             	pushl  -0xc(%ebp)
f010c553:	e8 7e fd ff ff       	call   f010c2d6 <stab_binsearch>
f010c558:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010c55b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010c55e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010c561:	39 c2                	cmp    %eax,%edx
f010c563:	0f 8f 86 00 00 00    	jg     f010c5ef <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010c569:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c56c:	89 c2                	mov    %eax,%edx
f010c56e:	89 d0                	mov    %edx,%eax
f010c570:	01 c0                	add    %eax,%eax
f010c572:	01 d0                	add    %edx,%eax
f010c574:	c1 e0 02             	shl    $0x2,%eax
f010c577:	89 c2                	mov    %eax,%edx
f010c579:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c57c:	01 d0                	add    %edx,%eax
f010c57e:	8b 00                	mov    (%eax),%eax
f010c580:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010c583:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c586:	29 d1                	sub    %edx,%ecx
f010c588:	89 ca                	mov    %ecx,%edx
f010c58a:	39 d0                	cmp    %edx,%eax
f010c58c:	73 22                	jae    f010c5b0 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010c58e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c591:	89 c2                	mov    %eax,%edx
f010c593:	89 d0                	mov    %edx,%eax
f010c595:	01 c0                	add    %eax,%eax
f010c597:	01 d0                	add    %edx,%eax
f010c599:	c1 e0 02             	shl    $0x2,%eax
f010c59c:	89 c2                	mov    %eax,%edx
f010c59e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c5a1:	01 d0                	add    %edx,%eax
f010c5a3:	8b 10                	mov    (%eax),%edx
f010c5a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c5a8:	01 c2                	add    %eax,%edx
f010c5aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c5ad:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010c5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c5b3:	89 c2                	mov    %eax,%edx
f010c5b5:	89 d0                	mov    %edx,%eax
f010c5b7:	01 c0                	add    %eax,%eax
f010c5b9:	01 d0                	add    %edx,%eax
f010c5bb:	c1 e0 02             	shl    $0x2,%eax
f010c5be:	89 c2                	mov    %eax,%edx
f010c5c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c5c3:	01 d0                	add    %edx,%eax
f010c5c5:	8b 50 08             	mov    0x8(%eax),%edx
f010c5c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c5cb:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010c5ce:	8b 55 08             	mov    0x8(%ebp),%edx
f010c5d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c5d4:	8b 40 10             	mov    0x10(%eax),%eax
f010c5d7:	29 c2                	sub    %eax,%edx
f010c5d9:	89 d0                	mov    %edx,%eax
f010c5db:	c1 f8 02             	sar    $0x2,%eax
f010c5de:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010c5e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010c5e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010c5e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010c5ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c5ed:	eb 15                	jmp    f010c604 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010c5ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c5f2:	8b 55 08             	mov    0x8(%ebp),%edx
f010c5f5:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010c5f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c5fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010c5fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010c601:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010c604:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c607:	8b 40 08             	mov    0x8(%eax),%eax
f010c60a:	83 ec 08             	sub    $0x8,%esp
f010c60d:	6a 3a                	push   $0x3a
f010c60f:	50                   	push   %eax
f010c610:	e8 d8 d1 01 00       	call   f01297ed <strfind>
f010c615:	83 c4 10             	add    $0x10,%esp
f010c618:	89 c2                	mov    %eax,%edx
f010c61a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c61d:	8b 40 08             	mov    0x8(%eax),%eax
f010c620:	29 c2                	sub    %eax,%edx
f010c622:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c625:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010c628:	eb 03                	jmp    f010c62d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010c62a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010c62d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c630:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c633:	7c 4e                	jl     f010c683 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010c635:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c638:	89 d0                	mov    %edx,%eax
f010c63a:	01 c0                	add    %eax,%eax
f010c63c:	01 d0                	add    %edx,%eax
f010c63e:	c1 e0 02             	shl    $0x2,%eax
f010c641:	89 c2                	mov    %eax,%edx
f010c643:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c646:	01 d0                	add    %edx,%eax
f010c648:	8a 40 04             	mov    0x4(%eax),%al
f010c64b:	3c 84                	cmp    $0x84,%al
f010c64d:	74 34                	je     f010c683 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010c64f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c652:	89 d0                	mov    %edx,%eax
f010c654:	01 c0                	add    %eax,%eax
f010c656:	01 d0                	add    %edx,%eax
f010c658:	c1 e0 02             	shl    $0x2,%eax
f010c65b:	89 c2                	mov    %eax,%edx
f010c65d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c660:	01 d0                	add    %edx,%eax
f010c662:	8a 40 04             	mov    0x4(%eax),%al
f010c665:	3c 64                	cmp    $0x64,%al
f010c667:	75 c1                	jne    f010c62a <debuginfo_eip+0x207>
f010c669:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c66c:	89 d0                	mov    %edx,%eax
f010c66e:	01 c0                	add    %eax,%eax
f010c670:	01 d0                	add    %edx,%eax
f010c672:	c1 e0 02             	shl    $0x2,%eax
f010c675:	89 c2                	mov    %eax,%edx
f010c677:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c67a:	01 d0                	add    %edx,%eax
f010c67c:	8b 40 08             	mov    0x8(%eax),%eax
f010c67f:	85 c0                	test   %eax,%eax
f010c681:	74 a7                	je     f010c62a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010c683:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c686:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c689:	7c 42                	jl     f010c6cd <debuginfo_eip+0x2aa>
f010c68b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c68e:	89 d0                	mov    %edx,%eax
f010c690:	01 c0                	add    %eax,%eax
f010c692:	01 d0                	add    %edx,%eax
f010c694:	c1 e0 02             	shl    $0x2,%eax
f010c697:	89 c2                	mov    %eax,%edx
f010c699:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c69c:	01 d0                	add    %edx,%eax
f010c69e:	8b 00                	mov    (%eax),%eax
f010c6a0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010c6a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c6a6:	29 d1                	sub    %edx,%ecx
f010c6a8:	89 ca                	mov    %ecx,%edx
f010c6aa:	39 d0                	cmp    %edx,%eax
f010c6ac:	73 1f                	jae    f010c6cd <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010c6ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c6b1:	89 d0                	mov    %edx,%eax
f010c6b3:	01 c0                	add    %eax,%eax
f010c6b5:	01 d0                	add    %edx,%eax
f010c6b7:	c1 e0 02             	shl    $0x2,%eax
f010c6ba:	89 c2                	mov    %eax,%edx
f010c6bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6bf:	01 d0                	add    %edx,%eax
f010c6c1:	8b 10                	mov    (%eax),%edx
f010c6c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c6c6:	01 c2                	add    %eax,%edx
f010c6c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c6cb:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010c6cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c6d2:	c9                   	leave  
f010c6d3:	c3                   	ret    

f010c6d4 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010c6d4:	55                   	push   %ebp
f010c6d5:	89 e5                	mov    %esp,%ebp
f010c6d7:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010c6da:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010c6de:	74 1c                	je     f010c6fc <setPageReplacmentAlgorithmLRU+0x28>
f010c6e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010c6e4:	74 16                	je     f010c6fc <setPageReplacmentAlgorithmLRU+0x28>
f010c6e6:	68 a0 e7 12 f0       	push   $0xf012e7a0
f010c6eb:	68 ea e7 12 f0       	push   $0xf012e7ea
f010c6f0:	6a 18                	push   $0x18
f010c6f2:	68 ff e7 12 f0       	push   $0xf012e7ff
f010c6f7:	e8 aa 3a ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010c6fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6ff:	a3 24 44 6d f0       	mov    %eax,0xf06d4424
}
f010c704:	90                   	nop
f010c705:	c9                   	leave  
f010c706:	c3                   	ret    

f010c707 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010c707:	55                   	push   %ebp
f010c708:	89 e5                	mov    %esp,%ebp
f010c70a:	c7 05 24 44 6d f0 03 	movl   $0x3,0xf06d4424
f010c711:	00 00 00 
f010c714:	90                   	nop
f010c715:	5d                   	pop    %ebp
f010c716:	c3                   	ret    

f010c717 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010c717:	55                   	push   %ebp
f010c718:	89 e5                	mov    %esp,%ebp
f010c71a:	c7 05 24 44 6d f0 04 	movl   $0x4,0xf06d4424
f010c721:	00 00 00 
f010c724:	90                   	nop
f010c725:	5d                   	pop    %ebp
f010c726:	c3                   	ret    

f010c727 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010c727:	55                   	push   %ebp
f010c728:	89 e5                	mov    %esp,%ebp
f010c72a:	c7 05 24 44 6d f0 05 	movl   $0x5,0xf06d4424
f010c731:	00 00 00 
f010c734:	90                   	nop
f010c735:	5d                   	pop    %ebp
f010c736:	c3                   	ret    

f010c737 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010c737:	55                   	push   %ebp
f010c738:	89 e5                	mov    %esp,%ebp
f010c73a:	c7 05 24 44 6d f0 07 	movl   $0x7,0xf06d4424
f010c741:	00 00 00 
f010c744:	90                   	nop
f010c745:	5d                   	pop    %ebp
f010c746:	c3                   	ret    

f010c747 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010c747:	55                   	push   %ebp
f010c748:	89 e5                	mov    %esp,%ebp
f010c74a:	c7 05 24 44 6d f0 06 	movl   $0x6,0xf06d4424
f010c751:	00 00 00 
f010c754:	8b 45 08             	mov    0x8(%ebp),%eax
f010c757:	a3 48 c0 66 f0       	mov    %eax,0xf066c048
f010c75c:	90                   	nop
f010c75d:	5d                   	pop    %ebp
f010c75e:	c3                   	ret    

f010c75f <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010c75f:	55                   	push   %ebp
f010c760:	89 e5                	mov    %esp,%ebp
f010c762:	8b 15 24 44 6d f0    	mov    0xf06d4424,%edx
f010c768:	8b 45 08             	mov    0x8(%ebp),%eax
f010c76b:	39 c2                	cmp    %eax,%edx
f010c76d:	0f 94 c0             	sete   %al
f010c770:	0f b6 c0             	movzbl %al,%eax
f010c773:	5d                   	pop    %ebp
f010c774:	c3                   	ret    

f010c775 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010c775:	55                   	push   %ebp
f010c776:	89 e5                	mov    %esp,%ebp
f010c778:	a1 24 44 6d f0       	mov    0xf06d4424,%eax
f010c77d:	83 f8 03             	cmp    $0x3,%eax
f010c780:	75 07                	jne    f010c789 <isPageReplacmentAlgorithmCLOCK+0x14>
f010c782:	b8 01 00 00 00       	mov    $0x1,%eax
f010c787:	eb 05                	jmp    f010c78e <isPageReplacmentAlgorithmCLOCK+0x19>
f010c789:	b8 00 00 00 00       	mov    $0x0,%eax
f010c78e:	5d                   	pop    %ebp
f010c78f:	c3                   	ret    

f010c790 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010c790:	55                   	push   %ebp
f010c791:	89 e5                	mov    %esp,%ebp
f010c793:	a1 24 44 6d f0       	mov    0xf06d4424,%eax
f010c798:	83 f8 04             	cmp    $0x4,%eax
f010c79b:	75 07                	jne    f010c7a4 <isPageReplacmentAlgorithmFIFO+0x14>
f010c79d:	b8 01 00 00 00       	mov    $0x1,%eax
f010c7a2:	eb 05                	jmp    f010c7a9 <isPageReplacmentAlgorithmFIFO+0x19>
f010c7a4:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7a9:	5d                   	pop    %ebp
f010c7aa:	c3                   	ret    

f010c7ab <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010c7ab:	55                   	push   %ebp
f010c7ac:	89 e5                	mov    %esp,%ebp
f010c7ae:	a1 24 44 6d f0       	mov    0xf06d4424,%eax
f010c7b3:	83 f8 05             	cmp    $0x5,%eax
f010c7b6:	75 07                	jne    f010c7bf <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010c7b8:	b8 01 00 00 00       	mov    $0x1,%eax
f010c7bd:	eb 05                	jmp    f010c7c4 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010c7bf:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7c4:	5d                   	pop    %ebp
f010c7c5:	c3                   	ret    

f010c7c6 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010c7c6:	55                   	push   %ebp
f010c7c7:	89 e5                	mov    %esp,%ebp
f010c7c9:	a1 24 44 6d f0       	mov    0xf06d4424,%eax
f010c7ce:	83 f8 07             	cmp    $0x7,%eax
f010c7d1:	75 07                	jne    f010c7da <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010c7d3:	b8 01 00 00 00       	mov    $0x1,%eax
f010c7d8:	eb 05                	jmp    f010c7df <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010c7da:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7df:	5d                   	pop    %ebp
f010c7e0:	c3                   	ret    

f010c7e1 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010c7e1:	55                   	push   %ebp
f010c7e2:	89 e5                	mov    %esp,%ebp
f010c7e4:	a1 24 44 6d f0       	mov    0xf06d4424,%eax
f010c7e9:	83 f8 06             	cmp    $0x6,%eax
f010c7ec:	75 07                	jne    f010c7f5 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010c7ee:	b8 01 00 00 00       	mov    $0x1,%eax
f010c7f3:	eb 05                	jmp    f010c7fa <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010c7f5:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7fa:	5d                   	pop    %ebp
f010c7fb:	c3                   	ret    

f010c7fc <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010c7fc:	55                   	push   %ebp
f010c7fd:	89 e5                	mov    %esp,%ebp
f010c7ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010c802:	a3 ec 43 6d f0       	mov    %eax,0xf06d43ec
f010c807:	90                   	nop
f010c808:	5d                   	pop    %ebp
f010c809:	c3                   	ret    

f010c80a <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010c80a:	55                   	push   %ebp
f010c80b:	89 e5                	mov    %esp,%ebp
f010c80d:	a1 ec 43 6d f0       	mov    0xf06d43ec,%eax
f010c812:	5d                   	pop    %ebp
f010c813:	c3                   	ret    

f010c814 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010c814:	55                   	push   %ebp
f010c815:	89 e5                	mov    %esp,%ebp
f010c817:	8b 45 08             	mov    0x8(%ebp),%eax
f010c81a:	a3 2c 44 6d f0       	mov    %eax,0xf06d442c
f010c81f:	90                   	nop
f010c820:	5d                   	pop    %ebp
f010c821:	c3                   	ret    

f010c822 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010c822:	55                   	push   %ebp
f010c823:	89 e5                	mov    %esp,%ebp
f010c825:	a1 2c 44 6d f0       	mov    0xf06d442c,%eax
f010c82a:	5d                   	pop    %ebp
f010c82b:	c3                   	ret    

f010c82c <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010c82c:	55                   	push   %ebp
f010c82d:	89 e5                	mov    %esp,%ebp
f010c82f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c832:	a3 4c 44 6d f0       	mov    %eax,0xf06d444c
f010c837:	90                   	nop
f010c838:	5d                   	pop    %ebp
f010c839:	c3                   	ret    

f010c83a <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010c83a:	55                   	push   %ebp
f010c83b:	89 e5                	mov    %esp,%ebp
f010c83d:	a1 4c 44 6d f0       	mov    0xf06d444c,%eax
f010c842:	5d                   	pop    %ebp
f010c843:	c3                   	ret    

f010c844 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010c844:	55                   	push   %ebp
f010c845:	89 e5                	mov    %esp,%ebp
f010c847:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010c84a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c84d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c850:	83 ec 04             	sub    $0x4,%esp
f010c853:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010c856:	52                   	push   %edx
f010c857:	ff 75 0c             	pushl  0xc(%ebp)
f010c85a:	50                   	push   %eax
f010c85b:	e8 47 9a ff ff       	call   f01062a7 <__static_cpt>
f010c860:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010c863:	90                   	nop
f010c864:	c9                   	leave  
f010c865:	c3                   	ret    

f010c866 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010c866:	55                   	push   %ebp
f010c867:	89 e5                	mov    %esp,%ebp
f010c869:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010c86c:	83 ec 04             	sub    $0x4,%esp
f010c86f:	68 1c e8 12 f0       	push   $0xf012e81c
f010c874:	6a 50                	push   $0x50
f010c876:	68 ff e7 12 f0       	push   $0xf012e7ff
f010c87b:	e8 26 39 ff ff       	call   f01001a6 <_panic>

f010c880 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010c880:	55                   	push   %ebp
f010c881:	89 e5                	mov    %esp,%ebp
f010c883:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010c886:	83 ec 04             	sub    $0x4,%esp
f010c889:	68 50 e8 12 f0       	push   $0xf012e850
f010c88e:	6a 57                	push   $0x57
f010c890:	68 ff e7 12 f0       	push   $0xf012e7ff
f010c895:	e8 0c 39 ff ff       	call   f01001a6 <_panic>

f010c89a <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010c89a:	55                   	push   %ebp
f010c89b:	89 e5                	mov    %esp,%ebp
f010c89d:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c8a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c8a7:	e9 aa 00 00 00       	jmp    f010c956 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010c8ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c8af:	89 d0                	mov    %edx,%eax
f010c8b1:	c1 e0 02             	shl    $0x2,%eax
f010c8b4:	01 d0                	add    %edx,%eax
f010c8b6:	01 c0                	add    %eax,%eax
f010c8b8:	01 d0                	add    %edx,%eax
f010c8ba:	01 c0                	add    %eax,%eax
f010c8bc:	01 d0                	add    %edx,%eax
f010c8be:	c1 e0 02             	shl    $0x2,%eax
f010c8c1:	05 c0 1f 6d f0       	add    $0xf06d1fc0,%eax
f010c8c6:	83 ec 04             	sub    $0x4,%esp
f010c8c9:	6a 5c                	push   $0x5c
f010c8cb:	6a 00                	push   $0x0
f010c8cd:	50                   	push   %eax
f010c8ce:	e8 46 cf 01 00       	call   f0129819 <memset>
f010c8d3:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010c8d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c8d9:	89 d0                	mov    %edx,%eax
f010c8db:	c1 e0 02             	shl    $0x2,%eax
f010c8de:	01 d0                	add    %edx,%eax
f010c8e0:	01 c0                	add    %eax,%eax
f010c8e2:	01 d0                	add    %edx,%eax
f010c8e4:	01 c0                	add    %eax,%eax
f010c8e6:	01 d0                	add    %edx,%eax
f010c8e8:	c1 e0 02             	shl    $0x2,%eax
f010c8eb:	05 18 20 6d f0       	add    $0xf06d2018,%eax
f010c8f0:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010c8f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c8f6:	89 d0                	mov    %edx,%eax
f010c8f8:	c1 e0 02             	shl    $0x2,%eax
f010c8fb:	01 d0                	add    %edx,%eax
f010c8fd:	01 c0                	add    %eax,%eax
f010c8ff:	01 d0                	add    %edx,%eax
f010c901:	01 c0                	add    %eax,%eax
f010c903:	01 d0                	add    %edx,%eax
f010c905:	c1 e0 02             	shl    $0x2,%eax
f010c908:	05 04 20 6d f0       	add    $0xf06d2004,%eax
f010c90d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010c913:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c916:	89 d0                	mov    %edx,%eax
f010c918:	c1 e0 02             	shl    $0x2,%eax
f010c91b:	01 d0                	add    %edx,%eax
f010c91d:	01 c0                	add    %eax,%eax
f010c91f:	01 d0                	add    %edx,%eax
f010c921:	01 c0                	add    %eax,%eax
f010c923:	01 d0                	add    %edx,%eax
f010c925:	c1 e0 02             	shl    $0x2,%eax
f010c928:	05 08 20 6d f0       	add    $0xf06d2008,%eax
f010c92d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010c933:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c936:	89 d0                	mov    %edx,%eax
f010c938:	c1 e0 02             	shl    $0x2,%eax
f010c93b:	01 d0                	add    %edx,%eax
f010c93d:	01 c0                	add    %eax,%eax
f010c93f:	01 d0                	add    %edx,%eax
f010c941:	01 c0                	add    %eax,%eax
f010c943:	01 d0                	add    %edx,%eax
f010c945:	c1 e0 02             	shl    $0x2,%eax
f010c948:	05 10 20 6d f0       	add    $0xf06d2010,%eax
f010c94d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c953:	ff 45 f4             	incl   -0xc(%ebp)
f010c956:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c95a:	0f 8e 4c ff ff ff    	jle    f010c8ac <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010c960:	90                   	nop
f010c961:	c9                   	leave  
f010c962:	c3                   	ret    

f010c963 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010c963:	55                   	push   %ebp
f010c964:	89 e5                	mov    %esp,%ebp
f010c966:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010c969:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c970:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c977:	eb 2b                	jmp    f010c9a4 <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010c979:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c97c:	89 d0                	mov    %edx,%eax
f010c97e:	c1 e0 02             	shl    $0x2,%eax
f010c981:	01 d0                	add    %edx,%eax
f010c983:	01 c0                	add    %eax,%eax
f010c985:	01 d0                	add    %edx,%eax
f010c987:	01 c0                	add    %eax,%eax
f010c989:	01 d0                	add    %edx,%eax
f010c98b:	c1 e0 02             	shl    $0x2,%eax
f010c98e:	05 18 20 6d f0       	add    $0xf06d2018,%eax
f010c993:	8a 00                	mov    (%eax),%al
f010c995:	84 c0                	test   %al,%al
f010c997:	74 08                	je     f010c9a1 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010c999:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c99c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010c99f:	eb 09                	jmp    f010c9aa <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c9a1:	ff 45 f0             	incl   -0x10(%ebp)
f010c9a4:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010c9a8:	7e cf                	jle    f010c979 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010c9aa:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010c9ae:	75 14                	jne    f010c9c4 <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010c9b0:	83 ec 04             	sub    $0x4,%esp
f010c9b3:	68 94 e8 12 f0       	push   $0xf012e894
f010c9b8:	6a 53                	push   $0x53
f010c9ba:	68 e4 e8 12 f0       	push   $0xf012e8e4
f010c9bf:	e8 e2 37 ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010c9c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9c7:	89 d0                	mov    %edx,%eax
f010c9c9:	c1 e0 02             	shl    $0x2,%eax
f010c9cc:	01 d0                	add    %edx,%eax
f010c9ce:	01 c0                	add    %eax,%eax
f010c9d0:	01 d0                	add    %edx,%eax
f010c9d2:	01 c0                	add    %eax,%eax
f010c9d4:	01 d0                	add    %edx,%eax
f010c9d6:	c1 e0 02             	shl    $0x2,%eax
f010c9d9:	8d 90 c0 1f 6d f0    	lea    -0xf92e040(%eax),%edx
f010c9df:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9e2:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010c9e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9e7:	89 d0                	mov    %edx,%eax
f010c9e9:	c1 e0 02             	shl    $0x2,%eax
f010c9ec:	01 d0                	add    %edx,%eax
f010c9ee:	01 c0                	add    %eax,%eax
f010c9f0:	01 d0                	add    %edx,%eax
f010c9f2:	01 c0                	add    %eax,%eax
f010c9f4:	01 d0                	add    %edx,%eax
f010c9f6:	c1 e0 02             	shl    $0x2,%eax
f010c9f9:	05 18 20 6d f0       	add    $0xf06d2018,%eax
f010c9fe:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010ca01:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca04:	c9                   	leave  
f010ca05:	c3                   	ret    

f010ca06 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010ca06:	55                   	push   %ebp
f010ca07:	89 e5                	mov    %esp,%ebp
f010ca09:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010ca0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010ca13:	eb 7a                	jmp    f010ca8f <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010ca15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca18:	89 d0                	mov    %edx,%eax
f010ca1a:	c1 e0 02             	shl    $0x2,%eax
f010ca1d:	01 d0                	add    %edx,%eax
f010ca1f:	01 c0                	add    %eax,%eax
f010ca21:	01 d0                	add    %edx,%eax
f010ca23:	01 c0                	add    %eax,%eax
f010ca25:	01 d0                	add    %edx,%eax
f010ca27:	c1 e0 02             	shl    $0x2,%eax
f010ca2a:	05 18 20 6d f0       	add    $0xf06d2018,%eax
f010ca2f:	8a 00                	mov    (%eax),%al
f010ca31:	84 c0                	test   %al,%al
f010ca33:	75 56                	jne    f010ca8b <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010ca35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca38:	89 d0                	mov    %edx,%eax
f010ca3a:	c1 e0 02             	shl    $0x2,%eax
f010ca3d:	01 d0                	add    %edx,%eax
f010ca3f:	01 c0                	add    %eax,%eax
f010ca41:	01 d0                	add    %edx,%eax
f010ca43:	01 c0                	add    %eax,%eax
f010ca45:	01 d0                	add    %edx,%eax
f010ca47:	c1 e0 02             	shl    $0x2,%eax
f010ca4a:	05 c0 1f 6d f0       	add    $0xf06d1fc0,%eax
f010ca4f:	8b 00                	mov    (%eax),%eax
f010ca51:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ca54:	75 36                	jne    f010ca8c <get_semaphore_object_ID+0x86>
f010ca56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca59:	89 d0                	mov    %edx,%eax
f010ca5b:	c1 e0 02             	shl    $0x2,%eax
f010ca5e:	01 d0                	add    %edx,%eax
f010ca60:	01 c0                	add    %eax,%eax
f010ca62:	01 d0                	add    %edx,%eax
f010ca64:	01 c0                	add    %eax,%eax
f010ca66:	01 d0                	add    %edx,%eax
f010ca68:	c1 e0 02             	shl    $0x2,%eax
f010ca6b:	05 c0 1f 6d f0       	add    $0xf06d1fc0,%eax
f010ca70:	83 c0 04             	add    $0x4,%eax
f010ca73:	83 ec 08             	sub    $0x8,%esp
f010ca76:	50                   	push   %eax
f010ca77:	ff 75 0c             	pushl  0xc(%ebp)
f010ca7a:	e8 b8 cc 01 00       	call   f0129737 <strcmp>
f010ca7f:	83 c4 10             	add    $0x10,%esp
f010ca82:	85 c0                	test   %eax,%eax
f010ca84:	75 06                	jne    f010ca8c <get_semaphore_object_ID+0x86>
		{
			return i;
f010ca86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca89:	eb 0f                	jmp    f010ca9a <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010ca8b:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010ca8c:	ff 45 f4             	incl   -0xc(%ebp)
f010ca8f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010ca93:	7e 80                	jle    f010ca15 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010ca95:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010ca9a:	c9                   	leave  
f010ca9b:	c3                   	ret    

f010ca9c <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010ca9c:	55                   	push   %ebp
f010ca9d:	89 e5                	mov    %esp,%ebp
f010ca9f:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010caa2:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010caa6:	76 0a                	jbe    f010cab2 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010caa8:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010caad:	e9 ac 00 00 00       	jmp    f010cb5e <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010cab2:	8b 55 08             	mov    0x8(%ebp),%edx
f010cab5:	89 d0                	mov    %edx,%eax
f010cab7:	c1 e0 02             	shl    $0x2,%eax
f010caba:	01 d0                	add    %edx,%eax
f010cabc:	01 c0                	add    %eax,%eax
f010cabe:	01 d0                	add    %edx,%eax
f010cac0:	01 c0                	add    %eax,%eax
f010cac2:	01 d0                	add    %edx,%eax
f010cac4:	c1 e0 02             	shl    $0x2,%eax
f010cac7:	05 c0 1f 6d f0       	add    $0xf06d1fc0,%eax
f010cacc:	83 ec 04             	sub    $0x4,%esp
f010cacf:	6a 5c                	push   $0x5c
f010cad1:	6a 00                	push   $0x0
f010cad3:	50                   	push   %eax
f010cad4:	e8 40 cd 01 00       	call   f0129819 <memset>
f010cad9:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010cadc:	8b 55 08             	mov    0x8(%ebp),%edx
f010cadf:	89 d0                	mov    %edx,%eax
f010cae1:	c1 e0 02             	shl    $0x2,%eax
f010cae4:	01 d0                	add    %edx,%eax
f010cae6:	01 c0                	add    %eax,%eax
f010cae8:	01 d0                	add    %edx,%eax
f010caea:	01 c0                	add    %eax,%eax
f010caec:	01 d0                	add    %edx,%eax
f010caee:	c1 e0 02             	shl    $0x2,%eax
f010caf1:	05 18 20 6d f0       	add    $0xf06d2018,%eax
f010caf6:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010caf9:	8b 55 08             	mov    0x8(%ebp),%edx
f010cafc:	89 d0                	mov    %edx,%eax
f010cafe:	c1 e0 02             	shl    $0x2,%eax
f010cb01:	01 d0                	add    %edx,%eax
f010cb03:	01 c0                	add    %eax,%eax
f010cb05:	01 d0                	add    %edx,%eax
f010cb07:	01 c0                	add    %eax,%eax
f010cb09:	01 d0                	add    %edx,%eax
f010cb0b:	c1 e0 02             	shl    $0x2,%eax
f010cb0e:	05 04 20 6d f0       	add    $0xf06d2004,%eax
f010cb13:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010cb19:	8b 55 08             	mov    0x8(%ebp),%edx
f010cb1c:	89 d0                	mov    %edx,%eax
f010cb1e:	c1 e0 02             	shl    $0x2,%eax
f010cb21:	01 d0                	add    %edx,%eax
f010cb23:	01 c0                	add    %eax,%eax
f010cb25:	01 d0                	add    %edx,%eax
f010cb27:	01 c0                	add    %eax,%eax
f010cb29:	01 d0                	add    %edx,%eax
f010cb2b:	c1 e0 02             	shl    $0x2,%eax
f010cb2e:	05 08 20 6d f0       	add    $0xf06d2008,%eax
f010cb33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010cb39:	8b 55 08             	mov    0x8(%ebp),%edx
f010cb3c:	89 d0                	mov    %edx,%eax
f010cb3e:	c1 e0 02             	shl    $0x2,%eax
f010cb41:	01 d0                	add    %edx,%eax
f010cb43:	01 c0                	add    %eax,%eax
f010cb45:	01 d0                	add    %edx,%eax
f010cb47:	01 c0                	add    %eax,%eax
f010cb49:	01 d0                	add    %edx,%eax
f010cb4b:	c1 e0 02             	shl    $0x2,%eax
f010cb4e:	05 10 20 6d f0       	add    $0xf06d2010,%eax
f010cb53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010cb59:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cb5e:	c9                   	leave  
f010cb5f:	c3                   	ret    

f010cb60 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010cb60:	55                   	push   %ebp
f010cb61:	89 e5                	mov    %esp,%ebp
f010cb63:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010cb66:	83 ec 04             	sub    $0x4,%esp
f010cb69:	68 04 e9 12 f0       	push   $0xf012e904
f010cb6e:	68 94 00 00 00       	push   $0x94
f010cb73:	68 e4 e8 12 f0       	push   $0xf012e8e4
f010cb78:	e8 29 36 ff ff       	call   f01001a6 <_panic>

f010cb7d <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cb7d:	55                   	push   %ebp
f010cb7e:	89 e5                	mov    %esp,%ebp
f010cb80:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010cb83:	83 ec 04             	sub    $0x4,%esp
f010cb86:	68 34 e9 12 f0       	push   $0xf012e934
f010cb8b:	68 a6 00 00 00       	push   $0xa6
f010cb90:	68 e4 e8 12 f0       	push   $0xf012e8e4
f010cb95:	e8 0c 36 ff ff       	call   f01001a6 <_panic>

f010cb9a <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010cb9a:	55                   	push   %ebp
f010cb9b:	89 e5                	mov    %esp,%ebp
f010cb9d:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010cba0:	83 ec 04             	sub    $0x4,%esp
f010cba3:	68 60 e9 12 f0       	push   $0xf012e960
f010cba8:	68 ba 00 00 00       	push   $0xba
f010cbad:	68 e4 e8 12 f0       	push   $0xf012e8e4
f010cbb2:	e8 ef 35 ff ff       	call   f01001a6 <_panic>

f010cbb7 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010cbb7:	55                   	push   %ebp
f010cbb8:	89 e5                	mov    %esp,%ebp
f010cbba:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010cbbd:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010cbc4:	83 ec 0c             	sub    $0xc,%esp
f010cbc7:	ff 75 ec             	pushl  -0x14(%ebp)
f010cbca:	e8 c6 d5 01 00       	call   f012a195 <initialize_MemBlocksList>
f010cbcf:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010cbd2:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010cbd7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cbda:	74 17                	je     f010cbf3 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010cbdc:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010cbe1:	50                   	push   %eax
f010cbe2:	68 a0 e9 12 f0       	push   $0xf012e9a0
f010cbe7:	6a 1f                	push   $0x1f
f010cbe9:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cbee:	e8 b3 35 ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010cbf3:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010cbf8:	85 c0                	test   %eax,%eax
f010cbfa:	74 17                	je     f010cc13 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010cbfc:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010cc01:	50                   	push   %eax
f010cc02:	68 18 ea 12 f0       	push   $0xf012ea18
f010cc07:	6a 26                	push   $0x26
f010cc09:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cc0e:	e8 93 35 ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010cc13:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010cc18:	85 c0                	test   %eax,%eax
f010cc1a:	74 17                	je     f010cc33 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010cc1c:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010cc21:	50                   	push   %eax
f010cc22:	68 68 ea 12 f0       	push   $0xf012ea68
f010cc27:	6a 2c                	push   $0x2c
f010cc29:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cc2e:	e8 73 35 ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010cc33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010cc3a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010cc41:	a1 34 44 6d f0       	mov    0xf06d4434,%eax
f010cc46:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cc49:	eb 29                	jmp    f010cc74 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010cc4b:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010cc4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc51:	8b 50 0c             	mov    0xc(%eax),%edx
f010cc54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc57:	8b 40 08             	mov    0x8(%eax),%eax
f010cc5a:	83 ec 04             	sub    $0x4,%esp
f010cc5d:	52                   	push   %edx
f010cc5e:	50                   	push   %eax
f010cc5f:	68 b8 ea 12 f0       	push   $0xf012eab8
f010cc64:	e8 c4 3f ff ff       	call   f0100c2d <cprintf>
f010cc69:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010cc6c:	a1 3c 44 6d f0       	mov    0xf06d443c,%eax
f010cc71:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cc74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc78:	74 07                	je     f010cc81 <test_initialize_MemBlocksList+0xca>
f010cc7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc7d:	8b 00                	mov    (%eax),%eax
f010cc7f:	eb 05                	jmp    f010cc86 <test_initialize_MemBlocksList+0xcf>
f010cc81:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc86:	a3 3c 44 6d f0       	mov    %eax,0xf06d443c
f010cc8b:	a1 3c 44 6d f0       	mov    0xf06d443c,%eax
f010cc90:	85 c0                	test   %eax,%eax
f010cc92:	75 b7                	jne    f010cc4b <test_initialize_MemBlocksList+0x94>
f010cc94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc98:	75 b1                	jne    f010cc4b <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010cc9a:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010cc9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cca2:	74 14                	je     f010ccb8 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010cca4:	83 ec 04             	sub    $0x4,%esp
f010cca7:	68 d8 ea 12 f0       	push   $0xf012ead8
f010ccac:	6a 38                	push   $0x38
f010ccae:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ccb3:	e8 ee 34 ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ccb8:	83 ec 0c             	sub    $0xc,%esp
f010ccbb:	68 30 eb 12 f0       	push   $0xf012eb30
f010ccc0:	e8 68 3f ff ff       	call   f0100c2d <cprintf>
f010ccc5:	83 c4 10             	add    $0x10,%esp
}
f010ccc8:	90                   	nop
f010ccc9:	c9                   	leave  
f010ccca:	c3                   	ret    

f010cccb <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010cccb:	55                   	push   %ebp
f010cccc:	89 e5                	mov    %esp,%ebp
f010ccce:	57                   	push   %edi
f010cccf:	83 ec 74             	sub    $0x74,%esp
	uint32 numOfBlocks = 5;
f010ccd2:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ccd9:	83 ec 0c             	sub    $0xc,%esp
f010ccdc:	ff 75 f4             	pushl  -0xc(%ebp)
f010ccdf:	e8 b1 d4 01 00       	call   f012a195 <initialize_MemBlocksList>
f010cce4:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010cce7:	c7 05 30 4f 64 f0 00 	movl   $0x0,0xf0644f30
f010ccee:	00 00 00 
f010ccf1:	c7 05 34 4f 64 f0 00 	movl   $0x0,0xf0644f34
f010ccf8:	00 00 00 
f010ccfb:	c7 05 3c 4f 64 f0 00 	movl   $0x0,0xf0644f3c
f010cd02:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010cd05:	c7 05 00 44 6d f0 00 	movl   $0x0,0xf06d4400
f010cd0c:	00 00 00 
f010cd0f:	c7 05 04 44 6d f0 00 	movl   $0x0,0xf06d4404
f010cd16:	00 00 00 
f010cd19:	c7 05 0c 44 6d f0 00 	movl   $0x0,0xf06d440c
f010cd20:	00 00 00 

	uint32 blocksToInsertSVAs[4]={0,0,0,0};
f010cd23:	8d 55 dc             	lea    -0x24(%ebp),%edx
f010cd26:	b9 04 00 00 00       	mov    $0x4,%ecx
f010cd2b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd30:	89 d7                	mov    %edx,%edi
f010cd32:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[4]={0,0,0,0};
f010cd34:	8d 55 cc             	lea    -0x34(%ebp),%edx
f010cd37:	b9 04 00 00 00       	mov    $0x4,%ecx
f010cd3c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd41:	89 d7                	mov    %edx,%edi
f010cd43:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010cd45:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010cd4c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010cd53:	c7 45 e0 00 20 00 00 	movl   $0x2000,-0x20(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010cd5a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010cd61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd64:	89 45 c0             	mov    %eax,-0x40(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010cd67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cd6a:	89 45 c4             	mov    %eax,-0x3c(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010cd6d:	83 ec 0c             	sub    $0xc,%esp
f010cd70:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010cd73:	50                   	push   %eax
f010cd74:	e8 50 d4 01 00       	call   f012a1c9 <insert_sorted_allocList>
f010cd79:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010cd7c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010cd83:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010cd88:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cd8b:	74 14                	je     f010cda1 <test_insert_sorted_allocList+0xd6>
f010cd8d:	83 ec 04             	sub    $0x4,%esp
f010cd90:	68 7c eb 12 f0       	push   $0xf012eb7c
f010cd95:	6a 56                	push   $0x56
f010cd97:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cd9c:	e8 05 34 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010cda1:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010cda6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010cda9:	74 14                	je     f010cdbf <test_insert_sorted_allocList+0xf4>
f010cdab:	83 ec 04             	sub    $0x4,%esp
f010cdae:	68 c8 eb 12 f0       	push   $0xf012ebc8
f010cdb3:	6a 59                	push   $0x59
f010cdb5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cdba:	e8 e7 33 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010cdbf:	83 ec 0c             	sub    $0xc,%esp
f010cdc2:	ff 75 f0             	pushl  -0x10(%ebp)
f010cdc5:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010cdc8:	50                   	push   %eax
f010cdc9:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010cdcc:	50                   	push   %eax
f010cdcd:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010cdd0:	50                   	push   %eax
f010cdd1:	68 30 4f 64 f0       	push   $0xf0644f30
f010cdd6:	e8 9d 25 00 00       	call   f010f378 <check_list_data>
f010cddb:	83 c4 20             	add    $0x20,%esp
f010cdde:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010cde1:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010cde5:	74 14                	je     f010cdfb <test_insert_sorted_allocList+0x130>
f010cde7:	83 ec 04             	sub    $0x4,%esp
f010cdea:	68 18 ec 12 f0       	push   $0xf012ec18
f010cdef:	6a 5d                	push   $0x5d
f010cdf1:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cdf6:	e8 ab 33 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010cdfb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010cdfe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ce01:	74 14                	je     f010ce17 <test_insert_sorted_allocList+0x14c>
f010ce03:	83 ec 04             	sub    $0x4,%esp
f010ce06:	68 68 ec 12 f0       	push   $0xf012ec68
f010ce0b:	6a 5e                	push   $0x5e
f010ce0d:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ce12:	e8 8f 33 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[3] = (28*kilo);
f010ce17:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[3] = (2*kilo);
f010ce1e:	c7 45 d8 00 08 00 00 	movl   $0x800,-0x28(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[3];
f010ce25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce28:	89 45 b0             	mov    %eax,-0x50(%ebp)
	blockToInsert2.size = blocksToInsertSizes[3];
f010ce2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ce2e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010ce31:	83 ec 0c             	sub    $0xc,%esp
f010ce34:	8d 45 a8             	lea    -0x58(%ebp),%eax
f010ce37:	50                   	push   %eax
f010ce38:	e8 8c d3 01 00       	call   f012a1c9 <insert_sorted_allocList>
f010ce3d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010ce40:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ce47:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010ce4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ce4f:	74 14                	je     f010ce65 <test_insert_sorted_allocList+0x19a>
f010ce51:	83 ec 04             	sub    $0x4,%esp
f010ce54:	68 7c eb 12 f0       	push   $0xf012eb7c
f010ce59:	6a 6d                	push   $0x6d
f010ce5b:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ce60:	e8 41 33 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ce65:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010ce6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ce6d:	74 14                	je     f010ce83 <test_insert_sorted_allocList+0x1b8>
f010ce6f:	83 ec 04             	sub    $0x4,%esp
f010ce72:	68 c8 eb 12 f0       	push   $0xf012ebc8
f010ce77:	6a 70                	push   $0x70
f010ce79:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ce7e:	e8 23 33 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ce83:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ce8a:	83 ec 0c             	sub    $0xc,%esp
f010ce8d:	ff 75 f0             	pushl  -0x10(%ebp)
f010ce90:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ce93:	50                   	push   %eax
f010ce94:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010ce97:	50                   	push   %eax
f010ce98:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010ce9b:	50                   	push   %eax
f010ce9c:	68 30 4f 64 f0       	push   $0xf0644f30
f010cea1:	e8 d2 24 00 00       	call   f010f378 <check_list_data>
f010cea6:	83 c4 20             	add    $0x20,%esp
f010cea9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ceac:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ceb0:	74 14                	je     f010cec6 <test_insert_sorted_allocList+0x1fb>
f010ceb2:	83 ec 04             	sub    $0x4,%esp
f010ceb5:	68 18 ec 12 f0       	push   $0xf012ec18
f010ceba:	6a 75                	push   $0x75
f010cebc:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cec1:	e8 e0 32 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010cec6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010cec9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cecc:	74 14                	je     f010cee2 <test_insert_sorted_allocList+0x217>
f010cece:	83 ec 04             	sub    $0x4,%esp
f010ced1:	68 68 ec 12 f0       	push   $0xf012ec68
f010ced6:	6a 76                	push   $0x76
f010ced8:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cedd:	e8 c4 32 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010cee2:	c7 45 e4 00 40 00 00 	movl   $0x4000,-0x1c(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010cee9:	c7 45 d4 00 20 00 00 	movl   $0x2000,-0x2c(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010cef0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cef3:	89 45 a0             	mov    %eax,-0x60(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010cef6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010cef9:	89 45 a4             	mov    %eax,-0x5c(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010cefc:	83 ec 0c             	sub    $0xc,%esp
f010ceff:	8d 45 98             	lea    -0x68(%ebp),%eax
f010cf02:	50                   	push   %eax
f010cf03:	e8 c1 d2 01 00       	call   f012a1c9 <insert_sorted_allocList>
f010cf08:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010cf0b:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010cf12:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010cf17:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cf1a:	74 17                	je     f010cf33 <test_insert_sorted_allocList+0x268>
f010cf1c:	83 ec 04             	sub    $0x4,%esp
f010cf1f:	68 7c eb 12 f0       	push   $0xf012eb7c
f010cf24:	68 85 00 00 00       	push   $0x85
f010cf29:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cf2e:	e8 73 32 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010cf33:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010cf38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010cf3b:	74 17                	je     f010cf54 <test_insert_sorted_allocList+0x289>
f010cf3d:	83 ec 04             	sub    $0x4,%esp
f010cf40:	68 b4 ec 12 f0       	push   $0xf012ecb4
f010cf45:	68 88 00 00 00       	push   $0x88
f010cf4a:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cf4f:	e8 52 32 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010cf54:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010cf5b:	83 ec 0c             	sub    $0xc,%esp
f010cf5e:	ff 75 f0             	pushl  -0x10(%ebp)
f010cf61:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010cf64:	50                   	push   %eax
f010cf65:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010cf68:	50                   	push   %eax
f010cf69:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010cf6c:	50                   	push   %eax
f010cf6d:	68 30 4f 64 f0       	push   $0xf0644f30
f010cf72:	e8 01 24 00 00       	call   f010f378 <check_list_data>
f010cf77:	83 c4 20             	add    $0x20,%esp
f010cf7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010cf7d:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010cf81:	74 17                	je     f010cf9a <test_insert_sorted_allocList+0x2cf>
f010cf83:	83 ec 04             	sub    $0x4,%esp
f010cf86:	68 18 ec 12 f0       	push   $0xf012ec18
f010cf8b:	68 8d 00 00 00       	push   $0x8d
f010cf90:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cf95:	e8 0c 32 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010cf9a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010cf9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cfa0:	74 17                	je     f010cfb9 <test_insert_sorted_allocList+0x2ee>
f010cfa2:	83 ec 04             	sub    $0x4,%esp
f010cfa5:	68 68 ec 12 f0       	push   $0xf012ec68
f010cfaa:	68 8e 00 00 00       	push   $0x8e
f010cfaf:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010cfb4:	e8 ed 31 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010cfb9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010cfc0:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010cfc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cfca:	89 45 90             	mov    %eax,-0x70(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010cfcd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010cfd0:	89 45 94             	mov    %eax,-0x6c(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010cfd3:	83 ec 0c             	sub    $0xc,%esp
f010cfd6:	8d 45 88             	lea    -0x78(%ebp),%eax
f010cfd9:	50                   	push   %eax
f010cfda:	e8 ea d1 01 00       	call   f012a1c9 <insert_sorted_allocList>
f010cfdf:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010cfe2:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010cfe9:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010cfee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cff1:	74 17                	je     f010d00a <test_insert_sorted_allocList+0x33f>
f010cff3:	83 ec 04             	sub    $0x4,%esp
f010cff6:	68 7c eb 12 f0       	push   $0xf012eb7c
f010cffb:	68 9c 00 00 00       	push   $0x9c
f010d000:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d005:	e8 9c 31 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d00a:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010d00f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d012:	74 17                	je     f010d02b <test_insert_sorted_allocList+0x360>
f010d014:	83 ec 04             	sub    $0x4,%esp
f010d017:	68 c8 eb 12 f0       	push   $0xf012ebc8
f010d01c:	68 9f 00 00 00       	push   $0x9f
f010d021:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d026:	e8 7b 31 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d02b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d032:	83 ec 0c             	sub    $0xc,%esp
f010d035:	ff 75 f0             	pushl  -0x10(%ebp)
f010d038:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010d03b:	50                   	push   %eax
f010d03c:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d03f:	50                   	push   %eax
f010d040:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010d043:	50                   	push   %eax
f010d044:	68 30 4f 64 f0       	push   $0xf0644f30
f010d049:	e8 2a 23 00 00       	call   f010f378 <check_list_data>
f010d04e:	83 c4 20             	add    $0x20,%esp
f010d051:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d054:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d058:	74 17                	je     f010d071 <test_insert_sorted_allocList+0x3a6>
f010d05a:	83 ec 04             	sub    $0x4,%esp
f010d05d:	68 18 ec 12 f0       	push   $0xf012ec18
f010d062:	68 a4 00 00 00       	push   $0xa4
f010d067:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d06c:	e8 35 31 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d071:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d074:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d077:	74 17                	je     f010d090 <test_insert_sorted_allocList+0x3c5>
f010d079:	83 ec 04             	sub    $0x4,%esp
f010d07c:	68 68 ec 12 f0       	push   $0xf012ec68
f010d081:	68 a5 00 00 00       	push   $0xa5
f010d086:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d08b:	e8 16 31 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010d090:	83 ec 0c             	sub    $0xc,%esp
f010d093:	68 04 ed 12 f0       	push   $0xf012ed04
f010d098:	e8 90 3b ff ff       	call   f0100c2d <cprintf>
f010d09d:	83 c4 10             	add    $0x10,%esp
}
f010d0a0:	90                   	nop
f010d0a1:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010d0a4:	c9                   	leave  
f010d0a5:	c3                   	ret    

f010d0a6 <test_find_block>:

void test_find_block()
{
f010d0a6:	55                   	push   %ebp
f010d0a7:	89 e5                	mov    %esp,%ebp
f010d0a9:	57                   	push   %edi
f010d0aa:	56                   	push   %esi
f010d0ab:	53                   	push   %ebx
f010d0ac:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010d0b2:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d0b9:	83 ec 0c             	sub    $0xc,%esp
f010d0bc:	ff 75 e0             	pushl  -0x20(%ebp)
f010d0bf:	e8 d1 d0 01 00       	call   f012a195 <initialize_MemBlocksList>
f010d0c4:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010d0c7:	c7 05 00 44 6d f0 00 	movl   $0x0,0xf06d4400
f010d0ce:	00 00 00 
f010d0d1:	c7 05 04 44 6d f0 00 	movl   $0x0,0xf06d4404
f010d0d8:	00 00 00 
f010d0db:	c7 05 0c 44 6d f0 00 	movl   $0x0,0xf06d440c
f010d0e2:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010d0e5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d0e8:	bb 7c ee 12 f0       	mov    $0xf012ee7c,%ebx
f010d0ed:	ba 06 00 00 00       	mov    $0x6,%edx
f010d0f2:	89 c7                	mov    %eax,%edi
f010d0f4:	89 de                	mov    %ebx,%esi
f010d0f6:	89 d1                	mov    %edx,%ecx
f010d0f8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010d0fa:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010d0fd:	bb 94 ee 12 f0       	mov    $0xf012ee94,%ebx
f010d102:	ba 06 00 00 00       	mov    $0x6,%edx
f010d107:	89 c7                	mov    %eax,%edi
f010d109:	89 de                	mov    %ebx,%esi
f010d10b:	89 d1                	mov    %edx,%ecx
f010d10d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010d10f:	c7 05 30 4f 64 f0 00 	movl   $0x0,0xf0644f30
f010d116:	00 00 00 
f010d119:	c7 05 34 4f 64 f0 00 	movl   $0x0,0xf0644f34
f010d120:	00 00 00 
f010d123:	c7 05 3c 4f 64 f0 00 	movl   $0x0,0xf0644f3c
f010d12a:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010d12d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010d134:	e9 5f 01 00 00       	jmp    f010d298 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010d139:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d13c:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010d140:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d143:	c1 e2 04             	shl    $0x4,%edx
f010d146:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d149:	01 da                	add    %ebx,%edx
f010d14b:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010d151:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010d153:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d156:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010d15a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d15d:	c1 e2 04             	shl    $0x4,%edx
f010d160:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d163:	01 f2                	add    %esi,%edx
f010d165:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010d16b:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010d16d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d171:	0f 85 92 00 00 00    	jne    f010d209 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010d177:	a1 30 4f 64 f0       	mov    0xf0644f30,%eax
f010d17c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d17f:	c1 e2 04             	shl    $0x4,%edx
f010d182:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010d185:	01 fa                	add    %edi,%edx
f010d187:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010d18d:	89 02                	mov    %eax,(%edx)
f010d18f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d192:	c1 e0 04             	shl    $0x4,%eax
f010d195:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d198:	01 d8                	add    %ebx,%eax
f010d19a:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010d19f:	8b 00                	mov    (%eax),%eax
f010d1a1:	85 c0                	test   %eax,%eax
f010d1a3:	74 18                	je     f010d1bd <test_find_block+0x117>
f010d1a5:	a1 30 4f 64 f0       	mov    0xf0644f30,%eax
f010d1aa:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010d1b0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010d1b3:	c1 e1 04             	shl    $0x4,%ecx
f010d1b6:	01 ca                	add    %ecx,%edx
f010d1b8:	89 50 04             	mov    %edx,0x4(%eax)
f010d1bb:	eb 13                	jmp    f010d1d0 <test_find_block+0x12a>
f010d1bd:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010d1c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d1c6:	c1 e2 04             	shl    $0x4,%edx
f010d1c9:	01 d0                	add    %edx,%eax
f010d1cb:	a3 34 4f 64 f0       	mov    %eax,0xf0644f34
f010d1d0:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010d1d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d1d9:	c1 e2 04             	shl    $0x4,%edx
f010d1dc:	01 d0                	add    %edx,%eax
f010d1de:	a3 30 4f 64 f0       	mov    %eax,0xf0644f30
f010d1e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d1e6:	c1 e0 04             	shl    $0x4,%eax
f010d1e9:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d1ec:	01 f0                	add    %esi,%eax
f010d1ee:	2d 98 00 00 00       	sub    $0x98,%eax
f010d1f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d1f9:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010d1fe:	40                   	inc    %eax
f010d1ff:	a3 3c 4f 64 f0       	mov    %eax,0xf0644f3c
f010d204:	e9 8c 00 00 00       	jmp    f010d295 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010d209:	a1 34 4f 64 f0       	mov    0xf0644f34,%eax
f010d20e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d211:	c1 e2 04             	shl    $0x4,%edx
f010d214:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010d217:	01 fa                	add    %edi,%edx
f010d219:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010d21f:	89 02                	mov    %eax,(%edx)
f010d221:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d224:	c1 e0 04             	shl    $0x4,%eax
f010d227:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d22a:	01 d8                	add    %ebx,%eax
f010d22c:	2d 98 00 00 00       	sub    $0x98,%eax
f010d231:	8b 00                	mov    (%eax),%eax
f010d233:	85 c0                	test   %eax,%eax
f010d235:	74 17                	je     f010d24e <test_find_block+0x1a8>
f010d237:	a1 34 4f 64 f0       	mov    0xf0644f34,%eax
f010d23c:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010d242:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010d245:	c1 e1 04             	shl    $0x4,%ecx
f010d248:	01 ca                	add    %ecx,%edx
f010d24a:	89 10                	mov    %edx,(%eax)
f010d24c:	eb 13                	jmp    f010d261 <test_find_block+0x1bb>
f010d24e:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010d254:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d257:	c1 e2 04             	shl    $0x4,%edx
f010d25a:	01 d0                	add    %edx,%eax
f010d25c:	a3 30 4f 64 f0       	mov    %eax,0xf0644f30
f010d261:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010d267:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d26a:	c1 e2 04             	shl    $0x4,%edx
f010d26d:	01 d0                	add    %edx,%eax
f010d26f:	a3 34 4f 64 f0       	mov    %eax,0xf0644f34
f010d274:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d277:	c1 e0 04             	shl    $0x4,%eax
f010d27a:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d27d:	01 f0                	add    %esi,%eax
f010d27f:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010d284:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d28a:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010d28f:	40                   	inc    %eax
f010d290:	a3 3c 4f 64 f0       	mov    %eax,0xf0644f3c
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010d295:	ff 45 e4             	incl   -0x1c(%ebp)
f010d298:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010d29c:	0f 8e 97 fe ff ff    	jle    f010d139 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010d2a2:	83 ec 08             	sub    $0x8,%esp
f010d2a5:	68 00 10 00 00       	push   $0x1000
f010d2aa:	68 30 4f 64 f0       	push   $0xf0644f30
f010d2af:	e8 fb ce 01 00       	call   f012a1af <find_block>
f010d2b4:	83 c4 10             	add    $0x10,%esp
f010d2b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010d2ba:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d2be:	74 17                	je     f010d2d7 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010d2c0:	83 ec 04             	sub    $0x4,%esp
f010d2c3:	68 44 ed 12 f0       	push   $0xf012ed44
f010d2c8:	68 c6 00 00 00       	push   $0xc6
f010d2cd:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d2d2:	e8 cf 2e ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010d2d7:	83 ec 08             	sub    $0x8,%esp
f010d2da:	6a 00                	push   $0x0
f010d2dc:	68 30 4f 64 f0       	push   $0xf0644f30
f010d2e1:	e8 c9 ce 01 00       	call   f012a1af <find_block>
f010d2e6:	83 c4 10             	add    $0x10,%esp
f010d2e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010d2ec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d2f0:	74 17                	je     f010d309 <test_find_block+0x263>
f010d2f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d2f5:	8b 40 0c             	mov    0xc(%eax),%eax
f010d2f8:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010d2fd:	75 0a                	jne    f010d309 <test_find_block+0x263>
f010d2ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d302:	8b 40 08             	mov    0x8(%eax),%eax
f010d305:	85 c0                	test   %eax,%eax
f010d307:	74 17                	je     f010d320 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010d309:	83 ec 04             	sub    $0x4,%esp
f010d30c:	68 a8 ed 12 f0       	push   $0xf012eda8
f010d311:	68 cb 00 00 00       	push   $0xcb
f010d316:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d31b:	e8 86 2e ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010d320:	83 ec 08             	sub    $0x8,%esp
f010d323:	68 00 70 00 00       	push   $0x7000
f010d328:	68 30 4f 64 f0       	push   $0xf0644f30
f010d32d:	e8 7d ce 01 00       	call   f012a1af <find_block>
f010d332:	83 c4 10             	add    $0x10,%esp
f010d335:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010d338:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d33c:	74 1a                	je     f010d358 <test_find_block+0x2b2>
f010d33e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d341:	8b 40 0c             	mov    0xc(%eax),%eax
f010d344:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010d349:	75 0d                	jne    f010d358 <test_find_block+0x2b2>
f010d34b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d34e:	8b 40 08             	mov    0x8(%eax),%eax
f010d351:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010d356:	74 17                	je     f010d36f <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010d358:	83 ec 04             	sub    $0x4,%esp
f010d35b:	68 a8 ed 12 f0       	push   $0xf012eda8
f010d360:	68 d0 00 00 00       	push   $0xd0
f010d365:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d36a:	e8 37 2e ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010d36f:	83 ec 08             	sub    $0x8,%esp
f010d372:	68 00 a4 01 00       	push   $0x1a400
f010d377:	68 30 4f 64 f0       	push   $0xf0644f30
f010d37c:	e8 2e ce 01 00       	call   f012a1af <find_block>
f010d381:	83 c4 10             	add    $0x10,%esp
f010d384:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010d387:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d38b:	74 1a                	je     f010d3a7 <test_find_block+0x301>
f010d38d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d390:	8b 40 0c             	mov    0xc(%eax),%eax
f010d393:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010d398:	75 0d                	jne    f010d3a7 <test_find_block+0x301>
f010d39a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d39d:	8b 40 08             	mov    0x8(%eax),%eax
f010d3a0:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010d3a5:	74 17                	je     f010d3be <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010d3a7:	83 ec 04             	sub    $0x4,%esp
f010d3aa:	68 a8 ed 12 f0       	push   $0xf012eda8
f010d3af:	68 d5 00 00 00       	push   $0xd5
f010d3b4:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d3b9:	e8 e8 2d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010d3be:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010d3c3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010d3c6:	75 09                	jne    f010d3d1 <test_find_block+0x32b>
f010d3c8:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d3cd:	85 c0                	test   %eax,%eax
f010d3cf:	74 17                	je     f010d3e8 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010d3d1:	83 ec 04             	sub    $0x4,%esp
f010d3d4:	68 dc ed 12 f0       	push   $0xf012eddc
f010d3d9:	68 da 00 00 00       	push   $0xda
f010d3de:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d3e3:	e8 be 2d ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010d3e8:	83 ec 0c             	sub    $0xc,%esp
f010d3eb:	68 40 ee 12 f0       	push   $0xf012ee40
f010d3f0:	e8 38 38 ff ff       	call   f0100c2d <cprintf>
f010d3f5:	83 c4 10             	add    $0x10,%esp
}
f010d3f8:	90                   	nop
f010d3f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010d3fc:	5b                   	pop    %ebx
f010d3fd:	5e                   	pop    %esi
f010d3fe:	5f                   	pop    %edi
f010d3ff:	5d                   	pop    %ebp
f010d400:	c3                   	ret    

f010d401 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010d401:	55                   	push   %ebp
f010d402:	89 e5                	mov    %esp,%ebp
f010d404:	57                   	push   %edi
f010d405:	56                   	push   %esi
f010d406:	53                   	push   %ebx
f010d407:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010d40d:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d414:	83 ec 0c             	sub    $0xc,%esp
f010d417:	ff 75 e0             	pushl  -0x20(%ebp)
f010d41a:	e8 76 cd 01 00       	call   f012a195 <initialize_MemBlocksList>
f010d41f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010d422:	c7 05 30 4f 64 f0 00 	movl   $0x0,0xf0644f30
f010d429:	00 00 00 
f010d42c:	c7 05 34 4f 64 f0 00 	movl   $0x0,0xf0644f34
f010d433:	00 00 00 
f010d436:	c7 05 3c 4f 64 f0 00 	movl   $0x0,0xf0644f3c
f010d43d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010d440:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010d443:	bb 20 f1 12 f0       	mov    $0xf012f120,%ebx
f010d448:	ba 08 00 00 00       	mov    $0x8,%edx
f010d44d:	89 c7                	mov    %eax,%edi
f010d44f:	89 de                	mov    %ebx,%esi
f010d451:	89 d1                	mov    %edx,%ecx
f010d453:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010d455:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010d458:	bb 40 f1 12 f0       	mov    $0xf012f140,%ebx
f010d45d:	ba 08 00 00 00       	mov    $0x8,%edx
f010d462:	89 c7                	mov    %eax,%edi
f010d464:	89 de                	mov    %ebx,%esi
f010d466:	89 d1                	mov    %edx,%ecx
f010d468:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010d46a:	c7 05 00 44 6d f0 00 	movl   $0x0,0xf06d4400
f010d471:	00 00 00 
f010d474:	c7 05 04 44 6d f0 00 	movl   $0x0,0xf06d4404
f010d47b:	00 00 00 
f010d47e:	c7 05 0c 44 6d f0 00 	movl   $0x0,0xf06d440c
f010d485:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010d488:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010d48f:	e9 5f 01 00 00       	jmp    f010d5f3 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010d494:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d497:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010d49b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d49e:	c1 e2 04             	shl    $0x4,%edx
f010d4a1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d4a4:	01 da                	add    %ebx,%edx
f010d4a6:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010d4ac:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010d4ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d4b1:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010d4b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d4b8:	c1 e2 04             	shl    $0x4,%edx
f010d4bb:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d4be:	01 f2                	add    %esi,%edx
f010d4c0:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010d4c6:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010d4c8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d4cc:	0f 85 92 00 00 00    	jne    f010d564 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010d4d2:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f010d4d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d4da:	c1 e2 04             	shl    $0x4,%edx
f010d4dd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010d4e0:	01 fa                	add    %edi,%edx
f010d4e2:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010d4e8:	89 02                	mov    %eax,(%edx)
f010d4ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d4ed:	c1 e0 04             	shl    $0x4,%eax
f010d4f0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d4f3:	01 d8                	add    %ebx,%eax
f010d4f5:	2d d4 00 00 00       	sub    $0xd4,%eax
f010d4fa:	8b 00                	mov    (%eax),%eax
f010d4fc:	85 c0                	test   %eax,%eax
f010d4fe:	74 18                	je     f010d518 <test_alloc_block_FF+0x117>
f010d500:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f010d505:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010d50b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010d50e:	c1 e1 04             	shl    $0x4,%ecx
f010d511:	01 ca                	add    %ecx,%edx
f010d513:	89 50 04             	mov    %edx,0x4(%eax)
f010d516:	eb 13                	jmp    f010d52b <test_alloc_block_FF+0x12a>
f010d518:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010d51e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d521:	c1 e2 04             	shl    $0x4,%edx
f010d524:	01 d0                	add    %edx,%eax
f010d526:	a3 04 44 6d f0       	mov    %eax,0xf06d4404
f010d52b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010d531:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d534:	c1 e2 04             	shl    $0x4,%edx
f010d537:	01 d0                	add    %edx,%eax
f010d539:	a3 00 44 6d f0       	mov    %eax,0xf06d4400
f010d53e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d541:	c1 e0 04             	shl    $0x4,%eax
f010d544:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d547:	01 f0                	add    %esi,%eax
f010d549:	2d d0 00 00 00       	sub    $0xd0,%eax
f010d54e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d554:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d559:	40                   	inc    %eax
f010d55a:	a3 0c 44 6d f0       	mov    %eax,0xf06d440c
f010d55f:	e9 8c 00 00 00       	jmp    f010d5f0 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010d564:	a1 04 44 6d f0       	mov    0xf06d4404,%eax
f010d569:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d56c:	c1 e2 04             	shl    $0x4,%edx
f010d56f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010d572:	01 fa                	add    %edi,%edx
f010d574:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010d57a:	89 02                	mov    %eax,(%edx)
f010d57c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d57f:	c1 e0 04             	shl    $0x4,%eax
f010d582:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d585:	01 d8                	add    %ebx,%eax
f010d587:	2d d0 00 00 00       	sub    $0xd0,%eax
f010d58c:	8b 00                	mov    (%eax),%eax
f010d58e:	85 c0                	test   %eax,%eax
f010d590:	74 17                	je     f010d5a9 <test_alloc_block_FF+0x1a8>
f010d592:	a1 04 44 6d f0       	mov    0xf06d4404,%eax
f010d597:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010d59d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010d5a0:	c1 e1 04             	shl    $0x4,%ecx
f010d5a3:	01 ca                	add    %ecx,%edx
f010d5a5:	89 10                	mov    %edx,(%eax)
f010d5a7:	eb 13                	jmp    f010d5bc <test_alloc_block_FF+0x1bb>
f010d5a9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010d5af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5b2:	c1 e2 04             	shl    $0x4,%edx
f010d5b5:	01 d0                	add    %edx,%eax
f010d5b7:	a3 00 44 6d f0       	mov    %eax,0xf06d4400
f010d5bc:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010d5c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d5c5:	c1 e2 04             	shl    $0x4,%edx
f010d5c8:	01 d0                	add    %edx,%eax
f010d5ca:	a3 04 44 6d f0       	mov    %eax,0xf06d4404
f010d5cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d5d2:	c1 e0 04             	shl    $0x4,%eax
f010d5d5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d5d8:	01 f0                	add    %esi,%eax
f010d5da:	2d d4 00 00 00       	sub    $0xd4,%eax
f010d5df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d5e5:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d5ea:	40                   	inc    %eax
f010d5eb:	a3 0c 44 6d f0       	mov    %eax,0xf06d440c
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010d5f0:	ff 45 e4             	incl   -0x1c(%ebp)
f010d5f3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010d5f7:	0f 8e 97 fe ff ff    	jle    f010d494 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010d5fd:	83 ec 0c             	sub    $0xc,%esp
f010d600:	68 00 00 30 00       	push   $0x300000
f010d605:	e8 d9 cb 01 00       	call   f012a1e3 <alloc_block_FF>
f010d60a:	83 c4 10             	add    $0x10,%esp
f010d60d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010d610:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d614:	74 17                	je     f010d62d <test_alloc_block_FF+0x22c>
f010d616:	83 ec 04             	sub    $0x4,%esp
f010d619:	68 ac ee 12 f0       	push   $0xf012eeac
f010d61e:	68 fd 00 00 00       	push   $0xfd
f010d623:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d628:	e8 79 2b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d62d:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010d632:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010d635:	75 13                	jne    f010d64a <test_alloc_block_FF+0x249>
f010d637:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d63c:	83 f8 08             	cmp    $0x8,%eax
f010d63f:	75 09                	jne    f010d64a <test_alloc_block_FF+0x249>
f010d641:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010d646:	85 c0                	test   %eax,%eax
f010d648:	74 17                	je     f010d661 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010d64a:	83 ec 04             	sub    $0x4,%esp
f010d64d:	68 20 ef 12 f0       	push   $0xf012ef20
f010d652:	68 01 01 00 00       	push   $0x101
f010d657:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d65c:	e8 45 2b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010d661:	83 ec 0c             	sub    $0xc,%esp
f010d664:	68 00 24 00 00       	push   $0x2400
f010d669:	e8 75 cb 01 00       	call   f012a1e3 <alloc_block_FF>
f010d66e:	83 c4 10             	add    $0x10,%esp
f010d671:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010d674:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d678:	74 1a                	je     f010d694 <test_alloc_block_FF+0x293>
f010d67a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d67d:	8b 40 0c             	mov    0xc(%eax),%eax
f010d680:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010d685:	75 0d                	jne    f010d694 <test_alloc_block_FF+0x293>
f010d687:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d68a:	8b 40 08             	mov    0x8(%eax),%eax
f010d68d:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010d692:	74 17                	je     f010d6ab <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010d694:	83 ec 04             	sub    $0x4,%esp
f010d697:	68 98 ef 12 f0       	push   $0xf012ef98
f010d69c:	68 09 01 00 00       	push   $0x109
f010d6a1:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d6a6:	e8 fb 2a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d6ab:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010d6b0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010d6b3:	75 13                	jne    f010d6c8 <test_alloc_block_FF+0x2c7>
f010d6b5:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d6ba:	83 f8 07             	cmp    $0x7,%eax
f010d6bd:	75 09                	jne    f010d6c8 <test_alloc_block_FF+0x2c7>
f010d6bf:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010d6c4:	85 c0                	test   %eax,%eax
f010d6c6:	74 17                	je     f010d6df <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010d6c8:	83 ec 04             	sub    $0x4,%esp
f010d6cb:	68 dc ef 12 f0       	push   $0xf012efdc
f010d6d0:	68 0d 01 00 00       	push   $0x10d
f010d6d5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d6da:	e8 c7 2a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010d6df:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010d6e6:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010d6e9:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010d6f0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010d6f7:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010d6fe:	83 ec 0c             	sub    $0xc,%esp
f010d701:	ff 75 d8             	pushl  -0x28(%ebp)
f010d704:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010d70a:	50                   	push   %eax
f010d70b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010d70e:	50                   	push   %eax
f010d70f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010d712:	50                   	push   %eax
f010d713:	68 00 44 6d f0       	push   $0xf06d4400
f010d718:	e8 5b 1c 00 00       	call   f010f378 <check_list_data>
f010d71d:	83 c4 20             	add    $0x20,%esp
f010d720:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010d723:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010d727:	74 17                	je     f010d740 <test_alloc_block_FF+0x33f>
f010d729:	83 ec 04             	sub    $0x4,%esp
f010d72c:	68 40 f0 12 f0       	push   $0xf012f040
f010d731:	68 15 01 00 00       	push   $0x115
f010d736:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d73b:	e8 66 2a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010d740:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010d746:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d749:	74 17                	je     f010d762 <test_alloc_block_FF+0x361>
f010d74b:	83 ec 04             	sub    $0x4,%esp
f010d74e:	68 8c f0 12 f0       	push   $0xf012f08c
f010d753:	68 16 01 00 00       	push   $0x116
f010d758:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d75d:	e8 44 2a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010d762:	83 ec 0c             	sub    $0xc,%esp
f010d765:	68 00 00 10 00       	push   $0x100000
f010d76a:	e8 74 ca 01 00       	call   f012a1e3 <alloc_block_FF>
f010d76f:	83 c4 10             	add    $0x10,%esp
f010d772:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010d775:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010d779:	74 1a                	je     f010d795 <test_alloc_block_FF+0x394>
f010d77b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d77e:	8b 40 0c             	mov    0xc(%eax),%eax
f010d781:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010d786:	75 0d                	jne    f010d795 <test_alloc_block_FF+0x394>
f010d788:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d78b:	8b 40 08             	mov    0x8(%eax),%eax
f010d78e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010d793:	74 17                	je     f010d7ac <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010d795:	83 ec 04             	sub    $0x4,%esp
f010d798:	68 98 ef 12 f0       	push   $0xf012ef98
f010d79d:	68 1e 01 00 00       	push   $0x11e
f010d7a2:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d7a7:	e8 fa 29 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d7ac:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010d7b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d7b4:	4a                   	dec    %edx
f010d7b5:	39 d0                	cmp    %edx,%eax
f010d7b7:	75 13                	jne    f010d7cc <test_alloc_block_FF+0x3cb>
f010d7b9:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d7be:	83 f8 07             	cmp    $0x7,%eax
f010d7c1:	75 09                	jne    f010d7cc <test_alloc_block_FF+0x3cb>
f010d7c3:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010d7c8:	85 c0                	test   %eax,%eax
f010d7ca:	74 17                	je     f010d7e3 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010d7cc:	83 ec 04             	sub    $0x4,%esp
f010d7cf:	68 dc ef 12 f0       	push   $0xf012efdc
f010d7d4:	68 22 01 00 00       	push   $0x122
f010d7d9:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d7de:	e8 c3 29 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010d7e3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010d7ea:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010d7ed:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010d7f4:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010d7fb:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010d802:	83 ec 0c             	sub    $0xc,%esp
f010d805:	ff 75 d8             	pushl  -0x28(%ebp)
f010d808:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010d80e:	50                   	push   %eax
f010d80f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010d812:	50                   	push   %eax
f010d813:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010d816:	50                   	push   %eax
f010d817:	68 00 44 6d f0       	push   $0xf06d4400
f010d81c:	e8 57 1b 00 00       	call   f010f378 <check_list_data>
f010d821:	83 c4 20             	add    $0x20,%esp
f010d824:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010d827:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010d82b:	74 17                	je     f010d844 <test_alloc_block_FF+0x443>
f010d82d:	83 ec 04             	sub    $0x4,%esp
f010d830:	68 40 f0 12 f0       	push   $0xf012f040
f010d835:	68 2a 01 00 00       	push   $0x12a
f010d83a:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d83f:	e8 62 29 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010d844:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010d84a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d84d:	74 17                	je     f010d866 <test_alloc_block_FF+0x465>
f010d84f:	83 ec 04             	sub    $0x4,%esp
f010d852:	68 8c f0 12 f0       	push   $0xf012f08c
f010d857:	68 2b 01 00 00       	push   $0x12b
f010d85c:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010d861:	e8 40 29 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010d866:	83 ec 0c             	sub    $0xc,%esp
f010d869:	68 d8 f0 12 f0       	push   $0xf012f0d8
f010d86e:	e8 ba 33 ff ff       	call   f0100c2d <cprintf>
f010d873:	83 c4 10             	add    $0x10,%esp
}
f010d876:	90                   	nop
f010d877:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010d87a:	5b                   	pop    %ebx
f010d87b:	5e                   	pop    %esi
f010d87c:	5f                   	pop    %edi
f010d87d:	5d                   	pop    %ebp
f010d87e:	c3                   	ret    

f010d87f <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010d87f:	55                   	push   %ebp
f010d880:	89 e5                	mov    %esp,%ebp
f010d882:	57                   	push   %edi
f010d883:	56                   	push   %esi
f010d884:	53                   	push   %ebx
f010d885:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010d88b:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d892:	83 ec 0c             	sub    $0xc,%esp
f010d895:	ff 75 e0             	pushl  -0x20(%ebp)
f010d898:	e8 f8 c8 01 00       	call   f012a195 <initialize_MemBlocksList>
f010d89d:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010d8a0:	c7 05 30 4f 64 f0 00 	movl   $0x0,0xf0644f30
f010d8a7:	00 00 00 
f010d8aa:	c7 05 34 4f 64 f0 00 	movl   $0x0,0xf0644f34
f010d8b1:	00 00 00 
f010d8b4:	c7 05 3c 4f 64 f0 00 	movl   $0x0,0xf0644f3c
f010d8bb:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010d8be:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010d8c1:	bb 54 f3 12 f0       	mov    $0xf012f354,%ebx
f010d8c6:	ba 07 00 00 00       	mov    $0x7,%edx
f010d8cb:	89 c7                	mov    %eax,%edi
f010d8cd:	89 de                	mov    %ebx,%esi
f010d8cf:	89 d1                	mov    %edx,%ecx
f010d8d1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010d8d3:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010d8d6:	bb 70 f3 12 f0       	mov    $0xf012f370,%ebx
f010d8db:	ba 07 00 00 00       	mov    $0x7,%edx
f010d8e0:	89 c7                	mov    %eax,%edi
f010d8e2:	89 de                	mov    %ebx,%esi
f010d8e4:	89 d1                	mov    %edx,%ecx
f010d8e6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010d8e8:	c7 05 00 44 6d f0 00 	movl   $0x0,0xf06d4400
f010d8ef:	00 00 00 
f010d8f2:	c7 05 04 44 6d f0 00 	movl   $0x0,0xf06d4404
f010d8f9:	00 00 00 
f010d8fc:	c7 05 0c 44 6d f0 00 	movl   $0x0,0xf06d440c
f010d903:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010d906:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010d90d:	e9 5f 01 00 00       	jmp    f010da71 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010d912:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d915:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010d919:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d91c:	c1 e2 04             	shl    $0x4,%edx
f010d91f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d922:	01 da                	add    %ebx,%edx
f010d924:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010d92a:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010d92c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d92f:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010d933:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d936:	c1 e2 04             	shl    $0x4,%edx
f010d939:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d93c:	01 f2                	add    %esi,%edx
f010d93e:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010d944:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010d946:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d94a:	0f 85 92 00 00 00    	jne    f010d9e2 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010d950:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f010d955:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d958:	c1 e2 04             	shl    $0x4,%edx
f010d95b:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010d95e:	01 fa                	add    %edi,%edx
f010d960:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010d966:	89 02                	mov    %eax,(%edx)
f010d968:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d96b:	c1 e0 04             	shl    $0x4,%eax
f010d96e:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010d971:	01 d8                	add    %ebx,%eax
f010d973:	2d bc 00 00 00       	sub    $0xbc,%eax
f010d978:	8b 00                	mov    (%eax),%eax
f010d97a:	85 c0                	test   %eax,%eax
f010d97c:	74 18                	je     f010d996 <test_alloc_block_BF+0x117>
f010d97e:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f010d983:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010d989:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010d98c:	c1 e1 04             	shl    $0x4,%ecx
f010d98f:	01 ca                	add    %ecx,%edx
f010d991:	89 50 04             	mov    %edx,0x4(%eax)
f010d994:	eb 13                	jmp    f010d9a9 <test_alloc_block_BF+0x12a>
f010d996:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010d99c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d99f:	c1 e2 04             	shl    $0x4,%edx
f010d9a2:	01 d0                	add    %edx,%eax
f010d9a4:	a3 04 44 6d f0       	mov    %eax,0xf06d4404
f010d9a9:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010d9af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d9b2:	c1 e2 04             	shl    $0x4,%edx
f010d9b5:	01 d0                	add    %edx,%eax
f010d9b7:	a3 00 44 6d f0       	mov    %eax,0xf06d4400
f010d9bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d9bf:	c1 e0 04             	shl    $0x4,%eax
f010d9c2:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010d9c5:	01 f0                	add    %esi,%eax
f010d9c7:	2d b8 00 00 00       	sub    $0xb8,%eax
f010d9cc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d9d2:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010d9d7:	40                   	inc    %eax
f010d9d8:	a3 0c 44 6d f0       	mov    %eax,0xf06d440c
f010d9dd:	e9 8c 00 00 00       	jmp    f010da6e <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010d9e2:	a1 04 44 6d f0       	mov    0xf06d4404,%eax
f010d9e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d9ea:	c1 e2 04             	shl    $0x4,%edx
f010d9ed:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010d9f0:	01 fa                	add    %edi,%edx
f010d9f2:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010d9f8:	89 02                	mov    %eax,(%edx)
f010d9fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d9fd:	c1 e0 04             	shl    $0x4,%eax
f010da00:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010da03:	01 d8                	add    %ebx,%eax
f010da05:	2d b8 00 00 00       	sub    $0xb8,%eax
f010da0a:	8b 00                	mov    (%eax),%eax
f010da0c:	85 c0                	test   %eax,%eax
f010da0e:	74 17                	je     f010da27 <test_alloc_block_BF+0x1a8>
f010da10:	a1 04 44 6d f0       	mov    0xf06d4404,%eax
f010da15:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010da1b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010da1e:	c1 e1 04             	shl    $0x4,%ecx
f010da21:	01 ca                	add    %ecx,%edx
f010da23:	89 10                	mov    %edx,(%eax)
f010da25:	eb 13                	jmp    f010da3a <test_alloc_block_BF+0x1bb>
f010da27:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010da2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da30:	c1 e2 04             	shl    $0x4,%edx
f010da33:	01 d0                	add    %edx,%eax
f010da35:	a3 00 44 6d f0       	mov    %eax,0xf06d4400
f010da3a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010da40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da43:	c1 e2 04             	shl    $0x4,%edx
f010da46:	01 d0                	add    %edx,%eax
f010da48:	a3 04 44 6d f0       	mov    %eax,0xf06d4404
f010da4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da50:	c1 e0 04             	shl    $0x4,%eax
f010da53:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010da56:	01 f0                	add    %esi,%eax
f010da58:	2d bc 00 00 00       	sub    $0xbc,%eax
f010da5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010da63:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010da68:	40                   	inc    %eax
f010da69:	a3 0c 44 6d f0       	mov    %eax,0xf06d440c
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010da6e:	ff 45 e4             	incl   -0x1c(%ebp)
f010da71:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010da75:	0f 8e 97 fe ff ff    	jle    f010d912 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010da7b:	83 ec 0c             	sub    $0xc,%esp
f010da7e:	68 00 00 40 00       	push   $0x400000
f010da83:	e8 75 c7 01 00       	call   f012a1fd <alloc_block_BF>
f010da88:	83 c4 10             	add    $0x10,%esp
f010da8b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010da8e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010da92:	74 17                	je     f010daab <test_alloc_block_BF+0x22c>
f010da94:	83 ec 04             	sub    $0x4,%esp
f010da97:	68 60 f1 12 f0       	push   $0xf012f160
f010da9c:	68 4e 01 00 00       	push   $0x14e
f010daa1:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010daa6:	e8 fb 26 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010daab:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010dab0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010dab3:	75 13                	jne    f010dac8 <test_alloc_block_BF+0x249>
f010dab5:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010daba:	83 f8 07             	cmp    $0x7,%eax
f010dabd:	75 09                	jne    f010dac8 <test_alloc_block_BF+0x249>
f010dabf:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010dac4:	85 c0                	test   %eax,%eax
f010dac6:	74 17                	je     f010dadf <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010dac8:	83 ec 04             	sub    $0x4,%esp
f010dacb:	68 20 ef 12 f0       	push   $0xf012ef20
f010dad0:	68 52 01 00 00       	push   $0x152
f010dad5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dada:	e8 c7 26 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010dadf:	83 ec 0c             	sub    $0xc,%esp
f010dae2:	68 00 00 10 00       	push   $0x100000
f010dae7:	e8 11 c7 01 00       	call   f012a1fd <alloc_block_BF>
f010daec:	83 c4 10             	add    $0x10,%esp
f010daef:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010daf2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010daf6:	74 1a                	je     f010db12 <test_alloc_block_BF+0x293>
f010daf8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dafb:	8b 40 0c             	mov    0xc(%eax),%eax
f010dafe:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010db03:	75 0d                	jne    f010db12 <test_alloc_block_BF+0x293>
f010db05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010db08:	8b 40 08             	mov    0x8(%eax),%eax
f010db0b:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010db10:	74 17                	je     f010db29 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010db12:	83 ec 04             	sub    $0x4,%esp
f010db15:	68 d4 f1 12 f0       	push   $0xf012f1d4
f010db1a:	68 5a 01 00 00       	push   $0x15a
f010db1f:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010db24:	e8 7d 26 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010db29:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010db2e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010db31:	75 13                	jne    f010db46 <test_alloc_block_BF+0x2c7>
f010db33:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010db38:	83 f8 06             	cmp    $0x6,%eax
f010db3b:	75 09                	jne    f010db46 <test_alloc_block_BF+0x2c7>
f010db3d:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010db42:	85 c0                	test   %eax,%eax
f010db44:	74 17                	je     f010db5d <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010db46:	83 ec 04             	sub    $0x4,%esp
f010db49:	68 18 f2 12 f0       	push   $0xf012f218
f010db4e:	68 5e 01 00 00       	push   $0x15e
f010db53:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010db58:	e8 49 26 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010db5d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010db64:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010db67:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010db6e:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010db75:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010db7c:	83 ec 0c             	sub    $0xc,%esp
f010db7f:	ff 75 d8             	pushl  -0x28(%ebp)
f010db82:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010db88:	50                   	push   %eax
f010db89:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010db8c:	50                   	push   %eax
f010db8d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010db90:	50                   	push   %eax
f010db91:	68 00 44 6d f0       	push   $0xf06d4400
f010db96:	e8 dd 17 00 00       	call   f010f378 <check_list_data>
f010db9b:	83 c4 20             	add    $0x20,%esp
f010db9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010dba1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010dba5:	74 17                	je     f010dbbe <test_alloc_block_BF+0x33f>
f010dba7:	83 ec 04             	sub    $0x4,%esp
f010dbaa:	68 7c f2 12 f0       	push   $0xf012f27c
f010dbaf:	68 66 01 00 00       	push   $0x166
f010dbb4:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dbb9:	e8 e8 25 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010dbbe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dbc4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010dbc7:	74 17                	je     f010dbe0 <test_alloc_block_BF+0x361>
f010dbc9:	83 ec 04             	sub    $0x4,%esp
f010dbcc:	68 c8 f2 12 f0       	push   $0xf012f2c8
f010dbd1:	68 67 01 00 00       	push   $0x167
f010dbd6:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dbdb:	e8 c6 25 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010dbe0:	83 ec 0c             	sub    $0xc,%esp
f010dbe3:	68 00 00 10 00       	push   $0x100000
f010dbe8:	e8 10 c6 01 00       	call   f012a1fd <alloc_block_BF>
f010dbed:	83 c4 10             	add    $0x10,%esp
f010dbf0:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010dbf3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dbf7:	74 1a                	je     f010dc13 <test_alloc_block_BF+0x394>
f010dbf9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dbfc:	8b 40 0c             	mov    0xc(%eax),%eax
f010dbff:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010dc04:	75 0d                	jne    f010dc13 <test_alloc_block_BF+0x394>
f010dc06:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc09:	8b 40 08             	mov    0x8(%eax),%eax
f010dc0c:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010dc11:	74 17                	je     f010dc2a <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010dc13:	83 ec 04             	sub    $0x4,%esp
f010dc16:	68 d4 f1 12 f0       	push   $0xf012f1d4
f010dc1b:	68 6f 01 00 00       	push   $0x16f
f010dc20:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dc25:	e8 7c 25 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010dc2a:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010dc2f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010dc32:	4a                   	dec    %edx
f010dc33:	39 d0                	cmp    %edx,%eax
f010dc35:	75 13                	jne    f010dc4a <test_alloc_block_BF+0x3cb>
f010dc37:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010dc3c:	83 f8 06             	cmp    $0x6,%eax
f010dc3f:	75 09                	jne    f010dc4a <test_alloc_block_BF+0x3cb>
f010dc41:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010dc46:	85 c0                	test   %eax,%eax
f010dc48:	74 17                	je     f010dc61 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010dc4a:	83 ec 04             	sub    $0x4,%esp
f010dc4d:	68 18 f2 12 f0       	push   $0xf012f218
f010dc52:	68 73 01 00 00       	push   $0x173
f010dc57:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dc5c:	e8 45 25 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010dc61:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010dc68:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010dc6b:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010dc72:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010dc79:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010dc80:	83 ec 0c             	sub    $0xc,%esp
f010dc83:	ff 75 d8             	pushl  -0x28(%ebp)
f010dc86:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010dc8c:	50                   	push   %eax
f010dc8d:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010dc90:	50                   	push   %eax
f010dc91:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010dc94:	50                   	push   %eax
f010dc95:	68 00 44 6d f0       	push   $0xf06d4400
f010dc9a:	e8 d9 16 00 00       	call   f010f378 <check_list_data>
f010dc9f:	83 c4 20             	add    $0x20,%esp
f010dca2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010dca5:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010dca9:	74 17                	je     f010dcc2 <test_alloc_block_BF+0x443>
f010dcab:	83 ec 04             	sub    $0x4,%esp
f010dcae:	68 7c f2 12 f0       	push   $0xf012f27c
f010dcb3:	68 7b 01 00 00       	push   $0x17b
f010dcb8:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dcbd:	e8 e4 24 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010dcc2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dcc8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010dccb:	74 17                	je     f010dce4 <test_alloc_block_BF+0x465>
f010dccd:	83 ec 04             	sub    $0x4,%esp
f010dcd0:	68 c8 f2 12 f0       	push   $0xf012f2c8
f010dcd5:	68 7c 01 00 00       	push   $0x17c
f010dcda:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dcdf:	e8 c2 24 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010dce4:	83 ec 0c             	sub    $0xc,%esp
f010dce7:	68 00 0c 00 00       	push   $0xc00
f010dcec:	e8 0c c5 01 00       	call   f012a1fd <alloc_block_BF>
f010dcf1:	83 c4 10             	add    $0x10,%esp
f010dcf4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010dcf7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dcfb:	74 1a                	je     f010dd17 <test_alloc_block_BF+0x498>
f010dcfd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dd00:	8b 40 0c             	mov    0xc(%eax),%eax
f010dd03:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010dd08:	75 0d                	jne    f010dd17 <test_alloc_block_BF+0x498>
f010dd0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dd0d:	8b 40 08             	mov    0x8(%eax),%eax
f010dd10:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010dd15:	74 17                	je     f010dd2e <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010dd17:	83 ec 04             	sub    $0x4,%esp
f010dd1a:	68 d4 f1 12 f0       	push   $0xf012f1d4
f010dd1f:	68 84 01 00 00       	push   $0x184
f010dd24:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dd29:	e8 78 24 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010dd2e:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010dd33:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010dd36:	83 ea 02             	sub    $0x2,%edx
f010dd39:	39 d0                	cmp    %edx,%eax
f010dd3b:	75 13                	jne    f010dd50 <test_alloc_block_BF+0x4d1>
f010dd3d:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010dd42:	83 f8 06             	cmp    $0x6,%eax
f010dd45:	75 09                	jne    f010dd50 <test_alloc_block_BF+0x4d1>
f010dd47:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010dd4c:	85 c0                	test   %eax,%eax
f010dd4e:	74 17                	je     f010dd67 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010dd50:	83 ec 04             	sub    $0x4,%esp
f010dd53:	68 18 f2 12 f0       	push   $0xf012f218
f010dd58:	68 88 01 00 00       	push   $0x188
f010dd5d:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dd62:	e8 3f 24 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010dd67:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010dd6e:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010dd71:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010dd78:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010dd7f:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010dd86:	83 ec 0c             	sub    $0xc,%esp
f010dd89:	ff 75 d8             	pushl  -0x28(%ebp)
f010dd8c:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010dd92:	50                   	push   %eax
f010dd93:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010dd96:	50                   	push   %eax
f010dd97:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010dd9a:	50                   	push   %eax
f010dd9b:	68 00 44 6d f0       	push   $0xf06d4400
f010dda0:	e8 d3 15 00 00       	call   f010f378 <check_list_data>
f010dda5:	83 c4 20             	add    $0x20,%esp
f010dda8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ddab:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ddaf:	74 17                	je     f010ddc8 <test_alloc_block_BF+0x549>
f010ddb1:	83 ec 04             	sub    $0x4,%esp
f010ddb4:	68 7c f2 12 f0       	push   $0xf012f27c
f010ddb9:	68 90 01 00 00       	push   $0x190
f010ddbe:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ddc3:	e8 de 23 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ddc8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ddce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ddd1:	74 17                	je     f010ddea <test_alloc_block_BF+0x56b>
f010ddd3:	83 ec 04             	sub    $0x4,%esp
f010ddd6:	68 c8 f2 12 f0       	push   $0xf012f2c8
f010dddb:	68 91 01 00 00       	push   $0x191
f010dde0:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dde5:	e8 bc 23 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010ddea:	83 ec 0c             	sub    $0xc,%esp
f010dded:	68 00 08 00 00       	push   $0x800
f010ddf2:	e8 06 c4 01 00       	call   f012a1fd <alloc_block_BF>
f010ddf7:	83 c4 10             	add    $0x10,%esp
f010ddfa:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010ddfd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010de01:	74 17                	je     f010de1a <test_alloc_block_BF+0x59b>
f010de03:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010de06:	8b 40 0c             	mov    0xc(%eax),%eax
f010de09:	3d 00 08 00 00       	cmp    $0x800,%eax
f010de0e:	75 0a                	jne    f010de1a <test_alloc_block_BF+0x59b>
f010de10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010de13:	8b 40 08             	mov    0x8(%eax),%eax
f010de16:	85 c0                	test   %eax,%eax
f010de18:	74 17                	je     f010de31 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010de1a:	83 ec 04             	sub    $0x4,%esp
f010de1d:	68 d4 f1 12 f0       	push   $0xf012f1d4
f010de22:	68 99 01 00 00       	push   $0x199
f010de27:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010de2c:	e8 75 23 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010de31:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010de36:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010de39:	83 ea 02             	sub    $0x2,%edx
f010de3c:	39 d0                	cmp    %edx,%eax
f010de3e:	75 13                	jne    f010de53 <test_alloc_block_BF+0x5d4>
f010de40:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010de45:	83 f8 05             	cmp    $0x5,%eax
f010de48:	75 09                	jne    f010de53 <test_alloc_block_BF+0x5d4>
f010de4a:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010de4f:	85 c0                	test   %eax,%eax
f010de51:	74 17                	je     f010de6a <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010de53:	83 ec 04             	sub    $0x4,%esp
f010de56:	68 18 f2 12 f0       	push   $0xf012f218
f010de5b:	68 9d 01 00 00       	push   $0x19d
f010de60:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010de65:	e8 3c 23 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010de6a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010de71:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010de74:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010de7b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010de82:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010de89:	83 ec 0c             	sub    $0xc,%esp
f010de8c:	ff 75 d8             	pushl  -0x28(%ebp)
f010de8f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010de95:	50                   	push   %eax
f010de96:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010de99:	50                   	push   %eax
f010de9a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010de9d:	50                   	push   %eax
f010de9e:	68 00 44 6d f0       	push   $0xf06d4400
f010dea3:	e8 d0 14 00 00       	call   f010f378 <check_list_data>
f010dea8:	83 c4 20             	add    $0x20,%esp
f010deab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010deae:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010deb2:	74 17                	je     f010decb <test_alloc_block_BF+0x64c>
f010deb4:	83 ec 04             	sub    $0x4,%esp
f010deb7:	68 7c f2 12 f0       	push   $0xf012f27c
f010debc:	68 a5 01 00 00       	push   $0x1a5
f010dec1:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dec6:	e8 db 22 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010decb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ded1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ded4:	74 17                	je     f010deed <test_alloc_block_BF+0x66e>
f010ded6:	83 ec 04             	sub    $0x4,%esp
f010ded9:	68 c8 f2 12 f0       	push   $0xf012f2c8
f010dede:	68 a6 01 00 00       	push   $0x1a6
f010dee3:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010dee8:	e8 b9 22 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010deed:	83 ec 0c             	sub    $0xc,%esp
f010def0:	68 14 f3 12 f0       	push   $0xf012f314
f010def5:	e8 33 2d ff ff       	call   f0100c2d <cprintf>
f010defa:	83 c4 10             	add    $0x10,%esp
}
f010defd:	90                   	nop
f010defe:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010df01:	5b                   	pop    %ebx
f010df02:	5e                   	pop    %esi
f010df03:	5f                   	pop    %edi
f010df04:	5d                   	pop    %ebp
f010df05:	c3                   	ret    

f010df06 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010df06:	55                   	push   %ebp
f010df07:	89 e5                	mov    %esp,%ebp
f010df09:	57                   	push   %edi
f010df0a:	56                   	push   %esi
f010df0b:	53                   	push   %ebx
f010df0c:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010df12:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010df19:	83 ec 0c             	sub    $0xc,%esp
f010df1c:	ff 75 e0             	pushl  -0x20(%ebp)
f010df1f:	e8 71 c2 01 00       	call   f012a195 <initialize_MemBlocksList>
f010df24:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010df27:	c7 05 30 4f 64 f0 00 	movl   $0x0,0xf0644f30
f010df2e:	00 00 00 
f010df31:	c7 05 34 4f 64 f0 00 	movl   $0x0,0xf0644f34
f010df38:	00 00 00 
f010df3b:	c7 05 3c 4f 64 f0 00 	movl   $0x0,0xf0644f3c
f010df42:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010df45:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010df48:	bb 20 f1 12 f0       	mov    $0xf012f120,%ebx
f010df4d:	ba 08 00 00 00       	mov    $0x8,%edx
f010df52:	89 c7                	mov    %eax,%edi
f010df54:	89 de                	mov    %ebx,%esi
f010df56:	89 d1                	mov    %edx,%ecx
f010df58:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010df5a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010df5d:	bb 80 f5 12 f0       	mov    $0xf012f580,%ebx
f010df62:	ba 08 00 00 00       	mov    $0x8,%edx
f010df67:	89 c7                	mov    %eax,%edi
f010df69:	89 de                	mov    %ebx,%esi
f010df6b:	89 d1                	mov    %edx,%ecx
f010df6d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010df6f:	c7 05 00 44 6d f0 00 	movl   $0x0,0xf06d4400
f010df76:	00 00 00 
f010df79:	c7 05 04 44 6d f0 00 	movl   $0x0,0xf06d4404
f010df80:	00 00 00 
f010df83:	c7 05 0c 44 6d f0 00 	movl   $0x0,0xf06d440c
f010df8a:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010df8d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010df94:	e9 5f 01 00 00       	jmp    f010e0f8 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010df99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010df9c:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010dfa0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dfa3:	c1 e2 04             	shl    $0x4,%edx
f010dfa6:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dfa9:	01 da                	add    %ebx,%edx
f010dfab:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010dfb1:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010dfb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dfb6:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010dfba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dfbd:	c1 e2 04             	shl    $0x4,%edx
f010dfc0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dfc3:	01 f2                	add    %esi,%edx
f010dfc5:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010dfcb:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010dfcd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010dfd1:	0f 85 92 00 00 00    	jne    f010e069 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010dfd7:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f010dfdc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dfdf:	c1 e2 04             	shl    $0x4,%edx
f010dfe2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010dfe5:	01 fa                	add    %edi,%edx
f010dfe7:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010dfed:	89 02                	mov    %eax,(%edx)
f010dfef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dff2:	c1 e0 04             	shl    $0x4,%eax
f010dff5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dff8:	01 d8                	add    %ebx,%eax
f010dffa:	2d d4 00 00 00       	sub    $0xd4,%eax
f010dfff:	8b 00                	mov    (%eax),%eax
f010e001:	85 c0                	test   %eax,%eax
f010e003:	74 18                	je     f010e01d <test_alloc_block_NF+0x117>
f010e005:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f010e00a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e010:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e013:	c1 e1 04             	shl    $0x4,%ecx
f010e016:	01 ca                	add    %ecx,%edx
f010e018:	89 50 04             	mov    %edx,0x4(%eax)
f010e01b:	eb 13                	jmp    f010e030 <test_alloc_block_NF+0x12a>
f010e01d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e023:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e026:	c1 e2 04             	shl    $0x4,%edx
f010e029:	01 d0                	add    %edx,%eax
f010e02b:	a3 04 44 6d f0       	mov    %eax,0xf06d4404
f010e030:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e036:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e039:	c1 e2 04             	shl    $0x4,%edx
f010e03c:	01 d0                	add    %edx,%eax
f010e03e:	a3 00 44 6d f0       	mov    %eax,0xf06d4400
f010e043:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e046:	c1 e0 04             	shl    $0x4,%eax
f010e049:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e04c:	01 f0                	add    %esi,%eax
f010e04e:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e053:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e059:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e05e:	40                   	inc    %eax
f010e05f:	a3 0c 44 6d f0       	mov    %eax,0xf06d440c
f010e064:	e9 8c 00 00 00       	jmp    f010e0f5 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e069:	a1 04 44 6d f0       	mov    0xf06d4404,%eax
f010e06e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e071:	c1 e2 04             	shl    $0x4,%edx
f010e074:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e077:	01 fa                	add    %edi,%edx
f010e079:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e07f:	89 02                	mov    %eax,(%edx)
f010e081:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e084:	c1 e0 04             	shl    $0x4,%eax
f010e087:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e08a:	01 d8                	add    %ebx,%eax
f010e08c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e091:	8b 00                	mov    (%eax),%eax
f010e093:	85 c0                	test   %eax,%eax
f010e095:	74 17                	je     f010e0ae <test_alloc_block_NF+0x1a8>
f010e097:	a1 04 44 6d f0       	mov    0xf06d4404,%eax
f010e09c:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e0a2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e0a5:	c1 e1 04             	shl    $0x4,%ecx
f010e0a8:	01 ca                	add    %ecx,%edx
f010e0aa:	89 10                	mov    %edx,(%eax)
f010e0ac:	eb 13                	jmp    f010e0c1 <test_alloc_block_NF+0x1bb>
f010e0ae:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e0b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0b7:	c1 e2 04             	shl    $0x4,%edx
f010e0ba:	01 d0                	add    %edx,%eax
f010e0bc:	a3 00 44 6d f0       	mov    %eax,0xf06d4400
f010e0c1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e0c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0ca:	c1 e2 04             	shl    $0x4,%edx
f010e0cd:	01 d0                	add    %edx,%eax
f010e0cf:	a3 04 44 6d f0       	mov    %eax,0xf06d4404
f010e0d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e0d7:	c1 e0 04             	shl    $0x4,%eax
f010e0da:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e0dd:	01 f0                	add    %esi,%eax
f010e0df:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e0e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e0ea:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e0ef:	40                   	inc    %eax
f010e0f0:	a3 0c 44 6d f0       	mov    %eax,0xf06d440c
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010e0f5:	ff 45 e4             	incl   -0x1c(%ebp)
f010e0f8:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e0fc:	0f 8e 97 fe ff ff    	jle    f010df99 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010e102:	83 ec 0c             	sub    $0xc,%esp
f010e105:	68 00 00 a0 00       	push   $0xa00000
f010e10a:	e8 08 c1 01 00       	call   f012a217 <alloc_block_NF>
f010e10f:	83 c4 10             	add    $0x10,%esp
f010e112:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010e115:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e119:	74 17                	je     f010e132 <test_alloc_block_NF+0x22c>
f010e11b:	83 ec 04             	sub    $0x4,%esp
f010e11e:	68 8c f3 12 f0       	push   $0xf012f38c
f010e123:	68 c9 01 00 00       	push   $0x1c9
f010e128:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e12d:	e8 74 20 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e132:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e137:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e13a:	75 13                	jne    f010e14f <test_alloc_block_NF+0x249>
f010e13c:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e141:	83 f8 08             	cmp    $0x8,%eax
f010e144:	75 09                	jne    f010e14f <test_alloc_block_NF+0x249>
f010e146:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e14b:	85 c0                	test   %eax,%eax
f010e14d:	74 17                	je     f010e166 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e14f:	83 ec 04             	sub    $0x4,%esp
f010e152:	68 20 ef 12 f0       	push   $0xf012ef20
f010e157:	68 cd 01 00 00       	push   $0x1cd
f010e15c:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e161:	e8 40 20 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010e166:	83 ec 0c             	sub    $0xc,%esp
f010e169:	68 00 28 00 00       	push   $0x2800
f010e16e:	e8 a4 c0 01 00       	call   f012a217 <alloc_block_NF>
f010e173:	83 c4 10             	add    $0x10,%esp
f010e176:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010e179:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e17d:	74 1a                	je     f010e199 <test_alloc_block_NF+0x293>
f010e17f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e182:	8b 40 0c             	mov    0xc(%eax),%eax
f010e185:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010e18a:	75 0d                	jne    f010e199 <test_alloc_block_NF+0x293>
f010e18c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e18f:	8b 40 08             	mov    0x8(%eax),%eax
f010e192:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e197:	74 17                	je     f010e1b0 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010e199:	83 ec 04             	sub    $0x4,%esp
f010e19c:	68 00 f4 12 f0       	push   $0xf012f400
f010e1a1:	68 d5 01 00 00       	push   $0x1d5
f010e1a6:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e1ab:	e8 f6 1f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e1b0:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e1b5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e1b8:	75 13                	jne    f010e1cd <test_alloc_block_NF+0x2c7>
f010e1ba:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e1bf:	83 f8 07             	cmp    $0x7,%eax
f010e1c2:	75 09                	jne    f010e1cd <test_alloc_block_NF+0x2c7>
f010e1c4:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e1c9:	85 c0                	test   %eax,%eax
f010e1cb:	74 17                	je     f010e1e4 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e1cd:	83 ec 04             	sub    $0x4,%esp
f010e1d0:	68 44 f4 12 f0       	push   $0xf012f444
f010e1d5:	68 d9 01 00 00       	push   $0x1d9
f010e1da:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e1df:	e8 c2 1f ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e1e4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e1eb:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010e1ee:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010e1f5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010e1fc:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e203:	83 ec 0c             	sub    $0xc,%esp
f010e206:	ff 75 d8             	pushl  -0x28(%ebp)
f010e209:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e20f:	50                   	push   %eax
f010e210:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e213:	50                   	push   %eax
f010e214:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e217:	50                   	push   %eax
f010e218:	68 00 44 6d f0       	push   $0xf06d4400
f010e21d:	e8 56 11 00 00       	call   f010f378 <check_list_data>
f010e222:	83 c4 20             	add    $0x20,%esp
f010e225:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010e228:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e22c:	74 17                	je     f010e245 <test_alloc_block_NF+0x33f>
f010e22e:	83 ec 04             	sub    $0x4,%esp
f010e231:	68 a8 f4 12 f0       	push   $0xf012f4a8
f010e236:	68 e1 01 00 00       	push   $0x1e1
f010e23b:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e240:	e8 61 1f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010e245:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e24b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e24e:	74 17                	je     f010e267 <test_alloc_block_NF+0x361>
f010e250:	83 ec 04             	sub    $0x4,%esp
f010e253:	68 f4 f4 12 f0       	push   $0xf012f4f4
f010e258:	68 e2 01 00 00       	push   $0x1e2
f010e25d:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e262:	e8 3f 1f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010e267:	83 ec 0c             	sub    $0xc,%esp
f010e26a:	68 00 00 20 00       	push   $0x200000
f010e26f:	e8 a3 bf 01 00       	call   f012a217 <alloc_block_NF>
f010e274:	83 c4 10             	add    $0x10,%esp
f010e277:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010e27a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e27e:	74 1a                	je     f010e29a <test_alloc_block_NF+0x394>
f010e280:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e283:	8b 40 0c             	mov    0xc(%eax),%eax
f010e286:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e28b:	75 0d                	jne    f010e29a <test_alloc_block_NF+0x394>
f010e28d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e290:	8b 40 08             	mov    0x8(%eax),%eax
f010e293:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e298:	74 17                	je     f010e2b1 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010e29a:	83 ec 04             	sub    $0x4,%esp
f010e29d:	68 00 f4 12 f0       	push   $0xf012f400
f010e2a2:	68 eb 01 00 00       	push   $0x1eb
f010e2a7:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e2ac:	e8 f5 1e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e2b1:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e2b6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e2b9:	75 13                	jne    f010e2ce <test_alloc_block_NF+0x3c8>
f010e2bb:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e2c0:	83 f8 06             	cmp    $0x6,%eax
f010e2c3:	75 09                	jne    f010e2ce <test_alloc_block_NF+0x3c8>
f010e2c5:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e2ca:	85 c0                	test   %eax,%eax
f010e2cc:	74 17                	je     f010e2e5 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e2ce:	83 ec 04             	sub    $0x4,%esp
f010e2d1:	68 44 f4 12 f0       	push   $0xf012f444
f010e2d6:	68 ef 01 00 00       	push   $0x1ef
f010e2db:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e2e0:	e8 c1 1e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e2e5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e2ec:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010e2ef:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010e2f6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010e2fd:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e304:	83 ec 0c             	sub    $0xc,%esp
f010e307:	ff 75 d8             	pushl  -0x28(%ebp)
f010e30a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e310:	50                   	push   %eax
f010e311:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e314:	50                   	push   %eax
f010e315:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e318:	50                   	push   %eax
f010e319:	68 00 44 6d f0       	push   $0xf06d4400
f010e31e:	e8 55 10 00 00       	call   f010f378 <check_list_data>
f010e323:	83 c4 20             	add    $0x20,%esp
f010e326:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010e329:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e32d:	74 17                	je     f010e346 <test_alloc_block_NF+0x440>
f010e32f:	83 ec 04             	sub    $0x4,%esp
f010e332:	68 a8 f4 12 f0       	push   $0xf012f4a8
f010e337:	68 f7 01 00 00       	push   $0x1f7
f010e33c:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e341:	e8 60 1e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010e346:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e34c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e34f:	74 17                	je     f010e368 <test_alloc_block_NF+0x462>
f010e351:	83 ec 04             	sub    $0x4,%esp
f010e354:	68 f4 f4 12 f0       	push   $0xf012f4f4
f010e359:	68 f8 01 00 00       	push   $0x1f8
f010e35e:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e363:	e8 3e 1e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010e368:	83 ec 0c             	sub    $0xc,%esp
f010e36b:	68 00 00 08 00       	push   $0x80000
f010e370:	e8 a2 be 01 00       	call   f012a217 <alloc_block_NF>
f010e375:	83 c4 10             	add    $0x10,%esp
f010e378:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010e37b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e37f:	74 1a                	je     f010e39b <test_alloc_block_NF+0x495>
f010e381:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e384:	8b 40 0c             	mov    0xc(%eax),%eax
f010e387:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010e38c:	75 0d                	jne    f010e39b <test_alloc_block_NF+0x495>
f010e38e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e391:	8b 40 08             	mov    0x8(%eax),%eax
f010e394:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010e399:	74 17                	je     f010e3b2 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010e39b:	83 ec 04             	sub    $0x4,%esp
f010e39e:	68 00 f4 12 f0       	push   $0xf012f400
f010e3a3:	68 01 02 00 00       	push   $0x201
f010e3a8:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e3ad:	e8 f4 1d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e3b2:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e3b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e3ba:	4a                   	dec    %edx
f010e3bb:	39 d0                	cmp    %edx,%eax
f010e3bd:	75 13                	jne    f010e3d2 <test_alloc_block_NF+0x4cc>
f010e3bf:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e3c4:	83 f8 06             	cmp    $0x6,%eax
f010e3c7:	75 09                	jne    f010e3d2 <test_alloc_block_NF+0x4cc>
f010e3c9:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e3ce:	85 c0                	test   %eax,%eax
f010e3d0:	74 17                	je     f010e3e9 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e3d2:	83 ec 04             	sub    $0x4,%esp
f010e3d5:	68 44 f4 12 f0       	push   $0xf012f444
f010e3da:	68 05 02 00 00       	push   $0x205
f010e3df:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e3e4:	e8 bd 1d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e3e9:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e3f0:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010e3f3:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010e3fa:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010e401:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e408:	83 ec 0c             	sub    $0xc,%esp
f010e40b:	ff 75 d8             	pushl  -0x28(%ebp)
f010e40e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e414:	50                   	push   %eax
f010e415:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e418:	50                   	push   %eax
f010e419:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e41c:	50                   	push   %eax
f010e41d:	68 00 44 6d f0       	push   $0xf06d4400
f010e422:	e8 51 0f 00 00       	call   f010f378 <check_list_data>
f010e427:	83 c4 20             	add    $0x20,%esp
f010e42a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010e42d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e431:	74 17                	je     f010e44a <test_alloc_block_NF+0x544>
f010e433:	83 ec 04             	sub    $0x4,%esp
f010e436:	68 a8 f4 12 f0       	push   $0xf012f4a8
f010e43b:	68 0d 02 00 00       	push   $0x20d
f010e440:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e445:	e8 5c 1d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010e44a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e450:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e453:	74 17                	je     f010e46c <test_alloc_block_NF+0x566>
f010e455:	83 ec 04             	sub    $0x4,%esp
f010e458:	68 f4 f4 12 f0       	push   $0xf012f4f4
f010e45d:	68 0e 02 00 00       	push   $0x20e
f010e462:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e467:	e8 3a 1d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010e46c:	83 ec 0c             	sub    $0xc,%esp
f010e46f:	68 00 fc 07 00       	push   $0x7fc00
f010e474:	e8 9e bd 01 00       	call   f012a217 <alloc_block_NF>
f010e479:	83 c4 10             	add    $0x10,%esp
f010e47c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010e47f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e483:	74 1a                	je     f010e49f <test_alloc_block_NF+0x599>
f010e485:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e488:	8b 40 0c             	mov    0xc(%eax),%eax
f010e48b:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010e490:	75 0d                	jne    f010e49f <test_alloc_block_NF+0x599>
f010e492:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e495:	8b 40 08             	mov    0x8(%eax),%eax
f010e498:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010e49d:	74 17                	je     f010e4b6 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010e49f:	83 ec 04             	sub    $0x4,%esp
f010e4a2:	68 00 f4 12 f0       	push   $0xf012f400
f010e4a7:	68 17 02 00 00       	push   $0x217
f010e4ac:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e4b1:	e8 f0 1c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e4b6:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e4bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e4be:	83 ea 02             	sub    $0x2,%edx
f010e4c1:	39 d0                	cmp    %edx,%eax
f010e4c3:	75 13                	jne    f010e4d8 <test_alloc_block_NF+0x5d2>
f010e4c5:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e4ca:	83 f8 06             	cmp    $0x6,%eax
f010e4cd:	75 09                	jne    f010e4d8 <test_alloc_block_NF+0x5d2>
f010e4cf:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e4d4:	85 c0                	test   %eax,%eax
f010e4d6:	74 17                	je     f010e4ef <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e4d8:	83 ec 04             	sub    $0x4,%esp
f010e4db:	68 44 f4 12 f0       	push   $0xf012f444
f010e4e0:	68 1b 02 00 00       	push   $0x21b
f010e4e5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e4ea:	e8 b7 1c ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e4ef:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e4f6:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010e4f9:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010e500:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010e507:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e50e:	83 ec 0c             	sub    $0xc,%esp
f010e511:	ff 75 d8             	pushl  -0x28(%ebp)
f010e514:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e51a:	50                   	push   %eax
f010e51b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e51e:	50                   	push   %eax
f010e51f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e522:	50                   	push   %eax
f010e523:	68 00 44 6d f0       	push   $0xf06d4400
f010e528:	e8 4b 0e 00 00       	call   f010f378 <check_list_data>
f010e52d:	83 c4 20             	add    $0x20,%esp
f010e530:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010e533:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e537:	74 17                	je     f010e550 <test_alloc_block_NF+0x64a>
f010e539:	83 ec 04             	sub    $0x4,%esp
f010e53c:	68 a8 f4 12 f0       	push   $0xf012f4a8
f010e541:	68 23 02 00 00       	push   $0x223
f010e546:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e54b:	e8 56 1c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010e550:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e556:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e559:	74 17                	je     f010e572 <test_alloc_block_NF+0x66c>
f010e55b:	83 ec 04             	sub    $0x4,%esp
f010e55e:	68 f4 f4 12 f0       	push   $0xf012f4f4
f010e563:	68 24 02 00 00       	push   $0x224
f010e568:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e56d:	e8 34 1c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010e572:	83 ec 0c             	sub    $0xc,%esp
f010e575:	68 00 0c 00 00       	push   $0xc00
f010e57a:	e8 98 bc 01 00       	call   f012a217 <alloc_block_NF>
f010e57f:	83 c4 10             	add    $0x10,%esp
f010e582:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010e585:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e589:	74 17                	je     f010e5a2 <test_alloc_block_NF+0x69c>
f010e58b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e58e:	8b 40 0c             	mov    0xc(%eax),%eax
f010e591:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e596:	75 0a                	jne    f010e5a2 <test_alloc_block_NF+0x69c>
f010e598:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e59b:	8b 40 08             	mov    0x8(%eax),%eax
f010e59e:	85 c0                	test   %eax,%eax
f010e5a0:	74 17                	je     f010e5b9 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010e5a2:	83 ec 04             	sub    $0x4,%esp
f010e5a5:	68 00 f4 12 f0       	push   $0xf012f400
f010e5aa:	68 2d 02 00 00       	push   $0x22d
f010e5af:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e5b4:	e8 ed 1b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e5b9:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e5be:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e5c1:	83 ea 02             	sub    $0x2,%edx
f010e5c4:	39 d0                	cmp    %edx,%eax
f010e5c6:	75 13                	jne    f010e5db <test_alloc_block_NF+0x6d5>
f010e5c8:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e5cd:	83 f8 05             	cmp    $0x5,%eax
f010e5d0:	75 09                	jne    f010e5db <test_alloc_block_NF+0x6d5>
f010e5d2:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e5d7:	85 c0                	test   %eax,%eax
f010e5d9:	74 17                	je     f010e5f2 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e5db:	83 ec 04             	sub    $0x4,%esp
f010e5de:	68 44 f4 12 f0       	push   $0xf012f444
f010e5e3:	68 31 02 00 00       	push   $0x231
f010e5e8:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e5ed:	e8 b4 1b ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e5f2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e5f9:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010e5fc:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010e603:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010e60a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e611:	83 ec 0c             	sub    $0xc,%esp
f010e614:	ff 75 d8             	pushl  -0x28(%ebp)
f010e617:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e61d:	50                   	push   %eax
f010e61e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e621:	50                   	push   %eax
f010e622:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e625:	50                   	push   %eax
f010e626:	68 00 44 6d f0       	push   $0xf06d4400
f010e62b:	e8 48 0d 00 00       	call   f010f378 <check_list_data>
f010e630:	83 c4 20             	add    $0x20,%esp
f010e633:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010e636:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e63a:	74 17                	je     f010e653 <test_alloc_block_NF+0x74d>
f010e63c:	83 ec 04             	sub    $0x4,%esp
f010e63f:	68 a8 f4 12 f0       	push   $0xf012f4a8
f010e644:	68 39 02 00 00       	push   $0x239
f010e649:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e64e:	e8 53 1b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010e653:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e659:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e65c:	74 17                	je     f010e675 <test_alloc_block_NF+0x76f>
f010e65e:	83 ec 04             	sub    $0x4,%esp
f010e661:	68 f4 f4 12 f0       	push   $0xf012f4f4
f010e666:	68 3a 02 00 00       	push   $0x23a
f010e66b:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e670:	e8 31 1b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010e675:	83 ec 0c             	sub    $0xc,%esp
f010e678:	68 00 04 00 00       	push   $0x400
f010e67d:	e8 95 bb 01 00       	call   f012a217 <alloc_block_NF>
f010e682:	83 c4 10             	add    $0x10,%esp
f010e685:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010e688:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e68c:	74 1a                	je     f010e6a8 <test_alloc_block_NF+0x7a2>
f010e68e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e691:	8b 40 0c             	mov    0xc(%eax),%eax
f010e694:	3d 00 04 00 00       	cmp    $0x400,%eax
f010e699:	75 0d                	jne    f010e6a8 <test_alloc_block_NF+0x7a2>
f010e69b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e69e:	8b 40 08             	mov    0x8(%eax),%eax
f010e6a1:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010e6a6:	74 17                	je     f010e6bf <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010e6a8:	83 ec 04             	sub    $0x4,%esp
f010e6ab:	68 00 f4 12 f0       	push   $0xf012f400
f010e6b0:	68 43 02 00 00       	push   $0x243
f010e6b5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e6ba:	e8 e7 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e6bf:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e6c4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e6c7:	83 ea 03             	sub    $0x3,%edx
f010e6ca:	39 d0                	cmp    %edx,%eax
f010e6cc:	75 13                	jne    f010e6e1 <test_alloc_block_NF+0x7db>
f010e6ce:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e6d3:	83 f8 05             	cmp    $0x5,%eax
f010e6d6:	75 09                	jne    f010e6e1 <test_alloc_block_NF+0x7db>
f010e6d8:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e6dd:	85 c0                	test   %eax,%eax
f010e6df:	74 17                	je     f010e6f8 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e6e1:	83 ec 04             	sub    $0x4,%esp
f010e6e4:	68 44 f4 12 f0       	push   $0xf012f444
f010e6e9:	68 47 02 00 00       	push   $0x247
f010e6ee:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e6f3:	e8 ae 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e6f8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e6ff:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010e702:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010e709:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010e710:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e717:	83 ec 0c             	sub    $0xc,%esp
f010e71a:	ff 75 d8             	pushl  -0x28(%ebp)
f010e71d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e723:	50                   	push   %eax
f010e724:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e727:	50                   	push   %eax
f010e728:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e72b:	50                   	push   %eax
f010e72c:	68 00 44 6d f0       	push   $0xf06d4400
f010e731:	e8 42 0c 00 00       	call   f010f378 <check_list_data>
f010e736:	83 c4 20             	add    $0x20,%esp
f010e739:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010e73c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e740:	74 17                	je     f010e759 <test_alloc_block_NF+0x853>
f010e742:	83 ec 04             	sub    $0x4,%esp
f010e745:	68 a8 f4 12 f0       	push   $0xf012f4a8
f010e74a:	68 4f 02 00 00       	push   $0x24f
f010e74f:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e754:	e8 4d 1a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010e759:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e75f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e762:	74 17                	je     f010e77b <test_alloc_block_NF+0x875>
f010e764:	83 ec 04             	sub    $0x4,%esp
f010e767:	68 f4 f4 12 f0       	push   $0xf012f4f4
f010e76c:	68 50 02 00 00       	push   $0x250
f010e771:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e776:	e8 2b 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010e77b:	83 ec 0c             	sub    $0xc,%esp
f010e77e:	68 40 f5 12 f0       	push   $0xf012f540
f010e783:	e8 a5 24 ff ff       	call   f0100c2d <cprintf>
f010e788:	83 c4 10             	add    $0x10,%esp

}
f010e78b:	90                   	nop
f010e78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e78f:	5b                   	pop    %ebx
f010e790:	5e                   	pop    %esi
f010e791:	5f                   	pop    %edi
f010e792:	5d                   	pop    %ebp
f010e793:	c3                   	ret    

f010e794 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010e794:	55                   	push   %ebp
f010e795:	89 e5                	mov    %esp,%ebp
f010e797:	57                   	push   %edi
f010e798:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010e79e:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e7a5:	83 ec 0c             	sub    $0xc,%esp
f010e7a8:	ff 75 f4             	pushl  -0xc(%ebp)
f010e7ab:	e8 e5 b9 01 00       	call   f012a195 <initialize_MemBlocksList>
f010e7b0:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e7b3:	c7 05 30 4f 64 f0 00 	movl   $0x0,0xf0644f30
f010e7ba:	00 00 00 
f010e7bd:	c7 05 34 4f 64 f0 00 	movl   $0x0,0xf0644f34
f010e7c4:	00 00 00 
f010e7c7:	c7 05 3c 4f 64 f0 00 	movl   $0x0,0xf0644f3c
f010e7ce:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e7d1:	c7 05 00 44 6d f0 00 	movl   $0x0,0xf06d4400
f010e7d8:	00 00 00 
f010e7db:	c7 05 04 44 6d f0 00 	movl   $0x0,0xf06d4404
f010e7e2:	00 00 00 
f010e7e5:	c7 05 0c 44 6d f0 00 	movl   $0x0,0xf06d440c
f010e7ec:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010e7ef:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010e7f2:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010e7f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7fc:	89 d7                	mov    %edx,%edi
f010e7fe:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010e800:	8d 55 98             	lea    -0x68(%ebp),%edx
f010e803:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010e808:	b8 00 00 00 00       	mov    $0x0,%eax
f010e80d:	89 d7                	mov    %edx,%edi
f010e80f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e811:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010e818:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010e81f:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010e826:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e829:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010e830:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010e831:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e834:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010e83b:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010e83c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e83f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010e843:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010e846:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e849:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010e84d:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010e850:	83 ec 0c             	sub    $0xc,%esp
f010e853:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010e856:	50                   	push   %eax
f010e857:	e8 d5 b9 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010e85c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010e85f:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e864:	85 c0                	test   %eax,%eax
f010e866:	75 14                	jne    f010e87c <test_insert_sorted_with_merge_freeList+0xe8>
f010e868:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e86d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e870:	75 0a                	jne    f010e87c <test_insert_sorted_with_merge_freeList+0xe8>
f010e872:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e877:	83 f8 01             	cmp    $0x1,%eax
f010e87a:	74 17                	je     f010e893 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e87c:	83 ec 04             	sub    $0x4,%esp
f010e87f:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010e884:	68 70 02 00 00       	push   $0x270
f010e889:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e88e:	e8 13 19 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010e893:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010e89a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e8a1:	83 ec 0c             	sub    $0xc,%esp
f010e8a4:	ff 75 f0             	pushl  -0x10(%ebp)
f010e8a7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e8aa:	50                   	push   %eax
f010e8ab:	8d 45 98             	lea    -0x68(%ebp),%eax
f010e8ae:	50                   	push   %eax
f010e8af:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e8b2:	50                   	push   %eax
f010e8b3:	68 00 44 6d f0       	push   $0xf06d4400
f010e8b8:	e8 bb 0a 00 00       	call   f010f378 <check_list_data>
f010e8bd:	83 c4 20             	add    $0x20,%esp
f010e8c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010e8c3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010e8c7:	74 17                	je     f010e8e0 <test_insert_sorted_with_merge_freeList+0x14c>
f010e8c9:	83 ec 04             	sub    $0x4,%esp
f010e8cc:	68 0c f6 12 f0       	push   $0xf012f60c
f010e8d1:	68 76 02 00 00       	push   $0x276
f010e8d6:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e8db:	e8 c6 18 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010e8e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e8e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e8e6:	74 17                	je     f010e8ff <test_insert_sorted_with_merge_freeList+0x16b>
f010e8e8:	83 ec 04             	sub    $0x4,%esp
f010e8eb:	68 60 f6 12 f0       	push   $0xf012f660
f010e8f0:	68 77 02 00 00       	push   $0x277
f010e8f5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e8fa:	e8 a7 18 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010e8ff:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010e906:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e909:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010e910:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010e911:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e914:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010e91b:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010e91c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e91f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010e923:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010e929:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e92c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010e930:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010e933:	83 ec 0c             	sub    $0xc,%esp
f010e936:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010e93c:	50                   	push   %eax
f010e93d:	e8 ef b8 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010e942:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010e945:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010e94a:	85 c0                	test   %eax,%eax
f010e94c:	75 14                	jne    f010e962 <test_insert_sorted_with_merge_freeList+0x1ce>
f010e94e:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010e953:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e956:	75 0a                	jne    f010e962 <test_insert_sorted_with_merge_freeList+0x1ce>
f010e958:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010e95d:	83 f8 02             	cmp    $0x2,%eax
f010e960:	74 17                	je     f010e979 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e962:	83 ec 04             	sub    $0x4,%esp
f010e965:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010e96a:	68 86 02 00 00       	push   $0x286
f010e96f:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e974:	e8 2d 18 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010e979:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010e980:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e987:	83 ec 0c             	sub    $0xc,%esp
f010e98a:	ff 75 f0             	pushl  -0x10(%ebp)
f010e98d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e990:	50                   	push   %eax
f010e991:	8d 45 98             	lea    -0x68(%ebp),%eax
f010e994:	50                   	push   %eax
f010e995:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e998:	50                   	push   %eax
f010e999:	68 00 44 6d f0       	push   $0xf06d4400
f010e99e:	e8 d5 09 00 00       	call   f010f378 <check_list_data>
f010e9a3:	83 c4 20             	add    $0x20,%esp
f010e9a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010e9a9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010e9ad:	74 17                	je     f010e9c6 <test_insert_sorted_with_merge_freeList+0x232>
f010e9af:	83 ec 04             	sub    $0x4,%esp
f010e9b2:	68 0c f6 12 f0       	push   $0xf012f60c
f010e9b7:	68 8c 02 00 00       	push   $0x28c
f010e9bc:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e9c1:	e8 e0 17 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010e9c6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e9c9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e9cc:	74 17                	je     f010e9e5 <test_insert_sorted_with_merge_freeList+0x251>
f010e9ce:	83 ec 04             	sub    $0x4,%esp
f010e9d1:	68 60 f6 12 f0       	push   $0xf012f660
f010e9d6:	68 8d 02 00 00       	push   $0x28d
f010e9db:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010e9e0:	e8 c1 17 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010e9e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010e9ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e9ef:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010e9f6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010e9f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e9fa:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010ea01:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ea02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ea05:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ea09:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010ea0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ea12:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ea16:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010ea1c:	83 ec 0c             	sub    $0xc,%esp
f010ea1f:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010ea25:	50                   	push   %eax
f010ea26:	e8 06 b8 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010ea2b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010ea2e:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010ea33:	85 c0                	test   %eax,%eax
f010ea35:	75 14                	jne    f010ea4b <test_insert_sorted_with_merge_freeList+0x2b7>
f010ea37:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010ea3c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ea3f:	75 0a                	jne    f010ea4b <test_insert_sorted_with_merge_freeList+0x2b7>
f010ea41:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010ea46:	83 f8 03             	cmp    $0x3,%eax
f010ea49:	74 17                	je     f010ea62 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ea4b:	83 ec 04             	sub    $0x4,%esp
f010ea4e:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010ea53:	68 9c 02 00 00       	push   $0x29c
f010ea58:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ea5d:	e8 44 17 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ea62:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010ea69:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ea70:	83 ec 0c             	sub    $0xc,%esp
f010ea73:	ff 75 f0             	pushl  -0x10(%ebp)
f010ea76:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ea79:	50                   	push   %eax
f010ea7a:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ea7d:	50                   	push   %eax
f010ea7e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ea81:	50                   	push   %eax
f010ea82:	68 00 44 6d f0       	push   $0xf06d4400
f010ea87:	e8 ec 08 00 00       	call   f010f378 <check_list_data>
f010ea8c:	83 c4 20             	add    $0x20,%esp
f010ea8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ea92:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ea96:	74 17                	je     f010eaaf <test_insert_sorted_with_merge_freeList+0x31b>
f010ea98:	83 ec 04             	sub    $0x4,%esp
f010ea9b:	68 0c f6 12 f0       	push   $0xf012f60c
f010eaa0:	68 a2 02 00 00       	push   $0x2a2
f010eaa5:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010eaaa:	e8 f7 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010eaaf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010eab2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eab5:	74 17                	je     f010eace <test_insert_sorted_with_merge_freeList+0x33a>
f010eab7:	83 ec 04             	sub    $0x4,%esp
f010eaba:	68 60 f6 12 f0       	push   $0xf012f660
f010eabf:	68 a3 02 00 00       	push   $0x2a3
f010eac4:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010eac9:	e8 d8 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010eace:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010ead5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ead8:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010eadf:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010eae0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eae3:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010eaea:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010eaeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eaee:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010eaf2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010eaf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eafb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010eaff:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010eb05:	83 ec 0c             	sub    $0xc,%esp
f010eb08:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010eb0e:	50                   	push   %eax
f010eb0f:	e8 1d b7 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010eb14:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010eb17:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010eb1c:	85 c0                	test   %eax,%eax
f010eb1e:	75 14                	jne    f010eb34 <test_insert_sorted_with_merge_freeList+0x3a0>
f010eb20:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010eb25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eb28:	75 0a                	jne    f010eb34 <test_insert_sorted_with_merge_freeList+0x3a0>
f010eb2a:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010eb2f:	83 f8 04             	cmp    $0x4,%eax
f010eb32:	74 17                	je     f010eb4b <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eb34:	83 ec 04             	sub    $0x4,%esp
f010eb37:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010eb3c:	68 b2 02 00 00       	push   $0x2b2
f010eb41:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010eb46:	e8 5b 16 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010eb4b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010eb52:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eb59:	83 ec 0c             	sub    $0xc,%esp
f010eb5c:	ff 75 f0             	pushl  -0x10(%ebp)
f010eb5f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eb62:	50                   	push   %eax
f010eb63:	8d 45 98             	lea    -0x68(%ebp),%eax
f010eb66:	50                   	push   %eax
f010eb67:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eb6a:	50                   	push   %eax
f010eb6b:	68 00 44 6d f0       	push   $0xf06d4400
f010eb70:	e8 03 08 00 00       	call   f010f378 <check_list_data>
f010eb75:	83 c4 20             	add    $0x20,%esp
f010eb78:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010eb7b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010eb7f:	74 17                	je     f010eb98 <test_insert_sorted_with_merge_freeList+0x404>
f010eb81:	83 ec 04             	sub    $0x4,%esp
f010eb84:	68 0c f6 12 f0       	push   $0xf012f60c
f010eb89:	68 b8 02 00 00       	push   $0x2b8
f010eb8e:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010eb93:	e8 0e 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010eb98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010eb9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb9e:	74 17                	je     f010ebb7 <test_insert_sorted_with_merge_freeList+0x423>
f010eba0:	83 ec 04             	sub    $0x4,%esp
f010eba3:	68 60 f6 12 f0       	push   $0xf012f660
f010eba8:	68 b9 02 00 00       	push   $0x2b9
f010ebad:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ebb2:	e8 ef 15 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010ebb7:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010ebbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ebc1:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010ebc8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010ebc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ebcc:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010ebd3:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ebd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ebd7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ebdb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010ebe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ebe4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ebe8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010ebee:	83 ec 0c             	sub    $0xc,%esp
f010ebf1:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010ebf7:	50                   	push   %eax
f010ebf8:	e8 34 b6 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010ebfd:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010ec00:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010ec05:	85 c0                	test   %eax,%eax
f010ec07:	75 17                	jne    f010ec20 <test_insert_sorted_with_merge_freeList+0x48c>
f010ec09:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010ec0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ec11:	42                   	inc    %edx
f010ec12:	39 d0                	cmp    %edx,%eax
f010ec14:	75 0a                	jne    f010ec20 <test_insert_sorted_with_merge_freeList+0x48c>
f010ec16:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010ec1b:	83 f8 04             	cmp    $0x4,%eax
f010ec1e:	74 17                	je     f010ec37 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec20:	83 ec 04             	sub    $0x4,%esp
f010ec23:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010ec28:	68 cb 02 00 00       	push   $0x2cb
f010ec2d:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ec32:	e8 6f 15 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ec37:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010ec3e:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010ec45:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec48:	8d 50 ff             	lea    -0x1(%eax),%edx
f010ec4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec4e:	48                   	dec    %eax
f010ec4f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010ec53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec56:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ec5a:	01 c8                	add    %ecx,%eax
f010ec5c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010ec60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec63:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010ec6a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010ec6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec6e:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010ec75:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ec76:	83 ec 0c             	sub    $0xc,%esp
f010ec79:	ff 75 f0             	pushl  -0x10(%ebp)
f010ec7c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ec7f:	50                   	push   %eax
f010ec80:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ec83:	50                   	push   %eax
f010ec84:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ec87:	50                   	push   %eax
f010ec88:	68 00 44 6d f0       	push   $0xf06d4400
f010ec8d:	e8 e6 06 00 00       	call   f010f378 <check_list_data>
f010ec92:	83 c4 20             	add    $0x20,%esp
f010ec95:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ec98:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ec9c:	74 17                	je     f010ecb5 <test_insert_sorted_with_merge_freeList+0x521>
f010ec9e:	83 ec 04             	sub    $0x4,%esp
f010eca1:	68 0c f6 12 f0       	push   $0xf012f60c
f010eca6:	68 d4 02 00 00       	push   $0x2d4
f010ecab:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ecb0:	e8 f1 14 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ecb5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ecb8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecbb:	74 17                	je     f010ecd4 <test_insert_sorted_with_merge_freeList+0x540>
f010ecbd:	83 ec 04             	sub    $0x4,%esp
f010ecc0:	68 60 f6 12 f0       	push   $0xf012f660
f010ecc5:	68 d5 02 00 00       	push   $0x2d5
f010ecca:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010eccf:	e8 d2 14 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010ecd4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010ecdb:	83 ec 0c             	sub    $0xc,%esp
f010ecde:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ece1:	50                   	push   %eax
f010ece2:	e8 5d 07 00 00       	call   f010f444 <check_avaliable_list_data>
f010ece7:	83 c4 10             	add    $0x10,%esp
f010ecea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010eced:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ecf0:	8d 50 01             	lea    0x1(%eax),%edx
f010ecf3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ecf6:	39 c2                	cmp    %eax,%edx
f010ecf8:	74 17                	je     f010ed11 <test_insert_sorted_with_merge_freeList+0x57d>
f010ecfa:	83 ec 04             	sub    $0x4,%esp
f010ecfd:	68 b4 f6 12 f0       	push   $0xf012f6b4
f010ed02:	68 da 02 00 00       	push   $0x2da
f010ed07:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ed0c:	e8 95 14 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010ed11:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ed15:	74 17                	je     f010ed2e <test_insert_sorted_with_merge_freeList+0x59a>
f010ed17:	83 ec 04             	sub    $0x4,%esp
f010ed1a:	68 0c f7 12 f0       	push   $0xf012f70c
f010ed1f:	68 db 02 00 00       	push   $0x2db
f010ed24:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ed29:	e8 78 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010ed2e:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010ed35:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ed38:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010ed3f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010ed40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ed43:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010ed4a:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ed4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ed4e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ed52:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010ed58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ed5b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ed5f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010ed65:	83 ec 0c             	sub    $0xc,%esp
f010ed68:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010ed6e:	50                   	push   %eax
f010ed6f:	e8 bd b4 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010ed74:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010ed77:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010ed7c:	85 c0                	test   %eax,%eax
f010ed7e:	75 19                	jne    f010ed99 <test_insert_sorted_with_merge_freeList+0x605>
f010ed80:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010ed85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed88:	83 c2 02             	add    $0x2,%edx
f010ed8b:	39 d0                	cmp    %edx,%eax
f010ed8d:	75 0a                	jne    f010ed99 <test_insert_sorted_with_merge_freeList+0x605>
f010ed8f:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010ed94:	83 f8 04             	cmp    $0x4,%eax
f010ed97:	74 17                	je     f010edb0 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ed99:	83 ec 04             	sub    $0x4,%esp
f010ed9c:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010eda1:	68 ed 02 00 00       	push   $0x2ed
f010eda6:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010edab:	e8 f6 13 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010edb0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010edb7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010edbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010edc1:	8d 50 ff             	lea    -0x1(%eax),%edx
f010edc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010edc7:	48                   	dec    %eax
f010edc8:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010edcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010edcf:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010edd3:	01 c8                	add    %ecx,%eax
f010edd5:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010edd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eddc:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010ede3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010ede4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ede7:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010edee:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010edef:	83 ec 0c             	sub    $0xc,%esp
f010edf2:	ff 75 f0             	pushl  -0x10(%ebp)
f010edf5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010edf8:	50                   	push   %eax
f010edf9:	8d 45 98             	lea    -0x68(%ebp),%eax
f010edfc:	50                   	push   %eax
f010edfd:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ee00:	50                   	push   %eax
f010ee01:	68 00 44 6d f0       	push   $0xf06d4400
f010ee06:	e8 6d 05 00 00       	call   f010f378 <check_list_data>
f010ee0b:	83 c4 20             	add    $0x20,%esp
f010ee0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ee11:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ee15:	74 17                	je     f010ee2e <test_insert_sorted_with_merge_freeList+0x69a>
f010ee17:	83 ec 04             	sub    $0x4,%esp
f010ee1a:	68 0c f6 12 f0       	push   $0xf012f60c
f010ee1f:	68 f6 02 00 00       	push   $0x2f6
f010ee24:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ee29:	e8 78 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ee2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ee31:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee34:	74 17                	je     f010ee4d <test_insert_sorted_with_merge_freeList+0x6b9>
f010ee36:	83 ec 04             	sub    $0x4,%esp
f010ee39:	68 60 f6 12 f0       	push   $0xf012f660
f010ee3e:	68 f7 02 00 00       	push   $0x2f7
f010ee43:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ee48:	e8 59 13 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010ee4d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010ee54:	83 ec 0c             	sub    $0xc,%esp
f010ee57:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ee5a:	50                   	push   %eax
f010ee5b:	e8 e4 05 00 00       	call   f010f444 <check_avaliable_list_data>
f010ee60:	83 c4 10             	add    $0x10,%esp
f010ee63:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010ee66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee69:	8d 50 02             	lea    0x2(%eax),%edx
f010ee6c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ee6f:	39 c2                	cmp    %eax,%edx
f010ee71:	74 17                	je     f010ee8a <test_insert_sorted_with_merge_freeList+0x6f6>
f010ee73:	83 ec 04             	sub    $0x4,%esp
f010ee76:	68 b4 f6 12 f0       	push   $0xf012f6b4
f010ee7b:	68 fc 02 00 00       	push   $0x2fc
f010ee80:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ee85:	e8 1c 13 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010ee8a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ee8e:	74 17                	je     f010eea7 <test_insert_sorted_with_merge_freeList+0x713>
f010ee90:	83 ec 04             	sub    $0x4,%esp
f010ee93:	68 0c f7 12 f0       	push   $0xf012f70c
f010ee98:	68 fd 02 00 00       	push   $0x2fd
f010ee9d:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010eea2:	e8 ff 12 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010eea7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010eeae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eeb1:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010eeb8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010eeb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eebc:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010eec3:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010eec4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eec7:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010eecb:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010eed1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eed4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010eed8:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010eede:	83 ec 0c             	sub    $0xc,%esp
f010eee1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010eee7:	50                   	push   %eax
f010eee8:	e8 44 b3 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010eeed:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010eef0:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010eef5:	85 c0                	test   %eax,%eax
f010eef7:	75 19                	jne    f010ef12 <test_insert_sorted_with_merge_freeList+0x77e>
f010eef9:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010eefe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ef01:	83 c2 03             	add    $0x3,%edx
f010ef04:	39 d0                	cmp    %edx,%eax
f010ef06:	75 0a                	jne    f010ef12 <test_insert_sorted_with_merge_freeList+0x77e>
f010ef08:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010ef0d:	83 f8 04             	cmp    $0x4,%eax
f010ef10:	74 17                	je     f010ef29 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ef12:	83 ec 04             	sub    $0x4,%esp
f010ef15:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010ef1a:	68 10 03 00 00       	push   $0x310
f010ef1f:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010ef24:	e8 7d 12 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ef29:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010ef30:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010ef37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef3a:	8d 50 01             	lea    0x1(%eax),%edx
f010ef3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef40:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ef44:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010ef48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef4b:	8d 50 01             	lea    0x1(%eax),%edx
f010ef4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef51:	40                   	inc    %eax
f010ef52:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010ef56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef59:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ef5d:	01 c8                	add    %ecx,%eax
f010ef5f:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010ef63:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef66:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010ef6d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010ef6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ef71:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010ef78:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ef79:	83 ec 0c             	sub    $0xc,%esp
f010ef7c:	ff 75 f0             	pushl  -0x10(%ebp)
f010ef7f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ef82:	50                   	push   %eax
f010ef83:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ef86:	50                   	push   %eax
f010ef87:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ef8a:	50                   	push   %eax
f010ef8b:	68 00 44 6d f0       	push   $0xf06d4400
f010ef90:	e8 e3 03 00 00       	call   f010f378 <check_list_data>
f010ef95:	83 c4 20             	add    $0x20,%esp
f010ef98:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ef9b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ef9f:	74 17                	je     f010efb8 <test_insert_sorted_with_merge_freeList+0x824>
f010efa1:	83 ec 04             	sub    $0x4,%esp
f010efa4:	68 0c f6 12 f0       	push   $0xf012f60c
f010efa9:	68 1a 03 00 00       	push   $0x31a
f010efae:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010efb3:	e8 ee 11 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010efb8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010efbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010efbe:	74 17                	je     f010efd7 <test_insert_sorted_with_merge_freeList+0x843>
f010efc0:	83 ec 04             	sub    $0x4,%esp
f010efc3:	68 60 f6 12 f0       	push   $0xf012f660
f010efc8:	68 1b 03 00 00       	push   $0x31b
f010efcd:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010efd2:	e8 cf 11 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010efd7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010efde:	83 ec 0c             	sub    $0xc,%esp
f010efe1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010efe4:	50                   	push   %eax
f010efe5:	e8 5a 04 00 00       	call   f010f444 <check_avaliable_list_data>
f010efea:	83 c4 10             	add    $0x10,%esp
f010efed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010eff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eff3:	8d 50 03             	lea    0x3(%eax),%edx
f010eff6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010eff9:	39 c2                	cmp    %eax,%edx
f010effb:	74 17                	je     f010f014 <test_insert_sorted_with_merge_freeList+0x880>
f010effd:	83 ec 04             	sub    $0x4,%esp
f010f000:	68 b4 f6 12 f0       	push   $0xf012f6b4
f010f005:	68 20 03 00 00       	push   $0x320
f010f00a:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f00f:	e8 92 11 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f014:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f018:	74 17                	je     f010f031 <test_insert_sorted_with_merge_freeList+0x89d>
f010f01a:	83 ec 04             	sub    $0x4,%esp
f010f01d:	68 0c f7 12 f0       	push   $0xf012f70c
f010f022:	68 21 03 00 00       	push   $0x321
f010f027:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f02c:	e8 75 11 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f010f031:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f010f038:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f03b:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f010f042:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f043:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f046:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f04d:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f04e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f051:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f055:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f010f05b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f05e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f062:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f010f068:	83 ec 0c             	sub    $0xc,%esp
f010f06b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f071:	50                   	push   %eax
f010f072:	e8 ba b1 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010f077:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f07a:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010f07f:	85 c0                	test   %eax,%eax
f010f081:	75 19                	jne    f010f09c <test_insert_sorted_with_merge_freeList+0x908>
f010f083:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010f088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f08b:	83 c2 04             	add    $0x4,%edx
f010f08e:	39 d0                	cmp    %edx,%eax
f010f090:	75 0a                	jne    f010f09c <test_insert_sorted_with_merge_freeList+0x908>
f010f092:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010f097:	83 f8 04             	cmp    $0x4,%eax
f010f09a:	74 17                	je     f010f0b3 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f09c:	83 ec 04             	sub    $0x4,%esp
f010f09f:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010f0a4:	68 34 03 00 00       	push   $0x334
f010f0a9:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f0ae:	e8 f3 10 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f0b3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f0ba:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010f0c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0c4:	8d 50 01             	lea    0x1(%eax),%edx
f010f0c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0ca:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f0ce:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010f0d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0d5:	8d 50 01             	lea    0x1(%eax),%edx
f010f0d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0db:	40                   	inc    %eax
f010f0dc:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f0e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0e3:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f0e7:	01 c8                	add    %ecx,%eax
f010f0e9:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f0ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0f0:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f0f7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f0f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0fb:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f102:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f103:	83 ec 0c             	sub    $0xc,%esp
f010f106:	ff 75 f0             	pushl  -0x10(%ebp)
f010f109:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f10c:	50                   	push   %eax
f010f10d:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f110:	50                   	push   %eax
f010f111:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f114:	50                   	push   %eax
f010f115:	68 00 44 6d f0       	push   $0xf06d4400
f010f11a:	e8 59 02 00 00       	call   f010f378 <check_list_data>
f010f11f:	83 c4 20             	add    $0x20,%esp
f010f122:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f125:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f129:	74 17                	je     f010f142 <test_insert_sorted_with_merge_freeList+0x9ae>
f010f12b:	83 ec 04             	sub    $0x4,%esp
f010f12e:	68 0c f6 12 f0       	push   $0xf012f60c
f010f133:	68 3e 03 00 00       	push   $0x33e
f010f138:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f13d:	e8 64 10 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f142:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f145:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f148:	74 17                	je     f010f161 <test_insert_sorted_with_merge_freeList+0x9cd>
f010f14a:	83 ec 04             	sub    $0x4,%esp
f010f14d:	68 60 f6 12 f0       	push   $0xf012f660
f010f152:	68 3f 03 00 00       	push   $0x33f
f010f157:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f15c:	e8 45 10 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f161:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f168:	83 ec 0c             	sub    $0xc,%esp
f010f16b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f16e:	50                   	push   %eax
f010f16f:	e8 d0 02 00 00       	call   f010f444 <check_avaliable_list_data>
f010f174:	83 c4 10             	add    $0x10,%esp
f010f177:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f17a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f17d:	8d 50 04             	lea    0x4(%eax),%edx
f010f180:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f183:	39 c2                	cmp    %eax,%edx
f010f185:	74 17                	je     f010f19e <test_insert_sorted_with_merge_freeList+0xa0a>
f010f187:	83 ec 04             	sub    $0x4,%esp
f010f18a:	68 b4 f6 12 f0       	push   $0xf012f6b4
f010f18f:	68 44 03 00 00       	push   $0x344
f010f194:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f199:	e8 08 10 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f19e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f1a2:	74 17                	je     f010f1bb <test_insert_sorted_with_merge_freeList+0xa27>
f010f1a4:	83 ec 04             	sub    $0x4,%esp
f010f1a7:	68 0c f7 12 f0       	push   $0xf012f70c
f010f1ac:	68 45 03 00 00       	push   $0x345
f010f1b1:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f1b6:	e8 eb 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f010f1bb:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f010f1c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1c5:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f010f1cc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f010f1cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1d0:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f010f1d7:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f1d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1db:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f1df:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f010f1e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1e8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f1ec:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f010f1f2:	83 ec 0c             	sub    $0xc,%esp
f010f1f5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f010f1fb:	50                   	push   %eax
f010f1fc:	e8 30 b0 01 00       	call   f012a231 <insert_sorted_with_merge_freeList>
f010f201:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010f204:	a1 3c 4f 64 f0       	mov    0xf0644f3c,%eax
f010f209:	85 c0                	test   %eax,%eax
f010f20b:	75 19                	jne    f010f226 <test_insert_sorted_with_merge_freeList+0xa92>
f010f20d:	a1 40 44 6d f0       	mov    0xf06d4440,%eax
f010f212:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f215:	83 c2 06             	add    $0x6,%edx
f010f218:	39 d0                	cmp    %edx,%eax
f010f21a:	75 0a                	jne    f010f226 <test_insert_sorted_with_merge_freeList+0xa92>
f010f21c:	a1 0c 44 6d f0       	mov    0xf06d440c,%eax
f010f221:	83 f8 03             	cmp    $0x3,%eax
f010f224:	74 17                	je     f010f23d <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f226:	83 ec 04             	sub    $0x4,%esp
f010f229:	68 a0 f5 12 f0       	push   $0xf012f5a0
f010f22e:	68 58 03 00 00       	push   $0x358
f010f233:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f238:	e8 69 0f ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f23d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010f244:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f010f24b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f24e:	48                   	dec    %eax
f010f24f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f256:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f010f257:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f25a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f25d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f260:	48                   	dec    %eax
f010f261:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f265:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f268:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f26c:	01 c1                	add    %eax,%ecx
f010f26e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f271:	40                   	inc    %eax
f010f272:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f276:	01 c8                	add    %ecx,%eax
f010f278:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f27c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f27f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f286:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f287:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f28a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f291:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f010f292:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f295:	40                   	inc    %eax
f010f296:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f29d:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f010f29e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2a1:	40                   	inc    %eax
f010f2a2:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f2a9:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f2aa:	83 ec 0c             	sub    $0xc,%esp
f010f2ad:	ff 75 f0             	pushl  -0x10(%ebp)
f010f2b0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f2b3:	50                   	push   %eax
f010f2b4:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f2b7:	50                   	push   %eax
f010f2b8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f2bb:	50                   	push   %eax
f010f2bc:	68 00 44 6d f0       	push   $0xf06d4400
f010f2c1:	e8 b2 00 00 00       	call   f010f378 <check_list_data>
f010f2c6:	83 c4 20             	add    $0x20,%esp
f010f2c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f2cc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f2d0:	74 17                	je     f010f2e9 <test_insert_sorted_with_merge_freeList+0xb55>
f010f2d2:	83 ec 04             	sub    $0x4,%esp
f010f2d5:	68 0c f6 12 f0       	push   $0xf012f60c
f010f2da:	68 64 03 00 00       	push   $0x364
f010f2df:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f2e4:	e8 bd 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f2e9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f2ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f2ef:	74 17                	je     f010f308 <test_insert_sorted_with_merge_freeList+0xb74>
f010f2f1:	83 ec 04             	sub    $0x4,%esp
f010f2f4:	68 60 f6 12 f0       	push   $0xf012f660
f010f2f9:	68 65 03 00 00       	push   $0x365
f010f2fe:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f303:	e8 9e 0e ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f308:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f30f:	83 ec 0c             	sub    $0xc,%esp
f010f312:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f315:	50                   	push   %eax
f010f316:	e8 29 01 00 00       	call   f010f444 <check_avaliable_list_data>
f010f31b:	83 c4 10             	add    $0x10,%esp
f010f31e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f321:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f324:	8d 50 06             	lea    0x6(%eax),%edx
f010f327:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f32a:	39 c2                	cmp    %eax,%edx
f010f32c:	74 17                	je     f010f345 <test_insert_sorted_with_merge_freeList+0xbb1>
f010f32e:	83 ec 04             	sub    $0x4,%esp
f010f331:	68 b4 f6 12 f0       	push   $0xf012f6b4
f010f336:	68 6a 03 00 00       	push   $0x36a
f010f33b:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f340:	e8 61 0e ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f345:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f349:	74 17                	je     f010f362 <test_insert_sorted_with_merge_freeList+0xbce>
f010f34b:	83 ec 04             	sub    $0x4,%esp
f010f34e:	68 0c f7 12 f0       	push   $0xf012f70c
f010f353:	68 6b 03 00 00       	push   $0x36b
f010f358:	68 f4 e9 12 f0       	push   $0xf012e9f4
f010f35d:	e8 44 0e ff ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f010f362:	83 ec 0c             	sub    $0xc,%esp
f010f365:	68 68 f7 12 f0       	push   $0xf012f768
f010f36a:	e8 be 18 ff ff       	call   f0100c2d <cprintf>
f010f36f:	83 c4 10             	add    $0x10,%esp

}
f010f372:	90                   	nop
f010f373:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f376:	c9                   	leave  
f010f377:	c3                   	ret    

f010f378 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f010f378:	55                   	push   %ebp
f010f379:	89 e5                	mov    %esp,%ebp
f010f37b:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010f37e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010f385:	8b 45 14             	mov    0x14(%ebp),%eax
f010f388:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f010f38e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f010f395:	8b 45 08             	mov    0x8(%ebp),%eax
f010f398:	8b 00                	mov    (%eax),%eax
f010f39a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010f39d:	eb 6e                	jmp    f010f40d <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f010f39f:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f010f3a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f3a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f3ac:	8b 45 10             	mov    0x10(%ebp),%eax
f010f3af:	01 d0                	add    %edx,%eax
f010f3b1:	8b 00                	mov    (%eax),%eax
f010f3b3:	85 c0                	test   %eax,%eax
f010f3b5:	74 e8                	je     f010f39f <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f010f3b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f3ba:	8b 50 08             	mov    0x8(%eax),%edx
f010f3bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f3c0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f3c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3ca:	01 c8                	add    %ecx,%eax
f010f3cc:	8b 00                	mov    (%eax),%eax
f010f3ce:	39 c2                	cmp    %eax,%edx
f010f3d0:	75 1b                	jne    f010f3ed <check_list_data+0x75>
f010f3d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f3d5:	8b 50 0c             	mov    0xc(%eax),%edx
f010f3d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010f3db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f3e2:	8b 45 10             	mov    0x10(%ebp),%eax
f010f3e5:	01 c8                	add    %ecx,%eax
f010f3e7:	8b 00                	mov    (%eax),%eax
f010f3e9:	39 c2                	cmp    %eax,%edx
f010f3eb:	74 07                	je     f010f3f4 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f010f3ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3f2:	eb 4e                	jmp    f010f442 <check_list_data+0xca>
		}
		(*size)++;
f010f3f4:	8b 45 14             	mov    0x14(%ebp),%eax
f010f3f7:	8b 00                	mov    (%eax),%eax
f010f3f9:	8d 50 01             	lea    0x1(%eax),%edx
f010f3fc:	8b 45 14             	mov    0x14(%ebp),%eax
f010f3ff:	89 10                	mov    %edx,(%eax)
		i++;
f010f401:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f010f404:	8b 45 08             	mov    0x8(%ebp),%eax
f010f407:	8b 40 08             	mov    0x8(%eax),%eax
f010f40a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010f40d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010f411:	74 07                	je     f010f41a <check_list_data+0xa2>
f010f413:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f416:	8b 00                	mov    (%eax),%eax
f010f418:	eb 05                	jmp    f010f41f <check_list_data+0xa7>
f010f41a:	b8 00 00 00 00       	mov    $0x0,%eax
f010f41f:	8b 55 08             	mov    0x8(%ebp),%edx
f010f422:	89 42 08             	mov    %eax,0x8(%edx)
f010f425:	8b 45 08             	mov    0x8(%ebp),%eax
f010f428:	8b 40 08             	mov    0x8(%eax),%eax
f010f42b:	85 c0                	test   %eax,%eax
f010f42d:	0f 85 6f ff ff ff    	jne    f010f3a2 <check_list_data+0x2a>
f010f433:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010f437:	0f 85 65 ff ff ff    	jne    f010f3a2 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f010f43d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010f442:	c9                   	leave  
f010f443:	c3                   	ret    

f010f444 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f010f444:	55                   	push   %ebp
f010f445:	89 e5                	mov    %esp,%ebp
f010f447:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010f44a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010f451:	8b 45 08             	mov    0x8(%ebp),%eax
f010f454:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f010f45a:	a1 34 44 6d f0       	mov    0xf06d4434,%eax
f010f45f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010f462:	eb 30                	jmp    f010f494 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f010f464:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f467:	8b 40 08             	mov    0x8(%eax),%eax
f010f46a:	85 c0                	test   %eax,%eax
f010f46c:	75 0a                	jne    f010f478 <check_avaliable_list_data+0x34>
f010f46e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f471:	8b 40 0c             	mov    0xc(%eax),%eax
f010f474:	85 c0                	test   %eax,%eax
f010f476:	74 07                	je     f010f47f <check_avaliable_list_data+0x3b>
		{
			return 0;
f010f478:	b8 00 00 00 00       	mov    $0x0,%eax
f010f47d:	eb 40                	jmp    f010f4bf <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f010f47f:	8b 45 08             	mov    0x8(%ebp),%eax
f010f482:	8b 00                	mov    (%eax),%eax
f010f484:	8d 50 01             	lea    0x1(%eax),%edx
f010f487:	8b 45 08             	mov    0x8(%ebp),%eax
f010f48a:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f010f48c:	a1 3c 44 6d f0       	mov    0xf06d443c,%eax
f010f491:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010f494:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010f498:	74 07                	je     f010f4a1 <check_avaliable_list_data+0x5d>
f010f49a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010f49d:	8b 00                	mov    (%eax),%eax
f010f49f:	eb 05                	jmp    f010f4a6 <check_avaliable_list_data+0x62>
f010f4a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010f4a6:	a3 3c 44 6d f0       	mov    %eax,0xf06d443c
f010f4ab:	a1 3c 44 6d f0       	mov    0xf06d443c,%eax
f010f4b0:	85 c0                	test   %eax,%eax
f010f4b2:	75 b0                	jne    f010f464 <check_avaliable_list_data+0x20>
f010f4b4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010f4b8:	75 aa                	jne    f010f464 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f010f4ba:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010f4bf:	c9                   	leave  
f010f4c0:	c3                   	ret    

f010f4c1 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f010f4c1:	55                   	push   %ebp
f010f4c2:	89 e5                	mov    %esp,%ebp
f010f4c4:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f010f4c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f010f4ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010f4d1:	8b 00                	mov    (%eax),%eax
f010f4d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f4d6:	eb 27                	jmp    f010f4ff <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010f4d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f4db:	8b 50 0c             	mov    0xc(%eax),%edx
f010f4de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f4e1:	8b 40 08             	mov    0x8(%eax),%eax
f010f4e4:	83 ec 04             	sub    $0x4,%esp
f010f4e7:	52                   	push   %edx
f010f4e8:	50                   	push   %eax
f010f4e9:	68 b8 ea 12 f0       	push   $0xf012eab8
f010f4ee:	e8 3a 17 ff ff       	call   f0100c2d <cprintf>
f010f4f3:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f010f4f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010f4f9:	8b 40 08             	mov    0x8(%eax),%eax
f010f4fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f4ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f503:	74 07                	je     f010f50c <show_list_content+0x4b>
f010f505:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f508:	8b 00                	mov    (%eax),%eax
f010f50a:	eb 05                	jmp    f010f511 <show_list_content+0x50>
f010f50c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f511:	8b 55 08             	mov    0x8(%ebp),%edx
f010f514:	89 42 08             	mov    %eax,0x8(%edx)
f010f517:	8b 45 08             	mov    0x8(%ebp),%eax
f010f51a:	8b 40 08             	mov    0x8(%eax),%eax
f010f51d:	85 c0                	test   %eax,%eax
f010f51f:	75 b7                	jne    f010f4d8 <show_list_content+0x17>
f010f521:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f525:	75 b1                	jne    f010f4d8 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f010f527:	90                   	nop
f010f528:	c9                   	leave  
f010f529:	c3                   	ret    

f010f52a <TestAutoCompleteCommand>:

//define the white-space symbols
#define WHITESPACE "\t\r\n "

int TestAutoCompleteCommand()
{
f010f52a:	55                   	push   %ebp
f010f52b:	89 e5                	mov    %esp,%ebp
f010f52d:	57                   	push   %edi
f010f52e:	56                   	push   %esi
f010f52f:	53                   	push   %ebx
f010f530:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f010f536:	83 ec 0c             	sub    $0xc,%esp
f010f539:	68 bc f7 12 f0       	push   $0xf012f7bc
f010f53e:	e8 ea 16 ff ff       	call   f0100c2d <cprintf>
f010f543:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f010f546:	83 ec 0c             	sub    $0xc,%esp
f010f549:	68 e0 f7 12 f0       	push   $0xf012f7e0
f010f54e:	e8 da 16 ff ff       	call   f0100c2d <cprintf>
f010f553:	83 c4 10             	add    $0x10,%esp
//	cprintf("========================\n");
//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
//
//	int retValue = 0;
	int i = 0;
f010f556:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f010f55d:	83 ec 0c             	sub    $0xc,%esp
f010f560:	68 fc f7 12 f0       	push   $0xf012f7fc
f010f565:	e8 c3 16 ff ff       	call   f0100c2d <cprintf>
f010f56a:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f010f56d:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f570:	bb b6 f8 12 f0       	mov    $0xf012f8b6,%ebx
f010f575:	ba 03 00 00 00       	mov    $0x3,%edx
f010f57a:	89 c7                	mov    %eax,%edi
f010f57c:	89 de                	mov    %ebx,%esi
f010f57e:	89 d1                	mov    %edx,%ecx
f010f580:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010f582:	8d 55 8c             	lea    -0x74(%ebp),%edx
f010f585:	b9 16 00 00 00       	mov    $0x16,%ecx
f010f58a:	b8 00 00 00 00       	mov    $0x0,%eax
f010f58f:	89 d7                	mov    %edx,%edi
f010f591:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f010f593:	83 ec 0c             	sub    $0xc,%esp
f010f596:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f599:	50                   	push   %eax
f010f59a:	e8 f0 16 ff ff       	call   f0100c8f <execute_command>
f010f59f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010f5a2:	83 ec 0c             	sub    $0xc,%esp
f010f5a5:	68 2a f8 12 f0       	push   $0xf012f82a
f010f5aa:	e8 7e 16 ff ff       	call   f0100c2d <cprintf>
f010f5af:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f010f5b2:	83 ec 0c             	sub    $0xc,%esp
f010f5b5:	68 40 f8 12 f0       	push   $0xf012f840
f010f5ba:	e8 6e 16 ff ff       	call   f0100c2d <cprintf>
f010f5bf:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f010f5c2:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f010f5c9:	65 00 00 
f010f5cc:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f010f5d2:	b9 18 00 00 00       	mov    $0x18,%ecx
f010f5d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010f5dc:	89 d7                	mov    %edx,%edi
f010f5de:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f010f5e0:	83 ec 0c             	sub    $0xc,%esp
f010f5e3:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f010f5e9:	50                   	push   %eax
f010f5ea:	e8 a0 16 ff ff       	call   f0100c8f <execute_command>
f010f5ef:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010f5f2:	83 ec 0c             	sub    $0xc,%esp
f010f5f5:	68 2a f8 12 f0       	push   $0xf012f82a
f010f5fa:	e8 2e 16 ff ff       	call   f0100c2d <cprintf>
f010f5ff:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f010f602:	83 ec 0c             	sub    $0xc,%esp
f010f605:	68 68 f8 12 f0       	push   $0xf012f868
f010f60a:	e8 1e 16 ff ff       	call   f0100c2d <cprintf>
f010f60f:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f010f612:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f010f619:	75 00 00 
f010f61c:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f010f622:	b9 18 00 00 00       	mov    $0x18,%ecx
f010f627:	b8 00 00 00 00       	mov    $0x0,%eax
f010f62c:	89 d7                	mov    %edx,%edi
f010f62e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f010f630:	83 ec 0c             	sub    $0xc,%esp
f010f633:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f010f639:	50                   	push   %eax
f010f63a:	e8 50 16 ff ff       	call   f0100c8f <execute_command>
f010f63f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010f642:	83 ec 0c             	sub    $0xc,%esp
f010f645:	68 2a f8 12 f0       	push   $0xf012f82a
f010f64a:	e8 de 15 ff ff       	call   f0100c2d <cprintf>
f010f64f:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f010f652:	83 ec 0c             	sub    $0xc,%esp
f010f655:	68 90 f8 12 f0       	push   $0xf012f890
f010f65a:	e8 ce 15 ff ff       	call   f0100c2d <cprintf>
f010f65f:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f010f662:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f010f669:	6d 6d 00 
f010f66c:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f010f672:	b9 18 00 00 00       	mov    $0x18,%ecx
f010f677:	b8 00 00 00 00       	mov    $0x0,%eax
f010f67c:	89 d7                	mov    %edx,%edi
f010f67e:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f010f680:	83 ec 0c             	sub    $0xc,%esp
f010f683:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f010f689:	50                   	push   %eax
f010f68a:	e8 00 16 ff ff       	call   f0100c8f <execute_command>
f010f68f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010f692:	83 ec 0c             	sub    $0xc,%esp
f010f695:	68 2a f8 12 f0       	push   $0xf012f82a
f010f69a:	e8 8e 15 ff ff       	call   f0100c2d <cprintf>
f010f69f:	83 c4 10             	add    $0x10,%esp
	return 0;
f010f6a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f6a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6aa:	5b                   	pop    %ebx
f010f6ab:	5e                   	pop    %esi
f010f6ac:	5f                   	pop    %edi
f010f6ad:	5d                   	pop    %ebp
f010f6ae:	c3                   	ret    

f010f6af <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f010f6af:	55                   	push   %ebp
f010f6b0:	89 e5                	mov    %esp,%ebp
f010f6b2:	57                   	push   %edi
f010f6b3:	56                   	push   %esi
f010f6b4:	53                   	push   %ebx
f010f6b5:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f010f6bb:	a0 0e cc 17 f0       	mov    0xf017cc0e,%al
f010f6c0:	84 c0                	test   %al,%al
f010f6c2:	0f 84 a8 09 00 00    	je     f0110070 <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f010f6c8:	c6 05 0e cc 17 f0 00 	movb   $0x0,0xf017cc0e
		char command[100] = "load fos_add 20";
f010f6cf:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f010f6d5:	bb 7c fb 12 f0       	mov    $0xf012fb7c,%ebx
f010f6da:	ba 04 00 00 00       	mov    $0x4,%edx
f010f6df:	89 c7                	mov    %eax,%edi
f010f6e1:	89 de                	mov    %ebx,%esi
f010f6e3:	89 d1                	mov    %edx,%ecx
f010f6e5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010f6e7:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f010f6ed:	b9 15 00 00 00       	mov    $0x15,%ecx
f010f6f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010f6f7:	89 d7                	mov    %edx,%edi
f010f6f9:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f010f6fb:	83 ec 0c             	sub    $0xc,%esp
f010f6fe:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f010f704:	50                   	push   %eax
f010f705:	e8 85 15 ff ff       	call   f0100c8f <execute_command>
f010f70a:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f010f70d:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f010f713:	bb e0 fb 12 f0       	mov    $0xf012fbe0,%ebx
f010f718:	ba 0d 00 00 00       	mov    $0xd,%edx
f010f71d:	89 c7                	mov    %eax,%edi
f010f71f:	89 de                	mov    %ebx,%esi
f010f721:	89 d1                	mov    %edx,%ecx
f010f723:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f010f725:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f010f72b:	b9 57 00 00 00       	mov    $0x57,%ecx
f010f730:	b0 00                	mov    $0x0,%al
f010f732:	89 d7                	mov    %edx,%edi
f010f734:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f010f736:	83 ec 0c             	sub    $0xc,%esp
f010f739:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f010f73f:	50                   	push   %eax
f010f740:	e8 4a 15 ff ff       	call   f0100c8f <execute_command>
f010f745:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f010f748:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f010f74e:	bb 44 fc 12 f0       	mov    $0xf012fc44,%ebx
f010f753:	ba 17 00 00 00       	mov    $0x17,%edx
f010f758:	89 c7                	mov    %eax,%edi
f010f75a:	89 de                	mov    %ebx,%esi
f010f75c:	89 d1                	mov    %edx,%ecx
f010f75e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f010f760:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f010f766:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f010f76b:	b0 00                	mov    $0x0,%al
f010f76d:	89 d7                	mov    %edx,%edi
f010f76f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f010f771:	83 ec 0c             	sub    $0xc,%esp
f010f774:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f010f77a:	50                   	push   %eax
f010f77b:	e8 0f 15 ff ff       	call   f0100c8f <execute_command>
f010f780:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f010f783:	83 ec 04             	sub    $0x4,%esp
f010f786:	6a 00                	push   $0x0
f010f788:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f78b:	50                   	push   %eax
f010f78c:	68 00 10 00 00       	push   $0x1000
f010f791:	e8 29 8e ff ff       	call   f01085bf <envid2env>
f010f796:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f010f799:	83 ec 04             	sub    $0x4,%esp
f010f79c:	6a 00                	push   $0x0
f010f79e:	8d 45 a8             	lea    -0x58(%ebp),%eax
f010f7a1:	50                   	push   %eax
f010f7a2:	68 01 10 00 00       	push   $0x1001
f010f7a7:	e8 13 8e ff ff       	call   f01085bf <envid2env>
f010f7ac:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f010f7af:	83 ec 04             	sub    $0x4,%esp
f010f7b2:	6a 00                	push   $0x0
f010f7b4:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f010f7b7:	50                   	push   %eax
f010f7b8:	68 02 10 00 00       	push   $0x1002
f010f7bd:	e8 fd 8d ff ff       	call   f01085bf <envid2env>
f010f7c2:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f010f7c5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7c8:	85 c0                	test   %eax,%eax
f010f7ca:	74 0e                	je     f010f7da <test_priority_normal_and_higher+0x12b>
f010f7cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f7cf:	85 c0                	test   %eax,%eax
f010f7d1:	74 07                	je     f010f7da <test_priority_normal_and_higher+0x12b>
f010f7d3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f7d6:	85 c0                	test   %eax,%eax
f010f7d8:	75 14                	jne    f010f7ee <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f010f7da:	83 ec 04             	sub    $0x4,%esp
f010f7dd:	68 1c f9 12 f0       	push   $0xf012f91c
f010f7e2:	6a 26                	push   $0x26
f010f7e4:	68 35 f9 12 f0       	push   $0xf012f935
f010f7e9:	e8 b8 09 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f010f7ee:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f7f1:	8b 40 74             	mov    0x74(%eax),%eax
f010f7f4:	83 f8 14             	cmp    $0x14,%eax
f010f7f7:	75 16                	jne    f010f80f <test_priority_normal_and_higher+0x160>
f010f7f9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f7fc:	8b 40 74             	mov    0x74(%eax),%eax
f010f7ff:	83 f8 0f             	cmp    $0xf,%eax
f010f802:	75 0b                	jne    f010f80f <test_priority_normal_and_higher+0x160>
f010f804:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f807:	8b 40 74             	mov    0x74(%eax),%eax
f010f80a:	83 f8 0a             	cmp    $0xa,%eax
f010f80d:	74 14                	je     f010f823 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f010f80f:	83 ec 04             	sub    $0x4,%esp
f010f812:	68 50 f9 12 f0       	push   $0xf012f950
f010f817:	6a 29                	push   $0x29
f010f819:	68 35 f9 12 f0       	push   $0xf012f935
f010f81e:	e8 83 09 ff ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f010f823:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f82a:	eb 43                	jmp    f010f86f <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f010f82c:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f010f82f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f832:	89 d0                	mov    %edx,%eax
f010f834:	01 c0                	add    %eax,%eax
f010f836:	01 d0                	add    %edx,%eax
f010f838:	c1 e0 03             	shl    $0x3,%eax
f010f83b:	01 c8                	add    %ecx,%eax
f010f83d:	83 c0 78             	add    $0x78,%eax
f010f840:	8b 10                	mov    (%eax),%edx
f010f842:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f845:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f010f84c:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f010f84f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f852:	89 d0                	mov    %edx,%eax
f010f854:	01 c0                	add    %eax,%eax
f010f856:	01 d0                	add    %edx,%eax
f010f858:	c1 e0 03             	shl    $0x3,%eax
f010f85b:	01 c8                	add    %ecx,%eax
f010f85d:	83 e8 80             	sub    $0xffffff80,%eax
f010f860:	8b 10                	mov    (%eax),%edx
f010f862:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f865:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f010f86c:	ff 45 e4             	incl   -0x1c(%ebp)
f010f86f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f010f873:	7e b7                	jle    f010f82c <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f010f875:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f010f87c:	eb 43                	jmp    f010f8c1 <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f010f87e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f010f881:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f884:	89 d0                	mov    %edx,%eax
f010f886:	01 c0                	add    %eax,%eax
f010f888:	01 d0                	add    %edx,%eax
f010f88a:	c1 e0 03             	shl    $0x3,%eax
f010f88d:	01 c8                	add    %ecx,%eax
f010f88f:	83 c0 78             	add    $0x78,%eax
f010f892:	8b 10                	mov    (%eax),%edx
f010f894:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f897:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f010f89e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f010f8a1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f8a4:	89 d0                	mov    %edx,%eax
f010f8a6:	01 c0                	add    %eax,%eax
f010f8a8:	01 d0                	add    %edx,%eax
f010f8aa:	c1 e0 03             	shl    $0x3,%eax
f010f8ad:	01 c8                	add    %ecx,%eax
f010f8af:	83 e8 80             	sub    $0xffffff80,%eax
f010f8b2:	8b 10                	mov    (%eax),%edx
f010f8b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f8b7:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f010f8be:	ff 45 e0             	incl   -0x20(%ebp)
f010f8c1:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f010f8c5:	7e b7                	jle    f010f87e <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f010f8c7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f8ce:	eb 43                	jmp    f010f913 <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f010f8d0:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f010f8d3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010f8d6:	89 d0                	mov    %edx,%eax
f010f8d8:	01 c0                	add    %eax,%eax
f010f8da:	01 d0                	add    %edx,%eax
f010f8dc:	c1 e0 03             	shl    $0x3,%eax
f010f8df:	01 c8                	add    %ecx,%eax
f010f8e1:	83 c0 78             	add    $0x78,%eax
f010f8e4:	8b 10                	mov    (%eax),%edx
f010f8e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f8e9:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f010f8f0:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f010f8f3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010f8f6:	89 d0                	mov    %edx,%eax
f010f8f8:	01 c0                	add    %eax,%eax
f010f8fa:	01 d0                	add    %edx,%eax
f010f8fc:	c1 e0 03             	shl    $0x3,%eax
f010f8ff:	01 c8                	add    %ecx,%eax
f010f901:	83 e8 80             	sub    $0xffffff80,%eax
f010f904:	8b 10                	mov    (%eax),%edx
f010f906:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f909:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f010f910:	ff 45 dc             	incl   -0x24(%ebp)
f010f913:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f010f917:	7e b7                	jle    f010f8d0 <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f010f919:	e8 92 bc ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010f91e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f010f921:	e8 7e 3b ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010f926:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f010f929:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f92c:	83 ec 08             	sub    $0x8,%esp
f010f92f:	6a 03                	push   $0x3
f010f931:	50                   	push   %eax
f010f932:	e8 6f a1 ff ff       	call   f0109aa6 <set_program_priority>
f010f937:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f010f93a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f93d:	83 ec 08             	sub    $0x8,%esp
f010f940:	6a 03                	push   $0x3
f010f942:	50                   	push   %eax
f010f943:	e8 5e a1 ff ff       	call   f0109aa6 <set_program_priority>
f010f948:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f010f94b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f94e:	83 ec 08             	sub    $0x8,%esp
f010f951:	6a 03                	push   $0x3
f010f953:	50                   	push   %eax
f010f954:	e8 4d a1 ff ff       	call   f0109aa6 <set_program_priority>
f010f959:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010f95c:	e8 43 3b ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010f961:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010f964:	74 14                	je     f010f97a <test_priority_normal_and_higher+0x2cb>
f010f966:	83 ec 04             	sub    $0x4,%esp
f010f969:	68 9c f9 12 f0       	push   $0xf012f99c
f010f96e:	6a 45                	push   $0x45
f010f970:	68 35 f9 12 f0       	push   $0xf012f935
f010f975:	e8 2c 08 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f010f97a:	e8 31 bc ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010f97f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f982:	74 14                	je     f010f998 <test_priority_normal_and_higher+0x2e9>
f010f984:	83 ec 04             	sub    $0x4,%esp
f010f987:	68 9c f9 12 f0       	push   $0xf012f99c
f010f98c:	6a 46                	push   $0x46
f010f98e:	68 35 f9 12 f0       	push   $0xf012f935
f010f993:	e8 0e 08 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f010f998:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f99b:	8b 40 74             	mov    0x74(%eax),%eax
f010f99e:	83 f8 14             	cmp    $0x14,%eax
f010f9a1:	75 16                	jne    f010f9b9 <test_priority_normal_and_higher+0x30a>
f010f9a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f9a6:	8b 40 74             	mov    0x74(%eax),%eax
f010f9a9:	83 f8 0f             	cmp    $0xf,%eax
f010f9ac:	75 0b                	jne    f010f9b9 <test_priority_normal_and_higher+0x30a>
f010f9ae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f9b1:	8b 40 74             	mov    0x74(%eax),%eax
f010f9b4:	83 f8 0a             	cmp    $0xa,%eax
f010f9b7:	74 14                	je     f010f9cd <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f010f9b9:	83 ec 04             	sub    $0x4,%esp
f010f9bc:	68 c8 f9 12 f0       	push   $0xf012f9c8
f010f9c1:	6a 49                	push   $0x49
f010f9c3:	68 35 f9 12 f0       	push   $0xf012f935
f010f9c8:	e8 d9 07 ff ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f010f9cd:	e8 de bb ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010f9d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f9d5:	e8 ca 3a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010f9da:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f010f9dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9e0:	83 ec 08             	sub    $0x8,%esp
f010f9e3:	6a 04                	push   $0x4
f010f9e5:	50                   	push   %eax
f010f9e6:	e8 bb a0 ff ff       	call   f0109aa6 <set_program_priority>
f010f9eb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f010f9ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f9f1:	83 ec 08             	sub    $0x8,%esp
f010f9f4:	6a 04                	push   $0x4
f010f9f6:	50                   	push   %eax
f010f9f7:	e8 aa a0 ff ff       	call   f0109aa6 <set_program_priority>
f010f9fc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f010f9ff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fa02:	83 ec 08             	sub    $0x8,%esp
f010fa05:	6a 04                	push   $0x4
f010fa07:	50                   	push   %eax
f010fa08:	e8 99 a0 ff ff       	call   f0109aa6 <set_program_priority>
f010fa0d:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010fa10:	e8 8f 3a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fa15:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010fa18:	74 14                	je     f010fa2e <test_priority_normal_and_higher+0x37f>
f010fa1a:	83 ec 04             	sub    $0x4,%esp
f010fa1d:	68 9c f9 12 f0       	push   $0xf012f99c
f010fa22:	6a 53                	push   $0x53
f010fa24:	68 35 f9 12 f0       	push   $0xf012f935
f010fa29:	e8 78 07 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f010fa2e:	e8 7d bb ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fa33:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fa36:	74 14                	je     f010fa4c <test_priority_normal_and_higher+0x39d>
f010fa38:	83 ec 04             	sub    $0x4,%esp
f010fa3b:	68 1c fa 12 f0       	push   $0xf012fa1c
f010fa40:	6a 54                	push   $0x54
f010fa42:	68 35 f9 12 f0       	push   $0xf012f935
f010fa47:	e8 5a 07 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f010fa4c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa4f:	8b 40 74             	mov    0x74(%eax),%eax
f010fa52:	83 f8 14             	cmp    $0x14,%eax
f010fa55:	75 16                	jne    f010fa6d <test_priority_normal_and_higher+0x3be>
f010fa57:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fa5a:	8b 40 74             	mov    0x74(%eax),%eax
f010fa5d:	83 f8 0f             	cmp    $0xf,%eax
f010fa60:	75 0b                	jne    f010fa6d <test_priority_normal_and_higher+0x3be>
f010fa62:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fa65:	8b 40 74             	mov    0x74(%eax),%eax
f010fa68:	83 f8 14             	cmp    $0x14,%eax
f010fa6b:	74 14                	je     f010fa81 <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f010fa6d:	83 ec 04             	sub    $0x4,%esp
f010fa70:	68 4c fa 12 f0       	push   $0xf012fa4c
f010fa75:	6a 57                	push   $0x57
f010fa77:	68 35 f9 12 f0       	push   $0xf012f935
f010fa7c:	e8 25 07 ff ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f010fa81:	e8 2a bb ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fa86:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fa89:	e8 16 3a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fa8e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f010fa91:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fa94:	83 ec 08             	sub    $0x8,%esp
f010fa97:	6a 04                	push   $0x4
f010fa99:	50                   	push   %eax
f010fa9a:	e8 07 a0 ff ff       	call   f0109aa6 <set_program_priority>
f010fa9f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010faa2:	e8 fd 39 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010faa7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010faaa:	74 14                	je     f010fac0 <test_priority_normal_and_higher+0x411>
f010faac:	83 ec 04             	sub    $0x4,%esp
f010faaf:	68 9c f9 12 f0       	push   $0xf012f99c
f010fab4:	6a 5f                	push   $0x5f
f010fab6:	68 35 f9 12 f0       	push   $0xf012f935
f010fabb:	e8 e6 06 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f010fac0:	e8 eb ba ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fac5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fac8:	74 14                	je     f010fade <test_priority_normal_and_higher+0x42f>
f010faca:	83 ec 04             	sub    $0x4,%esp
f010facd:	68 9c f9 12 f0       	push   $0xf012f99c
f010fad2:	6a 60                	push   $0x60
f010fad4:	68 35 f9 12 f0       	push   $0xf012f935
f010fad9:	e8 c8 06 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f010fade:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fae1:	8b 40 74             	mov    0x74(%eax),%eax
f010fae4:	83 f8 14             	cmp    $0x14,%eax
f010fae7:	75 16                	jne    f010faff <test_priority_normal_and_higher+0x450>
f010fae9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010faec:	8b 40 74             	mov    0x74(%eax),%eax
f010faef:	83 f8 0f             	cmp    $0xf,%eax
f010faf2:	75 0b                	jne    f010faff <test_priority_normal_and_higher+0x450>
f010faf4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010faf7:	8b 40 74             	mov    0x74(%eax),%eax
f010fafa:	83 f8 14             	cmp    $0x14,%eax
f010fafd:	74 14                	je     f010fb13 <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f010faff:	83 ec 04             	sub    $0x4,%esp
f010fb02:	68 94 fa 12 f0       	push   $0xf012fa94
f010fb07:	6a 63                	push   $0x63
f010fb09:	68 35 f9 12 f0       	push   $0xf012f935
f010fb0e:	e8 93 06 ff ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f010fb13:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f010fb1a:	eb 1a                	jmp    f010fb36 <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f010fb1c:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f010fb1f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010fb22:	89 d0                	mov    %edx,%eax
f010fb24:	01 c0                	add    %eax,%eax
f010fb26:	01 d0                	add    %edx,%eax
f010fb28:	c1 e0 03             	shl    $0x3,%eax
f010fb2b:	01 c8                	add    %ecx,%eax
f010fb2d:	83 c0 7c             	add    $0x7c,%eax
f010fb30:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f010fb33:	ff 45 d8             	incl   -0x28(%ebp)
f010fb36:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f010fb3a:	7e e0                	jle    f010fb1c <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f010fb3c:	e8 6f ba ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fb41:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fb44:	e8 5b 39 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fb49:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f010fb4c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fb4f:	83 ec 08             	sub    $0x8,%esp
f010fb52:	6a 04                	push   $0x4
f010fb54:	50                   	push   %eax
f010fb55:	e8 4c 9f ff ff       	call   f0109aa6 <set_program_priority>
f010fb5a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010fb5d:	e8 42 39 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fb62:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010fb65:	74 14                	je     f010fb7b <test_priority_normal_and_higher+0x4cc>
f010fb67:	83 ec 04             	sub    $0x4,%esp
f010fb6a:	68 9c f9 12 f0       	push   $0xf012f99c
f010fb6f:	6a 70                	push   $0x70
f010fb71:	68 35 f9 12 f0       	push   $0xf012f935
f010fb76:	e8 2b 06 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f010fb7b:	e8 30 ba ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fb80:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fb83:	74 14                	je     f010fb99 <test_priority_normal_and_higher+0x4ea>
f010fb85:	83 ec 04             	sub    $0x4,%esp
f010fb88:	68 9c f9 12 f0       	push   $0xf012f99c
f010fb8d:	6a 71                	push   $0x71
f010fb8f:	68 35 f9 12 f0       	push   $0xf012f935
f010fb94:	e8 0d 06 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f010fb99:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb9c:	8b 40 74             	mov    0x74(%eax),%eax
f010fb9f:	83 f8 14             	cmp    $0x14,%eax
f010fba2:	75 16                	jne    f010fbba <test_priority_normal_and_higher+0x50b>
f010fba4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fba7:	8b 40 74             	mov    0x74(%eax),%eax
f010fbaa:	83 f8 0f             	cmp    $0xf,%eax
f010fbad:	75 0b                	jne    f010fbba <test_priority_normal_and_higher+0x50b>
f010fbaf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fbb2:	8b 40 74             	mov    0x74(%eax),%eax
f010fbb5:	83 f8 14             	cmp    $0x14,%eax
f010fbb8:	74 14                	je     f010fbce <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f010fbba:	83 ec 04             	sub    $0x4,%esp
f010fbbd:	68 94 fa 12 f0       	push   $0xf012fa94
f010fbc2:	6a 74                	push   $0x74
f010fbc4:	68 35 f9 12 f0       	push   $0xf012f935
f010fbc9:	e8 d8 05 ff ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f010fbce:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f010fbd5:	eb 1a                	jmp    f010fbf1 <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f010fbd7:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f010fbda:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010fbdd:	89 d0                	mov    %edx,%eax
f010fbdf:	01 c0                	add    %eax,%eax
f010fbe1:	01 d0                	add    %edx,%eax
f010fbe3:	c1 e0 03             	shl    $0x3,%eax
f010fbe6:	01 c8                	add    %ecx,%eax
f010fbe8:	83 c0 7c             	add    $0x7c,%eax
f010fbeb:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f010fbee:	ff 45 d4             	incl   -0x2c(%ebp)
f010fbf1:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f010fbf5:	7e e0                	jle    f010fbd7 <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f010fbf7:	e8 b4 b9 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fbfc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fbff:	e8 a0 38 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fc04:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f010fc07:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fc0a:	83 ec 08             	sub    $0x8,%esp
f010fc0d:	6a 05                	push   $0x5
f010fc0f:	50                   	push   %eax
f010fc10:	e8 91 9e ff ff       	call   f0109aa6 <set_program_priority>
f010fc15:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f010fc18:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fc1b:	83 ec 08             	sub    $0x8,%esp
f010fc1e:	6a 05                	push   $0x5
f010fc20:	50                   	push   %eax
f010fc21:	e8 80 9e ff ff       	call   f0109aa6 <set_program_priority>
f010fc26:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010fc29:	e8 76 38 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fc2e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010fc31:	74 14                	je     f010fc47 <test_priority_normal_and_higher+0x598>
f010fc33:	83 ec 04             	sub    $0x4,%esp
f010fc36:	68 9c f9 12 f0       	push   $0xf012f99c
f010fc3b:	6a 7f                	push   $0x7f
f010fc3d:	68 35 f9 12 f0       	push   $0xf012f935
f010fc42:	e8 5f 05 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f010fc47:	e8 64 b9 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fc4c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fc4f:	74 17                	je     f010fc68 <test_priority_normal_and_higher+0x5b9>
f010fc51:	83 ec 04             	sub    $0x4,%esp
f010fc54:	68 9c f9 12 f0       	push   $0xf012f99c
f010fc59:	68 80 00 00 00       	push   $0x80
f010fc5e:	68 35 f9 12 f0       	push   $0xf012f935
f010fc63:	e8 3e 05 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f010fc68:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc6b:	8b 40 74             	mov    0x74(%eax),%eax
f010fc6e:	83 f8 14             	cmp    $0x14,%eax
f010fc71:	75 16                	jne    f010fc89 <test_priority_normal_and_higher+0x5da>
f010fc73:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fc76:	8b 40 74             	mov    0x74(%eax),%eax
f010fc79:	83 f8 1e             	cmp    $0x1e,%eax
f010fc7c:	75 0b                	jne    f010fc89 <test_priority_normal_and_higher+0x5da>
f010fc7e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fc81:	8b 40 74             	mov    0x74(%eax),%eax
f010fc84:	83 f8 28             	cmp    $0x28,%eax
f010fc87:	74 17                	je     f010fca0 <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f010fc89:	83 ec 04             	sub    $0x4,%esp
f010fc8c:	68 d0 fa 12 f0       	push   $0xf012fad0
f010fc91:	68 83 00 00 00       	push   $0x83
f010fc96:	68 35 f9 12 f0       	push   $0xf012f935
f010fc9b:	e8 06 05 ff ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f010fca0:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f010fca7:	eb 1a                	jmp    f010fcc3 <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f010fca9:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f010fcac:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010fcaf:	89 d0                	mov    %edx,%eax
f010fcb1:	01 c0                	add    %eax,%eax
f010fcb3:	01 d0                	add    %edx,%eax
f010fcb5:	c1 e0 03             	shl    $0x3,%eax
f010fcb8:	01 c8                	add    %ecx,%eax
f010fcba:	83 c0 7c             	add    $0x7c,%eax
f010fcbd:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f010fcc0:	ff 45 d0             	incl   -0x30(%ebp)
f010fcc3:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f010fcc7:	7e e0                	jle    f010fca9 <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f010fcc9:	e8 e2 b8 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fcce:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fcd1:	e8 ce 37 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fcd6:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f010fcd9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fcdc:	83 ec 08             	sub    $0x8,%esp
f010fcdf:	6a 05                	push   $0x5
f010fce1:	50                   	push   %eax
f010fce2:	e8 bf 9d ff ff       	call   f0109aa6 <set_program_priority>
f010fce7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f010fcea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fced:	83 ec 08             	sub    $0x8,%esp
f010fcf0:	6a 04                	push   $0x4
f010fcf2:	50                   	push   %eax
f010fcf3:	e8 ae 9d ff ff       	call   f0109aa6 <set_program_priority>
f010fcf8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010fcfb:	e8 a4 37 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fd00:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010fd03:	74 17                	je     f010fd1c <test_priority_normal_and_higher+0x66d>
f010fd05:	83 ec 04             	sub    $0x4,%esp
f010fd08:	68 9c f9 12 f0       	push   $0xf012f99c
f010fd0d:	68 8e 00 00 00       	push   $0x8e
f010fd12:	68 35 f9 12 f0       	push   $0xf012f935
f010fd17:	e8 8a 04 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f010fd1c:	e8 8f b8 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fd21:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fd24:	74 17                	je     f010fd3d <test_priority_normal_and_higher+0x68e>
f010fd26:	83 ec 04             	sub    $0x4,%esp
f010fd29:	68 9c f9 12 f0       	push   $0xf012f99c
f010fd2e:	68 8f 00 00 00       	push   $0x8f
f010fd33:	68 35 f9 12 f0       	push   $0xf012f935
f010fd38:	e8 69 04 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f010fd3d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd40:	8b 40 74             	mov    0x74(%eax),%eax
f010fd43:	83 f8 14             	cmp    $0x14,%eax
f010fd46:	75 16                	jne    f010fd5e <test_priority_normal_and_higher+0x6af>
f010fd48:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fd4b:	8b 40 74             	mov    0x74(%eax),%eax
f010fd4e:	83 f8 1e             	cmp    $0x1e,%eax
f010fd51:	75 0b                	jne    f010fd5e <test_priority_normal_and_higher+0x6af>
f010fd53:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fd56:	8b 40 74             	mov    0x74(%eax),%eax
f010fd59:	83 f8 28             	cmp    $0x28,%eax
f010fd5c:	74 17                	je     f010fd75 <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f010fd5e:	83 ec 04             	sub    $0x4,%esp
f010fd61:	68 d0 fa 12 f0       	push   $0xf012fad0
f010fd66:	68 92 00 00 00       	push   $0x92
f010fd6b:	68 35 f9 12 f0       	push   $0xf012f935
f010fd70:	e8 31 04 ff ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f010fd75:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f010fd7c:	eb 1a                	jmp    f010fd98 <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f010fd7e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f010fd81:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010fd84:	89 d0                	mov    %edx,%eax
f010fd86:	01 c0                	add    %eax,%eax
f010fd88:	01 d0                	add    %edx,%eax
f010fd8a:	c1 e0 03             	shl    $0x3,%eax
f010fd8d:	01 c8                	add    %ecx,%eax
f010fd8f:	83 c0 7c             	add    $0x7c,%eax
f010fd92:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f010fd95:	ff 45 cc             	incl   -0x34(%ebp)
f010fd98:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f010fd9c:	7e e0                	jle    f010fd7e <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f010fd9e:	e8 0d b8 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fda3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fda6:	e8 f9 36 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fdab:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f010fdae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fdb1:	83 ec 08             	sub    $0x8,%esp
f010fdb4:	6a 05                	push   $0x5
f010fdb6:	50                   	push   %eax
f010fdb7:	e8 ea 9c ff ff       	call   f0109aa6 <set_program_priority>
f010fdbc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f010fdbf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fdc2:	83 ec 08             	sub    $0x8,%esp
f010fdc5:	6a 04                	push   $0x4
f010fdc7:	50                   	push   %eax
f010fdc8:	e8 d9 9c ff ff       	call   f0109aa6 <set_program_priority>
f010fdcd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f010fdd0:	e8 cf 36 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f010fdd5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f010fdd8:	74 17                	je     f010fdf1 <test_priority_normal_and_higher+0x742>
f010fdda:	83 ec 04             	sub    $0x4,%esp
f010fddd:	68 9c f9 12 f0       	push   $0xf012f99c
f010fde2:	68 9d 00 00 00       	push   $0x9d
f010fde7:	68 35 f9 12 f0       	push   $0xf012f935
f010fdec:	e8 b5 03 ff ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f010fdf1:	e8 ba b7 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f010fdf6:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fdf9:	74 17                	je     f010fe12 <test_priority_normal_and_higher+0x763>
f010fdfb:	83 ec 04             	sub    $0x4,%esp
f010fdfe:	68 9c f9 12 f0       	push   $0xf012f99c
f010fe03:	68 9e 00 00 00       	push   $0x9e
f010fe08:	68 35 f9 12 f0       	push   $0xf012f935
f010fe0d:	e8 94 03 ff ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f010fe12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe15:	8b 40 74             	mov    0x74(%eax),%eax
f010fe18:	83 f8 14             	cmp    $0x14,%eax
f010fe1b:	75 16                	jne    f010fe33 <test_priority_normal_and_higher+0x784>
f010fe1d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fe20:	8b 40 74             	mov    0x74(%eax),%eax
f010fe23:	83 f8 3c             	cmp    $0x3c,%eax
f010fe26:	75 0b                	jne    f010fe33 <test_priority_normal_and_higher+0x784>
f010fe28:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fe2b:	8b 40 74             	mov    0x74(%eax),%eax
f010fe2e:	83 f8 28             	cmp    $0x28,%eax
f010fe31:	74 17                	je     f010fe4a <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f010fe33:	83 ec 04             	sub    $0x4,%esp
f010fe36:	68 d0 fa 12 f0       	push   $0xf012fad0
f010fe3b:	68 a1 00 00 00       	push   $0xa1
f010fe40:	68 35 f9 12 f0       	push   $0xf012f935
f010fe45:	e8 5c 03 ff ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f010fe4a:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f010fe51:	eb 1a                	jmp    f010fe6d <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f010fe53:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f010fe56:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010fe59:	89 d0                	mov    %edx,%eax
f010fe5b:	01 c0                	add    %eax,%eax
f010fe5d:	01 d0                	add    %edx,%eax
f010fe5f:	c1 e0 03             	shl    $0x3,%eax
f010fe62:	01 c8                	add    %ecx,%eax
f010fe64:	83 c0 7c             	add    $0x7c,%eax
f010fe67:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f010fe6a:	ff 45 c8             	incl   -0x38(%ebp)
f010fe6d:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f010fe71:	7e e0                	jle    f010fe53 <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f010fe73:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f010fe7a:	eb 1a                	jmp    f010fe96 <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f010fe7c:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f010fe7f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010fe82:	89 d0                	mov    %edx,%eax
f010fe84:	01 c0                	add    %eax,%eax
f010fe86:	01 d0                	add    %edx,%eax
f010fe88:	c1 e0 03             	shl    $0x3,%eax
f010fe8b:	01 c8                	add    %ecx,%eax
f010fe8d:	83 c0 7c             	add    $0x7c,%eax
f010fe90:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f010fe93:	ff 45 c4             	incl   -0x3c(%ebp)
f010fe96:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f010fe9a:	7e e0                	jle    f010fe7c <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f010fe9c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010fea3:	eb 79                	jmp    f010ff1e <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f010fea5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fea8:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f010feaf:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f010feb2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010feb5:	89 d0                	mov    %edx,%eax
f010feb7:	01 c0                	add    %eax,%eax
f010feb9:	01 d0                	add    %edx,%eax
f010febb:	c1 e0 03             	shl    $0x3,%eax
f010febe:	01 d8                	add    %ebx,%eax
f010fec0:	83 c0 78             	add    $0x78,%eax
f010fec3:	8b 00                	mov    (%eax),%eax
f010fec5:	39 c1                	cmp    %eax,%ecx
f010fec7:	74 17                	je     f010fee0 <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f010fec9:	83 ec 04             	sub    $0x4,%esp
f010fecc:	68 0c fb 12 f0       	push   $0xf012fb0c
f010fed1:	68 af 00 00 00       	push   $0xaf
f010fed6:	68 35 f9 12 f0       	push   $0xf012f935
f010fedb:	e8 c6 02 ff ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f010fee0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fee3:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f010feea:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f010feed:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010fef0:	89 d0                	mov    %edx,%eax
f010fef2:	01 c0                	add    %eax,%eax
f010fef4:	01 d0                	add    %edx,%eax
f010fef6:	c1 e0 03             	shl    $0x3,%eax
f010fef9:	01 d8                	add    %ebx,%eax
f010fefb:	83 e8 80             	sub    $0xffffff80,%eax
f010fefe:	8b 00                	mov    (%eax),%eax
f010ff00:	39 c1                	cmp    %eax,%ecx
f010ff02:	74 17                	je     f010ff1b <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f010ff04:	83 ec 04             	sub    $0x4,%esp
f010ff07:	68 0c fb 12 f0       	push   $0xf012fb0c
f010ff0c:	68 b2 00 00 00       	push   $0xb2
f010ff11:	68 35 f9 12 f0       	push   $0xf012f935
f010ff16:	e8 8b 02 ff ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f010ff1b:	ff 45 c0             	incl   -0x40(%ebp)
f010ff1e:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f010ff22:	7e 81                	jle    f010fea5 <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f010ff24:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f010ff2b:	eb 79                	jmp    f010ffa6 <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f010ff2d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ff30:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f010ff37:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f010ff3a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010ff3d:	89 d0                	mov    %edx,%eax
f010ff3f:	01 c0                	add    %eax,%eax
f010ff41:	01 d0                	add    %edx,%eax
f010ff43:	c1 e0 03             	shl    $0x3,%eax
f010ff46:	01 d8                	add    %ebx,%eax
f010ff48:	83 c0 78             	add    $0x78,%eax
f010ff4b:	8b 00                	mov    (%eax),%eax
f010ff4d:	39 c1                	cmp    %eax,%ecx
f010ff4f:	74 17                	je     f010ff68 <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f010ff51:	83 ec 04             	sub    $0x4,%esp
f010ff54:	68 0c fb 12 f0       	push   $0xf012fb0c
f010ff59:	68 b8 00 00 00       	push   $0xb8
f010ff5e:	68 35 f9 12 f0       	push   $0xf012f935
f010ff63:	e8 3e 02 ff ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f010ff68:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ff6b:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f010ff72:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f010ff75:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010ff78:	89 d0                	mov    %edx,%eax
f010ff7a:	01 c0                	add    %eax,%eax
f010ff7c:	01 d0                	add    %edx,%eax
f010ff7e:	c1 e0 03             	shl    $0x3,%eax
f010ff81:	01 d8                	add    %ebx,%eax
f010ff83:	83 e8 80             	sub    $0xffffff80,%eax
f010ff86:	8b 00                	mov    (%eax),%eax
f010ff88:	39 c1                	cmp    %eax,%ecx
f010ff8a:	74 17                	je     f010ffa3 <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f010ff8c:	83 ec 04             	sub    $0x4,%esp
f010ff8f:	68 0c fb 12 f0       	push   $0xf012fb0c
f010ff94:	68 bb 00 00 00       	push   $0xbb
f010ff99:	68 35 f9 12 f0       	push   $0xf012f935
f010ff9e:	e8 03 02 ff ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f010ffa3:	ff 45 bc             	incl   -0x44(%ebp)
f010ffa6:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f010ffaa:	7e 81                	jle    f010ff2d <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f010ffac:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f010ffb3:	eb 79                	jmp    f011002e <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f010ffb5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ffb8:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f010ffbf:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f010ffc2:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010ffc5:	89 d0                	mov    %edx,%eax
f010ffc7:	01 c0                	add    %eax,%eax
f010ffc9:	01 d0                	add    %edx,%eax
f010ffcb:	c1 e0 03             	shl    $0x3,%eax
f010ffce:	01 d8                	add    %ebx,%eax
f010ffd0:	83 c0 78             	add    $0x78,%eax
f010ffd3:	8b 00                	mov    (%eax),%eax
f010ffd5:	39 c1                	cmp    %eax,%ecx
f010ffd7:	74 17                	je     f010fff0 <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f010ffd9:	83 ec 04             	sub    $0x4,%esp
f010ffdc:	68 0c fb 12 f0       	push   $0xf012fb0c
f010ffe1:	68 c1 00 00 00       	push   $0xc1
f010ffe6:	68 35 f9 12 f0       	push   $0xf012f935
f010ffeb:	e8 b6 01 ff ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f010fff0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010fff3:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f010fffa:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f010fffd:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0110000:	89 d0                	mov    %edx,%eax
f0110002:	01 c0                	add    %eax,%eax
f0110004:	01 d0                	add    %edx,%eax
f0110006:	c1 e0 03             	shl    $0x3,%eax
f0110009:	01 d8                	add    %ebx,%eax
f011000b:	83 e8 80             	sub    $0xffffff80,%eax
f011000e:	8b 00                	mov    (%eax),%eax
f0110010:	39 c1                	cmp    %eax,%ecx
f0110012:	74 17                	je     f011002b <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f0110014:	83 ec 04             	sub    $0x4,%esp
f0110017:	68 0c fb 12 f0       	push   $0xf012fb0c
f011001c:	68 c4 00 00 00       	push   $0xc4
f0110021:	68 35 f9 12 f0       	push   $0xf012f935
f0110026:	e8 7b 01 ff ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011002b:	ff 45 b8             	incl   -0x48(%ebp)
f011002e:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0110032:	7e 81                	jle    f010ffb5 <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0110034:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011003b:	75 6e 61 
f011003e:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0110045:	6c 00 00 
f0110048:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011004e:	b9 17 00 00 00       	mov    $0x17,%ecx
f0110053:	b8 00 00 00 00       	mov    $0x0,%eax
f0110058:	89 d7                	mov    %edx,%edi
f011005a:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011005c:	83 ec 0c             	sub    $0xc,%esp
f011005f:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0110065:	50                   	push   %eax
f0110066:	e8 24 0c ff ff       	call   f0100c8f <execute_command>
f011006b:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011006e:	eb 10                	jmp    f0110080 <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0110070:	83 ec 0c             	sub    $0xc,%esp
f0110073:	68 40 fb 12 f0       	push   $0xf012fb40
f0110078:	e8 b0 0b ff ff       	call   f0100c2d <cprintf>
f011007d:	83 c4 10             	add    $0x10,%esp
	}
}
f0110080:	90                   	nop
f0110081:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110084:	5b                   	pop    %ebx
f0110085:	5e                   	pop    %esi
f0110086:	5f                   	pop    %edi
f0110087:	5d                   	pop    %ebp
f0110088:	c3                   	ret    

f0110089 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0110089:	55                   	push   %ebp
f011008a:	89 e5                	mov    %esp,%ebp
f011008c:	57                   	push   %edi
f011008d:	56                   	push   %esi
f011008e:	53                   	push   %ebx
f011008f:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0110095:	a0 0e cc 17 f0       	mov    0xf017cc0e,%al
f011009a:	84 c0                	test   %al,%al
f011009c:	0f 84 ac 09 00 00    	je     f0110a4e <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01100a2:	c6 05 0e cc 17 f0 00 	movb   $0x0,0xf017cc0e
		char command[100] = "load fos_add 20";
f01100a9:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01100af:	bb 7c fb 12 f0       	mov    $0xf012fb7c,%ebx
f01100b4:	ba 04 00 00 00       	mov    $0x4,%edx
f01100b9:	89 c7                	mov    %eax,%edi
f01100bb:	89 de                	mov    %ebx,%esi
f01100bd:	89 d1                	mov    %edx,%ecx
f01100bf:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01100c1:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01100c7:	b9 15 00 00 00       	mov    $0x15,%ecx
f01100cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01100d1:	89 d7                	mov    %edx,%edi
f01100d3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01100d5:	83 ec 0c             	sub    $0xc,%esp
f01100d8:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01100de:	50                   	push   %eax
f01100df:	e8 ab 0b ff ff       	call   f0100c8f <execute_command>
f01100e4:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01100e7:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01100ed:	bb 38 fe 12 f0       	mov    $0xf012fe38,%ebx
f01100f2:	ba 0d 00 00 00       	mov    $0xd,%edx
f01100f7:	89 c7                	mov    %eax,%edi
f01100f9:	89 de                	mov    %ebx,%esi
f01100fb:	89 d1                	mov    %edx,%ecx
f01100fd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01100ff:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0110105:	b9 57 00 00 00       	mov    $0x57,%ecx
f011010a:	b0 00                	mov    $0x0,%al
f011010c:	89 d7                	mov    %edx,%edi
f011010e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0110110:	83 ec 0c             	sub    $0xc,%esp
f0110113:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0110119:	50                   	push   %eax
f011011a:	e8 70 0b ff ff       	call   f0100c8f <execute_command>
f011011f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0110122:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0110128:	bb 9c fe 12 f0       	mov    $0xf012fe9c,%ebx
f011012d:	ba 17 00 00 00       	mov    $0x17,%edx
f0110132:	89 c7                	mov    %eax,%edi
f0110134:	89 de                	mov    %ebx,%esi
f0110136:	89 d1                	mov    %edx,%ecx
f0110138:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011013a:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0110140:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0110145:	b0 00                	mov    $0x0,%al
f0110147:	89 d7                	mov    %edx,%edi
f0110149:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011014b:	83 ec 0c             	sub    $0xc,%esp
f011014e:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0110154:	50                   	push   %eax
f0110155:	e8 35 0b ff ff       	call   f0100c8f <execute_command>
f011015a:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011015d:	83 ec 04             	sub    $0x4,%esp
f0110160:	6a 00                	push   $0x0
f0110162:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110165:	50                   	push   %eax
f0110166:	68 00 10 00 00       	push   $0x1000
f011016b:	e8 4f 84 ff ff       	call   f01085bf <envid2env>
f0110170:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0110173:	83 ec 04             	sub    $0x4,%esp
f0110176:	6a 00                	push   $0x0
f0110178:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011017b:	50                   	push   %eax
f011017c:	68 01 10 00 00       	push   $0x1001
f0110181:	e8 39 84 ff ff       	call   f01085bf <envid2env>
f0110186:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0110189:	83 ec 04             	sub    $0x4,%esp
f011018c:	6a 00                	push   $0x0
f011018e:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0110191:	50                   	push   %eax
f0110192:	68 02 10 00 00       	push   $0x1002
f0110197:	e8 23 84 ff ff       	call   f01085bf <envid2env>
f011019c:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011019f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01101a2:	85 c0                	test   %eax,%eax
f01101a4:	74 0e                	je     f01101b4 <test_priority_normal_and_lower+0x12b>
f01101a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01101a9:	85 c0                	test   %eax,%eax
f01101ab:	74 07                	je     f01101b4 <test_priority_normal_and_lower+0x12b>
f01101ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01101b0:	85 c0                	test   %eax,%eax
f01101b2:	75 17                	jne    f01101cb <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01101b4:	83 ec 04             	sub    $0x4,%esp
f01101b7:	68 1c f9 12 f0       	push   $0xf012f91c
f01101bc:	68 eb 00 00 00       	push   $0xeb
f01101c1:	68 35 f9 12 f0       	push   $0xf012f935
f01101c6:	e8 db ff fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01101cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01101ce:	8b 40 74             	mov    0x74(%eax),%eax
f01101d1:	83 f8 14             	cmp    $0x14,%eax
f01101d4:	75 16                	jne    f01101ec <test_priority_normal_and_lower+0x163>
f01101d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01101d9:	8b 40 74             	mov    0x74(%eax),%eax
f01101dc:	83 f8 1e             	cmp    $0x1e,%eax
f01101df:	75 0b                	jne    f01101ec <test_priority_normal_and_lower+0x163>
f01101e1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01101e4:	8b 40 74             	mov    0x74(%eax),%eax
f01101e7:	83 f8 28             	cmp    $0x28,%eax
f01101ea:	74 17                	je     f0110203 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01101ec:	83 ec 04             	sub    $0x4,%esp
f01101ef:	68 50 f9 12 f0       	push   $0xf012f950
f01101f4:	68 ee 00 00 00       	push   $0xee
f01101f9:	68 35 f9 12 f0       	push   $0xf012f935
f01101fe:	e8 a3 ff fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f0110203:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011020a:	eb 43                	jmp    f011024f <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011020c:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f011020f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110212:	89 d0                	mov    %edx,%eax
f0110214:	01 c0                	add    %eax,%eax
f0110216:	01 d0                	add    %edx,%eax
f0110218:	c1 e0 03             	shl    $0x3,%eax
f011021b:	01 c8                	add    %ecx,%eax
f011021d:	83 c0 78             	add    $0x78,%eax
f0110220:	8b 10                	mov    (%eax),%edx
f0110222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110225:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011022c:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f011022f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110232:	89 d0                	mov    %edx,%eax
f0110234:	01 c0                	add    %eax,%eax
f0110236:	01 d0                	add    %edx,%eax
f0110238:	c1 e0 03             	shl    $0x3,%eax
f011023b:	01 c8                	add    %ecx,%eax
f011023d:	83 e8 80             	sub    $0xffffff80,%eax
f0110240:	8b 10                	mov    (%eax),%edx
f0110242:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110245:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011024c:	ff 45 e4             	incl   -0x1c(%ebp)
f011024f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0110253:	7e b7                	jle    f011020c <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0110255:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011025c:	eb 43                	jmp    f01102a1 <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011025e:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0110261:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110264:	89 d0                	mov    %edx,%eax
f0110266:	01 c0                	add    %eax,%eax
f0110268:	01 d0                	add    %edx,%eax
f011026a:	c1 e0 03             	shl    $0x3,%eax
f011026d:	01 c8                	add    %ecx,%eax
f011026f:	83 c0 78             	add    $0x78,%eax
f0110272:	8b 10                	mov    (%eax),%edx
f0110274:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110277:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011027e:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0110281:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110284:	89 d0                	mov    %edx,%eax
f0110286:	01 c0                	add    %eax,%eax
f0110288:	01 d0                	add    %edx,%eax
f011028a:	c1 e0 03             	shl    $0x3,%eax
f011028d:	01 c8                	add    %ecx,%eax
f011028f:	83 e8 80             	sub    $0xffffff80,%eax
f0110292:	8b 10                	mov    (%eax),%edx
f0110294:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110297:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011029e:	ff 45 e0             	incl   -0x20(%ebp)
f01102a1:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01102a5:	7e b7                	jle    f011025e <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01102a7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01102ae:	eb 43                	jmp    f01102f3 <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01102b0:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01102b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01102b6:	89 d0                	mov    %edx,%eax
f01102b8:	01 c0                	add    %eax,%eax
f01102ba:	01 d0                	add    %edx,%eax
f01102bc:	c1 e0 03             	shl    $0x3,%eax
f01102bf:	01 c8                	add    %ecx,%eax
f01102c1:	83 c0 78             	add    $0x78,%eax
f01102c4:	8b 10                	mov    (%eax),%edx
f01102c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01102c9:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01102d0:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01102d3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01102d6:	89 d0                	mov    %edx,%eax
f01102d8:	01 c0                	add    %eax,%eax
f01102da:	01 d0                	add    %edx,%eax
f01102dc:	c1 e0 03             	shl    $0x3,%eax
f01102df:	01 c8                	add    %ecx,%eax
f01102e1:	83 e8 80             	sub    $0xffffff80,%eax
f01102e4:	8b 10                	mov    (%eax),%edx
f01102e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01102e9:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01102f0:	ff 45 dc             	incl   -0x24(%ebp)
f01102f3:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01102f7:	7e b7                	jle    f01102b0 <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01102f9:	e8 b2 b2 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01102fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0110301:	e8 9e 31 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110306:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0110309:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011030c:	83 ec 08             	sub    $0x8,%esp
f011030f:	6a 03                	push   $0x3
f0110311:	50                   	push   %eax
f0110312:	e8 8f 97 ff ff       	call   f0109aa6 <set_program_priority>
f0110317:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011031a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011031d:	83 ec 08             	sub    $0x8,%esp
f0110320:	6a 03                	push   $0x3
f0110322:	50                   	push   %eax
f0110323:	e8 7e 97 ff ff       	call   f0109aa6 <set_program_priority>
f0110328:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011032b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011032e:	83 ec 08             	sub    $0x8,%esp
f0110331:	6a 03                	push   $0x3
f0110333:	50                   	push   %eax
f0110334:	e8 6d 97 ff ff       	call   f0109aa6 <set_program_priority>
f0110339:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011033c:	e8 63 31 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110341:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110344:	74 17                	je     f011035d <test_priority_normal_and_lower+0x2d4>
f0110346:	83 ec 04             	sub    $0x4,%esp
f0110349:	68 9c f9 12 f0       	push   $0xf012f99c
f011034e:	68 0a 01 00 00       	push   $0x10a
f0110353:	68 35 f9 12 f0       	push   $0xf012f935
f0110358:	e8 49 fe fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011035d:	e8 4e b2 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110362:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0110365:	74 17                	je     f011037e <test_priority_normal_and_lower+0x2f5>
f0110367:	83 ec 04             	sub    $0x4,%esp
f011036a:	68 9c f9 12 f0       	push   $0xf012f99c
f011036f:	68 0b 01 00 00       	push   $0x10b
f0110374:	68 35 f9 12 f0       	push   $0xf012f935
f0110379:	e8 28 fe fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011037e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110381:	8b 40 74             	mov    0x74(%eax),%eax
f0110384:	83 f8 14             	cmp    $0x14,%eax
f0110387:	75 16                	jne    f011039f <test_priority_normal_and_lower+0x316>
f0110389:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011038c:	8b 40 74             	mov    0x74(%eax),%eax
f011038f:	83 f8 1e             	cmp    $0x1e,%eax
f0110392:	75 0b                	jne    f011039f <test_priority_normal_and_lower+0x316>
f0110394:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110397:	8b 40 74             	mov    0x74(%eax),%eax
f011039a:	83 f8 28             	cmp    $0x28,%eax
f011039d:	74 17                	je     f01103b6 <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011039f:	83 ec 04             	sub    $0x4,%esp
f01103a2:	68 c8 f9 12 f0       	push   $0xf012f9c8
f01103a7:	68 0e 01 00 00       	push   $0x10e
f01103ac:	68 35 f9 12 f0       	push   $0xf012f935
f01103b1:	e8 f0 fd fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01103b6:	e8 f5 b1 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01103bb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01103be:	e8 e1 30 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01103c3:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01103c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01103c9:	83 ec 08             	sub    $0x8,%esp
f01103cc:	6a 02                	push   $0x2
f01103ce:	50                   	push   %eax
f01103cf:	e8 d2 96 ff ff       	call   f0109aa6 <set_program_priority>
f01103d4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01103d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01103da:	83 ec 08             	sub    $0x8,%esp
f01103dd:	6a 02                	push   $0x2
f01103df:	50                   	push   %eax
f01103e0:	e8 c1 96 ff ff       	call   f0109aa6 <set_program_priority>
f01103e5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01103e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01103eb:	83 ec 08             	sub    $0x8,%esp
f01103ee:	6a 02                	push   $0x2
f01103f0:	50                   	push   %eax
f01103f1:	e8 b0 96 ff ff       	call   f0109aa6 <set_program_priority>
f01103f6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01103f9:	e8 a6 30 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01103fe:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110401:	74 17                	je     f011041a <test_priority_normal_and_lower+0x391>
f0110403:	83 ec 04             	sub    $0x4,%esp
f0110406:	68 9c f9 12 f0       	push   $0xf012f99c
f011040b:	68 18 01 00 00       	push   $0x118
f0110410:	68 35 f9 12 f0       	push   $0xf012f935
f0110415:	e8 8c fd fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011041a:	e8 91 b1 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011041f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0110422:	74 21                	je     f0110445 <test_priority_normal_and_lower+0x3bc>
f0110424:	e8 87 b1 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110429:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011042c:	29 c2                	sub    %eax,%edx
f011042e:	89 d0                	mov    %edx,%eax
f0110430:	50                   	push   %eax
f0110431:	68 1c fa 12 f0       	push   $0xf012fa1c
f0110436:	68 19 01 00 00       	push   $0x119
f011043b:	68 35 f9 12 f0       	push   $0xf012f935
f0110440:	e8 61 fd fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0110445:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110448:	8b 40 74             	mov    0x74(%eax),%eax
f011044b:	83 f8 0a             	cmp    $0xa,%eax
f011044e:	75 16                	jne    f0110466 <test_priority_normal_and_lower+0x3dd>
f0110450:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110453:	8b 40 74             	mov    0x74(%eax),%eax
f0110456:	83 f8 0f             	cmp    $0xf,%eax
f0110459:	75 0b                	jne    f0110466 <test_priority_normal_and_lower+0x3dd>
f011045b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011045e:	8b 40 74             	mov    0x74(%eax),%eax
f0110461:	83 f8 14             	cmp    $0x14,%eax
f0110464:	74 17                	je     f011047d <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f0110466:	83 ec 04             	sub    $0x4,%esp
f0110469:	68 4c fa 12 f0       	push   $0xf012fa4c
f011046e:	68 1c 01 00 00       	push   $0x11c
f0110473:	68 35 f9 12 f0       	push   $0xf012f935
f0110478:	e8 29 fd fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f011047d:	e8 2e b1 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110482:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110485:	e8 1a 30 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f011048a:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011048d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110490:	83 ec 08             	sub    $0x8,%esp
f0110493:	6a 02                	push   $0x2
f0110495:	50                   	push   %eax
f0110496:	e8 0b 96 ff ff       	call   f0109aa6 <set_program_priority>
f011049b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011049e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01104a1:	83 ec 08             	sub    $0x8,%esp
f01104a4:	6a 02                	push   $0x2
f01104a6:	50                   	push   %eax
f01104a7:	e8 fa 95 ff ff       	call   f0109aa6 <set_program_priority>
f01104ac:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01104af:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01104b2:	83 ec 08             	sub    $0x8,%esp
f01104b5:	6a 02                	push   $0x2
f01104b7:	50                   	push   %eax
f01104b8:	e8 e9 95 ff ff       	call   f0109aa6 <set_program_priority>
f01104bd:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01104c0:	e8 df 2f ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01104c5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01104c8:	74 17                	je     f01104e1 <test_priority_normal_and_lower+0x458>
f01104ca:	83 ec 04             	sub    $0x4,%esp
f01104cd:	68 9c f9 12 f0       	push   $0xf012f99c
f01104d2:	68 26 01 00 00       	push   $0x126
f01104d7:	68 35 f9 12 f0       	push   $0xf012f935
f01104dc:	e8 c5 fc fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01104e1:	e8 ca b0 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01104e6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01104e9:	74 21                	je     f011050c <test_priority_normal_and_lower+0x483>
f01104eb:	e8 c0 b0 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01104f0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01104f3:	29 c2                	sub    %eax,%edx
f01104f5:	89 d0                	mov    %edx,%eax
f01104f7:	50                   	push   %eax
f01104f8:	68 1c fa 12 f0       	push   $0xf012fa1c
f01104fd:	68 27 01 00 00       	push   $0x127
f0110502:	68 35 f9 12 f0       	push   $0xf012f935
f0110507:	e8 9a fc fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011050c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011050f:	8b 40 74             	mov    0x74(%eax),%eax
f0110512:	83 f8 0a             	cmp    $0xa,%eax
f0110515:	75 16                	jne    f011052d <test_priority_normal_and_lower+0x4a4>
f0110517:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011051a:	8b 40 74             	mov    0x74(%eax),%eax
f011051d:	83 f8 0f             	cmp    $0xf,%eax
f0110520:	75 0b                	jne    f011052d <test_priority_normal_and_lower+0x4a4>
f0110522:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110525:	8b 40 74             	mov    0x74(%eax),%eax
f0110528:	83 f8 0a             	cmp    $0xa,%eax
f011052b:	74 17                	je     f0110544 <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f011052d:	83 ec 04             	sub    $0x4,%esp
f0110530:	68 4c fa 12 f0       	push   $0xf012fa4c
f0110535:	68 2a 01 00 00       	push   $0x12a
f011053a:	68 35 f9 12 f0       	push   $0xf012f935
f011053f:	e8 62 fc fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f0110544:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011054b:	eb 79                	jmp    f01105c6 <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011054d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110550:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0110557:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011055a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011055d:	89 d0                	mov    %edx,%eax
f011055f:	01 c0                	add    %eax,%eax
f0110561:	01 d0                	add    %edx,%eax
f0110563:	c1 e0 03             	shl    $0x3,%eax
f0110566:	01 d8                	add    %ebx,%eax
f0110568:	83 c0 78             	add    $0x78,%eax
f011056b:	8b 00                	mov    (%eax),%eax
f011056d:	39 c1                	cmp    %eax,%ecx
f011056f:	74 17                	je     f0110588 <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f0110571:	83 ec 04             	sub    $0x4,%esp
f0110574:	68 0c fb 12 f0       	push   $0xf012fb0c
f0110579:	68 2f 01 00 00       	push   $0x12f
f011057e:	68 35 f9 12 f0       	push   $0xf012f935
f0110583:	e8 1e fc fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0110588:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011058b:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0110592:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0110595:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110598:	89 d0                	mov    %edx,%eax
f011059a:	01 c0                	add    %eax,%eax
f011059c:	01 d0                	add    %edx,%eax
f011059e:	c1 e0 03             	shl    $0x3,%eax
f01105a1:	01 d8                	add    %ebx,%eax
f01105a3:	83 e8 80             	sub    $0xffffff80,%eax
f01105a6:	8b 00                	mov    (%eax),%eax
f01105a8:	39 c1                	cmp    %eax,%ecx
f01105aa:	74 17                	je     f01105c3 <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f01105ac:	83 ec 04             	sub    $0x4,%esp
f01105af:	68 0c fb 12 f0       	push   $0xf012fb0c
f01105b4:	68 32 01 00 00       	push   $0x132
f01105b9:	68 35 f9 12 f0       	push   $0xf012f935
f01105be:	e8 e3 fb fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01105c3:	ff 45 d8             	incl   -0x28(%ebp)
f01105c6:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01105ca:	7e 81                	jle    f011054d <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01105cc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01105d3:	eb 79                	jmp    f011064e <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01105d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01105d8:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01105df:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01105e2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01105e5:	89 d0                	mov    %edx,%eax
f01105e7:	01 c0                	add    %eax,%eax
f01105e9:	01 d0                	add    %edx,%eax
f01105eb:	c1 e0 03             	shl    $0x3,%eax
f01105ee:	01 d8                	add    %ebx,%eax
f01105f0:	83 c0 78             	add    $0x78,%eax
f01105f3:	8b 00                	mov    (%eax),%eax
f01105f5:	39 c1                	cmp    %eax,%ecx
f01105f7:	74 17                	je     f0110610 <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f01105f9:	83 ec 04             	sub    $0x4,%esp
f01105fc:	68 0c fb 12 f0       	push   $0xf012fb0c
f0110601:	68 38 01 00 00       	push   $0x138
f0110606:	68 35 f9 12 f0       	push   $0xf012f935
f011060b:	e8 96 fb fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0110610:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110613:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011061a:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f011061d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0110620:	89 d0                	mov    %edx,%eax
f0110622:	01 c0                	add    %eax,%eax
f0110624:	01 d0                	add    %edx,%eax
f0110626:	c1 e0 03             	shl    $0x3,%eax
f0110629:	01 d8                	add    %ebx,%eax
f011062b:	83 e8 80             	sub    $0xffffff80,%eax
f011062e:	8b 00                	mov    (%eax),%eax
f0110630:	39 c1                	cmp    %eax,%ecx
f0110632:	74 17                	je     f011064b <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f0110634:	83 ec 04             	sub    $0x4,%esp
f0110637:	68 0c fb 12 f0       	push   $0xf012fb0c
f011063c:	68 3b 01 00 00       	push   $0x13b
f0110641:	68 35 f9 12 f0       	push   $0xf012f935
f0110646:	e8 5b fb fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011064b:	ff 45 d4             	incl   -0x2c(%ebp)
f011064e:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0110652:	7e 81                	jle    f01105d5 <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0110654:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011065b:	eb 79                	jmp    f01106d6 <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011065d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110660:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0110667:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011066a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011066d:	89 d0                	mov    %edx,%eax
f011066f:	01 c0                	add    %eax,%eax
f0110671:	01 d0                	add    %edx,%eax
f0110673:	c1 e0 03             	shl    $0x3,%eax
f0110676:	01 d8                	add    %ebx,%eax
f0110678:	83 c0 78             	add    $0x78,%eax
f011067b:	8b 00                	mov    (%eax),%eax
f011067d:	39 c1                	cmp    %eax,%ecx
f011067f:	74 17                	je     f0110698 <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f0110681:	83 ec 04             	sub    $0x4,%esp
f0110684:	68 0c fb 12 f0       	push   $0xf012fb0c
f0110689:	68 41 01 00 00       	push   $0x141
f011068e:	68 35 f9 12 f0       	push   $0xf012f935
f0110693:	e8 0e fb fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0110698:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011069b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01106a2:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01106a5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01106a8:	89 d0                	mov    %edx,%eax
f01106aa:	01 c0                	add    %eax,%eax
f01106ac:	01 d0                	add    %edx,%eax
f01106ae:	c1 e0 03             	shl    $0x3,%eax
f01106b1:	01 d8                	add    %ebx,%eax
f01106b3:	83 e8 80             	sub    $0xffffff80,%eax
f01106b6:	8b 00                	mov    (%eax),%eax
f01106b8:	39 c1                	cmp    %eax,%ecx
f01106ba:	74 17                	je     f01106d3 <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f01106bc:	83 ec 04             	sub    $0x4,%esp
f01106bf:	68 0c fb 12 f0       	push   $0xf012fb0c
f01106c4:	68 44 01 00 00       	push   $0x144
f01106c9:	68 35 f9 12 f0       	push   $0xf012f935
f01106ce:	e8 d3 fa fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01106d3:	ff 45 d0             	incl   -0x30(%ebp)
f01106d6:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01106da:	7e 81                	jle    f011065d <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01106dc:	e8 cf ae ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01106e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01106e4:	e8 bb 2d ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01106e9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01106ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01106ef:	83 ec 08             	sub    $0x8,%esp
f01106f2:	6a 01                	push   $0x1
f01106f4:	50                   	push   %eax
f01106f5:	e8 ac 93 ff ff       	call   f0109aa6 <set_program_priority>
f01106fa:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01106fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110700:	83 ec 08             	sub    $0x8,%esp
f0110703:	6a 01                	push   $0x1
f0110705:	50                   	push   %eax
f0110706:	e8 9b 93 ff ff       	call   f0109aa6 <set_program_priority>
f011070b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f011070e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110711:	83 ec 08             	sub    $0x8,%esp
f0110714:	6a 01                	push   $0x1
f0110716:	50                   	push   %eax
f0110717:	e8 8a 93 ff ff       	call   f0109aa6 <set_program_priority>
f011071c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011071f:	e8 80 2d ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110724:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110727:	74 17                	je     f0110740 <test_priority_normal_and_lower+0x6b7>
f0110729:	83 ec 04             	sub    $0x4,%esp
f011072c:	68 9c f9 12 f0       	push   $0xf012f99c
f0110731:	68 4d 01 00 00       	push   $0x14d
f0110736:	68 35 f9 12 f0       	push   $0xf012f935
f011073b:	e8 66 fa fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0110740:	e8 6b ae ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110745:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0110748:	83 f8 0d             	cmp    $0xd,%eax
f011074b:	74 17                	je     f0110764 <test_priority_normal_and_lower+0x6db>
f011074d:	83 ec 04             	sub    $0x4,%esp
f0110750:	68 a8 fc 12 f0       	push   $0xf012fca8
f0110755:	68 4e 01 00 00       	push   $0x14e
f011075a:	68 35 f9 12 f0       	push   $0xf012f935
f011075f:	e8 42 fa fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0110764:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110767:	8b 40 74             	mov    0x74(%eax),%eax
f011076a:	83 f8 05             	cmp    $0x5,%eax
f011076d:	75 16                	jne    f0110785 <test_priority_normal_and_lower+0x6fc>
f011076f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110772:	8b 40 74             	mov    0x74(%eax),%eax
f0110775:	83 f8 07             	cmp    $0x7,%eax
f0110778:	75 0b                	jne    f0110785 <test_priority_normal_and_lower+0x6fc>
f011077a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011077d:	8b 40 74             	mov    0x74(%eax),%eax
f0110780:	83 f8 05             	cmp    $0x5,%eax
f0110783:	74 17                	je     f011079c <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f0110785:	83 ec 04             	sub    $0x4,%esp
f0110788:	68 f0 fc 12 f0       	push   $0xf012fcf0
f011078d:	68 51 01 00 00       	push   $0x151
f0110792:	68 35 f9 12 f0       	push   $0xf012f935
f0110797:	e8 0a fa fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f011079c:	e8 0f ae ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01107a1:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01107a4:	e8 fb 2c ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01107a9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01107ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01107af:	83 ec 08             	sub    $0x8,%esp
f01107b2:	6a 01                	push   $0x1
f01107b4:	50                   	push   %eax
f01107b5:	e8 ec 92 ff ff       	call   f0109aa6 <set_program_priority>
f01107ba:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01107bd:	e8 e2 2c ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01107c2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01107c5:	74 17                	je     f01107de <test_priority_normal_and_lower+0x755>
f01107c7:	83 ec 04             	sub    $0x4,%esp
f01107ca:	68 9c f9 12 f0       	push   $0xf012f99c
f01107cf:	68 57 01 00 00       	push   $0x157
f01107d4:	68 35 f9 12 f0       	push   $0xf012f935
f01107d9:	e8 c8 f9 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01107de:	e8 cd ad ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01107e3:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01107e6:	83 f8 03             	cmp    $0x3,%eax
f01107e9:	74 17                	je     f0110802 <test_priority_normal_and_lower+0x779>
f01107eb:	83 ec 04             	sub    $0x4,%esp
f01107ee:	68 9c f9 12 f0       	push   $0xf012f99c
f01107f3:	68 58 01 00 00       	push   $0x158
f01107f8:	68 35 f9 12 f0       	push   $0xf012f935
f01107fd:	e8 a4 f9 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0110802:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110805:	8b 40 74             	mov    0x74(%eax),%eax
f0110808:	83 f8 02             	cmp    $0x2,%eax
f011080b:	75 16                	jne    f0110823 <test_priority_normal_and_lower+0x79a>
f011080d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110810:	8b 40 74             	mov    0x74(%eax),%eax
f0110813:	83 f8 07             	cmp    $0x7,%eax
f0110816:	75 0b                	jne    f0110823 <test_priority_normal_and_lower+0x79a>
f0110818:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011081b:	8b 40 74             	mov    0x74(%eax),%eax
f011081e:	83 f8 05             	cmp    $0x5,%eax
f0110821:	74 17                	je     f011083a <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f0110823:	83 ec 04             	sub    $0x4,%esp
f0110826:	68 d0 fa 12 f0       	push   $0xf012fad0
f011082b:	68 5b 01 00 00       	push   $0x15b
f0110830:	68 35 f9 12 f0       	push   $0xf012f935
f0110835:	e8 6c f9 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f011083a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110841:	eb 7f                	jmp    f01108c2 <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0110843:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110846:	83 c0 08             	add    $0x8,%eax
f0110849:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0110850:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0110853:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0110856:	89 d0                	mov    %edx,%eax
f0110858:	01 c0                	add    %eax,%eax
f011085a:	01 d0                	add    %edx,%eax
f011085c:	c1 e0 03             	shl    $0x3,%eax
f011085f:	01 d8                	add    %ebx,%eax
f0110861:	83 c0 78             	add    $0x78,%eax
f0110864:	8b 00                	mov    (%eax),%eax
f0110866:	39 c1                	cmp    %eax,%ecx
f0110868:	74 17                	je     f0110881 <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011086a:	83 ec 04             	sub    $0x4,%esp
f011086d:	68 20 fd 12 f0       	push   $0xf012fd20
f0110872:	68 60 01 00 00       	push   $0x160
f0110877:	68 35 f9 12 f0       	push   $0xf012f935
f011087c:	e8 25 f9 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0110881:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110884:	83 c0 08             	add    $0x8,%eax
f0110887:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011088e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0110891:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0110894:	89 d0                	mov    %edx,%eax
f0110896:	01 c0                	add    %eax,%eax
f0110898:	01 d0                	add    %edx,%eax
f011089a:	c1 e0 03             	shl    $0x3,%eax
f011089d:	01 d8                	add    %ebx,%eax
f011089f:	83 e8 80             	sub    $0xffffff80,%eax
f01108a2:	8b 00                	mov    (%eax),%eax
f01108a4:	39 c1                	cmp    %eax,%ecx
f01108a6:	74 17                	je     f01108bf <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01108a8:	83 ec 04             	sub    $0x4,%esp
f01108ab:	68 20 fd 12 f0       	push   $0xf012fd20
f01108b0:	68 63 01 00 00       	push   $0x163
f01108b5:	68 35 f9 12 f0       	push   $0xf012f935
f01108ba:	e8 e7 f8 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01108bf:	ff 45 cc             	incl   -0x34(%ebp)
f01108c2:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01108c6:	0f 8e 77 ff ff ff    	jle    f0110843 <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01108cc:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01108d3:	eb 7f                	jmp    f0110954 <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01108d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01108d8:	83 c0 03             	add    $0x3,%eax
f01108db:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01108e2:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01108e5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01108e8:	89 d0                	mov    %edx,%eax
f01108ea:	01 c0                	add    %eax,%eax
f01108ec:	01 d0                	add    %edx,%eax
f01108ee:	c1 e0 03             	shl    $0x3,%eax
f01108f1:	01 d8                	add    %ebx,%eax
f01108f3:	83 c0 78             	add    $0x78,%eax
f01108f6:	8b 00                	mov    (%eax),%eax
f01108f8:	39 c1                	cmp    %eax,%ecx
f01108fa:	74 17                	je     f0110913 <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01108fc:	ff 75 c8             	pushl  -0x38(%ebp)
f01108ff:	68 8c fd 12 f0       	push   $0xf012fd8c
f0110904:	68 69 01 00 00       	push   $0x169
f0110909:	68 35 f9 12 f0       	push   $0xf012f935
f011090e:	e8 93 f8 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0110913:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110916:	83 c0 03             	add    $0x3,%eax
f0110919:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0110920:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0110923:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0110926:	89 d0                	mov    %edx,%eax
f0110928:	01 c0                	add    %eax,%eax
f011092a:	01 d0                	add    %edx,%eax
f011092c:	c1 e0 03             	shl    $0x3,%eax
f011092f:	01 d8                	add    %ebx,%eax
f0110931:	83 e8 80             	sub    $0xffffff80,%eax
f0110934:	8b 00                	mov    (%eax),%eax
f0110936:	39 c1                	cmp    %eax,%ecx
f0110938:	74 17                	je     f0110951 <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011093a:	83 ec 04             	sub    $0x4,%esp
f011093d:	68 20 fd 12 f0       	push   $0xf012fd20
f0110942:	68 6c 01 00 00       	push   $0x16c
f0110947:	68 35 f9 12 f0       	push   $0xf012f935
f011094c:	e8 55 f8 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0110951:	ff 45 c8             	incl   -0x38(%ebp)
f0110954:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0110958:	0f 8e 77 ff ff ff    	jle    f01108d5 <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011095e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0110965:	eb 7f                	jmp    f01109e6 <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0110967:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011096a:	83 c0 05             	add    $0x5,%eax
f011096d:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0110974:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0110977:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011097a:	89 d0                	mov    %edx,%eax
f011097c:	01 c0                	add    %eax,%eax
f011097e:	01 d0                	add    %edx,%eax
f0110980:	c1 e0 03             	shl    $0x3,%eax
f0110983:	01 d8                	add    %ebx,%eax
f0110985:	83 c0 78             	add    $0x78,%eax
f0110988:	8b 00                	mov    (%eax),%eax
f011098a:	39 c1                	cmp    %eax,%ecx
f011098c:	74 17                	je     f01109a5 <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011098e:	83 ec 04             	sub    $0x4,%esp
f0110991:	68 20 fd 12 f0       	push   $0xf012fd20
f0110996:	68 72 01 00 00       	push   $0x172
f011099b:	68 35 f9 12 f0       	push   $0xf012f935
f01109a0:	e8 01 f8 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01109a5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01109a8:	83 c0 05             	add    $0x5,%eax
f01109ab:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01109b2:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01109b5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01109b8:	89 d0                	mov    %edx,%eax
f01109ba:	01 c0                	add    %eax,%eax
f01109bc:	01 d0                	add    %edx,%eax
f01109be:	c1 e0 03             	shl    $0x3,%eax
f01109c1:	01 d8                	add    %ebx,%eax
f01109c3:	83 e8 80             	sub    $0xffffff80,%eax
f01109c6:	8b 00                	mov    (%eax),%eax
f01109c8:	39 c1                	cmp    %eax,%ecx
f01109ca:	74 17                	je     f01109e3 <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01109cc:	83 ec 04             	sub    $0x4,%esp
f01109cf:	68 20 fd 12 f0       	push   $0xf012fd20
f01109d4:	68 75 01 00 00       	push   $0x175
f01109d9:	68 35 f9 12 f0       	push   $0xf012f935
f01109de:	e8 c3 f7 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01109e3:	ff 45 c4             	incl   -0x3c(%ebp)
f01109e6:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01109ea:	0f 8e 77 ff ff ff    	jle    f0110967 <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01109f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01109f3:	83 ec 08             	sub    $0x8,%esp
f01109f6:	6a 05                	push   $0x5
f01109f8:	50                   	push   %eax
f01109f9:	e8 a8 90 ff ff       	call   f0109aa6 <set_program_priority>
f01109fe:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0110a01:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110a04:	83 ec 08             	sub    $0x8,%esp
f0110a07:	6a 05                	push   $0x5
f0110a09:	50                   	push   %eax
f0110a0a:	e8 97 90 ff ff       	call   f0109aa6 <set_program_priority>
f0110a0f:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0110a12:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0110a19:	75 6e 61 
f0110a1c:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0110a23:	6c 00 00 
f0110a26:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0110a2c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0110a31:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a36:	89 d7                	mov    %edx,%edi
f0110a38:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0110a3a:	83 ec 0c             	sub    $0xc,%esp
f0110a3d:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0110a43:	50                   	push   %eax
f0110a44:	e8 46 02 ff ff       	call   f0100c8f <execute_command>
f0110a49:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0110a4c:	eb 10                	jmp    f0110a5e <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0110a4e:	83 ec 0c             	sub    $0xc,%esp
f0110a51:	68 fc fd 12 f0       	push   $0xf012fdfc
f0110a56:	e8 d2 01 ff ff       	call   f0100c2d <cprintf>
f0110a5b:	83 c4 10             	add    $0x10,%esp
	}
}
f0110a5e:	90                   	nop
f0110a5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110a62:	5b                   	pop    %ebx
f0110a63:	5e                   	pop    %esi
f0110a64:	5f                   	pop    %edi
f0110a65:	5d                   	pop    %ebp
f0110a66:	c3                   	ret    

f0110a67 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0110a67:	55                   	push   %ebp
f0110a68:	89 e5                	mov    %esp,%ebp
f0110a6a:	57                   	push   %edi
f0110a6b:	53                   	push   %ebx
f0110a6c:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0110a72:	83 ec 0c             	sub    $0xc,%esp
f0110a75:	68 00 ff 12 f0       	push   $0xf012ff00
f0110a7a:	e8 ae 01 ff ff       	call   f0100c2d <cprintf>
f0110a7f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0110a82:	83 ec 0c             	sub    $0xc,%esp
f0110a85:	68 30 ff 12 f0       	push   $0xf012ff30
f0110a8a:	e8 9e 01 ff ff       	call   f0100c2d <cprintf>
f0110a8f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0110a92:	83 ec 0c             	sub    $0xc,%esp
f0110a95:	68 00 ff 12 f0       	push   $0xf012ff00
f0110a9a:	e8 8e 01 ff ff       	call   f0100c2d <cprintf>
f0110a9f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0110aa2:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0110aa6:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0110aaa:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0110ab0:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0110ab6:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0110abd:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0110ac4:	e8 e7 aa ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110ac9:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0110acc:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0110ad2:	b9 14 00 00 00       	mov    $0x14,%ecx
f0110ad7:	b8 00 00 00 00       	mov    $0x0,%eax
f0110adc:	89 d7                	mov    %edx,%edi
f0110ade:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0110ae0:	e8 cb aa ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110ae5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0110ae8:	e8 b7 29 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110aed:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0110af0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0110af7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110afc:	0f b6 d0             	movzbl %al,%edx
f0110aff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110b02:	01 d0                	add    %edx,%eax
f0110b04:	48                   	dec    %eax
f0110b05:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0110b08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110b0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0110b10:	f7 75 d4             	divl   -0x2c(%ebp)
f0110b13:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110b16:	29 d0                	sub    %edx,%eax
f0110b18:	89 c1                	mov    %eax,%ecx
f0110b1a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0110b21:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110b26:	0f b6 c0             	movzbl %al,%eax
f0110b29:	c1 e0 04             	shl    $0x4,%eax
f0110b2c:	89 c2                	mov    %eax,%edx
f0110b2e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110b31:	01 d0                	add    %edx,%eax
f0110b33:	48                   	dec    %eax
f0110b34:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0110b37:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110b3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0110b3f:	f7 75 cc             	divl   -0x34(%ebp)
f0110b42:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110b45:	29 d0                	sub    %edx,%eax
f0110b47:	01 c1                	add    %eax,%ecx
f0110b49:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0110b50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110b53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0110b58:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0110b5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110b5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0110b63:	f7 75 c4             	divl   -0x3c(%ebp)
f0110b66:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110b69:	29 d0                	sub    %edx,%eax
f0110b6b:	01 c8                	add    %ecx,%eax
f0110b6d:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0110b72:	29 c2                	sub    %eax,%edx
f0110b74:	89 d0                	mov    %edx,%eax
f0110b76:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0110b79:	83 ec 0c             	sub    $0xc,%esp
f0110b7c:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b7f:	e8 70 60 ff ff       	call   f0106bf4 <kmalloc>
f0110b84:	83 c4 10             	add    $0x10,%esp
f0110b87:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0110b8d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0110b93:	85 c0                	test   %eax,%eax
f0110b95:	74 14                	je     f0110bab <test_kmalloc+0x144>
f0110b97:	83 ec 04             	sub    $0x4,%esp
f0110b9a:	68 8c ff 12 f0       	push   $0xf012ff8c
f0110b9f:	6a 3d                	push   $0x3d
f0110ba1:	68 be ff 12 f0       	push   $0xf012ffbe
f0110ba6:	e8 fb f5 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110bab:	e8 f4 28 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110bb0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110bb3:	74 14                	je     f0110bc9 <test_kmalloc+0x162>
f0110bb5:	83 ec 04             	sub    $0x4,%esp
f0110bb8:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0110bbd:	6a 3e                	push   $0x3e
f0110bbf:	68 be ff 12 f0       	push   $0xf012ffbe
f0110bc4:	e8 dd f5 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110bc9:	e8 e2 a9 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110bce:	89 c2                	mov    %eax,%edx
f0110bd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110bd3:	39 c2                	cmp    %eax,%edx
f0110bd5:	74 14                	je     f0110beb <test_kmalloc+0x184>
f0110bd7:	83 ec 04             	sub    $0x4,%esp
f0110bda:	68 40 00 13 f0       	push   $0xf0130040
f0110bdf:	6a 3f                	push   $0x3f
f0110be1:	68 be ff 12 f0       	push   $0xf012ffbe
f0110be6:	e8 bb f5 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0110beb:	83 ec 0c             	sub    $0xc,%esp
f0110bee:	68 80 00 13 f0       	push   $0xf0130080
f0110bf3:	e8 35 00 ff ff       	call   f0100c2d <cprintf>
f0110bf8:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110bfb:	e8 b0 a9 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110c00:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110c03:	e8 9c 28 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110c08:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0110c0b:	83 ec 0c             	sub    $0xc,%esp
f0110c0e:	68 00 fc 1f 00       	push   $0x1ffc00
f0110c13:	e8 dc 5f ff ff       	call   f0106bf4 <kmalloc>
f0110c18:	83 c4 10             	add    $0x10,%esp
f0110c1b:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110c21:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0110c27:	89 c1                	mov    %eax,%ecx
f0110c29:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0110c30:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110c35:	0f b6 d0             	movzbl %al,%edx
f0110c38:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110c3b:	01 d0                	add    %edx,%eax
f0110c3d:	48                   	dec    %eax
f0110c3e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0110c41:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c44:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c49:	f7 75 b8             	divl   -0x48(%ebp)
f0110c4c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c4f:	29 d0                	sub    %edx,%eax
f0110c51:	89 c3                	mov    %eax,%ebx
f0110c53:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0110c5a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110c5f:	0f b6 c0             	movzbl %al,%eax
f0110c62:	c1 e0 04             	shl    $0x4,%eax
f0110c65:	89 c2                	mov    %eax,%edx
f0110c67:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110c6a:	01 d0                	add    %edx,%eax
f0110c6c:	48                   	dec    %eax
f0110c6d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0110c70:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110c73:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c78:	f7 75 b0             	divl   -0x50(%ebp)
f0110c7b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110c7e:	29 d0                	sub    %edx,%eax
f0110c80:	01 c3                	add    %eax,%ebx
f0110c82:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0110c89:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110c8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0110c91:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0110c94:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110c97:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c9c:	f7 75 a8             	divl   -0x58(%ebp)
f0110c9f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110ca2:	29 d0                	sub    %edx,%eax
f0110ca4:	01 d8                	add    %ebx,%eax
f0110ca6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0110cab:	39 c1                	cmp    %eax,%ecx
f0110cad:	74 14                	je     f0110cc3 <test_kmalloc+0x25c>
f0110caf:	83 ec 04             	sub    $0x4,%esp
f0110cb2:	68 a4 00 13 f0       	push   $0xf01300a4
f0110cb7:	6a 46                	push   $0x46
f0110cb9:	68 be ff 12 f0       	push   $0xf012ffbe
f0110cbe:	e8 e3 f4 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110cc3:	e8 dc 27 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110cc8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110ccb:	74 14                	je     f0110ce1 <test_kmalloc+0x27a>
f0110ccd:	83 ec 04             	sub    $0x4,%esp
f0110cd0:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0110cd5:	6a 47                	push   $0x47
f0110cd7:	68 be ff 12 f0       	push   $0xf012ffbe
f0110cdc:	e8 c5 f4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110ce1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0110ce4:	e8 c7 a8 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110ce9:	29 c3                	sub    %eax,%ebx
f0110ceb:	89 d8                	mov    %ebx,%eax
f0110ced:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110cf2:	74 14                	je     f0110d08 <test_kmalloc+0x2a1>
f0110cf4:	83 ec 04             	sub    $0x4,%esp
f0110cf7:	68 40 00 13 f0       	push   $0xf0130040
f0110cfc:	6a 48                	push   $0x48
f0110cfe:	68 be ff 12 f0       	push   $0xf012ffbe
f0110d03:	e8 9e f4 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110d08:	e8 a3 a8 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110d0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110d10:	e8 8f 27 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110d15:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0110d18:	83 ec 0c             	sub    $0xc,%esp
f0110d1b:	68 00 fc 1f 00       	push   $0x1ffc00
f0110d20:	e8 cf 5e ff ff       	call   f0106bf4 <kmalloc>
f0110d25:	83 c4 10             	add    $0x10,%esp
f0110d28:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110d2e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0110d34:	89 c1                	mov    %eax,%ecx
f0110d36:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0110d3d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110d42:	0f b6 d0             	movzbl %al,%edx
f0110d45:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110d48:	01 d0                	add    %edx,%eax
f0110d4a:	48                   	dec    %eax
f0110d4b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0110d4e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110d51:	ba 00 00 00 00       	mov    $0x0,%edx
f0110d56:	f7 75 a0             	divl   -0x60(%ebp)
f0110d59:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110d5c:	29 d0                	sub    %edx,%eax
f0110d5e:	89 c3                	mov    %eax,%ebx
f0110d60:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0110d67:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110d6c:	0f b6 c0             	movzbl %al,%eax
f0110d6f:	c1 e0 04             	shl    $0x4,%eax
f0110d72:	89 c2                	mov    %eax,%edx
f0110d74:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110d77:	01 d0                	add    %edx,%eax
f0110d79:	48                   	dec    %eax
f0110d7a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0110d7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d80:	ba 00 00 00 00       	mov    $0x0,%edx
f0110d85:	f7 75 98             	divl   -0x68(%ebp)
f0110d88:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d8b:	29 d0                	sub    %edx,%eax
f0110d8d:	01 c3                	add    %eax,%ebx
f0110d8f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0110d96:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110d99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0110d9e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0110da1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110da4:	ba 00 00 00 00       	mov    $0x0,%edx
f0110da9:	f7 75 90             	divl   -0x70(%ebp)
f0110dac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110daf:	29 d0                	sub    %edx,%eax
f0110db1:	01 d8                	add    %ebx,%eax
f0110db3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0110db8:	39 c1                	cmp    %eax,%ecx
f0110dba:	74 14                	je     f0110dd0 <test_kmalloc+0x369>
f0110dbc:	83 ec 04             	sub    $0x4,%esp
f0110dbf:	68 a4 00 13 f0       	push   $0xf01300a4
f0110dc4:	6a 4e                	push   $0x4e
f0110dc6:	68 be ff 12 f0       	push   $0xf012ffbe
f0110dcb:	e8 d6 f3 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110dd0:	e8 cf 26 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110dd5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110dd8:	74 14                	je     f0110dee <test_kmalloc+0x387>
f0110dda:	83 ec 04             	sub    $0x4,%esp
f0110ddd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0110de2:	6a 4f                	push   $0x4f
f0110de4:	68 be ff 12 f0       	push   $0xf012ffbe
f0110de9:	e8 b8 f3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110dee:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0110df1:	e8 ba a7 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110df6:	29 c3                	sub    %eax,%ebx
f0110df8:	89 d8                	mov    %ebx,%eax
f0110dfa:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110dff:	74 14                	je     f0110e15 <test_kmalloc+0x3ae>
f0110e01:	83 ec 04             	sub    $0x4,%esp
f0110e04:	68 40 00 13 f0       	push   $0xf0130040
f0110e09:	6a 50                	push   $0x50
f0110e0b:	68 be ff 12 f0       	push   $0xf012ffbe
f0110e10:	e8 91 f3 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110e15:	e8 96 a7 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110e1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110e1d:	e8 82 26 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110e22:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0110e25:	83 ec 0c             	sub    $0xc,%esp
f0110e28:	68 00 08 00 00       	push   $0x800
f0110e2d:	e8 c2 5d ff ff       	call   f0106bf4 <kmalloc>
f0110e32:	83 c4 10             	add    $0x10,%esp
f0110e35:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110e3b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0110e41:	89 c1                	mov    %eax,%ecx
f0110e43:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0110e4a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110e4f:	0f b6 d0             	movzbl %al,%edx
f0110e52:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110e55:	01 d0                	add    %edx,%eax
f0110e57:	48                   	dec    %eax
f0110e58:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0110e5b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110e5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e63:	f7 75 88             	divl   -0x78(%ebp)
f0110e66:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110e69:	29 d0                	sub    %edx,%eax
f0110e6b:	89 c3                	mov    %eax,%ebx
f0110e6d:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0110e74:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110e79:	0f b6 c0             	movzbl %al,%eax
f0110e7c:	c1 e0 04             	shl    $0x4,%eax
f0110e7f:	89 c2                	mov    %eax,%edx
f0110e81:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110e84:	01 d0                	add    %edx,%eax
f0110e86:	48                   	dec    %eax
f0110e87:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0110e8d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110e93:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e98:	f7 75 80             	divl   -0x80(%ebp)
f0110e9b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110ea1:	29 d0                	sub    %edx,%eax
f0110ea3:	01 c3                	add    %eax,%ebx
f0110ea5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0110eac:	10 00 00 
f0110eaf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110eb5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0110eba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0110ec0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110ec6:	ba 00 00 00 00       	mov    $0x0,%edx
f0110ecb:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0110ed1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110ed7:	29 d0                	sub    %edx,%eax
f0110ed9:	01 d8                	add    %ebx,%eax
f0110edb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0110ee0:	39 c1                	cmp    %eax,%ecx
f0110ee2:	74 14                	je     f0110ef8 <test_kmalloc+0x491>
f0110ee4:	83 ec 04             	sub    $0x4,%esp
f0110ee7:	68 a4 00 13 f0       	push   $0xf01300a4
f0110eec:	6a 56                	push   $0x56
f0110eee:	68 be ff 12 f0       	push   $0xf012ffbe
f0110ef3:	e8 ae f2 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ef8:	e8 a7 25 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110efd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110f00:	74 14                	je     f0110f16 <test_kmalloc+0x4af>
f0110f02:	83 ec 04             	sub    $0x4,%esp
f0110f05:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0110f0a:	6a 57                	push   $0x57
f0110f0c:	68 be ff 12 f0       	push   $0xf012ffbe
f0110f11:	e8 90 f2 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0110f16:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0110f19:	e8 92 a6 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110f1e:	29 c3                	sub    %eax,%ebx
f0110f20:	89 d8                	mov    %ebx,%eax
f0110f22:	83 f8 01             	cmp    $0x1,%eax
f0110f25:	74 14                	je     f0110f3b <test_kmalloc+0x4d4>
f0110f27:	83 ec 04             	sub    $0x4,%esp
f0110f2a:	68 40 00 13 f0       	push   $0xf0130040
f0110f2f:	6a 58                	push   $0x58
f0110f31:	68 be ff 12 f0       	push   $0xf012ffbe
f0110f36:	e8 6b f2 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110f3b:	e8 70 a6 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0110f40:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110f43:	e8 5c 25 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0110f48:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0110f4b:	83 ec 0c             	sub    $0xc,%esp
f0110f4e:	68 00 08 00 00       	push   $0x800
f0110f53:	e8 9c 5c ff ff       	call   f0106bf4 <kmalloc>
f0110f58:	83 c4 10             	add    $0x10,%esp
f0110f5b:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0110f61:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0110f67:	89 c1                	mov    %eax,%ecx
f0110f69:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0110f70:	10 00 00 
f0110f73:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110f78:	0f b6 d0             	movzbl %al,%edx
f0110f7b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110f81:	01 d0                	add    %edx,%eax
f0110f83:	48                   	dec    %eax
f0110f84:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0110f8a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110f90:	ba 00 00 00 00       	mov    $0x0,%edx
f0110f95:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0110f9b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110fa1:	29 d0                	sub    %edx,%eax
f0110fa3:	89 c3                	mov    %eax,%ebx
f0110fa5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0110fac:	10 00 00 
f0110faf:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0110fb4:	0f b6 c0             	movzbl %al,%eax
f0110fb7:	c1 e0 04             	shl    $0x4,%eax
f0110fba:	89 c2                	mov    %eax,%edx
f0110fbc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110fc2:	01 d0                	add    %edx,%eax
f0110fc4:	48                   	dec    %eax
f0110fc5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0110fcb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110fd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0110fd6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0110fdc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110fe2:	29 d0                	sub    %edx,%eax
f0110fe4:	01 c3                	add    %eax,%ebx
f0110fe6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0110fed:	10 00 00 
f0110ff0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110ff6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0110ffb:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0111001:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0111007:	ba 00 00 00 00       	mov    $0x0,%edx
f011100c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0111012:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0111018:	29 d0                	sub    %edx,%eax
f011101a:	01 d8                	add    %ebx,%eax
f011101c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0111021:	39 c1                	cmp    %eax,%ecx
f0111023:	74 14                	je     f0111039 <test_kmalloc+0x5d2>
f0111025:	83 ec 04             	sub    $0x4,%esp
f0111028:	68 a4 00 13 f0       	push   $0xf01300a4
f011102d:	6a 5e                	push   $0x5e
f011102f:	68 be ff 12 f0       	push   $0xf012ffbe
f0111034:	e8 6d f1 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111039:	e8 66 24 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f011103e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111041:	74 14                	je     f0111057 <test_kmalloc+0x5f0>
f0111043:	83 ec 04             	sub    $0x4,%esp
f0111046:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011104b:	6a 5f                	push   $0x5f
f011104d:	68 be ff 12 f0       	push   $0xf012ffbe
f0111052:	e8 4f f1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111057:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011105a:	e8 51 a5 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011105f:	29 c3                	sub    %eax,%ebx
f0111061:	89 d8                	mov    %ebx,%eax
f0111063:	83 f8 01             	cmp    $0x1,%eax
f0111066:	74 14                	je     f011107c <test_kmalloc+0x615>
f0111068:	83 ec 04             	sub    $0x4,%esp
f011106b:	68 40 00 13 f0       	push   $0xf0130040
f0111070:	6a 60                	push   $0x60
f0111072:	68 be ff 12 f0       	push   $0xf012ffbe
f0111077:	e8 2a f1 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011107c:	e8 2f a5 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111081:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111084:	e8 1b 24 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0111089:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011108c:	83 ec 0c             	sub    $0xc,%esp
f011108f:	68 00 1c 00 00       	push   $0x1c00
f0111094:	e8 5b 5b ff ff       	call   f0106bf4 <kmalloc>
f0111099:	83 c4 10             	add    $0x10,%esp
f011109c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01110a2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01110a8:	89 c1                	mov    %eax,%ecx
f01110aa:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01110b1:	10 00 00 
f01110b4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01110b9:	0f b6 d0             	movzbl %al,%edx
f01110bc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01110c2:	01 d0                	add    %edx,%eax
f01110c4:	48                   	dec    %eax
f01110c5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01110cb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01110d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01110d6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01110dc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01110e2:	29 d0                	sub    %edx,%eax
f01110e4:	89 c3                	mov    %eax,%ebx
f01110e6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01110ed:	10 00 00 
f01110f0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01110f5:	0f b6 c0             	movzbl %al,%eax
f01110f8:	c1 e0 04             	shl    $0x4,%eax
f01110fb:	89 c2                	mov    %eax,%edx
f01110fd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111103:	01 d0                	add    %edx,%eax
f0111105:	48                   	dec    %eax
f0111106:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011110c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0111112:	ba 00 00 00 00       	mov    $0x0,%edx
f0111117:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011111d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0111123:	29 d0                	sub    %edx,%eax
f0111125:	01 c3                	add    %eax,%ebx
f0111127:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011112e:	10 00 00 
f0111131:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111137:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011113c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0111142:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0111148:	ba 00 00 00 00       	mov    $0x0,%edx
f011114d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0111153:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0111159:	29 d0                	sub    %edx,%eax
f011115b:	01 d8                	add    %ebx,%eax
f011115d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0111162:	39 c1                	cmp    %eax,%ecx
f0111164:	74 14                	je     f011117a <test_kmalloc+0x713>
f0111166:	83 ec 04             	sub    $0x4,%esp
f0111169:	68 a4 00 13 f0       	push   $0xf01300a4
f011116e:	6a 66                	push   $0x66
f0111170:	68 be ff 12 f0       	push   $0xf012ffbe
f0111175:	e8 2c f0 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011117a:	e8 25 23 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f011117f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111182:	74 14                	je     f0111198 <test_kmalloc+0x731>
f0111184:	83 ec 04             	sub    $0x4,%esp
f0111187:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011118c:	6a 67                	push   $0x67
f011118e:	68 be ff 12 f0       	push   $0xf012ffbe
f0111193:	e8 0e f0 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111198:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011119b:	e8 10 a4 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01111a0:	29 c3                	sub    %eax,%ebx
f01111a2:	89 d8                	mov    %ebx,%eax
f01111a4:	83 f8 02             	cmp    $0x2,%eax
f01111a7:	74 14                	je     f01111bd <test_kmalloc+0x756>
f01111a9:	83 ec 04             	sub    $0x4,%esp
f01111ac:	68 40 00 13 f0       	push   $0xf0130040
f01111b1:	6a 68                	push   $0x68
f01111b3:	68 be ff 12 f0       	push   $0xf012ffbe
f01111b8:	e8 e9 ef fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01111bd:	e8 ee a3 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01111c2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01111c5:	e8 da 22 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01111ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01111cd:	83 ec 0c             	sub    $0xc,%esp
f01111d0:	68 00 fc 2f 00       	push   $0x2ffc00
f01111d5:	e8 1a 5a ff ff       	call   f0106bf4 <kmalloc>
f01111da:	83 c4 10             	add    $0x10,%esp
f01111dd:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01111e3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01111e9:	89 c1                	mov    %eax,%ecx
f01111eb:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01111f2:	10 00 00 
f01111f5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01111fa:	0f b6 d0             	movzbl %al,%edx
f01111fd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0111203:	01 d0                	add    %edx,%eax
f0111205:	48                   	dec    %eax
f0111206:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011120c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111212:	ba 00 00 00 00       	mov    $0x0,%edx
f0111217:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011121d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111223:	29 d0                	sub    %edx,%eax
f0111225:	89 c3                	mov    %eax,%ebx
f0111227:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011122e:	10 00 00 
f0111231:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111236:	0f b6 c0             	movzbl %al,%eax
f0111239:	c1 e0 04             	shl    $0x4,%eax
f011123c:	89 c2                	mov    %eax,%edx
f011123e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111244:	01 d0                	add    %edx,%eax
f0111246:	48                   	dec    %eax
f0111247:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011124d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0111253:	ba 00 00 00 00       	mov    $0x0,%edx
f0111258:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011125e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0111264:	29 d0                	sub    %edx,%eax
f0111266:	01 c3                	add    %eax,%ebx
f0111268:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011126f:	10 00 00 
f0111272:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0111278:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011127d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0111283:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0111289:	ba 00 00 00 00       	mov    $0x0,%edx
f011128e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0111294:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011129a:	29 d0                	sub    %edx,%eax
f011129c:	01 d8                	add    %ebx,%eax
f011129e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01112a3:	39 c1                	cmp    %eax,%ecx
f01112a5:	74 14                	je     f01112bb <test_kmalloc+0x854>
f01112a7:	83 ec 04             	sub    $0x4,%esp
f01112aa:	68 a4 00 13 f0       	push   $0xf01300a4
f01112af:	6a 6e                	push   $0x6e
f01112b1:	68 be ff 12 f0       	push   $0xf012ffbe
f01112b6:	e8 eb ee fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01112bb:	e8 e4 21 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01112c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01112c3:	74 14                	je     f01112d9 <test_kmalloc+0x872>
f01112c5:	83 ec 04             	sub    $0x4,%esp
f01112c8:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01112cd:	6a 6f                	push   $0x6f
f01112cf:	68 be ff 12 f0       	push   $0xf012ffbe
f01112d4:	e8 cd ee fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01112d9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01112dc:	e8 cf a2 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01112e1:	29 c3                	sub    %eax,%ebx
f01112e3:	89 d8                	mov    %ebx,%eax
f01112e5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01112ea:	74 14                	je     f0111300 <test_kmalloc+0x899>
f01112ec:	83 ec 04             	sub    $0x4,%esp
f01112ef:	68 40 00 13 f0       	push   $0xf0130040
f01112f4:	6a 70                	push   $0x70
f01112f6:	68 be ff 12 f0       	push   $0xf012ffbe
f01112fb:	e8 a6 ee fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0111300:	e8 ab a2 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111305:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111308:	e8 97 21 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f011130d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0111310:	83 ec 0c             	sub    $0xc,%esp
f0111313:	68 00 fc 5f 00       	push   $0x5ffc00
f0111318:	e8 d7 58 ff ff       	call   f0106bf4 <kmalloc>
f011131d:	83 c4 10             	add    $0x10,%esp
f0111320:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111326:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011132c:	89 c1                	mov    %eax,%ecx
f011132e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0111335:	10 00 00 
f0111338:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011133d:	0f b6 d0             	movzbl %al,%edx
f0111340:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0111346:	01 d0                	add    %edx,%eax
f0111348:	48                   	dec    %eax
f0111349:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011134f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0111355:	ba 00 00 00 00       	mov    $0x0,%edx
f011135a:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0111360:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0111366:	29 d0                	sub    %edx,%eax
f0111368:	89 c3                	mov    %eax,%ebx
f011136a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0111371:	10 00 00 
f0111374:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111379:	0f b6 c0             	movzbl %al,%eax
f011137c:	c1 e0 04             	shl    $0x4,%eax
f011137f:	89 c2                	mov    %eax,%edx
f0111381:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111387:	01 d0                	add    %edx,%eax
f0111389:	48                   	dec    %eax
f011138a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0111390:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0111396:	ba 00 00 00 00       	mov    $0x0,%edx
f011139b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01113a1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01113a7:	29 d0                	sub    %edx,%eax
f01113a9:	01 c3                	add    %eax,%ebx
f01113ab:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01113b2:	10 00 00 
f01113b5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01113bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01113c0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01113c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01113cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01113d1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01113d7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01113dd:	29 d0                	sub    %edx,%eax
f01113df:	01 d8                	add    %ebx,%eax
f01113e1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01113e6:	39 c1                	cmp    %eax,%ecx
f01113e8:	74 14                	je     f01113fe <test_kmalloc+0x997>
f01113ea:	83 ec 04             	sub    $0x4,%esp
f01113ed:	68 a4 00 13 f0       	push   $0xf01300a4
f01113f2:	6a 76                	push   $0x76
f01113f4:	68 be ff 12 f0       	push   $0xf012ffbe
f01113f9:	e8 a8 ed fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01113fe:	e8 a1 20 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0111403:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111406:	74 14                	je     f011141c <test_kmalloc+0x9b5>
f0111408:	83 ec 04             	sub    $0x4,%esp
f011140b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0111410:	6a 77                	push   $0x77
f0111412:	68 be ff 12 f0       	push   $0xf012ffbe
f0111417:	e8 8a ed fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011141c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011141f:	e8 8c a1 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111424:	29 c3                	sub    %eax,%ebx
f0111426:	89 d8                	mov    %ebx,%eax
f0111428:	3d 00 06 00 00       	cmp    $0x600,%eax
f011142d:	74 14                	je     f0111443 <test_kmalloc+0x9dc>
f011142f:	83 ec 04             	sub    $0x4,%esp
f0111432:	68 40 00 13 f0       	push   $0xf0130040
f0111437:	6a 78                	push   $0x78
f0111439:	68 be ff 12 f0       	push   $0xf012ffbe
f011143e:	e8 63 ed fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0111443:	e8 68 a1 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111448:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011144b:	e8 54 20 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0111450:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0111453:	83 ec 0c             	sub    $0xc,%esp
f0111456:	68 00 38 00 00       	push   $0x3800
f011145b:	e8 94 57 ff ff       	call   f0106bf4 <kmalloc>
f0111460:	83 c4 10             	add    $0x10,%esp
f0111463:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0111469:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011146f:	89 c1                	mov    %eax,%ecx
f0111471:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0111478:	10 00 00 
f011147b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111480:	0f b6 d0             	movzbl %al,%edx
f0111483:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0111489:	01 d0                	add    %edx,%eax
f011148b:	48                   	dec    %eax
f011148c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0111492:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0111498:	ba 00 00 00 00       	mov    $0x0,%edx
f011149d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01114a3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01114a9:	29 d0                	sub    %edx,%eax
f01114ab:	89 c3                	mov    %eax,%ebx
f01114ad:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01114b4:	10 00 00 
f01114b7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01114bc:	0f b6 c0             	movzbl %al,%eax
f01114bf:	c1 e0 04             	shl    $0x4,%eax
f01114c2:	89 c2                	mov    %eax,%edx
f01114c4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01114ca:	01 d0                	add    %edx,%eax
f01114cc:	48                   	dec    %eax
f01114cd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01114d3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01114d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01114de:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01114e4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01114ea:	29 d0                	sub    %edx,%eax
f01114ec:	01 c3                	add    %eax,%ebx
f01114ee:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01114f5:	10 00 00 
f01114f8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01114fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111503:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0111509:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011150f:	ba 00 00 00 00       	mov    $0x0,%edx
f0111514:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011151a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0111520:	29 d0                	sub    %edx,%eax
f0111522:	01 d8                	add    %ebx,%eax
f0111524:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0111529:	39 c1                	cmp    %eax,%ecx
f011152b:	74 14                	je     f0111541 <test_kmalloc+0xada>
f011152d:	83 ec 04             	sub    $0x4,%esp
f0111530:	68 a4 00 13 f0       	push   $0xf01300a4
f0111535:	6a 7e                	push   $0x7e
f0111537:	68 be ff 12 f0       	push   $0xf012ffbe
f011153c:	e8 65 ec fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111541:	e8 5e 1f ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0111546:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111549:	74 14                	je     f011155f <test_kmalloc+0xaf8>
f011154b:	83 ec 04             	sub    $0x4,%esp
f011154e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0111553:	6a 7f                	push   $0x7f
f0111555:	68 be ff 12 f0       	push   $0xf012ffbe
f011155a:	e8 47 ec fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011155f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0111562:	e8 49 a0 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111567:	29 c3                	sub    %eax,%ebx
f0111569:	89 d8                	mov    %ebx,%eax
f011156b:	83 f8 04             	cmp    $0x4,%eax
f011156e:	74 17                	je     f0111587 <test_kmalloc+0xb20>
f0111570:	83 ec 04             	sub    $0x4,%esp
f0111573:	68 40 00 13 f0       	push   $0xf0130040
f0111578:	68 80 00 00 00       	push   $0x80
f011157d:	68 be ff 12 f0       	push   $0xf012ffbe
f0111582:	e8 1f ec fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f0111587:	83 ec 0c             	sub    $0xc,%esp
f011158a:	68 0a 01 13 f0       	push   $0xf013010a
f011158f:	e8 99 f6 fe ff       	call   f0100c2d <cprintf>
f0111594:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0111597:	e8 14 a0 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011159c:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011159f:	e8 00 1f ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01115a4:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01115a7:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01115ae:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01115b1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01115b7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01115bd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01115c3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01115c6:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01115c8:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01115ce:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01115d4:	01 c2                	add    %eax,%edx
f01115d6:	8a 45 f2             	mov    -0xe(%ebp),%al
f01115d9:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01115db:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01115e1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f01115e7:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f01115ee:	fd 0f 00 
			shortArr[0] = minShort;
f01115f1:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f01115f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01115fa:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f01115fd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111603:	01 c0                	add    %eax,%eax
f0111605:	89 c2                	mov    %eax,%edx
f0111607:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011160d:	01 c2                	add    %eax,%edx
f011160f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0111613:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0111616:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011161c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0111622:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0111629:	01 00 00 
			intArr[0] = minInt;
f011162c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0111632:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111635:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0111637:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011163d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111644:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011164a:	01 c2                	add    %eax,%edx
f011164c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011164f:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0111651:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0111657:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011165d:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0111664:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0111667:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011166d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0111670:	88 10                	mov    %dl,(%eax)
f0111672:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0111678:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011167b:	66 89 42 02          	mov    %ax,0x2(%edx)
f011167f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111685:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111688:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011168b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111691:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0111698:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011169e:	01 c2                	add    %eax,%edx
f01116a0:	8a 45 f2             	mov    -0xe(%ebp),%al
f01116a3:	88 02                	mov    %al,(%edx)
f01116a5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01116ab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01116b2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01116b8:	01 c2                	add    %eax,%edx
f01116ba:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01116be:	66 89 42 02          	mov    %ax,0x2(%edx)
f01116c2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01116c8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01116cf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01116d5:	01 c2                	add    %eax,%edx
f01116d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116da:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f01116dd:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01116e4:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f01116e7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01116ed:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f01116f3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01116f9:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01116fc:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f01116fe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111704:	89 c2                	mov    %eax,%edx
f0111706:	c1 ea 1f             	shr    $0x1f,%edx
f0111709:	01 d0                	add    %edx,%eax
f011170b:	d1 f8                	sar    %eax
f011170d:	89 c2                	mov    %eax,%edx
f011170f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0111715:	01 c2                	add    %eax,%edx
f0111717:	8a 45 f2             	mov    -0xe(%ebp),%al
f011171a:	88 c1                	mov    %al,%cl
f011171c:	c0 e9 07             	shr    $0x7,%cl
f011171f:	01 c8                	add    %ecx,%eax
f0111721:	d0 f8                	sar    %al
f0111723:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0111725:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011172b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0111731:	01 c2                	add    %eax,%edx
f0111733:	8a 45 f2             	mov    -0xe(%ebp),%al
f0111736:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0111738:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011173e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0111744:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f011174b:	1b 00 00 
			shortArr2[0] = minShort;
f011174e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0111754:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111757:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f011175a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0111760:	01 c0                	add    %eax,%eax
f0111762:	89 c2                	mov    %eax,%edx
f0111764:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011176a:	01 c2                	add    %eax,%edx
f011176c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0111770:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0111773:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0111779:	8a 00                	mov    (%eax),%al
f011177b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011177e:	75 15                	jne    f0111795 <test_kmalloc+0xd2e>
f0111780:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0111786:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011178c:	01 d0                	add    %edx,%eax
f011178e:	8a 00                	mov    (%eax),%al
f0111790:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0111793:	74 17                	je     f01117ac <test_kmalloc+0xd45>
f0111795:	83 ec 04             	sub    $0x4,%esp
f0111798:	68 14 01 13 f0       	push   $0xf0130114
f011179d:	68 af 00 00 00       	push   $0xaf
f01117a2:	68 be ff 12 f0       	push   $0xf012ffbe
f01117a7:	e8 fa e9 fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01117ac:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01117b2:	66 8b 00             	mov    (%eax),%ax
f01117b5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01117b9:	75 1b                	jne    f01117d6 <test_kmalloc+0xd6f>
f01117bb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01117c1:	01 c0                	add    %eax,%eax
f01117c3:	89 c2                	mov    %eax,%edx
f01117c5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01117cb:	01 d0                	add    %edx,%eax
f01117cd:	66 8b 00             	mov    (%eax),%ax
f01117d0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01117d4:	74 17                	je     f01117ed <test_kmalloc+0xd86>
f01117d6:	83 ec 04             	sub    $0x4,%esp
f01117d9:	68 14 01 13 f0       	push   $0xf0130114
f01117de:	68 b0 00 00 00       	push   $0xb0
f01117e3:	68 be ff 12 f0       	push   $0xf012ffbe
f01117e8:	e8 b9 e9 fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f01117ed:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01117f3:	8b 00                	mov    (%eax),%eax
f01117f5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01117f8:	75 1c                	jne    f0111816 <test_kmalloc+0xdaf>
f01117fa:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111800:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111807:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011180d:	01 d0                	add    %edx,%eax
f011180f:	8b 00                	mov    (%eax),%eax
f0111811:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111814:	74 17                	je     f011182d <test_kmalloc+0xdc6>
f0111816:	83 ec 04             	sub    $0x4,%esp
f0111819:	68 14 01 13 f0       	push   $0xf0130114
f011181e:	68 b1 00 00 00       	push   $0xb1
f0111823:	68 be ff 12 f0       	push   $0xf012ffbe
f0111828:	e8 79 e9 fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011182d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111833:	8a 00                	mov    (%eax),%al
f0111835:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0111838:	75 1c                	jne    f0111856 <test_kmalloc+0xdef>
f011183a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111840:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0111847:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011184d:	01 d0                	add    %edx,%eax
f011184f:	8a 00                	mov    (%eax),%al
f0111851:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0111854:	74 17                	je     f011186d <test_kmalloc+0xe06>
f0111856:	83 ec 04             	sub    $0x4,%esp
f0111859:	68 14 01 13 f0       	push   $0xf0130114
f011185e:	68 b3 00 00 00       	push   $0xb3
f0111863:	68 be ff 12 f0       	push   $0xf012ffbe
f0111868:	e8 39 e9 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011186d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111873:	66 8b 40 02          	mov    0x2(%eax),%ax
f0111877:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011187b:	75 1f                	jne    f011189c <test_kmalloc+0xe35>
f011187d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111883:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011188a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111890:	01 d0                	add    %edx,%eax
f0111892:	66 8b 40 02          	mov    0x2(%eax),%ax
f0111896:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011189a:	74 17                	je     f01118b3 <test_kmalloc+0xe4c>
f011189c:	83 ec 04             	sub    $0x4,%esp
f011189f:	68 14 01 13 f0       	push   $0xf0130114
f01118a4:	68 b4 00 00 00       	push   $0xb4
f01118a9:	68 be ff 12 f0       	push   $0xf012ffbe
f01118ae:	e8 f3 e8 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01118b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01118b9:	8b 40 04             	mov    0x4(%eax),%eax
f01118bc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01118bf:	75 1d                	jne    f01118de <test_kmalloc+0xe77>
f01118c1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01118c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01118ce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01118d4:	01 d0                	add    %edx,%eax
f01118d6:	8b 40 04             	mov    0x4(%eax),%eax
f01118d9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01118dc:	74 17                	je     f01118f5 <test_kmalloc+0xe8e>
f01118de:	83 ec 04             	sub    $0x4,%esp
f01118e1:	68 14 01 13 f0       	push   $0xf0130114
f01118e6:	68 b5 00 00 00       	push   $0xb5
f01118eb:	68 be ff 12 f0       	push   $0xf012ffbe
f01118f0:	e8 b1 e8 fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01118f5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01118fb:	8a 00                	mov    (%eax),%al
f01118fd:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0111900:	75 40                	jne    f0111942 <test_kmalloc+0xedb>
f0111902:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111908:	89 c2                	mov    %eax,%edx
f011190a:	c1 ea 1f             	shr    $0x1f,%edx
f011190d:	01 d0                	add    %edx,%eax
f011190f:	d1 f8                	sar    %eax
f0111911:	89 c2                	mov    %eax,%edx
f0111913:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0111919:	01 d0                	add    %edx,%eax
f011191b:	8a 10                	mov    (%eax),%dl
f011191d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0111920:	88 c1                	mov    %al,%cl
f0111922:	c0 e9 07             	shr    $0x7,%cl
f0111925:	01 c8                	add    %ecx,%eax
f0111927:	d0 f8                	sar    %al
f0111929:	38 c2                	cmp    %al,%dl
f011192b:	75 15                	jne    f0111942 <test_kmalloc+0xedb>
f011192d:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0111933:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0111939:	01 d0                	add    %edx,%eax
f011193b:	8a 00                	mov    (%eax),%al
f011193d:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0111940:	74 17                	je     f0111959 <test_kmalloc+0xef2>
f0111942:	83 ec 04             	sub    $0x4,%esp
f0111945:	68 14 01 13 f0       	push   $0xf0130114
f011194a:	68 b7 00 00 00       	push   $0xb7
f011194f:	68 be ff 12 f0       	push   $0xf012ffbe
f0111954:	e8 4d e8 fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0111959:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011195f:	66 8b 00             	mov    (%eax),%ax
f0111962:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0111966:	75 1b                	jne    f0111983 <test_kmalloc+0xf1c>
f0111968:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011196e:	01 c0                	add    %eax,%eax
f0111970:	89 c2                	mov    %eax,%edx
f0111972:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0111978:	01 d0                	add    %edx,%eax
f011197a:	66 8b 00             	mov    (%eax),%ax
f011197d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0111981:	74 17                	je     f011199a <test_kmalloc+0xf33>
f0111983:	83 ec 04             	sub    $0x4,%esp
f0111986:	68 14 01 13 f0       	push   $0xf0130114
f011198b:	68 b8 00 00 00       	push   $0xb8
f0111990:	68 be ff 12 f0       	push   $0xf012ffbe
f0111995:	e8 0c e8 fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011199a:	e8 11 9c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011199f:	89 c2                	mov    %eax,%edx
f01119a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01119a4:	39 c2                	cmp    %eax,%edx
f01119a6:	74 17                	je     f01119bf <test_kmalloc+0xf58>
f01119a8:	83 ec 04             	sub    $0x4,%esp
f01119ab:	68 40 00 13 f0       	push   $0xf0130040
f01119b0:	68 ba 00 00 00       	push   $0xba
f01119b5:	68 be ff 12 f0       	push   $0xf012ffbe
f01119ba:	e8 e7 e7 fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01119bf:	e8 e0 1a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01119c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01119c7:	74 17                	je     f01119e0 <test_kmalloc+0xf79>
f01119c9:	83 ec 04             	sub    $0x4,%esp
f01119cc:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01119d1:	68 bb 00 00 00       	push   $0xbb
f01119d6:	68 be ff 12 f0       	push   $0xf012ffbe
f01119db:	e8 c6 e7 fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f01119e0:	83 ec 0c             	sub    $0xc,%esp
f01119e3:	68 49 01 13 f0       	push   $0xf0130149
f01119e8:	e8 40 f2 fe ff       	call   f0100c2d <cprintf>
f01119ed:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f01119f0:	e8 bb 9b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01119f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01119f8:	e8 a7 1a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01119fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0111a00:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0111a07:	10 00 00 
f0111a0a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111a0f:	0f b6 d0             	movzbl %al,%edx
f0111a12:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0111a18:	01 d0                	add    %edx,%eax
f0111a1a:	48                   	dec    %eax
f0111a1b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0111a21:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0111a27:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a2c:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0111a32:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0111a38:	29 d0                	sub    %edx,%eax
f0111a3a:	89 c1                	mov    %eax,%ecx
f0111a3c:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0111a43:	10 00 00 
f0111a46:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111a4b:	0f b6 c0             	movzbl %al,%eax
f0111a4e:	c1 e0 04             	shl    $0x4,%eax
f0111a51:	89 c2                	mov    %eax,%edx
f0111a53:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0111a59:	01 d0                	add    %edx,%eax
f0111a5b:	48                   	dec    %eax
f0111a5c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0111a62:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0111a68:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a6d:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0111a73:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0111a79:	29 d0                	sub    %edx,%eax
f0111a7b:	01 c1                	add    %eax,%ecx
f0111a7d:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0111a84:	10 00 00 
f0111a87:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0111a8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111a92:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0111a98:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0111a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0111aa3:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0111aa9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0111aaf:	29 d0                	sub    %edx,%eax
f0111ab1:	01 c8                	add    %ecx,%eax
f0111ab3:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0111ab8:	29 c2                	sub    %eax,%edx
f0111aba:	89 d0                	mov    %edx,%eax
f0111abc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0111ac2:	83 ec 0c             	sub    $0xc,%esp
f0111ac5:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0111acb:	e8 24 51 ff ff       	call   f0106bf4 <kmalloc>
f0111ad0:	83 c4 10             	add    $0x10,%esp
f0111ad3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0111ad9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0111adf:	85 c0                	test   %eax,%eax
f0111ae1:	74 17                	je     f0111afa <test_kmalloc+0x1093>
f0111ae3:	83 ec 04             	sub    $0x4,%esp
f0111ae6:	68 8c ff 12 f0       	push   $0xf012ff8c
f0111aeb:	68 c5 00 00 00       	push   $0xc5
f0111af0:	68 be ff 12 f0       	push   $0xf012ffbe
f0111af5:	e8 ac e6 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111afa:	e8 a5 19 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0111aff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111b02:	74 17                	je     f0111b1b <test_kmalloc+0x10b4>
f0111b04:	83 ec 04             	sub    $0x4,%esp
f0111b07:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0111b0c:	68 c6 00 00 00       	push   $0xc6
f0111b11:	68 be ff 12 f0       	push   $0xf012ffbe
f0111b16:	e8 8b e6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0111b1b:	e8 90 9a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111b20:	89 c2                	mov    %eax,%edx
f0111b22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111b25:	39 c2                	cmp    %eax,%edx
f0111b27:	74 17                	je     f0111b40 <test_kmalloc+0x10d9>
f0111b29:	83 ec 04             	sub    $0x4,%esp
f0111b2c:	68 40 00 13 f0       	push   $0xf0130040
f0111b31:	68 c7 00 00 00       	push   $0xc7
f0111b36:	68 be ff 12 f0       	push   $0xf012ffbe
f0111b3b:	e8 66 e6 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0111b40:	83 ec 0c             	sub    $0xc,%esp
f0111b43:	68 50 01 13 f0       	push   $0xf0130150
f0111b48:	e8 e0 f0 fe ff       	call   f0100c2d <cprintf>
f0111b4d:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0111b50:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0111b56:	05 00 40 00 00       	add    $0x4000,%eax
f0111b5b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0111b61:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0111b68:	10 00 00 
f0111b6b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111b70:	0f b6 d0             	movzbl %al,%edx
f0111b73:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0111b79:	01 d0                	add    %edx,%eax
f0111b7b:	48                   	dec    %eax
f0111b7c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0111b82:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0111b88:	ba 00 00 00 00       	mov    $0x0,%edx
f0111b8d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0111b93:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0111b99:	29 d0                	sub    %edx,%eax
f0111b9b:	89 c1                	mov    %eax,%ecx
f0111b9d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0111ba4:	10 00 00 
f0111ba7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111bac:	0f b6 c0             	movzbl %al,%eax
f0111baf:	c1 e0 04             	shl    $0x4,%eax
f0111bb2:	89 c2                	mov    %eax,%edx
f0111bb4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0111bba:	01 d0                	add    %edx,%eax
f0111bbc:	48                   	dec    %eax
f0111bbd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0111bc3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0111bc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0111bce:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0111bd4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0111bda:	29 d0                	sub    %edx,%eax
f0111bdc:	01 c1                	add    %eax,%ecx
f0111bde:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0111be5:	10 00 00 
f0111be8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0111bee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111bf3:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0111bf9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0111bff:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c04:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0111c0a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0111c10:	29 d0                	sub    %edx,%eax
f0111c12:	01 c8                	add    %ecx,%eax
f0111c14:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0111c19:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111c1c:	eb 6a                	jmp    f0111c88 <test_kmalloc+0x1221>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0111c1e:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0111c23:	83 ec 04             	sub    $0x4,%esp
f0111c26:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0111c2c:	52                   	push   %edx
f0111c2d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c30:	50                   	push   %eax
f0111c31:	e8 4b 45 ff ff       	call   f0106181 <get_page_table>
f0111c36:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0111c39:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0111c3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111c42:	c1 ea 0c             	shr    $0xc,%edx
f0111c45:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0111c4b:	c1 e2 02             	shl    $0x2,%edx
f0111c4e:	01 d0                	add    %edx,%eax
f0111c50:	8b 00                	mov    (%eax),%eax
f0111c52:	25 ff 0f 00 00       	and    $0xfff,%eax
f0111c57:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0111c5d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0111c63:	83 e0 04             	and    $0x4,%eax
f0111c66:	85 c0                	test   %eax,%eax
f0111c68:	74 17                	je     f0111c81 <test_kmalloc+0x121a>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0111c6a:	83 ec 04             	sub    $0x4,%esp
f0111c6d:	68 58 01 13 f0       	push   $0xf0130158
f0111c72:	68 d4 00 00 00       	push   $0xd4
f0111c77:	68 be ff 12 f0       	push   $0xf012ffbe
f0111c7c:	e8 25 e5 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0111c81:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0111c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111c8b:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0111c91:	72 8b                	jb     f0111c1e <test_kmalloc+0x11b7>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0111c93:	83 ec 0c             	sub    $0xc,%esp
f0111c96:	68 a2 01 13 f0       	push   $0xf01301a2
f0111c9b:	e8 8d ef fe ff       	call   f0100c2d <cprintf>
f0111ca0:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0111ca3:	83 ec 0c             	sub    $0xc,%esp
f0111ca6:	68 ac 01 13 f0       	push   $0xf01301ac
f0111cab:	e8 7d ef fe ff       	call   f0100c2d <cprintf>
f0111cb0:	83 c4 10             	add    $0x10,%esp

	return 1;
f0111cb3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0111cb8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0111cbb:	5b                   	pop    %ebx
f0111cbc:	5f                   	pop    %edi
f0111cbd:	5d                   	pop    %ebp
f0111cbe:	c3                   	ret    

f0111cbf <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0111cbf:	55                   	push   %ebp
f0111cc0:	89 e5                	mov    %esp,%ebp
f0111cc2:	57                   	push   %edi
f0111cc3:	53                   	push   %ebx
f0111cc4:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0111cca:	83 ec 0c             	sub    $0xc,%esp
f0111ccd:	68 00 ff 12 f0       	push   $0xf012ff00
f0111cd2:	e8 56 ef fe ff       	call   f0100c2d <cprintf>
f0111cd7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0111cda:	83 ec 0c             	sub    $0xc,%esp
f0111cdd:	68 30 ff 12 f0       	push   $0xf012ff30
f0111ce2:	e8 46 ef fe ff       	call   f0100c2d <cprintf>
f0111ce7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0111cea:	83 ec 0c             	sub    $0xc,%esp
f0111ced:	68 00 ff 12 f0       	push   $0xf012ff00
f0111cf2:	e8 36 ef fe ff       	call   f0100c2d <cprintf>
f0111cf7:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0111cfa:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0111d00:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0111d05:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d0a:	89 d7                	mov    %edx,%edi
f0111d0c:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0111d0e:	83 ec 0c             	sub    $0xc,%esp
f0111d11:	68 e8 01 13 f0       	push   $0xf01301e8
f0111d16:	e8 12 ef fe ff       	call   f0100c2d <cprintf>
f0111d1b:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0111d1e:	e8 8d 98 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0111d23:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0111d26:	e8 79 17 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0111d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0111d2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111d35:	eb 1f                	jmp    f0111d56 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0111d37:	83 ec 0c             	sub    $0xc,%esp
f0111d3a:	68 00 00 20 00       	push   $0x200000
f0111d3f:	e8 b0 4e ff ff       	call   f0106bf4 <kmalloc>
f0111d44:	83 c4 10             	add    $0x10,%esp
f0111d47:	89 c2                	mov    %eax,%edx
f0111d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111d4c:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0111d53:	ff 45 f4             	incl   -0xc(%ebp)
f0111d56:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0111d5a:	7e db                	jle    f0111d37 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0111d5c:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0111d63:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111d68:	0f b6 d0             	movzbl %al,%edx
f0111d6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d6e:	01 d0                	add    %edx,%eax
f0111d70:	48                   	dec    %eax
f0111d71:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111d74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d7c:	f7 75 e8             	divl   -0x18(%ebp)
f0111d7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111d82:	29 d0                	sub    %edx,%eax
f0111d84:	89 c1                	mov    %eax,%ecx
f0111d86:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0111d8d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111d92:	0f b6 c0             	movzbl %al,%eax
f0111d95:	c1 e0 04             	shl    $0x4,%eax
f0111d98:	89 c2                	mov    %eax,%edx
f0111d9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111d9d:	01 d0                	add    %edx,%eax
f0111d9f:	48                   	dec    %eax
f0111da0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111da3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111da6:	ba 00 00 00 00       	mov    $0x0,%edx
f0111dab:	f7 75 e0             	divl   -0x20(%ebp)
f0111dae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111db1:	29 d0                	sub    %edx,%eax
f0111db3:	01 c1                	add    %eax,%ecx
f0111db5:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0111dbc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111dbf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111dc4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0111dc7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111dca:	ba 00 00 00 00       	mov    $0x0,%edx
f0111dcf:	f7 75 d8             	divl   -0x28(%ebp)
f0111dd2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111dd5:	29 d0                	sub    %edx,%eax
f0111dd7:	01 c8                	add    %ecx,%eax
f0111dd9:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0111dde:	29 c2                	sub    %eax,%edx
f0111de0:	89 d0                	mov    %edx,%eax
f0111de2:	83 ec 0c             	sub    $0xc,%esp
f0111de5:	50                   	push   %eax
f0111de6:	e8 09 4e ff ff       	call   f0106bf4 <kmalloc>
f0111deb:	83 c4 10             	add    $0x10,%esp
f0111dee:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0111df4:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0111dfa:	89 c1                	mov    %eax,%ecx
f0111dfc:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0111e03:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111e08:	0f b6 d0             	movzbl %al,%edx
f0111e0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111e0e:	01 d0                	add    %edx,%eax
f0111e10:	48                   	dec    %eax
f0111e11:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0111e14:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e1c:	f7 75 d0             	divl   -0x30(%ebp)
f0111e1f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111e22:	29 d0                	sub    %edx,%eax
f0111e24:	89 c3                	mov    %eax,%ebx
f0111e26:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0111e2d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111e32:	0f b6 c0             	movzbl %al,%eax
f0111e35:	c1 e0 04             	shl    $0x4,%eax
f0111e38:	89 c2                	mov    %eax,%edx
f0111e3a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111e3d:	01 d0                	add    %edx,%eax
f0111e3f:	48                   	dec    %eax
f0111e40:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0111e43:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e4b:	f7 75 c8             	divl   -0x38(%ebp)
f0111e4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111e51:	29 d0                	sub    %edx,%eax
f0111e53:	01 c3                	add    %eax,%ebx
f0111e55:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0111e5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e5f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111e64:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0111e67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e6f:	f7 75 c0             	divl   -0x40(%ebp)
f0111e72:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e75:	29 d0                	sub    %edx,%eax
f0111e77:	01 d8                	add    %ebx,%eax
f0111e79:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0111e7e:	39 c1                	cmp    %eax,%ecx
f0111e80:	0f 85 ed 04 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0111e86:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0111e8c:	89 c1                	mov    %eax,%ecx
f0111e8e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0111e95:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111e9a:	0f b6 d0             	movzbl %al,%edx
f0111e9d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111ea0:	01 d0                	add    %edx,%eax
f0111ea2:	48                   	dec    %eax
f0111ea3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0111ea6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111ea9:	ba 00 00 00 00       	mov    $0x0,%edx
f0111eae:	f7 75 b8             	divl   -0x48(%ebp)
f0111eb1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111eb4:	29 d0                	sub    %edx,%eax
f0111eb6:	89 c3                	mov    %eax,%ebx
f0111eb8:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0111ebf:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111ec4:	0f b6 c0             	movzbl %al,%eax
f0111ec7:	c1 e0 04             	shl    $0x4,%eax
f0111eca:	89 c2                	mov    %eax,%edx
f0111ecc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111ecf:	01 d0                	add    %edx,%eax
f0111ed1:	48                   	dec    %eax
f0111ed2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0111ed5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0111edd:	f7 75 b0             	divl   -0x50(%ebp)
f0111ee0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ee3:	29 d0                	sub    %edx,%eax
f0111ee5:	01 c3                	add    %eax,%ebx
f0111ee7:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0111eee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111ef1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111ef6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0111ef9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111efc:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f01:	f7 75 a8             	divl   -0x58(%ebp)
f0111f04:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111f07:	29 d0                	sub    %edx,%eax
f0111f09:	01 d8                	add    %ebx,%eax
f0111f0b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0111f10:	39 c1                	cmp    %eax,%ecx
f0111f12:	0f 85 5b 04 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0111f18:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0111f1e:	89 c1                	mov    %eax,%ecx
f0111f20:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0111f27:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111f2c:	0f b6 d0             	movzbl %al,%edx
f0111f2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111f32:	01 d0                	add    %edx,%eax
f0111f34:	48                   	dec    %eax
f0111f35:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0111f38:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111f3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f40:	f7 75 a0             	divl   -0x60(%ebp)
f0111f43:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111f46:	29 d0                	sub    %edx,%eax
f0111f48:	89 c3                	mov    %eax,%ebx
f0111f4a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0111f51:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111f56:	0f b6 c0             	movzbl %al,%eax
f0111f59:	c1 e0 04             	shl    $0x4,%eax
f0111f5c:	89 c2                	mov    %eax,%edx
f0111f5e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111f61:	01 d0                	add    %edx,%eax
f0111f63:	48                   	dec    %eax
f0111f64:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0111f67:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111f6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f6f:	f7 75 98             	divl   -0x68(%ebp)
f0111f72:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111f75:	29 d0                	sub    %edx,%eax
f0111f77:	01 c3                	add    %eax,%ebx
f0111f79:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0111f80:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111f83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0111f88:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0111f8b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111f8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f93:	f7 75 90             	divl   -0x70(%ebp)
f0111f96:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111f99:	29 d0                	sub    %edx,%eax
f0111f9b:	01 d8                	add    %ebx,%eax
f0111f9d:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0111fa2:	39 c1                	cmp    %eax,%ecx
f0111fa4:	0f 85 c9 03 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0111faa:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0111fb0:	89 c1                	mov    %eax,%ecx
f0111fb2:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0111fb9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111fbe:	0f b6 d0             	movzbl %al,%edx
f0111fc1:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111fc4:	01 d0                	add    %edx,%eax
f0111fc6:	48                   	dec    %eax
f0111fc7:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0111fca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0111fcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0111fd2:	f7 75 88             	divl   -0x78(%ebp)
f0111fd5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0111fd8:	29 d0                	sub    %edx,%eax
f0111fda:	89 c3                	mov    %eax,%ebx
f0111fdc:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0111fe3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0111fe8:	0f b6 c0             	movzbl %al,%eax
f0111feb:	c1 e0 04             	shl    $0x4,%eax
f0111fee:	89 c2                	mov    %eax,%edx
f0111ff0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111ff3:	01 d0                	add    %edx,%eax
f0111ff5:	48                   	dec    %eax
f0111ff6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0111ffc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112002:	ba 00 00 00 00       	mov    $0x0,%edx
f0112007:	f7 75 80             	divl   -0x80(%ebp)
f011200a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112010:	29 d0                	sub    %edx,%eax
f0112012:	01 c3                	add    %eax,%ebx
f0112014:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011201b:	10 00 00 
f011201e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112024:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112029:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011202f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112035:	ba 00 00 00 00       	mov    $0x0,%edx
f011203a:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0112040:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112046:	29 d0                	sub    %edx,%eax
f0112048:	01 d8                	add    %ebx,%eax
f011204a:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011204f:	39 c1                	cmp    %eax,%ecx
f0112051:	0f 85 1c 03 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0112057:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011205d:	89 c1                	mov    %eax,%ecx
f011205f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0112066:	10 00 00 
f0112069:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011206e:	0f b6 d0             	movzbl %al,%edx
f0112071:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112077:	01 d0                	add    %edx,%eax
f0112079:	48                   	dec    %eax
f011207a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0112080:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112086:	ba 00 00 00 00       	mov    $0x0,%edx
f011208b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0112091:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112097:	29 d0                	sub    %edx,%eax
f0112099:	89 c3                	mov    %eax,%ebx
f011209b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01120a2:	10 00 00 
f01120a5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01120aa:	0f b6 c0             	movzbl %al,%eax
f01120ad:	c1 e0 04             	shl    $0x4,%eax
f01120b0:	89 c2                	mov    %eax,%edx
f01120b2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01120b8:	01 d0                	add    %edx,%eax
f01120ba:	48                   	dec    %eax
f01120bb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01120c1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01120c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01120cc:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01120d2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01120d8:	29 d0                	sub    %edx,%eax
f01120da:	01 c3                	add    %eax,%ebx
f01120dc:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01120e3:	10 00 00 
f01120e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01120ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01120f1:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01120f7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01120fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0112102:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0112108:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011210e:	29 d0                	sub    %edx,%eax
f0112110:	01 d8                	add    %ebx,%eax
f0112112:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0112117:	39 c1                	cmp    %eax,%ecx
f0112119:	0f 85 54 02 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011211f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0112125:	89 c1                	mov    %eax,%ecx
f0112127:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011212e:	10 00 00 
f0112131:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112136:	0f b6 d0             	movzbl %al,%edx
f0112139:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011213f:	01 d0                	add    %edx,%eax
f0112141:	48                   	dec    %eax
f0112142:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0112148:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011214e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112153:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0112159:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011215f:	29 d0                	sub    %edx,%eax
f0112161:	89 c3                	mov    %eax,%ebx
f0112163:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011216a:	10 00 00 
f011216d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112172:	0f b6 c0             	movzbl %al,%eax
f0112175:	c1 e0 04             	shl    $0x4,%eax
f0112178:	89 c2                	mov    %eax,%edx
f011217a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112180:	01 d0                	add    %edx,%eax
f0112182:	48                   	dec    %eax
f0112183:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0112189:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011218f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112194:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011219a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01121a0:	29 d0                	sub    %edx,%eax
f01121a2:	01 c3                	add    %eax,%ebx
f01121a4:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01121ab:	10 00 00 
f01121ae:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01121b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01121b9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01121bf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01121c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01121ca:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01121d0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01121d6:	29 d0                	sub    %edx,%eax
f01121d8:	01 d8                	add    %ebx,%eax
f01121da:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01121df:	39 c1                	cmp    %eax,%ecx
f01121e1:	0f 85 8c 01 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01121e7:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01121ed:	89 c1                	mov    %eax,%ecx
f01121ef:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01121f6:	10 00 00 
f01121f9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01121fe:	0f b6 d0             	movzbl %al,%edx
f0112201:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0112207:	01 d0                	add    %edx,%eax
f0112209:	48                   	dec    %eax
f011220a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0112210:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0112216:	ba 00 00 00 00       	mov    $0x0,%edx
f011221b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0112221:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0112227:	29 d0                	sub    %edx,%eax
f0112229:	89 c3                	mov    %eax,%ebx
f011222b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0112232:	10 00 00 
f0112235:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011223a:	0f b6 c0             	movzbl %al,%eax
f011223d:	c1 e0 04             	shl    $0x4,%eax
f0112240:	89 c2                	mov    %eax,%edx
f0112242:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112248:	01 d0                	add    %edx,%eax
f011224a:	48                   	dec    %eax
f011224b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0112251:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0112257:	ba 00 00 00 00       	mov    $0x0,%edx
f011225c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0112262:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0112268:	29 d0                	sub    %edx,%eax
f011226a:	01 c3                	add    %eax,%ebx
f011226c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0112273:	10 00 00 
f0112276:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011227c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112281:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0112287:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011228d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112292:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0112298:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011229e:	29 d0                	sub    %edx,%eax
f01122a0:	01 d8                	add    %ebx,%eax
f01122a2:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01122a7:	39 c1                	cmp    %eax,%ecx
f01122a9:	0f 85 c4 00 00 00    	jne    f0112373 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01122af:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01122b5:	89 c1                	mov    %eax,%ecx
f01122b7:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01122be:	10 00 00 
f01122c1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01122c6:	0f b6 d0             	movzbl %al,%edx
f01122c9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01122cf:	01 d0                	add    %edx,%eax
f01122d1:	48                   	dec    %eax
f01122d2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01122d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01122de:	ba 00 00 00 00       	mov    $0x0,%edx
f01122e3:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01122e9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01122ef:	29 d0                	sub    %edx,%eax
f01122f1:	89 c3                	mov    %eax,%ebx
f01122f3:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01122fa:	10 00 00 
f01122fd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112302:	0f b6 c0             	movzbl %al,%eax
f0112305:	c1 e0 04             	shl    $0x4,%eax
f0112308:	89 c2                	mov    %eax,%edx
f011230a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112310:	01 d0                	add    %edx,%eax
f0112312:	48                   	dec    %eax
f0112313:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0112319:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011231f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112324:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011232a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0112330:	29 d0                	sub    %edx,%eax
f0112332:	01 c3                	add    %eax,%ebx
f0112334:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011233b:	10 00 00 
f011233e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112344:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112349:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011234f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112355:	ba 00 00 00 00       	mov    $0x0,%edx
f011235a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0112360:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112366:	29 d0                	sub    %edx,%eax
f0112368:	01 d8                	add    %ebx,%eax
f011236a:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011236f:	39 c1                	cmp    %eax,%ecx
f0112371:	74 17                	je     f011238a <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0112373:	83 ec 04             	sub    $0x4,%esp
f0112376:	68 38 02 13 f0       	push   $0xf0130238
f011237b:	68 00 01 00 00       	push   $0x100
f0112380:	68 be ff 12 f0       	push   $0xf012ffbe
f0112385:	e8 1c de fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011238a:	e8 15 11 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f011238f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112392:	74 17                	je     f01123ab <test_kmalloc_nextfit+0x6ec>
f0112394:	83 ec 04             	sub    $0x4,%esp
f0112397:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011239c:	68 02 01 00 00       	push   $0x102
f01123a1:	68 be ff 12 f0       	push   $0xf012ffbe
f01123a6:	e8 fb dd fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01123ab:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01123ae:	e8 fd 91 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01123b3:	29 c3                	sub    %eax,%ebx
f01123b5:	89 d9                	mov    %ebx,%ecx
f01123b7:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01123be:	10 00 00 
f01123c1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01123c6:	0f b6 d0             	movzbl %al,%edx
f01123c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01123cf:	01 d0                	add    %edx,%eax
f01123d1:	48                   	dec    %eax
f01123d2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01123d8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01123de:	ba 00 00 00 00       	mov    $0x0,%edx
f01123e3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01123e9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01123ef:	29 d0                	sub    %edx,%eax
f01123f1:	89 c3                	mov    %eax,%ebx
f01123f3:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01123fa:	10 00 00 
f01123fd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112402:	0f b6 c0             	movzbl %al,%eax
f0112405:	c1 e0 04             	shl    $0x4,%eax
f0112408:	89 c2                	mov    %eax,%edx
f011240a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0112410:	01 d0                	add    %edx,%eax
f0112412:	48                   	dec    %eax
f0112413:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0112419:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011241f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112424:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011242a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0112430:	29 d0                	sub    %edx,%eax
f0112432:	01 c3                	add    %eax,%ebx
f0112434:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011243b:	10 00 00 
f011243e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0112444:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112449:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011244f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0112455:	ba 00 00 00 00       	mov    $0x0,%edx
f011245a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0112460:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0112466:	29 d0                	sub    %edx,%eax
f0112468:	01 d8                	add    %ebx,%eax
f011246a:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f011246f:	29 c2                	sub    %eax,%edx
f0112471:	89 d0                	mov    %edx,%eax
f0112473:	c1 e8 0c             	shr    $0xc,%eax
f0112476:	39 c1                	cmp    %eax,%ecx
f0112478:	74 17                	je     f0112491 <test_kmalloc_nextfit+0x7d2>
f011247a:	83 ec 04             	sub    $0x4,%esp
f011247d:	68 7b 02 13 f0       	push   $0xf013027b
f0112482:	68 03 01 00 00       	push   $0x103
f0112487:	68 be ff 12 f0       	push   $0xf012ffbe
f011248c:	e8 15 dd fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0112491:	e8 0e 10 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112496:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112499:	e8 12 91 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011249e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01124a1:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01124a7:	83 ec 0c             	sub    $0xc,%esp
f01124aa:	50                   	push   %eax
f01124ab:	e8 5e 47 ff ff       	call   f0106c0e <kfree>
f01124b0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01124b3:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01124b9:	83 ec 0c             	sub    $0xc,%esp
f01124bc:	50                   	push   %eax
f01124bd:	e8 4c 47 ff ff       	call   f0106c0e <kfree>
f01124c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01124c5:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01124cb:	83 ec 0c             	sub    $0xc,%esp
f01124ce:	50                   	push   %eax
f01124cf:	e8 3a 47 ff ff       	call   f0106c0e <kfree>
f01124d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01124d7:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01124dd:	83 ec 0c             	sub    $0xc,%esp
f01124e0:	50                   	push   %eax
f01124e1:	e8 28 47 ff ff       	call   f0106c0e <kfree>
f01124e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01124e9:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01124ef:	83 ec 0c             	sub    $0xc,%esp
f01124f2:	50                   	push   %eax
f01124f3:	e8 16 47 ff ff       	call   f0106c0e <kfree>
f01124f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01124fb:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0112501:	83 ec 0c             	sub    $0xc,%esp
f0112504:	50                   	push   %eax
f0112505:	e8 04 47 ff ff       	call   f0106c0e <kfree>
f011250a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011250d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0112513:	83 ec 0c             	sub    $0xc,%esp
f0112516:	50                   	push   %eax
f0112517:	e8 f2 46 ff ff       	call   f0106c0e <kfree>
f011251c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011251f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0112525:	83 ec 0c             	sub    $0xc,%esp
f0112528:	50                   	push   %eax
f0112529:	e8 e0 46 ff ff       	call   f0106c0e <kfree>
f011252e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0112531:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0112537:	83 ec 0c             	sub    $0xc,%esp
f011253a:	50                   	push   %eax
f011253b:	e8 ce 46 ff ff       	call   f0106c0e <kfree>
f0112540:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0112543:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0112549:	83 ec 0c             	sub    $0xc,%esp
f011254c:	50                   	push   %eax
f011254d:	e8 bc 46 ff ff       	call   f0106c0e <kfree>
f0112552:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112555:	e8 4a 0f ff ff       	call   f01034a4 <pf_calculate_free_frames>
f011255a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011255d:	74 17                	je     f0112576 <test_kmalloc_nextfit+0x8b7>
f011255f:	83 ec 04             	sub    $0x4,%esp
f0112562:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112567:	68 14 01 00 00       	push   $0x114
f011256c:	68 be ff 12 f0       	push   $0xf012ffbe
f0112571:	e8 30 dc fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0112576:	e8 35 90 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011257b:	89 c2                	mov    %eax,%edx
f011257d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112580:	89 d1                	mov    %edx,%ecx
f0112582:	29 c1                	sub    %eax,%ecx
f0112584:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011258b:	10 00 00 
f011258e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112593:	0f b6 d0             	movzbl %al,%edx
f0112596:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011259c:	01 d0                	add    %edx,%eax
f011259e:	48                   	dec    %eax
f011259f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01125a5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01125ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01125b0:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01125b6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01125bc:	29 d0                	sub    %edx,%eax
f01125be:	89 c3                	mov    %eax,%ebx
f01125c0:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01125c7:	10 00 00 
f01125ca:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01125cf:	0f b6 c0             	movzbl %al,%eax
f01125d2:	c1 e0 04             	shl    $0x4,%eax
f01125d5:	89 c2                	mov    %eax,%edx
f01125d7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01125dd:	01 d0                	add    %edx,%eax
f01125df:	48                   	dec    %eax
f01125e0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01125e6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01125ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01125f1:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01125f7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01125fd:	29 d0                	sub    %edx,%eax
f01125ff:	01 c3                	add    %eax,%ebx
f0112601:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0112608:	10 00 00 
f011260b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0112611:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112616:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011261c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0112622:	ba 00 00 00 00       	mov    $0x0,%edx
f0112627:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011262d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0112633:	29 d0                	sub    %edx,%eax
f0112635:	01 d8                	add    %ebx,%eax
f0112637:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f011263c:	29 c2                	sub    %eax,%edx
f011263e:	89 d0                	mov    %edx,%eax
f0112640:	c1 e8 0c             	shr    $0xc,%eax
f0112643:	39 c1                	cmp    %eax,%ecx
f0112645:	74 17                	je     f011265e <test_kmalloc_nextfit+0x99f>
f0112647:	83 ec 04             	sub    $0x4,%esp
f011264a:	68 8c 02 13 f0       	push   $0xf013028c
f011264f:	68 15 01 00 00       	push   $0x115
f0112654:	68 be ff 12 f0       	push   $0xf012ffbe
f0112659:	e8 48 db fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f011265e:	e8 41 0e ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112663:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112666:	e8 45 8f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011266b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f011266e:	83 ec 0c             	sub    $0xc,%esp
f0112671:	68 00 fc 0f 00       	push   $0xffc00
f0112676:	e8 79 45 ff ff       	call   f0106bf4 <kmalloc>
f011267b:	83 c4 10             	add    $0x10,%esp
f011267e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0112684:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011268b:	10 00 00 
f011268e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112693:	0f b6 d0             	movzbl %al,%edx
f0112696:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011269c:	01 d0                	add    %edx,%eax
f011269e:	48                   	dec    %eax
f011269f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01126a5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01126ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01126b0:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01126b6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01126bc:	29 d0                	sub    %edx,%eax
f01126be:	89 c1                	mov    %eax,%ecx
f01126c0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01126c7:	10 00 00 
f01126ca:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01126cf:	0f b6 c0             	movzbl %al,%eax
f01126d2:	c1 e0 04             	shl    $0x4,%eax
f01126d5:	89 c2                	mov    %eax,%edx
f01126d7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01126dd:	01 d0                	add    %edx,%eax
f01126df:	48                   	dec    %eax
f01126e0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01126e6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01126ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01126f1:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01126f7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01126fd:	29 d0                	sub    %edx,%eax
f01126ff:	01 c1                	add    %eax,%ecx
f0112701:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0112708:	10 00 00 
f011270b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0112711:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112716:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011271c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0112722:	ba 00 00 00 00       	mov    $0x0,%edx
f0112727:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011272d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0112733:	29 d0                	sub    %edx,%eax
f0112735:	01 c8                	add    %ecx,%eax
f0112737:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011273d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112743:	39 c2                	cmp    %eax,%edx
f0112745:	74 17                	je     f011275e <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0112747:	83 ec 04             	sub    $0x4,%esp
f011274a:	68 cc 02 13 f0       	push   $0xf01302cc
f011274f:	68 1c 01 00 00       	push   $0x11c
f0112754:	68 be ff 12 f0       	push   $0xf012ffbe
f0112759:	e8 48 da fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011275e:	e8 41 0d ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112763:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112766:	74 17                	je     f011277f <test_kmalloc_nextfit+0xac0>
f0112768:	83 ec 04             	sub    $0x4,%esp
f011276b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112770:	68 1d 01 00 00       	push   $0x11d
f0112775:	68 be ff 12 f0       	push   $0xf012ffbe
f011277a:	e8 27 da fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011277f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0112782:	e8 29 8e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112787:	29 c3                	sub    %eax,%ebx
f0112789:	89 d8                	mov    %ebx,%eax
f011278b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112790:	74 17                	je     f01127a9 <test_kmalloc_nextfit+0xaea>
f0112792:	83 ec 04             	sub    $0x4,%esp
f0112795:	68 7b 02 13 f0       	push   $0xf013027b
f011279a:	68 1e 01 00 00       	push   $0x11e
f011279f:	68 be ff 12 f0       	push   $0xf012ffbe
f01127a4:	e8 fd d9 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01127a9:	e8 f6 0c ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01127ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01127b1:	e8 fa 8d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01127b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01127b9:	83 ec 0c             	sub    $0xc,%esp
f01127bc:	68 00 04 00 00       	push   $0x400
f01127c1:	e8 2e 44 ff ff       	call   f0106bf4 <kmalloc>
f01127c6:	83 c4 10             	add    $0x10,%esp
f01127c9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f01127cf:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01127d6:	10 00 00 
f01127d9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01127de:	0f b6 d0             	movzbl %al,%edx
f01127e1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01127e7:	01 d0                	add    %edx,%eax
f01127e9:	48                   	dec    %eax
f01127ea:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01127f0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01127f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01127fb:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0112801:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0112807:	29 d0                	sub    %edx,%eax
f0112809:	89 c1                	mov    %eax,%ecx
f011280b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0112812:	10 00 00 
f0112815:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011281a:	0f b6 c0             	movzbl %al,%eax
f011281d:	c1 e0 04             	shl    $0x4,%eax
f0112820:	89 c2                	mov    %eax,%edx
f0112822:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0112828:	01 d0                	add    %edx,%eax
f011282a:	48                   	dec    %eax
f011282b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0112831:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0112837:	ba 00 00 00 00       	mov    $0x0,%edx
f011283c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0112842:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0112848:	29 d0                	sub    %edx,%eax
f011284a:	01 c1                	add    %eax,%ecx
f011284c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0112853:	10 00 00 
f0112856:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011285c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112861:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0112867:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011286d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112872:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0112878:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011287e:	29 d0                	sub    %edx,%eax
f0112880:	01 c8                	add    %ecx,%eax
f0112882:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0112888:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011288e:	39 c2                	cmp    %eax,%edx
f0112890:	74 17                	je     f01128a9 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0112892:	83 ec 04             	sub    $0x4,%esp
f0112895:	68 cc 02 13 f0       	push   $0xf01302cc
f011289a:	68 24 01 00 00       	push   $0x124
f011289f:	68 be ff 12 f0       	push   $0xf012ffbe
f01128a4:	e8 fd d8 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01128a9:	e8 f6 0b ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01128ae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01128b1:	74 17                	je     f01128ca <test_kmalloc_nextfit+0xc0b>
f01128b3:	83 ec 04             	sub    $0x4,%esp
f01128b6:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01128bb:	68 25 01 00 00       	push   $0x125
f01128c0:	68 be ff 12 f0       	push   $0xf012ffbe
f01128c5:	e8 dc d8 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01128ca:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01128cd:	e8 de 8c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01128d2:	29 c3                	sub    %eax,%ebx
f01128d4:	89 d8                	mov    %ebx,%eax
f01128d6:	83 f8 01             	cmp    $0x1,%eax
f01128d9:	74 17                	je     f01128f2 <test_kmalloc_nextfit+0xc33>
f01128db:	83 ec 04             	sub    $0x4,%esp
f01128de:	68 7b 02 13 f0       	push   $0xf013027b
f01128e3:	68 26 01 00 00       	push   $0x126
f01128e8:	68 be ff 12 f0       	push   $0xf012ffbe
f01128ed:	e8 b4 d8 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01128f2:	e8 ad 0b ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01128f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01128fa:	e8 b1 8c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01128ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0112902:	83 ec 0c             	sub    $0xc,%esp
f0112905:	68 00 00 50 00       	push   $0x500000
f011290a:	e8 e5 42 ff ff       	call   f0106bf4 <kmalloc>
f011290f:	83 c4 10             	add    $0x10,%esp
f0112912:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0112918:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011291f:	10 00 00 
f0112922:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112927:	0f b6 d0             	movzbl %al,%edx
f011292a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0112930:	01 d0                	add    %edx,%eax
f0112932:	48                   	dec    %eax
f0112933:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0112939:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011293f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112944:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011294a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0112950:	29 d0                	sub    %edx,%eax
f0112952:	89 c1                	mov    %eax,%ecx
f0112954:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011295b:	10 00 00 
f011295e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112963:	0f b6 c0             	movzbl %al,%eax
f0112966:	c1 e0 04             	shl    $0x4,%eax
f0112969:	89 c2                	mov    %eax,%edx
f011296b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0112971:	01 d0                	add    %edx,%eax
f0112973:	48                   	dec    %eax
f0112974:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011297a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0112980:	ba 00 00 00 00       	mov    $0x0,%edx
f0112985:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011298b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0112991:	29 d0                	sub    %edx,%eax
f0112993:	01 c1                	add    %eax,%ecx
f0112995:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f011299c:	10 00 00 
f011299f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01129a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01129aa:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01129b0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01129b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01129bb:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01129c1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01129c7:	29 d0                	sub    %edx,%eax
f01129c9:	01 c8                	add    %ecx,%eax
f01129cb:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01129d1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01129d7:	39 c2                	cmp    %eax,%edx
f01129d9:	74 17                	je     f01129f2 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f01129db:	83 ec 04             	sub    $0x4,%esp
f01129de:	68 cc 02 13 f0       	push   $0xf01302cc
f01129e3:	68 2c 01 00 00       	push   $0x12c
f01129e8:	68 be ff 12 f0       	push   $0xf012ffbe
f01129ed:	e8 b4 d7 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01129f2:	e8 ad 0a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01129f7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01129fa:	74 17                	je     f0112a13 <test_kmalloc_nextfit+0xd54>
f01129fc:	83 ec 04             	sub    $0x4,%esp
f01129ff:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112a04:	68 2d 01 00 00       	push   $0x12d
f0112a09:	68 be ff 12 f0       	push   $0xf012ffbe
f0112a0e:	e8 93 d7 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0112a13:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0112a16:	e8 95 8b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112a1b:	29 c3                	sub    %eax,%ebx
f0112a1d:	89 d8                	mov    %ebx,%eax
f0112a1f:	3d 00 05 00 00       	cmp    $0x500,%eax
f0112a24:	74 17                	je     f0112a3d <test_kmalloc_nextfit+0xd7e>
f0112a26:	83 ec 04             	sub    $0x4,%esp
f0112a29:	68 7b 02 13 f0       	push   $0xf013027b
f0112a2e:	68 2e 01 00 00       	push   $0x12e
f0112a33:	68 be ff 12 f0       	push   $0xf012ffbe
f0112a38:	e8 69 d7 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0112a3d:	e8 62 0a ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112a42:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112a45:	e8 66 8b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0112a4d:	83 ec 0c             	sub    $0xc,%esp
f0112a50:	68 00 00 10 00       	push   $0x100000
f0112a55:	e8 9a 41 ff ff       	call   f0106bf4 <kmalloc>
f0112a5a:	83 c4 10             	add    $0x10,%esp
f0112a5d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0112a63:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0112a6a:	10 00 00 
f0112a6d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112a72:	0f b6 d0             	movzbl %al,%edx
f0112a75:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0112a7b:	01 d0                	add    %edx,%eax
f0112a7d:	48                   	dec    %eax
f0112a7e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0112a84:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0112a8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a8f:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0112a95:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0112a9b:	29 d0                	sub    %edx,%eax
f0112a9d:	89 c1                	mov    %eax,%ecx
f0112a9f:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0112aa6:	10 00 00 
f0112aa9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112aae:	0f b6 c0             	movzbl %al,%eax
f0112ab1:	c1 e0 04             	shl    $0x4,%eax
f0112ab4:	89 c2                	mov    %eax,%edx
f0112ab6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0112abc:	01 d0                	add    %edx,%eax
f0112abe:	48                   	dec    %eax
f0112abf:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0112ac5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0112acb:	ba 00 00 00 00       	mov    $0x0,%edx
f0112ad0:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0112ad6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0112adc:	29 d0                	sub    %edx,%eax
f0112ade:	01 c1                	add    %eax,%ecx
f0112ae0:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0112ae7:	10 00 00 
f0112aea:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0112af0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112af5:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0112afb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0112b01:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b06:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0112b0c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0112b12:	29 d0                	sub    %edx,%eax
f0112b14:	01 c8                	add    %ecx,%eax
f0112b16:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0112b1c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112b22:	39 c2                	cmp    %eax,%edx
f0112b24:	74 17                	je     f0112b3d <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0112b26:	83 ec 04             	sub    $0x4,%esp
f0112b29:	68 cc 02 13 f0       	push   $0xf01302cc
f0112b2e:	68 34 01 00 00       	push   $0x134
f0112b33:	68 be ff 12 f0       	push   $0xf012ffbe
f0112b38:	e8 69 d6 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112b3d:	e8 62 09 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112b42:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112b45:	74 17                	je     f0112b5e <test_kmalloc_nextfit+0xe9f>
f0112b47:	83 ec 04             	sub    $0x4,%esp
f0112b4a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112b4f:	68 35 01 00 00       	push   $0x135
f0112b54:	68 be ff 12 f0       	push   $0xf012ffbe
f0112b59:	e8 48 d6 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0112b5e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0112b61:	e8 4a 8a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112b66:	29 c3                	sub    %eax,%ebx
f0112b68:	89 d8                	mov    %ebx,%eax
f0112b6a:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112b6f:	74 17                	je     f0112b88 <test_kmalloc_nextfit+0xec9>
f0112b71:	83 ec 04             	sub    $0x4,%esp
f0112b74:	68 7b 02 13 f0       	push   $0xf013027b
f0112b79:	68 36 01 00 00       	push   $0x136
f0112b7e:	68 be ff 12 f0       	push   $0xf012ffbe
f0112b83:	e8 1e d6 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0112b88:	e8 17 09 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112b8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112b90:	e8 1b 8a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112b95:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0112b98:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0112b9e:	83 ec 0c             	sub    $0xc,%esp
f0112ba1:	50                   	push   %eax
f0112ba2:	e8 67 40 ff ff       	call   f0106c0e <kfree>
f0112ba7:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112baa:	e8 f5 08 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112baf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112bb2:	74 17                	je     f0112bcb <test_kmalloc_nextfit+0xf0c>
f0112bb4:	83 ec 04             	sub    $0x4,%esp
f0112bb7:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112bbc:	68 3b 01 00 00       	push   $0x13b
f0112bc1:	68 be ff 12 f0       	push   $0xf012ffbe
f0112bc6:	e8 db d5 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0112bcb:	e8 e0 89 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112bd0:	89 c2                	mov    %eax,%edx
f0112bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112bd5:	29 c2                	sub    %eax,%edx
f0112bd7:	89 d0                	mov    %edx,%eax
f0112bd9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112bde:	74 17                	je     f0112bf7 <test_kmalloc_nextfit+0xf38>
f0112be0:	83 ec 04             	sub    $0x4,%esp
f0112be3:	68 8c 02 13 f0       	push   $0xf013028c
f0112be8:	68 3c 01 00 00       	push   $0x13c
f0112bed:	68 be ff 12 f0       	push   $0xf012ffbe
f0112bf2:	e8 af d5 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0112bf7:	e8 a8 08 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112bfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112bff:	e8 ac 89 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112c04:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0112c07:	83 ec 0c             	sub    $0xc,%esp
f0112c0a:	68 00 04 00 00       	push   $0x400
f0112c0f:	e8 e0 3f ff ff       	call   f0106bf4 <kmalloc>
f0112c14:	83 c4 10             	add    $0x10,%esp
f0112c17:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0112c1d:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0112c24:	10 00 00 
f0112c27:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112c2c:	0f b6 d0             	movzbl %al,%edx
f0112c2f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0112c35:	01 d0                	add    %edx,%eax
f0112c37:	48                   	dec    %eax
f0112c38:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0112c3e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0112c44:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c49:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0112c4f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0112c55:	29 d0                	sub    %edx,%eax
f0112c57:	89 c1                	mov    %eax,%ecx
f0112c59:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0112c60:	10 00 00 
f0112c63:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112c68:	0f b6 c0             	movzbl %al,%eax
f0112c6b:	c1 e0 04             	shl    $0x4,%eax
f0112c6e:	89 c2                	mov    %eax,%edx
f0112c70:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0112c76:	01 d0                	add    %edx,%eax
f0112c78:	48                   	dec    %eax
f0112c79:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0112c7f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0112c85:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c8a:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0112c90:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0112c96:	29 d0                	sub    %edx,%eax
f0112c98:	01 c1                	add    %eax,%ecx
f0112c9a:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0112ca1:	10 00 00 
f0112ca4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0112caa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112caf:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0112cb5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0112cbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0112cc0:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0112cc6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0112ccc:	29 d0                	sub    %edx,%eax
f0112cce:	01 c8                	add    %ecx,%eax
f0112cd0:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0112cd6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112cdc:	39 c2                	cmp    %eax,%edx
f0112cde:	74 17                	je     f0112cf7 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0112ce0:	83 ec 04             	sub    $0x4,%esp
f0112ce3:	68 cc 02 13 f0       	push   $0xf01302cc
f0112ce8:	68 42 01 00 00       	push   $0x142
f0112ced:	68 be ff 12 f0       	push   $0xf012ffbe
f0112cf2:	e8 af d4 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112cf7:	e8 a8 07 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112cfc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112cff:	74 17                	je     f0112d18 <test_kmalloc_nextfit+0x1059>
f0112d01:	83 ec 04             	sub    $0x4,%esp
f0112d04:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112d09:	68 43 01 00 00       	push   $0x143
f0112d0e:	68 be ff 12 f0       	push   $0xf012ffbe
f0112d13:	e8 8e d4 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0112d18:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0112d1b:	e8 90 88 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112d20:	29 c3                	sub    %eax,%ebx
f0112d22:	89 d8                	mov    %ebx,%eax
f0112d24:	83 f8 01             	cmp    $0x1,%eax
f0112d27:	74 17                	je     f0112d40 <test_kmalloc_nextfit+0x1081>
f0112d29:	83 ec 04             	sub    $0x4,%esp
f0112d2c:	68 7b 02 13 f0       	push   $0xf013027b
f0112d31:	68 44 01 00 00       	push   $0x144
f0112d36:	68 be ff 12 f0       	push   $0xf012ffbe
f0112d3b:	e8 66 d4 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0112d40:	e8 5f 07 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112d45:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112d48:	e8 63 88 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0112d50:	83 ec 0c             	sub    $0xc,%esp
f0112d53:	68 00 e0 1f 00       	push   $0x1fe000
f0112d58:	e8 97 3e ff ff       	call   f0106bf4 <kmalloc>
f0112d5d:	83 c4 10             	add    $0x10,%esp
f0112d60:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0112d66:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0112d6d:	10 00 00 
f0112d70:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112d75:	0f b6 d0             	movzbl %al,%edx
f0112d78:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0112d7e:	01 d0                	add    %edx,%eax
f0112d80:	48                   	dec    %eax
f0112d81:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0112d87:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0112d8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d92:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0112d98:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0112d9e:	29 d0                	sub    %edx,%eax
f0112da0:	89 c1                	mov    %eax,%ecx
f0112da2:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0112da9:	10 00 00 
f0112dac:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112db1:	0f b6 c0             	movzbl %al,%eax
f0112db4:	c1 e0 04             	shl    $0x4,%eax
f0112db7:	89 c2                	mov    %eax,%edx
f0112db9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0112dbf:	01 d0                	add    %edx,%eax
f0112dc1:	48                   	dec    %eax
f0112dc2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0112dc8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0112dce:	ba 00 00 00 00       	mov    $0x0,%edx
f0112dd3:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0112dd9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0112ddf:	29 d0                	sub    %edx,%eax
f0112de1:	01 c1                	add    %eax,%ecx
f0112de3:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0112dea:	10 00 00 
f0112ded:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0112df3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112df8:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0112dfe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112e04:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e09:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0112e0f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0112e15:	29 d0                	sub    %edx,%eax
f0112e17:	01 c8                	add    %ecx,%eax
f0112e19:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0112e1f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112e25:	39 c2                	cmp    %eax,%edx
f0112e27:	74 17                	je     f0112e40 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0112e29:	83 ec 04             	sub    $0x4,%esp
f0112e2c:	68 cc 02 13 f0       	push   $0xf01302cc
f0112e31:	68 4a 01 00 00       	push   $0x14a
f0112e36:	68 be ff 12 f0       	push   $0xf012ffbe
f0112e3b:	e8 66 d3 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112e40:	e8 5f 06 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112e45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112e48:	74 17                	je     f0112e61 <test_kmalloc_nextfit+0x11a2>
f0112e4a:	83 ec 04             	sub    $0x4,%esp
f0112e4d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112e52:	68 4b 01 00 00       	push   $0x14b
f0112e57:	68 be ff 12 f0       	push   $0xf012ffbe
f0112e5c:	e8 45 d3 fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0112e61:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0112e64:	e8 47 87 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112e69:	29 c3                	sub    %eax,%ebx
f0112e6b:	89 d8                	mov    %ebx,%eax
f0112e6d:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0112e72:	74 17                	je     f0112e8b <test_kmalloc_nextfit+0x11cc>
f0112e74:	83 ec 04             	sub    $0x4,%esp
f0112e77:	68 7b 02 13 f0       	push   $0xf013027b
f0112e7c:	68 4d 01 00 00       	push   $0x14d
f0112e81:	68 be ff 12 f0       	push   $0xf012ffbe
f0112e86:	e8 1b d3 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0112e8b:	e8 14 06 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112e90:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112e93:	e8 18 87 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112e98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0112e9b:	83 ec 0c             	sub    $0xc,%esp
f0112e9e:	68 00 00 08 00       	push   $0x80000
f0112ea3:	e8 4c 3d ff ff       	call   f0106bf4 <kmalloc>
f0112ea8:	83 c4 10             	add    $0x10,%esp
f0112eab:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0112eb1:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0112eb8:	10 00 00 
f0112ebb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112ec0:	0f b6 d0             	movzbl %al,%edx
f0112ec3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0112ec9:	01 d0                	add    %edx,%eax
f0112ecb:	48                   	dec    %eax
f0112ecc:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0112ed2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0112ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0112edd:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0112ee3:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0112ee9:	29 d0                	sub    %edx,%eax
f0112eeb:	89 c1                	mov    %eax,%ecx
f0112eed:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0112ef4:	10 00 00 
f0112ef7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0112efc:	0f b6 c0             	movzbl %al,%eax
f0112eff:	c1 e0 04             	shl    $0x4,%eax
f0112f02:	89 c2                	mov    %eax,%edx
f0112f04:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0112f0a:	01 d0                	add    %edx,%eax
f0112f0c:	48                   	dec    %eax
f0112f0d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0112f13:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112f19:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f1e:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0112f24:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0112f2a:	29 d0                	sub    %edx,%eax
f0112f2c:	01 c1                	add    %eax,%ecx
f0112f2e:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0112f35:	10 00 00 
f0112f38:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0112f3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0112f43:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0112f49:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f54:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0112f5a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0112f60:	29 d0                	sub    %edx,%eax
f0112f62:	01 c8                	add    %ecx,%eax
f0112f64:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0112f6a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0112f70:	39 c2                	cmp    %eax,%edx
f0112f72:	74 17                	je     f0112f8b <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0112f74:	83 ec 04             	sub    $0x4,%esp
f0112f77:	68 cc 02 13 f0       	push   $0xf01302cc
f0112f7c:	68 53 01 00 00       	push   $0x153
f0112f81:	68 be ff 12 f0       	push   $0xf012ffbe
f0112f86:	e8 1b d2 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112f8b:	e8 14 05 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112f90:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0112f93:	74 17                	je     f0112fac <test_kmalloc_nextfit+0x12ed>
f0112f95:	83 ec 04             	sub    $0x4,%esp
f0112f98:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0112f9d:	68 54 01 00 00       	push   $0x154
f0112fa2:	68 be ff 12 f0       	push   $0xf012ffbe
f0112fa7:	e8 fa d1 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0112fac:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0112faf:	e8 fc 85 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112fb4:	29 c3                	sub    %eax,%ebx
f0112fb6:	89 d8                	mov    %ebx,%eax
f0112fb8:	3d 80 00 00 00       	cmp    $0x80,%eax
f0112fbd:	74 17                	je     f0112fd6 <test_kmalloc_nextfit+0x1317>
f0112fbf:	83 ec 04             	sub    $0x4,%esp
f0112fc2:	68 7b 02 13 f0       	push   $0xf013027b
f0112fc7:	68 55 01 00 00       	push   $0x155
f0112fcc:	68 be ff 12 f0       	push   $0xf012ffbe
f0112fd1:	e8 d0 d1 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0112fd6:	83 ec 0c             	sub    $0xc,%esp
f0112fd9:	68 ec 02 13 f0       	push   $0xf01302ec
f0112fde:	e8 4a dc fe ff       	call   f0100c2d <cprintf>
f0112fe3:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0112fe6:	e8 b9 04 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0112feb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0112fee:	e8 bd 85 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0112ff3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0112ff6:	83 ec 0c             	sub    $0xc,%esp
f0112ff9:	68 00 00 38 00       	push   $0x380000
f0112ffe:	e8 f1 3b ff ff       	call   f0106bf4 <kmalloc>
f0113003:	83 c4 10             	add    $0x10,%esp
f0113006:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011300c:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0113013:	10 00 00 
f0113016:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011301b:	0f b6 d0             	movzbl %al,%edx
f011301e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0113024:	01 d0                	add    %edx,%eax
f0113026:	48                   	dec    %eax
f0113027:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011302d:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0113033:	ba 00 00 00 00       	mov    $0x0,%edx
f0113038:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011303e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0113044:	29 d0                	sub    %edx,%eax
f0113046:	89 c1                	mov    %eax,%ecx
f0113048:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011304f:	10 00 00 
f0113052:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113057:	0f b6 c0             	movzbl %al,%eax
f011305a:	c1 e0 04             	shl    $0x4,%eax
f011305d:	89 c2                	mov    %eax,%edx
f011305f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0113065:	01 d0                	add    %edx,%eax
f0113067:	48                   	dec    %eax
f0113068:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011306e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0113074:	ba 00 00 00 00       	mov    $0x0,%edx
f0113079:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011307f:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0113085:	29 d0                	sub    %edx,%eax
f0113087:	01 c1                	add    %eax,%ecx
f0113089:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0113090:	10 00 00 
f0113093:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0113099:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011309e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f01130a4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01130aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01130af:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f01130b5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01130bb:	29 d0                	sub    %edx,%eax
f01130bd:	01 c8                	add    %ecx,%eax
f01130bf:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f01130c5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01130cb:	39 c2                	cmp    %eax,%edx
f01130cd:	74 17                	je     f01130e6 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f01130cf:	83 ec 04             	sub    $0x4,%esp
f01130d2:	68 cc 02 13 f0       	push   $0xf01302cc
f01130d7:	68 5f 01 00 00       	push   $0x15f
f01130dc:	68 be ff 12 f0       	push   $0xf012ffbe
f01130e1:	e8 c0 d0 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01130e6:	e8 b9 03 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01130eb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01130ee:	74 17                	je     f0113107 <test_kmalloc_nextfit+0x1448>
f01130f0:	83 ec 04             	sub    $0x4,%esp
f01130f3:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01130f8:	68 60 01 00 00       	push   $0x160
f01130fd:	68 be ff 12 f0       	push   $0xf012ffbe
f0113102:	e8 9f d0 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0113107:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011310a:	e8 a1 84 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011310f:	29 c3                	sub    %eax,%ebx
f0113111:	89 d8                	mov    %ebx,%eax
f0113113:	3d 80 03 00 00       	cmp    $0x380,%eax
f0113118:	74 17                	je     f0113131 <test_kmalloc_nextfit+0x1472>
f011311a:	83 ec 04             	sub    $0x4,%esp
f011311d:	68 7b 02 13 f0       	push   $0xf013027b
f0113122:	68 61 01 00 00       	push   $0x161
f0113127:	68 be ff 12 f0       	push   $0xf012ffbe
f011312c:	e8 75 d0 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0113131:	e8 6e 03 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0113136:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0113139:	e8 72 84 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011313e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0113141:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0113147:	83 ec 0c             	sub    $0xc,%esp
f011314a:	50                   	push   %eax
f011314b:	e8 be 3a ff ff       	call   f0106c0e <kfree>
f0113150:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113153:	e8 4c 03 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0113158:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011315b:	74 17                	je     f0113174 <test_kmalloc_nextfit+0x14b5>
f011315d:	83 ec 04             	sub    $0x4,%esp
f0113160:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113165:	68 66 01 00 00       	push   $0x166
f011316a:	68 be ff 12 f0       	push   $0xf012ffbe
f011316f:	e8 32 d0 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0113174:	e8 37 84 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113179:	89 c2                	mov    %eax,%edx
f011317b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011317e:	29 c2                	sub    %eax,%edx
f0113180:	89 d0                	mov    %edx,%eax
f0113182:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113187:	74 17                	je     f01131a0 <test_kmalloc_nextfit+0x14e1>
f0113189:	83 ec 04             	sub    $0x4,%esp
f011318c:	68 8c 02 13 f0       	push   $0xf013028c
f0113191:	68 67 01 00 00       	push   $0x167
f0113196:	68 be ff 12 f0       	push   $0xf012ffbe
f011319b:	e8 06 d0 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01131a0:	e8 ff 02 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01131a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01131a8:	e8 03 84 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01131ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f01131b0:	83 ec 0c             	sub    $0xc,%esp
f01131b3:	68 00 fc 3f 00       	push   $0x3ffc00
f01131b8:	e8 37 3a ff ff       	call   f0106bf4 <kmalloc>
f01131bd:	83 c4 10             	add    $0x10,%esp
f01131c0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f01131c6:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f01131cd:	10 00 00 
f01131d0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01131d5:	0f b6 d0             	movzbl %al,%edx
f01131d8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01131de:	01 d0                	add    %edx,%eax
f01131e0:	48                   	dec    %eax
f01131e1:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01131e7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01131ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01131f2:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f01131f8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01131fe:	29 d0                	sub    %edx,%eax
f0113200:	89 c1                	mov    %eax,%ecx
f0113202:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0113209:	10 00 00 
f011320c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113211:	0f b6 c0             	movzbl %al,%eax
f0113214:	c1 e0 04             	shl    $0x4,%eax
f0113217:	89 c2                	mov    %eax,%edx
f0113219:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011321f:	01 d0                	add    %edx,%eax
f0113221:	48                   	dec    %eax
f0113222:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0113228:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011322e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113233:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0113239:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011323f:	29 d0                	sub    %edx,%eax
f0113241:	01 c1                	add    %eax,%ecx
f0113243:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011324a:	10 00 00 
f011324d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0113253:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0113258:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011325e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0113264:	ba 00 00 00 00       	mov    $0x0,%edx
f0113269:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011326f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0113275:	29 d0                	sub    %edx,%eax
f0113277:	01 c8                	add    %ecx,%eax
f0113279:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011327f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0113285:	39 c2                	cmp    %eax,%edx
f0113287:	74 17                	je     f01132a0 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0113289:	83 ec 04             	sub    $0x4,%esp
f011328c:	68 cc 02 13 f0       	push   $0xf01302cc
f0113291:	68 6d 01 00 00       	push   $0x16d
f0113296:	68 be ff 12 f0       	push   $0xf012ffbe
f011329b:	e8 06 cf fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01132a0:	e8 ff 01 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f01132a5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01132a8:	74 17                	je     f01132c1 <test_kmalloc_nextfit+0x1602>
f01132aa:	83 ec 04             	sub    $0x4,%esp
f01132ad:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01132b2:	68 6e 01 00 00       	push   $0x16e
f01132b7:	68 be ff 12 f0       	push   $0xf012ffbe
f01132bc:	e8 e5 ce fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01132c1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01132c4:	e8 e7 82 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01132c9:	29 c3                	sub    %eax,%ebx
f01132cb:	89 d8                	mov    %ebx,%eax
f01132cd:	3d 00 04 00 00       	cmp    $0x400,%eax
f01132d2:	74 17                	je     f01132eb <test_kmalloc_nextfit+0x162c>
f01132d4:	83 ec 04             	sub    $0x4,%esp
f01132d7:	68 7b 02 13 f0       	push   $0xf013027b
f01132dc:	68 6f 01 00 00       	push   $0x16f
f01132e1:	68 be ff 12 f0       	push   $0xf012ffbe
f01132e6:	e8 bb ce fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f01132eb:	83 ec 0c             	sub    $0xc,%esp
f01132ee:	68 28 03 13 f0       	push   $0xf0130328
f01132f3:	e8 35 d9 fe ff       	call   f0100c2d <cprintf>
f01132f8:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f01132fb:	e8 a4 01 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0113300:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0113303:	e8 a8 82 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113308:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011330b:	83 ec 0c             	sub    $0xc,%esp
f011330e:	68 00 00 60 00       	push   $0x600000
f0113313:	e8 dc 38 ff ff       	call   f0106bf4 <kmalloc>
f0113318:	83 c4 10             	add    $0x10,%esp
f011331b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0113321:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0113327:	85 c0                	test   %eax,%eax
f0113329:	74 17                	je     f0113342 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011332b:	83 ec 04             	sub    $0x4,%esp
f011332e:	68 cc 02 13 f0       	push   $0xf01302cc
f0113333:	68 79 01 00 00       	push   $0x179
f0113338:	68 be ff 12 f0       	push   $0xf012ffbe
f011333d:	e8 64 ce fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113342:	e8 5d 01 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0113347:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011334a:	74 17                	je     f0113363 <test_kmalloc_nextfit+0x16a4>
f011334c:	83 ec 04             	sub    $0x4,%esp
f011334f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113354:	68 7a 01 00 00       	push   $0x17a
f0113359:	68 be ff 12 f0       	push   $0xf012ffbe
f011335e:	e8 43 ce fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0113363:	e8 48 82 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113368:	89 c2                	mov    %eax,%edx
f011336a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011336d:	39 c2                	cmp    %eax,%edx
f011336f:	74 17                	je     f0113388 <test_kmalloc_nextfit+0x16c9>
f0113371:	83 ec 04             	sub    $0x4,%esp
f0113374:	68 7b 02 13 f0       	push   $0xf013027b
f0113379:	68 7b 01 00 00       	push   $0x17b
f011337e:	68 be ff 12 f0       	push   $0xf012ffbe
f0113383:	e8 1e ce fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0113388:	83 ec 0c             	sub    $0xc,%esp
f011338b:	68 60 03 13 f0       	push   $0xf0130360
f0113390:	e8 98 d8 fe ff       	call   f0100c2d <cprintf>
f0113395:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0113398:	83 ec 0c             	sub    $0xc,%esp
f011339b:	68 9c 03 13 f0       	push   $0xf013039c
f01133a0:	e8 88 d8 fe ff       	call   f0100c2d <cprintf>
f01133a5:	83 c4 10             	add    $0x10,%esp
	return 1;
f01133a8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01133ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01133b0:	5b                   	pop    %ebx
f01133b1:	5f                   	pop    %edi
f01133b2:	5d                   	pop    %ebp
f01133b3:	c3                   	ret    

f01133b4 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f01133b4:	55                   	push   %ebp
f01133b5:	89 e5                	mov    %esp,%ebp
f01133b7:	57                   	push   %edi
f01133b8:	53                   	push   %ebx
f01133b9:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f01133bf:	83 ec 0c             	sub    $0xc,%esp
f01133c2:	68 00 ff 12 f0       	push   $0xf012ff00
f01133c7:	e8 61 d8 fe ff       	call   f0100c2d <cprintf>
f01133cc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01133cf:	83 ec 0c             	sub    $0xc,%esp
f01133d2:	68 30 ff 12 f0       	push   $0xf012ff30
f01133d7:	e8 51 d8 fe ff       	call   f0100c2d <cprintf>
f01133dc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01133df:	83 ec 0c             	sub    $0xc,%esp
f01133e2:	68 00 ff 12 f0       	push   $0xf012ff00
f01133e7:	e8 41 d8 fe ff       	call   f0100c2d <cprintf>
f01133ec:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01133ef:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01133f5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01133fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01133ff:	89 d7                	mov    %edx,%edi
f0113401:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0113403:	e8 a8 81 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113408:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011340b:	e8 94 00 ff ff       	call   f01034a4 <pf_calculate_free_frames>
f0113410:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0113413:	83 ec 0c             	sub    $0xc,%esp
f0113416:	68 00 fc 2f 00       	push   $0x2ffc00
f011341b:	e8 d4 37 ff ff       	call   f0106bf4 <kmalloc>
f0113420:	83 c4 10             	add    $0x10,%esp
f0113423:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0113429:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011342f:	89 c1                	mov    %eax,%ecx
f0113431:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0113438:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011343d:	0f b6 d0             	movzbl %al,%edx
f0113440:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0113443:	01 d0                	add    %edx,%eax
f0113445:	48                   	dec    %eax
f0113446:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0113449:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011344c:	ba 00 00 00 00       	mov    $0x0,%edx
f0113451:	f7 75 ec             	divl   -0x14(%ebp)
f0113454:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0113457:	29 d0                	sub    %edx,%eax
f0113459:	89 c3                	mov    %eax,%ebx
f011345b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0113462:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113467:	0f b6 c0             	movzbl %al,%eax
f011346a:	c1 e0 04             	shl    $0x4,%eax
f011346d:	89 c2                	mov    %eax,%edx
f011346f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113472:	01 d0                	add    %edx,%eax
f0113474:	48                   	dec    %eax
f0113475:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0113478:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011347b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113480:	f7 75 e4             	divl   -0x1c(%ebp)
f0113483:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113486:	29 d0                	sub    %edx,%eax
f0113488:	01 c3                	add    %eax,%ebx
f011348a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0113491:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113494:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0113499:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011349c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011349f:	ba 00 00 00 00       	mov    $0x0,%edx
f01134a4:	f7 75 dc             	divl   -0x24(%ebp)
f01134a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01134aa:	29 d0                	sub    %edx,%eax
f01134ac:	01 d8                	add    %ebx,%eax
f01134ae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01134b3:	39 c1                	cmp    %eax,%ecx
f01134b5:	74 17                	je     f01134ce <test_kmalloc_bestfit1+0x11a>
f01134b7:	83 ec 04             	sub    $0x4,%esp
f01134ba:	68 d8 03 13 f0       	push   $0xf01303d8
f01134bf:	68 95 01 00 00       	push   $0x195
f01134c4:	68 be ff 12 f0       	push   $0xf012ffbe
f01134c9:	e8 d8 cc fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01134ce:	e8 d1 ff fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01134d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01134d6:	74 17                	je     f01134ef <test_kmalloc_bestfit1+0x13b>
f01134d8:	83 ec 04             	sub    $0x4,%esp
f01134db:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01134e0:	68 96 01 00 00       	push   $0x196
f01134e5:	68 be ff 12 f0       	push   $0xf012ffbe
f01134ea:	e8 b7 cc fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01134ef:	e8 bc 80 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01134f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01134f7:	29 c2                	sub    %eax,%edx
f01134f9:	89 d0                	mov    %edx,%eax
f01134fb:	3d 00 03 00 00       	cmp    $0x300,%eax
f0113500:	74 17                	je     f0113519 <test_kmalloc_bestfit1+0x165>
f0113502:	83 ec 04             	sub    $0x4,%esp
f0113505:	68 08 04 13 f0       	push   $0xf0130408
f011350a:	68 97 01 00 00       	push   $0x197
f011350f:	68 be ff 12 f0       	push   $0xf012ffbe
f0113514:	e8 8d cc fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0113519:	e8 92 80 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011351e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113521:	e8 7e ff fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113526:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0113529:	83 ec 0c             	sub    $0xc,%esp
f011352c:	68 00 fc 2f 00       	push   $0x2ffc00
f0113531:	e8 be 36 ff ff       	call   f0106bf4 <kmalloc>
f0113536:	83 c4 10             	add    $0x10,%esp
f0113539:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011353f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0113545:	89 c1                	mov    %eax,%ecx
f0113547:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011354e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113553:	0f b6 d0             	movzbl %al,%edx
f0113556:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113559:	01 d0                	add    %edx,%eax
f011355b:	48                   	dec    %eax
f011355c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011355f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113562:	ba 00 00 00 00       	mov    $0x0,%edx
f0113567:	f7 75 d4             	divl   -0x2c(%ebp)
f011356a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011356d:	29 d0                	sub    %edx,%eax
f011356f:	89 c3                	mov    %eax,%ebx
f0113571:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0113578:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011357d:	0f b6 c0             	movzbl %al,%eax
f0113580:	c1 e0 04             	shl    $0x4,%eax
f0113583:	89 c2                	mov    %eax,%edx
f0113585:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113588:	01 d0                	add    %edx,%eax
f011358a:	48                   	dec    %eax
f011358b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011358e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113591:	ba 00 00 00 00       	mov    $0x0,%edx
f0113596:	f7 75 cc             	divl   -0x34(%ebp)
f0113599:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011359c:	29 d0                	sub    %edx,%eax
f011359e:	01 c3                	add    %eax,%ebx
f01135a0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01135a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01135af:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01135b2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01135b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01135ba:	f7 75 c4             	divl   -0x3c(%ebp)
f01135bd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01135c0:	29 d0                	sub    %edx,%eax
f01135c2:	01 d8                	add    %ebx,%eax
f01135c4:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01135c9:	39 c1                	cmp    %eax,%ecx
f01135cb:	74 17                	je     f01135e4 <test_kmalloc_bestfit1+0x230>
f01135cd:	83 ec 04             	sub    $0x4,%esp
f01135d0:	68 d8 03 13 f0       	push   $0xf01303d8
f01135d5:	68 9d 01 00 00       	push   $0x19d
f01135da:	68 be ff 12 f0       	push   $0xf012ffbe
f01135df:	e8 c2 cb fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01135e4:	e8 bb fe fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01135e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01135ec:	74 17                	je     f0113605 <test_kmalloc_bestfit1+0x251>
f01135ee:	83 ec 04             	sub    $0x4,%esp
f01135f1:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01135f6:	68 9e 01 00 00       	push   $0x19e
f01135fb:	68 be ff 12 f0       	push   $0xf012ffbe
f0113600:	e8 a1 cb fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0113605:	e8 a6 7f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011360a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011360d:	29 c2                	sub    %eax,%edx
f011360f:	89 d0                	mov    %edx,%eax
f0113611:	3d 00 03 00 00       	cmp    $0x300,%eax
f0113616:	74 17                	je     f011362f <test_kmalloc_bestfit1+0x27b>
f0113618:	83 ec 04             	sub    $0x4,%esp
f011361b:	68 08 04 13 f0       	push   $0xf0130408
f0113620:	68 9f 01 00 00       	push   $0x19f
f0113625:	68 be ff 12 f0       	push   $0xf012ffbe
f011362a:	e8 77 cb fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011362f:	e8 7c 7f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113634:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113637:	e8 68 fe fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011363c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011363f:	83 ec 0c             	sub    $0xc,%esp
f0113642:	68 00 fc 1f 00       	push   $0x1ffc00
f0113647:	e8 a8 35 ff ff       	call   f0106bf4 <kmalloc>
f011364c:	83 c4 10             	add    $0x10,%esp
f011364f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0113655:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011365b:	89 c1                	mov    %eax,%ecx
f011365d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0113664:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113669:	0f b6 d0             	movzbl %al,%edx
f011366c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011366f:	01 d0                	add    %edx,%eax
f0113671:	48                   	dec    %eax
f0113672:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0113675:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113678:	ba 00 00 00 00       	mov    $0x0,%edx
f011367d:	f7 75 bc             	divl   -0x44(%ebp)
f0113680:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113683:	29 d0                	sub    %edx,%eax
f0113685:	89 c3                	mov    %eax,%ebx
f0113687:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011368e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113693:	0f b6 c0             	movzbl %al,%eax
f0113696:	c1 e0 04             	shl    $0x4,%eax
f0113699:	89 c2                	mov    %eax,%edx
f011369b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011369e:	01 d0                	add    %edx,%eax
f01136a0:	48                   	dec    %eax
f01136a1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01136a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01136a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01136ac:	f7 75 b4             	divl   -0x4c(%ebp)
f01136af:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01136b2:	29 d0                	sub    %edx,%eax
f01136b4:	01 c3                	add    %eax,%ebx
f01136b6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01136bd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01136c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01136c5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01136c8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01136d0:	f7 75 ac             	divl   -0x54(%ebp)
f01136d3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136d6:	29 d0                	sub    %edx,%eax
f01136d8:	01 d8                	add    %ebx,%eax
f01136da:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f01136df:	39 c1                	cmp    %eax,%ecx
f01136e1:	74 17                	je     f01136fa <test_kmalloc_bestfit1+0x346>
f01136e3:	83 ec 04             	sub    $0x4,%esp
f01136e6:	68 d8 03 13 f0       	push   $0xf01303d8
f01136eb:	68 a5 01 00 00       	push   $0x1a5
f01136f0:	68 be ff 12 f0       	push   $0xf012ffbe
f01136f5:	e8 ac ca fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01136fa:	e8 a5 fd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01136ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113702:	74 17                	je     f011371b <test_kmalloc_bestfit1+0x367>
f0113704:	83 ec 04             	sub    $0x4,%esp
f0113707:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011370c:	68 a6 01 00 00       	push   $0x1a6
f0113711:	68 be ff 12 f0       	push   $0xf012ffbe
f0113716:	e8 8b ca fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011371b:	e8 90 7e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113720:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113723:	29 c2                	sub    %eax,%edx
f0113725:	89 d0                	mov    %edx,%eax
f0113727:	3d 00 02 00 00       	cmp    $0x200,%eax
f011372c:	74 17                	je     f0113745 <test_kmalloc_bestfit1+0x391>
f011372e:	83 ec 04             	sub    $0x4,%esp
f0113731:	68 08 04 13 f0       	push   $0xf0130408
f0113736:	68 a7 01 00 00       	push   $0x1a7
f011373b:	68 be ff 12 f0       	push   $0xf012ffbe
f0113740:	e8 61 ca fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113745:	e8 66 7e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011374a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011374d:	e8 52 fd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113752:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0113755:	83 ec 0c             	sub    $0xc,%esp
f0113758:	68 00 fc 1f 00       	push   $0x1ffc00
f011375d:	e8 92 34 ff ff       	call   f0106bf4 <kmalloc>
f0113762:	83 c4 10             	add    $0x10,%esp
f0113765:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011376b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0113771:	89 c1                	mov    %eax,%ecx
f0113773:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011377a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011377f:	0f b6 d0             	movzbl %al,%edx
f0113782:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113785:	01 d0                	add    %edx,%eax
f0113787:	48                   	dec    %eax
f0113788:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011378b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011378e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113793:	f7 75 a4             	divl   -0x5c(%ebp)
f0113796:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113799:	29 d0                	sub    %edx,%eax
f011379b:	89 c3                	mov    %eax,%ebx
f011379d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01137a4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01137a9:	0f b6 c0             	movzbl %al,%eax
f01137ac:	c1 e0 04             	shl    $0x4,%eax
f01137af:	89 c2                	mov    %eax,%edx
f01137b1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01137b4:	01 d0                	add    %edx,%eax
f01137b6:	48                   	dec    %eax
f01137b7:	89 45 98             	mov    %eax,-0x68(%ebp)
f01137ba:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01137c2:	f7 75 9c             	divl   -0x64(%ebp)
f01137c5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137c8:	29 d0                	sub    %edx,%eax
f01137ca:	01 c3                	add    %eax,%ebx
f01137cc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01137d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01137d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01137db:	89 45 90             	mov    %eax,-0x70(%ebp)
f01137de:	8b 45 90             	mov    -0x70(%ebp),%eax
f01137e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01137e6:	f7 75 94             	divl   -0x6c(%ebp)
f01137e9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01137ec:	29 d0                	sub    %edx,%eax
f01137ee:	01 d8                	add    %ebx,%eax
f01137f0:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01137f5:	39 c1                	cmp    %eax,%ecx
f01137f7:	74 17                	je     f0113810 <test_kmalloc_bestfit1+0x45c>
f01137f9:	83 ec 04             	sub    $0x4,%esp
f01137fc:	68 d8 03 13 f0       	push   $0xf01303d8
f0113801:	68 ad 01 00 00       	push   $0x1ad
f0113806:	68 be ff 12 f0       	push   $0xf012ffbe
f011380b:	e8 96 c9 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113810:	e8 8f fc fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113815:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113818:	74 17                	je     f0113831 <test_kmalloc_bestfit1+0x47d>
f011381a:	83 ec 04             	sub    $0x4,%esp
f011381d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113822:	68 ae 01 00 00       	push   $0x1ae
f0113827:	68 be ff 12 f0       	push   $0xf012ffbe
f011382c:	e8 75 c9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0113831:	e8 7a 7d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113836:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113839:	29 c2                	sub    %eax,%edx
f011383b:	89 d0                	mov    %edx,%eax
f011383d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113842:	74 17                	je     f011385b <test_kmalloc_bestfit1+0x4a7>
f0113844:	83 ec 04             	sub    $0x4,%esp
f0113847:	68 08 04 13 f0       	push   $0xf0130408
f011384c:	68 af 01 00 00       	push   $0x1af
f0113851:	68 be ff 12 f0       	push   $0xf012ffbe
f0113856:	e8 4b c9 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011385b:	e8 50 7d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113863:	e8 3c fc fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113868:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011386b:	83 ec 0c             	sub    $0xc,%esp
f011386e:	68 00 fc 0f 00       	push   $0xffc00
f0113873:	e8 7c 33 ff ff       	call   f0106bf4 <kmalloc>
f0113878:	83 c4 10             	add    $0x10,%esp
f011387b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0113881:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0113887:	89 c1                	mov    %eax,%ecx
f0113889:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0113890:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113895:	0f b6 d0             	movzbl %al,%edx
f0113898:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011389b:	01 d0                	add    %edx,%eax
f011389d:	48                   	dec    %eax
f011389e:	89 45 88             	mov    %eax,-0x78(%ebp)
f01138a1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01138a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01138a9:	f7 75 8c             	divl   -0x74(%ebp)
f01138ac:	8b 45 88             	mov    -0x78(%ebp),%eax
f01138af:	29 d0                	sub    %edx,%eax
f01138b1:	89 c3                	mov    %eax,%ebx
f01138b3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01138ba:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01138bf:	0f b6 c0             	movzbl %al,%eax
f01138c2:	c1 e0 04             	shl    $0x4,%eax
f01138c5:	89 c2                	mov    %eax,%edx
f01138c7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01138ca:	01 d0                	add    %edx,%eax
f01138cc:	48                   	dec    %eax
f01138cd:	89 45 80             	mov    %eax,-0x80(%ebp)
f01138d0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01138d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01138d8:	f7 75 84             	divl   -0x7c(%ebp)
f01138db:	8b 45 80             	mov    -0x80(%ebp),%eax
f01138de:	29 d0                	sub    %edx,%eax
f01138e0:	01 c3                	add    %eax,%ebx
f01138e2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01138e9:	10 00 00 
f01138ec:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01138f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01138f7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01138fd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113903:	ba 00 00 00 00       	mov    $0x0,%edx
f0113908:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011390e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113914:	29 d0                	sub    %edx,%eax
f0113916:	01 d8                	add    %ebx,%eax
f0113918:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011391d:	39 c1                	cmp    %eax,%ecx
f011391f:	74 17                	je     f0113938 <test_kmalloc_bestfit1+0x584>
f0113921:	83 ec 04             	sub    $0x4,%esp
f0113924:	68 d8 03 13 f0       	push   $0xf01303d8
f0113929:	68 b5 01 00 00       	push   $0x1b5
f011392e:	68 be ff 12 f0       	push   $0xf012ffbe
f0113933:	e8 6e c8 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113938:	e8 67 fb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011393d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113940:	74 17                	je     f0113959 <test_kmalloc_bestfit1+0x5a5>
f0113942:	83 ec 04             	sub    $0x4,%esp
f0113945:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011394a:	68 b6 01 00 00       	push   $0x1b6
f011394f:	68 be ff 12 f0       	push   $0xf012ffbe
f0113954:	e8 4d c8 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0113959:	e8 52 7c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011395e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113961:	29 c2                	sub    %eax,%edx
f0113963:	89 d0                	mov    %edx,%eax
f0113965:	3d 00 01 00 00       	cmp    $0x100,%eax
f011396a:	74 17                	je     f0113983 <test_kmalloc_bestfit1+0x5cf>
f011396c:	83 ec 04             	sub    $0x4,%esp
f011396f:	68 08 04 13 f0       	push   $0xf0130408
f0113974:	68 b7 01 00 00       	push   $0x1b7
f0113979:	68 be ff 12 f0       	push   $0xf012ffbe
f011397e:	e8 23 c8 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0113983:	e8 28 7c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113988:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011398b:	e8 14 fb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113990:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f0113993:	83 ec 0c             	sub    $0xc,%esp
f0113996:	68 00 fc 0f 00       	push   $0xffc00
f011399b:	e8 54 32 ff ff       	call   f0106bf4 <kmalloc>
f01139a0:	83 c4 10             	add    $0x10,%esp
f01139a3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f01139a9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01139af:	89 c1                	mov    %eax,%ecx
f01139b1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01139b8:	10 00 00 
f01139bb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01139c0:	0f b6 d0             	movzbl %al,%edx
f01139c3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01139c9:	01 d0                	add    %edx,%eax
f01139cb:	48                   	dec    %eax
f01139cc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01139d2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01139d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01139dd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01139e3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01139e9:	29 d0                	sub    %edx,%eax
f01139eb:	89 c3                	mov    %eax,%ebx
f01139ed:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01139f4:	10 00 00 
f01139f7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01139fc:	0f b6 c0             	movzbl %al,%eax
f01139ff:	c1 e0 04             	shl    $0x4,%eax
f0113a02:	89 c2                	mov    %eax,%edx
f0113a04:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113a0a:	01 d0                	add    %edx,%eax
f0113a0c:	48                   	dec    %eax
f0113a0d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0113a13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113a19:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a1e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0113a24:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113a2a:	29 d0                	sub    %edx,%eax
f0113a2c:	01 c3                	add    %eax,%ebx
f0113a2e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0113a35:	10 00 00 
f0113a38:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113a3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0113a43:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0113a49:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0113a4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a54:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0113a5a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0113a60:	29 d0                	sub    %edx,%eax
f0113a62:	01 d8                	add    %ebx,%eax
f0113a64:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0113a69:	39 c1                	cmp    %eax,%ecx
f0113a6b:	74 17                	je     f0113a84 <test_kmalloc_bestfit1+0x6d0>
f0113a6d:	83 ec 04             	sub    $0x4,%esp
f0113a70:	68 d8 03 13 f0       	push   $0xf01303d8
f0113a75:	68 bd 01 00 00       	push   $0x1bd
f0113a7a:	68 be ff 12 f0       	push   $0xf012ffbe
f0113a7f:	e8 22 c7 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113a84:	e8 1b fa fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113a89:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113a8c:	74 17                	je     f0113aa5 <test_kmalloc_bestfit1+0x6f1>
f0113a8e:	83 ec 04             	sub    $0x4,%esp
f0113a91:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113a96:	68 be 01 00 00       	push   $0x1be
f0113a9b:	68 be ff 12 f0       	push   $0xf012ffbe
f0113aa0:	e8 01 c7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0113aa5:	e8 06 7b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113aaa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113aad:	29 c2                	sub    %eax,%edx
f0113aaf:	89 d0                	mov    %edx,%eax
f0113ab1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113ab6:	74 17                	je     f0113acf <test_kmalloc_bestfit1+0x71b>
f0113ab8:	83 ec 04             	sub    $0x4,%esp
f0113abb:	68 08 04 13 f0       	push   $0xf0130408
f0113ac0:	68 bf 01 00 00       	push   $0x1bf
f0113ac5:	68 be ff 12 f0       	push   $0xf012ffbe
f0113aca:	e8 d7 c6 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0113acf:	e8 dc 7a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113ad7:	e8 c8 f9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0113adf:	83 ec 0c             	sub    $0xc,%esp
f0113ae2:	68 00 fc 0f 00       	push   $0xffc00
f0113ae7:	e8 08 31 ff ff       	call   f0106bf4 <kmalloc>
f0113aec:	83 c4 10             	add    $0x10,%esp
f0113aef:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0113af5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0113afb:	89 c1                	mov    %eax,%ecx
f0113afd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0113b04:	10 00 00 
f0113b07:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113b0c:	0f b6 d0             	movzbl %al,%edx
f0113b0f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0113b15:	01 d0                	add    %edx,%eax
f0113b17:	48                   	dec    %eax
f0113b18:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0113b1e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0113b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b29:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0113b2f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0113b35:	29 d0                	sub    %edx,%eax
f0113b37:	89 c3                	mov    %eax,%ebx
f0113b39:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0113b40:	10 00 00 
f0113b43:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113b48:	0f b6 c0             	movzbl %al,%eax
f0113b4b:	c1 e0 04             	shl    $0x4,%eax
f0113b4e:	89 c2                	mov    %eax,%edx
f0113b50:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0113b56:	01 d0                	add    %edx,%eax
f0113b58:	48                   	dec    %eax
f0113b59:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0113b5f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0113b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b6a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0113b70:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0113b76:	29 d0                	sub    %edx,%eax
f0113b78:	01 c3                	add    %eax,%ebx
f0113b7a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0113b81:	10 00 00 
f0113b84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0113b8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0113b8f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0113b95:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0113b9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ba0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0113ba6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0113bac:	29 d0                	sub    %edx,%eax
f0113bae:	01 d8                	add    %ebx,%eax
f0113bb0:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f0113bb5:	39 c1                	cmp    %eax,%ecx
f0113bb7:	74 17                	je     f0113bd0 <test_kmalloc_bestfit1+0x81c>
f0113bb9:	83 ec 04             	sub    $0x4,%esp
f0113bbc:	68 d8 03 13 f0       	push   $0xf01303d8
f0113bc1:	68 c5 01 00 00       	push   $0x1c5
f0113bc6:	68 be ff 12 f0       	push   $0xf012ffbe
f0113bcb:	e8 d6 c5 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113bd0:	e8 cf f8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113bd5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113bd8:	74 17                	je     f0113bf1 <test_kmalloc_bestfit1+0x83d>
f0113bda:	83 ec 04             	sub    $0x4,%esp
f0113bdd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113be2:	68 c6 01 00 00       	push   $0x1c6
f0113be7:	68 be ff 12 f0       	push   $0xf012ffbe
f0113bec:	e8 b5 c5 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0113bf1:	e8 ba 79 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113bf6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113bf9:	29 c2                	sub    %eax,%edx
f0113bfb:	89 d0                	mov    %edx,%eax
f0113bfd:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113c02:	74 17                	je     f0113c1b <test_kmalloc_bestfit1+0x867>
f0113c04:	83 ec 04             	sub    $0x4,%esp
f0113c07:	68 08 04 13 f0       	push   $0xf0130408
f0113c0c:	68 c7 01 00 00       	push   $0x1c7
f0113c11:	68 be ff 12 f0       	push   $0xf012ffbe
f0113c16:	e8 8b c5 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0113c1b:	e8 90 79 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113c20:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113c23:	e8 7c f8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113c28:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f0113c2b:	83 ec 0c             	sub    $0xc,%esp
f0113c2e:	68 00 fc 0f 00       	push   $0xffc00
f0113c33:	e8 bc 2f ff ff       	call   f0106bf4 <kmalloc>
f0113c38:	83 c4 10             	add    $0x10,%esp
f0113c3b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f0113c41:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0113c47:	89 c1                	mov    %eax,%ecx
f0113c49:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0113c50:	10 00 00 
f0113c53:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113c58:	0f b6 d0             	movzbl %al,%edx
f0113c5b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113c61:	01 d0                	add    %edx,%eax
f0113c63:	48                   	dec    %eax
f0113c64:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0113c6a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113c70:	ba 00 00 00 00       	mov    $0x0,%edx
f0113c75:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0113c7b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113c81:	29 d0                	sub    %edx,%eax
f0113c83:	89 c3                	mov    %eax,%ebx
f0113c85:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0113c8c:	10 00 00 
f0113c8f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113c94:	0f b6 c0             	movzbl %al,%eax
f0113c97:	c1 e0 04             	shl    $0x4,%eax
f0113c9a:	89 c2                	mov    %eax,%edx
f0113c9c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113ca2:	01 d0                	add    %edx,%eax
f0113ca4:	48                   	dec    %eax
f0113ca5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0113cab:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0113cb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0113cb6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0113cbc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0113cc2:	29 d0                	sub    %edx,%eax
f0113cc4:	01 c3                	add    %eax,%ebx
f0113cc6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0113ccd:	10 00 00 
f0113cd0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0113cd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0113cdb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0113ce1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0113ce7:	ba 00 00 00 00       	mov    $0x0,%edx
f0113cec:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0113cf2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0113cf8:	29 d0                	sub    %edx,%eax
f0113cfa:	01 d8                	add    %ebx,%eax
f0113cfc:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0113d01:	39 c1                	cmp    %eax,%ecx
f0113d03:	74 17                	je     f0113d1c <test_kmalloc_bestfit1+0x968>
f0113d05:	83 ec 04             	sub    $0x4,%esp
f0113d08:	68 d8 03 13 f0       	push   $0xf01303d8
f0113d0d:	68 cd 01 00 00       	push   $0x1cd
f0113d12:	68 be ff 12 f0       	push   $0xf012ffbe
f0113d17:	e8 8a c4 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113d1c:	e8 83 f7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113d21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113d24:	74 17                	je     f0113d3d <test_kmalloc_bestfit1+0x989>
f0113d26:	83 ec 04             	sub    $0x4,%esp
f0113d29:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113d2e:	68 ce 01 00 00       	push   $0x1ce
f0113d33:	68 be ff 12 f0       	push   $0xf012ffbe
f0113d38:	e8 69 c4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0113d3d:	e8 6e 78 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113d42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113d45:	29 c2                	sub    %eax,%edx
f0113d47:	89 d0                	mov    %edx,%eax
f0113d49:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113d4e:	74 17                	je     f0113d67 <test_kmalloc_bestfit1+0x9b3>
f0113d50:	83 ec 04             	sub    $0x4,%esp
f0113d53:	68 08 04 13 f0       	push   $0xf0130408
f0113d58:	68 cf 01 00 00       	push   $0x1cf
f0113d5d:	68 be ff 12 f0       	push   $0xf012ffbe
f0113d62:	e8 3f c4 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0113d67:	e8 44 78 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113d6f:	e8 30 f7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113d74:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0113d77:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0113d7d:	83 ec 0c             	sub    $0xc,%esp
f0113d80:	50                   	push   %eax
f0113d81:	e8 88 2e ff ff       	call   f0106c0e <kfree>
f0113d86:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113d89:	e8 16 f7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113d8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113d91:	74 17                	je     f0113daa <test_kmalloc_bestfit1+0x9f6>
f0113d93:	83 ec 04             	sub    $0x4,%esp
f0113d96:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113d9b:	68 d8 01 00 00       	push   $0x1d8
f0113da0:	68 be ff 12 f0       	push   $0xf012ffbe
f0113da5:	e8 fc c3 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0113daa:	e8 01 78 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113daf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113db2:	3d 00 03 00 00       	cmp    $0x300,%eax
f0113db7:	74 17                	je     f0113dd0 <test_kmalloc_bestfit1+0xa1c>
f0113db9:	83 ec 04             	sub    $0x4,%esp
f0113dbc:	68 1b 04 13 f0       	push   $0xf013041b
f0113dc1:	68 d9 01 00 00       	push   $0x1d9
f0113dc6:	68 be ff 12 f0       	push   $0xf012ffbe
f0113dcb:	e8 d6 c3 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0113dd0:	e8 db 77 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113dd8:	e8 c7 f6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113ddd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0113de0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0113de6:	83 ec 0c             	sub    $0xc,%esp
f0113de9:	50                   	push   %eax
f0113dea:	e8 1f 2e ff ff       	call   f0106c0e <kfree>
f0113def:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113df2:	e8 ad f6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113df7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113dfa:	74 17                	je     f0113e13 <test_kmalloc_bestfit1+0xa5f>
f0113dfc:	83 ec 04             	sub    $0x4,%esp
f0113dff:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113e04:	68 df 01 00 00       	push   $0x1df
f0113e09:	68 be ff 12 f0       	push   $0xf012ffbe
f0113e0e:	e8 93 c3 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0113e13:	e8 98 77 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113e18:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113e1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113e20:	74 17                	je     f0113e39 <test_kmalloc_bestfit1+0xa85>
f0113e22:	83 ec 04             	sub    $0x4,%esp
f0113e25:	68 1b 04 13 f0       	push   $0xf013041b
f0113e2a:	68 e0 01 00 00       	push   $0x1e0
f0113e2f:	68 be ff 12 f0       	push   $0xf012ffbe
f0113e34:	e8 6d c3 fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0113e39:	e8 72 77 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113e3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113e41:	e8 5e f6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113e46:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f0113e49:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0113e4f:	83 ec 0c             	sub    $0xc,%esp
f0113e52:	50                   	push   %eax
f0113e53:	e8 b6 2d ff ff       	call   f0106c0e <kfree>
f0113e58:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113e5b:	e8 44 f6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113e60:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113e63:	74 17                	je     f0113e7c <test_kmalloc_bestfit1+0xac8>
f0113e65:	83 ec 04             	sub    $0x4,%esp
f0113e68:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113e6d:	68 e6 01 00 00       	push   $0x1e6
f0113e72:	68 be ff 12 f0       	push   $0xf012ffbe
f0113e77:	e8 2a c3 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0113e7c:	e8 2f 77 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113e81:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113e84:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113e89:	74 17                	je     f0113ea2 <test_kmalloc_bestfit1+0xaee>
f0113e8b:	83 ec 04             	sub    $0x4,%esp
f0113e8e:	68 1b 04 13 f0       	push   $0xf013041b
f0113e93:	68 e7 01 00 00       	push   $0x1e7
f0113e98:	68 be ff 12 f0       	push   $0xf012ffbe
f0113e9d:	e8 04 c3 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0113ea2:	e8 09 77 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113ea7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113eaa:	e8 f5 f5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113eaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f0113eb2:	83 ec 0c             	sub    $0xc,%esp
f0113eb5:	68 00 00 08 00       	push   $0x80000
f0113eba:	e8 35 2d ff ff       	call   f0106bf4 <kmalloc>
f0113ebf:	83 c4 10             	add    $0x10,%esp
f0113ec2:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0113ec8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0113ece:	89 c1                	mov    %eax,%ecx
f0113ed0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0113ed7:	10 00 00 
f0113eda:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113edf:	0f b6 d0             	movzbl %al,%edx
f0113ee2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0113ee8:	01 d0                	add    %edx,%eax
f0113eea:	48                   	dec    %eax
f0113eeb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0113ef1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0113ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0113efc:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0113f02:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0113f08:	29 d0                	sub    %edx,%eax
f0113f0a:	89 c3                	mov    %eax,%ebx
f0113f0c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0113f13:	10 00 00 
f0113f16:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0113f1b:	0f b6 c0             	movzbl %al,%eax
f0113f1e:	c1 e0 04             	shl    $0x4,%eax
f0113f21:	89 c2                	mov    %eax,%edx
f0113f23:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113f29:	01 d0                	add    %edx,%eax
f0113f2b:	48                   	dec    %eax
f0113f2c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0113f32:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0113f3d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0113f43:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113f49:	29 d0                	sub    %edx,%eax
f0113f4b:	01 c3                	add    %eax,%ebx
f0113f4d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0113f54:	10 00 00 
f0113f57:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113f5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0113f62:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0113f68:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113f6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113f73:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0113f79:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113f7f:	29 d0                	sub    %edx,%eax
f0113f81:	01 d8                	add    %ebx,%eax
f0113f83:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0113f88:	39 c1                	cmp    %eax,%ecx
f0113f8a:	74 17                	je     f0113fa3 <test_kmalloc_bestfit1+0xbef>
f0113f8c:	83 ec 04             	sub    $0x4,%esp
f0113f8f:	68 d8 03 13 f0       	push   $0xf01303d8
f0113f94:	68 f0 01 00 00       	push   $0x1f0
f0113f99:	68 be ff 12 f0       	push   $0xf012ffbe
f0113f9e:	e8 03 c2 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113fa3:	e8 fc f4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113fa8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113fab:	74 17                	je     f0113fc4 <test_kmalloc_bestfit1+0xc10>
f0113fad:	83 ec 04             	sub    $0x4,%esp
f0113fb0:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0113fb5:	68 f1 01 00 00       	push   $0x1f1
f0113fba:	68 be ff 12 f0       	push   $0xf012ffbe
f0113fbf:	e8 e2 c1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f0113fc4:	e8 e7 75 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113fc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113fcc:	29 c2                	sub    %eax,%edx
f0113fce:	89 d0                	mov    %edx,%eax
f0113fd0:	3d 80 00 00 00       	cmp    $0x80,%eax
f0113fd5:	74 17                	je     f0113fee <test_kmalloc_bestfit1+0xc3a>
f0113fd7:	83 ec 04             	sub    $0x4,%esp
f0113fda:	68 08 04 13 f0       	push   $0xf0130408
f0113fdf:	68 f2 01 00 00       	push   $0x1f2
f0113fe4:	68 be ff 12 f0       	push   $0xf012ffbe
f0113fe9:	e8 b8 c1 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0113fee:	e8 bd 75 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0113ff3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113ff6:	e8 a9 f4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0113ffb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0113ffe:	83 ec 0c             	sub    $0xc,%esp
f0114001:	68 00 fc 0f 00       	push   $0xffc00
f0114006:	e8 e9 2b ff ff       	call   f0106bf4 <kmalloc>
f011400b:	83 c4 10             	add    $0x10,%esp
f011400e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0114014:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011401a:	89 c1                	mov    %eax,%ecx
f011401c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0114023:	10 00 00 
f0114026:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011402b:	0f b6 d0             	movzbl %al,%edx
f011402e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0114034:	01 d0                	add    %edx,%eax
f0114036:	48                   	dec    %eax
f0114037:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011403d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114043:	ba 00 00 00 00       	mov    $0x0,%edx
f0114048:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011404e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114054:	29 d0                	sub    %edx,%eax
f0114056:	89 c3                	mov    %eax,%ebx
f0114058:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011405f:	10 00 00 
f0114062:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114067:	0f b6 c0             	movzbl %al,%eax
f011406a:	c1 e0 04             	shl    $0x4,%eax
f011406d:	89 c2                	mov    %eax,%edx
f011406f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0114075:	01 d0                	add    %edx,%eax
f0114077:	48                   	dec    %eax
f0114078:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011407e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0114084:	ba 00 00 00 00       	mov    $0x0,%edx
f0114089:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011408f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0114095:	29 d0                	sub    %edx,%eax
f0114097:	01 c3                	add    %eax,%ebx
f0114099:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01140a0:	10 00 00 
f01140a3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01140a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01140ae:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01140b4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01140ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01140bf:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01140c5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01140cb:	29 d0                	sub    %edx,%eax
f01140cd:	01 d8                	add    %ebx,%eax
f01140cf:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01140d4:	39 c1                	cmp    %eax,%ecx
f01140d6:	74 17                	je     f01140ef <test_kmalloc_bestfit1+0xd3b>
f01140d8:	83 ec 04             	sub    $0x4,%esp
f01140db:	68 d8 03 13 f0       	push   $0xf01303d8
f01140e0:	68 f8 01 00 00       	push   $0x1f8
f01140e5:	68 be ff 12 f0       	push   $0xf012ffbe
f01140ea:	e8 b7 c0 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01140ef:	e8 b0 f3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01140f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01140f7:	74 17                	je     f0114110 <test_kmalloc_bestfit1+0xd5c>
f01140f9:	83 ec 04             	sub    $0x4,%esp
f01140fc:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114101:	68 f9 01 00 00       	push   $0x1f9
f0114106:	68 be ff 12 f0       	push   $0xf012ffbe
f011410b:	e8 96 c0 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0114110:	e8 9b 74 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114115:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114118:	29 c2                	sub    %eax,%edx
f011411a:	89 d0                	mov    %edx,%eax
f011411c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0114121:	74 17                	je     f011413a <test_kmalloc_bestfit1+0xd86>
f0114123:	83 ec 04             	sub    $0x4,%esp
f0114126:	68 08 04 13 f0       	push   $0xf0130408
f011412b:	68 fa 01 00 00       	push   $0x1fa
f0114130:	68 be ff 12 f0       	push   $0xf012ffbe
f0114135:	e8 6c c0 fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011413a:	e8 71 74 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011413f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114142:	e8 5d f3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114147:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011414a:	83 ec 0c             	sub    $0xc,%esp
f011414d:	68 00 fc 03 00       	push   $0x3fc00
f0114152:	e8 9d 2a ff ff       	call   f0106bf4 <kmalloc>
f0114157:	83 c4 10             	add    $0x10,%esp
f011415a:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0114160:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0114166:	89 c1                	mov    %eax,%ecx
f0114168:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011416f:	10 00 00 
f0114172:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114177:	0f b6 d0             	movzbl %al,%edx
f011417a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114180:	01 d0                	add    %edx,%eax
f0114182:	48                   	dec    %eax
f0114183:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0114189:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011418f:	ba 00 00 00 00       	mov    $0x0,%edx
f0114194:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011419a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01141a0:	29 d0                	sub    %edx,%eax
f01141a2:	89 c3                	mov    %eax,%ebx
f01141a4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01141ab:	10 00 00 
f01141ae:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01141b3:	0f b6 c0             	movzbl %al,%eax
f01141b6:	c1 e0 04             	shl    $0x4,%eax
f01141b9:	89 c2                	mov    %eax,%edx
f01141bb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01141c1:	01 d0                	add    %edx,%eax
f01141c3:	48                   	dec    %eax
f01141c4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01141ca:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01141d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01141d5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01141db:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01141e1:	29 d0                	sub    %edx,%eax
f01141e3:	01 c3                	add    %eax,%ebx
f01141e5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01141ec:	10 00 00 
f01141ef:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01141f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01141fa:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0114200:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0114206:	ba 00 00 00 00       	mov    $0x0,%edx
f011420b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0114211:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0114217:	29 d0                	sub    %edx,%eax
f0114219:	01 d8                	add    %ebx,%eax
f011421b:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f0114220:	39 c1                	cmp    %eax,%ecx
f0114222:	74 17                	je     f011423b <test_kmalloc_bestfit1+0xe87>
f0114224:	83 ec 04             	sub    $0x4,%esp
f0114227:	68 d8 03 13 f0       	push   $0xf01303d8
f011422c:	68 00 02 00 00       	push   $0x200
f0114231:	68 be ff 12 f0       	push   $0xf012ffbe
f0114236:	e8 6b bf fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011423b:	e8 64 f2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114240:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0114243:	74 17                	je     f011425c <test_kmalloc_bestfit1+0xea8>
f0114245:	83 ec 04             	sub    $0x4,%esp
f0114248:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011424d:	68 01 02 00 00       	push   $0x201
f0114252:	68 be ff 12 f0       	push   $0xf012ffbe
f0114257:	e8 4a bf fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011425c:	e8 4f 73 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114261:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114264:	29 c2                	sub    %eax,%edx
f0114266:	89 d0                	mov    %edx,%eax
f0114268:	83 f8 40             	cmp    $0x40,%eax
f011426b:	74 17                	je     f0114284 <test_kmalloc_bestfit1+0xed0>
f011426d:	83 ec 04             	sub    $0x4,%esp
f0114270:	68 08 04 13 f0       	push   $0xf0130408
f0114275:	68 02 02 00 00       	push   $0x202
f011427a:	68 be ff 12 f0       	push   $0xf012ffbe
f011427f:	e8 22 bf fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0114284:	e8 27 73 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114289:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011428c:	e8 13 f2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114291:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f0114294:	83 ec 0c             	sub    $0xc,%esp
f0114297:	68 00 fc 3f 00       	push   $0x3ffc00
f011429c:	e8 53 29 ff ff       	call   f0106bf4 <kmalloc>
f01142a1:	83 c4 10             	add    $0x10,%esp
f01142a4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f01142aa:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01142b0:	89 c1                	mov    %eax,%ecx
f01142b2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01142b9:	10 00 00 
f01142bc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01142c1:	0f b6 d0             	movzbl %al,%edx
f01142c4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01142ca:	01 d0                	add    %edx,%eax
f01142cc:	48                   	dec    %eax
f01142cd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01142d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01142d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01142de:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01142e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01142ea:	29 d0                	sub    %edx,%eax
f01142ec:	89 c3                	mov    %eax,%ebx
f01142ee:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01142f5:	10 00 00 
f01142f8:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01142fd:	0f b6 c0             	movzbl %al,%eax
f0114300:	c1 e0 04             	shl    $0x4,%eax
f0114303:	89 c2                	mov    %eax,%edx
f0114305:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011430b:	01 d0                	add    %edx,%eax
f011430d:	48                   	dec    %eax
f011430e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0114314:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011431a:	ba 00 00 00 00       	mov    $0x0,%edx
f011431f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0114325:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011432b:	29 d0                	sub    %edx,%eax
f011432d:	01 c3                	add    %eax,%ebx
f011432f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0114336:	10 00 00 
f0114339:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011433f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0114344:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011434a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0114350:	ba 00 00 00 00       	mov    $0x0,%edx
f0114355:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011435b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0114361:	29 d0                	sub    %edx,%eax
f0114363:	01 d8                	add    %ebx,%eax
f0114365:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011436a:	39 c1                	cmp    %eax,%ecx
f011436c:	74 17                	je     f0114385 <test_kmalloc_bestfit1+0xfd1>
f011436e:	83 ec 04             	sub    $0x4,%esp
f0114371:	68 d8 03 13 f0       	push   $0xf01303d8
f0114376:	68 08 02 00 00       	push   $0x208
f011437b:	68 be ff 12 f0       	push   $0xf012ffbe
f0114380:	e8 21 be fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114385:	e8 1a f1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011438a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011438d:	74 17                	je     f01143a6 <test_kmalloc_bestfit1+0xff2>
f011438f:	83 ec 04             	sub    $0x4,%esp
f0114392:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114397:	68 09 02 00 00       	push   $0x209
f011439c:	68 be ff 12 f0       	push   $0xf012ffbe
f01143a1:	e8 00 be fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f01143a6:	e8 05 72 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01143ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01143ae:	29 c2                	sub    %eax,%edx
f01143b0:	89 d0                	mov    %edx,%eax
f01143b2:	3d 00 04 00 00       	cmp    $0x400,%eax
f01143b7:	74 17                	je     f01143d0 <test_kmalloc_bestfit1+0x101c>
f01143b9:	83 ec 04             	sub    $0x4,%esp
f01143bc:	68 08 04 13 f0       	push   $0xf0130408
f01143c1:	68 0a 02 00 00       	push   $0x20a
f01143c6:	68 be ff 12 f0       	push   $0xf012ffbe
f01143cb:	e8 d6 bd fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f01143d0:	e8 db 71 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01143d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01143d8:	e8 c7 f0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01143dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f01143e0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01143e6:	83 ec 0c             	sub    $0xc,%esp
f01143e9:	50                   	push   %eax
f01143ea:	e8 1f 28 ff ff       	call   f0106c0e <kfree>
f01143ef:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01143f2:	e8 ad f0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01143f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01143fa:	74 17                	je     f0114413 <test_kmalloc_bestfit1+0x105f>
f01143fc:	83 ec 04             	sub    $0x4,%esp
f01143ff:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114404:	68 13 02 00 00       	push   $0x213
f0114409:	68 be ff 12 f0       	push   $0xf012ffbe
f011440e:	e8 93 bd fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0114413:	e8 98 71 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114418:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011441b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0114420:	74 17                	je     f0114439 <test_kmalloc_bestfit1+0x1085>
f0114422:	83 ec 04             	sub    $0x4,%esp
f0114425:	68 1b 04 13 f0       	push   $0xf013041b
f011442a:	68 14 02 00 00       	push   $0x214
f011442f:	68 be ff 12 f0       	push   $0xf012ffbe
f0114434:	e8 6d bd fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f0114439:	e8 72 71 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011443e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114441:	e8 5e f0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114446:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f0114449:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011444f:	83 ec 0c             	sub    $0xc,%esp
f0114452:	50                   	push   %eax
f0114453:	e8 b6 27 ff ff       	call   f0106c0e <kfree>
f0114458:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011445b:	e8 44 f0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114460:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0114463:	74 17                	je     f011447c <test_kmalloc_bestfit1+0x10c8>
f0114465:	83 ec 04             	sub    $0x4,%esp
f0114468:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011446d:	68 1a 02 00 00       	push   $0x21a
f0114472:	68 be ff 12 f0       	push   $0xf012ffbe
f0114477:	e8 2a bd fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011447c:	e8 2f 71 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114481:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0114484:	3d 80 00 00 00       	cmp    $0x80,%eax
f0114489:	74 17                	je     f01144a2 <test_kmalloc_bestfit1+0x10ee>
f011448b:	83 ec 04             	sub    $0x4,%esp
f011448e:	68 1b 04 13 f0       	push   $0xf013041b
f0114493:	68 1b 02 00 00       	push   $0x21b
f0114498:	68 be ff 12 f0       	push   $0xf012ffbe
f011449d:	e8 04 bd fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f01144a2:	e8 09 71 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01144a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01144aa:	e8 f5 ef fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01144af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f01144b2:	83 ec 0c             	sub    $0xc,%esp
f01144b5:	68 00 fc 1f 00       	push   $0x1ffc00
f01144ba:	e8 35 27 ff ff       	call   f0106bf4 <kmalloc>
f01144bf:	83 c4 10             	add    $0x10,%esp
f01144c2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f01144c8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01144ce:	89 c1                	mov    %eax,%ecx
f01144d0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01144d7:	10 00 00 
f01144da:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01144df:	0f b6 d0             	movzbl %al,%edx
f01144e2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01144e8:	01 d0                	add    %edx,%eax
f01144ea:	48                   	dec    %eax
f01144eb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01144f1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01144f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01144fc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0114502:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0114508:	29 d0                	sub    %edx,%eax
f011450a:	89 c3                	mov    %eax,%ebx
f011450c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0114513:	10 00 00 
f0114516:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011451b:	0f b6 c0             	movzbl %al,%eax
f011451e:	c1 e0 04             	shl    $0x4,%eax
f0114521:	89 c2                	mov    %eax,%edx
f0114523:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114529:	01 d0                	add    %edx,%eax
f011452b:	48                   	dec    %eax
f011452c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0114532:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0114538:	ba 00 00 00 00       	mov    $0x0,%edx
f011453d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0114543:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0114549:	29 d0                	sub    %edx,%eax
f011454b:	01 c3                	add    %eax,%ebx
f011454d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0114554:	10 00 00 
f0114557:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011455d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0114562:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0114568:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011456e:	ba 00 00 00 00       	mov    $0x0,%edx
f0114573:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0114579:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011457f:	29 d0                	sub    %edx,%eax
f0114581:	01 d8                	add    %ebx,%eax
f0114583:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f0114588:	39 c1                	cmp    %eax,%ecx
f011458a:	74 17                	je     f01145a3 <test_kmalloc_bestfit1+0x11ef>
f011458c:	83 ec 04             	sub    $0x4,%esp
f011458f:	68 d8 03 13 f0       	push   $0xf01303d8
f0114594:	68 24 02 00 00       	push   $0x224
f0114599:	68 be ff 12 f0       	push   $0xf012ffbe
f011459e:	e8 03 bc fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01145a3:	e8 fc ee fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01145a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01145ab:	74 17                	je     f01145c4 <test_kmalloc_bestfit1+0x1210>
f01145ad:	83 ec 04             	sub    $0x4,%esp
f01145b0:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01145b5:	68 25 02 00 00       	push   $0x225
f01145ba:	68 be ff 12 f0       	push   $0xf012ffbe
f01145bf:	e8 e2 bb fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f01145c4:	e8 e7 6f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01145c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01145cc:	29 c2                	sub    %eax,%edx
f01145ce:	89 d0                	mov    %edx,%eax
f01145d0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01145d5:	74 17                	je     f01145ee <test_kmalloc_bestfit1+0x123a>
f01145d7:	83 ec 04             	sub    $0x4,%esp
f01145da:	68 08 04 13 f0       	push   $0xf0130408
f01145df:	68 26 02 00 00       	push   $0x226
f01145e4:	68 be ff 12 f0       	push   $0xf012ffbe
f01145e9:	e8 b8 bb fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f01145ee:	83 ec 0c             	sub    $0xc,%esp
f01145f1:	68 28 04 13 f0       	push   $0xf0130428
f01145f6:	e8 32 c6 fe ff       	call   f0100c2d <cprintf>
f01145fb:	83 c4 10             	add    $0x10,%esp

	return 1;
f01145fe:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0114603:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0114606:	5b                   	pop    %ebx
f0114607:	5f                   	pop    %edi
f0114608:	5d                   	pop    %ebp
f0114609:	c3                   	ret    

f011460a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011460a:	55                   	push   %ebp
f011460b:	89 e5                	mov    %esp,%ebp
f011460d:	57                   	push   %edi
f011460e:	53                   	push   %ebx
f011460f:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f0114615:	83 ec 0c             	sub    $0xc,%esp
f0114618:	68 00 ff 12 f0       	push   $0xf012ff00
f011461d:	e8 0b c6 fe ff       	call   f0100c2d <cprintf>
f0114622:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0114625:	83 ec 0c             	sub    $0xc,%esp
f0114628:	68 30 ff 12 f0       	push   $0xf012ff30
f011462d:	e8 fb c5 fe ff       	call   f0100c2d <cprintf>
f0114632:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0114635:	83 ec 0c             	sub    $0xc,%esp
f0114638:	68 00 ff 12 f0       	push   $0xf012ff00
f011463d:	e8 eb c5 fe ff       	call   f0100c2d <cprintf>
f0114642:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0114645:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011464b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114650:	b8 00 00 00 00       	mov    $0x0,%eax
f0114655:	89 d7                	mov    %edx,%edi
f0114657:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0114659:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0114660:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114665:	0f b6 d0             	movzbl %al,%edx
f0114668:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011466b:	01 d0                	add    %edx,%eax
f011466d:	48                   	dec    %eax
f011466e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114671:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114674:	ba 00 00 00 00       	mov    $0x0,%edx
f0114679:	f7 75 f4             	divl   -0xc(%ebp)
f011467c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011467f:	29 d0                	sub    %edx,%eax
f0114681:	89 c1                	mov    %eax,%ecx
f0114683:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011468a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011468f:	0f b6 c0             	movzbl %al,%eax
f0114692:	c1 e0 04             	shl    $0x4,%eax
f0114695:	89 c2                	mov    %eax,%edx
f0114697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011469a:	01 d0                	add    %edx,%eax
f011469c:	48                   	dec    %eax
f011469d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01146a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01146a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01146a8:	f7 75 ec             	divl   -0x14(%ebp)
f01146ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01146ae:	29 d0                	sub    %edx,%eax
f01146b0:	01 c1                	add    %eax,%ecx
f01146b2:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01146b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01146bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01146c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01146c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01146c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01146cc:	f7 75 e4             	divl   -0x1c(%ebp)
f01146cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01146d2:	29 d0                	sub    %edx,%eax
f01146d4:	01 c8                	add    %ecx,%eax
f01146d6:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01146db:	29 c2                	sub    %eax,%edx
f01146dd:	89 d0                	mov    %edx,%eax
f01146df:	83 ec 0c             	sub    $0xc,%esp
f01146e2:	50                   	push   %eax
f01146e3:	e8 0c 25 ff ff       	call   f0106bf4 <kmalloc>
f01146e8:	83 c4 10             	add    $0x10,%esp
f01146eb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f01146f1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01146f7:	85 c0                	test   %eax,%eax
f01146f9:	74 17                	je     f0114712 <test_kmalloc_bestfit2+0x108>
f01146fb:	83 ec 04             	sub    $0x4,%esp
f01146fe:	68 70 04 13 f0       	push   $0xf0130470
f0114703:	68 3c 02 00 00       	push   $0x23c
f0114708:	68 be ff 12 f0       	push   $0xf012ffbe
f011470d:	e8 94 ba fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114712:	e8 99 6e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114717:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011471a:	e8 85 ed fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011471f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0114722:	83 ec 0c             	sub    $0xc,%esp
f0114725:	68 00 fc 1f 00       	push   $0x1ffc00
f011472a:	e8 c5 24 ff ff       	call   f0106bf4 <kmalloc>
f011472f:	83 c4 10             	add    $0x10,%esp
f0114732:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0114738:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011473e:	89 c1                	mov    %eax,%ecx
f0114740:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0114747:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011474c:	0f b6 d0             	movzbl %al,%edx
f011474f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114752:	01 d0                	add    %edx,%eax
f0114754:	48                   	dec    %eax
f0114755:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114758:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011475b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114760:	f7 75 d4             	divl   -0x2c(%ebp)
f0114763:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114766:	29 d0                	sub    %edx,%eax
f0114768:	89 c3                	mov    %eax,%ebx
f011476a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0114771:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114776:	0f b6 c0             	movzbl %al,%eax
f0114779:	c1 e0 04             	shl    $0x4,%eax
f011477c:	89 c2                	mov    %eax,%edx
f011477e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114781:	01 d0                	add    %edx,%eax
f0114783:	48                   	dec    %eax
f0114784:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114787:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011478a:	ba 00 00 00 00       	mov    $0x0,%edx
f011478f:	f7 75 cc             	divl   -0x34(%ebp)
f0114792:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114795:	29 d0                	sub    %edx,%eax
f0114797:	01 c3                	add    %eax,%ebx
f0114799:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01147a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01147a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01147ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01147b3:	f7 75 c4             	divl   -0x3c(%ebp)
f01147b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147b9:	29 d0                	sub    %edx,%eax
f01147bb:	01 d8                	add    %ebx,%eax
f01147bd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01147c2:	39 c1                	cmp    %eax,%ecx
f01147c4:	74 17                	je     f01147dd <test_kmalloc_bestfit2+0x1d3>
f01147c6:	83 ec 04             	sub    $0x4,%esp
f01147c9:	68 d8 03 13 f0       	push   $0xf01303d8
f01147ce:	68 46 02 00 00       	push   $0x246
f01147d3:	68 be ff 12 f0       	push   $0xf012ffbe
f01147d8:	e8 c9 b9 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01147dd:	e8 c2 ec fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01147e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01147e5:	74 17                	je     f01147fe <test_kmalloc_bestfit2+0x1f4>
f01147e7:	83 ec 04             	sub    $0x4,%esp
f01147ea:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01147ef:	68 47 02 00 00       	push   $0x247
f01147f4:	68 be ff 12 f0       	push   $0xf012ffbe
f01147f9:	e8 a8 b9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f01147fe:	e8 ad 6d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114803:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114806:	29 c2                	sub    %eax,%edx
f0114808:	89 d0                	mov    %edx,%eax
f011480a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011480f:	74 17                	je     f0114828 <test_kmalloc_bestfit2+0x21e>
f0114811:	83 ec 04             	sub    $0x4,%esp
f0114814:	68 08 04 13 f0       	push   $0xf0130408
f0114819:	68 48 02 00 00       	push   $0x248
f011481e:	68 be ff 12 f0       	push   $0xf012ffbe
f0114823:	e8 7e b9 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114828:	e8 83 6d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011482d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114830:	e8 6f ec fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114835:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0114838:	83 ec 0c             	sub    $0xc,%esp
f011483b:	68 00 fc 1f 00       	push   $0x1ffc00
f0114840:	e8 af 23 ff ff       	call   f0106bf4 <kmalloc>
f0114845:	83 c4 10             	add    $0x10,%esp
f0114848:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011484e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0114854:	89 c1                	mov    %eax,%ecx
f0114856:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011485d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114862:	0f b6 d0             	movzbl %al,%edx
f0114865:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114868:	01 d0                	add    %edx,%eax
f011486a:	48                   	dec    %eax
f011486b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011486e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114871:	ba 00 00 00 00       	mov    $0x0,%edx
f0114876:	f7 75 bc             	divl   -0x44(%ebp)
f0114879:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011487c:	29 d0                	sub    %edx,%eax
f011487e:	89 c3                	mov    %eax,%ebx
f0114880:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0114887:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011488c:	0f b6 c0             	movzbl %al,%eax
f011488f:	c1 e0 04             	shl    $0x4,%eax
f0114892:	89 c2                	mov    %eax,%edx
f0114894:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114897:	01 d0                	add    %edx,%eax
f0114899:	48                   	dec    %eax
f011489a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011489d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01148a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01148a5:	f7 75 b4             	divl   -0x4c(%ebp)
f01148a8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01148ab:	29 d0                	sub    %edx,%eax
f01148ad:	01 c3                	add    %eax,%ebx
f01148af:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01148b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01148b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01148be:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01148c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01148c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01148c9:	f7 75 ac             	divl   -0x54(%ebp)
f01148cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01148cf:	29 d0                	sub    %edx,%eax
f01148d1:	01 d8                	add    %ebx,%eax
f01148d3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01148d8:	39 c1                	cmp    %eax,%ecx
f01148da:	74 17                	je     f01148f3 <test_kmalloc_bestfit2+0x2e9>
f01148dc:	83 ec 04             	sub    $0x4,%esp
f01148df:	68 d8 03 13 f0       	push   $0xf01303d8
f01148e4:	68 4e 02 00 00       	push   $0x24e
f01148e9:	68 be ff 12 f0       	push   $0xf012ffbe
f01148ee:	e8 b3 b8 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01148f3:	e8 ac eb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01148f8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01148fb:	74 17                	je     f0114914 <test_kmalloc_bestfit2+0x30a>
f01148fd:	83 ec 04             	sub    $0x4,%esp
f0114900:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114905:	68 4f 02 00 00       	push   $0x24f
f011490a:	68 be ff 12 f0       	push   $0xf012ffbe
f011490f:	e8 92 b8 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f0114914:	e8 97 6c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114919:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011491c:	29 c2                	sub    %eax,%edx
f011491e:	89 d0                	mov    %edx,%eax
f0114920:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114925:	74 17                	je     f011493e <test_kmalloc_bestfit2+0x334>
f0114927:	83 ec 04             	sub    $0x4,%esp
f011492a:	68 08 04 13 f0       	push   $0xf0130408
f011492f:	68 50 02 00 00       	push   $0x250
f0114934:	68 be ff 12 f0       	push   $0xf012ffbe
f0114939:	e8 68 b8 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011493e:	e8 6d 6c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114943:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114946:	e8 59 eb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011494b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011494e:	83 ec 0c             	sub    $0xc,%esp
f0114951:	68 00 08 00 00       	push   $0x800
f0114956:	e8 99 22 ff ff       	call   f0106bf4 <kmalloc>
f011495b:	83 c4 10             	add    $0x10,%esp
f011495e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0114964:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011496a:	89 c1                	mov    %eax,%ecx
f011496c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114973:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114978:	0f b6 d0             	movzbl %al,%edx
f011497b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011497e:	01 d0                	add    %edx,%eax
f0114980:	48                   	dec    %eax
f0114981:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0114984:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114987:	ba 00 00 00 00       	mov    $0x0,%edx
f011498c:	f7 75 a4             	divl   -0x5c(%ebp)
f011498f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114992:	29 d0                	sub    %edx,%eax
f0114994:	89 c3                	mov    %eax,%ebx
f0114996:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011499d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01149a2:	0f b6 c0             	movzbl %al,%eax
f01149a5:	c1 e0 04             	shl    $0x4,%eax
f01149a8:	89 c2                	mov    %eax,%edx
f01149aa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01149ad:	01 d0                	add    %edx,%eax
f01149af:	48                   	dec    %eax
f01149b0:	89 45 98             	mov    %eax,-0x68(%ebp)
f01149b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01149b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01149bb:	f7 75 9c             	divl   -0x64(%ebp)
f01149be:	8b 45 98             	mov    -0x68(%ebp),%eax
f01149c1:	29 d0                	sub    %edx,%eax
f01149c3:	01 c3                	add    %eax,%ebx
f01149c5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01149cc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01149cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01149d4:	89 45 90             	mov    %eax,-0x70(%ebp)
f01149d7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01149da:	ba 00 00 00 00       	mov    $0x0,%edx
f01149df:	f7 75 94             	divl   -0x6c(%ebp)
f01149e2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01149e5:	29 d0                	sub    %edx,%eax
f01149e7:	01 d8                	add    %ebx,%eax
f01149e9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01149ee:	39 c1                	cmp    %eax,%ecx
f01149f0:	74 17                	je     f0114a09 <test_kmalloc_bestfit2+0x3ff>
f01149f2:	83 ec 04             	sub    $0x4,%esp
f01149f5:	68 d8 03 13 f0       	push   $0xf01303d8
f01149fa:	68 56 02 00 00       	push   $0x256
f01149ff:	68 be ff 12 f0       	push   $0xf012ffbe
f0114a04:	e8 9d b7 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114a09:	e8 96 ea fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114a0e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114a11:	74 17                	je     f0114a2a <test_kmalloc_bestfit2+0x420>
f0114a13:	83 ec 04             	sub    $0x4,%esp
f0114a16:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114a1b:	68 57 02 00 00       	push   $0x257
f0114a20:	68 be ff 12 f0       	push   $0xf012ffbe
f0114a25:	e8 7c b7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f0114a2a:	e8 81 6b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114a2f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114a32:	29 c2                	sub    %eax,%edx
f0114a34:	89 d0                	mov    %edx,%eax
f0114a36:	83 f8 01             	cmp    $0x1,%eax
f0114a39:	74 17                	je     f0114a52 <test_kmalloc_bestfit2+0x448>
f0114a3b:	83 ec 04             	sub    $0x4,%esp
f0114a3e:	68 08 04 13 f0       	push   $0xf0130408
f0114a43:	68 58 02 00 00       	push   $0x258
f0114a48:	68 be ff 12 f0       	push   $0xf012ffbe
f0114a4d:	e8 54 b7 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0114a52:	e8 59 6b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114a57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114a5a:	e8 45 ea fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114a5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0114a62:	83 ec 0c             	sub    $0xc,%esp
f0114a65:	68 00 08 00 00       	push   $0x800
f0114a6a:	e8 85 21 ff ff       	call   f0106bf4 <kmalloc>
f0114a6f:	83 c4 10             	add    $0x10,%esp
f0114a72:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f0114a78:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0114a7e:	89 c1                	mov    %eax,%ecx
f0114a80:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0114a87:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114a8c:	0f b6 d0             	movzbl %al,%edx
f0114a8f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114a92:	01 d0                	add    %edx,%eax
f0114a94:	48                   	dec    %eax
f0114a95:	89 45 88             	mov    %eax,-0x78(%ebp)
f0114a98:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114aa0:	f7 75 8c             	divl   -0x74(%ebp)
f0114aa3:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114aa6:	29 d0                	sub    %edx,%eax
f0114aa8:	89 c3                	mov    %eax,%ebx
f0114aaa:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0114ab1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114ab6:	0f b6 c0             	movzbl %al,%eax
f0114ab9:	c1 e0 04             	shl    $0x4,%eax
f0114abc:	89 c2                	mov    %eax,%edx
f0114abe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114ac1:	01 d0                	add    %edx,%eax
f0114ac3:	48                   	dec    %eax
f0114ac4:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114ac7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114aca:	ba 00 00 00 00       	mov    $0x0,%edx
f0114acf:	f7 75 84             	divl   -0x7c(%ebp)
f0114ad2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114ad5:	29 d0                	sub    %edx,%eax
f0114ad7:	01 c3                	add    %eax,%ebx
f0114ad9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0114ae0:	10 00 00 
f0114ae3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0114ae9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0114aee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0114af4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114afa:	ba 00 00 00 00       	mov    $0x0,%edx
f0114aff:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0114b05:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114b0b:	29 d0                	sub    %edx,%eax
f0114b0d:	01 d8                	add    %ebx,%eax
f0114b0f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0114b14:	39 c1                	cmp    %eax,%ecx
f0114b16:	74 17                	je     f0114b2f <test_kmalloc_bestfit2+0x525>
f0114b18:	83 ec 04             	sub    $0x4,%esp
f0114b1b:	68 d8 03 13 f0       	push   $0xf01303d8
f0114b20:	68 5e 02 00 00       	push   $0x25e
f0114b25:	68 be ff 12 f0       	push   $0xf012ffbe
f0114b2a:	e8 77 b6 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114b2f:	e8 70 e9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114b34:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114b37:	74 17                	je     f0114b50 <test_kmalloc_bestfit2+0x546>
f0114b39:	83 ec 04             	sub    $0x4,%esp
f0114b3c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114b41:	68 5f 02 00 00       	push   $0x25f
f0114b46:	68 be ff 12 f0       	push   $0xf012ffbe
f0114b4b:	e8 56 b6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f0114b50:	e8 5b 6a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114b55:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114b58:	29 c2                	sub    %eax,%edx
f0114b5a:	89 d0                	mov    %edx,%eax
f0114b5c:	83 f8 01             	cmp    $0x1,%eax
f0114b5f:	74 17                	je     f0114b78 <test_kmalloc_bestfit2+0x56e>
f0114b61:	83 ec 04             	sub    $0x4,%esp
f0114b64:	68 08 04 13 f0       	push   $0xf0130408
f0114b69:	68 60 02 00 00       	push   $0x260
f0114b6e:	68 be ff 12 f0       	push   $0xf012ffbe
f0114b73:	e8 2e b6 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0114b78:	e8 33 6a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114b7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114b80:	e8 1f e9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114b85:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f0114b88:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0114b8e:	83 ec 0c             	sub    $0xc,%esp
f0114b91:	50                   	push   %eax
f0114b92:	e8 77 20 ff ff       	call   f0106c0e <kfree>
f0114b97:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114b9a:	e8 05 e9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114b9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114ba2:	74 17                	je     f0114bbb <test_kmalloc_bestfit2+0x5b1>
f0114ba4:	83 ec 04             	sub    $0x4,%esp
f0114ba7:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114bac:	68 66 02 00 00       	push   $0x266
f0114bb1:	68 be ff 12 f0       	push   $0xf012ffbe
f0114bb6:	e8 eb b5 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f0114bbb:	e8 f0 69 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114bc0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f0114bc3:	83 f8 01             	cmp    $0x1,%eax
f0114bc6:	74 17                	je     f0114bdf <test_kmalloc_bestfit2+0x5d5>
f0114bc8:	83 ec 04             	sub    $0x4,%esp
f0114bcb:	68 08 04 13 f0       	push   $0xf0130408
f0114bd0:	68 67 02 00 00       	push   $0x267
f0114bd5:	68 be ff 12 f0       	push   $0xf012ffbe
f0114bda:	e8 c7 b5 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0114bdf:	e8 cc 69 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114be4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114be7:	e8 b8 e8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114bec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0114bef:	83 ec 0c             	sub    $0xc,%esp
f0114bf2:	68 00 1c 00 00       	push   $0x1c00
f0114bf7:	e8 f8 1f ff ff       	call   f0106bf4 <kmalloc>
f0114bfc:	83 c4 10             	add    $0x10,%esp
f0114bff:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f0114c05:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0114c0b:	89 c1                	mov    %eax,%ecx
f0114c0d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0114c14:	10 00 00 
f0114c17:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114c1c:	0f b6 d0             	movzbl %al,%edx
f0114c1f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114c25:	01 d0                	add    %edx,%eax
f0114c27:	48                   	dec    %eax
f0114c28:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0114c2e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114c34:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c39:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0114c3f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114c45:	29 d0                	sub    %edx,%eax
f0114c47:	89 c3                	mov    %eax,%ebx
f0114c49:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0114c50:	10 00 00 
f0114c53:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114c58:	0f b6 c0             	movzbl %al,%eax
f0114c5b:	c1 e0 04             	shl    $0x4,%eax
f0114c5e:	89 c2                	mov    %eax,%edx
f0114c60:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0114c66:	01 d0                	add    %edx,%eax
f0114c68:	48                   	dec    %eax
f0114c69:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0114c6f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114c75:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c7a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0114c80:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114c86:	29 d0                	sub    %edx,%eax
f0114c88:	01 c3                	add    %eax,%ebx
f0114c8a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0114c91:	10 00 00 
f0114c94:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0114c9a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0114c9f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0114ca5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114cab:	ba 00 00 00 00       	mov    $0x0,%edx
f0114cb0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0114cb6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114cbc:	29 d0                	sub    %edx,%eax
f0114cbe:	01 d8                	add    %ebx,%eax
f0114cc0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0114cc5:	39 c1                	cmp    %eax,%ecx
f0114cc7:	74 17                	je     f0114ce0 <test_kmalloc_bestfit2+0x6d6>
f0114cc9:	83 ec 04             	sub    $0x4,%esp
f0114ccc:	68 d8 03 13 f0       	push   $0xf01303d8
f0114cd1:	68 6d 02 00 00       	push   $0x26d
f0114cd6:	68 be ff 12 f0       	push   $0xf012ffbe
f0114cdb:	e8 c6 b4 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114ce0:	e8 bf e7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114ce5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114ce8:	74 17                	je     f0114d01 <test_kmalloc_bestfit2+0x6f7>
f0114cea:	83 ec 04             	sub    $0x4,%esp
f0114ced:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114cf2:	68 6e 02 00 00       	push   $0x26e
f0114cf7:	68 be ff 12 f0       	push   $0xf012ffbe
f0114cfc:	e8 a5 b4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f0114d01:	e8 aa 68 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114d06:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114d09:	29 c2                	sub    %eax,%edx
f0114d0b:	89 d0                	mov    %edx,%eax
f0114d0d:	83 f8 02             	cmp    $0x2,%eax
f0114d10:	74 17                	je     f0114d29 <test_kmalloc_bestfit2+0x71f>
f0114d12:	83 ec 04             	sub    $0x4,%esp
f0114d15:	68 08 04 13 f0       	push   $0xf0130408
f0114d1a:	68 6f 02 00 00       	push   $0x26f
f0114d1f:	68 be ff 12 f0       	push   $0xf012ffbe
f0114d24:	e8 7d b4 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0114d29:	e8 82 68 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114d2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114d31:	e8 6e e7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114d36:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f0114d39:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0114d3f:	83 ec 0c             	sub    $0xc,%esp
f0114d42:	50                   	push   %eax
f0114d43:	e8 c6 1e ff ff       	call   f0106c0e <kfree>
f0114d48:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114d4b:	e8 54 e7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114d50:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114d53:	74 17                	je     f0114d6c <test_kmalloc_bestfit2+0x762>
f0114d55:	83 ec 04             	sub    $0x4,%esp
f0114d58:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114d5d:	68 75 02 00 00       	push   $0x275
f0114d62:	68 be ff 12 f0       	push   $0xf012ffbe
f0114d67:	e8 3a b4 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f0114d6c:	e8 3f 68 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114d71:	2b 45 dc             	sub    -0x24(%ebp),%eax
f0114d74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114d79:	74 17                	je     f0114d92 <test_kmalloc_bestfit2+0x788>
f0114d7b:	83 ec 04             	sub    $0x4,%esp
f0114d7e:	68 8c 02 13 f0       	push   $0xf013028c
f0114d83:	68 76 02 00 00       	push   $0x276
f0114d88:	68 be ff 12 f0       	push   $0xf012ffbe
f0114d8d:	e8 14 b4 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0114d92:	e8 19 68 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114d97:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114d9a:	e8 05 e7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114d9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0114da2:	83 ec 0c             	sub    $0xc,%esp
f0114da5:	68 00 fc 2f 00       	push   $0x2ffc00
f0114daa:	e8 45 1e ff ff       	call   f0106bf4 <kmalloc>
f0114daf:	83 c4 10             	add    $0x10,%esp
f0114db2:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0114db8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0114dbe:	89 c1                	mov    %eax,%ecx
f0114dc0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0114dc7:	10 00 00 
f0114dca:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114dcf:	0f b6 d0             	movzbl %al,%edx
f0114dd2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0114dd8:	01 d0                	add    %edx,%eax
f0114dda:	48                   	dec    %eax
f0114ddb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0114de1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114de7:	ba 00 00 00 00       	mov    $0x0,%edx
f0114dec:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0114df2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114df8:	29 d0                	sub    %edx,%eax
f0114dfa:	89 c3                	mov    %eax,%ebx
f0114dfc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0114e03:	10 00 00 
f0114e06:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114e0b:	0f b6 c0             	movzbl %al,%eax
f0114e0e:	c1 e0 04             	shl    $0x4,%eax
f0114e11:	89 c2                	mov    %eax,%edx
f0114e13:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0114e19:	01 d0                	add    %edx,%eax
f0114e1b:	48                   	dec    %eax
f0114e1c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0114e22:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114e28:	ba 00 00 00 00       	mov    $0x0,%edx
f0114e2d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0114e33:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114e39:	29 d0                	sub    %edx,%eax
f0114e3b:	01 c3                	add    %eax,%ebx
f0114e3d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0114e44:	10 00 00 
f0114e47:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0114e4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0114e52:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0114e58:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114e5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0114e63:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0114e69:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114e6f:	29 d0                	sub    %edx,%eax
f0114e71:	01 d8                	add    %ebx,%eax
f0114e73:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0114e78:	39 c1                	cmp    %eax,%ecx
f0114e7a:	74 17                	je     f0114e93 <test_kmalloc_bestfit2+0x889>
f0114e7c:	83 ec 04             	sub    $0x4,%esp
f0114e7f:	68 d8 03 13 f0       	push   $0xf01303d8
f0114e84:	68 7c 02 00 00       	push   $0x27c
f0114e89:	68 be ff 12 f0       	push   $0xf012ffbe
f0114e8e:	e8 13 b3 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e93:	e8 0c e6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114e98:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114e9b:	74 17                	je     f0114eb4 <test_kmalloc_bestfit2+0x8aa>
f0114e9d:	83 ec 04             	sub    $0x4,%esp
f0114ea0:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114ea5:	68 7d 02 00 00       	push   $0x27d
f0114eaa:	68 be ff 12 f0       	push   $0xf012ffbe
f0114eaf:	e8 f2 b2 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f0114eb4:	e8 f7 66 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114eb9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0114ebc:	29 c2                	sub    %eax,%edx
f0114ebe:	89 d0                	mov    %edx,%eax
f0114ec0:	3d 00 03 00 00       	cmp    $0x300,%eax
f0114ec5:	74 17                	je     f0114ede <test_kmalloc_bestfit2+0x8d4>
f0114ec7:	83 ec 04             	sub    $0x4,%esp
f0114eca:	68 08 04 13 f0       	push   $0xf0130408
f0114ecf:	68 7e 02 00 00       	push   $0x27e
f0114ed4:	68 be ff 12 f0       	push   $0xf012ffbe
f0114ed9:	e8 c8 b2 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0114ede:	e8 cd 66 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0114ee3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0114ee6:	e8 b9 e5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114eeb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0114eee:	83 ec 0c             	sub    $0xc,%esp
f0114ef1:	68 00 18 20 00       	push   $0x201800
f0114ef6:	e8 f9 1c ff ff       	call   f0106bf4 <kmalloc>
f0114efb:	83 c4 10             	add    $0x10,%esp
f0114efe:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0114f04:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0114f0a:	89 c1                	mov    %eax,%ecx
f0114f0c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0114f13:	10 00 00 
f0114f16:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114f1b:	0f b6 d0             	movzbl %al,%edx
f0114f1e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114f24:	01 d0                	add    %edx,%eax
f0114f26:	48                   	dec    %eax
f0114f27:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0114f2d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114f33:	ba 00 00 00 00       	mov    $0x0,%edx
f0114f38:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0114f3e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114f44:	29 d0                	sub    %edx,%eax
f0114f46:	89 c3                	mov    %eax,%ebx
f0114f48:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0114f4f:	10 00 00 
f0114f52:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0114f57:	0f b6 c0             	movzbl %al,%eax
f0114f5a:	c1 e0 04             	shl    $0x4,%eax
f0114f5d:	89 c2                	mov    %eax,%edx
f0114f5f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0114f65:	01 d0                	add    %edx,%eax
f0114f67:	48                   	dec    %eax
f0114f68:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0114f6e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114f74:	ba 00 00 00 00       	mov    $0x0,%edx
f0114f79:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0114f7f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114f85:	29 d0                	sub    %edx,%eax
f0114f87:	01 c3                	add    %eax,%ebx
f0114f89:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0114f90:	10 00 00 
f0114f93:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0114f99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0114f9e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0114fa4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114faa:	ba 00 00 00 00       	mov    $0x0,%edx
f0114faf:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0114fb5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0114fbb:	29 d0                	sub    %edx,%eax
f0114fbd:	01 d8                	add    %ebx,%eax
f0114fbf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0114fc4:	39 c1                	cmp    %eax,%ecx
f0114fc6:	74 17                	je     f0114fdf <test_kmalloc_bestfit2+0x9d5>
f0114fc8:	83 ec 04             	sub    $0x4,%esp
f0114fcb:	68 d8 03 13 f0       	push   $0xf01303d8
f0114fd0:	68 84 02 00 00       	push   $0x284
f0114fd5:	68 be ff 12 f0       	push   $0xf012ffbe
f0114fda:	e8 c7 b1 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114fdf:	e8 c0 e4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0114fe4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0114fe7:	74 17                	je     f0115000 <test_kmalloc_bestfit2+0x9f6>
f0114fe9:	83 ec 04             	sub    $0x4,%esp
f0114fec:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0114ff1:	68 85 02 00 00       	push   $0x285
f0114ff6:	68 be ff 12 f0       	push   $0xf012ffbe
f0114ffb:	e8 a6 b1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f0115000:	e8 ab 65 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115005:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115008:	29 c2                	sub    %eax,%edx
f011500a:	89 d0                	mov    %edx,%eax
f011500c:	3d 02 02 00 00       	cmp    $0x202,%eax
f0115011:	74 17                	je     f011502a <test_kmalloc_bestfit2+0xa20>
f0115013:	83 ec 04             	sub    $0x4,%esp
f0115016:	68 08 04 13 f0       	push   $0xf0130408
f011501b:	68 86 02 00 00       	push   $0x286
f0115020:	68 be ff 12 f0       	push   $0xf012ffbe
f0115025:	e8 7c b1 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011502a:	e8 81 65 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011502f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0115032:	e8 6d e4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115037:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011503a:	83 ec 0c             	sub    $0xc,%esp
f011503d:	68 00 fc 4f 00       	push   $0x4ffc00
f0115042:	e8 ad 1b ff ff       	call   f0106bf4 <kmalloc>
f0115047:	83 c4 10             	add    $0x10,%esp
f011504a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f0115050:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0115056:	89 c1                	mov    %eax,%ecx
f0115058:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011505f:	10 00 00 
f0115062:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115067:	0f b6 d0             	movzbl %al,%edx
f011506a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0115070:	01 d0                	add    %edx,%eax
f0115072:	48                   	dec    %eax
f0115073:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0115079:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011507f:	ba 00 00 00 00       	mov    $0x0,%edx
f0115084:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011508a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0115090:	29 d0                	sub    %edx,%eax
f0115092:	89 c3                	mov    %eax,%ebx
f0115094:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011509b:	10 00 00 
f011509e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01150a3:	0f b6 c0             	movzbl %al,%eax
f01150a6:	c1 e0 04             	shl    $0x4,%eax
f01150a9:	89 c2                	mov    %eax,%edx
f01150ab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150b1:	01 d0                	add    %edx,%eax
f01150b3:	48                   	dec    %eax
f01150b4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01150ba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01150c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01150c5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01150cb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01150d1:	29 d0                	sub    %edx,%eax
f01150d3:	01 c3                	add    %eax,%ebx
f01150d5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01150dc:	10 00 00 
f01150df:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01150e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01150ea:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01150f0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01150f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01150fb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0115101:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0115107:	29 d0                	sub    %edx,%eax
f0115109:	01 d8                	add    %ebx,%eax
f011510b:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0115110:	39 c1                	cmp    %eax,%ecx
f0115112:	74 17                	je     f011512b <test_kmalloc_bestfit2+0xb21>
f0115114:	83 ec 04             	sub    $0x4,%esp
f0115117:	68 d8 03 13 f0       	push   $0xf01303d8
f011511c:	68 8c 02 00 00       	push   $0x28c
f0115121:	68 be ff 12 f0       	push   $0xf012ffbe
f0115126:	e8 7b b0 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011512b:	e8 74 e3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115130:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0115133:	74 17                	je     f011514c <test_kmalloc_bestfit2+0xb42>
f0115135:	83 ec 04             	sub    $0x4,%esp
f0115138:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011513d:	68 8d 02 00 00       	push   $0x28d
f0115142:	68 be ff 12 f0       	push   $0xf012ffbe
f0115147:	e8 5a b0 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011514c:	e8 5f 64 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115151:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115154:	29 c2                	sub    %eax,%edx
f0115156:	89 d0                	mov    %edx,%eax
f0115158:	3d 00 05 00 00       	cmp    $0x500,%eax
f011515d:	74 17                	je     f0115176 <test_kmalloc_bestfit2+0xb6c>
f011515f:	83 ec 04             	sub    $0x4,%esp
f0115162:	68 08 04 13 f0       	push   $0xf0130408
f0115167:	68 8e 02 00 00       	push   $0x28e
f011516c:	68 be ff 12 f0       	push   $0xf012ffbe
f0115171:	e8 30 b0 fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0115176:	e8 35 64 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011517b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011517e:	e8 21 e3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115183:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0115186:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011518c:	83 ec 0c             	sub    $0xc,%esp
f011518f:	50                   	push   %eax
f0115190:	e8 79 1a ff ff       	call   f0106c0e <kfree>
f0115195:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115198:	e8 07 e3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011519d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01151a0:	74 17                	je     f01151b9 <test_kmalloc_bestfit2+0xbaf>
f01151a2:	83 ec 04             	sub    $0x4,%esp
f01151a5:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01151aa:	68 94 02 00 00       	push   $0x294
f01151af:	68 be ff 12 f0       	push   $0xf012ffbe
f01151b4:	e8 ed af fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f01151b9:	e8 f2 63 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01151be:	2b 45 dc             	sub    -0x24(%ebp),%eax
f01151c1:	3d 02 02 00 00       	cmp    $0x202,%eax
f01151c6:	74 17                	je     f01151df <test_kmalloc_bestfit2+0xbd5>
f01151c8:	83 ec 04             	sub    $0x4,%esp
f01151cb:	68 8c 02 13 f0       	push   $0xf013028c
f01151d0:	68 95 02 00 00       	push   $0x295
f01151d5:	68 be ff 12 f0       	push   $0xf012ffbe
f01151da:	e8 c7 af fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01151df:	e8 cc 63 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01151e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01151e7:	e8 b8 e2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01151ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f01151ef:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01151f5:	83 ec 0c             	sub    $0xc,%esp
f01151f8:	50                   	push   %eax
f01151f9:	e8 10 1a ff ff       	call   f0106c0e <kfree>
f01151fe:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115201:	e8 9e e2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115206:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0115209:	74 17                	je     f0115222 <test_kmalloc_bestfit2+0xc18>
f011520b:	83 ec 04             	sub    $0x4,%esp
f011520e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115213:	68 9b 02 00 00       	push   $0x29b
f0115218:	68 be ff 12 f0       	push   $0xf012ffbe
f011521d:	e8 84 af fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f0115222:	e8 89 63 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115227:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011522a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011522f:	74 17                	je     f0115248 <test_kmalloc_bestfit2+0xc3e>
f0115231:	83 ec 04             	sub    $0x4,%esp
f0115234:	68 b8 04 13 f0       	push   $0xf01304b8
f0115239:	68 9c 02 00 00       	push   $0x29c
f011523e:	68 be ff 12 f0       	push   $0xf012ffbe
f0115243:	e8 5e af fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115248:	e8 63 63 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011524d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0115250:	e8 4f e2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115255:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f0115258:	83 ec 0c             	sub    $0xc,%esp
f011525b:	68 00 fc 1f 00       	push   $0x1ffc00
f0115260:	e8 8f 19 ff ff       	call   f0106bf4 <kmalloc>
f0115265:	83 c4 10             	add    $0x10,%esp
f0115268:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011526e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0115274:	89 c1                	mov    %eax,%ecx
f0115276:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011527d:	10 00 00 
f0115280:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115285:	0f b6 d0             	movzbl %al,%edx
f0115288:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011528e:	01 d0                	add    %edx,%eax
f0115290:	48                   	dec    %eax
f0115291:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0115297:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011529d:	ba 00 00 00 00       	mov    $0x0,%edx
f01152a2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01152a8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01152ae:	29 d0                	sub    %edx,%eax
f01152b0:	89 c3                	mov    %eax,%ebx
f01152b2:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01152b9:	10 00 00 
f01152bc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01152c1:	0f b6 c0             	movzbl %al,%eax
f01152c4:	c1 e0 04             	shl    $0x4,%eax
f01152c7:	89 c2                	mov    %eax,%edx
f01152c9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01152cf:	01 d0                	add    %edx,%eax
f01152d1:	48                   	dec    %eax
f01152d2:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01152d8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01152de:	ba 00 00 00 00       	mov    $0x0,%edx
f01152e3:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01152e9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01152ef:	29 d0                	sub    %edx,%eax
f01152f1:	01 c3                	add    %eax,%ebx
f01152f3:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01152fa:	10 00 00 
f01152fd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0115303:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115308:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011530e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0115314:	ba 00 00 00 00       	mov    $0x0,%edx
f0115319:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011531f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0115325:	29 d0                	sub    %edx,%eax
f0115327:	01 d8                	add    %ebx,%eax
f0115329:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011532e:	39 c1                	cmp    %eax,%ecx
f0115330:	74 17                	je     f0115349 <test_kmalloc_bestfit2+0xd3f>
f0115332:	83 ec 04             	sub    $0x4,%esp
f0115335:	68 d8 03 13 f0       	push   $0xf01303d8
f011533a:	68 a2 02 00 00       	push   $0x2a2
f011533f:	68 be ff 12 f0       	push   $0xf012ffbe
f0115344:	e8 5d ae fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115349:	e8 56 e1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011534e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0115351:	74 17                	je     f011536a <test_kmalloc_bestfit2+0xd60>
f0115353:	83 ec 04             	sub    $0x4,%esp
f0115356:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011535b:	68 a3 02 00 00       	push   $0x2a3
f0115360:	68 be ff 12 f0       	push   $0xf012ffbe
f0115365:	e8 3c ae fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011536a:	e8 41 62 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011536f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115372:	29 c2                	sub    %eax,%edx
f0115374:	89 d0                	mov    %edx,%eax
f0115376:	3d 00 02 00 00       	cmp    $0x200,%eax
f011537b:	74 17                	je     f0115394 <test_kmalloc_bestfit2+0xd8a>
f011537d:	83 ec 04             	sub    $0x4,%esp
f0115380:	68 f6 04 13 f0       	push   $0xf01304f6
f0115385:	68 a4 02 00 00       	push   $0x2a4
f011538a:	68 be ff 12 f0       	push   $0xf012ffbe
f011538f:	e8 12 ae fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f0115394:	e8 17 62 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115399:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011539c:	e8 03 e1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01153a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f01153a4:	83 ec 0c             	sub    $0xc,%esp
f01153a7:	68 00 18 00 00       	push   $0x1800
f01153ac:	e8 43 18 ff ff       	call   f0106bf4 <kmalloc>
f01153b1:	83 c4 10             	add    $0x10,%esp
f01153b4:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f01153ba:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01153c0:	89 c1                	mov    %eax,%ecx
f01153c2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01153c9:	10 00 00 
f01153cc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01153d1:	0f b6 d0             	movzbl %al,%edx
f01153d4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01153da:	01 d0                	add    %edx,%eax
f01153dc:	48                   	dec    %eax
f01153dd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01153e3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01153e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01153ee:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01153f4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01153fa:	29 d0                	sub    %edx,%eax
f01153fc:	89 c3                	mov    %eax,%ebx
f01153fe:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0115405:	10 00 00 
f0115408:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011540d:	0f b6 c0             	movzbl %al,%eax
f0115410:	c1 e0 04             	shl    $0x4,%eax
f0115413:	89 c2                	mov    %eax,%edx
f0115415:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011541b:	01 d0                	add    %edx,%eax
f011541d:	48                   	dec    %eax
f011541e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0115424:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011542a:	ba 00 00 00 00       	mov    $0x0,%edx
f011542f:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0115435:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011543b:	29 d0                	sub    %edx,%eax
f011543d:	01 c3                	add    %eax,%ebx
f011543f:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0115446:	10 00 00 
f0115449:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011544f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115454:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011545a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0115460:	ba 00 00 00 00       	mov    $0x0,%edx
f0115465:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011546b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0115471:	29 d0                	sub    %edx,%eax
f0115473:	01 d8                	add    %ebx,%eax
f0115475:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011547a:	39 c1                	cmp    %eax,%ecx
f011547c:	74 17                	je     f0115495 <test_kmalloc_bestfit2+0xe8b>
f011547e:	83 ec 04             	sub    $0x4,%esp
f0115481:	68 d8 03 13 f0       	push   $0xf01303d8
f0115486:	68 aa 02 00 00       	push   $0x2aa
f011548b:	68 be ff 12 f0       	push   $0xf012ffbe
f0115490:	e8 11 ad fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115495:	e8 0a e0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011549a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011549d:	74 17                	je     f01154b6 <test_kmalloc_bestfit2+0xeac>
f011549f:	83 ec 04             	sub    $0x4,%esp
f01154a2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01154a7:	68 ab 02 00 00       	push   $0x2ab
f01154ac:	68 be ff 12 f0       	push   $0xf012ffbe
f01154b1:	e8 f0 ac fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f01154b6:	e8 f5 60 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01154bb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01154be:	29 c2                	sub    %eax,%edx
f01154c0:	89 d0                	mov    %edx,%eax
f01154c2:	83 f8 02             	cmp    $0x2,%eax
f01154c5:	74 17                	je     f01154de <test_kmalloc_bestfit2+0xed4>
f01154c7:	83 ec 04             	sub    $0x4,%esp
f01154ca:	68 f6 04 13 f0       	push   $0xf01304f6
f01154cf:	68 ac 02 00 00       	push   $0x2ac
f01154d4:	68 be ff 12 f0       	push   $0xf012ffbe
f01154d9:	e8 c8 ac fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01154de:	e8 cd 60 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01154e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01154e6:	e8 b9 df fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01154eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f01154ee:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01154f4:	83 ec 0c             	sub    $0xc,%esp
f01154f7:	50                   	push   %eax
f01154f8:	e8 11 17 ff ff       	call   f0106c0e <kfree>
f01154fd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115500:	e8 9f df fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115505:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0115508:	74 17                	je     f0115521 <test_kmalloc_bestfit2+0xf17>
f011550a:	83 ec 04             	sub    $0x4,%esp
f011550d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115512:	68 b2 02 00 00       	push   $0x2b2
f0115517:	68 be ff 12 f0       	push   $0xf012ffbe
f011551c:	e8 85 ac fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f0115521:	e8 8a 60 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115526:	2b 45 dc             	sub    -0x24(%ebp),%eax
f0115529:	3d 00 03 00 00       	cmp    $0x300,%eax
f011552e:	74 17                	je     f0115547 <test_kmalloc_bestfit2+0xf3d>
f0115530:	83 ec 04             	sub    $0x4,%esp
f0115533:	68 b8 04 13 f0       	push   $0xf01304b8
f0115538:	68 b3 02 00 00       	push   $0x2b3
f011553d:	68 be ff 12 f0       	push   $0xf012ffbe
f0115542:	e8 5f ac fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0115547:	e8 64 60 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011554c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011554f:	e8 50 df fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115554:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f0115557:	83 ec 0c             	sub    $0xc,%esp
f011555a:	68 00 fc 2f 00       	push   $0x2ffc00
f011555f:	e8 90 16 ff ff       	call   f0106bf4 <kmalloc>
f0115564:	83 c4 10             	add    $0x10,%esp
f0115567:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011556d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0115573:	89 c1                	mov    %eax,%ecx
f0115575:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011557c:	10 00 00 
f011557f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115584:	0f b6 d0             	movzbl %al,%edx
f0115587:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011558d:	01 d0                	add    %edx,%eax
f011558f:	48                   	dec    %eax
f0115590:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0115596:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011559c:	ba 00 00 00 00       	mov    $0x0,%edx
f01155a1:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01155a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01155ad:	29 d0                	sub    %edx,%eax
f01155af:	89 c3                	mov    %eax,%ebx
f01155b1:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01155b8:	10 00 00 
f01155bb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01155c0:	0f b6 c0             	movzbl %al,%eax
f01155c3:	c1 e0 04             	shl    $0x4,%eax
f01155c6:	89 c2                	mov    %eax,%edx
f01155c8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01155ce:	01 d0                	add    %edx,%eax
f01155d0:	48                   	dec    %eax
f01155d1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01155d7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01155dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01155e2:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01155e8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01155ee:	29 d0                	sub    %edx,%eax
f01155f0:	01 c3                	add    %eax,%ebx
f01155f2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01155f9:	10 00 00 
f01155fc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0115602:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115607:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011560d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0115613:	ba 00 00 00 00       	mov    $0x0,%edx
f0115618:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011561e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0115624:	29 d0                	sub    %edx,%eax
f0115626:	01 d8                	add    %ebx,%eax
f0115628:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011562d:	39 c1                	cmp    %eax,%ecx
f011562f:	74 17                	je     f0115648 <test_kmalloc_bestfit2+0x103e>
f0115631:	83 ec 04             	sub    $0x4,%esp
f0115634:	68 d8 03 13 f0       	push   $0xf01303d8
f0115639:	68 b9 02 00 00       	push   $0x2b9
f011563e:	68 be ff 12 f0       	push   $0xf012ffbe
f0115643:	e8 5e ab fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115648:	e8 57 de fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011564d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0115650:	74 17                	je     f0115669 <test_kmalloc_bestfit2+0x105f>
f0115652:	83 ec 04             	sub    $0x4,%esp
f0115655:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011565a:	68 ba 02 00 00       	push   $0x2ba
f011565f:	68 be ff 12 f0       	push   $0xf012ffbe
f0115664:	e8 3d ab fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0115669:	e8 42 5f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011566e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115671:	29 c2                	sub    %eax,%edx
f0115673:	89 d0                	mov    %edx,%eax
f0115675:	3d 00 03 00 00       	cmp    $0x300,%eax
f011567a:	74 17                	je     f0115693 <test_kmalloc_bestfit2+0x1089>
f011567c:	83 ec 04             	sub    $0x4,%esp
f011567f:	68 b8 04 13 f0       	push   $0xf01304b8
f0115684:	68 bb 02 00 00       	push   $0x2bb
f0115689:	68 be ff 12 f0       	push   $0xf012ffbe
f011568e:	e8 13 ab fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0115693:	e8 18 5f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115698:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011569b:	e8 04 de fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01156a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f01156a3:	83 ec 0c             	sub    $0xc,%esp
f01156a6:	68 00 fc 3f 00       	push   $0x3ffc00
f01156ab:	e8 44 15 ff ff       	call   f0106bf4 <kmalloc>
f01156b0:	83 c4 10             	add    $0x10,%esp
f01156b3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01156b9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01156bf:	89 c1                	mov    %eax,%ecx
f01156c1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01156c8:	10 00 00 
f01156cb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01156d0:	0f b6 d0             	movzbl %al,%edx
f01156d3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01156d9:	01 d0                	add    %edx,%eax
f01156db:	48                   	dec    %eax
f01156dc:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01156e2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01156e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01156ed:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01156f3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01156f9:	29 d0                	sub    %edx,%eax
f01156fb:	89 c3                	mov    %eax,%ebx
f01156fd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0115704:	10 00 00 
f0115707:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011570c:	0f b6 c0             	movzbl %al,%eax
f011570f:	c1 e0 04             	shl    $0x4,%eax
f0115712:	89 c2                	mov    %eax,%edx
f0115714:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011571a:	01 d0                	add    %edx,%eax
f011571c:	48                   	dec    %eax
f011571d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0115723:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0115729:	ba 00 00 00 00       	mov    $0x0,%edx
f011572e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0115734:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011573a:	29 d0                	sub    %edx,%eax
f011573c:	01 c3                	add    %eax,%ebx
f011573e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0115745:	10 00 00 
f0115748:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011574e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115753:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0115759:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011575f:	ba 00 00 00 00       	mov    $0x0,%edx
f0115764:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011576a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0115770:	29 d0                	sub    %edx,%eax
f0115772:	01 d8                	add    %ebx,%eax
f0115774:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0115779:	39 c1                	cmp    %eax,%ecx
f011577b:	74 17                	je     f0115794 <test_kmalloc_bestfit2+0x118a>
f011577d:	83 ec 04             	sub    $0x4,%esp
f0115780:	68 d8 03 13 f0       	push   $0xf01303d8
f0115785:	68 c1 02 00 00       	push   $0x2c1
f011578a:	68 be ff 12 f0       	push   $0xf012ffbe
f011578f:	e8 12 aa fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115794:	e8 0b dd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115799:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011579c:	74 17                	je     f01157b5 <test_kmalloc_bestfit2+0x11ab>
f011579e:	83 ec 04             	sub    $0x4,%esp
f01157a1:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01157a6:	68 c2 02 00 00       	push   $0x2c2
f01157ab:	68 be ff 12 f0       	push   $0xf012ffbe
f01157b0:	e8 f1 a9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f01157b5:	e8 f6 5d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01157ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01157bd:	29 c2                	sub    %eax,%edx
f01157bf:	89 d0                	mov    %edx,%eax
f01157c1:	3d 00 04 00 00       	cmp    $0x400,%eax
f01157c6:	74 17                	je     f01157df <test_kmalloc_bestfit2+0x11d5>
f01157c8:	83 ec 04             	sub    $0x4,%esp
f01157cb:	68 b8 04 13 f0       	push   $0xf01304b8
f01157d0:	68 c3 02 00 00       	push   $0x2c3
f01157d5:	68 be ff 12 f0       	push   $0xf012ffbe
f01157da:	e8 c7 a9 fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f01157df:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01157e6:	10 00 00 
f01157e9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01157ee:	0f b6 d0             	movzbl %al,%edx
f01157f1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01157f7:	01 d0                	add    %edx,%eax
f01157f9:	48                   	dec    %eax
f01157fa:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0115800:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0115806:	ba 00 00 00 00       	mov    $0x0,%edx
f011580b:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0115811:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0115817:	29 d0                	sub    %edx,%eax
f0115819:	89 c1                	mov    %eax,%ecx
f011581b:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0115822:	10 00 00 
f0115825:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011582a:	0f b6 c0             	movzbl %al,%eax
f011582d:	c1 e0 04             	shl    $0x4,%eax
f0115830:	89 c2                	mov    %eax,%edx
f0115832:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0115838:	01 d0                	add    %edx,%eax
f011583a:	48                   	dec    %eax
f011583b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0115841:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0115847:	ba 00 00 00 00       	mov    $0x0,%edx
f011584c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0115852:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0115858:	29 d0                	sub    %edx,%eax
f011585a:	01 c1                	add    %eax,%ecx
f011585c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0115863:	10 00 00 
f0115866:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011586c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115871:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0115877:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011587d:	ba 00 00 00 00       	mov    $0x0,%edx
f0115882:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0115888:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011588e:	29 d0                	sub    %edx,%eax
f0115890:	01 c8                	add    %ecx,%eax
f0115892:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0115897:	29 c2                	sub    %eax,%edx
f0115899:	89 d0                	mov    %edx,%eax
f011589b:	83 ec 0c             	sub    $0xc,%esp
f011589e:	50                   	push   %eax
f011589f:	e8 50 13 ff ff       	call   f0106bf4 <kmalloc>
f01158a4:	83 c4 10             	add    $0x10,%esp
f01158a7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f01158ad:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01158b3:	85 c0                	test   %eax,%eax
f01158b5:	74 17                	je     f01158ce <test_kmalloc_bestfit2+0x12c4>
f01158b7:	83 ec 04             	sub    $0x4,%esp
f01158ba:	68 08 05 13 f0       	push   $0xf0130508
f01158bf:	68 cb 02 00 00       	push   $0x2cb
f01158c4:	68 be ff 12 f0       	push   $0xf012ffbe
f01158c9:	e8 d8 a8 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f01158ce:	83 ec 0c             	sub    $0xc,%esp
f01158d1:	68 6c 05 13 f0       	push   $0xf013056c
f01158d6:	e8 52 b3 fe ff       	call   f0100c2d <cprintf>
f01158db:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f01158de:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01158e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01158e6:	5b                   	pop    %ebx
f01158e7:	5f                   	pop    %edi
f01158e8:	5d                   	pop    %ebp
f01158e9:	c3                   	ret    

f01158ea <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f01158ea:	55                   	push   %ebp
f01158eb:	89 e5                	mov    %esp,%ebp
f01158ed:	57                   	push   %edi
f01158ee:	53                   	push   %ebx
f01158ef:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f01158f5:	83 ec 0c             	sub    $0xc,%esp
f01158f8:	68 00 ff 12 f0       	push   $0xf012ff00
f01158fd:	e8 2b b3 fe ff       	call   f0100c2d <cprintf>
f0115902:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0115905:	83 ec 0c             	sub    $0xc,%esp
f0115908:	68 30 ff 12 f0       	push   $0xf012ff30
f011590d:	e8 1b b3 fe ff       	call   f0100c2d <cprintf>
f0115912:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0115915:	83 ec 0c             	sub    $0xc,%esp
f0115918:	68 00 ff 12 f0       	push   $0xf012ff00
f011591d:	e8 0b b3 fe ff       	call   f0100c2d <cprintf>
f0115922:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0115925:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011592b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115930:	b8 00 00 00 00       	mov    $0x0,%eax
f0115935:	89 d7                	mov    %edx,%edi
f0115937:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0115939:	e8 72 5c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011593e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115941:	e8 5e db fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115946:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f0115949:	83 ec 0c             	sub    $0xc,%esp
f011594c:	68 00 fc 0f 00       	push   $0xffc00
f0115951:	e8 9e 12 ff ff       	call   f0106bf4 <kmalloc>
f0115956:	83 c4 10             	add    $0x10,%esp
f0115959:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011595f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0115965:	89 c1                	mov    %eax,%ecx
f0115967:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011596e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115973:	0f b6 d0             	movzbl %al,%edx
f0115976:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115979:	01 d0                	add    %edx,%eax
f011597b:	48                   	dec    %eax
f011597c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011597f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115982:	ba 00 00 00 00       	mov    $0x0,%edx
f0115987:	f7 75 ec             	divl   -0x14(%ebp)
f011598a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011598d:	29 d0                	sub    %edx,%eax
f011598f:	89 c3                	mov    %eax,%ebx
f0115991:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0115998:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011599d:	0f b6 c0             	movzbl %al,%eax
f01159a0:	c1 e0 04             	shl    $0x4,%eax
f01159a3:	89 c2                	mov    %eax,%edx
f01159a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01159a8:	01 d0                	add    %edx,%eax
f01159aa:	48                   	dec    %eax
f01159ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01159ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01159b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01159b6:	f7 75 e4             	divl   -0x1c(%ebp)
f01159b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01159bc:	29 d0                	sub    %edx,%eax
f01159be:	01 c3                	add    %eax,%ebx
f01159c0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01159c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01159cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01159d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01159d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01159da:	f7 75 dc             	divl   -0x24(%ebp)
f01159dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01159e0:	29 d0                	sub    %edx,%eax
f01159e2:	01 d8                	add    %ebx,%eax
f01159e4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01159e9:	39 c1                	cmp    %eax,%ecx
f01159eb:	74 17                	je     f0115a04 <test_kmalloc_firstfit1+0x11a>
f01159ed:	83 ec 04             	sub    $0x4,%esp
f01159f0:	68 d8 03 13 f0       	push   $0xf01303d8
f01159f5:	68 e3 02 00 00       	push   $0x2e3
f01159fa:	68 be ff 12 f0       	push   $0xf012ffbe
f01159ff:	e8 a2 a7 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115a04:	e8 9b da fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115a09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115a0c:	74 17                	je     f0115a25 <test_kmalloc_firstfit1+0x13b>
f0115a0e:	83 ec 04             	sub    $0x4,%esp
f0115a11:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115a16:	68 e4 02 00 00       	push   $0x2e4
f0115a1b:	68 be ff 12 f0       	push   $0xf012ffbe
f0115a20:	e8 81 a7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0115a25:	e8 86 5b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115a2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115a2d:	29 c2                	sub    %eax,%edx
f0115a2f:	89 d0                	mov    %edx,%eax
f0115a31:	3d 00 01 00 00       	cmp    $0x100,%eax
f0115a36:	74 17                	je     f0115a4f <test_kmalloc_firstfit1+0x165>
f0115a38:	83 ec 04             	sub    $0x4,%esp
f0115a3b:	68 08 04 13 f0       	push   $0xf0130408
f0115a40:	68 e5 02 00 00       	push   $0x2e5
f0115a45:	68 be ff 12 f0       	push   $0xf012ffbe
f0115a4a:	e8 57 a7 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0115a4f:	e8 5c 5b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115a54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115a57:	e8 48 da fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115a5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f0115a5f:	83 ec 0c             	sub    $0xc,%esp
f0115a62:	68 00 fc 0f 00       	push   $0xffc00
f0115a67:	e8 88 11 ff ff       	call   f0106bf4 <kmalloc>
f0115a6c:	83 c4 10             	add    $0x10,%esp
f0115a6f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f0115a75:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0115a7b:	89 c1                	mov    %eax,%ecx
f0115a7d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0115a84:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115a89:	0f b6 d0             	movzbl %al,%edx
f0115a8c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115a8f:	01 d0                	add    %edx,%eax
f0115a91:	48                   	dec    %eax
f0115a92:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0115a95:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a98:	ba 00 00 00 00       	mov    $0x0,%edx
f0115a9d:	f7 75 d4             	divl   -0x2c(%ebp)
f0115aa0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115aa3:	29 d0                	sub    %edx,%eax
f0115aa5:	89 c3                	mov    %eax,%ebx
f0115aa7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0115aae:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115ab3:	0f b6 c0             	movzbl %al,%eax
f0115ab6:	c1 e0 04             	shl    $0x4,%eax
f0115ab9:	89 c2                	mov    %eax,%edx
f0115abb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115abe:	01 d0                	add    %edx,%eax
f0115ac0:	48                   	dec    %eax
f0115ac1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0115ac4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115ac7:	ba 00 00 00 00       	mov    $0x0,%edx
f0115acc:	f7 75 cc             	divl   -0x34(%ebp)
f0115acf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115ad2:	29 d0                	sub    %edx,%eax
f0115ad4:	01 c3                	add    %eax,%ebx
f0115ad6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0115add:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115ae0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115ae5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115ae8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115aeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0115af0:	f7 75 c4             	divl   -0x3c(%ebp)
f0115af3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115af6:	29 d0                	sub    %edx,%eax
f0115af8:	01 d8                	add    %ebx,%eax
f0115afa:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0115aff:	39 c1                	cmp    %eax,%ecx
f0115b01:	74 17                	je     f0115b1a <test_kmalloc_firstfit1+0x230>
f0115b03:	83 ec 04             	sub    $0x4,%esp
f0115b06:	68 d8 03 13 f0       	push   $0xf01303d8
f0115b0b:	68 eb 02 00 00       	push   $0x2eb
f0115b10:	68 be ff 12 f0       	push   $0xf012ffbe
f0115b15:	e8 8c a6 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115b1a:	e8 85 d9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115b1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115b22:	74 17                	je     f0115b3b <test_kmalloc_firstfit1+0x251>
f0115b24:	83 ec 04             	sub    $0x4,%esp
f0115b27:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115b2c:	68 ec 02 00 00       	push   $0x2ec
f0115b31:	68 be ff 12 f0       	push   $0xf012ffbe
f0115b36:	e8 6b a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0115b3b:	e8 70 5a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115b40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115b43:	29 c2                	sub    %eax,%edx
f0115b45:	89 d0                	mov    %edx,%eax
f0115b47:	3d 00 01 00 00       	cmp    $0x100,%eax
f0115b4c:	74 17                	je     f0115b65 <test_kmalloc_firstfit1+0x27b>
f0115b4e:	83 ec 04             	sub    $0x4,%esp
f0115b51:	68 08 04 13 f0       	push   $0xf0130408
f0115b56:	68 ed 02 00 00       	push   $0x2ed
f0115b5b:	68 be ff 12 f0       	push   $0xf012ffbe
f0115b60:	e8 41 a6 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0115b65:	e8 46 5a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115b6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115b6d:	e8 32 d9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115b72:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f0115b75:	83 ec 0c             	sub    $0xc,%esp
f0115b78:	68 00 fc 0f 00       	push   $0xffc00
f0115b7d:	e8 72 10 ff ff       	call   f0106bf4 <kmalloc>
f0115b82:	83 c4 10             	add    $0x10,%esp
f0115b85:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f0115b8b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0115b91:	89 c1                	mov    %eax,%ecx
f0115b93:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0115b9a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115b9f:	0f b6 d0             	movzbl %al,%edx
f0115ba2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115ba5:	01 d0                	add    %edx,%eax
f0115ba7:	48                   	dec    %eax
f0115ba8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0115bab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115bae:	ba 00 00 00 00       	mov    $0x0,%edx
f0115bb3:	f7 75 bc             	divl   -0x44(%ebp)
f0115bb6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115bb9:	29 d0                	sub    %edx,%eax
f0115bbb:	89 c3                	mov    %eax,%ebx
f0115bbd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0115bc4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115bc9:	0f b6 c0             	movzbl %al,%eax
f0115bcc:	c1 e0 04             	shl    $0x4,%eax
f0115bcf:	89 c2                	mov    %eax,%edx
f0115bd1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115bd4:	01 d0                	add    %edx,%eax
f0115bd6:	48                   	dec    %eax
f0115bd7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0115bda:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115bdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0115be2:	f7 75 b4             	divl   -0x4c(%ebp)
f0115be5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115be8:	29 d0                	sub    %edx,%eax
f0115bea:	01 c3                	add    %eax,%ebx
f0115bec:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0115bf3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115bf6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115bfb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0115bfe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0115c06:	f7 75 ac             	divl   -0x54(%ebp)
f0115c09:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115c0c:	29 d0                	sub    %edx,%eax
f0115c0e:	01 d8                	add    %ebx,%eax
f0115c10:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0115c15:	39 c1                	cmp    %eax,%ecx
f0115c17:	74 17                	je     f0115c30 <test_kmalloc_firstfit1+0x346>
f0115c19:	83 ec 04             	sub    $0x4,%esp
f0115c1c:	68 d8 03 13 f0       	push   $0xf01303d8
f0115c21:	68 f3 02 00 00       	push   $0x2f3
f0115c26:	68 be ff 12 f0       	push   $0xf012ffbe
f0115c2b:	e8 76 a5 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115c30:	e8 6f d8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115c35:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115c38:	74 17                	je     f0115c51 <test_kmalloc_firstfit1+0x367>
f0115c3a:	83 ec 04             	sub    $0x4,%esp
f0115c3d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115c42:	68 f4 02 00 00       	push   $0x2f4
f0115c47:	68 be ff 12 f0       	push   $0xf012ffbe
f0115c4c:	e8 55 a5 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0115c51:	e8 5a 59 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115c56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115c59:	29 c2                	sub    %eax,%edx
f0115c5b:	89 d0                	mov    %edx,%eax
f0115c5d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0115c62:	74 17                	je     f0115c7b <test_kmalloc_firstfit1+0x391>
f0115c64:	83 ec 04             	sub    $0x4,%esp
f0115c67:	68 08 04 13 f0       	push   $0xf0130408
f0115c6c:	68 f5 02 00 00       	push   $0x2f5
f0115c71:	68 be ff 12 f0       	push   $0xf012ffbe
f0115c76:	e8 2b a5 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0115c7b:	e8 30 59 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115c80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115c83:	e8 1c d8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115c88:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f0115c8b:	83 ec 0c             	sub    $0xc,%esp
f0115c8e:	68 00 fc 0f 00       	push   $0xffc00
f0115c93:	e8 5c 0f ff ff       	call   f0106bf4 <kmalloc>
f0115c98:	83 c4 10             	add    $0x10,%esp
f0115c9b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0115ca1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0115ca7:	89 c1                	mov    %eax,%ecx
f0115ca9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0115cb0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115cb5:	0f b6 d0             	movzbl %al,%edx
f0115cb8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cbb:	01 d0                	add    %edx,%eax
f0115cbd:	48                   	dec    %eax
f0115cbe:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0115cc1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115cc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0115cc9:	f7 75 a4             	divl   -0x5c(%ebp)
f0115ccc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115ccf:	29 d0                	sub    %edx,%eax
f0115cd1:	89 c3                	mov    %eax,%ebx
f0115cd3:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0115cda:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115cdf:	0f b6 c0             	movzbl %al,%eax
f0115ce2:	c1 e0 04             	shl    $0x4,%eax
f0115ce5:	89 c2                	mov    %eax,%edx
f0115ce7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115cea:	01 d0                	add    %edx,%eax
f0115cec:	48                   	dec    %eax
f0115ced:	89 45 98             	mov    %eax,-0x68(%ebp)
f0115cf0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115cf3:	ba 00 00 00 00       	mov    $0x0,%edx
f0115cf8:	f7 75 9c             	divl   -0x64(%ebp)
f0115cfb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115cfe:	29 d0                	sub    %edx,%eax
f0115d00:	01 c3                	add    %eax,%ebx
f0115d02:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0115d09:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0115d0c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115d11:	89 45 90             	mov    %eax,-0x70(%ebp)
f0115d14:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115d17:	ba 00 00 00 00       	mov    $0x0,%edx
f0115d1c:	f7 75 94             	divl   -0x6c(%ebp)
f0115d1f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115d22:	29 d0                	sub    %edx,%eax
f0115d24:	01 d8                	add    %ebx,%eax
f0115d26:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0115d2b:	39 c1                	cmp    %eax,%ecx
f0115d2d:	74 17                	je     f0115d46 <test_kmalloc_firstfit1+0x45c>
f0115d2f:	83 ec 04             	sub    $0x4,%esp
f0115d32:	68 d8 03 13 f0       	push   $0xf01303d8
f0115d37:	68 fb 02 00 00       	push   $0x2fb
f0115d3c:	68 be ff 12 f0       	push   $0xf012ffbe
f0115d41:	e8 60 a4 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115d46:	e8 59 d7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115d4b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115d4e:	74 17                	je     f0115d67 <test_kmalloc_firstfit1+0x47d>
f0115d50:	83 ec 04             	sub    $0x4,%esp
f0115d53:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115d58:	68 fc 02 00 00       	push   $0x2fc
f0115d5d:	68 be ff 12 f0       	push   $0xf012ffbe
f0115d62:	e8 3f a4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0115d67:	e8 44 58 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115d6f:	29 c2                	sub    %eax,%edx
f0115d71:	89 d0                	mov    %edx,%eax
f0115d73:	3d 00 01 00 00       	cmp    $0x100,%eax
f0115d78:	74 17                	je     f0115d91 <test_kmalloc_firstfit1+0x4a7>
f0115d7a:	83 ec 04             	sub    $0x4,%esp
f0115d7d:	68 08 04 13 f0       	push   $0xf0130408
f0115d82:	68 fd 02 00 00       	push   $0x2fd
f0115d87:	68 be ff 12 f0       	push   $0xf012ffbe
f0115d8c:	e8 15 a4 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115d91:	e8 1a 58 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115d96:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d99:	e8 06 d7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115d9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f0115da1:	83 ec 0c             	sub    $0xc,%esp
f0115da4:	68 00 fc 1f 00       	push   $0x1ffc00
f0115da9:	e8 46 0e ff ff       	call   f0106bf4 <kmalloc>
f0115dae:	83 c4 10             	add    $0x10,%esp
f0115db1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0115db7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0115dbd:	89 c1                	mov    %eax,%ecx
f0115dbf:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0115dc6:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115dcb:	0f b6 d0             	movzbl %al,%edx
f0115dce:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115dd1:	01 d0                	add    %edx,%eax
f0115dd3:	48                   	dec    %eax
f0115dd4:	89 45 88             	mov    %eax,-0x78(%ebp)
f0115dd7:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115dda:	ba 00 00 00 00       	mov    $0x0,%edx
f0115ddf:	f7 75 8c             	divl   -0x74(%ebp)
f0115de2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115de5:	29 d0                	sub    %edx,%eax
f0115de7:	89 c3                	mov    %eax,%ebx
f0115de9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0115df0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115df5:	0f b6 c0             	movzbl %al,%eax
f0115df8:	c1 e0 04             	shl    $0x4,%eax
f0115dfb:	89 c2                	mov    %eax,%edx
f0115dfd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0115e00:	01 d0                	add    %edx,%eax
f0115e02:	48                   	dec    %eax
f0115e03:	89 45 80             	mov    %eax,-0x80(%ebp)
f0115e06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115e09:	ba 00 00 00 00       	mov    $0x0,%edx
f0115e0e:	f7 75 84             	divl   -0x7c(%ebp)
f0115e11:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115e14:	29 d0                	sub    %edx,%eax
f0115e16:	01 c3                	add    %eax,%ebx
f0115e18:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0115e1f:	10 00 00 
f0115e22:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0115e28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115e2d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0115e33:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0115e39:	ba 00 00 00 00       	mov    $0x0,%edx
f0115e3e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0115e44:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0115e4a:	29 d0                	sub    %edx,%eax
f0115e4c:	01 d8                	add    %ebx,%eax
f0115e4e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0115e53:	39 c1                	cmp    %eax,%ecx
f0115e55:	74 17                	je     f0115e6e <test_kmalloc_firstfit1+0x584>
f0115e57:	83 ec 04             	sub    $0x4,%esp
f0115e5a:	68 d8 03 13 f0       	push   $0xf01303d8
f0115e5f:	68 03 03 00 00       	push   $0x303
f0115e64:	68 be ff 12 f0       	push   $0xf012ffbe
f0115e69:	e8 38 a3 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115e6e:	e8 31 d6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115e73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115e76:	74 17                	je     f0115e8f <test_kmalloc_firstfit1+0x5a5>
f0115e78:	83 ec 04             	sub    $0x4,%esp
f0115e7b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115e80:	68 04 03 00 00       	push   $0x304
f0115e85:	68 be ff 12 f0       	push   $0xf012ffbe
f0115e8a:	e8 17 a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0115e8f:	e8 1c 57 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115e94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115e97:	29 c2                	sub    %eax,%edx
f0115e99:	89 d0                	mov    %edx,%eax
f0115e9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115ea0:	74 17                	je     f0115eb9 <test_kmalloc_firstfit1+0x5cf>
f0115ea2:	83 ec 04             	sub    $0x4,%esp
f0115ea5:	68 08 04 13 f0       	push   $0xf0130408
f0115eaa:	68 05 03 00 00       	push   $0x305
f0115eaf:	68 be ff 12 f0       	push   $0xf012ffbe
f0115eb4:	e8 ed a2 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115eb9:	e8 f2 56 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115ebe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ec1:	e8 de d5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115ec6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f0115ec9:	83 ec 0c             	sub    $0xc,%esp
f0115ecc:	68 00 fc 1f 00       	push   $0x1ffc00
f0115ed1:	e8 1e 0d ff ff       	call   f0106bf4 <kmalloc>
f0115ed6:	83 c4 10             	add    $0x10,%esp
f0115ed9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0115edf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0115ee5:	89 c1                	mov    %eax,%ecx
f0115ee7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0115eee:	10 00 00 
f0115ef1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115ef6:	0f b6 d0             	movzbl %al,%edx
f0115ef9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0115eff:	01 d0                	add    %edx,%eax
f0115f01:	48                   	dec    %eax
f0115f02:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0115f08:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0115f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f13:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0115f19:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0115f1f:	29 d0                	sub    %edx,%eax
f0115f21:	89 c3                	mov    %eax,%ebx
f0115f23:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0115f2a:	10 00 00 
f0115f2d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0115f32:	0f b6 c0             	movzbl %al,%eax
f0115f35:	c1 e0 04             	shl    $0x4,%eax
f0115f38:	89 c2                	mov    %eax,%edx
f0115f3a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0115f40:	01 d0                	add    %edx,%eax
f0115f42:	48                   	dec    %eax
f0115f43:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0115f49:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0115f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f54:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0115f5a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0115f60:	29 d0                	sub    %edx,%eax
f0115f62:	01 c3                	add    %eax,%ebx
f0115f64:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0115f6b:	10 00 00 
f0115f6e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0115f74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0115f79:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0115f7f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0115f85:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f8a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0115f90:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0115f96:	29 d0                	sub    %edx,%eax
f0115f98:	01 d8                	add    %ebx,%eax
f0115f9a:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0115f9f:	39 c1                	cmp    %eax,%ecx
f0115fa1:	74 17                	je     f0115fba <test_kmalloc_firstfit1+0x6d0>
f0115fa3:	83 ec 04             	sub    $0x4,%esp
f0115fa6:	68 d8 03 13 f0       	push   $0xf01303d8
f0115fab:	68 0b 03 00 00       	push   $0x30b
f0115fb0:	68 be ff 12 f0       	push   $0xf012ffbe
f0115fb5:	e8 ec a1 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115fba:	e8 e5 d4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0115fbf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115fc2:	74 17                	je     f0115fdb <test_kmalloc_firstfit1+0x6f1>
f0115fc4:	83 ec 04             	sub    $0x4,%esp
f0115fc7:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0115fcc:	68 0c 03 00 00       	push   $0x30c
f0115fd1:	68 be ff 12 f0       	push   $0xf012ffbe
f0115fd6:	e8 cb a1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0115fdb:	e8 d0 55 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0115fe0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115fe3:	29 c2                	sub    %eax,%edx
f0115fe5:	89 d0                	mov    %edx,%eax
f0115fe7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115fec:	74 17                	je     f0116005 <test_kmalloc_firstfit1+0x71b>
f0115fee:	83 ec 04             	sub    $0x4,%esp
f0115ff1:	68 08 04 13 f0       	push   $0xf0130408
f0115ff6:	68 0d 03 00 00       	push   $0x30d
f0115ffb:	68 be ff 12 f0       	push   $0xf012ffbe
f0116000:	e8 a1 a1 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116005:	e8 a6 55 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011600a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011600d:	e8 92 d4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116012:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f0116015:	83 ec 0c             	sub    $0xc,%esp
f0116018:	68 00 fc 2f 00       	push   $0x2ffc00
f011601d:	e8 d2 0b ff ff       	call   f0106bf4 <kmalloc>
f0116022:	83 c4 10             	add    $0x10,%esp
f0116025:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011602b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0116031:	89 c1                	mov    %eax,%ecx
f0116033:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011603a:	10 00 00 
f011603d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116042:	0f b6 d0             	movzbl %al,%edx
f0116045:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011604b:	01 d0                	add    %edx,%eax
f011604d:	48                   	dec    %eax
f011604e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0116054:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011605a:	ba 00 00 00 00       	mov    $0x0,%edx
f011605f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0116065:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011606b:	29 d0                	sub    %edx,%eax
f011606d:	89 c3                	mov    %eax,%ebx
f011606f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0116076:	10 00 00 
f0116079:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011607e:	0f b6 c0             	movzbl %al,%eax
f0116081:	c1 e0 04             	shl    $0x4,%eax
f0116084:	89 c2                	mov    %eax,%edx
f0116086:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011608c:	01 d0                	add    %edx,%eax
f011608e:	48                   	dec    %eax
f011608f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0116095:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011609b:	ba 00 00 00 00       	mov    $0x0,%edx
f01160a0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01160a6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01160ac:	29 d0                	sub    %edx,%eax
f01160ae:	01 c3                	add    %eax,%ebx
f01160b0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01160b7:	10 00 00 
f01160ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01160c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01160c5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01160cb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01160d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01160d6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01160dc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01160e2:	29 d0                	sub    %edx,%eax
f01160e4:	01 d8                	add    %ebx,%eax
f01160e6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01160eb:	39 c1                	cmp    %eax,%ecx
f01160ed:	74 17                	je     f0116106 <test_kmalloc_firstfit1+0x81c>
f01160ef:	83 ec 04             	sub    $0x4,%esp
f01160f2:	68 d8 03 13 f0       	push   $0xf01303d8
f01160f7:	68 13 03 00 00       	push   $0x313
f01160fc:	68 be ff 12 f0       	push   $0xf012ffbe
f0116101:	e8 a0 a0 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116106:	e8 99 d3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011610b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011610e:	74 17                	je     f0116127 <test_kmalloc_firstfit1+0x83d>
f0116110:	83 ec 04             	sub    $0x4,%esp
f0116113:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116118:	68 14 03 00 00       	push   $0x314
f011611d:	68 be ff 12 f0       	push   $0xf012ffbe
f0116122:	e8 7f a0 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f0116127:	e8 84 54 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011612c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011612f:	29 c2                	sub    %eax,%edx
f0116131:	89 d0                	mov    %edx,%eax
f0116133:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116138:	74 17                	je     f0116151 <test_kmalloc_firstfit1+0x867>
f011613a:	83 ec 04             	sub    $0x4,%esp
f011613d:	68 08 04 13 f0       	push   $0xf0130408
f0116142:	68 15 03 00 00       	push   $0x315
f0116147:	68 be ff 12 f0       	push   $0xf012ffbe
f011614c:	e8 55 a0 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116151:	e8 5a 54 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116156:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116159:	e8 46 d3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011615e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f0116161:	83 ec 0c             	sub    $0xc,%esp
f0116164:	68 00 fc 2f 00       	push   $0x2ffc00
f0116169:	e8 86 0a ff ff       	call   f0106bf4 <kmalloc>
f011616e:	83 c4 10             	add    $0x10,%esp
f0116171:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0116177:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011617d:	89 c1                	mov    %eax,%ecx
f011617f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0116186:	10 00 00 
f0116189:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011618e:	0f b6 d0             	movzbl %al,%edx
f0116191:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116197:	01 d0                	add    %edx,%eax
f0116199:	48                   	dec    %eax
f011619a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01161a0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01161a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01161ab:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01161b1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01161b7:	29 d0                	sub    %edx,%eax
f01161b9:	89 c3                	mov    %eax,%ebx
f01161bb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01161c2:	10 00 00 
f01161c5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01161ca:	0f b6 c0             	movzbl %al,%eax
f01161cd:	c1 e0 04             	shl    $0x4,%eax
f01161d0:	89 c2                	mov    %eax,%edx
f01161d2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01161d8:	01 d0                	add    %edx,%eax
f01161da:	48                   	dec    %eax
f01161db:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01161e1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01161e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01161ec:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01161f2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01161f8:	29 d0                	sub    %edx,%eax
f01161fa:	01 c3                	add    %eax,%ebx
f01161fc:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0116203:	10 00 00 
f0116206:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011620c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116211:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0116217:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011621d:	ba 00 00 00 00       	mov    $0x0,%edx
f0116222:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0116228:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011622e:	29 d0                	sub    %edx,%eax
f0116230:	01 d8                	add    %ebx,%eax
f0116232:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0116237:	39 c1                	cmp    %eax,%ecx
f0116239:	74 17                	je     f0116252 <test_kmalloc_firstfit1+0x968>
f011623b:	83 ec 04             	sub    $0x4,%esp
f011623e:	68 d8 03 13 f0       	push   $0xf01303d8
f0116243:	68 1b 03 00 00       	push   $0x31b
f0116248:	68 be ff 12 f0       	push   $0xf012ffbe
f011624d:	e8 54 9f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116252:	e8 4d d2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116257:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011625a:	74 17                	je     f0116273 <test_kmalloc_firstfit1+0x989>
f011625c:	83 ec 04             	sub    $0x4,%esp
f011625f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116264:	68 1c 03 00 00       	push   $0x31c
f0116269:	68 be ff 12 f0       	push   $0xf012ffbe
f011626e:	e8 33 9f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f0116273:	e8 38 53 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116278:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011627b:	29 c2                	sub    %eax,%edx
f011627d:	89 d0                	mov    %edx,%eax
f011627f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116284:	74 17                	je     f011629d <test_kmalloc_firstfit1+0x9b3>
f0116286:	83 ec 04             	sub    $0x4,%esp
f0116289:	68 08 04 13 f0       	push   $0xf0130408
f011628e:	68 1d 03 00 00       	push   $0x31d
f0116293:	68 be ff 12 f0       	push   $0xf012ffbe
f0116298:	e8 09 9f fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011629d:	e8 0e 53 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01162a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01162a5:	e8 fa d1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01162aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f01162ad:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01162b3:	83 ec 0c             	sub    $0xc,%esp
f01162b6:	50                   	push   %eax
f01162b7:	e8 52 09 ff ff       	call   f0106c0e <kfree>
f01162bc:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01162bf:	e8 e0 d1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01162c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01162c7:	74 17                	je     f01162e0 <test_kmalloc_firstfit1+0x9f6>
f01162c9:	83 ec 04             	sub    $0x4,%esp
f01162cc:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01162d1:	68 26 03 00 00       	push   $0x326
f01162d6:	68 be ff 12 f0       	push   $0xf012ffbe
f01162db:	e8 c6 9e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f01162e0:	e8 cb 52 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01162e5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01162e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01162ed:	74 17                	je     f0116306 <test_kmalloc_firstfit1+0xa1c>
f01162ef:	83 ec 04             	sub    $0x4,%esp
f01162f2:	68 1b 04 13 f0       	push   $0xf013041b
f01162f7:	68 27 03 00 00       	push   $0x327
f01162fc:	68 be ff 12 f0       	push   $0xf012ffbe
f0116301:	e8 a0 9e fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0116306:	e8 a5 52 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011630b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011630e:	e8 91 d1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116313:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f0116316:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011631c:	83 ec 0c             	sub    $0xc,%esp
f011631f:	50                   	push   %eax
f0116320:	e8 e9 08 ff ff       	call   f0106c0e <kfree>
f0116325:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116328:	e8 77 d1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011632d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116330:	74 17                	je     f0116349 <test_kmalloc_firstfit1+0xa5f>
f0116332:	83 ec 04             	sub    $0x4,%esp
f0116335:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011633a:	68 2d 03 00 00       	push   $0x32d
f011633f:	68 be ff 12 f0       	push   $0xf012ffbe
f0116344:	e8 5d 9e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0116349:	e8 62 52 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011634e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0116351:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116356:	74 17                	je     f011636f <test_kmalloc_firstfit1+0xa85>
f0116358:	83 ec 04             	sub    $0x4,%esp
f011635b:	68 1b 04 13 f0       	push   $0xf013041b
f0116360:	68 2e 03 00 00       	push   $0x32e
f0116365:	68 be ff 12 f0       	push   $0xf012ffbe
f011636a:	e8 37 9e fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011636f:	e8 3c 52 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116374:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116377:	e8 28 d1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011637c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011637f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0116385:	83 ec 0c             	sub    $0xc,%esp
f0116388:	50                   	push   %eax
f0116389:	e8 80 08 ff ff       	call   f0106c0e <kfree>
f011638e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116391:	e8 0e d1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116396:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116399:	74 17                	je     f01163b2 <test_kmalloc_firstfit1+0xac8>
f011639b:	83 ec 04             	sub    $0x4,%esp
f011639e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01163a3:	68 34 03 00 00       	push   $0x334
f01163a8:	68 be ff 12 f0       	push   $0xf012ffbe
f01163ad:	e8 f4 9d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f01163b2:	e8 f9 51 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01163b7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01163ba:	3d 00 03 00 00       	cmp    $0x300,%eax
f01163bf:	74 17                	je     f01163d8 <test_kmalloc_firstfit1+0xaee>
f01163c1:	83 ec 04             	sub    $0x4,%esp
f01163c4:	68 1b 04 13 f0       	push   $0xf013041b
f01163c9:	68 35 03 00 00       	push   $0x335
f01163ce:	68 be ff 12 f0       	push   $0xf012ffbe
f01163d3:	e8 ce 9d fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f01163d8:	e8 d3 51 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01163dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163e0:	e8 bf d0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01163e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f01163e8:	83 ec 0c             	sub    $0xc,%esp
f01163eb:	68 00 fc 07 00       	push   $0x7fc00
f01163f0:	e8 ff 07 ff ff       	call   f0106bf4 <kmalloc>
f01163f5:	83 c4 10             	add    $0x10,%esp
f01163f8:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f01163fe:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0116404:	89 c1                	mov    %eax,%ecx
f0116406:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011640d:	10 00 00 
f0116410:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116415:	0f b6 d0             	movzbl %al,%edx
f0116418:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011641e:	01 d0                	add    %edx,%eax
f0116420:	48                   	dec    %eax
f0116421:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0116427:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011642d:	ba 00 00 00 00       	mov    $0x0,%edx
f0116432:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0116438:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011643e:	29 d0                	sub    %edx,%eax
f0116440:	89 c3                	mov    %eax,%ebx
f0116442:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0116449:	10 00 00 
f011644c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116451:	0f b6 c0             	movzbl %al,%eax
f0116454:	c1 e0 04             	shl    $0x4,%eax
f0116457:	89 c2                	mov    %eax,%edx
f0116459:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011645f:	01 d0                	add    %edx,%eax
f0116461:	48                   	dec    %eax
f0116462:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0116468:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011646e:	ba 00 00 00 00       	mov    $0x0,%edx
f0116473:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0116479:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011647f:	29 d0                	sub    %edx,%eax
f0116481:	01 c3                	add    %eax,%ebx
f0116483:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011648a:	10 00 00 
f011648d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0116493:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116498:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011649e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01164a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01164a9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01164af:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01164b5:	29 d0                	sub    %edx,%eax
f01164b7:	01 d8                	add    %ebx,%eax
f01164b9:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f01164be:	39 c1                	cmp    %eax,%ecx
f01164c0:	74 17                	je     f01164d9 <test_kmalloc_firstfit1+0xbef>
f01164c2:	83 ec 04             	sub    $0x4,%esp
f01164c5:	68 d8 03 13 f0       	push   $0xf01303d8
f01164ca:	68 3e 03 00 00       	push   $0x33e
f01164cf:	68 be ff 12 f0       	push   $0xf012ffbe
f01164d4:	e8 cd 9c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01164d9:	e8 c6 cf fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01164de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01164e1:	74 17                	je     f01164fa <test_kmalloc_firstfit1+0xc10>
f01164e3:	83 ec 04             	sub    $0x4,%esp
f01164e6:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01164eb:	68 3f 03 00 00       	push   $0x33f
f01164f0:	68 be ff 12 f0       	push   $0xf012ffbe
f01164f5:	e8 ac 9c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f01164fa:	e8 b1 50 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01164ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116502:	29 c2                	sub    %eax,%edx
f0116504:	89 d0                	mov    %edx,%eax
f0116506:	3d 80 00 00 00       	cmp    $0x80,%eax
f011650b:	74 17                	je     f0116524 <test_kmalloc_firstfit1+0xc3a>
f011650d:	83 ec 04             	sub    $0x4,%esp
f0116510:	68 08 04 13 f0       	push   $0xf0130408
f0116515:	68 40 03 00 00       	push   $0x340
f011651a:	68 be ff 12 f0       	push   $0xf012ffbe
f011651f:	e8 82 9c fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0116524:	e8 87 50 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116529:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011652c:	e8 73 cf fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116531:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0116534:	83 ec 0c             	sub    $0xc,%esp
f0116537:	68 00 fc 0f 00       	push   $0xffc00
f011653c:	e8 b3 06 ff ff       	call   f0106bf4 <kmalloc>
f0116541:	83 c4 10             	add    $0x10,%esp
f0116544:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011654a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0116550:	89 c1                	mov    %eax,%ecx
f0116552:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0116559:	10 00 00 
f011655c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116561:	0f b6 d0             	movzbl %al,%edx
f0116564:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011656a:	01 d0                	add    %edx,%eax
f011656c:	48                   	dec    %eax
f011656d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0116573:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0116579:	ba 00 00 00 00       	mov    $0x0,%edx
f011657e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0116584:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011658a:	29 d0                	sub    %edx,%eax
f011658c:	89 c3                	mov    %eax,%ebx
f011658e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0116595:	10 00 00 
f0116598:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011659d:	0f b6 c0             	movzbl %al,%eax
f01165a0:	c1 e0 04             	shl    $0x4,%eax
f01165a3:	89 c2                	mov    %eax,%edx
f01165a5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01165ab:	01 d0                	add    %edx,%eax
f01165ad:	48                   	dec    %eax
f01165ae:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01165b4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01165ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01165bf:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01165c5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01165cb:	29 d0                	sub    %edx,%eax
f01165cd:	01 c3                	add    %eax,%ebx
f01165cf:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01165d6:	10 00 00 
f01165d9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01165df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01165e4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01165ea:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01165f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01165f5:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01165fb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0116601:	29 d0                	sub    %edx,%eax
f0116603:	01 d8                	add    %ebx,%eax
f0116605:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011660a:	39 c1                	cmp    %eax,%ecx
f011660c:	74 17                	je     f0116625 <test_kmalloc_firstfit1+0xd3b>
f011660e:	83 ec 04             	sub    $0x4,%esp
f0116611:	68 d8 03 13 f0       	push   $0xf01303d8
f0116616:	68 46 03 00 00       	push   $0x346
f011661b:	68 be ff 12 f0       	push   $0xf012ffbe
f0116620:	e8 81 9b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116625:	e8 7a ce fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011662a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011662d:	74 17                	je     f0116646 <test_kmalloc_firstfit1+0xd5c>
f011662f:	83 ec 04             	sub    $0x4,%esp
f0116632:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116637:	68 47 03 00 00       	push   $0x347
f011663c:	68 be ff 12 f0       	push   $0xf012ffbe
f0116641:	e8 60 9b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0116646:	e8 65 4f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011664b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011664e:	29 c2                	sub    %eax,%edx
f0116650:	89 d0                	mov    %edx,%eax
f0116652:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116657:	74 17                	je     f0116670 <test_kmalloc_firstfit1+0xd86>
f0116659:	83 ec 04             	sub    $0x4,%esp
f011665c:	68 08 04 13 f0       	push   $0xf0130408
f0116661:	68 48 03 00 00       	push   $0x348
f0116666:	68 be ff 12 f0       	push   $0xf012ffbe
f011666b:	e8 36 9b fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0116670:	e8 3b 4f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116675:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116678:	e8 27 ce fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011667d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f0116680:	83 ec 0c             	sub    $0xc,%esp
f0116683:	68 00 fc 03 00       	push   $0x3fc00
f0116688:	e8 67 05 ff ff       	call   f0106bf4 <kmalloc>
f011668d:	83 c4 10             	add    $0x10,%esp
f0116690:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0116696:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011669c:	89 c1                	mov    %eax,%ecx
f011669e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01166a5:	10 00 00 
f01166a8:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01166ad:	0f b6 d0             	movzbl %al,%edx
f01166b0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01166b6:	01 d0                	add    %edx,%eax
f01166b8:	48                   	dec    %eax
f01166b9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01166bf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01166c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01166ca:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01166d0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01166d6:	29 d0                	sub    %edx,%eax
f01166d8:	89 c3                	mov    %eax,%ebx
f01166da:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01166e1:	10 00 00 
f01166e4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01166e9:	0f b6 c0             	movzbl %al,%eax
f01166ec:	c1 e0 04             	shl    $0x4,%eax
f01166ef:	89 c2                	mov    %eax,%edx
f01166f1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01166f7:	01 d0                	add    %edx,%eax
f01166f9:	48                   	dec    %eax
f01166fa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0116700:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0116706:	ba 00 00 00 00       	mov    $0x0,%edx
f011670b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0116711:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0116717:	29 d0                	sub    %edx,%eax
f0116719:	01 c3                	add    %eax,%ebx
f011671b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0116722:	10 00 00 
f0116725:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011672b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116730:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0116736:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011673c:	ba 00 00 00 00       	mov    $0x0,%edx
f0116741:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0116747:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011674d:	29 d0                	sub    %edx,%eax
f011674f:	01 d8                	add    %ebx,%eax
f0116751:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f0116756:	39 c1                	cmp    %eax,%ecx
f0116758:	74 17                	je     f0116771 <test_kmalloc_firstfit1+0xe87>
f011675a:	83 ec 04             	sub    $0x4,%esp
f011675d:	68 d8 03 13 f0       	push   $0xf01303d8
f0116762:	68 4f 03 00 00       	push   $0x34f
f0116767:	68 be ff 12 f0       	push   $0xf012ffbe
f011676c:	e8 35 9a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116771:	e8 2e cd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116776:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116779:	74 17                	je     f0116792 <test_kmalloc_firstfit1+0xea8>
f011677b:	83 ec 04             	sub    $0x4,%esp
f011677e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116783:	68 50 03 00 00       	push   $0x350
f0116788:	68 be ff 12 f0       	push   $0xf012ffbe
f011678d:	e8 14 9a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0116792:	e8 19 4e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116797:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011679a:	29 c2                	sub    %eax,%edx
f011679c:	89 d0                	mov    %edx,%eax
f011679e:	83 f8 40             	cmp    $0x40,%eax
f01167a1:	74 17                	je     f01167ba <test_kmalloc_firstfit1+0xed0>
f01167a3:	83 ec 04             	sub    $0x4,%esp
f01167a6:	68 08 04 13 f0       	push   $0xf0130408
f01167ab:	68 51 03 00 00       	push   $0x351
f01167b0:	68 be ff 12 f0       	push   $0xf012ffbe
f01167b5:	e8 ec 99 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f01167ba:	e8 f1 4d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01167bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01167c2:	e8 dd cc fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01167c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f01167ca:	83 ec 0c             	sub    $0xc,%esp
f01167cd:	68 00 00 20 00       	push   $0x200000
f01167d2:	e8 1d 04 ff ff       	call   f0106bf4 <kmalloc>
f01167d7:	83 c4 10             	add    $0x10,%esp
f01167da:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f01167e0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01167e6:	89 c1                	mov    %eax,%ecx
f01167e8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01167ef:	10 00 00 
f01167f2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01167f7:	0f b6 d0             	movzbl %al,%edx
f01167fa:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0116800:	01 d0                	add    %edx,%eax
f0116802:	48                   	dec    %eax
f0116803:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0116809:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011680f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116814:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011681a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0116820:	29 d0                	sub    %edx,%eax
f0116822:	89 c3                	mov    %eax,%ebx
f0116824:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011682b:	10 00 00 
f011682e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116833:	0f b6 c0             	movzbl %al,%eax
f0116836:	c1 e0 04             	shl    $0x4,%eax
f0116839:	89 c2                	mov    %eax,%edx
f011683b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0116841:	01 d0                	add    %edx,%eax
f0116843:	48                   	dec    %eax
f0116844:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011684a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0116850:	ba 00 00 00 00       	mov    $0x0,%edx
f0116855:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011685b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0116861:	29 d0                	sub    %edx,%eax
f0116863:	01 c3                	add    %eax,%ebx
f0116865:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011686c:	10 00 00 
f011686f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0116875:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011687a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0116880:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0116886:	ba 00 00 00 00       	mov    $0x0,%edx
f011688b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0116891:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0116897:	29 d0                	sub    %edx,%eax
f0116899:	01 d8                	add    %ebx,%eax
f011689b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01168a0:	39 c1                	cmp    %eax,%ecx
f01168a2:	74 17                	je     f01168bb <test_kmalloc_firstfit1+0xfd1>
f01168a4:	83 ec 04             	sub    $0x4,%esp
f01168a7:	68 d8 03 13 f0       	push   $0xf01303d8
f01168ac:	68 57 03 00 00       	push   $0x357
f01168b1:	68 be ff 12 f0       	push   $0xf012ffbe
f01168b6:	e8 eb 98 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f01168bb:	e8 f0 4c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01168c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01168c3:	29 c2                	sub    %eax,%edx
f01168c5:	89 d0                	mov    %edx,%eax
f01168c7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01168cc:	74 17                	je     f01168e5 <test_kmalloc_firstfit1+0xffb>
f01168ce:	83 ec 04             	sub    $0x4,%esp
f01168d1:	68 08 04 13 f0       	push   $0xf0130408
f01168d6:	68 58 03 00 00       	push   $0x358
f01168db:	68 be ff 12 f0       	push   $0xf012ffbe
f01168e0:	e8 c1 98 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01168e5:	e8 ba cb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01168ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01168ed:	74 17                	je     f0116906 <test_kmalloc_firstfit1+0x101c>
f01168ef:	83 ec 04             	sub    $0x4,%esp
f01168f2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01168f7:	68 59 03 00 00       	push   $0x359
f01168fc:	68 be ff 12 f0       	push   $0xf012ffbe
f0116901:	e8 a0 98 fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0116906:	e8 a5 4c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011690b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011690e:	e8 91 cb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116913:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f0116916:	83 ec 0c             	sub    $0xc,%esp
f0116919:	68 00 fc 3f 00       	push   $0x3ffc00
f011691e:	e8 d1 02 ff ff       	call   f0106bf4 <kmalloc>
f0116923:	83 c4 10             	add    $0x10,%esp
f0116926:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011692c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0116932:	89 c1                	mov    %eax,%ecx
f0116934:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011693b:	10 00 00 
f011693e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116943:	0f b6 d0             	movzbl %al,%edx
f0116946:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011694c:	01 d0                	add    %edx,%eax
f011694e:	48                   	dec    %eax
f011694f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0116955:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011695b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116960:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0116966:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011696c:	29 d0                	sub    %edx,%eax
f011696e:	89 c3                	mov    %eax,%ebx
f0116970:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0116977:	10 00 00 
f011697a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011697f:	0f b6 c0             	movzbl %al,%eax
f0116982:	c1 e0 04             	shl    $0x4,%eax
f0116985:	89 c2                	mov    %eax,%edx
f0116987:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011698d:	01 d0                	add    %edx,%eax
f011698f:	48                   	dec    %eax
f0116990:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0116996:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011699c:	ba 00 00 00 00       	mov    $0x0,%edx
f01169a1:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01169a7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01169ad:	29 d0                	sub    %edx,%eax
f01169af:	01 c3                	add    %eax,%ebx
f01169b1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01169b8:	10 00 00 
f01169bb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01169c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01169c6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01169cc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01169d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01169d7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01169dd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01169e3:	29 d0                	sub    %edx,%eax
f01169e5:	01 d8                	add    %ebx,%eax
f01169e7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f01169ec:	39 c1                	cmp    %eax,%ecx
f01169ee:	74 17                	je     f0116a07 <test_kmalloc_firstfit1+0x111d>
f01169f0:	83 ec 04             	sub    $0x4,%esp
f01169f3:	68 d8 03 13 f0       	push   $0xf01303d8
f01169f8:	68 60 03 00 00       	push   $0x360
f01169fd:	68 be ff 12 f0       	push   $0xf012ffbe
f0116a02:	e8 9f 97 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116a07:	e8 98 ca fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116a0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116a0f:	74 17                	je     f0116a28 <test_kmalloc_firstfit1+0x113e>
f0116a11:	83 ec 04             	sub    $0x4,%esp
f0116a14:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116a19:	68 61 03 00 00       	push   $0x361
f0116a1e:	68 be ff 12 f0       	push   $0xf012ffbe
f0116a23:	e8 7e 97 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f0116a28:	e8 83 4b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116a2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116a30:	29 c2                	sub    %eax,%edx
f0116a32:	89 d0                	mov    %edx,%eax
f0116a34:	3d 00 04 00 00       	cmp    $0x400,%eax
f0116a39:	74 17                	je     f0116a52 <test_kmalloc_firstfit1+0x1168>
f0116a3b:	83 ec 04             	sub    $0x4,%esp
f0116a3e:	68 08 04 13 f0       	push   $0xf0130408
f0116a43:	68 62 03 00 00       	push   $0x362
f0116a48:	68 be ff 12 f0       	push   $0xf012ffbe
f0116a4d:	e8 54 97 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f0116a52:	e8 59 4b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116a57:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a5a:	e8 45 ca fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f0116a62:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0116a68:	83 ec 0c             	sub    $0xc,%esp
f0116a6b:	50                   	push   %eax
f0116a6c:	e8 9d 01 ff ff       	call   f0106c0e <kfree>
f0116a71:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116a74:	e8 2b ca fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116a79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116a7c:	74 17                	je     f0116a95 <test_kmalloc_firstfit1+0x11ab>
f0116a7e:	83 ec 04             	sub    $0x4,%esp
f0116a81:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116a86:	68 6b 03 00 00       	push   $0x36b
f0116a8b:	68 be ff 12 f0       	push   $0xf012ffbe
f0116a90:	e8 11 97 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0116a95:	e8 16 4b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116a9a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0116a9d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116aa2:	74 17                	je     f0116abb <test_kmalloc_firstfit1+0x11d1>
f0116aa4:	83 ec 04             	sub    $0x4,%esp
f0116aa7:	68 1b 04 13 f0       	push   $0xf013041b
f0116aac:	68 6c 03 00 00       	push   $0x36c
f0116ab1:	68 be ff 12 f0       	push   $0xf012ffbe
f0116ab6:	e8 eb 96 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f0116abb:	e8 f0 4a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116ac0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ac3:	e8 dc c9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116ac8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0116acb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0116ad1:	83 ec 0c             	sub    $0xc,%esp
f0116ad4:	50                   	push   %eax
f0116ad5:	e8 34 01 ff ff       	call   f0106c0e <kfree>
f0116ada:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116add:	e8 c2 c9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116ae2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116ae5:	74 17                	je     f0116afe <test_kmalloc_firstfit1+0x1214>
f0116ae7:	83 ec 04             	sub    $0x4,%esp
f0116aea:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116aef:	68 72 03 00 00       	push   $0x372
f0116af4:	68 be ff 12 f0       	push   $0xf012ffbe
f0116af9:	e8 a8 96 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0116afe:	e8 ad 4a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116b03:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0116b06:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116b0b:	74 17                	je     f0116b24 <test_kmalloc_firstfit1+0x123a>
f0116b0d:	83 ec 04             	sub    $0x4,%esp
f0116b10:	68 1b 04 13 f0       	push   $0xf013041b
f0116b15:	68 73 03 00 00       	push   $0x373
f0116b1a:	68 be ff 12 f0       	push   $0xf012ffbe
f0116b1f:	e8 82 96 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f0116b24:	e8 87 4a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b2c:	e8 73 c9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116b31:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f0116b34:	83 ec 0c             	sub    $0xc,%esp
f0116b37:	68 00 00 10 00       	push   $0x100000
f0116b3c:	e8 b3 00 ff ff       	call   f0106bf4 <kmalloc>
f0116b41:	83 c4 10             	add    $0x10,%esp
f0116b44:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f0116b4a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0116b50:	89 c1                	mov    %eax,%ecx
f0116b52:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0116b59:	10 00 00 
f0116b5c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116b61:	0f b6 d0             	movzbl %al,%edx
f0116b64:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0116b6a:	01 d0                	add    %edx,%eax
f0116b6c:	48                   	dec    %eax
f0116b6d:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0116b73:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0116b79:	ba 00 00 00 00       	mov    $0x0,%edx
f0116b7e:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0116b84:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0116b8a:	29 d0                	sub    %edx,%eax
f0116b8c:	89 c3                	mov    %eax,%ebx
f0116b8e:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0116b95:	10 00 00 
f0116b98:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116b9d:	0f b6 c0             	movzbl %al,%eax
f0116ba0:	c1 e0 04             	shl    $0x4,%eax
f0116ba3:	89 c2                	mov    %eax,%edx
f0116ba5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0116bab:	01 d0                	add    %edx,%eax
f0116bad:	48                   	dec    %eax
f0116bae:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0116bb4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0116bba:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bbf:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0116bc5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0116bcb:	29 d0                	sub    %edx,%eax
f0116bcd:	01 c3                	add    %eax,%ebx
f0116bcf:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0116bd6:	10 00 00 
f0116bd9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0116bdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116be4:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0116bea:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0116bf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bf5:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0116bfb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0116c01:	29 d0                	sub    %edx,%eax
f0116c03:	01 d8                	add    %ebx,%eax
f0116c05:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f0116c0a:	39 c1                	cmp    %eax,%ecx
f0116c0c:	74 17                	je     f0116c25 <test_kmalloc_firstfit1+0x133b>
f0116c0e:	83 ec 04             	sub    $0x4,%esp
f0116c11:	68 d8 03 13 f0       	push   $0xf01303d8
f0116c16:	68 7d 03 00 00       	push   $0x37d
f0116c1b:	68 be ff 12 f0       	push   $0xf012ffbe
f0116c20:	e8 81 95 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c25:	e8 7a c8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116c2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116c2d:	74 17                	je     f0116c46 <test_kmalloc_firstfit1+0x135c>
f0116c2f:	83 ec 04             	sub    $0x4,%esp
f0116c32:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116c37:	68 7e 03 00 00       	push   $0x37e
f0116c3c:	68 be ff 12 f0       	push   $0xf012ffbe
f0116c41:	e8 60 95 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0116c46:	e8 65 49 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116c4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116c4e:	29 c2                	sub    %eax,%edx
f0116c50:	89 d0                	mov    %edx,%eax
f0116c52:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116c57:	74 17                	je     f0116c70 <test_kmalloc_firstfit1+0x1386>
f0116c59:	83 ec 04             	sub    $0x4,%esp
f0116c5c:	68 08 04 13 f0       	push   $0xf0130408
f0116c61:	68 7f 03 00 00       	push   $0x37f
f0116c66:	68 be ff 12 f0       	push   $0xf012ffbe
f0116c6b:	e8 36 95 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f0116c70:	83 ec 0c             	sub    $0xc,%esp
f0116c73:	68 b4 05 13 f0       	push   $0xf01305b4
f0116c78:	e8 b0 9f fe ff       	call   f0100c2d <cprintf>
f0116c7d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0116c80:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116c85:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0116c88:	5b                   	pop    %ebx
f0116c89:	5f                   	pop    %edi
f0116c8a:	5d                   	pop    %ebp
f0116c8b:	c3                   	ret    

f0116c8c <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f0116c8c:	55                   	push   %ebp
f0116c8d:	89 e5                	mov    %esp,%ebp
f0116c8f:	57                   	push   %edi
f0116c90:	53                   	push   %ebx
f0116c91:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f0116c97:	83 ec 0c             	sub    $0xc,%esp
f0116c9a:	68 00 ff 12 f0       	push   $0xf012ff00
f0116c9f:	e8 89 9f fe ff       	call   f0100c2d <cprintf>
f0116ca4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116ca7:	83 ec 0c             	sub    $0xc,%esp
f0116caa:	68 30 ff 12 f0       	push   $0xf012ff30
f0116caf:	e8 79 9f fe ff       	call   f0100c2d <cprintf>
f0116cb4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116cb7:	83 ec 0c             	sub    $0xc,%esp
f0116cba:	68 00 ff 12 f0       	push   $0xf012ff00
f0116cbf:	e8 69 9f fe ff       	call   f0100c2d <cprintf>
f0116cc4:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0116cc7:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0116ccd:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116cd2:	b8 00 00 00 00       	mov    $0x0,%eax
f0116cd7:	89 d7                	mov    %edx,%edi
f0116cd9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0116cdb:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0116ce2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116ce7:	0f b6 d0             	movzbl %al,%edx
f0116cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ced:	01 d0                	add    %edx,%eax
f0116cef:	48                   	dec    %eax
f0116cf0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116cf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0116cfb:	f7 75 f4             	divl   -0xc(%ebp)
f0116cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116d01:	29 d0                	sub    %edx,%eax
f0116d03:	89 c1                	mov    %eax,%ecx
f0116d05:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0116d0c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116d11:	0f b6 c0             	movzbl %al,%eax
f0116d14:	c1 e0 04             	shl    $0x4,%eax
f0116d17:	89 c2                	mov    %eax,%edx
f0116d19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d1c:	01 d0                	add    %edx,%eax
f0116d1e:	48                   	dec    %eax
f0116d1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116d22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116d25:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d2a:	f7 75 ec             	divl   -0x14(%ebp)
f0116d2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116d30:	29 d0                	sub    %edx,%eax
f0116d32:	01 c1                	add    %eax,%ecx
f0116d34:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0116d3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116d3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116d43:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0116d46:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116d49:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d4e:	f7 75 e4             	divl   -0x1c(%ebp)
f0116d51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116d54:	29 d0                	sub    %edx,%eax
f0116d56:	01 c8                	add    %ecx,%eax
f0116d58:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0116d5d:	29 c2                	sub    %eax,%edx
f0116d5f:	89 d0                	mov    %edx,%eax
f0116d61:	83 ec 0c             	sub    $0xc,%esp
f0116d64:	50                   	push   %eax
f0116d65:	e8 8a fe fe ff       	call   f0106bf4 <kmalloc>
f0116d6a:	83 c4 10             	add    $0x10,%esp
f0116d6d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f0116d73:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0116d79:	85 c0                	test   %eax,%eax
f0116d7b:	74 17                	je     f0116d94 <test_kmalloc_firstfit2+0x108>
f0116d7d:	83 ec 04             	sub    $0x4,%esp
f0116d80:	68 00 06 13 f0       	push   $0xf0130600
f0116d85:	68 94 03 00 00       	push   $0x394
f0116d8a:	68 be ff 12 f0       	push   $0xf012ffbe
f0116d8f:	e8 12 94 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116d94:	e8 17 48 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116d99:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d9c:	e8 03 c7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116da1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116da4:	83 ec 0c             	sub    $0xc,%esp
f0116da7:	68 00 fc 1f 00       	push   $0x1ffc00
f0116dac:	e8 43 fe fe ff       	call   f0106bf4 <kmalloc>
f0116db1:	83 c4 10             	add    $0x10,%esp
f0116db4:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0116dba:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0116dc0:	89 c1                	mov    %eax,%ecx
f0116dc2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116dc9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116dce:	0f b6 d0             	movzbl %al,%edx
f0116dd1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116dd4:	01 d0                	add    %edx,%eax
f0116dd6:	48                   	dec    %eax
f0116dd7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0116dda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ddd:	ba 00 00 00 00       	mov    $0x0,%edx
f0116de2:	f7 75 d4             	divl   -0x2c(%ebp)
f0116de5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116de8:	29 d0                	sub    %edx,%eax
f0116dea:	89 c3                	mov    %eax,%ebx
f0116dec:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0116df3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116df8:	0f b6 c0             	movzbl %al,%eax
f0116dfb:	c1 e0 04             	shl    $0x4,%eax
f0116dfe:	89 c2                	mov    %eax,%edx
f0116e00:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116e03:	01 d0                	add    %edx,%eax
f0116e05:	48                   	dec    %eax
f0116e06:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116e09:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116e0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e11:	f7 75 cc             	divl   -0x34(%ebp)
f0116e14:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116e17:	29 d0                	sub    %edx,%eax
f0116e19:	01 c3                	add    %eax,%ebx
f0116e1b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0116e22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116e25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116e2a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116e2d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116e30:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e35:	f7 75 c4             	divl   -0x3c(%ebp)
f0116e38:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116e3b:	29 d0                	sub    %edx,%eax
f0116e3d:	01 d8                	add    %ebx,%eax
f0116e3f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0116e44:	39 c1                	cmp    %eax,%ecx
f0116e46:	74 17                	je     f0116e5f <test_kmalloc_firstfit2+0x1d3>
f0116e48:	83 ec 04             	sub    $0x4,%esp
f0116e4b:	68 d8 03 13 f0       	push   $0xf01303d8
f0116e50:	68 9e 03 00 00       	push   $0x39e
f0116e55:	68 be ff 12 f0       	push   $0xf012ffbe
f0116e5a:	e8 47 93 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e5f:	e8 40 c6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116e64:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116e67:	74 17                	je     f0116e80 <test_kmalloc_firstfit2+0x1f4>
f0116e69:	83 ec 04             	sub    $0x4,%esp
f0116e6c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116e71:	68 9f 03 00 00       	push   $0x39f
f0116e76:	68 be ff 12 f0       	push   $0xf012ffbe
f0116e7b:	e8 26 93 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0116e80:	e8 2b 47 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116e85:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116e88:	29 c2                	sub    %eax,%edx
f0116e8a:	89 d0                	mov    %edx,%eax
f0116e8c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116e91:	74 17                	je     f0116eaa <test_kmalloc_firstfit2+0x21e>
f0116e93:	83 ec 04             	sub    $0x4,%esp
f0116e96:	68 08 04 13 f0       	push   $0xf0130408
f0116e9b:	68 a0 03 00 00       	push   $0x3a0
f0116ea0:	68 be ff 12 f0       	push   $0xf012ffbe
f0116ea5:	e8 fc 92 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116eaa:	e8 01 47 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116eaf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116eb2:	e8 ed c5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116eb7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0116eba:	83 ec 0c             	sub    $0xc,%esp
f0116ebd:	68 00 fc 1f 00       	push   $0x1ffc00
f0116ec2:	e8 2d fd fe ff       	call   f0106bf4 <kmalloc>
f0116ec7:	83 c4 10             	add    $0x10,%esp
f0116eca:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f0116ed0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0116ed6:	89 c1                	mov    %eax,%ecx
f0116ed8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0116edf:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116ee4:	0f b6 d0             	movzbl %al,%edx
f0116ee7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116eea:	01 d0                	add    %edx,%eax
f0116eec:	48                   	dec    %eax
f0116eed:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0116ef0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ef3:	ba 00 00 00 00       	mov    $0x0,%edx
f0116ef8:	f7 75 bc             	divl   -0x44(%ebp)
f0116efb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116efe:	29 d0                	sub    %edx,%eax
f0116f00:	89 c3                	mov    %eax,%ebx
f0116f02:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0116f09:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116f0e:	0f b6 c0             	movzbl %al,%eax
f0116f11:	c1 e0 04             	shl    $0x4,%eax
f0116f14:	89 c2                	mov    %eax,%edx
f0116f16:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f19:	01 d0                	add    %edx,%eax
f0116f1b:	48                   	dec    %eax
f0116f1c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0116f1f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f22:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f27:	f7 75 b4             	divl   -0x4c(%ebp)
f0116f2a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116f2d:	29 d0                	sub    %edx,%eax
f0116f2f:	01 c3                	add    %eax,%ebx
f0116f31:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0116f38:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116f40:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0116f43:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f46:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f4b:	f7 75 ac             	divl   -0x54(%ebp)
f0116f4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f51:	29 d0                	sub    %edx,%eax
f0116f53:	01 d8                	add    %ebx,%eax
f0116f55:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0116f5a:	39 c1                	cmp    %eax,%ecx
f0116f5c:	74 17                	je     f0116f75 <test_kmalloc_firstfit2+0x2e9>
f0116f5e:	83 ec 04             	sub    $0x4,%esp
f0116f61:	68 d8 03 13 f0       	push   $0xf01303d8
f0116f66:	68 a6 03 00 00       	push   $0x3a6
f0116f6b:	68 be ff 12 f0       	push   $0xf012ffbe
f0116f70:	e8 31 92 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116f75:	e8 2a c5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116f7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116f7d:	74 17                	je     f0116f96 <test_kmalloc_firstfit2+0x30a>
f0116f7f:	83 ec 04             	sub    $0x4,%esp
f0116f82:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0116f87:	68 a7 03 00 00       	push   $0x3a7
f0116f8c:	68 be ff 12 f0       	push   $0xf012ffbe
f0116f91:	e8 10 92 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0116f96:	e8 15 46 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116f9b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116f9e:	29 c2                	sub    %eax,%edx
f0116fa0:	89 d0                	mov    %edx,%eax
f0116fa2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116fa7:	74 17                	je     f0116fc0 <test_kmalloc_firstfit2+0x334>
f0116fa9:	83 ec 04             	sub    $0x4,%esp
f0116fac:	68 08 04 13 f0       	push   $0xf0130408
f0116fb1:	68 a8 03 00 00       	push   $0x3a8
f0116fb6:	68 be ff 12 f0       	push   $0xf012ffbe
f0116fbb:	e8 e6 91 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116fc0:	e8 eb 45 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0116fc5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116fc8:	e8 d7 c4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0116fcd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0116fd0:	83 ec 0c             	sub    $0xc,%esp
f0116fd3:	68 00 08 00 00       	push   $0x800
f0116fd8:	e8 17 fc fe ff       	call   f0106bf4 <kmalloc>
f0116fdd:	83 c4 10             	add    $0x10,%esp
f0116fe0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0116fe6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0116fec:	89 c1                	mov    %eax,%ecx
f0116fee:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0116ff5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0116ffa:	0f b6 d0             	movzbl %al,%edx
f0116ffd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117000:	01 d0                	add    %edx,%eax
f0117002:	48                   	dec    %eax
f0117003:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0117006:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117009:	ba 00 00 00 00       	mov    $0x0,%edx
f011700e:	f7 75 a4             	divl   -0x5c(%ebp)
f0117011:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117014:	29 d0                	sub    %edx,%eax
f0117016:	89 c3                	mov    %eax,%ebx
f0117018:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011701f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117024:	0f b6 c0             	movzbl %al,%eax
f0117027:	c1 e0 04             	shl    $0x4,%eax
f011702a:	89 c2                	mov    %eax,%edx
f011702c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011702f:	01 d0                	add    %edx,%eax
f0117031:	48                   	dec    %eax
f0117032:	89 45 98             	mov    %eax,-0x68(%ebp)
f0117035:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117038:	ba 00 00 00 00       	mov    $0x0,%edx
f011703d:	f7 75 9c             	divl   -0x64(%ebp)
f0117040:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117043:	29 d0                	sub    %edx,%eax
f0117045:	01 c3                	add    %eax,%ebx
f0117047:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011704e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117051:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117056:	89 45 90             	mov    %eax,-0x70(%ebp)
f0117059:	8b 45 90             	mov    -0x70(%ebp),%eax
f011705c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117061:	f7 75 94             	divl   -0x6c(%ebp)
f0117064:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117067:	29 d0                	sub    %edx,%eax
f0117069:	01 d8                	add    %ebx,%eax
f011706b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117070:	39 c1                	cmp    %eax,%ecx
f0117072:	73 17                	jae    f011708b <test_kmalloc_firstfit2+0x3ff>
f0117074:	83 ec 04             	sub    $0x4,%esp
f0117077:	68 d8 03 13 f0       	push   $0xf01303d8
f011707c:	68 ae 03 00 00       	push   $0x3ae
f0117081:	68 be ff 12 f0       	push   $0xf012ffbe
f0117086:	e8 1b 91 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011708b:	e8 14 c4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117090:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117093:	74 17                	je     f01170ac <test_kmalloc_firstfit2+0x420>
f0117095:	83 ec 04             	sub    $0x4,%esp
f0117098:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011709d:	68 af 03 00 00       	push   $0x3af
f01170a2:	68 be ff 12 f0       	push   $0xf012ffbe
f01170a7:	e8 fa 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f01170ac:	e8 ff 44 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01170b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01170b4:	29 c2                	sub    %eax,%edx
f01170b6:	89 d0                	mov    %edx,%eax
f01170b8:	83 f8 01             	cmp    $0x1,%eax
f01170bb:	74 17                	je     f01170d4 <test_kmalloc_firstfit2+0x448>
f01170bd:	83 ec 04             	sub    $0x4,%esp
f01170c0:	68 08 04 13 f0       	push   $0xf0130408
f01170c5:	68 b0 03 00 00       	push   $0x3b0
f01170ca:	68 be ff 12 f0       	push   $0xf012ffbe
f01170cf:	e8 d2 90 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01170d4:	e8 d7 44 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01170d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170dc:	e8 c3 c3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01170e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01170e4:	83 ec 0c             	sub    $0xc,%esp
f01170e7:	68 00 08 00 00       	push   $0x800
f01170ec:	e8 03 fb fe ff       	call   f0106bf4 <kmalloc>
f01170f1:	83 c4 10             	add    $0x10,%esp
f01170f4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f01170fa:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117100:	89 c1                	mov    %eax,%ecx
f0117102:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0117109:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011710e:	0f b6 d0             	movzbl %al,%edx
f0117111:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117114:	01 d0                	add    %edx,%eax
f0117116:	48                   	dec    %eax
f0117117:	89 45 88             	mov    %eax,-0x78(%ebp)
f011711a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011711d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117122:	f7 75 8c             	divl   -0x74(%ebp)
f0117125:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117128:	29 d0                	sub    %edx,%eax
f011712a:	89 c3                	mov    %eax,%ebx
f011712c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0117133:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117138:	0f b6 c0             	movzbl %al,%eax
f011713b:	c1 e0 04             	shl    $0x4,%eax
f011713e:	89 c2                	mov    %eax,%edx
f0117140:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117143:	01 d0                	add    %edx,%eax
f0117145:	48                   	dec    %eax
f0117146:	89 45 80             	mov    %eax,-0x80(%ebp)
f0117149:	8b 45 80             	mov    -0x80(%ebp),%eax
f011714c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117151:	f7 75 84             	divl   -0x7c(%ebp)
f0117154:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117157:	29 d0                	sub    %edx,%eax
f0117159:	01 c3                	add    %eax,%ebx
f011715b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0117162:	10 00 00 
f0117165:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011716b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117170:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0117176:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011717c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117181:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0117187:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011718d:	29 d0                	sub    %edx,%eax
f011718f:	01 d8                	add    %ebx,%eax
f0117191:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117196:	39 c1                	cmp    %eax,%ecx
f0117198:	74 17                	je     f01171b1 <test_kmalloc_firstfit2+0x525>
f011719a:	83 ec 04             	sub    $0x4,%esp
f011719d:	68 d8 03 13 f0       	push   $0xf01303d8
f01171a2:	68 b6 03 00 00       	push   $0x3b6
f01171a7:	68 be ff 12 f0       	push   $0xf012ffbe
f01171ac:	e8 f5 8f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01171b1:	e8 ee c2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01171b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01171b9:	74 17                	je     f01171d2 <test_kmalloc_firstfit2+0x546>
f01171bb:	83 ec 04             	sub    $0x4,%esp
f01171be:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01171c3:	68 b7 03 00 00       	push   $0x3b7
f01171c8:	68 be ff 12 f0       	push   $0xf012ffbe
f01171cd:	e8 d4 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f01171d2:	e8 d9 43 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01171d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171da:	29 c2                	sub    %eax,%edx
f01171dc:	89 d0                	mov    %edx,%eax
f01171de:	83 f8 01             	cmp    $0x1,%eax
f01171e1:	74 17                	je     f01171fa <test_kmalloc_firstfit2+0x56e>
f01171e3:	83 ec 04             	sub    $0x4,%esp
f01171e6:	68 08 04 13 f0       	push   $0xf0130408
f01171eb:	68 b8 03 00 00       	push   $0x3b8
f01171f0:	68 be ff 12 f0       	push   $0xf012ffbe
f01171f5:	e8 ac 8f fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f01171fa:	e8 b1 43 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01171ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117202:	e8 9d c2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117207:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011720a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0117210:	83 ec 0c             	sub    $0xc,%esp
f0117213:	50                   	push   %eax
f0117214:	e8 f5 f9 fe ff       	call   f0106c0e <kfree>
f0117219:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011721c:	e8 83 c2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117221:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117224:	74 17                	je     f011723d <test_kmalloc_firstfit2+0x5b1>
f0117226:	83 ec 04             	sub    $0x4,%esp
f0117229:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011722e:	68 be 03 00 00       	push   $0x3be
f0117233:	68 be ff 12 f0       	push   $0xf012ffbe
f0117238:	e8 69 8f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011723d:	e8 6e 43 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117242:	2b 45 dc             	sub    -0x24(%ebp),%eax
f0117245:	83 f8 01             	cmp    $0x1,%eax
f0117248:	74 17                	je     f0117261 <test_kmalloc_firstfit2+0x5d5>
f011724a:	83 ec 04             	sub    $0x4,%esp
f011724d:	68 1b 04 13 f0       	push   $0xf013041b
f0117252:	68 bf 03 00 00       	push   $0x3bf
f0117257:	68 be ff 12 f0       	push   $0xf012ffbe
f011725c:	e8 45 8f fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117261:	e8 4a 43 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117266:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117269:	e8 36 c2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011726e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117271:	83 ec 0c             	sub    $0xc,%esp
f0117274:	68 00 1c 00 00       	push   $0x1c00
f0117279:	e8 76 f9 fe ff       	call   f0106bf4 <kmalloc>
f011727e:	83 c4 10             	add    $0x10,%esp
f0117281:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f0117287:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011728d:	89 c1                	mov    %eax,%ecx
f011728f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0117296:	10 00 00 
f0117299:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011729e:	0f b6 d0             	movzbl %al,%edx
f01172a1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01172a7:	01 d0                	add    %edx,%eax
f01172a9:	48                   	dec    %eax
f01172aa:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01172b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01172b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01172bb:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01172c1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01172c7:	29 d0                	sub    %edx,%eax
f01172c9:	89 c3                	mov    %eax,%ebx
f01172cb:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01172d2:	10 00 00 
f01172d5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01172da:	0f b6 c0             	movzbl %al,%eax
f01172dd:	c1 e0 04             	shl    $0x4,%eax
f01172e0:	89 c2                	mov    %eax,%edx
f01172e2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01172e8:	01 d0                	add    %edx,%eax
f01172ea:	48                   	dec    %eax
f01172eb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01172f1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01172f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01172fc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0117302:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117308:	29 d0                	sub    %edx,%eax
f011730a:	01 c3                	add    %eax,%ebx
f011730c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0117313:	10 00 00 
f0117316:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011731c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117321:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0117327:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011732d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117332:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0117338:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011733e:	29 d0                	sub    %edx,%eax
f0117340:	01 d8                	add    %ebx,%eax
f0117342:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117347:	39 c1                	cmp    %eax,%ecx
f0117349:	74 17                	je     f0117362 <test_kmalloc_firstfit2+0x6d6>
f011734b:	83 ec 04             	sub    $0x4,%esp
f011734e:	68 d8 03 13 f0       	push   $0xf01303d8
f0117353:	68 c5 03 00 00       	push   $0x3c5
f0117358:	68 be ff 12 f0       	push   $0xf012ffbe
f011735d:	e8 44 8e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117362:	e8 3d c1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117367:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011736a:	74 17                	je     f0117383 <test_kmalloc_firstfit2+0x6f7>
f011736c:	83 ec 04             	sub    $0x4,%esp
f011736f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0117374:	68 c6 03 00 00       	push   $0x3c6
f0117379:	68 be ff 12 f0       	push   $0xf012ffbe
f011737e:	e8 23 8e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f0117383:	e8 28 42 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117388:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011738b:	29 c2                	sub    %eax,%edx
f011738d:	89 d0                	mov    %edx,%eax
f011738f:	83 f8 02             	cmp    $0x2,%eax
f0117392:	74 17                	je     f01173ab <test_kmalloc_firstfit2+0x71f>
f0117394:	83 ec 04             	sub    $0x4,%esp
f0117397:	68 08 04 13 f0       	push   $0xf0130408
f011739c:	68 c7 03 00 00       	push   $0x3c7
f01173a1:	68 be ff 12 f0       	push   $0xf012ffbe
f01173a6:	e8 fb 8d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01173ab:	e8 00 42 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01173b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173b3:	e8 ec c0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01173b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f01173bb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01173c1:	83 ec 0c             	sub    $0xc,%esp
f01173c4:	50                   	push   %eax
f01173c5:	e8 44 f8 fe ff       	call   f0106c0e <kfree>
f01173ca:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01173cd:	e8 d2 c0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01173d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01173d5:	74 17                	je     f01173ee <test_kmalloc_firstfit2+0x762>
f01173d7:	83 ec 04             	sub    $0x4,%esp
f01173da:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01173df:	68 cd 03 00 00       	push   $0x3cd
f01173e4:	68 be ff 12 f0       	push   $0xf012ffbe
f01173e9:	e8 b8 8d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f01173ee:	e8 bd 41 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01173f3:	2b 45 dc             	sub    -0x24(%ebp),%eax
f01173f6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01173fb:	74 17                	je     f0117414 <test_kmalloc_firstfit2+0x788>
f01173fd:	83 ec 04             	sub    $0x4,%esp
f0117400:	68 1b 04 13 f0       	push   $0xf013041b
f0117405:	68 ce 03 00 00       	push   $0x3ce
f011740a:	68 be ff 12 f0       	push   $0xf012ffbe
f011740f:	e8 92 8d fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117414:	e8 97 41 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117419:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011741c:	e8 83 c0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117421:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117424:	83 ec 0c             	sub    $0xc,%esp
f0117427:	68 00 fc 2f 00       	push   $0x2ffc00
f011742c:	e8 c3 f7 fe ff       	call   f0106bf4 <kmalloc>
f0117431:	83 c4 10             	add    $0x10,%esp
f0117434:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011743a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0117440:	89 c1                	mov    %eax,%ecx
f0117442:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0117449:	10 00 00 
f011744c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117451:	0f b6 d0             	movzbl %al,%edx
f0117454:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011745a:	01 d0                	add    %edx,%eax
f011745c:	48                   	dec    %eax
f011745d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0117463:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117469:	ba 00 00 00 00       	mov    $0x0,%edx
f011746e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0117474:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011747a:	29 d0                	sub    %edx,%eax
f011747c:	89 c3                	mov    %eax,%ebx
f011747e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0117485:	10 00 00 
f0117488:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011748d:	0f b6 c0             	movzbl %al,%eax
f0117490:	c1 e0 04             	shl    $0x4,%eax
f0117493:	89 c2                	mov    %eax,%edx
f0117495:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011749b:	01 d0                	add    %edx,%eax
f011749d:	48                   	dec    %eax
f011749e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01174a4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01174aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01174af:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01174b5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01174bb:	29 d0                	sub    %edx,%eax
f01174bd:	01 c3                	add    %eax,%ebx
f01174bf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01174c6:	10 00 00 
f01174c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01174cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01174d4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01174da:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01174e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01174e5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01174eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01174f1:	29 d0                	sub    %edx,%eax
f01174f3:	01 d8                	add    %ebx,%eax
f01174f5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01174fa:	39 c1                	cmp    %eax,%ecx
f01174fc:	74 17                	je     f0117515 <test_kmalloc_firstfit2+0x889>
f01174fe:	83 ec 04             	sub    $0x4,%esp
f0117501:	68 d8 03 13 f0       	push   $0xf01303d8
f0117506:	68 d4 03 00 00       	push   $0x3d4
f011750b:	68 be ff 12 f0       	push   $0xf012ffbe
f0117510:	e8 91 8c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117515:	e8 8a bf fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011751a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011751d:	74 17                	je     f0117536 <test_kmalloc_firstfit2+0x8aa>
f011751f:	83 ec 04             	sub    $0x4,%esp
f0117522:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0117527:	68 d5 03 00 00       	push   $0x3d5
f011752c:	68 be ff 12 f0       	push   $0xf012ffbe
f0117531:	e8 70 8c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0117536:	e8 75 40 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011753b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011753e:	29 c2                	sub    %eax,%edx
f0117540:	89 d0                	mov    %edx,%eax
f0117542:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117547:	74 17                	je     f0117560 <test_kmalloc_firstfit2+0x8d4>
f0117549:	83 ec 04             	sub    $0x4,%esp
f011754c:	68 08 04 13 f0       	push   $0xf0130408
f0117551:	68 d6 03 00 00       	push   $0x3d6
f0117556:	68 be ff 12 f0       	push   $0xf012ffbe
f011755b:	e8 46 8c fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0117560:	e8 4b 40 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117565:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117568:	e8 37 bf fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011756d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0117570:	83 ec 0c             	sub    $0xc,%esp
f0117573:	68 00 18 20 00       	push   $0x201800
f0117578:	e8 77 f6 fe ff       	call   f0106bf4 <kmalloc>
f011757d:	83 c4 10             	add    $0x10,%esp
f0117580:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0117586:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011758c:	89 c1                	mov    %eax,%ecx
f011758e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0117595:	10 00 00 
f0117598:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011759d:	0f b6 d0             	movzbl %al,%edx
f01175a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01175a6:	01 d0                	add    %edx,%eax
f01175a8:	48                   	dec    %eax
f01175a9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01175af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01175b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01175ba:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01175c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01175c6:	29 d0                	sub    %edx,%eax
f01175c8:	89 c3                	mov    %eax,%ebx
f01175ca:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01175d1:	10 00 00 
f01175d4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01175d9:	0f b6 c0             	movzbl %al,%eax
f01175dc:	c1 e0 04             	shl    $0x4,%eax
f01175df:	89 c2                	mov    %eax,%edx
f01175e1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01175e7:	01 d0                	add    %edx,%eax
f01175e9:	48                   	dec    %eax
f01175ea:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01175f0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01175f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01175fb:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0117601:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117607:	29 d0                	sub    %edx,%eax
f0117609:	01 c3                	add    %eax,%ebx
f011760b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0117612:	10 00 00 
f0117615:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011761b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117620:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0117626:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011762c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117631:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0117637:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011763d:	29 d0                	sub    %edx,%eax
f011763f:	01 d8                	add    %ebx,%eax
f0117641:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117646:	39 c1                	cmp    %eax,%ecx
f0117648:	74 17                	je     f0117661 <test_kmalloc_firstfit2+0x9d5>
f011764a:	83 ec 04             	sub    $0x4,%esp
f011764d:	68 d8 03 13 f0       	push   $0xf01303d8
f0117652:	68 dc 03 00 00       	push   $0x3dc
f0117657:	68 be ff 12 f0       	push   $0xf012ffbe
f011765c:	e8 45 8b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117661:	e8 3e be fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117666:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117669:	74 17                	je     f0117682 <test_kmalloc_firstfit2+0x9f6>
f011766b:	83 ec 04             	sub    $0x4,%esp
f011766e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0117673:	68 dd 03 00 00       	push   $0x3dd
f0117678:	68 be ff 12 f0       	push   $0xf012ffbe
f011767d:	e8 24 8b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f0117682:	e8 29 3f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117687:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011768a:	29 c2                	sub    %eax,%edx
f011768c:	89 d0                	mov    %edx,%eax
f011768e:	3d 02 02 00 00       	cmp    $0x202,%eax
f0117693:	74 17                	je     f01176ac <test_kmalloc_firstfit2+0xa20>
f0117695:	83 ec 04             	sub    $0x4,%esp
f0117698:	68 08 04 13 f0       	push   $0xf0130408
f011769d:	68 de 03 00 00       	push   $0x3de
f01176a2:	68 be ff 12 f0       	push   $0xf012ffbe
f01176a7:	e8 fa 8a fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01176ac:	e8 ff 3e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01176b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176b4:	e8 eb bd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01176b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f01176bc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01176c2:	83 ec 0c             	sub    $0xc,%esp
f01176c5:	50                   	push   %eax
f01176c6:	e8 43 f5 fe ff       	call   f0106c0e <kfree>
f01176cb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01176ce:	e8 d1 bd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01176d3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01176d6:	74 17                	je     f01176ef <test_kmalloc_firstfit2+0xa63>
f01176d8:	83 ec 04             	sub    $0x4,%esp
f01176db:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01176e0:	68 e4 03 00 00       	push   $0x3e4
f01176e5:	68 be ff 12 f0       	push   $0xf012ffbe
f01176ea:	e8 b7 8a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f01176ef:	e8 bc 3e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01176f4:	2b 45 dc             	sub    -0x24(%ebp),%eax
f01176f7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01176fc:	74 17                	je     f0117715 <test_kmalloc_firstfit2+0xa89>
f01176fe:	83 ec 04             	sub    $0x4,%esp
f0117701:	68 1b 04 13 f0       	push   $0xf013041b
f0117706:	68 e5 03 00 00       	push   $0x3e5
f011770b:	68 be ff 12 f0       	push   $0xf012ffbe
f0117710:	e8 91 8a fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f0117715:	e8 96 3e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011771a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011771d:	e8 82 bd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117722:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f0117725:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011772b:	83 ec 0c             	sub    $0xc,%esp
f011772e:	50                   	push   %eax
f011772f:	e8 da f4 fe ff       	call   f0106c0e <kfree>
f0117734:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0117737:	e8 74 3e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011773c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011773f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117744:	74 17                	je     f011775d <test_kmalloc_firstfit2+0xad1>
f0117746:	83 ec 04             	sub    $0x4,%esp
f0117749:	68 1b 04 13 f0       	push   $0xf013041b
f011774e:	68 eb 03 00 00       	push   $0x3eb
f0117753:	68 be ff 12 f0       	push   $0xf012ffbe
f0117758:	e8 49 8a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011775d:	e8 42 bd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117762:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117765:	74 17                	je     f011777e <test_kmalloc_firstfit2+0xaf2>
f0117767:	83 ec 04             	sub    $0x4,%esp
f011776a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011776f:	68 ec 03 00 00       	push   $0x3ec
f0117774:	68 be ff 12 f0       	push   $0xf012ffbe
f0117779:	e8 28 8a fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011777e:	e8 2d 3e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117783:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117786:	e8 19 bd fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011778b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011778e:	83 ec 0c             	sub    $0xc,%esp
f0117791:	68 00 fc 4f 00       	push   $0x4ffc00
f0117796:	e8 59 f4 fe ff       	call   f0106bf4 <kmalloc>
f011779b:	83 c4 10             	add    $0x10,%esp
f011779e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f01177a4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01177aa:	89 c1                	mov    %eax,%ecx
f01177ac:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01177b3:	10 00 00 
f01177b6:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01177bb:	0f b6 d0             	movzbl %al,%edx
f01177be:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01177c4:	01 d0                	add    %edx,%eax
f01177c6:	48                   	dec    %eax
f01177c7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01177cd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01177d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01177d8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01177de:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01177e4:	29 d0                	sub    %edx,%eax
f01177e6:	89 c3                	mov    %eax,%ebx
f01177e8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01177ef:	10 00 00 
f01177f2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01177f7:	0f b6 c0             	movzbl %al,%eax
f01177fa:	c1 e0 04             	shl    $0x4,%eax
f01177fd:	89 c2                	mov    %eax,%edx
f01177ff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117805:	01 d0                	add    %edx,%eax
f0117807:	48                   	dec    %eax
f0117808:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011780e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117814:	ba 00 00 00 00       	mov    $0x0,%edx
f0117819:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011781f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117825:	29 d0                	sub    %edx,%eax
f0117827:	01 c3                	add    %eax,%ebx
f0117829:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0117830:	10 00 00 
f0117833:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117839:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011783e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0117844:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011784a:	ba 00 00 00 00       	mov    $0x0,%edx
f011784f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0117855:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011785b:	29 d0                	sub    %edx,%eax
f011785d:	01 d8                	add    %ebx,%eax
f011785f:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0117864:	39 c1                	cmp    %eax,%ecx
f0117866:	74 17                	je     f011787f <test_kmalloc_firstfit2+0xbf3>
f0117868:	83 ec 04             	sub    $0x4,%esp
f011786b:	68 d8 03 13 f0       	push   $0xf01303d8
f0117870:	68 f2 03 00 00       	push   $0x3f2
f0117875:	68 be ff 12 f0       	push   $0xf012ffbe
f011787a:	e8 27 89 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011787f:	e8 20 bc fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117884:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117887:	74 17                	je     f01178a0 <test_kmalloc_firstfit2+0xc14>
f0117889:	83 ec 04             	sub    $0x4,%esp
f011788c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0117891:	68 f3 03 00 00       	push   $0x3f3
f0117896:	68 be ff 12 f0       	push   $0xf012ffbe
f011789b:	e8 06 89 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f01178a0:	e8 0b 3d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01178a5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01178a8:	29 c2                	sub    %eax,%edx
f01178aa:	89 d0                	mov    %edx,%eax
f01178ac:	3d 00 05 00 00       	cmp    $0x500,%eax
f01178b1:	74 17                	je     f01178ca <test_kmalloc_firstfit2+0xc3e>
f01178b3:	83 ec 04             	sub    $0x4,%esp
f01178b6:	68 08 04 13 f0       	push   $0xf0130408
f01178bb:	68 f4 03 00 00       	push   $0x3f4
f01178c0:	68 be ff 12 f0       	push   $0xf012ffbe
f01178c5:	e8 dc 88 fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01178ca:	e8 e1 3c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01178cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178d2:	e8 cd bb fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01178d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f01178da:	83 ec 0c             	sub    $0xc,%esp
f01178dd:	68 00 fc 2f 00       	push   $0x2ffc00
f01178e2:	e8 0d f3 fe ff       	call   f0106bf4 <kmalloc>
f01178e7:	83 c4 10             	add    $0x10,%esp
f01178ea:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01178f0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01178f6:	89 c1                	mov    %eax,%ecx
f01178f8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01178ff:	10 00 00 
f0117902:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117907:	0f b6 d0             	movzbl %al,%edx
f011790a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117910:	01 d0                	add    %edx,%eax
f0117912:	48                   	dec    %eax
f0117913:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0117919:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011791f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117924:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011792a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117930:	29 d0                	sub    %edx,%eax
f0117932:	89 c3                	mov    %eax,%ebx
f0117934:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011793b:	10 00 00 
f011793e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117943:	0f b6 c0             	movzbl %al,%eax
f0117946:	c1 e0 04             	shl    $0x4,%eax
f0117949:	89 c2                	mov    %eax,%edx
f011794b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117951:	01 d0                	add    %edx,%eax
f0117953:	48                   	dec    %eax
f0117954:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011795a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117960:	ba 00 00 00 00       	mov    $0x0,%edx
f0117965:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011796b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117971:	29 d0                	sub    %edx,%eax
f0117973:	01 c3                	add    %eax,%ebx
f0117975:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011797c:	10 00 00 
f011797f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117985:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011798a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0117990:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0117996:	ba 00 00 00 00       	mov    $0x0,%edx
f011799b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01179a1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01179a7:	29 d0                	sub    %edx,%eax
f01179a9:	01 d8                	add    %ebx,%eax
f01179ab:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01179b0:	39 c1                	cmp    %eax,%ecx
f01179b2:	74 17                	je     f01179cb <test_kmalloc_firstfit2+0xd3f>
f01179b4:	83 ec 04             	sub    $0x4,%esp
f01179b7:	68 d8 03 13 f0       	push   $0xf01303d8
f01179bc:	68 02 04 00 00       	push   $0x402
f01179c1:	68 be ff 12 f0       	push   $0xf012ffbe
f01179c6:	e8 db 87 fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01179cb:	e8 d4 ba fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01179d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01179d3:	74 17                	je     f01179ec <test_kmalloc_firstfit2+0xd60>
f01179d5:	83 ec 04             	sub    $0x4,%esp
f01179d8:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01179dd:	68 03 04 00 00       	push   $0x403
f01179e2:	68 be ff 12 f0       	push   $0xf012ffbe
f01179e7:	e8 ba 87 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f01179ec:	e8 bf 3b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01179f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01179f4:	29 c2                	sub    %eax,%edx
f01179f6:	89 d0                	mov    %edx,%eax
f01179f8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01179fd:	74 17                	je     f0117a16 <test_kmalloc_firstfit2+0xd8a>
f01179ff:	83 ec 04             	sub    $0x4,%esp
f0117a02:	68 08 04 13 f0       	push   $0xf0130408
f0117a07:	68 04 04 00 00       	push   $0x404
f0117a0c:	68 be ff 12 f0       	push   $0xf012ffbe
f0117a11:	e8 90 87 fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f0117a16:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0117a1d:	10 00 00 
f0117a20:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117a25:	0f b6 d0             	movzbl %al,%edx
f0117a28:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117a2e:	01 d0                	add    %edx,%eax
f0117a30:	48                   	dec    %eax
f0117a31:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0117a37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117a3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a42:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0117a48:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117a4e:	29 d0                	sub    %edx,%eax
f0117a50:	89 c1                	mov    %eax,%ecx
f0117a52:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0117a59:	10 00 00 
f0117a5c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117a61:	0f b6 c0             	movzbl %al,%eax
f0117a64:	c1 e0 04             	shl    $0x4,%eax
f0117a67:	89 c2                	mov    %eax,%edx
f0117a69:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117a6f:	01 d0                	add    %edx,%eax
f0117a71:	48                   	dec    %eax
f0117a72:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0117a78:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117a7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a83:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0117a89:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117a8f:	29 d0                	sub    %edx,%eax
f0117a91:	01 c1                	add    %eax,%ecx
f0117a93:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0117a9a:	10 00 00 
f0117a9d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117aa3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117aa8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0117aae:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117ab4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ab9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0117abf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117ac5:	29 d0                	sub    %edx,%eax
f0117ac7:	01 c8                	add    %ecx,%eax
f0117ac9:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0117ace:	29 c2                	sub    %eax,%edx
f0117ad0:	89 d0                	mov    %edx,%eax
f0117ad2:	83 ec 0c             	sub    $0xc,%esp
f0117ad5:	50                   	push   %eax
f0117ad6:	e8 19 f1 fe ff       	call   f0106bf4 <kmalloc>
f0117adb:	83 c4 10             	add    $0x10,%esp
f0117ade:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0117ae4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117aea:	85 c0                	test   %eax,%eax
f0117aec:	74 17                	je     f0117b05 <test_kmalloc_firstfit2+0xe79>
f0117aee:	83 ec 04             	sub    $0x4,%esp
f0117af1:	68 08 05 13 f0       	push   $0xf0130508
f0117af6:	68 0a 04 00 00       	push   $0x40a
f0117afb:	68 be ff 12 f0       	push   $0xf012ffbe
f0117b00:	e8 a1 86 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f0117b05:	83 ec 0c             	sub    $0xc,%esp
f0117b08:	68 48 06 13 f0       	push   $0xf0130648
f0117b0d:	e8 1b 91 fe ff       	call   f0100c2d <cprintf>
f0117b12:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0117b15:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0117b1a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117b1d:	5b                   	pop    %ebx
f0117b1e:	5f                   	pop    %edi
f0117b1f:	5d                   	pop    %ebp
f0117b20:	c3                   	ret    

f0117b21 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f0117b21:	55                   	push   %ebp
f0117b22:	89 e5                	mov    %esp,%ebp
f0117b24:	57                   	push   %edi
f0117b25:	53                   	push   %ebx
f0117b26:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f0117b2c:	83 ec 0c             	sub    $0xc,%esp
f0117b2f:	68 00 ff 12 f0       	push   $0xf012ff00
f0117b34:	e8 f4 90 fe ff       	call   f0100c2d <cprintf>
f0117b39:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117b3c:	83 ec 0c             	sub    $0xc,%esp
f0117b3f:	68 30 ff 12 f0       	push   $0xf012ff30
f0117b44:	e8 e4 90 fe ff       	call   f0100c2d <cprintf>
f0117b49:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117b4c:	83 ec 0c             	sub    $0xc,%esp
f0117b4f:	68 00 ff 12 f0       	push   $0xf012ff00
f0117b54:	e8 d4 90 fe ff       	call   f0100c2d <cprintf>
f0117b59:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0117b5c:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f0117b62:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0117b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b6c:	89 d7                	mov    %edx,%edi
f0117b6e:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0117b70:	e8 3b 3a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0117b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0117b78:	e8 27 b9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0117b7d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f0117b80:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f0117b87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117b8e:	eb 1f                	jmp    f0117baf <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0117b90:	83 ec 0c             	sub    $0xc,%esp
f0117b93:	68 00 00 20 00       	push   $0x200000
f0117b98:	e8 57 f0 fe ff       	call   f0106bf4 <kmalloc>
f0117b9d:	83 c4 10             	add    $0x10,%esp
f0117ba0:	89 c2                	mov    %eax,%edx
f0117ba2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117ba5:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f0117bac:	ff 45 f4             	incl   -0xc(%ebp)
f0117baf:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0117bb3:	7e db                	jle    f0117b90 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f0117bb5:	83 ec 0c             	sub    $0xc,%esp
f0117bb8:	68 00 b0 1f 00       	push   $0x1fb000
f0117bbd:	e8 32 f0 fe ff       	call   f0106bf4 <kmalloc>
f0117bc2:	83 c4 10             	add    $0x10,%esp
f0117bc5:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117bcb:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0117bd1:	89 c1                	mov    %eax,%ecx
f0117bd3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0117bda:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117bdf:	0f b6 d0             	movzbl %al,%edx
f0117be2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117be5:	01 d0                	add    %edx,%eax
f0117be7:	48                   	dec    %eax
f0117be8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0117beb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117bee:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bf3:	f7 75 e4             	divl   -0x1c(%ebp)
f0117bf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117bf9:	29 d0                	sub    %edx,%eax
f0117bfb:	89 c3                	mov    %eax,%ebx
f0117bfd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0117c04:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117c09:	0f b6 c0             	movzbl %al,%eax
f0117c0c:	c1 e0 04             	shl    $0x4,%eax
f0117c0f:	89 c2                	mov    %eax,%edx
f0117c11:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c14:	01 d0                	add    %edx,%eax
f0117c16:	48                   	dec    %eax
f0117c17:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0117c1a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117c1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c22:	f7 75 dc             	divl   -0x24(%ebp)
f0117c25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117c28:	29 d0                	sub    %edx,%eax
f0117c2a:	01 c3                	add    %eax,%ebx
f0117c2c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117c33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117c36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117c3e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c41:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c46:	f7 75 d4             	divl   -0x2c(%ebp)
f0117c49:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117c4c:	29 d0                	sub    %edx,%eax
f0117c4e:	01 d8                	add    %ebx,%eax
f0117c50:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117c55:	39 c1                	cmp    %eax,%ecx
f0117c57:	0f 85 c0 04 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117c5d:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f0117c63:	89 c1                	mov    %eax,%ecx
f0117c65:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117c6c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117c71:	0f b6 d0             	movzbl %al,%edx
f0117c74:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117c77:	01 d0                	add    %edx,%eax
f0117c79:	48                   	dec    %eax
f0117c7a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117c7d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c80:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c85:	f7 75 cc             	divl   -0x34(%ebp)
f0117c88:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117c8b:	29 d0                	sub    %edx,%eax
f0117c8d:	89 c3                	mov    %eax,%ebx
f0117c8f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117c96:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117c9b:	0f b6 c0             	movzbl %al,%eax
f0117c9e:	c1 e0 04             	shl    $0x4,%eax
f0117ca1:	89 c2                	mov    %eax,%edx
f0117ca3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117ca6:	01 d0                	add    %edx,%eax
f0117ca8:	48                   	dec    %eax
f0117ca9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117cac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cb4:	f7 75 c4             	divl   -0x3c(%ebp)
f0117cb7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117cba:	29 d0                	sub    %edx,%eax
f0117cbc:	01 c3                	add    %eax,%ebx
f0117cbe:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0117cc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117cc8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117ccd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0117cd0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cd8:	f7 75 bc             	divl   -0x44(%ebp)
f0117cdb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cde:	29 d0                	sub    %edx,%eax
f0117ce0:	01 d8                	add    %ebx,%eax
f0117ce2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117ce7:	39 c1                	cmp    %eax,%ecx
f0117ce9:	0f 85 2e 04 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117cef:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f0117cf5:	89 c1                	mov    %eax,%ecx
f0117cf7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0117cfe:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117d03:	0f b6 d0             	movzbl %al,%edx
f0117d06:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d09:	01 d0                	add    %edx,%eax
f0117d0b:	48                   	dec    %eax
f0117d0c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0117d0f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d12:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d17:	f7 75 b4             	divl   -0x4c(%ebp)
f0117d1a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d1d:	29 d0                	sub    %edx,%eax
f0117d1f:	89 c3                	mov    %eax,%ebx
f0117d21:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0117d28:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117d2d:	0f b6 c0             	movzbl %al,%eax
f0117d30:	c1 e0 04             	shl    $0x4,%eax
f0117d33:	89 c2                	mov    %eax,%edx
f0117d35:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117d38:	01 d0                	add    %edx,%eax
f0117d3a:	48                   	dec    %eax
f0117d3b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0117d3e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117d41:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d46:	f7 75 ac             	divl   -0x54(%ebp)
f0117d49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117d4c:	29 d0                	sub    %edx,%eax
f0117d4e:	01 c3                	add    %eax,%ebx
f0117d50:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0117d57:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117d5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d5f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0117d62:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117d65:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d6a:	f7 75 a4             	divl   -0x5c(%ebp)
f0117d6d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117d70:	29 d0                	sub    %edx,%eax
f0117d72:	01 d8                	add    %ebx,%eax
f0117d74:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117d79:	39 c1                	cmp    %eax,%ecx
f0117d7b:	0f 85 9c 03 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0117d81:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f0117d87:	89 c1                	mov    %eax,%ecx
f0117d89:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0117d90:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117d95:	0f b6 d0             	movzbl %al,%edx
f0117d98:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117d9b:	01 d0                	add    %edx,%eax
f0117d9d:	48                   	dec    %eax
f0117d9e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0117da1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117da4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117da9:	f7 75 9c             	divl   -0x64(%ebp)
f0117dac:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117daf:	29 d0                	sub    %edx,%eax
f0117db1:	89 c3                	mov    %eax,%ebx
f0117db3:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0117dba:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117dbf:	0f b6 c0             	movzbl %al,%eax
f0117dc2:	c1 e0 04             	shl    $0x4,%eax
f0117dc5:	89 c2                	mov    %eax,%edx
f0117dc7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117dca:	01 d0                	add    %edx,%eax
f0117dcc:	48                   	dec    %eax
f0117dcd:	89 45 90             	mov    %eax,-0x70(%ebp)
f0117dd0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117dd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dd8:	f7 75 94             	divl   -0x6c(%ebp)
f0117ddb:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117dde:	29 d0                	sub    %edx,%eax
f0117de0:	01 c3                	add    %eax,%ebx
f0117de2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0117de9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117dec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117df1:	89 45 88             	mov    %eax,-0x78(%ebp)
f0117df4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117df7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dfc:	f7 75 8c             	divl   -0x74(%ebp)
f0117dff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117e02:	29 d0                	sub    %edx,%eax
f0117e04:	01 d8                	add    %ebx,%eax
f0117e06:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117e0b:	39 c1                	cmp    %eax,%ecx
f0117e0d:	0f 85 0a 03 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0117e13:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f0117e19:	89 c1                	mov    %eax,%ecx
f0117e1b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0117e22:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117e27:	0f b6 d0             	movzbl %al,%edx
f0117e2a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117e2d:	01 d0                	add    %edx,%eax
f0117e2f:	48                   	dec    %eax
f0117e30:	89 45 80             	mov    %eax,-0x80(%ebp)
f0117e33:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117e36:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e3b:	f7 75 84             	divl   -0x7c(%ebp)
f0117e3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117e41:	29 d0                	sub    %edx,%eax
f0117e43:	89 c3                	mov    %eax,%ebx
f0117e45:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0117e4c:	10 00 00 
f0117e4f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117e54:	0f b6 c0             	movzbl %al,%eax
f0117e57:	c1 e0 04             	shl    $0x4,%eax
f0117e5a:	89 c2                	mov    %eax,%edx
f0117e5c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117e62:	01 d0                	add    %edx,%eax
f0117e64:	48                   	dec    %eax
f0117e65:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0117e6b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117e71:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e76:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0117e7c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117e82:	29 d0                	sub    %edx,%eax
f0117e84:	01 c3                	add    %eax,%ebx
f0117e86:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0117e8d:	10 00 00 
f0117e90:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117e96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e9b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0117ea1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117eac:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0117eb2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117eb8:	29 d0                	sub    %edx,%eax
f0117eba:	01 d8                	add    %ebx,%eax
f0117ebc:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0117ec1:	39 c1                	cmp    %eax,%ecx
f0117ec3:	0f 85 54 02 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0117ec9:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f0117ecf:	89 c1                	mov    %eax,%ecx
f0117ed1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0117ed8:	10 00 00 
f0117edb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117ee0:	0f b6 d0             	movzbl %al,%edx
f0117ee3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117ee9:	01 d0                	add    %edx,%eax
f0117eeb:	48                   	dec    %eax
f0117eec:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0117ef2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0117efd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0117f03:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117f09:	29 d0                	sub    %edx,%eax
f0117f0b:	89 c3                	mov    %eax,%ebx
f0117f0d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0117f14:	10 00 00 
f0117f17:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117f1c:	0f b6 c0             	movzbl %al,%eax
f0117f1f:	c1 e0 04             	shl    $0x4,%eax
f0117f22:	89 c2                	mov    %eax,%edx
f0117f24:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117f2a:	01 d0                	add    %edx,%eax
f0117f2c:	48                   	dec    %eax
f0117f2d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0117f33:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117f39:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f3e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0117f44:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117f4a:	29 d0                	sub    %edx,%eax
f0117f4c:	01 c3                	add    %eax,%ebx
f0117f4e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0117f55:	10 00 00 
f0117f58:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117f5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f63:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0117f69:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117f6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f74:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0117f7a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117f80:	29 d0                	sub    %edx,%eax
f0117f82:	01 d8                	add    %ebx,%eax
f0117f84:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0117f89:	39 c1                	cmp    %eax,%ecx
f0117f8b:	0f 85 8c 01 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f0117f91:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f0117f97:	89 c1                	mov    %eax,%ecx
f0117f99:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0117fa0:	10 00 00 
f0117fa3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117fa8:	0f b6 d0             	movzbl %al,%edx
f0117fab:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117fb1:	01 d0                	add    %edx,%eax
f0117fb3:	48                   	dec    %eax
f0117fb4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0117fba:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117fc0:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fc5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0117fcb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117fd1:	29 d0                	sub    %edx,%eax
f0117fd3:	89 c3                	mov    %eax,%ebx
f0117fd5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0117fdc:	10 00 00 
f0117fdf:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0117fe4:	0f b6 c0             	movzbl %al,%eax
f0117fe7:	c1 e0 04             	shl    $0x4,%eax
f0117fea:	89 c2                	mov    %eax,%edx
f0117fec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117ff2:	01 d0                	add    %edx,%eax
f0117ff4:	48                   	dec    %eax
f0117ff5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0117ffb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118001:	ba 00 00 00 00       	mov    $0x0,%edx
f0118006:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011800c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118012:	29 d0                	sub    %edx,%eax
f0118014:	01 c3                	add    %eax,%ebx
f0118016:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011801d:	10 00 00 
f0118020:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118026:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011802b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0118031:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118037:	ba 00 00 00 00       	mov    $0x0,%edx
f011803c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0118042:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118048:	29 d0                	sub    %edx,%eax
f011804a:	01 d8                	add    %ebx,%eax
f011804c:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118051:	39 c1                	cmp    %eax,%ecx
f0118053:	0f 85 c4 00 00 00    	jne    f011811d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f0118059:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011805f:	89 c1                	mov    %eax,%ecx
f0118061:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0118068:	10 00 00 
f011806b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118070:	0f b6 d0             	movzbl %al,%edx
f0118073:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118079:	01 d0                	add    %edx,%eax
f011807b:	48                   	dec    %eax
f011807c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0118082:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118088:	ba 00 00 00 00       	mov    $0x0,%edx
f011808d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0118093:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118099:	29 d0                	sub    %edx,%eax
f011809b:	89 c3                	mov    %eax,%ebx
f011809d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01180a4:	10 00 00 
f01180a7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01180ac:	0f b6 c0             	movzbl %al,%eax
f01180af:	c1 e0 04             	shl    $0x4,%eax
f01180b2:	89 c2                	mov    %eax,%edx
f01180b4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01180ba:	01 d0                	add    %edx,%eax
f01180bc:	48                   	dec    %eax
f01180bd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01180c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01180c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01180ce:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01180d4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01180da:	29 d0                	sub    %edx,%eax
f01180dc:	01 c3                	add    %eax,%ebx
f01180de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01180e5:	10 00 00 
f01180e8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01180ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01180f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01180ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0118104:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011810a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118110:	29 d0                	sub    %edx,%eax
f0118112:	01 d8                	add    %ebx,%eax
f0118114:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f0118119:	39 c1                	cmp    %eax,%ecx
f011811b:	74 17                	je     f0118134 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011811d:	83 ec 04             	sub    $0x4,%esp
f0118120:	68 94 06 13 f0       	push   $0xf0130694
f0118125:	68 2e 04 00 00       	push   $0x42e
f011812a:	68 be ff 12 f0       	push   $0xf012ffbe
f011812f:	e8 72 80 fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118134:	e8 6b b3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118139:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011813c:	74 17                	je     f0118155 <test_kmalloc_worstfit+0x634>
f011813e:	83 ec 04             	sub    $0x4,%esp
f0118141:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0118146:	68 30 04 00 00       	push   $0x430
f011814b:	68 be ff 12 f0       	push   $0xf012ffbe
f0118150:	e8 51 80 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118155:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118158:	e8 53 34 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011815d:	29 c3                	sub    %eax,%ebx
f011815f:	89 d8                	mov    %ebx,%eax
f0118161:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f0118166:	74 17                	je     f011817f <test_kmalloc_worstfit+0x65e>
f0118168:	83 ec 04             	sub    $0x4,%esp
f011816b:	68 7b 02 13 f0       	push   $0xf013027b
f0118170:	68 31 04 00 00       	push   $0x431
f0118175:	68 be ff 12 f0       	push   $0xf012ffbe
f011817a:	e8 27 80 fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011817f:	e8 2c 34 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118184:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f0118187:	e8 18 b3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011818c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011818f:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118195:	83 ec 0c             	sub    $0xc,%esp
f0118198:	50                   	push   %eax
f0118199:	e8 70 ea fe ff       	call   f0106c0e <kfree>
f011819e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f01181a1:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f01181a7:	83 ec 0c             	sub    $0xc,%esp
f01181aa:	50                   	push   %eax
f01181ab:	e8 5e ea fe ff       	call   f0106c0e <kfree>
f01181b0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01181b3:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f01181b9:	83 ec 0c             	sub    $0xc,%esp
f01181bc:	50                   	push   %eax
f01181bd:	e8 4c ea fe ff       	call   f0106c0e <kfree>
f01181c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f01181c5:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f01181cb:	83 ec 0c             	sub    $0xc,%esp
f01181ce:	50                   	push   %eax
f01181cf:	e8 3a ea fe ff       	call   f0106c0e <kfree>
f01181d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01181d7:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f01181dd:	83 ec 0c             	sub    $0xc,%esp
f01181e0:	50                   	push   %eax
f01181e1:	e8 28 ea fe ff       	call   f0106c0e <kfree>
f01181e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01181e9:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f01181ef:	83 ec 0c             	sub    $0xc,%esp
f01181f2:	50                   	push   %eax
f01181f3:	e8 16 ea fe ff       	call   f0106c0e <kfree>
f01181f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f01181fb:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f0118201:	83 ec 0c             	sub    $0xc,%esp
f0118204:	50                   	push   %eax
f0118205:	e8 04 ea fe ff       	call   f0106c0e <kfree>
f011820a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011820d:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0118213:	83 ec 0c             	sub    $0xc,%esp
f0118216:	50                   	push   %eax
f0118217:	e8 f2 e9 fe ff       	call   f0106c0e <kfree>
f011821c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011821f:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0118225:	83 ec 0c             	sub    $0xc,%esp
f0118228:	50                   	push   %eax
f0118229:	e8 e0 e9 fe ff       	call   f0106c0e <kfree>
f011822e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f0118231:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f0118237:	83 ec 0c             	sub    $0xc,%esp
f011823a:	50                   	push   %eax
f011823b:	e8 ce e9 fe ff       	call   f0106c0e <kfree>
f0118240:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f0118243:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0118249:	83 ec 0c             	sub    $0xc,%esp
f011824c:	50                   	push   %eax
f011824d:	e8 bc e9 fe ff       	call   f0106c0e <kfree>
f0118252:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f0118255:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011825b:	83 ec 0c             	sub    $0xc,%esp
f011825e:	50                   	push   %eax
f011825f:	e8 aa e9 fe ff       	call   f0106c0e <kfree>
f0118264:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f0118267:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011826d:	83 ec 0c             	sub    $0xc,%esp
f0118270:	50                   	push   %eax
f0118271:	e8 98 e9 fe ff       	call   f0106c0e <kfree>
f0118276:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f0118279:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011827f:	83 ec 0c             	sub    $0xc,%esp
f0118282:	50                   	push   %eax
f0118283:	e8 86 e9 fe ff       	call   f0106c0e <kfree>
f0118288:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011828b:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f0118291:	83 ec 0c             	sub    $0xc,%esp
f0118294:	50                   	push   %eax
f0118295:	e8 74 e9 fe ff       	call   f0106c0e <kfree>
f011829a:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011829d:	e8 02 b2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01182a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01182a5:	74 17                	je     f01182be <test_kmalloc_worstfit+0x79d>
f01182a7:	83 ec 04             	sub    $0x4,%esp
f01182aa:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01182af:	68 47 04 00 00       	push   $0x447
f01182b4:	68 be ff 12 f0       	push   $0xf012ffbe
f01182b9:	e8 e8 7e fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01182be:	e8 ed 32 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01182c3:	89 c2                	mov    %eax,%edx
f01182c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01182c8:	29 c2                	sub    %eax,%edx
f01182ca:	89 d0                	mov    %edx,%eax
f01182cc:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f01182d1:	74 17                	je     f01182ea <test_kmalloc_worstfit+0x7c9>
f01182d3:	83 ec 04             	sub    $0x4,%esp
f01182d6:	68 8c 02 13 f0       	push   $0xf013028c
f01182db:	68 48 04 00 00       	push   $0x448
f01182e0:	68 be ff 12 f0       	push   $0xf012ffbe
f01182e5:	e8 bc 7e fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f01182ea:	e8 c1 32 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01182ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01182f2:	e8 ad b1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01182f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f01182fa:	83 ec 0c             	sub    $0xc,%esp
f01182fd:	68 00 00 10 00       	push   $0x100000
f0118302:	e8 ed e8 fe ff       	call   f0106bf4 <kmalloc>
f0118307:	83 c4 10             	add    $0x10,%esp
f011830a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f0118310:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118317:	10 00 00 
f011831a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011831f:	0f b6 d0             	movzbl %al,%edx
f0118322:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118328:	01 d0                	add    %edx,%eax
f011832a:	48                   	dec    %eax
f011832b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118331:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118337:	ba 00 00 00 00       	mov    $0x0,%edx
f011833c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118342:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118348:	29 d0                	sub    %edx,%eax
f011834a:	89 c1                	mov    %eax,%ecx
f011834c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118353:	10 00 00 
f0118356:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011835b:	0f b6 c0             	movzbl %al,%eax
f011835e:	c1 e0 04             	shl    $0x4,%eax
f0118361:	89 c2                	mov    %eax,%edx
f0118363:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118369:	01 d0                	add    %edx,%eax
f011836b:	48                   	dec    %eax
f011836c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118372:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118378:	ba 00 00 00 00       	mov    $0x0,%edx
f011837d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118383:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118389:	29 d0                	sub    %edx,%eax
f011838b:	01 c1                	add    %eax,%ecx
f011838d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118394:	10 00 00 
f0118397:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011839d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183a2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01183a8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01183ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01183b3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01183b9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01183bf:	29 d0                	sub    %edx,%eax
f01183c1:	01 c8                	add    %ecx,%eax
f01183c3:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f01183c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183cf:	39 c2                	cmp    %eax,%edx
f01183d1:	74 17                	je     f01183ea <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f01183d3:	83 ec 04             	sub    $0x4,%esp
f01183d6:	68 d8 06 13 f0       	push   $0xf01306d8
f01183db:	68 4f 04 00 00       	push   $0x44f
f01183e0:	68 be ff 12 f0       	push   $0xf012ffbe
f01183e5:	e8 bc 7d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01183ea:	e8 b5 b0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01183ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01183f2:	74 17                	je     f011840b <test_kmalloc_worstfit+0x8ea>
f01183f4:	83 ec 04             	sub    $0x4,%esp
f01183f7:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01183fc:	68 50 04 00 00       	push   $0x450
f0118401:	68 be ff 12 f0       	push   $0xf012ffbe
f0118406:	e8 9b 7d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011840b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011840e:	e8 9d 31 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118413:	29 c3                	sub    %eax,%ebx
f0118415:	89 d8                	mov    %ebx,%eax
f0118417:	3d 00 01 00 00       	cmp    $0x100,%eax
f011841c:	74 17                	je     f0118435 <test_kmalloc_worstfit+0x914>
f011841e:	83 ec 04             	sub    $0x4,%esp
f0118421:	68 f6 04 13 f0       	push   $0xf01304f6
f0118426:	68 51 04 00 00       	push   $0x451
f011842b:	68 be ff 12 f0       	push   $0xf012ffbe
f0118430:	e8 71 7d fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118435:	ff 45 e8             	incl   -0x18(%ebp)
f0118438:	83 ec 08             	sub    $0x8,%esp
f011843b:	ff 75 e8             	pushl  -0x18(%ebp)
f011843e:	68 f8 06 13 f0       	push   $0xf01306f8
f0118443:	e8 e5 87 fe ff       	call   f0100c2d <cprintf>
f0118448:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011844b:	e8 60 31 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118450:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118453:	e8 4c b0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118458:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011845b:	83 ec 0c             	sub    $0xc,%esp
f011845e:	68 00 00 40 00       	push   $0x400000
f0118463:	e8 8c e7 fe ff       	call   f0106bf4 <kmalloc>
f0118468:	83 c4 10             	add    $0x10,%esp
f011846b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f0118471:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118478:	10 00 00 
f011847b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118480:	0f b6 d0             	movzbl %al,%edx
f0118483:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118489:	01 d0                	add    %edx,%eax
f011848b:	48                   	dec    %eax
f011848c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118492:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118498:	ba 00 00 00 00       	mov    $0x0,%edx
f011849d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01184a3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01184a9:	29 d0                	sub    %edx,%eax
f01184ab:	89 c1                	mov    %eax,%ecx
f01184ad:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01184b4:	10 00 00 
f01184b7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01184bc:	0f b6 c0             	movzbl %al,%eax
f01184bf:	c1 e0 04             	shl    $0x4,%eax
f01184c2:	89 c2                	mov    %eax,%edx
f01184c4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01184ca:	01 d0                	add    %edx,%eax
f01184cc:	48                   	dec    %eax
f01184cd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01184d3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01184d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01184de:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01184e4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01184ea:	29 d0                	sub    %edx,%eax
f01184ec:	01 c1                	add    %eax,%ecx
f01184ee:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01184f5:	10 00 00 
f01184f8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01184fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118503:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118509:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011850f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118514:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011851a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118520:	29 d0                	sub    %edx,%eax
f0118522:	01 c8                	add    %ecx,%eax
f0118524:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011852a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118530:	39 c2                	cmp    %eax,%edx
f0118532:	74 17                	je     f011854b <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f0118534:	83 ec 04             	sub    $0x4,%esp
f0118537:	68 d8 06 13 f0       	push   $0xf01306d8
f011853c:	68 58 04 00 00       	push   $0x458
f0118541:	68 be ff 12 f0       	push   $0xf012ffbe
f0118546:	e8 5b 7c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011854b:	e8 54 af fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118550:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118553:	74 17                	je     f011856c <test_kmalloc_worstfit+0xa4b>
f0118555:	83 ec 04             	sub    $0x4,%esp
f0118558:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011855d:	68 59 04 00 00       	push   $0x459
f0118562:	68 be ff 12 f0       	push   $0xf012ffbe
f0118567:	e8 3a 7c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011856c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011856f:	e8 3c 30 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118574:	29 c3                	sub    %eax,%ebx
f0118576:	89 d8                	mov    %ebx,%eax
f0118578:	3d 00 04 00 00       	cmp    $0x400,%eax
f011857d:	74 17                	je     f0118596 <test_kmalloc_worstfit+0xa75>
f011857f:	83 ec 04             	sub    $0x4,%esp
f0118582:	68 f6 04 13 f0       	push   $0xf01304f6
f0118587:	68 5a 04 00 00       	push   $0x45a
f011858c:	68 be ff 12 f0       	push   $0xf012ffbe
f0118591:	e8 10 7c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118596:	ff 45 e8             	incl   -0x18(%ebp)
f0118599:	83 ec 08             	sub    $0x8,%esp
f011859c:	ff 75 e8             	pushl  -0x18(%ebp)
f011859f:	68 f8 06 13 f0       	push   $0xf01306f8
f01185a4:	e8 84 86 fe ff       	call   f0100c2d <cprintf>
f01185a9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01185ac:	e8 ff 2f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01185b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01185b4:	e8 eb ae fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01185b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f01185bc:	83 ec 0c             	sub    $0xc,%esp
f01185bf:	68 00 00 60 00       	push   $0x600000
f01185c4:	e8 2b e6 fe ff       	call   f0106bf4 <kmalloc>
f01185c9:	83 c4 10             	add    $0x10,%esp
f01185cc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f01185d2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01185d9:	10 00 00 
f01185dc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01185e1:	0f b6 d0             	movzbl %al,%edx
f01185e4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01185ea:	01 d0                	add    %edx,%eax
f01185ec:	48                   	dec    %eax
f01185ed:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01185f3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01185f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01185fe:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118604:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011860a:	29 d0                	sub    %edx,%eax
f011860c:	89 c1                	mov    %eax,%ecx
f011860e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118615:	10 00 00 
f0118618:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011861d:	0f b6 c0             	movzbl %al,%eax
f0118620:	c1 e0 04             	shl    $0x4,%eax
f0118623:	89 c2                	mov    %eax,%edx
f0118625:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011862b:	01 d0                	add    %edx,%eax
f011862d:	48                   	dec    %eax
f011862e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118634:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011863a:	ba 00 00 00 00       	mov    $0x0,%edx
f011863f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118645:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011864b:	29 d0                	sub    %edx,%eax
f011864d:	01 c1                	add    %eax,%ecx
f011864f:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0118656:	10 00 00 
f0118659:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011865f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118664:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011866a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118670:	ba 00 00 00 00       	mov    $0x0,%edx
f0118675:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011867b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118681:	29 d0                	sub    %edx,%eax
f0118683:	01 c8                	add    %ecx,%eax
f0118685:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011868b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118691:	39 c2                	cmp    %eax,%edx
f0118693:	74 17                	je     f01186ac <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f0118695:	83 ec 04             	sub    $0x4,%esp
f0118698:	68 d8 06 13 f0       	push   $0xf01306d8
f011869d:	68 61 04 00 00       	push   $0x461
f01186a2:	68 be ff 12 f0       	push   $0xf012ffbe
f01186a7:	e8 fa 7a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01186ac:	e8 f3 ad fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01186b1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01186b4:	74 17                	je     f01186cd <test_kmalloc_worstfit+0xbac>
f01186b6:	83 ec 04             	sub    $0x4,%esp
f01186b9:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01186be:	68 62 04 00 00       	push   $0x462
f01186c3:	68 be ff 12 f0       	push   $0xf012ffbe
f01186c8:	e8 d9 7a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f01186cd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01186d0:	e8 db 2e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01186d5:	29 c3                	sub    %eax,%ebx
f01186d7:	89 d8                	mov    %ebx,%eax
f01186d9:	3d 00 06 00 00       	cmp    $0x600,%eax
f01186de:	74 17                	je     f01186f7 <test_kmalloc_worstfit+0xbd6>
f01186e0:	83 ec 04             	sub    $0x4,%esp
f01186e3:	68 f6 04 13 f0       	push   $0xf01304f6
f01186e8:	68 63 04 00 00       	push   $0x463
f01186ed:	68 be ff 12 f0       	push   $0xf012ffbe
f01186f2:	e8 af 7a fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01186f7:	ff 45 e8             	incl   -0x18(%ebp)
f01186fa:	83 ec 08             	sub    $0x8,%esp
f01186fd:	ff 75 e8             	pushl  -0x18(%ebp)
f0118700:	68 f8 06 13 f0       	push   $0xf01306f8
f0118705:	e8 23 85 fe ff       	call   f0100c2d <cprintf>
f011870a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011870d:	e8 9e 2e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118712:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118715:	e8 8a ad fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011871a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011871d:	83 ec 0c             	sub    $0xc,%esp
f0118720:	68 00 00 50 00       	push   $0x500000
f0118725:	e8 ca e4 fe ff       	call   f0106bf4 <kmalloc>
f011872a:	83 c4 10             	add    $0x10,%esp
f011872d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118733:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011873a:	10 00 00 
f011873d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118742:	0f b6 d0             	movzbl %al,%edx
f0118745:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011874b:	01 d0                	add    %edx,%eax
f011874d:	48                   	dec    %eax
f011874e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0118754:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011875a:	ba 00 00 00 00       	mov    $0x0,%edx
f011875f:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0118765:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011876b:	29 d0                	sub    %edx,%eax
f011876d:	89 c1                	mov    %eax,%ecx
f011876f:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0118776:	10 00 00 
f0118779:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011877e:	0f b6 c0             	movzbl %al,%eax
f0118781:	c1 e0 04             	shl    $0x4,%eax
f0118784:	89 c2                	mov    %eax,%edx
f0118786:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011878c:	01 d0                	add    %edx,%eax
f011878e:	48                   	dec    %eax
f011878f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0118795:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011879b:	ba 00 00 00 00       	mov    $0x0,%edx
f01187a0:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f01187a6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01187ac:	29 d0                	sub    %edx,%eax
f01187ae:	01 c1                	add    %eax,%ecx
f01187b0:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f01187b7:	10 00 00 
f01187ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01187c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187c5:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f01187cb:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01187d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01187d6:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01187dc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01187e2:	29 d0                	sub    %edx,%eax
f01187e4:	01 c8                	add    %ecx,%eax
f01187e6:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01187ec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187f2:	39 c2                	cmp    %eax,%edx
f01187f4:	74 17                	je     f011880d <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f01187f6:	83 ec 04             	sub    $0x4,%esp
f01187f9:	68 d8 06 13 f0       	push   $0xf01306d8
f01187fe:	68 6a 04 00 00       	push   $0x46a
f0118803:	68 be ff 12 f0       	push   $0xf012ffbe
f0118808:	e8 99 79 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011880d:	e8 92 ac fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118812:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118815:	74 17                	je     f011882e <test_kmalloc_worstfit+0xd0d>
f0118817:	83 ec 04             	sub    $0x4,%esp
f011881a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011881f:	68 6b 04 00 00       	push   $0x46b
f0118824:	68 be ff 12 f0       	push   $0xf012ffbe
f0118829:	e8 78 79 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011882e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118831:	e8 7a 2d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118836:	29 c3                	sub    %eax,%ebx
f0118838:	89 d8                	mov    %ebx,%eax
f011883a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011883f:	74 17                	je     f0118858 <test_kmalloc_worstfit+0xd37>
f0118841:	83 ec 04             	sub    $0x4,%esp
f0118844:	68 f6 04 13 f0       	push   $0xf01304f6
f0118849:	68 6c 04 00 00       	push   $0x46c
f011884e:	68 be ff 12 f0       	push   $0xf012ffbe
f0118853:	e8 4e 79 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118858:	ff 45 e8             	incl   -0x18(%ebp)
f011885b:	83 ec 08             	sub    $0x8,%esp
f011885e:	ff 75 e8             	pushl  -0x18(%ebp)
f0118861:	68 f8 06 13 f0       	push   $0xf01306f8
f0118866:	e8 c2 83 fe ff       	call   f0100c2d <cprintf>
f011886b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011886e:	e8 3d 2d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118873:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118876:	e8 29 ac fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011887b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011887e:	83 ec 0c             	sub    $0xc,%esp
f0118881:	68 00 00 40 00       	push   $0x400000
f0118886:	e8 69 e3 fe ff       	call   f0106bf4 <kmalloc>
f011888b:	83 c4 10             	add    $0x10,%esp
f011888e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f0118894:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011889b:	10 00 00 
f011889e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01188a3:	0f b6 d0             	movzbl %al,%edx
f01188a6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01188ac:	01 d0                	add    %edx,%eax
f01188ae:	48                   	dec    %eax
f01188af:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01188b5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01188bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01188c0:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01188c6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01188cc:	29 d0                	sub    %edx,%eax
f01188ce:	89 c1                	mov    %eax,%ecx
f01188d0:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01188d7:	10 00 00 
f01188da:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01188df:	0f b6 c0             	movzbl %al,%eax
f01188e2:	c1 e0 04             	shl    $0x4,%eax
f01188e5:	89 c2                	mov    %eax,%edx
f01188e7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01188ed:	01 d0                	add    %edx,%eax
f01188ef:	48                   	dec    %eax
f01188f0:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01188f6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01188fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118901:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118907:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011890d:	29 d0                	sub    %edx,%eax
f011890f:	01 c1                	add    %eax,%ecx
f0118911:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0118918:	10 00 00 
f011891b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118921:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118926:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011892c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118932:	ba 00 00 00 00       	mov    $0x0,%edx
f0118937:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011893d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118943:	29 d0                	sub    %edx,%eax
f0118945:	01 c8                	add    %ecx,%eax
f0118947:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011894d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118953:	39 c2                	cmp    %eax,%edx
f0118955:	74 17                	je     f011896e <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f0118957:	83 ec 04             	sub    $0x4,%esp
f011895a:	68 d8 06 13 f0       	push   $0xf01306d8
f011895f:	68 73 04 00 00       	push   $0x473
f0118964:	68 be ff 12 f0       	push   $0xf012ffbe
f0118969:	e8 38 78 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011896e:	e8 31 ab fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118973:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118976:	74 17                	je     f011898f <test_kmalloc_worstfit+0xe6e>
f0118978:	83 ec 04             	sub    $0x4,%esp
f011897b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0118980:	68 74 04 00 00       	push   $0x474
f0118985:	68 be ff 12 f0       	push   $0xf012ffbe
f011898a:	e8 17 78 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011898f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118992:	e8 19 2c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118997:	29 c3                	sub    %eax,%ebx
f0118999:	89 d8                	mov    %ebx,%eax
f011899b:	3d 00 04 00 00       	cmp    $0x400,%eax
f01189a0:	74 17                	je     f01189b9 <test_kmalloc_worstfit+0xe98>
f01189a2:	83 ec 04             	sub    $0x4,%esp
f01189a5:	68 f6 04 13 f0       	push   $0xf01304f6
f01189aa:	68 75 04 00 00       	push   $0x475
f01189af:	68 be ff 12 f0       	push   $0xf012ffbe
f01189b4:	e8 ed 77 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01189b9:	ff 45 e8             	incl   -0x18(%ebp)
f01189bc:	83 ec 08             	sub    $0x8,%esp
f01189bf:	ff 75 e8             	pushl  -0x18(%ebp)
f01189c2:	68 f8 06 13 f0       	push   $0xf01306f8
f01189c7:	e8 61 82 fe ff       	call   f0100c2d <cprintf>
f01189cc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01189cf:	e8 dc 2b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01189d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01189d7:	e8 c8 aa fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01189dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f01189df:	83 ec 0c             	sub    $0xc,%esp
f01189e2:	68 00 00 20 00       	push   $0x200000
f01189e7:	e8 08 e2 fe ff       	call   f0106bf4 <kmalloc>
f01189ec:	83 c4 10             	add    $0x10,%esp
f01189ef:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f01189f5:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01189fc:	10 00 00 
f01189ff:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118a04:	0f b6 d0             	movzbl %al,%edx
f0118a07:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a0d:	01 d0                	add    %edx,%eax
f0118a0f:	48                   	dec    %eax
f0118a10:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118a16:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118a1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a21:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118a27:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118a2d:	29 d0                	sub    %edx,%eax
f0118a2f:	89 c1                	mov    %eax,%ecx
f0118a31:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118a38:	10 00 00 
f0118a3b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118a40:	0f b6 c0             	movzbl %al,%eax
f0118a43:	c1 e0 04             	shl    $0x4,%eax
f0118a46:	89 c2                	mov    %eax,%edx
f0118a48:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a4e:	01 d0                	add    %edx,%eax
f0118a50:	48                   	dec    %eax
f0118a51:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118a57:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a62:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118a68:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118a6e:	29 d0                	sub    %edx,%eax
f0118a70:	01 c1                	add    %eax,%ecx
f0118a72:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118a79:	10 00 00 
f0118a7c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118a82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a87:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118a8d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118a93:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a98:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118a9e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118aa4:	29 d0                	sub    %edx,%eax
f0118aa6:	01 c8                	add    %ecx,%eax
f0118aa8:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0118aae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ab4:	39 c2                	cmp    %eax,%edx
f0118ab6:	74 17                	je     f0118acf <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f0118ab8:	83 ec 04             	sub    $0x4,%esp
f0118abb:	68 d8 06 13 f0       	push   $0xf01306d8
f0118ac0:	68 7c 04 00 00       	push   $0x47c
f0118ac5:	68 be ff 12 f0       	push   $0xf012ffbe
f0118aca:	e8 d7 76 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118acf:	e8 d0 a9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118ad4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118ad7:	74 17                	je     f0118af0 <test_kmalloc_worstfit+0xfcf>
f0118ad9:	83 ec 04             	sub    $0x4,%esp
f0118adc:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0118ae1:	68 7d 04 00 00       	push   $0x47d
f0118ae6:	68 be ff 12 f0       	push   $0xf012ffbe
f0118aeb:	e8 b6 76 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0118af0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118af3:	e8 b8 2a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118af8:	29 c3                	sub    %eax,%ebx
f0118afa:	89 d8                	mov    %ebx,%eax
f0118afc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118b01:	74 17                	je     f0118b1a <test_kmalloc_worstfit+0xff9>
f0118b03:	83 ec 04             	sub    $0x4,%esp
f0118b06:	68 f6 04 13 f0       	push   $0xf01304f6
f0118b0b:	68 7e 04 00 00       	push   $0x47e
f0118b10:	68 be ff 12 f0       	push   $0xf012ffbe
f0118b15:	e8 8c 76 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118b1a:	ff 45 e8             	incl   -0x18(%ebp)
f0118b1d:	83 ec 08             	sub    $0x8,%esp
f0118b20:	ff 75 e8             	pushl  -0x18(%ebp)
f0118b23:	68 f8 06 13 f0       	push   $0xf01306f8
f0118b28:	e8 00 81 fe ff       	call   f0100c2d <cprintf>
f0118b2d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0118b30:	e8 7b 2a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118b35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118b38:	e8 67 a9 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118b3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f0118b40:	83 ec 0c             	sub    $0xc,%esp
f0118b43:	68 00 00 18 00       	push   $0x180000
f0118b48:	e8 a7 e0 fe ff       	call   f0106bf4 <kmalloc>
f0118b4d:	83 c4 10             	add    $0x10,%esp
f0118b50:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118b56:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0118b5d:	10 00 00 
f0118b60:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118b65:	0f b6 d0             	movzbl %al,%edx
f0118b68:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118b6e:	01 d0                	add    %edx,%eax
f0118b70:	48                   	dec    %eax
f0118b71:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0118b77:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0118b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b82:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0118b88:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0118b8e:	29 d0                	sub    %edx,%eax
f0118b90:	89 c1                	mov    %eax,%ecx
f0118b92:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0118b99:	10 00 00 
f0118b9c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118ba1:	0f b6 c0             	movzbl %al,%eax
f0118ba4:	c1 e0 04             	shl    $0x4,%eax
f0118ba7:	89 c2                	mov    %eax,%edx
f0118ba9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118baf:	01 d0                	add    %edx,%eax
f0118bb1:	48                   	dec    %eax
f0118bb2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0118bb8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118bbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bc3:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0118bc9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118bcf:	29 d0                	sub    %edx,%eax
f0118bd1:	01 c1                	add    %eax,%ecx
f0118bd3:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0118bda:	10 00 00 
f0118bdd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118be3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118be8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0118bee:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0118bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bf9:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0118bff:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0118c05:	29 d0                	sub    %edx,%eax
f0118c07:	01 c8                	add    %ecx,%eax
f0118c09:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118c0f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118c15:	39 c2                	cmp    %eax,%edx
f0118c17:	74 17                	je     f0118c30 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f0118c19:	83 ec 04             	sub    $0x4,%esp
f0118c1c:	68 d8 06 13 f0       	push   $0xf01306d8
f0118c21:	68 85 04 00 00       	push   $0x485
f0118c26:	68 be ff 12 f0       	push   $0xf012ffbe
f0118c2b:	e8 76 75 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c30:	e8 6f a8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118c35:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c38:	74 17                	je     f0118c51 <test_kmalloc_worstfit+0x1130>
f0118c3a:	83 ec 04             	sub    $0x4,%esp
f0118c3d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0118c42:	68 86 04 00 00       	push   $0x486
f0118c47:	68 be ff 12 f0       	push   $0xf012ffbe
f0118c4c:	e8 55 75 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0118c51:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118c54:	e8 57 29 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118c59:	29 c3                	sub    %eax,%ebx
f0118c5b:	89 d8                	mov    %ebx,%eax
f0118c5d:	3d 80 01 00 00       	cmp    $0x180,%eax
f0118c62:	74 17                	je     f0118c7b <test_kmalloc_worstfit+0x115a>
f0118c64:	83 ec 04             	sub    $0x4,%esp
f0118c67:	68 f6 04 13 f0       	push   $0xf01304f6
f0118c6c:	68 87 04 00 00       	push   $0x487
f0118c71:	68 be ff 12 f0       	push   $0xf012ffbe
f0118c76:	e8 2b 75 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118c7b:	ff 45 e8             	incl   -0x18(%ebp)
f0118c7e:	83 ec 08             	sub    $0x8,%esp
f0118c81:	ff 75 e8             	pushl  -0x18(%ebp)
f0118c84:	68 f8 06 13 f0       	push   $0xf01306f8
f0118c89:	e8 9f 7f fe ff       	call   f0100c2d <cprintf>
f0118c8e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0118c91:	e8 1a 29 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118c96:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118c99:	e8 06 a8 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118c9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0118ca1:	83 ec 0c             	sub    $0xc,%esp
f0118ca4:	68 00 00 08 00       	push   $0x80000
f0118ca9:	e8 46 df fe ff       	call   f0106bf4 <kmalloc>
f0118cae:	83 c4 10             	add    $0x10,%esp
f0118cb1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f0118cb7:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0118cbe:	10 00 00 
f0118cc1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118cc6:	0f b6 d0             	movzbl %al,%edx
f0118cc9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118ccf:	01 d0                	add    %edx,%eax
f0118cd1:	48                   	dec    %eax
f0118cd2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0118cd8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ce3:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0118ce9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118cef:	29 d0                	sub    %edx,%eax
f0118cf1:	89 c1                	mov    %eax,%ecx
f0118cf3:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0118cfa:	10 00 00 
f0118cfd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118d02:	0f b6 c0             	movzbl %al,%eax
f0118d05:	c1 e0 04             	shl    $0x4,%eax
f0118d08:	89 c2                	mov    %eax,%edx
f0118d0a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0118d10:	01 d0                	add    %edx,%eax
f0118d12:	48                   	dec    %eax
f0118d13:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0118d19:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0118d1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d24:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0118d2a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0118d30:	29 d0                	sub    %edx,%eax
f0118d32:	01 c1                	add    %eax,%ecx
f0118d34:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0118d3b:	10 00 00 
f0118d3e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118d44:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d49:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0118d4f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118d55:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d5a:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0118d60:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118d66:	29 d0                	sub    %edx,%eax
f0118d68:	01 c8                	add    %ecx,%eax
f0118d6a:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f0118d70:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118d76:	39 c2                	cmp    %eax,%edx
f0118d78:	74 17                	je     f0118d91 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f0118d7a:	83 ec 04             	sub    $0x4,%esp
f0118d7d:	68 d8 06 13 f0       	push   $0xf01306d8
f0118d82:	68 8e 04 00 00       	push   $0x48e
f0118d87:	68 be ff 12 f0       	push   $0xf012ffbe
f0118d8c:	e8 15 74 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d91:	e8 0e a7 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118d96:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118d99:	74 17                	je     f0118db2 <test_kmalloc_worstfit+0x1291>
f0118d9b:	83 ec 04             	sub    $0x4,%esp
f0118d9e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0118da3:	68 8f 04 00 00       	push   $0x48f
f0118da8:	68 be ff 12 f0       	push   $0xf012ffbe
f0118dad:	e8 f4 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0118db2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118db5:	e8 f6 27 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118dba:	29 c3                	sub    %eax,%ebx
f0118dbc:	89 d8                	mov    %ebx,%eax
f0118dbe:	3d 80 00 00 00       	cmp    $0x80,%eax
f0118dc3:	74 17                	je     f0118ddc <test_kmalloc_worstfit+0x12bb>
f0118dc5:	83 ec 04             	sub    $0x4,%esp
f0118dc8:	68 f6 04 13 f0       	push   $0xf01304f6
f0118dcd:	68 90 04 00 00       	push   $0x490
f0118dd2:	68 be ff 12 f0       	push   $0xf012ffbe
f0118dd7:	e8 ca 73 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118ddc:	ff 45 e8             	incl   -0x18(%ebp)
f0118ddf:	83 ec 08             	sub    $0x8,%esp
f0118de2:	ff 75 e8             	pushl  -0x18(%ebp)
f0118de5:	68 f8 06 13 f0       	push   $0xf01306f8
f0118dea:	e8 3e 7e fe ff       	call   f0100c2d <cprintf>
f0118def:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0118df2:	e8 b9 27 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118df7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118dfa:	e8 a5 a6 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118dff:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0118e02:	83 ec 0c             	sub    $0xc,%esp
f0118e05:	68 00 04 00 00       	push   $0x400
f0118e0a:	e8 e5 dd fe ff       	call   f0106bf4 <kmalloc>
f0118e0f:	83 c4 10             	add    $0x10,%esp
f0118e12:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f0118e18:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0118e1f:	10 00 00 
f0118e22:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118e27:	0f b6 d0             	movzbl %al,%edx
f0118e2a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118e30:	01 d0                	add    %edx,%eax
f0118e32:	48                   	dec    %eax
f0118e33:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0118e39:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118e3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e44:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0118e4a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118e50:	29 d0                	sub    %edx,%eax
f0118e52:	89 c1                	mov    %eax,%ecx
f0118e54:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0118e5b:	10 00 00 
f0118e5e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118e63:	0f b6 c0             	movzbl %al,%eax
f0118e66:	c1 e0 04             	shl    $0x4,%eax
f0118e69:	89 c2                	mov    %eax,%edx
f0118e6b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118e71:	01 d0                	add    %edx,%eax
f0118e73:	48                   	dec    %eax
f0118e74:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0118e7a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118e80:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e85:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0118e8b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118e91:	29 d0                	sub    %edx,%eax
f0118e93:	01 c1                	add    %eax,%ecx
f0118e95:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0118e9c:	10 00 00 
f0118e9f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118ea5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118eaa:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0118eb0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118eb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ebb:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0118ec1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118ec7:	29 d0                	sub    %edx,%eax
f0118ec9:	01 c8                	add    %ecx,%eax
f0118ecb:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f0118ed1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ed7:	39 c2                	cmp    %eax,%edx
f0118ed9:	74 17                	je     f0118ef2 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f0118edb:	83 ec 04             	sub    $0x4,%esp
f0118ede:	68 d8 06 13 f0       	push   $0xf01306d8
f0118ee3:	68 97 04 00 00       	push   $0x497
f0118ee8:	68 be ff 12 f0       	push   $0xf012ffbe
f0118eed:	e8 b4 72 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ef2:	e8 ad a5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118ef7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118efa:	74 17                	je     f0118f13 <test_kmalloc_worstfit+0x13f2>
f0118efc:	83 ec 04             	sub    $0x4,%esp
f0118eff:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0118f04:	68 98 04 00 00       	push   $0x498
f0118f09:	68 be ff 12 f0       	push   $0xf012ffbe
f0118f0e:	e8 93 72 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0118f13:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f16:	e8 95 26 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118f1b:	29 c3                	sub    %eax,%ebx
f0118f1d:	89 d8                	mov    %ebx,%eax
f0118f1f:	83 f8 01             	cmp    $0x1,%eax
f0118f22:	74 17                	je     f0118f3b <test_kmalloc_worstfit+0x141a>
f0118f24:	83 ec 04             	sub    $0x4,%esp
f0118f27:	68 f6 04 13 f0       	push   $0xf01304f6
f0118f2c:	68 99 04 00 00       	push   $0x499
f0118f31:	68 be ff 12 f0       	push   $0xf012ffbe
f0118f36:	e8 6b 72 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0118f3b:	ff 45 e8             	incl   -0x18(%ebp)
f0118f3e:	83 ec 08             	sub    $0x8,%esp
f0118f41:	ff 75 e8             	pushl  -0x18(%ebp)
f0118f44:	68 f8 06 13 f0       	push   $0xf01306f8
f0118f49:	e8 df 7c fe ff       	call   f0100c2d <cprintf>
f0118f4e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0118f51:	e8 5a 26 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0118f56:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0118f59:	e8 46 a5 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0118f5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f0118f61:	83 ec 0c             	sub    $0xc,%esp
f0118f64:	68 00 f0 1f 00       	push   $0x1ff000
f0118f69:	e8 86 dc fe ff       	call   f0106bf4 <kmalloc>
f0118f6e:	83 c4 10             	add    $0x10,%esp
f0118f71:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f0118f77:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0118f7e:	10 00 00 
f0118f81:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118f86:	0f b6 d0             	movzbl %al,%edx
f0118f89:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118f8f:	01 d0                	add    %edx,%eax
f0118f91:	48                   	dec    %eax
f0118f92:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0118f98:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fa3:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0118fa9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118faf:	29 d0                	sub    %edx,%eax
f0118fb1:	89 c1                	mov    %eax,%ecx
f0118fb3:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0118fba:	10 00 00 
f0118fbd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0118fc2:	0f b6 c0             	movzbl %al,%eax
f0118fc5:	c1 e0 04             	shl    $0x4,%eax
f0118fc8:	89 c2                	mov    %eax,%edx
f0118fca:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118fd0:	01 d0                	add    %edx,%eax
f0118fd2:	48                   	dec    %eax
f0118fd3:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0118fd9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118fdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fe4:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0118fea:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118ff0:	29 d0                	sub    %edx,%eax
f0118ff2:	01 c1                	add    %eax,%ecx
f0118ff4:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0118ffb:	10 00 00 
f0118ffe:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119004:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119009:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011900f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119015:	ba 00 00 00 00       	mov    $0x0,%edx
f011901a:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0119020:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119026:	29 d0                	sub    %edx,%eax
f0119028:	01 c8                	add    %ecx,%eax
f011902a:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f0119030:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119036:	39 c2                	cmp    %eax,%edx
f0119038:	74 17                	je     f0119051 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011903a:	83 ec 04             	sub    $0x4,%esp
f011903d:	68 d8 06 13 f0       	push   $0xf01306d8
f0119042:	68 a0 04 00 00       	push   $0x4a0
f0119047:	68 be ff 12 f0       	push   $0xf012ffbe
f011904c:	e8 55 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119051:	e8 4e a4 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119056:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119059:	74 17                	je     f0119072 <test_kmalloc_worstfit+0x1551>
f011905b:	83 ec 04             	sub    $0x4,%esp
f011905e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0119063:	68 a1 04 00 00       	push   $0x4a1
f0119068:	68 be ff 12 f0       	push   $0xf012ffbe
f011906d:	e8 34 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0119072:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119075:	e8 36 25 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011907a:	29 c3                	sub    %eax,%ebx
f011907c:	89 d8                	mov    %ebx,%eax
f011907e:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0119083:	74 17                	je     f011909c <test_kmalloc_worstfit+0x157b>
f0119085:	83 ec 04             	sub    $0x4,%esp
f0119088:	68 f6 04 13 f0       	push   $0xf01304f6
f011908d:	68 a2 04 00 00       	push   $0x4a2
f0119092:	68 be ff 12 f0       	push   $0xf012ffbe
f0119097:	e8 0a 71 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011909c:	ff 45 e8             	incl   -0x18(%ebp)
f011909f:	83 ec 08             	sub    $0x8,%esp
f01190a2:	ff 75 e8             	pushl  -0x18(%ebp)
f01190a5:	68 f8 06 13 f0       	push   $0xf01306f8
f01190aa:	e8 7e 7b fe ff       	call   f0100c2d <cprintf>
f01190af:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f01190b2:	e8 f9 24 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01190b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01190ba:	e8 e5 a3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01190bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f01190c2:	83 ec 0c             	sub    $0xc,%esp
f01190c5:	68 00 00 40 00       	push   $0x400000
f01190ca:	e8 25 db fe ff       	call   f0106bf4 <kmalloc>
f01190cf:	83 c4 10             	add    $0x10,%esp
f01190d2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f01190d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01190de:	85 c0                	test   %eax,%eax
f01190e0:	74 17                	je     f01190f9 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f01190e2:	83 ec 04             	sub    $0x4,%esp
f01190e5:	68 d8 06 13 f0       	push   $0xf01306d8
f01190ea:	68 aa 04 00 00       	push   $0x4aa
f01190ef:	68 be ff 12 f0       	push   $0xf012ffbe
f01190f4:	e8 ad 70 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01190f9:	e8 a6 a3 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01190fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119101:	74 17                	je     f011911a <test_kmalloc_worstfit+0x15f9>
f0119103:	83 ec 04             	sub    $0x4,%esp
f0119106:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011910b:	68 ab 04 00 00       	push   $0x4ab
f0119110:	68 be ff 12 f0       	push   $0xf012ffbe
f0119115:	e8 8c 70 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011911a:	e8 91 24 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011911f:	89 c2                	mov    %eax,%edx
f0119121:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119124:	39 c2                	cmp    %eax,%edx
f0119126:	74 17                	je     f011913f <test_kmalloc_worstfit+0x161e>
f0119128:	83 ec 04             	sub    $0x4,%esp
f011912b:	68 f6 04 13 f0       	push   $0xf01304f6
f0119130:	68 ac 04 00 00       	push   $0x4ac
f0119135:	68 be ff 12 f0       	push   $0xf012ffbe
f011913a:	e8 67 70 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011913f:	ff 45 e8             	incl   -0x18(%ebp)
f0119142:	83 ec 08             	sub    $0x8,%esp
f0119145:	ff 75 e8             	pushl  -0x18(%ebp)
f0119148:	68 f8 06 13 f0       	push   $0xf01306f8
f011914d:	e8 db 7a fe ff       	call   f0100c2d <cprintf>
f0119152:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0119155:	83 ec 0c             	sub    $0xc,%esp
f0119158:	68 0c 07 13 f0       	push   $0xf013070c
f011915d:	e8 cb 7a fe ff       	call   f0100c2d <cprintf>
f0119162:	83 c4 10             	add    $0x10,%esp


	return 1;
f0119165:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011916a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011916d:	5b                   	pop    %ebx
f011916e:	5f                   	pop    %edi
f011916f:	5d                   	pop    %ebp
f0119170:	c3                   	ret    

f0119171 <test_kfree>:

int test_kfree()
{
f0119171:	55                   	push   %ebp
f0119172:	89 e5                	mov    %esp,%ebp
f0119174:	57                   	push   %edi
f0119175:	53                   	push   %ebx
f0119176:	81 ec 20 02 00 00    	sub    $0x220,%esp
	cprintf("==============================================\n");
f011917c:	83 ec 0c             	sub    $0xc,%esp
f011917f:	68 00 ff 12 f0       	push   $0xf012ff00
f0119184:	e8 a4 7a fe ff       	call   f0100c2d <cprintf>
f0119189:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011918c:	83 ec 0c             	sub    $0xc,%esp
f011918f:	68 30 ff 12 f0       	push   $0xf012ff30
f0119194:	e8 94 7a fe ff       	call   f0100c2d <cprintf>
f0119199:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011919c:	83 ec 0c             	sub    $0xc,%esp
f011919f:	68 00 ff 12 f0       	push   $0xf012ff00
f01191a4:	e8 84 7a fe ff       	call   f0100c2d <cprintf>
f01191a9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01191ac:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01191b0:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01191b4:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01191ba:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01191c0:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01191c7:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01191ce:	e8 dd 23 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01191d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01191d6:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f01191dc:	b9 14 00 00 00       	mov    $0x14,%ecx
f01191e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01191e6:	89 d7                	mov    %edx,%edi
f01191e8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01191ea:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f01191f0:	b9 14 00 00 00       	mov    $0x14,%ecx
f01191f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01191fa:	89 d7                	mov    %edx,%edi
f01191fc:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01191fe:	8d 95 e0 fd ff ff    	lea    -0x220(%ebp),%edx
f0119204:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119209:	b8 00 00 00 00       	mov    $0x0,%eax
f011920e:	89 d7                	mov    %edx,%edi
f0119210:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119212:	e8 99 23 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119217:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011921a:	e8 85 a2 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011921f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0119222:	83 ec 0c             	sub    $0xc,%esp
f0119225:	68 00 fc 1f 00       	push   $0x1ffc00
f011922a:	e8 c5 d9 fe ff       	call   f0106bf4 <kmalloc>
f011922f:	83 c4 10             	add    $0x10,%esp
f0119232:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119238:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011923e:	89 c1                	mov    %eax,%ecx
f0119240:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119247:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011924c:	0f b6 d0             	movzbl %al,%edx
f011924f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119252:	01 d0                	add    %edx,%eax
f0119254:	48                   	dec    %eax
f0119255:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119258:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011925b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119260:	f7 75 c8             	divl   -0x38(%ebp)
f0119263:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119266:	29 d0                	sub    %edx,%eax
f0119268:	89 c3                	mov    %eax,%ebx
f011926a:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0119271:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119276:	0f b6 c0             	movzbl %al,%eax
f0119279:	c1 e0 04             	shl    $0x4,%eax
f011927c:	89 c2                	mov    %eax,%edx
f011927e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119281:	01 d0                	add    %edx,%eax
f0119283:	48                   	dec    %eax
f0119284:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119287:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011928a:	ba 00 00 00 00       	mov    $0x0,%edx
f011928f:	f7 75 c0             	divl   -0x40(%ebp)
f0119292:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119295:	29 d0                	sub    %edx,%eax
f0119297:	01 c3                	add    %eax,%ebx
f0119299:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01192a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01192a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192a8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01192ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01192ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01192b3:	f7 75 b8             	divl   -0x48(%ebp)
f01192b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01192b9:	29 d0                	sub    %edx,%eax
f01192bb:	01 d8                	add    %ebx,%eax
f01192bd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01192c2:	39 c1                	cmp    %eax,%ecx
f01192c4:	74 17                	je     f01192dd <test_kfree+0x16c>
f01192c6:	83 ec 04             	sub    $0x4,%esp
f01192c9:	68 a4 00 13 f0       	push   $0xf01300a4
f01192ce:	68 d4 04 00 00       	push   $0x4d4
f01192d3:	68 be ff 12 f0       	push   $0xf012ffbe
f01192d8:	e8 c9 6e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192dd:	e8 c2 a1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01192e2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01192e5:	74 17                	je     f01192fe <test_kfree+0x18d>
f01192e7:	83 ec 04             	sub    $0x4,%esp
f01192ea:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01192ef:	68 d5 04 00 00       	push   $0x4d5
f01192f4:	68 be ff 12 f0       	push   $0xf012ffbe
f01192f9:	e8 a8 6e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01192fe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119301:	e8 aa 22 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119306:	29 c3                	sub    %eax,%ebx
f0119308:	89 d8                	mov    %ebx,%eax
f011930a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011930f:	74 17                	je     f0119328 <test_kfree+0x1b7>
f0119311:	83 ec 04             	sub    $0x4,%esp
f0119314:	68 40 00 13 f0       	push   $0xf0130040
f0119319:	68 d6 04 00 00       	push   $0x4d6
f011931e:	68 be ff 12 f0       	push   $0xf012ffbe
f0119323:	e8 7e 6e fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0119328:	c7 85 80 fe ff ff ff 	movl   $0x1ffbff,-0x180(%ebp)
f011932f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119332:	e8 79 22 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119337:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011933a:	e8 65 a1 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011933f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0119342:	83 ec 0c             	sub    $0xc,%esp
f0119345:	68 00 fc 1f 00       	push   $0x1ffc00
f011934a:	e8 a5 d8 fe ff       	call   f0106bf4 <kmalloc>
f011934f:	83 c4 10             	add    $0x10,%esp
f0119352:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119358:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011935e:	89 c1                	mov    %eax,%ecx
f0119360:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0119367:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011936c:	0f b6 d0             	movzbl %al,%edx
f011936f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119372:	01 d0                	add    %edx,%eax
f0119374:	48                   	dec    %eax
f0119375:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119378:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011937b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119380:	f7 75 b0             	divl   -0x50(%ebp)
f0119383:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119386:	29 d0                	sub    %edx,%eax
f0119388:	89 c3                	mov    %eax,%ebx
f011938a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0119391:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119396:	0f b6 c0             	movzbl %al,%eax
f0119399:	c1 e0 04             	shl    $0x4,%eax
f011939c:	89 c2                	mov    %eax,%edx
f011939e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01193a1:	01 d0                	add    %edx,%eax
f01193a3:	48                   	dec    %eax
f01193a4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01193a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01193aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01193af:	f7 75 a8             	divl   -0x58(%ebp)
f01193b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01193b5:	29 d0                	sub    %edx,%eax
f01193b7:	01 c3                	add    %eax,%ebx
f01193b9:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01193c0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01193c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193c8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01193cb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01193d3:	f7 75 a0             	divl   -0x60(%ebp)
f01193d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193d9:	29 d0                	sub    %edx,%eax
f01193db:	01 d8                	add    %ebx,%eax
f01193dd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01193e2:	39 c1                	cmp    %eax,%ecx
f01193e4:	74 17                	je     f01193fd <test_kfree+0x28c>
f01193e6:	83 ec 04             	sub    $0x4,%esp
f01193e9:	68 a4 00 13 f0       	push   $0xf01300a4
f01193ee:	68 dd 04 00 00       	push   $0x4dd
f01193f3:	68 be ff 12 f0       	push   $0xf012ffbe
f01193f8:	e8 a9 6d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01193fd:	e8 a2 a0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119402:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119405:	74 17                	je     f011941e <test_kfree+0x2ad>
f0119407:	83 ec 04             	sub    $0x4,%esp
f011940a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011940f:	68 de 04 00 00       	push   $0x4de
f0119414:	68 be ff 12 f0       	push   $0xf012ffbe
f0119419:	e8 88 6d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011941e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119421:	e8 8a 21 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119426:	29 c3                	sub    %eax,%ebx
f0119428:	89 d8                	mov    %ebx,%eax
f011942a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011942f:	74 17                	je     f0119448 <test_kfree+0x2d7>
f0119431:	83 ec 04             	sub    $0x4,%esp
f0119434:	68 40 00 13 f0       	push   $0xf0130040
f0119439:	68 df 04 00 00       	push   $0x4df
f011943e:	68 be ff 12 f0       	push   $0xf012ffbe
f0119443:	e8 5e 6d fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0119448:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f011944f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119452:	e8 59 21 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119457:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011945a:	e8 45 a0 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011945f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0119462:	83 ec 0c             	sub    $0xc,%esp
f0119465:	68 00 08 00 00       	push   $0x800
f011946a:	e8 85 d7 fe ff       	call   f0106bf4 <kmalloc>
f011946f:	83 c4 10             	add    $0x10,%esp
f0119472:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119478:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011947e:	89 c1                	mov    %eax,%ecx
f0119480:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0119487:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011948c:	0f b6 d0             	movzbl %al,%edx
f011948f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119492:	01 d0                	add    %edx,%eax
f0119494:	48                   	dec    %eax
f0119495:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0119498:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011949b:	ba 00 00 00 00       	mov    $0x0,%edx
f01194a0:	f7 75 98             	divl   -0x68(%ebp)
f01194a3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01194a6:	29 d0                	sub    %edx,%eax
f01194a8:	89 c3                	mov    %eax,%ebx
f01194aa:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01194b1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01194b6:	0f b6 c0             	movzbl %al,%eax
f01194b9:	c1 e0 04             	shl    $0x4,%eax
f01194bc:	89 c2                	mov    %eax,%edx
f01194be:	8b 45 90             	mov    -0x70(%ebp),%eax
f01194c1:	01 d0                	add    %edx,%eax
f01194c3:	48                   	dec    %eax
f01194c4:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01194c7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01194ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01194cf:	f7 75 90             	divl   -0x70(%ebp)
f01194d2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01194d5:	29 d0                	sub    %edx,%eax
f01194d7:	01 c3                	add    %eax,%ebx
f01194d9:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01194e0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01194e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194e8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01194eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01194ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01194f3:	f7 75 88             	divl   -0x78(%ebp)
f01194f6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01194f9:	29 d0                	sub    %edx,%eax
f01194fb:	01 d8                	add    %ebx,%eax
f01194fd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0119502:	39 c1                	cmp    %eax,%ecx
f0119504:	74 17                	je     f011951d <test_kfree+0x3ac>
f0119506:	83 ec 04             	sub    $0x4,%esp
f0119509:	68 a4 00 13 f0       	push   $0xf01300a4
f011950e:	68 e6 04 00 00       	push   $0x4e6
f0119513:	68 be ff 12 f0       	push   $0xf012ffbe
f0119518:	e8 89 6c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011951d:	e8 82 9f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119522:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119525:	74 17                	je     f011953e <test_kfree+0x3cd>
f0119527:	83 ec 04             	sub    $0x4,%esp
f011952a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011952f:	68 e7 04 00 00       	push   $0x4e7
f0119534:	68 be ff 12 f0       	push   $0xf012ffbe
f0119539:	e8 68 6c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011953e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119541:	e8 6a 20 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119546:	29 c3                	sub    %eax,%ebx
f0119548:	89 d8                	mov    %ebx,%eax
f011954a:	83 f8 01             	cmp    $0x1,%eax
f011954d:	74 17                	je     f0119566 <test_kfree+0x3f5>
f011954f:	83 ec 04             	sub    $0x4,%esp
f0119552:	68 40 00 13 f0       	push   $0xf0130040
f0119557:	68 e8 04 00 00       	push   $0x4e8
f011955c:	68 be ff 12 f0       	push   $0xf012ffbe
f0119561:	e8 40 6c fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0119566:	c7 85 88 fe ff ff ff 	movl   $0x7ff,-0x178(%ebp)
f011956d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0119570:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0119576:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0119579:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119580:	eb 0e                	jmp    f0119590 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f0119582:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119585:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119588:	01 d0                	add    %edx,%eax
f011958a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011958d:	ff 45 f4             	incl   -0xc(%ebp)
f0119590:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119596:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119599:	7f e7                	jg     f0119582 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011959b:	e8 10 20 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01195a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01195a3:	e8 fc 9e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01195a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01195ab:	83 ec 0c             	sub    $0xc,%esp
f01195ae:	68 00 08 00 00       	push   $0x800
f01195b3:	e8 3c d6 fe ff       	call   f0106bf4 <kmalloc>
f01195b8:	83 c4 10             	add    $0x10,%esp
f01195bb:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01195c1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01195c7:	89 c1                	mov    %eax,%ecx
f01195c9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01195d0:	10 00 00 
f01195d3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01195d8:	0f b6 d0             	movzbl %al,%edx
f01195db:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01195e1:	01 d0                	add    %edx,%eax
f01195e3:	48                   	dec    %eax
f01195e4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01195ea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01195f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01195f5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01195fb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119601:	29 d0                	sub    %edx,%eax
f0119603:	89 c3                	mov    %eax,%ebx
f0119605:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011960c:	10 00 00 
f011960f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119614:	0f b6 c0             	movzbl %al,%eax
f0119617:	c1 e0 04             	shl    $0x4,%eax
f011961a:	89 c2                	mov    %eax,%edx
f011961c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119622:	01 d0                	add    %edx,%eax
f0119624:	48                   	dec    %eax
f0119625:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011962b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119631:	ba 00 00 00 00       	mov    $0x0,%edx
f0119636:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011963c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119642:	29 d0                	sub    %edx,%eax
f0119644:	01 c3                	add    %eax,%ebx
f0119646:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011964d:	10 00 00 
f0119650:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119656:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011965b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119661:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119667:	ba 00 00 00 00       	mov    $0x0,%edx
f011966c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119672:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119678:	29 d0                	sub    %edx,%eax
f011967a:	01 d8                	add    %ebx,%eax
f011967c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0119681:	39 c1                	cmp    %eax,%ecx
f0119683:	74 17                	je     f011969c <test_kfree+0x52b>
f0119685:	83 ec 04             	sub    $0x4,%esp
f0119688:	68 a4 00 13 f0       	push   $0xf01300a4
f011968d:	68 f4 04 00 00       	push   $0x4f4
f0119692:	68 be ff 12 f0       	push   $0xf012ffbe
f0119697:	e8 0a 6b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011969c:	e8 03 9e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01196a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01196a4:	74 17                	je     f01196bd <test_kfree+0x54c>
f01196a6:	83 ec 04             	sub    $0x4,%esp
f01196a9:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01196ae:	68 f5 04 00 00       	push   $0x4f5
f01196b3:	68 be ff 12 f0       	push   $0xf012ffbe
f01196b8:	e8 e9 6a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01196bd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01196c0:	e8 eb 1e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01196c5:	29 c3                	sub    %eax,%ebx
f01196c7:	89 d8                	mov    %ebx,%eax
f01196c9:	83 f8 01             	cmp    $0x1,%eax
f01196cc:	74 17                	je     f01196e5 <test_kfree+0x574>
f01196ce:	83 ec 04             	sub    $0x4,%esp
f01196d1:	68 40 00 13 f0       	push   $0xf0130040
f01196d6:	68 f6 04 00 00       	push   $0x4f6
f01196db:	68 be ff 12 f0       	push   $0xf012ffbe
f01196e0:	e8 c1 6a fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01196e5:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01196ec:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01196ef:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01196f5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01196f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01196ff:	eb 0e                	jmp    f011970f <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0119701:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119704:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119707:	01 d0                	add    %edx,%eax
f0119709:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011970c:	ff 45 f4             	incl   -0xc(%ebp)
f011970f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119715:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119718:	7f e7                	jg     f0119701 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011971a:	e8 91 1e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011971f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119722:	e8 7d 9d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119727:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011972a:	83 ec 0c             	sub    $0xc,%esp
f011972d:	68 00 1c 00 00       	push   $0x1c00
f0119732:	e8 bd d4 fe ff       	call   f0106bf4 <kmalloc>
f0119737:	83 c4 10             	add    $0x10,%esp
f011973a:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119740:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0119746:	89 c1                	mov    %eax,%ecx
f0119748:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011974f:	10 00 00 
f0119752:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119757:	0f b6 d0             	movzbl %al,%edx
f011975a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119760:	01 d0                	add    %edx,%eax
f0119762:	48                   	dec    %eax
f0119763:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119769:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011976f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119774:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011977a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119780:	29 d0                	sub    %edx,%eax
f0119782:	89 c3                	mov    %eax,%ebx
f0119784:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011978b:	10 00 00 
f011978e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119793:	0f b6 c0             	movzbl %al,%eax
f0119796:	c1 e0 04             	shl    $0x4,%eax
f0119799:	89 c2                	mov    %eax,%edx
f011979b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01197a1:	01 d0                	add    %edx,%eax
f01197a3:	48                   	dec    %eax
f01197a4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01197aa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01197b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01197b5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01197bb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01197c1:	29 d0                	sub    %edx,%eax
f01197c3:	01 c3                	add    %eax,%ebx
f01197c5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01197cc:	10 00 00 
f01197cf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01197d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01197da:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01197e0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01197e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01197eb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01197f1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01197f7:	29 d0                	sub    %edx,%eax
f01197f9:	01 d8                	add    %ebx,%eax
f01197fb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0119800:	39 c1                	cmp    %eax,%ecx
f0119802:	74 17                	je     f011981b <test_kfree+0x6aa>
f0119804:	83 ec 04             	sub    $0x4,%esp
f0119807:	68 a4 00 13 f0       	push   $0xf01300a4
f011980c:	68 02 05 00 00       	push   $0x502
f0119811:	68 be ff 12 f0       	push   $0xf012ffbe
f0119816:	e8 8b 69 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011981b:	e8 84 9c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119820:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119823:	74 17                	je     f011983c <test_kfree+0x6cb>
f0119825:	83 ec 04             	sub    $0x4,%esp
f0119828:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011982d:	68 03 05 00 00       	push   $0x503
f0119832:	68 be ff 12 f0       	push   $0xf012ffbe
f0119837:	e8 6a 69 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011983c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011983f:	e8 6c 1d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119844:	29 c3                	sub    %eax,%ebx
f0119846:	89 d8                	mov    %ebx,%eax
f0119848:	83 f8 02             	cmp    $0x2,%eax
f011984b:	74 17                	je     f0119864 <test_kfree+0x6f3>
f011984d:	83 ec 04             	sub    $0x4,%esp
f0119850:	68 40 00 13 f0       	push   $0xf0130040
f0119855:	68 04 05 00 00       	push   $0x504
f011985a:	68 be ff 12 f0       	push   $0xf012ffbe
f011985f:	e8 42 69 fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0119864:	c7 85 90 fe ff ff ff 	movl   $0x1bff,-0x170(%ebp)
f011986b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011986e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0119874:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0119877:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011987e:	eb 0e                	jmp    f011988e <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0119880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119883:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119886:	01 d0                	add    %edx,%eax
f0119888:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011988b:	ff 45 f4             	incl   -0xc(%ebp)
f011988e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119894:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119897:	7f e7                	jg     f0119880 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119899:	e8 12 1d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011989e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01198a1:	e8 fe 9b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01198a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01198a9:	83 ec 0c             	sub    $0xc,%esp
f01198ac:	68 00 fc 2f 00       	push   $0x2ffc00
f01198b1:	e8 3e d3 fe ff       	call   f0106bf4 <kmalloc>
f01198b6:	83 c4 10             	add    $0x10,%esp
f01198b9:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01198bf:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01198c5:	89 c1                	mov    %eax,%ecx
f01198c7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01198ce:	10 00 00 
f01198d1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01198d6:	0f b6 d0             	movzbl %al,%edx
f01198d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01198df:	01 d0                	add    %edx,%eax
f01198e1:	48                   	dec    %eax
f01198e2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01198e8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01198ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01198f3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01198f9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01198ff:	29 d0                	sub    %edx,%eax
f0119901:	89 c3                	mov    %eax,%ebx
f0119903:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011990a:	10 00 00 
f011990d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119912:	0f b6 c0             	movzbl %al,%eax
f0119915:	c1 e0 04             	shl    $0x4,%eax
f0119918:	89 c2                	mov    %eax,%edx
f011991a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119920:	01 d0                	add    %edx,%eax
f0119922:	48                   	dec    %eax
f0119923:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0119929:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011992f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119934:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011993a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119940:	29 d0                	sub    %edx,%eax
f0119942:	01 c3                	add    %eax,%ebx
f0119944:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011994b:	10 00 00 
f011994e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119954:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119959:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011995f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119965:	ba 00 00 00 00       	mov    $0x0,%edx
f011996a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0119970:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119976:	29 d0                	sub    %edx,%eax
f0119978:	01 d8                	add    %ebx,%eax
f011997a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011997f:	39 c1                	cmp    %eax,%ecx
f0119981:	74 17                	je     f011999a <test_kfree+0x829>
f0119983:	83 ec 04             	sub    $0x4,%esp
f0119986:	68 a4 00 13 f0       	push   $0xf01300a4
f011998b:	68 10 05 00 00       	push   $0x510
f0119990:	68 be ff 12 f0       	push   $0xf012ffbe
f0119995:	e8 0c 68 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011999a:	e8 05 9b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011999f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01199a2:	74 17                	je     f01199bb <test_kfree+0x84a>
f01199a4:	83 ec 04             	sub    $0x4,%esp
f01199a7:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01199ac:	68 11 05 00 00       	push   $0x511
f01199b1:	68 be ff 12 f0       	push   $0xf012ffbe
f01199b6:	e8 eb 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01199bb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01199be:	e8 ed 1b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f01199c3:	29 c3                	sub    %eax,%ebx
f01199c5:	89 d8                	mov    %ebx,%eax
f01199c7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01199cc:	74 17                	je     f01199e5 <test_kfree+0x874>
f01199ce:	83 ec 04             	sub    $0x4,%esp
f01199d1:	68 40 00 13 f0       	push   $0xf0130040
f01199d6:	68 12 05 00 00       	push   $0x512
f01199db:	68 be ff 12 f0       	push   $0xf012ffbe
f01199e0:	e8 c1 67 fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01199e5:	c7 85 94 fe ff ff ff 	movl   $0x2ffbff,-0x16c(%ebp)
f01199ec:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01199ef:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01199f5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01199f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01199ff:	eb 0e                	jmp    f0119a0f <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0119a01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119a04:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119a07:	01 d0                	add    %edx,%eax
f0119a09:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0119a0c:	ff 45 f4             	incl   -0xc(%ebp)
f0119a0f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119a15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119a18:	7f e7                	jg     f0119a01 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a1a:	e8 91 1b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119a1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a22:	e8 7d 9a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0119a2a:	83 ec 0c             	sub    $0xc,%esp
f0119a2d:	68 00 fc 5f 00       	push   $0x5ffc00
f0119a32:	e8 bd d1 fe ff       	call   f0106bf4 <kmalloc>
f0119a37:	83 c4 10             	add    $0x10,%esp
f0119a3a:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119a40:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0119a46:	89 c1                	mov    %eax,%ecx
f0119a48:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119a4f:	10 00 00 
f0119a52:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119a57:	0f b6 d0             	movzbl %al,%edx
f0119a5a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119a60:	01 d0                	add    %edx,%eax
f0119a62:	48                   	dec    %eax
f0119a63:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119a69:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119a6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a74:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119a7a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119a80:	29 d0                	sub    %edx,%eax
f0119a82:	89 c3                	mov    %eax,%ebx
f0119a84:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119a8b:	10 00 00 
f0119a8e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119a93:	0f b6 c0             	movzbl %al,%eax
f0119a96:	c1 e0 04             	shl    $0x4,%eax
f0119a99:	89 c2                	mov    %eax,%edx
f0119a9b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119aa1:	01 d0                	add    %edx,%eax
f0119aa3:	48                   	dec    %eax
f0119aa4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119aaa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119ab0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ab5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119abb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119ac1:	29 d0                	sub    %edx,%eax
f0119ac3:	01 c3                	add    %eax,%ebx
f0119ac5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119acc:	10 00 00 
f0119acf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119ad5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ada:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119ae0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119ae6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aeb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119af1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119af7:	29 d0                	sub    %edx,%eax
f0119af9:	01 d8                	add    %ebx,%eax
f0119afb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0119b00:	39 c1                	cmp    %eax,%ecx
f0119b02:	74 17                	je     f0119b1b <test_kfree+0x9aa>
f0119b04:	83 ec 04             	sub    $0x4,%esp
f0119b07:	68 a4 00 13 f0       	push   $0xf01300a4
f0119b0c:	68 1e 05 00 00       	push   $0x51e
f0119b11:	68 be ff 12 f0       	push   $0xf012ffbe
f0119b16:	e8 8b 66 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b1b:	e8 84 99 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119b20:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119b23:	74 17                	je     f0119b3c <test_kfree+0x9cb>
f0119b25:	83 ec 04             	sub    $0x4,%esp
f0119b28:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0119b2d:	68 1f 05 00 00       	push   $0x51f
f0119b32:	68 be ff 12 f0       	push   $0xf012ffbe
f0119b37:	e8 6a 66 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119b3c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119b3f:	e8 6c 1a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119b44:	29 c3                	sub    %eax,%ebx
f0119b46:	89 d8                	mov    %ebx,%eax
f0119b48:	3d 00 06 00 00       	cmp    $0x600,%eax
f0119b4d:	74 17                	je     f0119b66 <test_kfree+0x9f5>
f0119b4f:	83 ec 04             	sub    $0x4,%esp
f0119b52:	68 40 00 13 f0       	push   $0xf0130040
f0119b57:	68 20 05 00 00       	push   $0x520
f0119b5c:	68 be ff 12 f0       	push   $0xf012ffbe
f0119b61:	e8 40 66 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0119b66:	c7 85 98 fe ff ff ff 	movl   $0x5ffbff,-0x168(%ebp)
f0119b6d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0119b70:	e8 3b 1a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119b75:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b78:	e8 27 99 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119b7d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0119b80:	83 ec 0c             	sub    $0xc,%esp
f0119b83:	68 00 38 00 00       	push   $0x3800
f0119b88:	e8 67 d0 fe ff       	call   f0106bf4 <kmalloc>
f0119b8d:	83 c4 10             	add    $0x10,%esp
f0119b90:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119b96:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0119b9c:	89 c1                	mov    %eax,%ecx
f0119b9e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119ba5:	10 00 00 
f0119ba8:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119bad:	0f b6 d0             	movzbl %al,%edx
f0119bb0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119bb6:	01 d0                	add    %edx,%eax
f0119bb8:	48                   	dec    %eax
f0119bb9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119bbf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119bc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bca:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119bd0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119bd6:	29 d0                	sub    %edx,%eax
f0119bd8:	89 c3                	mov    %eax,%ebx
f0119bda:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119be1:	10 00 00 
f0119be4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0119be9:	0f b6 c0             	movzbl %al,%eax
f0119bec:	c1 e0 04             	shl    $0x4,%eax
f0119bef:	89 c2                	mov    %eax,%edx
f0119bf1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119bf7:	01 d0                	add    %edx,%eax
f0119bf9:	48                   	dec    %eax
f0119bfa:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119c00:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119c06:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c0b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119c11:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119c17:	29 d0                	sub    %edx,%eax
f0119c19:	01 c3                	add    %eax,%ebx
f0119c1b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119c22:	10 00 00 
f0119c25:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119c2b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c30:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119c36:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119c3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c41:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119c47:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119c4d:	29 d0                	sub    %edx,%eax
f0119c4f:	01 d8                	add    %ebx,%eax
f0119c51:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0119c56:	39 c1                	cmp    %eax,%ecx
f0119c58:	74 17                	je     f0119c71 <test_kfree+0xb00>
f0119c5a:	83 ec 04             	sub    $0x4,%esp
f0119c5d:	68 a4 00 13 f0       	push   $0xf01300a4
f0119c62:	68 27 05 00 00       	push   $0x527
f0119c67:	68 be ff 12 f0       	push   $0xf012ffbe
f0119c6c:	e8 35 65 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c71:	e8 2e 98 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119c76:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0119c79:	74 17                	je     f0119c92 <test_kfree+0xb21>
f0119c7b:	83 ec 04             	sub    $0x4,%esp
f0119c7e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0119c83:	68 28 05 00 00       	push   $0x528
f0119c88:	68 be ff 12 f0       	push   $0xf012ffbe
f0119c8d:	e8 14 65 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119c92:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0119c95:	e8 16 19 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119c9a:	29 c3                	sub    %eax,%ebx
f0119c9c:	89 d8                	mov    %ebx,%eax
f0119c9e:	83 f8 04             	cmp    $0x4,%eax
f0119ca1:	74 17                	je     f0119cba <test_kfree+0xb49>
f0119ca3:	83 ec 04             	sub    $0x4,%esp
f0119ca6:	68 40 00 13 f0       	push   $0xf0130040
f0119cab:	68 29 05 00 00       	push   $0x529
f0119cb0:	68 be ff 12 f0       	push   $0xf012ffbe
f0119cb5:	e8 ec 64 fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0119cba:	c7 85 9c fe ff ff ff 	movl   $0x37ff,-0x164(%ebp)
f0119cc1:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0119cc4:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0119cca:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0119ccd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119cd4:	eb 0e                	jmp    f0119ce4 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0119cd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119cd9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119cdc:	01 d0                	add    %edx,%eax
f0119cde:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0119ce1:	ff 45 f4             	incl   -0xc(%ebp)
f0119ce4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119cea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119ced:	7f e7                	jg     f0119cd6 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0119cef:	e8 bc 18 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119cf4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0119cfa:	e8 a5 97 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119cff:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0119d05:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0119d0b:	83 ec 0c             	sub    $0xc,%esp
f0119d0e:	50                   	push   %eax
f0119d0f:	e8 fa ce fe ff       	call   f0106c0e <kfree>
f0119d14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d17:	e8 88 97 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119d1c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0119d22:	74 17                	je     f0119d3b <test_kfree+0xbca>
f0119d24:	83 ec 04             	sub    $0x4,%esp
f0119d27:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0119d2c:	68 38 05 00 00       	push   $0x538
f0119d31:	68 be ff 12 f0       	push   $0xf012ffbe
f0119d36:	e8 6b 64 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0119d3b:	e8 70 18 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119d40:	89 c2                	mov    %eax,%edx
f0119d42:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119d48:	29 c2                	sub    %eax,%edx
f0119d4a:	89 d0                	mov    %edx,%eax
f0119d4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119d51:	74 17                	je     f0119d6a <test_kfree+0xbf9>
f0119d53:	83 ec 04             	sub    $0x4,%esp
f0119d56:	68 48 07 13 f0       	push   $0xf0130748
f0119d5b:	68 39 05 00 00       	push   $0x539
f0119d60:	68 be ff 12 f0       	push   $0xf012ffbe
f0119d65:	e8 3c 64 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d6a:	e8 41 18 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119d6f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d75:	e8 2a 97 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119d7a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0119d80:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0119d86:	83 ec 0c             	sub    $0xc,%esp
f0119d89:	50                   	push   %eax
f0119d8a:	e8 7f ce fe ff       	call   f0106c0e <kfree>
f0119d8f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d92:	e8 0d 97 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119d97:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0119d9d:	74 17                	je     f0119db6 <test_kfree+0xc45>
f0119d9f:	83 ec 04             	sub    $0x4,%esp
f0119da2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0119da7:	68 3f 05 00 00       	push   $0x53f
f0119dac:	68 be ff 12 f0       	push   $0xf012ffbe
f0119db1:	e8 f0 63 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0119db6:	e8 f5 17 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119dbb:	89 c2                	mov    %eax,%edx
f0119dbd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119dc3:	29 c2                	sub    %eax,%edx
f0119dc5:	89 d0                	mov    %edx,%eax
f0119dc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119dcc:	74 17                	je     f0119de5 <test_kfree+0xc74>
f0119dce:	83 ec 04             	sub    $0x4,%esp
f0119dd1:	68 48 07 13 f0       	push   $0xf0130748
f0119dd6:	68 40 05 00 00       	push   $0x540
f0119ddb:	68 be ff 12 f0       	push   $0xf012ffbe
f0119de0:	e8 c1 63 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0119de5:	e8 c6 17 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119dea:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119df0:	e8 af 96 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119df5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0119dfb:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0119e01:	83 ec 0c             	sub    $0xc,%esp
f0119e04:	50                   	push   %eax
f0119e05:	e8 04 ce fe ff       	call   f0106c0e <kfree>
f0119e0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e0d:	e8 92 96 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0119e12:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0119e18:	74 17                	je     f0119e31 <test_kfree+0xcc0>
f0119e1a:	83 ec 04             	sub    $0x4,%esp
f0119e1d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0119e22:	68 46 05 00 00       	push   $0x546
f0119e27:	68 be ff 12 f0       	push   $0xf012ffbe
f0119e2c:	e8 75 63 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0119e31:	e8 7a 17 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f0119e36:	89 c2                	mov    %eax,%edx
f0119e38:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119e3e:	29 c2                	sub    %eax,%edx
f0119e40:	89 d0                	mov    %edx,%eax
f0119e42:	3d 00 06 00 00       	cmp    $0x600,%eax
f0119e47:	74 17                	je     f0119e60 <test_kfree+0xcef>
f0119e49:	83 ec 04             	sub    $0x4,%esp
f0119e4c:	68 48 07 13 f0       	push   $0xf0130748
f0119e51:	68 47 05 00 00       	push   $0x547
f0119e56:	68 be ff 12 f0       	push   $0xf012ffbe
f0119e5b:	e8 46 63 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0119e60:	83 ec 0c             	sub    $0xc,%esp
f0119e63:	68 80 07 13 f0       	push   $0xf0130780
f0119e68:	e8 c0 6d fe ff       	call   f0100c2d <cprintf>
f0119e6d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0119e70:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0119e76:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0119e79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119e80:	eb 1e                	jmp    f0119ea0 <test_kfree+0xd2f>
		{
			sums[2] += ptr[i] ;
f0119e82:	8b 95 38 fe ff ff    	mov    -0x1c8(%ebp),%edx
f0119e88:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0119e8b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119e8e:	01 c8                	add    %ecx,%eax
f0119e90:	8a 00                	mov    (%eax),%al
f0119e92:	0f be c0             	movsbl %al,%eax
f0119e95:	01 d0                	add    %edx,%eax
f0119e97:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0119e9d:	ff 45 f4             	incl   -0xc(%ebp)
f0119ea0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119ea6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119ea9:	7f d7                	jg     f0119e82 <test_kfree+0xd11>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0119eab:	8b 95 38 fe ff ff    	mov    -0x1c8(%ebp),%edx
f0119eb1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119eb7:	01 c0                	add    %eax,%eax
f0119eb9:	39 c2                	cmp    %eax,%edx
f0119ebb:	74 17                	je     f0119ed4 <test_kfree+0xd63>
f0119ebd:	83 ec 04             	sub    $0x4,%esp
f0119ec0:	68 a4 07 13 f0       	push   $0xf01307a4
f0119ec5:	68 54 05 00 00       	push   $0x554
f0119eca:	68 be ff 12 f0       	push   $0xf012ffbe
f0119ecf:	e8 d2 62 fe ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0119ed4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0119eda:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0119edd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119ee4:	eb 1e                	jmp    f0119f04 <test_kfree+0xd93>
		{
			sums[3] += ptr[i] ;
f0119ee6:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0119eec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0119eef:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119ef2:	01 c8                	add    %ecx,%eax
f0119ef4:	8a 00                	mov    (%eax),%al
f0119ef6:	0f be c0             	movsbl %al,%eax
f0119ef9:	01 d0                	add    %edx,%eax
f0119efb:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0119f01:	ff 45 f4             	incl   -0xc(%ebp)
f0119f04:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119f0a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119f0d:	7f d7                	jg     f0119ee6 <test_kfree+0xd75>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0119f0f:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0119f15:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119f1b:	89 c1                	mov    %eax,%ecx
f0119f1d:	01 c9                	add    %ecx,%ecx
f0119f1f:	01 c8                	add    %ecx,%eax
f0119f21:	39 c2                	cmp    %eax,%edx
f0119f23:	74 17                	je     f0119f3c <test_kfree+0xdcb>
f0119f25:	83 ec 04             	sub    $0x4,%esp
f0119f28:	68 a4 07 13 f0       	push   $0xf01307a4
f0119f2d:	68 5c 05 00 00       	push   $0x55c
f0119f32:	68 be ff 12 f0       	push   $0xf012ffbe
f0119f37:	e8 6a 62 fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0119f3c:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0119f42:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0119f45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119f4c:	eb 1e                	jmp    f0119f6c <test_kfree+0xdfb>
		{
			sums[4] += ptr[i] ;
f0119f4e:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0119f54:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0119f57:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119f5a:	01 c8                	add    %ecx,%eax
f0119f5c:	8a 00                	mov    (%eax),%al
f0119f5e:	0f be c0             	movsbl %al,%eax
f0119f61:	01 d0                	add    %edx,%eax
f0119f63:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0119f69:	ff 45 f4             	incl   -0xc(%ebp)
f0119f6c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f72:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119f75:	7f d7                	jg     f0119f4e <test_kfree+0xddd>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0119f77:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119f7d:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0119f83:	c1 e2 02             	shl    $0x2,%edx
f0119f86:	39 d0                	cmp    %edx,%eax
f0119f88:	74 17                	je     f0119fa1 <test_kfree+0xe30>
f0119f8a:	83 ec 04             	sub    $0x4,%esp
f0119f8d:	68 a4 07 13 f0       	push   $0xf01307a4
f0119f92:	68 64 05 00 00       	push   $0x564
f0119f97:	68 be ff 12 f0       	push   $0xf012ffbe
f0119f9c:	e8 05 62 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0119fa1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0119fa7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0119faa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119fb1:	eb 1e                	jmp    f0119fd1 <test_kfree+0xe60>
		{
			sums[5] += ptr[i] ;
f0119fb3:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0119fb9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0119fbc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119fbf:	01 c8                	add    %ecx,%eax
f0119fc1:	8a 00                	mov    (%eax),%al
f0119fc3:	0f be c0             	movsbl %al,%eax
f0119fc6:	01 d0                	add    %edx,%eax
f0119fc8:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0119fce:	ff 45 f4             	incl   -0xc(%ebp)
f0119fd1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119fd7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119fda:	7f d7                	jg     f0119fb3 <test_kfree+0xe42>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0119fdc:	8b 8d 44 fe ff ff    	mov    -0x1bc(%ebp),%ecx
f0119fe2:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0119fe8:	89 d0                	mov    %edx,%eax
f0119fea:	c1 e0 02             	shl    $0x2,%eax
f0119fed:	01 d0                	add    %edx,%eax
f0119fef:	39 c1                	cmp    %eax,%ecx
f0119ff1:	74 17                	je     f011a00a <test_kfree+0xe99>
f0119ff3:	83 ec 04             	sub    $0x4,%esp
f0119ff6:	68 a4 07 13 f0       	push   $0xf01307a4
f0119ffb:	68 6c 05 00 00       	push   $0x56c
f011a000:	68 be ff 12 f0       	push   $0xf012ffbe
f011a005:	e8 9c 61 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011a00a:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011a010:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011a013:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a01a:	eb 1e                	jmp    f011a03a <test_kfree+0xec9>
		{
			sums[7] += ptr[i] ;
f011a01c:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f011a022:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011a025:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a028:	01 c8                	add    %ecx,%eax
f011a02a:	8a 00                	mov    (%eax),%al
f011a02c:	0f be c0             	movsbl %al,%eax
f011a02f:	01 d0                	add    %edx,%eax
f011a031:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011a037:	ff 45 f4             	incl   -0xc(%ebp)
f011a03a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011a040:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a043:	7f d7                	jg     f011a01c <test_kfree+0xeab>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011a045:	8b 8d 4c fe ff ff    	mov    -0x1b4(%ebp),%ecx
f011a04b:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f011a051:	89 d0                	mov    %edx,%eax
f011a053:	01 c0                	add    %eax,%eax
f011a055:	01 d0                	add    %edx,%eax
f011a057:	01 c0                	add    %eax,%eax
f011a059:	01 d0                	add    %edx,%eax
f011a05b:	39 c1                	cmp    %eax,%ecx
f011a05d:	74 17                	je     f011a076 <test_kfree+0xf05>
f011a05f:	83 ec 04             	sub    $0x4,%esp
f011a062:	68 a4 07 13 f0       	push   $0xf01307a4
f011a067:	68 74 05 00 00       	push   $0x574
f011a06c:	68 be ff 12 f0       	push   $0xf012ffbe
f011a071:	e8 30 61 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f011a076:	83 ec 0c             	sub    $0xc,%esp
f011a079:	68 d7 07 13 f0       	push   $0xf01307d7
f011a07e:	e8 aa 6b fe ff       	call   f0100c2d <cprintf>
f011a083:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011a086:	e8 25 15 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a08b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a08e:	e8 11 94 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a093:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011a096:	83 ec 0c             	sub    $0xc,%esp
f011a099:	68 00 50 00 00       	push   $0x5000
f011a09e:	e8 51 cb fe ff       	call   f0106bf4 <kmalloc>
f011a0a3:	83 c4 10             	add    $0x10,%esp
f011a0a6:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011a0ac:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011a0b2:	89 c1                	mov    %eax,%ecx
f011a0b4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a0bb:	10 00 00 
f011a0be:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011a0c3:	0f b6 d0             	movzbl %al,%edx
f011a0c6:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a0cc:	01 d0                	add    %edx,%eax
f011a0ce:	48                   	dec    %eax
f011a0cf:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a0d5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a0db:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0e0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a0e6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a0ec:	29 d0                	sub    %edx,%eax
f011a0ee:	89 c3                	mov    %eax,%ebx
f011a0f0:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a0f7:	10 00 00 
f011a0fa:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011a0ff:	0f b6 c0             	movzbl %al,%eax
f011a102:	c1 e0 04             	shl    $0x4,%eax
f011a105:	89 c2                	mov    %eax,%edx
f011a107:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a10d:	01 d0                	add    %edx,%eax
f011a10f:	48                   	dec    %eax
f011a110:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a116:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a11c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a121:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a127:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a12d:	29 d0                	sub    %edx,%eax
f011a12f:	01 c3                	add    %eax,%ebx
f011a131:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a138:	10 00 00 
f011a13b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a146:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a14c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a152:	ba 00 00 00 00       	mov    $0x0,%edx
f011a157:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a15d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a163:	29 d0                	sub    %edx,%eax
f011a165:	01 d8                	add    %ebx,%eax
f011a167:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011a16c:	39 c1                	cmp    %eax,%ecx
f011a16e:	74 17                	je     f011a187 <test_kfree+0x1016>
f011a170:	83 ec 04             	sub    $0x4,%esp
f011a173:	68 a4 00 13 f0       	push   $0xf01300a4
f011a178:	68 7e 05 00 00       	push   $0x57e
f011a17d:	68 be ff 12 f0       	push   $0xf012ffbe
f011a182:	e8 1f 60 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a187:	e8 18 93 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a18c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a18f:	74 17                	je     f011a1a8 <test_kfree+0x1037>
f011a191:	83 ec 04             	sub    $0x4,%esp
f011a194:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a199:	68 7f 05 00 00       	push   $0x57f
f011a19e:	68 be ff 12 f0       	push   $0xf012ffbe
f011a1a3:	e8 fe 5f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a1a8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a1ab:	e8 00 14 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a1b0:	29 c3                	sub    %eax,%ebx
f011a1b2:	89 d8                	mov    %ebx,%eax
f011a1b4:	83 f8 05             	cmp    $0x5,%eax
f011a1b7:	74 17                	je     f011a1d0 <test_kfree+0x105f>
f011a1b9:	83 ec 04             	sub    $0x4,%esp
f011a1bc:	68 40 00 13 f0       	push   $0xf0130040
f011a1c1:	68 80 05 00 00       	push   $0x580
f011a1c6:	68 be ff 12 f0       	push   $0xf012ffbe
f011a1cb:	e8 d6 5f fe ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011a1d0:	c7 85 a0 fe ff ff ff 	movl   $0x4fff,-0x160(%ebp)
f011a1d7:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011a1da:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011a1e0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011a1e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a1ea:	eb 0e                	jmp    f011a1fa <test_kfree+0x1089>
		{
			ptr[i] = 8 ;
f011a1ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a1ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a1f2:	01 d0                	add    %edx,%eax
f011a1f4:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011a1f7:	ff 45 f4             	incl   -0xc(%ebp)
f011a1fa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011a200:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a203:	7f e7                	jg     f011a1ec <test_kfree+0x107b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a205:	e8 a6 13 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a20a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a20d:	e8 92 92 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a212:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011a215:	83 ec 0c             	sub    $0xc,%esp
f011a218:	68 00 00 10 00       	push   $0x100000
f011a21d:	e8 d2 c9 fe ff       	call   f0106bf4 <kmalloc>
f011a222:	83 c4 10             	add    $0x10,%esp
f011a225:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011a22b:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011a231:	89 c1                	mov    %eax,%ecx
f011a233:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a23a:	10 00 00 
f011a23d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011a242:	0f b6 d0             	movzbl %al,%edx
f011a245:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a24b:	01 d0                	add    %edx,%eax
f011a24d:	48                   	dec    %eax
f011a24e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a254:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a25a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a25f:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a265:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a26b:	29 d0                	sub    %edx,%eax
f011a26d:	89 c3                	mov    %eax,%ebx
f011a26f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a276:	10 00 00 
f011a279:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011a27e:	0f b6 c0             	movzbl %al,%eax
f011a281:	c1 e0 04             	shl    $0x4,%eax
f011a284:	89 c2                	mov    %eax,%edx
f011a286:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a28c:	01 d0                	add    %edx,%eax
f011a28e:	48                   	dec    %eax
f011a28f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a295:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a29b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2a0:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a2a6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a2ac:	29 d0                	sub    %edx,%eax
f011a2ae:	01 c3                	add    %eax,%ebx
f011a2b0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a2b7:	10 00 00 
f011a2ba:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a2c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a2c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a2cb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2d6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a2dc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2e2:	29 d0                	sub    %edx,%eax
f011a2e4:	01 d8                	add    %ebx,%eax
f011a2e6:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f011a2eb:	39 c1                	cmp    %eax,%ecx
f011a2ed:	74 17                	je     f011a306 <test_kfree+0x1195>
f011a2ef:	83 ec 04             	sub    $0x4,%esp
f011a2f2:	68 a4 00 13 f0       	push   $0xf01300a4
f011a2f7:	68 8c 05 00 00       	push   $0x58c
f011a2fc:	68 be ff 12 f0       	push   $0xf012ffbe
f011a301:	e8 a0 5e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a306:	e8 99 91 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a30b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a30e:	74 17                	je     f011a327 <test_kfree+0x11b6>
f011a310:	83 ec 04             	sub    $0x4,%esp
f011a313:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a318:	68 8d 05 00 00       	push   $0x58d
f011a31d:	68 be ff 12 f0       	push   $0xf012ffbe
f011a322:	e8 7f 5e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a327:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011a32a:	e8 81 12 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a32f:	29 c3                	sub    %eax,%ebx
f011a331:	89 d8                	mov    %ebx,%eax
f011a333:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a338:	74 17                	je     f011a351 <test_kfree+0x11e0>
f011a33a:	83 ec 04             	sub    $0x4,%esp
f011a33d:	68 40 00 13 f0       	push   $0xf0130040
f011a342:	68 8e 05 00 00       	push   $0x58e
f011a347:	68 be ff 12 f0       	push   $0xf012ffbe
f011a34c:	e8 55 5e fe ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011a351:	c7 85 a4 fe ff ff ff 	movl   $0xfffff,-0x15c(%ebp)
f011a358:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f011a35b:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011a361:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011a364:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a36b:	eb 0e                	jmp    f011a37b <test_kfree+0x120a>
		{
			ptr[i] = 9 ;
f011a36d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a370:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a373:	01 d0                	add    %edx,%eax
f011a375:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011a378:	ff 45 f4             	incl   -0xc(%ebp)
f011a37b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011a381:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a384:	7f e7                	jg     f011a36d <test_kfree+0x11fc>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f011a386:	83 ec 0c             	sub    $0xc,%esp
f011a389:	68 de 07 13 f0       	push   $0xf01307de
f011a38e:	e8 9a 68 fe ff       	call   f0100c2d <cprintf>
f011a393:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f011a396:	e8 15 12 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a39b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a39e:	e8 01 91 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a3a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f011a3a6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011a3ac:	83 ec 0c             	sub    $0xc,%esp
f011a3af:	50                   	push   %eax
f011a3b0:	e8 59 c8 fe ff       	call   f0106c0e <kfree>
f011a3b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3b8:	e8 e7 90 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a3bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a3c0:	74 17                	je     f011a3d9 <test_kfree+0x1268>
f011a3c2:	83 ec 04             	sub    $0x4,%esp
f011a3c5:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a3ca:	68 9e 05 00 00       	push   $0x59e
f011a3cf:	68 be ff 12 f0       	push   $0xf012ffbe
f011a3d4:	e8 cd 5d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f011a3d9:	e8 d2 11 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a3de:	89 c2                	mov    %eax,%edx
f011a3e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a3e3:	29 c2                	sub    %eax,%edx
f011a3e5:	89 d0                	mov    %edx,%eax
f011a3e7:	83 f8 02             	cmp    $0x2,%eax
f011a3ea:	74 17                	je     f011a403 <test_kfree+0x1292>
f011a3ec:	83 ec 04             	sub    $0x4,%esp
f011a3ef:	68 48 07 13 f0       	push   $0xf0130748
f011a3f4:	68 9f 05 00 00       	push   $0x59f
f011a3f9:	68 be ff 12 f0       	push   $0xf012ffbe
f011a3fe:	e8 a3 5d fe ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a403:	e8 a8 11 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a408:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a40b:	e8 94 90 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a410:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f011a413:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011a419:	83 ec 0c             	sub    $0xc,%esp
f011a41c:	50                   	push   %eax
f011a41d:	e8 ec c7 fe ff       	call   f0106c0e <kfree>
f011a422:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a425:	e8 7a 90 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a42a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a42d:	74 17                	je     f011a446 <test_kfree+0x12d5>
f011a42f:	83 ec 04             	sub    $0x4,%esp
f011a432:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a437:	68 a5 05 00 00       	push   $0x5a5
f011a43c:	68 be ff 12 f0       	push   $0xf012ffbe
f011a441:	e8 60 5d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011a446:	e8 65 11 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a44b:	89 c2                	mov    %eax,%edx
f011a44d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a450:	29 c2                	sub    %eax,%edx
f011a452:	89 d0                	mov    %edx,%eax
f011a454:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a459:	74 17                	je     f011a472 <test_kfree+0x1301>
f011a45b:	83 ec 04             	sub    $0x4,%esp
f011a45e:	68 48 07 13 f0       	push   $0xf0130748
f011a463:	68 a6 05 00 00       	push   $0x5a6
f011a468:	68 be ff 12 f0       	push   $0xf012ffbe
f011a46d:	e8 34 5d fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a472:	e8 39 11 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a477:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a47a:	e8 25 90 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a47f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011a482:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011a488:	83 ec 0c             	sub    $0xc,%esp
f011a48b:	50                   	push   %eax
f011a48c:	e8 7d c7 fe ff       	call   f0106c0e <kfree>
f011a491:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a494:	e8 0b 90 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a499:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a49c:	74 17                	je     f011a4b5 <test_kfree+0x1344>
f011a49e:	83 ec 04             	sub    $0x4,%esp
f011a4a1:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a4a6:	68 ac 05 00 00       	push   $0x5ac
f011a4ab:	68 be ff 12 f0       	push   $0xf012ffbe
f011a4b0:	e8 f1 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011a4b5:	e8 f6 10 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a4ba:	89 c2                	mov    %eax,%edx
f011a4bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a4bf:	29 c2                	sub    %eax,%edx
f011a4c1:	89 d0                	mov    %edx,%eax
f011a4c3:	83 f8 01             	cmp    $0x1,%eax
f011a4c6:	74 17                	je     f011a4df <test_kfree+0x136e>
f011a4c8:	83 ec 04             	sub    $0x4,%esp
f011a4cb:	68 48 07 13 f0       	push   $0xf0130748
f011a4d0:	68 ad 05 00 00       	push   $0x5ad
f011a4d5:	68 be ff 12 f0       	push   $0xf012ffbe
f011a4da:	e8 c7 5c fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a4df:	e8 cc 10 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a4e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4e7:	e8 b8 8f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a4ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f011a4ef:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011a4f5:	83 ec 0c             	sub    $0xc,%esp
f011a4f8:	50                   	push   %eax
f011a4f9:	e8 10 c7 fe ff       	call   f0106c0e <kfree>
f011a4fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a501:	e8 9e 8f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a506:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a509:	74 17                	je     f011a522 <test_kfree+0x13b1>
f011a50b:	83 ec 04             	sub    $0x4,%esp
f011a50e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a513:	68 b3 05 00 00       	push   $0x5b3
f011a518:	68 be ff 12 f0       	push   $0xf012ffbe
f011a51d:	e8 84 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011a522:	e8 89 10 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a527:	89 c2                	mov    %eax,%edx
f011a529:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a52c:	29 c2                	sub    %eax,%edx
f011a52e:	89 d0                	mov    %edx,%eax
f011a530:	83 f8 01             	cmp    $0x1,%eax
f011a533:	74 17                	je     f011a54c <test_kfree+0x13db>
f011a535:	83 ec 04             	sub    $0x4,%esp
f011a538:	68 48 07 13 f0       	push   $0xf0130748
f011a53d:	68 b4 05 00 00       	push   $0x5b4
f011a542:	68 be ff 12 f0       	push   $0xf012ffbe
f011a547:	e8 5a 5c fe ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f011a54c:	e8 5f 10 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a551:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a554:	e8 4b 8f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a559:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f011a55c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011a562:	83 ec 0c             	sub    $0xc,%esp
f011a565:	50                   	push   %eax
f011a566:	e8 a3 c6 fe ff       	call   f0106c0e <kfree>
f011a56b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a56e:	e8 31 8f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a573:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a576:	74 17                	je     f011a58f <test_kfree+0x141e>
f011a578:	83 ec 04             	sub    $0x4,%esp
f011a57b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a580:	68 ba 05 00 00       	push   $0x5ba
f011a585:	68 be ff 12 f0       	push   $0xf012ffbe
f011a58a:	e8 17 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f011a58f:	e8 1c 10 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a594:	89 c2                	mov    %eax,%edx
f011a596:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a599:	29 c2                	sub    %eax,%edx
f011a59b:	89 d0                	mov    %edx,%eax
f011a59d:	83 f8 04             	cmp    $0x4,%eax
f011a5a0:	74 17                	je     f011a5b9 <test_kfree+0x1448>
f011a5a2:	83 ec 04             	sub    $0x4,%esp
f011a5a5:	68 48 07 13 f0       	push   $0xf0130748
f011a5aa:	68 bb 05 00 00       	push   $0x5bb
f011a5af:	68 be ff 12 f0       	push   $0xf012ffbe
f011a5b4:	e8 ed 5b fe ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011a5b9:	e8 f2 0f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a5be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a5c1:	e8 de 8e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a5c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f011a5c9:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011a5cf:	83 ec 0c             	sub    $0xc,%esp
f011a5d2:	50                   	push   %eax
f011a5d3:	e8 36 c6 fe ff       	call   f0106c0e <kfree>
f011a5d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5db:	e8 c4 8e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a5e0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a5e3:	74 17                	je     f011a5fc <test_kfree+0x148b>
f011a5e5:	83 ec 04             	sub    $0x4,%esp
f011a5e8:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a5ed:	68 c1 05 00 00       	push   $0x5c1
f011a5f2:	68 be ff 12 f0       	push   $0xf012ffbe
f011a5f7:	e8 aa 5b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f011a5fc:	e8 af 0f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a601:	89 c2                	mov    %eax,%edx
f011a603:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a606:	29 c2                	sub    %eax,%edx
f011a608:	89 d0                	mov    %edx,%eax
f011a60a:	83 f8 05             	cmp    $0x5,%eax
f011a60d:	74 17                	je     f011a626 <test_kfree+0x14b5>
f011a60f:	83 ec 04             	sub    $0x4,%esp
f011a612:	68 48 07 13 f0       	push   $0xf0130748
f011a617:	68 c2 05 00 00       	push   $0x5c2
f011a61c:	68 be ff 12 f0       	push   $0xf012ffbe
f011a621:	e8 80 5b fe ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a626:	e8 85 0f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a62b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a62e:	e8 71 8e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a633:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011a636:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011a63c:	83 ec 0c             	sub    $0xc,%esp
f011a63f:	50                   	push   %eax
f011a640:	e8 c9 c5 fe ff       	call   f0106c0e <kfree>
f011a645:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a648:	e8 57 8e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a64d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a650:	74 17                	je     f011a669 <test_kfree+0x14f8>
f011a652:	83 ec 04             	sub    $0x4,%esp
f011a655:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a65a:	68 c8 05 00 00       	push   $0x5c8
f011a65f:	68 be ff 12 f0       	push   $0xf012ffbe
f011a664:	e8 3d 5b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f011a669:	e8 42 0f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a66e:	89 c2                	mov    %eax,%edx
f011a670:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a673:	29 c2                	sub    %eax,%edx
f011a675:	89 d0                	mov    %edx,%eax
f011a677:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a67c:	74 17                	je     f011a695 <test_kfree+0x1524>
f011a67e:	83 ec 04             	sub    $0x4,%esp
f011a681:	68 48 07 13 f0       	push   $0xf0130748
f011a686:	68 c9 05 00 00       	push   $0x5c9
f011a68b:	68 be ff 12 f0       	push   $0xf012ffbe
f011a690:	e8 11 5b fe ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f011a695:	e8 16 0f ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a69a:	89 c2                	mov    %eax,%edx
f011a69c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a69f:	39 c2                	cmp    %eax,%edx
f011a6a1:	74 17                	je     f011a6ba <test_kfree+0x1549>
f011a6a3:	83 ec 04             	sub    $0x4,%esp
f011a6a6:	68 e8 07 13 f0       	push   $0xf01307e8
f011a6ab:	68 cb 05 00 00       	push   $0x5cb
f011a6b0:	68 be ff 12 f0       	push   $0xf012ffbe
f011a6b5:	e8 ec 5a fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f011a6ba:	83 ec 0c             	sub    $0xc,%esp
f011a6bd:	68 1c 08 13 f0       	push   $0xf013081c
f011a6c2:	e8 66 65 fe ff       	call   f0100c2d <cprintf>
f011a6c7:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011a6ca:	83 ec 0c             	sub    $0xc,%esp
f011a6cd:	6a 03                	push   $0x3
f011a6cf:	e8 85 13 ff ff       	call   f010ba59 <sys_bypassPageFault>
f011a6d4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f011a6d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a6de:	e9 82 00 00 00       	jmp    f011a765 <test_kfree+0x15f4>
		{
			ptr = (char *) ptr_allocations[i];
f011a6e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a6e6:	8b 84 85 e0 fd ff ff 	mov    -0x220(%ebp,%eax,4),%eax
f011a6ed:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f011a6f0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a6f3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011a6f6:	e8 4c 13 ff ff       	call   f010ba47 <sys_rcr2>
f011a6fb:	89 c2                	mov    %eax,%edx
f011a6fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a700:	39 c2                	cmp    %eax,%edx
f011a702:	74 17                	je     f011a71b <test_kfree+0x15aa>
f011a704:	83 ec 04             	sub    $0x4,%esp
f011a707:	68 24 08 13 f0       	push   $0xf0130824
f011a70c:	68 da 05 00 00       	push   $0x5da
f011a711:	68 be ff 12 f0       	push   $0xf012ffbe
f011a716:	e8 8b 5a fe ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f011a71b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a71e:	8b 84 85 80 fe ff ff 	mov    -0x180(%ebp,%eax,4),%eax
f011a725:	89 c2                	mov    %eax,%edx
f011a727:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a72a:	01 d0                	add    %edx,%eax
f011a72c:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011a72f:	e8 13 13 ff ff       	call   f010ba47 <sys_rcr2>
f011a734:	89 c2                	mov    %eax,%edx
f011a736:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a739:	8b 84 85 80 fe ff ff 	mov    -0x180(%ebp,%eax,4),%eax
f011a740:	89 c1                	mov    %eax,%ecx
f011a742:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a745:	01 c8                	add    %ecx,%eax
f011a747:	39 c2                	cmp    %eax,%edx
f011a749:	74 17                	je     f011a762 <test_kfree+0x15f1>
f011a74b:	83 ec 04             	sub    $0x4,%esp
f011a74e:	68 24 08 13 f0       	push   $0xf0130824
f011a753:	68 dc 05 00 00       	push   $0x5dc
f011a758:	68 be ff 12 f0       	push   $0xf012ffbe
f011a75d:	e8 44 5a fe ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011a762:	ff 45 f4             	incl   -0xc(%ebp)
f011a765:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011a769:	0f 8e 74 ff ff ff    	jle    f011a6e3 <test_kfree+0x1572>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011a76f:	83 ec 0c             	sub    $0xc,%esp
f011a772:	6a 00                	push   $0x0
f011a774:	e8 e0 12 ff ff       	call   f010ba59 <sys_bypassPageFault>
f011a779:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f011a77c:	83 ec 0c             	sub    $0xc,%esp
f011a77f:	68 69 08 13 f0       	push   $0xf0130869
f011a784:	e8 a4 64 fe ff       	call   f0100c2d <cprintf>
f011a789:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a78c:	e8 1f 0e ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a791:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a794:	e8 0b 8d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a799:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f011a79c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011a7a2:	83 ec 0c             	sub    $0xc,%esp
f011a7a5:	50                   	push   %eax
f011a7a6:	e8 63 c4 fe ff       	call   f0106c0e <kfree>
f011a7ab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7ae:	e8 f1 8c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a7b3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a7b6:	74 17                	je     f011a7cf <test_kfree+0x165e>
f011a7b8:	83 ec 04             	sub    $0x4,%esp
f011a7bb:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a7c0:	68 ea 05 00 00       	push   $0x5ea
f011a7c5:	68 be ff 12 f0       	push   $0xf012ffbe
f011a7ca:	e8 d7 59 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011a7cf:	e8 dc 0d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a7d4:	89 c2                	mov    %eax,%edx
f011a7d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a7d9:	39 c2                	cmp    %eax,%edx
f011a7db:	74 17                	je     f011a7f4 <test_kfree+0x1683>
f011a7dd:	83 ec 04             	sub    $0x4,%esp
f011a7e0:	68 70 08 13 f0       	push   $0xf0130870
f011a7e5:	68 eb 05 00 00       	push   $0x5eb
f011a7ea:	68 be ff 12 f0       	push   $0xf012ffbe
f011a7ef:	e8 b2 59 fe ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a7f4:	e8 b7 0d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a7f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7fc:	e8 a3 8c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a801:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011a804:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011a80a:	83 ec 0c             	sub    $0xc,%esp
f011a80d:	50                   	push   %eax
f011a80e:	e8 fb c3 fe ff       	call   f0106c0e <kfree>
f011a813:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a816:	e8 89 8c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a81b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a81e:	74 17                	je     f011a837 <test_kfree+0x16c6>
f011a820:	83 ec 04             	sub    $0x4,%esp
f011a823:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a828:	68 f1 05 00 00       	push   $0x5f1
f011a82d:	68 be ff 12 f0       	push   $0xf012ffbe
f011a832:	e8 6f 59 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011a837:	e8 74 0d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a83c:	89 c2                	mov    %eax,%edx
f011a83e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a841:	39 c2                	cmp    %eax,%edx
f011a843:	74 17                	je     f011a85c <test_kfree+0x16eb>
f011a845:	83 ec 04             	sub    $0x4,%esp
f011a848:	68 70 08 13 f0       	push   $0xf0130870
f011a84d:	68 f2 05 00 00       	push   $0x5f2
f011a852:	68 be ff 12 f0       	push   $0xf012ffbe
f011a857:	e8 4a 59 fe ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011a85c:	e8 4f 0d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a861:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a864:	e8 3b 8c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a869:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f011a86c:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011a872:	83 ec 0c             	sub    $0xc,%esp
f011a875:	50                   	push   %eax
f011a876:	e8 93 c3 fe ff       	call   f0106c0e <kfree>
f011a87b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a87e:	e8 21 8c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a883:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a886:	74 17                	je     f011a89f <test_kfree+0x172e>
f011a888:	83 ec 04             	sub    $0x4,%esp
f011a88b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a890:	68 f8 05 00 00       	push   $0x5f8
f011a895:	68 be ff 12 f0       	push   $0xf012ffbe
f011a89a:	e8 07 59 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011a89f:	e8 0c 0d ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a8a4:	89 c2                	mov    %eax,%edx
f011a8a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8a9:	39 c2                	cmp    %eax,%edx
f011a8ab:	74 17                	je     f011a8c4 <test_kfree+0x1753>
f011a8ad:	83 ec 04             	sub    $0x4,%esp
f011a8b0:	68 70 08 13 f0       	push   $0xf0130870
f011a8b5:	68 f9 05 00 00       	push   $0x5f9
f011a8ba:	68 be ff 12 f0       	push   $0xf012ffbe
f011a8bf:	e8 e2 58 fe ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a8c4:	e8 e7 0c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a8c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8cc:	e8 d3 8b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a8d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011a8d4:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011a8da:	83 ec 0c             	sub    $0xc,%esp
f011a8dd:	50                   	push   %eax
f011a8de:	e8 2b c3 fe ff       	call   f0106c0e <kfree>
f011a8e3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8e6:	e8 b9 8b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011a8eb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011a8ee:	74 17                	je     f011a907 <test_kfree+0x1796>
f011a8f0:	83 ec 04             	sub    $0x4,%esp
f011a8f3:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011a8f8:	68 ff 05 00 00       	push   $0x5ff
f011a8fd:	68 be ff 12 f0       	push   $0xf012ffbe
f011a902:	e8 9f 58 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011a907:	e8 a4 0c ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011a90c:	89 c2                	mov    %eax,%edx
f011a90e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a911:	39 c2                	cmp    %eax,%edx
f011a913:	74 17                	je     f011a92c <test_kfree+0x17bb>
f011a915:	83 ec 04             	sub    $0x4,%esp
f011a918:	68 70 08 13 f0       	push   $0xf0130870
f011a91d:	68 00 06 00 00       	push   $0x600
f011a922:	68 be ff 12 f0       	push   $0xf012ffbe
f011a927:	e8 7a 58 fe ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f011a92c:	83 ec 0c             	sub    $0xc,%esp
f011a92f:	68 b7 08 13 f0       	push   $0xf01308b7
f011a934:	e8 f4 62 fe ff       	call   f0100c2d <cprintf>
f011a939:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011a93c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f011a943:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a94a:	eb 48                	jmp    f011a994 <test_kfree+0x1823>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011a94c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011a94f:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f011a954:	83 ec 04             	sub    $0x4,%esp
f011a957:	8d 8d dc fd ff ff    	lea    -0x224(%ebp),%ecx
f011a95d:	51                   	push   %ecx
f011a95e:	52                   	push   %edx
f011a95f:	50                   	push   %eax
f011a960:	e8 1c b8 fe ff       	call   f0106181 <get_page_table>
f011a965:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011a968:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011a96e:	85 c0                	test   %eax,%eax
f011a970:	75 17                	jne    f011a989 <test_kfree+0x1818>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f011a972:	83 ec 04             	sub    $0x4,%esp
f011a975:	68 c0 08 13 f0       	push   $0xf01308c0
f011a97a:	68 0e 06 00 00       	push   $0x60e
f011a97f:	68 be ff 12 f0       	push   $0xf012ffbe
f011a984:	e8 1d 58 fe ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011a989:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011a990:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f011a994:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011a998:	78 b2                	js     f011a94c <test_kfree+0x17db>
f011a99a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011a99e:	7f 09                	jg     f011a9a9 <test_kfree+0x1838>
f011a9a0:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f011a9a7:	76 a3                	jbe    f011a94c <test_kfree+0x17db>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f011a9a9:	83 ec 0c             	sub    $0xc,%esp
f011a9ac:	68 a2 01 13 f0       	push   $0xf01301a2
f011a9b1:	e8 77 62 fe ff       	call   f0100c2d <cprintf>
f011a9b6:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f011a9b9:	83 ec 0c             	sub    $0xc,%esp
f011a9bc:	68 28 09 13 f0       	push   $0xf0130928
f011a9c1:	e8 67 62 fe ff       	call   f0100c2d <cprintf>
f011a9c6:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a9c9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a9ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a9d1:	5b                   	pop    %ebx
f011a9d2:	5f                   	pop    %edi
f011a9d3:	5d                   	pop    %ebp
f011a9d4:	c3                   	ret    

f011a9d5 <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f011a9d5:	55                   	push   %ebp
f011a9d6:	89 e5                	mov    %esp,%ebp
f011a9d8:	57                   	push   %edi
f011a9d9:	53                   	push   %ebx
f011a9da:	81 ec 20 02 00 00    	sub    $0x220,%esp
	cprintf("==============================================\n");
f011a9e0:	83 ec 0c             	sub    $0xc,%esp
f011a9e3:	68 00 ff 12 f0       	push   $0xf012ff00
f011a9e8:	e8 40 62 fe ff       	call   f0100c2d <cprintf>
f011a9ed:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a9f0:	83 ec 0c             	sub    $0xc,%esp
f011a9f3:	68 30 ff 12 f0       	push   $0xf012ff30
f011a9f8:	e8 30 62 fe ff       	call   f0100c2d <cprintf>
f011a9fd:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011aa00:	83 ec 0c             	sub    $0xc,%esp
f011aa03:	68 00 ff 12 f0       	push   $0xf012ff00
f011aa08:	e8 20 62 fe ff       	call   f0100c2d <cprintf>
f011aa0d:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011aa10:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011aa14:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011aa18:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011aa1e:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011aa24:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011aa2b:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011aa32:	e8 79 0b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011aa37:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011aa3a:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f011aa40:	b9 14 00 00 00       	mov    $0x14,%ecx
f011aa45:	b8 00 00 00 00       	mov    $0x0,%eax
f011aa4a:	89 d7                	mov    %edx,%edi
f011aa4c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011aa4e:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f011aa54:	b9 14 00 00 00       	mov    $0x14,%ecx
f011aa59:	b8 00 00 00 00       	mov    $0x0,%eax
f011aa5e:	89 d7                	mov    %edx,%edi
f011aa60:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011aa62:	8d 95 e0 fd ff ff    	lea    -0x220(%ebp),%edx
f011aa68:	b9 14 00 00 00       	mov    $0x14,%ecx
f011aa6d:	b8 00 00 00 00       	mov    $0x0,%eax
f011aa72:	89 d7                	mov    %edx,%edi
f011aa74:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa76:	e8 35 0b ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011aa7b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa7e:	e8 21 8a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011aa83:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011aa86:	83 ec 0c             	sub    $0xc,%esp
f011aa89:	68 00 fc 1f 00       	push   $0x1ffc00
f011aa8e:	e8 61 c1 fe ff       	call   f0106bf4 <kmalloc>
f011aa93:	83 c4 10             	add    $0x10,%esp
f011aa96:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011aa9c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011aaa2:	89 c1                	mov    %eax,%ecx
f011aaa4:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011aaab:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011aab0:	0f b6 d0             	movzbl %al,%edx
f011aab3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aab6:	01 d0                	add    %edx,%eax
f011aab8:	48                   	dec    %eax
f011aab9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011aabc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aabf:	ba 00 00 00 00       	mov    $0x0,%edx
f011aac4:	f7 75 c8             	divl   -0x38(%ebp)
f011aac7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aaca:	29 d0                	sub    %edx,%eax
f011aacc:	89 c3                	mov    %eax,%ebx
f011aace:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011aad5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011aada:	0f b6 c0             	movzbl %al,%eax
f011aadd:	c1 e0 04             	shl    $0x4,%eax
f011aae0:	89 c2                	mov    %eax,%edx
f011aae2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aae5:	01 d0                	add    %edx,%eax
f011aae7:	48                   	dec    %eax
f011aae8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011aaeb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aaee:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaf3:	f7 75 c0             	divl   -0x40(%ebp)
f011aaf6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aaf9:	29 d0                	sub    %edx,%eax
f011aafb:	01 c3                	add    %eax,%ebx
f011aafd:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011ab04:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ab07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab0c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011ab0f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ab12:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab17:	f7 75 b8             	divl   -0x48(%ebp)
f011ab1a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ab1d:	29 d0                	sub    %edx,%eax
f011ab1f:	01 d8                	add    %ebx,%eax
f011ab21:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ab26:	39 c1                	cmp    %eax,%ecx
f011ab28:	74 17                	je     f011ab41 <test_kfree_bestfit+0x16c>
f011ab2a:	83 ec 04             	sub    $0x4,%esp
f011ab2d:	68 a4 00 13 f0       	push   $0xf01300a4
f011ab32:	68 3b 06 00 00       	push   $0x63b
f011ab37:	68 be ff 12 f0       	push   $0xf012ffbe
f011ab3c:	e8 65 56 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab41:	e8 5e 89 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ab46:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ab49:	74 17                	je     f011ab62 <test_kfree_bestfit+0x18d>
f011ab4b:	83 ec 04             	sub    $0x4,%esp
f011ab4e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ab53:	68 3c 06 00 00       	push   $0x63c
f011ab58:	68 be ff 12 f0       	push   $0xf012ffbe
f011ab5d:	e8 44 56 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ab62:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ab65:	e8 46 0a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ab6a:	29 c3                	sub    %eax,%ebx
f011ab6c:	89 d8                	mov    %ebx,%eax
f011ab6e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ab73:	74 17                	je     f011ab8c <test_kfree_bestfit+0x1b7>
f011ab75:	83 ec 04             	sub    $0x4,%esp
f011ab78:	68 40 00 13 f0       	push   $0xf0130040
f011ab7d:	68 3d 06 00 00       	push   $0x63d
f011ab82:	68 be ff 12 f0       	push   $0xf012ffbe
f011ab87:	e8 1a 56 fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011ab8c:	c7 85 80 fe ff ff ff 	movl   $0x1ffbff,-0x180(%ebp)
f011ab93:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab96:	e8 15 0a ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ab9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab9e:	e8 01 89 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011aba3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011aba6:	83 ec 0c             	sub    $0xc,%esp
f011aba9:	68 00 fc 1f 00       	push   $0x1ffc00
f011abae:	e8 41 c0 fe ff       	call   f0106bf4 <kmalloc>
f011abb3:	83 c4 10             	add    $0x10,%esp
f011abb6:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011abbc:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011abc2:	89 c1                	mov    %eax,%ecx
f011abc4:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011abcb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011abd0:	0f b6 d0             	movzbl %al,%edx
f011abd3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011abd6:	01 d0                	add    %edx,%eax
f011abd8:	48                   	dec    %eax
f011abd9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011abdc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011abdf:	ba 00 00 00 00       	mov    $0x0,%edx
f011abe4:	f7 75 b0             	divl   -0x50(%ebp)
f011abe7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011abea:	29 d0                	sub    %edx,%eax
f011abec:	89 c3                	mov    %eax,%ebx
f011abee:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011abf5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011abfa:	0f b6 c0             	movzbl %al,%eax
f011abfd:	c1 e0 04             	shl    $0x4,%eax
f011ac00:	89 c2                	mov    %eax,%edx
f011ac02:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ac05:	01 d0                	add    %edx,%eax
f011ac07:	48                   	dec    %eax
f011ac08:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011ac0b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ac0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac13:	f7 75 a8             	divl   -0x58(%ebp)
f011ac16:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ac19:	29 d0                	sub    %edx,%eax
f011ac1b:	01 c3                	add    %eax,%ebx
f011ac1d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011ac24:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac2c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011ac2f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac32:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac37:	f7 75 a0             	divl   -0x60(%ebp)
f011ac3a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac3d:	29 d0                	sub    %edx,%eax
f011ac3f:	01 d8                	add    %ebx,%eax
f011ac41:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011ac46:	39 c1                	cmp    %eax,%ecx
f011ac48:	74 17                	je     f011ac61 <test_kfree_bestfit+0x28c>
f011ac4a:	83 ec 04             	sub    $0x4,%esp
f011ac4d:	68 a4 00 13 f0       	push   $0xf01300a4
f011ac52:	68 44 06 00 00       	push   $0x644
f011ac57:	68 be ff 12 f0       	push   $0xf012ffbe
f011ac5c:	e8 45 55 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac61:	e8 3e 88 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ac66:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ac69:	74 17                	je     f011ac82 <test_kfree_bestfit+0x2ad>
f011ac6b:	83 ec 04             	sub    $0x4,%esp
f011ac6e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ac73:	68 45 06 00 00       	push   $0x645
f011ac78:	68 be ff 12 f0       	push   $0xf012ffbe
f011ac7d:	e8 24 55 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ac82:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ac85:	e8 26 09 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ac8a:	29 c3                	sub    %eax,%ebx
f011ac8c:	89 d8                	mov    %ebx,%eax
f011ac8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ac93:	74 17                	je     f011acac <test_kfree_bestfit+0x2d7>
f011ac95:	83 ec 04             	sub    $0x4,%esp
f011ac98:	68 40 00 13 f0       	push   $0xf0130040
f011ac9d:	68 46 06 00 00       	push   $0x646
f011aca2:	68 be ff 12 f0       	push   $0xf012ffbe
f011aca7:	e8 fa 54 fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011acac:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f011acb3:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011acb6:	e8 f5 08 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011acbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acbe:	e8 e1 87 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011acc3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011acc6:	83 ec 0c             	sub    $0xc,%esp
f011acc9:	68 00 08 00 00       	push   $0x800
f011acce:	e8 21 bf fe ff       	call   f0106bf4 <kmalloc>
f011acd3:	83 c4 10             	add    $0x10,%esp
f011acd6:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011acdc:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011ace2:	89 c1                	mov    %eax,%ecx
f011ace4:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011aceb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011acf0:	0f b6 d0             	movzbl %al,%edx
f011acf3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011acf6:	01 d0                	add    %edx,%eax
f011acf8:	48                   	dec    %eax
f011acf9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011acfc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011acff:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad04:	f7 75 98             	divl   -0x68(%ebp)
f011ad07:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ad0a:	29 d0                	sub    %edx,%eax
f011ad0c:	89 c3                	mov    %eax,%ebx
f011ad0e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011ad15:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ad1a:	0f b6 c0             	movzbl %al,%eax
f011ad1d:	c1 e0 04             	shl    $0x4,%eax
f011ad20:	89 c2                	mov    %eax,%edx
f011ad22:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ad25:	01 d0                	add    %edx,%eax
f011ad27:	48                   	dec    %eax
f011ad28:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011ad2b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad2e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad33:	f7 75 90             	divl   -0x70(%ebp)
f011ad36:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad39:	29 d0                	sub    %edx,%eax
f011ad3b:	01 c3                	add    %eax,%ebx
f011ad3d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011ad44:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad4c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011ad4f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad57:	f7 75 88             	divl   -0x78(%ebp)
f011ad5a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad5d:	29 d0                	sub    %edx,%eax
f011ad5f:	01 d8                	add    %ebx,%eax
f011ad61:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ad66:	39 c1                	cmp    %eax,%ecx
f011ad68:	74 17                	je     f011ad81 <test_kfree_bestfit+0x3ac>
f011ad6a:	83 ec 04             	sub    $0x4,%esp
f011ad6d:	68 a4 00 13 f0       	push   $0xf01300a4
f011ad72:	68 4d 06 00 00       	push   $0x64d
f011ad77:	68 be ff 12 f0       	push   $0xf012ffbe
f011ad7c:	e8 25 54 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad81:	e8 1e 87 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ad86:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ad89:	74 17                	je     f011ada2 <test_kfree_bestfit+0x3cd>
f011ad8b:	83 ec 04             	sub    $0x4,%esp
f011ad8e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ad93:	68 4e 06 00 00       	push   $0x64e
f011ad98:	68 be ff 12 f0       	push   $0xf012ffbe
f011ad9d:	e8 04 54 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ada2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ada5:	e8 06 08 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011adaa:	29 c3                	sub    %eax,%ebx
f011adac:	89 d8                	mov    %ebx,%eax
f011adae:	83 f8 01             	cmp    $0x1,%eax
f011adb1:	74 17                	je     f011adca <test_kfree_bestfit+0x3f5>
f011adb3:	83 ec 04             	sub    $0x4,%esp
f011adb6:	68 40 00 13 f0       	push   $0xf0130040
f011adbb:	68 4f 06 00 00       	push   $0x64f
f011adc0:	68 be ff 12 f0       	push   $0xf012ffbe
f011adc5:	e8 dc 53 fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011adca:	c7 85 88 fe ff ff ff 	movl   $0x7ff,-0x178(%ebp)
f011add1:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011add4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011adda:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011addd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ade4:	eb 0e                	jmp    f011adf4 <test_kfree_bestfit+0x41f>
		{
			ptr[i] = 2 ;
f011ade6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ade9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011adec:	01 d0                	add    %edx,%eax
f011adee:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011adf1:	ff 45 f4             	incl   -0xc(%ebp)
f011adf4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011adfa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011adfd:	7f e7                	jg     f011ade6 <test_kfree_bestfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011adff:	e8 ac 07 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ae04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae07:	e8 98 86 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ae0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ae0f:	83 ec 0c             	sub    $0xc,%esp
f011ae12:	68 00 08 00 00       	push   $0x800
f011ae17:	e8 d8 bd fe ff       	call   f0106bf4 <kmalloc>
f011ae1c:	83 c4 10             	add    $0x10,%esp
f011ae1f:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ae25:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011ae2b:	89 c1                	mov    %eax,%ecx
f011ae2d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ae34:	10 00 00 
f011ae37:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ae3c:	0f b6 d0             	movzbl %al,%edx
f011ae3f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ae45:	01 d0                	add    %edx,%eax
f011ae47:	48                   	dec    %eax
f011ae48:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ae4e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae54:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae59:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ae5f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae65:	29 d0                	sub    %edx,%eax
f011ae67:	89 c3                	mov    %eax,%ebx
f011ae69:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae70:	10 00 00 
f011ae73:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ae78:	0f b6 c0             	movzbl %al,%eax
f011ae7b:	c1 e0 04             	shl    $0x4,%eax
f011ae7e:	89 c2                	mov    %eax,%edx
f011ae80:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae86:	01 d0                	add    %edx,%eax
f011ae88:	48                   	dec    %eax
f011ae89:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae8f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae95:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae9a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aea0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aea6:	29 d0                	sub    %edx,%eax
f011aea8:	01 c3                	add    %eax,%ebx
f011aeaa:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011aeb1:	10 00 00 
f011aeb4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011aeba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aebf:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011aec5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aecb:	ba 00 00 00 00       	mov    $0x0,%edx
f011aed0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011aed6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aedc:	29 d0                	sub    %edx,%eax
f011aede:	01 d8                	add    %ebx,%eax
f011aee0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011aee5:	39 c1                	cmp    %eax,%ecx
f011aee7:	74 17                	je     f011af00 <test_kfree_bestfit+0x52b>
f011aee9:	83 ec 04             	sub    $0x4,%esp
f011aeec:	68 a4 00 13 f0       	push   $0xf01300a4
f011aef1:	68 5b 06 00 00       	push   $0x65b
f011aef6:	68 be ff 12 f0       	push   $0xf012ffbe
f011aefb:	e8 a6 52 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af00:	e8 9f 85 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011af05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011af08:	74 17                	je     f011af21 <test_kfree_bestfit+0x54c>
f011af0a:	83 ec 04             	sub    $0x4,%esp
f011af0d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011af12:	68 5c 06 00 00       	push   $0x65c
f011af17:	68 be ff 12 f0       	push   $0xf012ffbe
f011af1c:	e8 85 52 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011af21:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011af24:	e8 87 06 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011af29:	29 c3                	sub    %eax,%ebx
f011af2b:	89 d8                	mov    %ebx,%eax
f011af2d:	83 f8 01             	cmp    $0x1,%eax
f011af30:	74 17                	je     f011af49 <test_kfree_bestfit+0x574>
f011af32:	83 ec 04             	sub    $0x4,%esp
f011af35:	68 40 00 13 f0       	push   $0xf0130040
f011af3a:	68 5d 06 00 00       	push   $0x65d
f011af3f:	68 be ff 12 f0       	push   $0xf012ffbe
f011af44:	e8 5d 52 fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011af49:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f011af50:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011af53:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011af59:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011af5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011af63:	eb 0e                	jmp    f011af73 <test_kfree_bestfit+0x59e>
		{
			ptr[i] = 3 ;
f011af65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af68:	8b 45 80             	mov    -0x80(%ebp),%eax
f011af6b:	01 d0                	add    %edx,%eax
f011af6d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011af70:	ff 45 f4             	incl   -0xc(%ebp)
f011af73:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011af79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011af7c:	7f e7                	jg     f011af65 <test_kfree_bestfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011af7e:	e8 2d 06 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011af83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af86:	e8 19 85 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011af8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011af8e:	83 ec 0c             	sub    $0xc,%esp
f011af91:	68 00 1c 00 00       	push   $0x1c00
f011af96:	e8 59 bc fe ff       	call   f0106bf4 <kmalloc>
f011af9b:	83 c4 10             	add    $0x10,%esp
f011af9e:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011afa4:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011afaa:	89 c1                	mov    %eax,%ecx
f011afac:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011afb3:	10 00 00 
f011afb6:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011afbb:	0f b6 d0             	movzbl %al,%edx
f011afbe:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011afc4:	01 d0                	add    %edx,%eax
f011afc6:	48                   	dec    %eax
f011afc7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011afcd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011afd3:	ba 00 00 00 00       	mov    $0x0,%edx
f011afd8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011afde:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011afe4:	29 d0                	sub    %edx,%eax
f011afe6:	89 c3                	mov    %eax,%ebx
f011afe8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011afef:	10 00 00 
f011aff2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011aff7:	0f b6 c0             	movzbl %al,%eax
f011affa:	c1 e0 04             	shl    $0x4,%eax
f011affd:	89 c2                	mov    %eax,%edx
f011afff:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b005:	01 d0                	add    %edx,%eax
f011b007:	48                   	dec    %eax
f011b008:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b00e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b014:	ba 00 00 00 00       	mov    $0x0,%edx
f011b019:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b01f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b025:	29 d0                	sub    %edx,%eax
f011b027:	01 c3                	add    %eax,%ebx
f011b029:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b030:	10 00 00 
f011b033:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b039:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b03e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b044:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b04a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b04f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b055:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b05b:	29 d0                	sub    %edx,%eax
f011b05d:	01 d8                	add    %ebx,%eax
f011b05f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b064:	39 c1                	cmp    %eax,%ecx
f011b066:	74 17                	je     f011b07f <test_kfree_bestfit+0x6aa>
f011b068:	83 ec 04             	sub    $0x4,%esp
f011b06b:	68 a4 00 13 f0       	push   $0xf01300a4
f011b070:	68 69 06 00 00       	push   $0x669
f011b075:	68 be ff 12 f0       	push   $0xf012ffbe
f011b07a:	e8 27 51 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b07f:	e8 20 84 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b084:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b087:	74 17                	je     f011b0a0 <test_kfree_bestfit+0x6cb>
f011b089:	83 ec 04             	sub    $0x4,%esp
f011b08c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b091:	68 6a 06 00 00       	push   $0x66a
f011b096:	68 be ff 12 f0       	push   $0xf012ffbe
f011b09b:	e8 06 51 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b0a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011b0a3:	e8 08 05 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b0a8:	29 c3                	sub    %eax,%ebx
f011b0aa:	89 d8                	mov    %ebx,%eax
f011b0ac:	83 f8 02             	cmp    $0x2,%eax
f011b0af:	74 17                	je     f011b0c8 <test_kfree_bestfit+0x6f3>
f011b0b1:	83 ec 04             	sub    $0x4,%esp
f011b0b4:	68 40 00 13 f0       	push   $0xf0130040
f011b0b9:	68 6b 06 00 00       	push   $0x66b
f011b0be:	68 be ff 12 f0       	push   $0xf012ffbe
f011b0c3:	e8 de 50 fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011b0c8:	c7 85 90 fe ff ff ff 	movl   $0x1bff,-0x170(%ebp)
f011b0cf:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011b0d2:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011b0d8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011b0db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b0e2:	eb 0e                	jmp    f011b0f2 <test_kfree_bestfit+0x71d>
		{
			ptr[i] = 4 ;
f011b0e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b0ea:	01 d0                	add    %edx,%eax
f011b0ec:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011b0ef:	ff 45 f4             	incl   -0xc(%ebp)
f011b0f2:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b0f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b0fb:	7f e7                	jg     f011b0e4 <test_kfree_bestfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b0fd:	e8 ae 04 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b102:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b105:	e8 9a 83 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b10a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b10d:	83 ec 0c             	sub    $0xc,%esp
f011b110:	68 00 fc 2f 00       	push   $0x2ffc00
f011b115:	e8 da ba fe ff       	call   f0106bf4 <kmalloc>
f011b11a:	83 c4 10             	add    $0x10,%esp
f011b11d:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011b123:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011b129:	89 c1                	mov    %eax,%ecx
f011b12b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b132:	10 00 00 
f011b135:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b13a:	0f b6 d0             	movzbl %al,%edx
f011b13d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b143:	01 d0                	add    %edx,%eax
f011b145:	48                   	dec    %eax
f011b146:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b14c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b152:	ba 00 00 00 00       	mov    $0x0,%edx
f011b157:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b15d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b163:	29 d0                	sub    %edx,%eax
f011b165:	89 c3                	mov    %eax,%ebx
f011b167:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b16e:	10 00 00 
f011b171:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b176:	0f b6 c0             	movzbl %al,%eax
f011b179:	c1 e0 04             	shl    $0x4,%eax
f011b17c:	89 c2                	mov    %eax,%edx
f011b17e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b184:	01 d0                	add    %edx,%eax
f011b186:	48                   	dec    %eax
f011b187:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b18d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b193:	ba 00 00 00 00       	mov    $0x0,%edx
f011b198:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b19e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b1a4:	29 d0                	sub    %edx,%eax
f011b1a6:	01 c3                	add    %eax,%ebx
f011b1a8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b1af:	10 00 00 
f011b1b2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b1b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1bd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b1c3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b1c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1ce:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b1d4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b1da:	29 d0                	sub    %edx,%eax
f011b1dc:	01 d8                	add    %ebx,%eax
f011b1de:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b1e3:	39 c1                	cmp    %eax,%ecx
f011b1e5:	74 17                	je     f011b1fe <test_kfree_bestfit+0x829>
f011b1e7:	83 ec 04             	sub    $0x4,%esp
f011b1ea:	68 a4 00 13 f0       	push   $0xf01300a4
f011b1ef:	68 77 06 00 00       	push   $0x677
f011b1f4:	68 be ff 12 f0       	push   $0xf012ffbe
f011b1f9:	e8 a8 4f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1fe:	e8 a1 82 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b203:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b206:	74 17                	je     f011b21f <test_kfree_bestfit+0x84a>
f011b208:	83 ec 04             	sub    $0x4,%esp
f011b20b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b210:	68 78 06 00 00       	push   $0x678
f011b215:	68 be ff 12 f0       	push   $0xf012ffbe
f011b21a:	e8 87 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b21f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011b222:	e8 89 03 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b227:	29 c3                	sub    %eax,%ebx
f011b229:	89 d8                	mov    %ebx,%eax
f011b22b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b230:	74 17                	je     f011b249 <test_kfree_bestfit+0x874>
f011b232:	83 ec 04             	sub    $0x4,%esp
f011b235:	68 40 00 13 f0       	push   $0xf0130040
f011b23a:	68 79 06 00 00       	push   $0x679
f011b23f:	68 be ff 12 f0       	push   $0xf012ffbe
f011b244:	e8 5d 4f fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011b249:	c7 85 94 fe ff ff ff 	movl   $0x2ffbff,-0x16c(%ebp)
f011b250:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011b253:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011b259:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011b25c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b263:	eb 0e                	jmp    f011b273 <test_kfree_bestfit+0x89e>
		{
			ptr[i] = 5 ;
f011b265:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b268:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b26b:	01 d0                	add    %edx,%eax
f011b26d:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011b270:	ff 45 f4             	incl   -0xc(%ebp)
f011b273:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b279:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b27c:	7f e7                	jg     f011b265 <test_kfree_bestfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011b27e:	e8 2d 03 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b283:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b286:	e8 19 82 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b28b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011b28e:	83 ec 0c             	sub    $0xc,%esp
f011b291:	68 00 fc 5f 00       	push   $0x5ffc00
f011b296:	e8 59 b9 fe ff       	call   f0106bf4 <kmalloc>
f011b29b:	83 c4 10             	add    $0x10,%esp
f011b29e:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011b2a4:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011b2aa:	89 c1                	mov    %eax,%ecx
f011b2ac:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b2b3:	10 00 00 
f011b2b6:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b2bb:	0f b6 d0             	movzbl %al,%edx
f011b2be:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b2c4:	01 d0                	add    %edx,%eax
f011b2c6:	48                   	dec    %eax
f011b2c7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b2cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b2d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2d8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b2de:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b2e4:	29 d0                	sub    %edx,%eax
f011b2e6:	89 c3                	mov    %eax,%ebx
f011b2e8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b2ef:	10 00 00 
f011b2f2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b2f7:	0f b6 c0             	movzbl %al,%eax
f011b2fa:	c1 e0 04             	shl    $0x4,%eax
f011b2fd:	89 c2                	mov    %eax,%edx
f011b2ff:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b305:	01 d0                	add    %edx,%eax
f011b307:	48                   	dec    %eax
f011b308:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b30e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b314:	ba 00 00 00 00       	mov    $0x0,%edx
f011b319:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b31f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b325:	29 d0                	sub    %edx,%eax
f011b327:	01 c3                	add    %eax,%ebx
f011b329:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b330:	10 00 00 
f011b333:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b339:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b33e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b344:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b34a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b34f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b355:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b35b:	29 d0                	sub    %edx,%eax
f011b35d:	01 d8                	add    %ebx,%eax
f011b35f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b364:	39 c1                	cmp    %eax,%ecx
f011b366:	74 17                	je     f011b37f <test_kfree_bestfit+0x9aa>
f011b368:	83 ec 04             	sub    $0x4,%esp
f011b36b:	68 a4 00 13 f0       	push   $0xf01300a4
f011b370:	68 85 06 00 00       	push   $0x685
f011b375:	68 be ff 12 f0       	push   $0xf012ffbe
f011b37a:	e8 27 4e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b37f:	e8 20 81 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b384:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b387:	74 17                	je     f011b3a0 <test_kfree_bestfit+0x9cb>
f011b389:	83 ec 04             	sub    $0x4,%esp
f011b38c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b391:	68 86 06 00 00       	push   $0x686
f011b396:	68 be ff 12 f0       	push   $0xf012ffbe
f011b39b:	e8 06 4e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b3a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011b3a3:	e8 08 02 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b3a8:	29 c3                	sub    %eax,%ebx
f011b3aa:	89 d8                	mov    %ebx,%eax
f011b3ac:	3d 00 06 00 00       	cmp    $0x600,%eax
f011b3b1:	74 17                	je     f011b3ca <test_kfree_bestfit+0x9f5>
f011b3b3:	83 ec 04             	sub    $0x4,%esp
f011b3b6:	68 40 00 13 f0       	push   $0xf0130040
f011b3bb:	68 87 06 00 00       	push   $0x687
f011b3c0:	68 be ff 12 f0       	push   $0xf012ffbe
f011b3c5:	e8 dc 4d fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011b3ca:	c7 85 98 fe ff ff ff 	movl   $0x5ffbff,-0x168(%ebp)
f011b3d1:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011b3d4:	e8 d7 01 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b3d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3dc:	e8 c3 80 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b3e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011b3e4:	83 ec 0c             	sub    $0xc,%esp
f011b3e7:	68 00 38 00 00       	push   $0x3800
f011b3ec:	e8 03 b8 fe ff       	call   f0106bf4 <kmalloc>
f011b3f1:	83 c4 10             	add    $0x10,%esp
f011b3f4:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011b3fa:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011b400:	89 c1                	mov    %eax,%ecx
f011b402:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b409:	10 00 00 
f011b40c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b411:	0f b6 d0             	movzbl %al,%edx
f011b414:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b41a:	01 d0                	add    %edx,%eax
f011b41c:	48                   	dec    %eax
f011b41d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b423:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b429:	ba 00 00 00 00       	mov    $0x0,%edx
f011b42e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b434:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b43a:	29 d0                	sub    %edx,%eax
f011b43c:	89 c3                	mov    %eax,%ebx
f011b43e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b445:	10 00 00 
f011b448:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b44d:	0f b6 c0             	movzbl %al,%eax
f011b450:	c1 e0 04             	shl    $0x4,%eax
f011b453:	89 c2                	mov    %eax,%edx
f011b455:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b45b:	01 d0                	add    %edx,%eax
f011b45d:	48                   	dec    %eax
f011b45e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b464:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b46a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b46f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b475:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b47b:	29 d0                	sub    %edx,%eax
f011b47d:	01 c3                	add    %eax,%ebx
f011b47f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b486:	10 00 00 
f011b489:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b48f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b494:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b49a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b4a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4a5:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b4ab:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b4b1:	29 d0                	sub    %edx,%eax
f011b4b3:	01 d8                	add    %ebx,%eax
f011b4b5:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011b4ba:	39 c1                	cmp    %eax,%ecx
f011b4bc:	74 17                	je     f011b4d5 <test_kfree_bestfit+0xb00>
f011b4be:	83 ec 04             	sub    $0x4,%esp
f011b4c1:	68 a4 00 13 f0       	push   $0xf01300a4
f011b4c6:	68 8e 06 00 00       	push   $0x68e
f011b4cb:	68 be ff 12 f0       	push   $0xf012ffbe
f011b4d0:	e8 d1 4c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4d5:	e8 ca 7f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b4da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b4dd:	74 17                	je     f011b4f6 <test_kfree_bestfit+0xb21>
f011b4df:	83 ec 04             	sub    $0x4,%esp
f011b4e2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b4e7:	68 8f 06 00 00       	push   $0x68f
f011b4ec:	68 be ff 12 f0       	push   $0xf012ffbe
f011b4f1:	e8 b0 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011b4f6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011b4f9:	e8 b2 00 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b4fe:	29 c3                	sub    %eax,%ebx
f011b500:	89 d8                	mov    %ebx,%eax
f011b502:	83 f8 04             	cmp    $0x4,%eax
f011b505:	74 17                	je     f011b51e <test_kfree_bestfit+0xb49>
f011b507:	83 ec 04             	sub    $0x4,%esp
f011b50a:	68 40 00 13 f0       	push   $0xf0130040
f011b50f:	68 90 06 00 00       	push   $0x690
f011b514:	68 be ff 12 f0       	push   $0xf012ffbe
f011b519:	e8 88 4c fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011b51e:	c7 85 9c fe ff ff ff 	movl   $0x37ff,-0x164(%ebp)
f011b525:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011b528:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011b52e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011b531:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b538:	eb 0e                	jmp    f011b548 <test_kfree_bestfit+0xb73>
		{
			ptr[i] = 7 ;
f011b53a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b53d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b540:	01 d0                	add    %edx,%eax
f011b542:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011b545:	ff 45 f4             	incl   -0xc(%ebp)
f011b548:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011b54e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b551:	7f e7                	jg     f011b53a <test_kfree_bestfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011b553:	e8 58 00 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b558:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011b55e:	e8 41 7f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b563:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f011b569:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011b56f:	83 ec 0c             	sub    $0xc,%esp
f011b572:	50                   	push   %eax
f011b573:	e8 96 b6 fe ff       	call   f0106c0e <kfree>
f011b578:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b57b:	e8 24 7f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b580:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011b586:	74 17                	je     f011b59f <test_kfree_bestfit+0xbca>
f011b588:	83 ec 04             	sub    $0x4,%esp
f011b58b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b590:	68 9f 06 00 00       	push   $0x69f
f011b595:	68 be ff 12 f0       	push   $0xf012ffbe
f011b59a:	e8 07 4c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011b59f:	e8 0c 00 ff ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b5a4:	89 c2                	mov    %eax,%edx
f011b5a6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b5ac:	29 c2                	sub    %eax,%edx
f011b5ae:	89 d0                	mov    %edx,%eax
f011b5b0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b5b5:	74 17                	je     f011b5ce <test_kfree_bestfit+0xbf9>
f011b5b7:	83 ec 04             	sub    $0x4,%esp
f011b5ba:	68 48 07 13 f0       	push   $0xf0130748
f011b5bf:	68 a0 06 00 00       	push   $0x6a0
f011b5c4:	68 be ff 12 f0       	push   $0xf012ffbe
f011b5c9:	e8 d8 4b fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b5ce:	e8 dd ff fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b5d3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5d9:	e8 c6 7e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b5de:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f011b5e4:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011b5ea:	83 ec 0c             	sub    $0xc,%esp
f011b5ed:	50                   	push   %eax
f011b5ee:	e8 1b b6 fe ff       	call   f0106c0e <kfree>
f011b5f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5f6:	e8 a9 7e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b5fb:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011b601:	74 17                	je     f011b61a <test_kfree_bestfit+0xc45>
f011b603:	83 ec 04             	sub    $0x4,%esp
f011b606:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b60b:	68 a6 06 00 00       	push   $0x6a6
f011b610:	68 be ff 12 f0       	push   $0xf012ffbe
f011b615:	e8 8c 4b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011b61a:	e8 91 ff fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b61f:	89 c2                	mov    %eax,%edx
f011b621:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b627:	29 c2                	sub    %eax,%edx
f011b629:	89 d0                	mov    %edx,%eax
f011b62b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b630:	74 17                	je     f011b649 <test_kfree_bestfit+0xc74>
f011b632:	83 ec 04             	sub    $0x4,%esp
f011b635:	68 48 07 13 f0       	push   $0xf0130748
f011b63a:	68 a7 06 00 00       	push   $0x6a7
f011b63f:	68 be ff 12 f0       	push   $0xf012ffbe
f011b644:	e8 5d 4b fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011b649:	e8 62 ff fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b64e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b654:	e8 4b 7e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b659:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f011b65f:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011b665:	83 ec 0c             	sub    $0xc,%esp
f011b668:	50                   	push   %eax
f011b669:	e8 a0 b5 fe ff       	call   f0106c0e <kfree>
f011b66e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b671:	e8 2e 7e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b676:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011b67c:	74 17                	je     f011b695 <test_kfree_bestfit+0xcc0>
f011b67e:	83 ec 04             	sub    $0x4,%esp
f011b681:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b686:	68 ad 06 00 00       	push   $0x6ad
f011b68b:	68 be ff 12 f0       	push   $0xf012ffbe
f011b690:	e8 11 4b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011b695:	e8 16 ff fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b69a:	89 c2                	mov    %eax,%edx
f011b69c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b6a2:	29 c2                	sub    %eax,%edx
f011b6a4:	89 d0                	mov    %edx,%eax
f011b6a6:	3d 00 06 00 00       	cmp    $0x600,%eax
f011b6ab:	74 17                	je     f011b6c4 <test_kfree_bestfit+0xcef>
f011b6ad:	83 ec 04             	sub    $0x4,%esp
f011b6b0:	68 48 07 13 f0       	push   $0xf0130748
f011b6b5:	68 ae 06 00 00       	push   $0x6ae
f011b6ba:	68 be ff 12 f0       	push   $0xf012ffbe
f011b6bf:	e8 e2 4a fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011b6c4:	83 ec 0c             	sub    $0xc,%esp
f011b6c7:	68 80 07 13 f0       	push   $0xf0130780
f011b6cc:	e8 5c 55 fe ff       	call   f0100c2d <cprintf>
f011b6d1:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f011b6d4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011b6da:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011b6dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b6e4:	eb 1e                	jmp    f011b704 <test_kfree_bestfit+0xd2f>
		{
			sums[2] += ptr[i] ;
f011b6e6:	8b 95 38 fe ff ff    	mov    -0x1c8(%ebp),%edx
f011b6ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b6ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b6f2:	01 c8                	add    %ecx,%eax
f011b6f4:	8a 00                	mov    (%eax),%al
f011b6f6:	0f be c0             	movsbl %al,%eax
f011b6f9:	01 d0                	add    %edx,%eax
f011b6fb:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011b701:	ff 45 f4             	incl   -0xc(%ebp)
f011b704:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b70a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b70d:	7f d7                	jg     f011b6e6 <test_kfree_bestfit+0xd11>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f011b70f:	8b 95 38 fe ff ff    	mov    -0x1c8(%ebp),%edx
f011b715:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b71b:	01 c0                	add    %eax,%eax
f011b71d:	39 c2                	cmp    %eax,%edx
f011b71f:	74 17                	je     f011b738 <test_kfree_bestfit+0xd63>
f011b721:	83 ec 04             	sub    $0x4,%esp
f011b724:	68 a4 07 13 f0       	push   $0xf01307a4
f011b729:	68 bb 06 00 00       	push   $0x6bb
f011b72e:	68 be ff 12 f0       	push   $0xf012ffbe
f011b733:	e8 6e 4a fe ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f011b738:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011b73e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011b741:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b748:	eb 1e                	jmp    f011b768 <test_kfree_bestfit+0xd93>
		{
			sums[3] += ptr[i] ;
f011b74a:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f011b750:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b753:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b756:	01 c8                	add    %ecx,%eax
f011b758:	8a 00                	mov    (%eax),%al
f011b75a:	0f be c0             	movsbl %al,%eax
f011b75d:	01 d0                	add    %edx,%eax
f011b75f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011b765:	ff 45 f4             	incl   -0xc(%ebp)
f011b768:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b76e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b771:	7f d7                	jg     f011b74a <test_kfree_bestfit+0xd75>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011b773:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f011b779:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b77f:	89 c1                	mov    %eax,%ecx
f011b781:	01 c9                	add    %ecx,%ecx
f011b783:	01 c8                	add    %ecx,%eax
f011b785:	39 c2                	cmp    %eax,%edx
f011b787:	74 17                	je     f011b7a0 <test_kfree_bestfit+0xdcb>
f011b789:	83 ec 04             	sub    $0x4,%esp
f011b78c:	68 a4 07 13 f0       	push   $0xf01307a4
f011b791:	68 c3 06 00 00       	push   $0x6c3
f011b796:	68 be ff 12 f0       	push   $0xf012ffbe
f011b79b:	e8 06 4a fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011b7a0:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011b7a6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011b7a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b7b0:	eb 1e                	jmp    f011b7d0 <test_kfree_bestfit+0xdfb>
		{
			sums[4] += ptr[i] ;
f011b7b2:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f011b7b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b7bb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b7be:	01 c8                	add    %ecx,%eax
f011b7c0:	8a 00                	mov    (%eax),%al
f011b7c2:	0f be c0             	movsbl %al,%eax
f011b7c5:	01 d0                	add    %edx,%eax
f011b7c7:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011b7cd:	ff 45 f4             	incl   -0xc(%ebp)
f011b7d0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b7d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b7d9:	7f d7                	jg     f011b7b2 <test_kfree_bestfit+0xddd>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011b7db:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011b7e1:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f011b7e7:	c1 e2 02             	shl    $0x2,%edx
f011b7ea:	39 d0                	cmp    %edx,%eax
f011b7ec:	74 17                	je     f011b805 <test_kfree_bestfit+0xe30>
f011b7ee:	83 ec 04             	sub    $0x4,%esp
f011b7f1:	68 a4 07 13 f0       	push   $0xf01307a4
f011b7f6:	68 cb 06 00 00       	push   $0x6cb
f011b7fb:	68 be ff 12 f0       	push   $0xf012ffbe
f011b800:	e8 a1 49 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011b805:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011b80b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011b80e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b815:	eb 1e                	jmp    f011b835 <test_kfree_bestfit+0xe60>
		{
			sums[5] += ptr[i] ;
f011b817:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f011b81d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b820:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b823:	01 c8                	add    %ecx,%eax
f011b825:	8a 00                	mov    (%eax),%al
f011b827:	0f be c0             	movsbl %al,%eax
f011b82a:	01 d0                	add    %edx,%eax
f011b82c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011b832:	ff 45 f4             	incl   -0xc(%ebp)
f011b835:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b83b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b83e:	7f d7                	jg     f011b817 <test_kfree_bestfit+0xe42>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011b840:	8b 8d 44 fe ff ff    	mov    -0x1bc(%ebp),%ecx
f011b846:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f011b84c:	89 d0                	mov    %edx,%eax
f011b84e:	c1 e0 02             	shl    $0x2,%eax
f011b851:	01 d0                	add    %edx,%eax
f011b853:	39 c1                	cmp    %eax,%ecx
f011b855:	74 17                	je     f011b86e <test_kfree_bestfit+0xe99>
f011b857:	83 ec 04             	sub    $0x4,%esp
f011b85a:	68 a4 07 13 f0       	push   $0xf01307a4
f011b85f:	68 d3 06 00 00       	push   $0x6d3
f011b864:	68 be ff 12 f0       	push   $0xf012ffbe
f011b869:	e8 38 49 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011b86e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011b874:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011b877:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b87e:	eb 1e                	jmp    f011b89e <test_kfree_bestfit+0xec9>
		{
			sums[7] += ptr[i] ;
f011b880:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f011b886:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b889:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b88c:	01 c8                	add    %ecx,%eax
f011b88e:	8a 00                	mov    (%eax),%al
f011b890:	0f be c0             	movsbl %al,%eax
f011b893:	01 d0                	add    %edx,%eax
f011b895:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011b89b:	ff 45 f4             	incl   -0xc(%ebp)
f011b89e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011b8a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b8a7:	7f d7                	jg     f011b880 <test_kfree_bestfit+0xeab>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011b8a9:	8b 8d 4c fe ff ff    	mov    -0x1b4(%ebp),%ecx
f011b8af:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f011b8b5:	89 d0                	mov    %edx,%eax
f011b8b7:	01 c0                	add    %eax,%eax
f011b8b9:	01 d0                	add    %edx,%eax
f011b8bb:	01 c0                	add    %eax,%eax
f011b8bd:	01 d0                	add    %edx,%eax
f011b8bf:	39 c1                	cmp    %eax,%ecx
f011b8c1:	74 17                	je     f011b8da <test_kfree_bestfit+0xf05>
f011b8c3:	83 ec 04             	sub    $0x4,%esp
f011b8c6:	68 a4 07 13 f0       	push   $0xf01307a4
f011b8cb:	68 db 06 00 00       	push   $0x6db
f011b8d0:	68 be ff 12 f0       	push   $0xf012ffbe
f011b8d5:	e8 cc 48 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f011b8da:	83 ec 0c             	sub    $0xc,%esp
f011b8dd:	68 d7 07 13 f0       	push   $0xf01307d7
f011b8e2:	e8 46 53 fe ff       	call   f0100c2d <cprintf>
f011b8e7:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011b8ea:	e8 c1 fc fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011b8ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8f2:	e8 ad 7b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b8f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011b8fa:	83 ec 0c             	sub    $0xc,%esp
f011b8fd:	68 00 50 00 00       	push   $0x5000
f011b902:	e8 ed b2 fe ff       	call   f0106bf4 <kmalloc>
f011b907:	83 c4 10             	add    $0x10,%esp
f011b90a:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011b910:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011b916:	89 c1                	mov    %eax,%ecx
f011b918:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b91f:	10 00 00 
f011b922:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b927:	0f b6 d0             	movzbl %al,%edx
f011b92a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b930:	01 d0                	add    %edx,%eax
f011b932:	48                   	dec    %eax
f011b933:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b939:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b93f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b944:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b94a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b950:	29 d0                	sub    %edx,%eax
f011b952:	89 c3                	mov    %eax,%ebx
f011b954:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b95b:	10 00 00 
f011b95e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011b963:	0f b6 c0             	movzbl %al,%eax
f011b966:	c1 e0 04             	shl    $0x4,%eax
f011b969:	89 c2                	mov    %eax,%edx
f011b96b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b971:	01 d0                	add    %edx,%eax
f011b973:	48                   	dec    %eax
f011b974:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b97a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b980:	ba 00 00 00 00       	mov    $0x0,%edx
f011b985:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b98b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b991:	29 d0                	sub    %edx,%eax
f011b993:	01 c3                	add    %eax,%ebx
f011b995:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b99c:	10 00 00 
f011b99f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b9a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9aa:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b9b0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b9b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9bb:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b9c1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b9c7:	29 d0                	sub    %edx,%eax
f011b9c9:	01 d8                	add    %ebx,%eax
f011b9cb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b9d0:	39 c1                	cmp    %eax,%ecx
f011b9d2:	74 17                	je     f011b9eb <test_kfree_bestfit+0x1016>
f011b9d4:	83 ec 04             	sub    $0x4,%esp
f011b9d7:	68 a4 00 13 f0       	push   $0xf01300a4
f011b9dc:	68 e5 06 00 00       	push   $0x6e5
f011b9e1:	68 be ff 12 f0       	push   $0xf012ffbe
f011b9e6:	e8 bb 47 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9eb:	e8 b4 7a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011b9f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011b9f3:	74 17                	je     f011ba0c <test_kfree_bestfit+0x1037>
f011b9f5:	83 ec 04             	sub    $0x4,%esp
f011b9f8:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011b9fd:	68 e6 06 00 00       	push   $0x6e6
f011ba02:	68 be ff 12 f0       	push   $0xf012ffbe
f011ba07:	e8 9a 47 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ba0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ba0f:	e8 9c fb fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ba14:	29 c3                	sub    %eax,%ebx
f011ba16:	89 d8                	mov    %ebx,%eax
f011ba18:	83 f8 05             	cmp    $0x5,%eax
f011ba1b:	74 17                	je     f011ba34 <test_kfree_bestfit+0x105f>
f011ba1d:	83 ec 04             	sub    $0x4,%esp
f011ba20:	68 40 00 13 f0       	push   $0xf0130040
f011ba25:	68 e7 06 00 00       	push   $0x6e7
f011ba2a:	68 be ff 12 f0       	push   $0xf012ffbe
f011ba2f:	e8 72 47 fe ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011ba34:	c7 85 a0 fe ff ff ff 	movl   $0x4fff,-0x160(%ebp)
f011ba3b:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011ba3e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011ba44:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011ba47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ba4e:	eb 0e                	jmp    f011ba5e <test_kfree_bestfit+0x1089>
		{
			ptr[i] = 8 ;
f011ba50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ba53:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ba56:	01 d0                	add    %edx,%eax
f011ba58:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011ba5b:	ff 45 f4             	incl   -0xc(%ebp)
f011ba5e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ba64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ba67:	7f e7                	jg     f011ba50 <test_kfree_bestfit+0x107b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba69:	e8 42 fb fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ba6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ba71:	e8 2e 7a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ba76:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011ba79:	83 ec 0c             	sub    $0xc,%esp
f011ba7c:	68 00 00 10 00       	push   $0x100000
f011ba81:	e8 6e b1 fe ff       	call   f0106bf4 <kmalloc>
f011ba86:	83 c4 10             	add    $0x10,%esp
f011ba89:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ba8f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011ba95:	89 c1                	mov    %eax,%ecx
f011ba97:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ba9e:	10 00 00 
f011baa1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011baa6:	0f b6 d0             	movzbl %al,%edx
f011baa9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011baaf:	01 d0                	add    %edx,%eax
f011bab1:	48                   	dec    %eax
f011bab2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011bab8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011babe:	ba 00 00 00 00       	mov    $0x0,%edx
f011bac3:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011bac9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bacf:	29 d0                	sub    %edx,%eax
f011bad1:	89 c3                	mov    %eax,%ebx
f011bad3:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bada:	10 00 00 
f011badd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011bae2:	0f b6 c0             	movzbl %al,%eax
f011bae5:	c1 e0 04             	shl    $0x4,%eax
f011bae8:	89 c2                	mov    %eax,%edx
f011baea:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011baf0:	01 d0                	add    %edx,%eax
f011baf2:	48                   	dec    %eax
f011baf3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011baf9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011baff:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb04:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011bb0a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bb10:	29 d0                	sub    %edx,%eax
f011bb12:	01 c3                	add    %eax,%ebx
f011bb14:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011bb1b:	10 00 00 
f011bb1e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bb24:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb29:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011bb2f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bb35:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb3a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011bb40:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bb46:	29 d0                	sub    %edx,%eax
f011bb48:	01 d8                	add    %ebx,%eax
f011bb4a:	2d 00 70 ff 09       	sub    $0x9ff7000,%eax
f011bb4f:	39 c1                	cmp    %eax,%ecx
f011bb51:	74 17                	je     f011bb6a <test_kfree_bestfit+0x1195>
f011bb53:	83 ec 04             	sub    $0x4,%esp
f011bb56:	68 a4 00 13 f0       	push   $0xf01300a4
f011bb5b:	68 f3 06 00 00       	push   $0x6f3
f011bb60:	68 be ff 12 f0       	push   $0xf012ffbe
f011bb65:	e8 3c 46 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb6a:	e8 35 79 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bb6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011bb72:	74 17                	je     f011bb8b <test_kfree_bestfit+0x11b6>
f011bb74:	83 ec 04             	sub    $0x4,%esp
f011bb77:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bb7c:	68 f4 06 00 00       	push   $0x6f4
f011bb81:	68 be ff 12 f0       	push   $0xf012ffbe
f011bb86:	e8 1b 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011bb8b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011bb8e:	e8 1d fa fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bb93:	29 c3                	sub    %eax,%ebx
f011bb95:	89 d8                	mov    %ebx,%eax
f011bb97:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bb9c:	74 17                	je     f011bbb5 <test_kfree_bestfit+0x11e0>
f011bb9e:	83 ec 04             	sub    $0x4,%esp
f011bba1:	68 40 00 13 f0       	push   $0xf0130040
f011bba6:	68 f5 06 00 00       	push   $0x6f5
f011bbab:	68 be ff 12 f0       	push   $0xf012ffbe
f011bbb0:	e8 f1 45 fe ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011bbb5:	c7 85 a4 fe ff ff ff 	movl   $0xfffff,-0x15c(%ebp)
f011bbbc:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f011bbbf:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011bbc5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011bbc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011bbcf:	eb 0e                	jmp    f011bbdf <test_kfree_bestfit+0x120a>
		{
			ptr[i] = 9 ;
f011bbd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bbd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bbd7:	01 d0                	add    %edx,%eax
f011bbd9:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011bbdc:	ff 45 f4             	incl   -0xc(%ebp)
f011bbdf:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011bbe5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011bbe8:	7f e7                	jg     f011bbd1 <test_kfree_bestfit+0x11fc>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f011bbea:	83 ec 0c             	sub    $0xc,%esp
f011bbed:	68 de 07 13 f0       	push   $0xf01307de
f011bbf2:	e8 36 50 fe ff       	call   f0100c2d <cprintf>
f011bbf7:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bbfa:	e8 b1 f9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bbff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc02:	e8 9d 78 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bc07:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f011bc0a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011bc10:	83 ec 0c             	sub    $0xc,%esp
f011bc13:	50                   	push   %eax
f011bc14:	e8 f5 af fe ff       	call   f0106c0e <kfree>
f011bc19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc1c:	e8 83 78 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bc21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011bc24:	74 17                	je     f011bc3d <test_kfree_bestfit+0x1268>
f011bc26:	83 ec 04             	sub    $0x4,%esp
f011bc29:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bc2e:	68 05 07 00 00       	push   $0x705
f011bc33:	68 be ff 12 f0       	push   $0xf012ffbe
f011bc38:	e8 69 45 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f011bc3d:	e8 6e f9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bc42:	89 c2                	mov    %eax,%edx
f011bc44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bc47:	29 c2                	sub    %eax,%edx
f011bc49:	89 d0                	mov    %edx,%eax
f011bc4b:	83 f8 02             	cmp    $0x2,%eax
f011bc4e:	74 17                	je     f011bc67 <test_kfree_bestfit+0x1292>
f011bc50:	83 ec 04             	sub    $0x4,%esp
f011bc53:	68 48 07 13 f0       	push   $0xf0130748
f011bc58:	68 06 07 00 00       	push   $0x706
f011bc5d:	68 be ff 12 f0       	push   $0xf012ffbe
f011bc62:	e8 3f 45 fe ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc67:	e8 44 f9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bc6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc6f:	e8 30 78 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bc74:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f011bc77:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011bc7d:	83 ec 0c             	sub    $0xc,%esp
f011bc80:	50                   	push   %eax
f011bc81:	e8 88 af fe ff       	call   f0106c0e <kfree>
f011bc86:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc89:	e8 16 78 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bc8e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011bc91:	74 17                	je     f011bcaa <test_kfree_bestfit+0x12d5>
f011bc93:	83 ec 04             	sub    $0x4,%esp
f011bc96:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bc9b:	68 0c 07 00 00       	push   $0x70c
f011bca0:	68 be ff 12 f0       	push   $0xf012ffbe
f011bca5:	e8 fc 44 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011bcaa:	e8 01 f9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bcaf:	89 c2                	mov    %eax,%edx
f011bcb1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bcb4:	29 c2                	sub    %eax,%edx
f011bcb6:	89 d0                	mov    %edx,%eax
f011bcb8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bcbd:	74 17                	je     f011bcd6 <test_kfree_bestfit+0x1301>
f011bcbf:	83 ec 04             	sub    $0x4,%esp
f011bcc2:	68 48 07 13 f0       	push   $0xf0130748
f011bcc7:	68 0d 07 00 00       	push   $0x70d
f011bccc:	68 be ff 12 f0       	push   $0xf012ffbe
f011bcd1:	e8 d0 44 fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bcd6:	e8 d5 f8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bcdb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bcde:	e8 c1 77 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bce3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011bce6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011bcec:	83 ec 0c             	sub    $0xc,%esp
f011bcef:	50                   	push   %eax
f011bcf0:	e8 19 af fe ff       	call   f0106c0e <kfree>
f011bcf5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcf8:	e8 a7 77 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bcfd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011bd00:	74 17                	je     f011bd19 <test_kfree_bestfit+0x1344>
f011bd02:	83 ec 04             	sub    $0x4,%esp
f011bd05:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bd0a:	68 13 07 00 00       	push   $0x713
f011bd0f:	68 be ff 12 f0       	push   $0xf012ffbe
f011bd14:	e8 8d 44 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011bd19:	e8 92 f8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bd1e:	89 c2                	mov    %eax,%edx
f011bd20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bd23:	29 c2                	sub    %eax,%edx
f011bd25:	89 d0                	mov    %edx,%eax
f011bd27:	83 f8 01             	cmp    $0x1,%eax
f011bd2a:	74 17                	je     f011bd43 <test_kfree_bestfit+0x136e>
f011bd2c:	83 ec 04             	sub    $0x4,%esp
f011bd2f:	68 48 07 13 f0       	push   $0xf0130748
f011bd34:	68 14 07 00 00       	push   $0x714
f011bd39:	68 be ff 12 f0       	push   $0xf012ffbe
f011bd3e:	e8 63 44 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bd43:	e8 68 f8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bd48:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd4b:	e8 54 77 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bd50:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f011bd53:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011bd59:	83 ec 0c             	sub    $0xc,%esp
f011bd5c:	50                   	push   %eax
f011bd5d:	e8 ac ae fe ff       	call   f0106c0e <kfree>
f011bd62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd65:	e8 3a 77 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bd6a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011bd6d:	74 17                	je     f011bd86 <test_kfree_bestfit+0x13b1>
f011bd6f:	83 ec 04             	sub    $0x4,%esp
f011bd72:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bd77:	68 1a 07 00 00       	push   $0x71a
f011bd7c:	68 be ff 12 f0       	push   $0xf012ffbe
f011bd81:	e8 20 44 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011bd86:	e8 25 f8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bd8b:	89 c2                	mov    %eax,%edx
f011bd8d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bd90:	29 c2                	sub    %eax,%edx
f011bd92:	89 d0                	mov    %edx,%eax
f011bd94:	83 f8 01             	cmp    $0x1,%eax
f011bd97:	74 17                	je     f011bdb0 <test_kfree_bestfit+0x13db>
f011bd99:	83 ec 04             	sub    $0x4,%esp
f011bd9c:	68 48 07 13 f0       	push   $0xf0130748
f011bda1:	68 1b 07 00 00       	push   $0x71b
f011bda6:	68 be ff 12 f0       	push   $0xf012ffbe
f011bdab:	e8 f6 43 fe ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdb0:	e8 fb f7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bdb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bdb8:	e8 e7 76 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bdbd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f011bdc0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011bdc6:	83 ec 0c             	sub    $0xc,%esp
f011bdc9:	50                   	push   %eax
f011bdca:	e8 3f ae fe ff       	call   f0106c0e <kfree>
f011bdcf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdd2:	e8 cd 76 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bdd7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011bdda:	74 17                	je     f011bdf3 <test_kfree_bestfit+0x141e>
f011bddc:	83 ec 04             	sub    $0x4,%esp
f011bddf:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bde4:	68 21 07 00 00       	push   $0x721
f011bde9:	68 be ff 12 f0       	push   $0xf012ffbe
f011bdee:	e8 b3 43 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f011bdf3:	e8 b8 f7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bdf8:	89 c2                	mov    %eax,%edx
f011bdfa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bdfd:	29 c2                	sub    %eax,%edx
f011bdff:	89 d0                	mov    %edx,%eax
f011be01:	83 f8 04             	cmp    $0x4,%eax
f011be04:	74 17                	je     f011be1d <test_kfree_bestfit+0x1448>
f011be06:	83 ec 04             	sub    $0x4,%esp
f011be09:	68 48 07 13 f0       	push   $0xf0130748
f011be0e:	68 22 07 00 00       	push   $0x722
f011be13:	68 be ff 12 f0       	push   $0xf012ffbe
f011be18:	e8 89 43 fe ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011be1d:	e8 8e f7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011be22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be25:	e8 7a 76 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011be2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f011be2d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011be33:	83 ec 0c             	sub    $0xc,%esp
f011be36:	50                   	push   %eax
f011be37:	e8 d2 ad fe ff       	call   f0106c0e <kfree>
f011be3c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be3f:	e8 60 76 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011be44:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011be47:	74 17                	je     f011be60 <test_kfree_bestfit+0x148b>
f011be49:	83 ec 04             	sub    $0x4,%esp
f011be4c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011be51:	68 28 07 00 00       	push   $0x728
f011be56:	68 be ff 12 f0       	push   $0xf012ffbe
f011be5b:	e8 46 43 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f011be60:	e8 4b f7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011be65:	89 c2                	mov    %eax,%edx
f011be67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011be6a:	29 c2                	sub    %eax,%edx
f011be6c:	89 d0                	mov    %edx,%eax
f011be6e:	83 f8 05             	cmp    $0x5,%eax
f011be71:	74 17                	je     f011be8a <test_kfree_bestfit+0x14b5>
f011be73:	83 ec 04             	sub    $0x4,%esp
f011be76:	68 48 07 13 f0       	push   $0xf0130748
f011be7b:	68 29 07 00 00       	push   $0x729
f011be80:	68 be ff 12 f0       	push   $0xf012ffbe
f011be85:	e8 1c 43 fe ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011be8a:	e8 21 f7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011be8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be92:	e8 0d 76 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011be97:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011be9a:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011bea0:	83 ec 0c             	sub    $0xc,%esp
f011bea3:	50                   	push   %eax
f011bea4:	e8 65 ad fe ff       	call   f0106c0e <kfree>
f011bea9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011beac:	e8 f3 75 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011beb1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011beb4:	74 17                	je     f011becd <test_kfree_bestfit+0x14f8>
f011beb6:	83 ec 04             	sub    $0x4,%esp
f011beb9:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011bebe:	68 2f 07 00 00       	push   $0x72f
f011bec3:	68 be ff 12 f0       	push   $0xf012ffbe
f011bec8:	e8 d9 42 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f011becd:	e8 de f6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bed2:	89 c2                	mov    %eax,%edx
f011bed4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bed7:	29 c2                	sub    %eax,%edx
f011bed9:	89 d0                	mov    %edx,%eax
f011bedb:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bee0:	74 17                	je     f011bef9 <test_kfree_bestfit+0x1524>
f011bee2:	83 ec 04             	sub    $0x4,%esp
f011bee5:	68 48 07 13 f0       	push   $0xf0130748
f011beea:	68 30 07 00 00       	push   $0x730
f011beef:	68 be ff 12 f0       	push   $0xf012ffbe
f011bef4:	e8 ad 42 fe ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f011bef9:	e8 b2 f6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011befe:	89 c2                	mov    %eax,%edx
f011bf00:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bf03:	39 c2                	cmp    %eax,%edx
f011bf05:	74 17                	je     f011bf1e <test_kfree_bestfit+0x1549>
f011bf07:	83 ec 04             	sub    $0x4,%esp
f011bf0a:	68 e8 07 13 f0       	push   $0xf01307e8
f011bf0f:	68 32 07 00 00       	push   $0x732
f011bf14:	68 be ff 12 f0       	push   $0xf012ffbe
f011bf19:	e8 88 42 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f011bf1e:	83 ec 0c             	sub    $0xc,%esp
f011bf21:	68 1c 08 13 f0       	push   $0xf013081c
f011bf26:	e8 02 4d fe ff       	call   f0100c2d <cprintf>
f011bf2b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011bf2e:	83 ec 0c             	sub    $0xc,%esp
f011bf31:	6a 03                	push   $0x3
f011bf33:	e8 21 fb fe ff       	call   f010ba59 <sys_bypassPageFault>
f011bf38:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f011bf3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011bf42:	e9 82 00 00 00       	jmp    f011bfc9 <test_kfree_bestfit+0x15f4>
		{
			ptr = (char *) ptr_allocations[i];
f011bf47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bf4a:	8b 84 85 e0 fd ff ff 	mov    -0x220(%ebp,%eax,4),%eax
f011bf51:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f011bf54:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf57:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011bf5a:	e8 e8 fa fe ff       	call   f010ba47 <sys_rcr2>
f011bf5f:	89 c2                	mov    %eax,%edx
f011bf61:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf64:	39 c2                	cmp    %eax,%edx
f011bf66:	74 17                	je     f011bf7f <test_kfree_bestfit+0x15aa>
f011bf68:	83 ec 04             	sub    $0x4,%esp
f011bf6b:	68 24 08 13 f0       	push   $0xf0130824
f011bf70:	68 41 07 00 00       	push   $0x741
f011bf75:	68 be ff 12 f0       	push   $0xf012ffbe
f011bf7a:	e8 27 42 fe ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f011bf7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bf82:	8b 84 85 80 fe ff ff 	mov    -0x180(%ebp,%eax,4),%eax
f011bf89:	89 c2                	mov    %eax,%edx
f011bf8b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf8e:	01 d0                	add    %edx,%eax
f011bf90:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011bf93:	e8 af fa fe ff       	call   f010ba47 <sys_rcr2>
f011bf98:	89 c2                	mov    %eax,%edx
f011bf9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bf9d:	8b 84 85 80 fe ff ff 	mov    -0x180(%ebp,%eax,4),%eax
f011bfa4:	89 c1                	mov    %eax,%ecx
f011bfa6:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bfa9:	01 c8                	add    %ecx,%eax
f011bfab:	39 c2                	cmp    %eax,%edx
f011bfad:	74 17                	je     f011bfc6 <test_kfree_bestfit+0x15f1>
f011bfaf:	83 ec 04             	sub    $0x4,%esp
f011bfb2:	68 24 08 13 f0       	push   $0xf0130824
f011bfb7:	68 43 07 00 00       	push   $0x743
f011bfbc:	68 be ff 12 f0       	push   $0xf012ffbe
f011bfc1:	e8 e0 41 fe ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011bfc6:	ff 45 f4             	incl   -0xc(%ebp)
f011bfc9:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011bfcd:	0f 8e 74 ff ff ff    	jle    f011bf47 <test_kfree_bestfit+0x1572>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011bfd3:	83 ec 0c             	sub    $0xc,%esp
f011bfd6:	6a 00                	push   $0x0
f011bfd8:	e8 7c fa fe ff       	call   f010ba59 <sys_bypassPageFault>
f011bfdd:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f011bfe0:	83 ec 0c             	sub    $0xc,%esp
f011bfe3:	68 69 08 13 f0       	push   $0xf0130869
f011bfe8:	e8 40 4c fe ff       	call   f0100c2d <cprintf>
f011bfed:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bff0:	e8 bb f5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011bff5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bff8:	e8 a7 74 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011bffd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f011c000:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011c006:	83 ec 0c             	sub    $0xc,%esp
f011c009:	50                   	push   %eax
f011c00a:	e8 ff ab fe ff       	call   f0106c0e <kfree>
f011c00f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c012:	e8 8d 74 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c017:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011c01a:	74 17                	je     f011c033 <test_kfree_bestfit+0x165e>
f011c01c:	83 ec 04             	sub    $0x4,%esp
f011c01f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c024:	68 51 07 00 00       	push   $0x751
f011c029:	68 be ff 12 f0       	push   $0xf012ffbe
f011c02e:	e8 73 41 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011c033:	e8 78 f5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c038:	89 c2                	mov    %eax,%edx
f011c03a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c03d:	39 c2                	cmp    %eax,%edx
f011c03f:	74 17                	je     f011c058 <test_kfree_bestfit+0x1683>
f011c041:	83 ec 04             	sub    $0x4,%esp
f011c044:	68 70 08 13 f0       	push   $0xf0130870
f011c049:	68 52 07 00 00       	push   $0x752
f011c04e:	68 be ff 12 f0       	push   $0xf012ffbe
f011c053:	e8 4e 41 fe ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c058:	e8 53 f5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c05d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c060:	e8 3f 74 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c065:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011c068:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011c06e:	83 ec 0c             	sub    $0xc,%esp
f011c071:	50                   	push   %eax
f011c072:	e8 97 ab fe ff       	call   f0106c0e <kfree>
f011c077:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c07a:	e8 25 74 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c07f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011c082:	74 17                	je     f011c09b <test_kfree_bestfit+0x16c6>
f011c084:	83 ec 04             	sub    $0x4,%esp
f011c087:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c08c:	68 58 07 00 00       	push   $0x758
f011c091:	68 be ff 12 f0       	push   $0xf012ffbe
f011c096:	e8 0b 41 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011c09b:	e8 10 f5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c0a0:	89 c2                	mov    %eax,%edx
f011c0a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c0a5:	39 c2                	cmp    %eax,%edx
f011c0a7:	74 17                	je     f011c0c0 <test_kfree_bestfit+0x16eb>
f011c0a9:	83 ec 04             	sub    $0x4,%esp
f011c0ac:	68 70 08 13 f0       	push   $0xf0130870
f011c0b1:	68 59 07 00 00       	push   $0x759
f011c0b6:	68 be ff 12 f0       	push   $0xf012ffbe
f011c0bb:	e8 e6 40 fe ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f011c0c0:	e8 eb f4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c0c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0c8:	e8 d7 73 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c0cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f011c0d0:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f011c0d6:	83 ec 0c             	sub    $0xc,%esp
f011c0d9:	50                   	push   %eax
f011c0da:	e8 2f ab fe ff       	call   f0106c0e <kfree>
f011c0df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0e2:	e8 bd 73 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c0e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011c0ea:	74 17                	je     f011c103 <test_kfree_bestfit+0x172e>
f011c0ec:	83 ec 04             	sub    $0x4,%esp
f011c0ef:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c0f4:	68 5f 07 00 00       	push   $0x75f
f011c0f9:	68 be ff 12 f0       	push   $0xf012ffbe
f011c0fe:	e8 a3 40 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011c103:	e8 a8 f4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c108:	89 c2                	mov    %eax,%edx
f011c10a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c10d:	39 c2                	cmp    %eax,%edx
f011c10f:	74 17                	je     f011c128 <test_kfree_bestfit+0x1753>
f011c111:	83 ec 04             	sub    $0x4,%esp
f011c114:	68 70 08 13 f0       	push   $0xf0130870
f011c119:	68 60 07 00 00       	push   $0x760
f011c11e:	68 be ff 12 f0       	push   $0xf012ffbe
f011c123:	e8 7e 40 fe ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c128:	e8 83 f4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c12d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c130:	e8 6f 73 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c135:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011c138:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011c13e:	83 ec 0c             	sub    $0xc,%esp
f011c141:	50                   	push   %eax
f011c142:	e8 c7 aa fe ff       	call   f0106c0e <kfree>
f011c147:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c14a:	e8 55 73 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c14f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011c152:	74 17                	je     f011c16b <test_kfree_bestfit+0x1796>
f011c154:	83 ec 04             	sub    $0x4,%esp
f011c157:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c15c:	68 66 07 00 00       	push   $0x766
f011c161:	68 be ff 12 f0       	push   $0xf012ffbe
f011c166:	e8 3b 40 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011c16b:	e8 40 f4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c170:	89 c2                	mov    %eax,%edx
f011c172:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c175:	39 c2                	cmp    %eax,%edx
f011c177:	74 17                	je     f011c190 <test_kfree_bestfit+0x17bb>
f011c179:	83 ec 04             	sub    $0x4,%esp
f011c17c:	68 70 08 13 f0       	push   $0xf0130870
f011c181:	68 67 07 00 00       	push   $0x767
f011c186:	68 be ff 12 f0       	push   $0xf012ffbe
f011c18b:	e8 16 40 fe ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f011c190:	83 ec 0c             	sub    $0xc,%esp
f011c193:	68 b7 08 13 f0       	push   $0xf01308b7
f011c198:	e8 90 4a fe ff       	call   f0100c2d <cprintf>
f011c19d:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011c1a0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f011c1a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c1ae:	eb 48                	jmp    f011c1f8 <test_kfree_bestfit+0x1823>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011c1b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011c1b3:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f011c1b8:	83 ec 04             	sub    $0x4,%esp
f011c1bb:	8d 8d dc fd ff ff    	lea    -0x224(%ebp),%ecx
f011c1c1:	51                   	push   %ecx
f011c1c2:	52                   	push   %edx
f011c1c3:	50                   	push   %eax
f011c1c4:	e8 b8 9f fe ff       	call   f0106181 <get_page_table>
f011c1c9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011c1cc:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011c1d2:	85 c0                	test   %eax,%eax
f011c1d4:	75 17                	jne    f011c1ed <test_kfree_bestfit+0x1818>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f011c1d6:	83 ec 04             	sub    $0x4,%esp
f011c1d9:	68 c0 08 13 f0       	push   $0xf01308c0
f011c1de:	68 75 07 00 00       	push   $0x775
f011c1e3:	68 be ff 12 f0       	push   $0xf012ffbe
f011c1e8:	e8 b9 3f fe ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011c1ed:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011c1f4:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f011c1f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c1fc:	78 b2                	js     f011c1b0 <test_kfree_bestfit+0x17db>
f011c1fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c202:	7f 09                	jg     f011c20d <test_kfree_bestfit+0x1838>
f011c204:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f011c20b:	76 a3                	jbe    f011c1b0 <test_kfree_bestfit+0x17db>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f011c20d:	83 ec 0c             	sub    $0xc,%esp
f011c210:	68 a2 01 13 f0       	push   $0xf01301a2
f011c215:	e8 13 4a fe ff       	call   f0100c2d <cprintf>
f011c21a:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f011c21d:	83 ec 0c             	sub    $0xc,%esp
f011c220:	68 28 09 13 f0       	push   $0xf0130928
f011c225:	e8 03 4a fe ff       	call   f0100c2d <cprintf>
f011c22a:	83 c4 10             	add    $0x10,%esp

	return 1;
f011c22d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c232:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c235:	5b                   	pop    %ebx
f011c236:	5f                   	pop    %edi
f011c237:	5d                   	pop    %ebp
f011c238:	c3                   	ret    

f011c239 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f011c239:	55                   	push   %ebp
f011c23a:	89 e5                	mov    %esp,%ebp
f011c23c:	57                   	push   %edi
f011c23d:	56                   	push   %esi
f011c23e:	53                   	push   %ebx
f011c23f:	81 ec bc 02 00 00    	sub    $0x2bc,%esp
	cprintf("==============================================\n");
f011c245:	83 ec 0c             	sub    $0xc,%esp
f011c248:	68 00 ff 12 f0       	push   $0xf012ff00
f011c24d:	e8 db 49 fe ff       	call   f0100c2d <cprintf>
f011c252:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c255:	83 ec 0c             	sub    $0xc,%esp
f011c258:	68 30 ff 12 f0       	push   $0xf012ff30
f011c25d:	e8 cb 49 fe ff       	call   f0100c2d <cprintf>
f011c262:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c265:	83 ec 0c             	sub    $0xc,%esp
f011c268:	68 00 ff 12 f0       	push   $0xf012ff00
f011c26d:	e8 bb 49 fe ff       	call   f0100c2d <cprintf>
f011c272:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011c275:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f011c279:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011c27d:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f011c283:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f011c289:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011c290:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011c297:	e8 14 f3 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c29c:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011c29f:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f011c2a5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c2aa:	b8 00 00 00 00       	mov    $0x0,%eax
f011c2af:	89 d7                	mov    %edx,%edi
f011c2b1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011c2b3:	8d 95 94 fd ff ff    	lea    -0x26c(%ebp),%edx
f011c2b9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c2be:	b8 00 00 00 00       	mov    $0x0,%eax
f011c2c3:	89 d7                	mov    %edx,%edi
f011c2c5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011c2c7:	8d 95 44 fd ff ff    	lea    -0x2bc(%ebp),%edx
f011c2cd:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c2d2:	b8 00 00 00 00       	mov    $0x0,%eax
f011c2d7:	89 d7                	mov    %edx,%edi
f011c2d9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c2db:	e8 d0 f2 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c2e0:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c2e3:	e8 bc 71 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c2e8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011c2eb:	83 ec 0c             	sub    $0xc,%esp
f011c2ee:	68 00 fc 1f 00       	push   $0x1ffc00
f011c2f3:	e8 fc a8 fe ff       	call   f0106bf4 <kmalloc>
f011c2f8:	83 c4 10             	add    $0x10,%esp
f011c2fb:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011c301:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f011c307:	89 c1                	mov    %eax,%ecx
f011c309:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011c310:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c315:	0f b6 d0             	movzbl %al,%edx
f011c318:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c31b:	01 d0                	add    %edx,%eax
f011c31d:	48                   	dec    %eax
f011c31e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011c321:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c324:	ba 00 00 00 00       	mov    $0x0,%edx
f011c329:	f7 75 a0             	divl   -0x60(%ebp)
f011c32c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c32f:	29 d0                	sub    %edx,%eax
f011c331:	89 c3                	mov    %eax,%ebx
f011c333:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011c33a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c33f:	0f b6 c0             	movzbl %al,%eax
f011c342:	c1 e0 04             	shl    $0x4,%eax
f011c345:	89 c2                	mov    %eax,%edx
f011c347:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c34a:	01 d0                	add    %edx,%eax
f011c34c:	48                   	dec    %eax
f011c34d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011c350:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c353:	ba 00 00 00 00       	mov    $0x0,%edx
f011c358:	f7 75 98             	divl   -0x68(%ebp)
f011c35b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c35e:	29 d0                	sub    %edx,%eax
f011c360:	01 c3                	add    %eax,%ebx
f011c362:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011c369:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c36c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c371:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011c374:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c377:	ba 00 00 00 00       	mov    $0x0,%edx
f011c37c:	f7 75 90             	divl   -0x70(%ebp)
f011c37f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c382:	29 d0                	sub    %edx,%eax
f011c384:	01 d8                	add    %ebx,%eax
f011c386:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c38b:	39 c1                	cmp    %eax,%ecx
f011c38d:	74 17                	je     f011c3a6 <test_kheap_phys_addr+0x16d>
f011c38f:	83 ec 04             	sub    $0x4,%esp
f011c392:	68 a4 00 13 f0       	push   $0xf01300a4
f011c397:	68 a2 07 00 00       	push   $0x7a2
f011c39c:	68 be ff 12 f0       	push   $0xf012ffbe
f011c3a1:	e8 00 3e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3a6:	e8 f9 70 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c3ab:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c3ae:	74 17                	je     f011c3c7 <test_kheap_phys_addr+0x18e>
f011c3b0:	83 ec 04             	sub    $0x4,%esp
f011c3b3:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c3b8:	68 a3 07 00 00       	push   $0x7a3
f011c3bd:	68 be ff 12 f0       	push   $0xf012ffbe
f011c3c2:	e8 df 3d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c3c7:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c3ca:	e8 e1 f1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c3cf:	29 c3                	sub    %eax,%ebx
f011c3d1:	89 d8                	mov    %ebx,%eax
f011c3d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c3d8:	74 17                	je     f011c3f1 <test_kheap_phys_addr+0x1b8>
f011c3da:	83 ec 04             	sub    $0x4,%esp
f011c3dd:	68 40 00 13 f0       	push   $0xf0130040
f011c3e2:	68 a4 07 00 00       	push   $0x7a4
f011c3e7:	68 be ff 12 f0       	push   $0xf012ffbe
f011c3ec:	e8 b5 3d fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3f1:	e8 ba f1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c3f6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3f9:	e8 a6 70 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c3fe:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011c401:	83 ec 0c             	sub    $0xc,%esp
f011c404:	68 00 fc 1f 00       	push   $0x1ffc00
f011c409:	e8 e6 a7 fe ff       	call   f0106bf4 <kmalloc>
f011c40e:	83 c4 10             	add    $0x10,%esp
f011c411:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011c417:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011c41d:	89 c1                	mov    %eax,%ecx
f011c41f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011c426:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c42b:	0f b6 d0             	movzbl %al,%edx
f011c42e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c431:	01 d0                	add    %edx,%eax
f011c433:	48                   	dec    %eax
f011c434:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011c437:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c43a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c43f:	f7 75 88             	divl   -0x78(%ebp)
f011c442:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c445:	29 d0                	sub    %edx,%eax
f011c447:	89 c3                	mov    %eax,%ebx
f011c449:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011c450:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c455:	0f b6 c0             	movzbl %al,%eax
f011c458:	c1 e0 04             	shl    $0x4,%eax
f011c45b:	89 c2                	mov    %eax,%edx
f011c45d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c460:	01 d0                	add    %edx,%eax
f011c462:	48                   	dec    %eax
f011c463:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011c469:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c46f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c474:	f7 75 80             	divl   -0x80(%ebp)
f011c477:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c47d:	29 d0                	sub    %edx,%eax
f011c47f:	01 c3                	add    %eax,%ebx
f011c481:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011c488:	10 00 00 
f011c48b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c491:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c496:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011c49c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c4a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4a7:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011c4ad:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c4b3:	29 d0                	sub    %edx,%eax
f011c4b5:	01 d8                	add    %ebx,%eax
f011c4b7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c4bc:	39 c1                	cmp    %eax,%ecx
f011c4be:	74 17                	je     f011c4d7 <test_kheap_phys_addr+0x29e>
f011c4c0:	83 ec 04             	sub    $0x4,%esp
f011c4c3:	68 a4 00 13 f0       	push   $0xf01300a4
f011c4c8:	68 aa 07 00 00       	push   $0x7aa
f011c4cd:	68 be ff 12 f0       	push   $0xf012ffbe
f011c4d2:	e8 cf 3c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4d7:	e8 c8 6f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c4dc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c4df:	74 17                	je     f011c4f8 <test_kheap_phys_addr+0x2bf>
f011c4e1:	83 ec 04             	sub    $0x4,%esp
f011c4e4:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c4e9:	68 ab 07 00 00       	push   $0x7ab
f011c4ee:	68 be ff 12 f0       	push   $0xf012ffbe
f011c4f3:	e8 ae 3c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c4f8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c4fb:	e8 b0 f0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c500:	29 c3                	sub    %eax,%ebx
f011c502:	89 d8                	mov    %ebx,%eax
f011c504:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c509:	74 17                	je     f011c522 <test_kheap_phys_addr+0x2e9>
f011c50b:	83 ec 04             	sub    $0x4,%esp
f011c50e:	68 40 00 13 f0       	push   $0xf0130040
f011c513:	68 ac 07 00 00       	push   $0x7ac
f011c518:	68 be ff 12 f0       	push   $0xf012ffbe
f011c51d:	e8 84 3c fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c522:	e8 89 f0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c527:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c52a:	e8 75 6f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c52f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011c532:	83 ec 0c             	sub    $0xc,%esp
f011c535:	68 00 08 00 00       	push   $0x800
f011c53a:	e8 b5 a6 fe ff       	call   f0106bf4 <kmalloc>
f011c53f:	83 c4 10             	add    $0x10,%esp
f011c542:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011c548:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011c54e:	89 c1                	mov    %eax,%ecx
f011c550:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011c557:	10 00 00 
f011c55a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c55f:	0f b6 d0             	movzbl %al,%edx
f011c562:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c568:	01 d0                	add    %edx,%eax
f011c56a:	48                   	dec    %eax
f011c56b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011c571:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c577:	ba 00 00 00 00       	mov    $0x0,%edx
f011c57c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011c582:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c588:	29 d0                	sub    %edx,%eax
f011c58a:	89 c3                	mov    %eax,%ebx
f011c58c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011c593:	10 00 00 
f011c596:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c59b:	0f b6 c0             	movzbl %al,%eax
f011c59e:	c1 e0 04             	shl    $0x4,%eax
f011c5a1:	89 c2                	mov    %eax,%edx
f011c5a3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5a9:	01 d0                	add    %edx,%eax
f011c5ab:	48                   	dec    %eax
f011c5ac:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011c5b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c5b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5bd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011c5c3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c5c9:	29 d0                	sub    %edx,%eax
f011c5cb:	01 c3                	add    %eax,%ebx
f011c5cd:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011c5d4:	10 00 00 
f011c5d7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c5dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5e2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011c5e8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c5ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5f3:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011c5f9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c5ff:	29 d0                	sub    %edx,%eax
f011c601:	01 d8                	add    %ebx,%eax
f011c603:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c608:	39 c1                	cmp    %eax,%ecx
f011c60a:	74 17                	je     f011c623 <test_kheap_phys_addr+0x3ea>
f011c60c:	83 ec 04             	sub    $0x4,%esp
f011c60f:	68 a4 00 13 f0       	push   $0xf01300a4
f011c614:	68 b2 07 00 00       	push   $0x7b2
f011c619:	68 be ff 12 f0       	push   $0xf012ffbe
f011c61e:	e8 83 3b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c623:	e8 7c 6e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c628:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c62b:	74 17                	je     f011c644 <test_kheap_phys_addr+0x40b>
f011c62d:	83 ec 04             	sub    $0x4,%esp
f011c630:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c635:	68 b3 07 00 00       	push   $0x7b3
f011c63a:	68 be ff 12 f0       	push   $0xf012ffbe
f011c63f:	e8 62 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c644:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c647:	e8 64 ef fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c64c:	29 c3                	sub    %eax,%ebx
f011c64e:	89 d8                	mov    %ebx,%eax
f011c650:	83 f8 01             	cmp    $0x1,%eax
f011c653:	74 17                	je     f011c66c <test_kheap_phys_addr+0x433>
f011c655:	83 ec 04             	sub    $0x4,%esp
f011c658:	68 40 00 13 f0       	push   $0xf0130040
f011c65d:	68 b4 07 00 00       	push   $0x7b4
f011c662:	68 be ff 12 f0       	push   $0xf012ffbe
f011c667:	e8 3a 3b fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c66c:	e8 3f ef fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c671:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c674:	e8 2b 6e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c679:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011c67c:	83 ec 0c             	sub    $0xc,%esp
f011c67f:	68 00 08 00 00       	push   $0x800
f011c684:	e8 6b a5 fe ff       	call   f0106bf4 <kmalloc>
f011c689:	83 c4 10             	add    $0x10,%esp
f011c68c:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011c692:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011c698:	89 c1                	mov    %eax,%ecx
f011c69a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011c6a1:	10 00 00 
f011c6a4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c6a9:	0f b6 d0             	movzbl %al,%edx
f011c6ac:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c6b2:	01 d0                	add    %edx,%eax
f011c6b4:	48                   	dec    %eax
f011c6b5:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011c6bb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c6c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6c6:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011c6cc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c6d2:	29 d0                	sub    %edx,%eax
f011c6d4:	89 c3                	mov    %eax,%ebx
f011c6d6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011c6dd:	10 00 00 
f011c6e0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c6e5:	0f b6 c0             	movzbl %al,%eax
f011c6e8:	c1 e0 04             	shl    $0x4,%eax
f011c6eb:	89 c2                	mov    %eax,%edx
f011c6ed:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c6f3:	01 d0                	add    %edx,%eax
f011c6f5:	48                   	dec    %eax
f011c6f6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011c6fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c702:	ba 00 00 00 00       	mov    $0x0,%edx
f011c707:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011c70d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c713:	29 d0                	sub    %edx,%eax
f011c715:	01 c3                	add    %eax,%ebx
f011c717:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011c71e:	10 00 00 
f011c721:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c727:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c72c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011c732:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c738:	ba 00 00 00 00       	mov    $0x0,%edx
f011c73d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011c743:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c749:	29 d0                	sub    %edx,%eax
f011c74b:	01 d8                	add    %ebx,%eax
f011c74d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011c752:	39 c1                	cmp    %eax,%ecx
f011c754:	74 17                	je     f011c76d <test_kheap_phys_addr+0x534>
f011c756:	83 ec 04             	sub    $0x4,%esp
f011c759:	68 a4 00 13 f0       	push   $0xf01300a4
f011c75e:	68 ba 07 00 00       	push   $0x7ba
f011c763:	68 be ff 12 f0       	push   $0xf012ffbe
f011c768:	e8 39 3a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c76d:	e8 32 6d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c772:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c775:	74 17                	je     f011c78e <test_kheap_phys_addr+0x555>
f011c777:	83 ec 04             	sub    $0x4,%esp
f011c77a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c77f:	68 bb 07 00 00       	push   $0x7bb
f011c784:	68 be ff 12 f0       	push   $0xf012ffbe
f011c789:	e8 18 3a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c78e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c791:	e8 1a ee fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c796:	29 c3                	sub    %eax,%ebx
f011c798:	89 d8                	mov    %ebx,%eax
f011c79a:	83 f8 01             	cmp    $0x1,%eax
f011c79d:	74 17                	je     f011c7b6 <test_kheap_phys_addr+0x57d>
f011c79f:	83 ec 04             	sub    $0x4,%esp
f011c7a2:	68 40 00 13 f0       	push   $0xf0130040
f011c7a7:	68 bc 07 00 00       	push   $0x7bc
f011c7ac:	68 be ff 12 f0       	push   $0xf012ffbe
f011c7b1:	e8 f0 39 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c7b6:	e8 f5 ed fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c7bb:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7be:	e8 e1 6c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c7c3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c7c6:	83 ec 0c             	sub    $0xc,%esp
f011c7c9:	68 00 1c 00 00       	push   $0x1c00
f011c7ce:	e8 21 a4 fe ff       	call   f0106bf4 <kmalloc>
f011c7d3:	83 c4 10             	add    $0x10,%esp
f011c7d6:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011c7dc:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011c7e2:	89 c1                	mov    %eax,%ecx
f011c7e4:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011c7eb:	10 00 00 
f011c7ee:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c7f3:	0f b6 d0             	movzbl %al,%edx
f011c7f6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c7fc:	01 d0                	add    %edx,%eax
f011c7fe:	48                   	dec    %eax
f011c7ff:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011c805:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c80b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c810:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011c816:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c81c:	29 d0                	sub    %edx,%eax
f011c81e:	89 c3                	mov    %eax,%ebx
f011c820:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011c827:	10 00 00 
f011c82a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c82f:	0f b6 c0             	movzbl %al,%eax
f011c832:	c1 e0 04             	shl    $0x4,%eax
f011c835:	89 c2                	mov    %eax,%edx
f011c837:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c83d:	01 d0                	add    %edx,%eax
f011c83f:	48                   	dec    %eax
f011c840:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011c846:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c84c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c851:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011c857:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c85d:	29 d0                	sub    %edx,%eax
f011c85f:	01 c3                	add    %eax,%ebx
f011c861:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011c868:	10 00 00 
f011c86b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c871:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c876:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011c87c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c882:	ba 00 00 00 00       	mov    $0x0,%edx
f011c887:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011c88d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c893:	29 d0                	sub    %edx,%eax
f011c895:	01 d8                	add    %ebx,%eax
f011c897:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c89c:	39 c1                	cmp    %eax,%ecx
f011c89e:	74 17                	je     f011c8b7 <test_kheap_phys_addr+0x67e>
f011c8a0:	83 ec 04             	sub    $0x4,%esp
f011c8a3:	68 a4 00 13 f0       	push   $0xf01300a4
f011c8a8:	68 c2 07 00 00       	push   $0x7c2
f011c8ad:	68 be ff 12 f0       	push   $0xf012ffbe
f011c8b2:	e8 ef 38 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8b7:	e8 e8 6b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c8bc:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c8bf:	74 17                	je     f011c8d8 <test_kheap_phys_addr+0x69f>
f011c8c1:	83 ec 04             	sub    $0x4,%esp
f011c8c4:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011c8c9:	68 c3 07 00 00       	push   $0x7c3
f011c8ce:	68 be ff 12 f0       	push   $0xf012ffbe
f011c8d3:	e8 ce 38 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011c8d8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c8db:	e8 d0 ec fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c8e0:	29 c3                	sub    %eax,%ebx
f011c8e2:	89 d8                	mov    %ebx,%eax
f011c8e4:	83 f8 02             	cmp    $0x2,%eax
f011c8e7:	74 17                	je     f011c900 <test_kheap_phys_addr+0x6c7>
f011c8e9:	83 ec 04             	sub    $0x4,%esp
f011c8ec:	68 40 00 13 f0       	push   $0xf0130040
f011c8f1:	68 c4 07 00 00       	push   $0x7c4
f011c8f6:	68 be ff 12 f0       	push   $0xf012ffbe
f011c8fb:	e8 a6 38 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c900:	e8 ab ec fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011c905:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c908:	e8 97 6b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011c90d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c910:	83 ec 0c             	sub    $0xc,%esp
f011c913:	68 00 fc 2f 00       	push   $0x2ffc00
f011c918:	e8 d7 a2 fe ff       	call   f0106bf4 <kmalloc>
f011c91d:	83 c4 10             	add    $0x10,%esp
f011c920:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011c926:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011c92c:	89 c1                	mov    %eax,%ecx
f011c92e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011c935:	10 00 00 
f011c938:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c93d:	0f b6 d0             	movzbl %al,%edx
f011c940:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c946:	01 d0                	add    %edx,%eax
f011c948:	48                   	dec    %eax
f011c949:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011c94f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c955:	ba 00 00 00 00       	mov    $0x0,%edx
f011c95a:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011c960:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c966:	29 d0                	sub    %edx,%eax
f011c968:	89 c3                	mov    %eax,%ebx
f011c96a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011c971:	10 00 00 
f011c974:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011c979:	0f b6 c0             	movzbl %al,%eax
f011c97c:	c1 e0 04             	shl    $0x4,%eax
f011c97f:	89 c2                	mov    %eax,%edx
f011c981:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c987:	01 d0                	add    %edx,%eax
f011c989:	48                   	dec    %eax
f011c98a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011c990:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c996:	ba 00 00 00 00       	mov    $0x0,%edx
f011c99b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011c9a1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c9a7:	29 d0                	sub    %edx,%eax
f011c9a9:	01 c3                	add    %eax,%ebx
f011c9ab:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011c9b2:	10 00 00 
f011c9b5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c9bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9c0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011c9c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c9cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9d1:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011c9d7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c9dd:	29 d0                	sub    %edx,%eax
f011c9df:	01 d8                	add    %ebx,%eax
f011c9e1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c9e6:	39 c1                	cmp    %eax,%ecx
f011c9e8:	74 17                	je     f011ca01 <test_kheap_phys_addr+0x7c8>
f011c9ea:	83 ec 04             	sub    $0x4,%esp
f011c9ed:	68 a4 00 13 f0       	push   $0xf01300a4
f011c9f2:	68 ca 07 00 00       	push   $0x7ca
f011c9f7:	68 be ff 12 f0       	push   $0xf012ffbe
f011c9fc:	e8 a5 37 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca01:	e8 9e 6a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ca06:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011ca09:	74 17                	je     f011ca22 <test_kheap_phys_addr+0x7e9>
f011ca0b:	83 ec 04             	sub    $0x4,%esp
f011ca0e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ca13:	68 cb 07 00 00       	push   $0x7cb
f011ca18:	68 be ff 12 f0       	push   $0xf012ffbe
f011ca1d:	e8 84 37 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ca22:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011ca25:	e8 86 eb fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ca2a:	29 c3                	sub    %eax,%ebx
f011ca2c:	89 d8                	mov    %ebx,%eax
f011ca2e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ca33:	74 17                	je     f011ca4c <test_kheap_phys_addr+0x813>
f011ca35:	83 ec 04             	sub    $0x4,%esp
f011ca38:	68 40 00 13 f0       	push   $0xf0130040
f011ca3d:	68 cc 07 00 00       	push   $0x7cc
f011ca42:	68 be ff 12 f0       	push   $0xf012ffbe
f011ca47:	e8 5a 37 fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca4c:	e8 5f eb fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ca51:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca54:	e8 4b 6a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ca59:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011ca5c:	83 ec 0c             	sub    $0xc,%esp
f011ca5f:	68 00 fc 5f 00       	push   $0x5ffc00
f011ca64:	e8 8b a1 fe ff       	call   f0106bf4 <kmalloc>
f011ca69:	83 c4 10             	add    $0x10,%esp
f011ca6c:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ca72:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011ca78:	89 c1                	mov    %eax,%ecx
f011ca7a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ca81:	10 00 00 
f011ca84:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ca89:	0f b6 d0             	movzbl %al,%edx
f011ca8c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ca92:	01 d0                	add    %edx,%eax
f011ca94:	48                   	dec    %eax
f011ca95:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ca9b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011caa1:	ba 00 00 00 00       	mov    $0x0,%edx
f011caa6:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011caac:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011cab2:	29 d0                	sub    %edx,%eax
f011cab4:	89 c3                	mov    %eax,%ebx
f011cab6:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011cabd:	10 00 00 
f011cac0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011cac5:	0f b6 c0             	movzbl %al,%eax
f011cac8:	c1 e0 04             	shl    $0x4,%eax
f011cacb:	89 c2                	mov    %eax,%edx
f011cacd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cad3:	01 d0                	add    %edx,%eax
f011cad5:	48                   	dec    %eax
f011cad6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011cadc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cae2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cae7:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011caed:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011caf3:	29 d0                	sub    %edx,%eax
f011caf5:	01 c3                	add    %eax,%ebx
f011caf7:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011cafe:	10 00 00 
f011cb01:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cb07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb0c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011cb12:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cb18:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb1d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011cb23:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cb29:	29 d0                	sub    %edx,%eax
f011cb2b:	01 d8                	add    %ebx,%eax
f011cb2d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011cb32:	39 c1                	cmp    %eax,%ecx
f011cb34:	74 17                	je     f011cb4d <test_kheap_phys_addr+0x914>
f011cb36:	83 ec 04             	sub    $0x4,%esp
f011cb39:	68 a4 00 13 f0       	push   $0xf01300a4
f011cb3e:	68 d2 07 00 00       	push   $0x7d2
f011cb43:	68 be ff 12 f0       	push   $0xf012ffbe
f011cb48:	e8 59 36 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb4d:	e8 52 69 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011cb52:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011cb55:	74 17                	je     f011cb6e <test_kheap_phys_addr+0x935>
f011cb57:	83 ec 04             	sub    $0x4,%esp
f011cb5a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011cb5f:	68 d3 07 00 00       	push   $0x7d3
f011cb64:	68 be ff 12 f0       	push   $0xf012ffbe
f011cb69:	e8 38 36 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011cb6e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011cb71:	e8 3a ea fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011cb76:	29 c3                	sub    %eax,%ebx
f011cb78:	89 d8                	mov    %ebx,%eax
f011cb7a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011cb7f:	74 17                	je     f011cb98 <test_kheap_phys_addr+0x95f>
f011cb81:	83 ec 04             	sub    $0x4,%esp
f011cb84:	68 40 00 13 f0       	push   $0xf0130040
f011cb89:	68 d4 07 00 00       	push   $0x7d4
f011cb8e:	68 be ff 12 f0       	push   $0xf012ffbe
f011cb93:	e8 0e 36 fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011cb98:	e8 13 ea fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011cb9d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cba0:	e8 ff 68 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011cba5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011cba8:	83 ec 0c             	sub    $0xc,%esp
f011cbab:	68 00 38 00 00       	push   $0x3800
f011cbb0:	e8 3f a0 fe ff       	call   f0106bf4 <kmalloc>
f011cbb5:	83 c4 10             	add    $0x10,%esp
f011cbb8:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011cbbe:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011cbc4:	89 c1                	mov    %eax,%ecx
f011cbc6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011cbcd:	10 00 00 
f011cbd0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011cbd5:	0f b6 d0             	movzbl %al,%edx
f011cbd8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cbde:	01 d0                	add    %edx,%eax
f011cbe0:	48                   	dec    %eax
f011cbe1:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011cbe7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cbed:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbf2:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011cbf8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cbfe:	29 d0                	sub    %edx,%eax
f011cc00:	89 c3                	mov    %eax,%ebx
f011cc02:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011cc09:	10 00 00 
f011cc0c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011cc11:	0f b6 c0             	movzbl %al,%eax
f011cc14:	c1 e0 04             	shl    $0x4,%eax
f011cc17:	89 c2                	mov    %eax,%edx
f011cc19:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cc1f:	01 d0                	add    %edx,%eax
f011cc21:	48                   	dec    %eax
f011cc22:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011cc28:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cc2e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc33:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011cc39:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cc3f:	29 d0                	sub    %edx,%eax
f011cc41:	01 c3                	add    %eax,%ebx
f011cc43:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011cc4a:	10 00 00 
f011cc4d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cc53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc58:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011cc5e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cc64:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc69:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011cc6f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cc75:	29 d0                	sub    %edx,%eax
f011cc77:	01 d8                	add    %ebx,%eax
f011cc79:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011cc7e:	39 c1                	cmp    %eax,%ecx
f011cc80:	74 17                	je     f011cc99 <test_kheap_phys_addr+0xa60>
f011cc82:	83 ec 04             	sub    $0x4,%esp
f011cc85:	68 a4 00 13 f0       	push   $0xf01300a4
f011cc8a:	68 da 07 00 00       	push   $0x7da
f011cc8f:	68 be ff 12 f0       	push   $0xf012ffbe
f011cc94:	e8 0d 35 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc99:	e8 06 68 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011cc9e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011cca1:	74 17                	je     f011ccba <test_kheap_phys_addr+0xa81>
f011cca3:	83 ec 04             	sub    $0x4,%esp
f011cca6:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ccab:	68 db 07 00 00       	push   $0x7db
f011ccb0:	68 be ff 12 f0       	push   $0xf012ffbe
f011ccb5:	e8 ec 34 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ccba:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011ccbd:	e8 ee e8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ccc2:	29 c3                	sub    %eax,%ebx
f011ccc4:	89 d8                	mov    %ebx,%eax
f011ccc6:	83 f8 04             	cmp    $0x4,%eax
f011ccc9:	74 17                	je     f011cce2 <test_kheap_phys_addr+0xaa9>
f011cccb:	83 ec 04             	sub    $0x4,%esp
f011ccce:	68 40 00 13 f0       	push   $0xf0130040
f011ccd3:	68 dc 07 00 00       	push   $0x7dc
f011ccd8:	68 be ff 12 f0       	push   $0xf012ffbe
f011ccdd:	e8 c4 34 fe ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f011cce2:	89 e0                	mov    %esp,%eax
f011cce4:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011cce6:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011cced:	10 00 00 
f011ccf0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ccf5:	0f b6 d0             	movzbl %al,%edx
f011ccf8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ccfe:	01 d0                	add    %edx,%eax
f011cd00:	48                   	dec    %eax
f011cd01:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011cd07:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cd0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd12:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011cd18:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cd1e:	29 d0                	sub    %edx,%eax
f011cd20:	89 c1                	mov    %eax,%ecx
f011cd22:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011cd29:	10 00 00 
f011cd2c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011cd31:	0f b6 c0             	movzbl %al,%eax
f011cd34:	c1 e0 04             	shl    $0x4,%eax
f011cd37:	89 c2                	mov    %eax,%edx
f011cd39:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cd3f:	01 d0                	add    %edx,%eax
f011cd41:	48                   	dec    %eax
f011cd42:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011cd48:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cd4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd53:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011cd59:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cd5f:	29 d0                	sub    %edx,%eax
f011cd61:	01 c1                	add    %eax,%ecx
f011cd63:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011cd6a:	10 00 00 
f011cd6d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cd73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd78:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011cd7e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cd84:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd89:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011cd8f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cd95:	29 d0                	sub    %edx,%eax
f011cd97:	01 c8                	add    %ecx,%eax
f011cd99:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011cd9e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f011cda4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cdab:	10 00 00 
f011cdae:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011cdb3:	0f b6 d0             	movzbl %al,%edx
f011cdb6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cdbc:	01 d0                	add    %edx,%eax
f011cdbe:	48                   	dec    %eax
f011cdbf:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011cdc5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cdcb:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdd0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011cdd6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cddc:	29 d0                	sub    %edx,%eax
f011cdde:	89 c1                	mov    %eax,%ecx
f011cde0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cde7:	10 00 00 
f011cdea:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011cdef:	0f b6 c0             	movzbl %al,%eax
f011cdf2:	c1 e0 04             	shl    $0x4,%eax
f011cdf5:	89 c2                	mov    %eax,%edx
f011cdf7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cdfd:	01 d0                	add    %edx,%eax
f011cdff:	48                   	dec    %eax
f011ce00:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011ce06:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ce0c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce11:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011ce17:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ce1d:	29 d0                	sub    %edx,%eax
f011ce1f:	01 c1                	add    %eax,%ecx
f011ce21:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011ce28:	10 00 00 
f011ce2b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ce31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce36:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011ce3c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ce42:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce47:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011ce4d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ce53:	29 d0                	sub    %edx,%eax
f011ce55:	01 c8                	add    %ecx,%eax
f011ce57:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011ce5c:	c1 e8 0c             	shr    $0xc,%eax
f011ce5f:	89 c2                	mov    %eax,%edx
f011ce61:	4a                   	dec    %edx
f011ce62:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f011ce68:	c1 e0 02             	shl    $0x2,%eax
f011ce6b:	8d 50 03             	lea    0x3(%eax),%edx
f011ce6e:	b8 10 00 00 00       	mov    $0x10,%eax
f011ce73:	48                   	dec    %eax
f011ce74:	01 d0                	add    %edx,%eax
f011ce76:	bf 10 00 00 00       	mov    $0x10,%edi
f011ce7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce80:	f7 f7                	div    %edi
f011ce82:	6b c0 10             	imul   $0x10,%eax,%eax
f011ce85:	29 c4                	sub    %eax,%esp
f011ce87:	89 e0                	mov    %esp,%eax
f011ce89:	83 c0 03             	add    $0x3,%eax
f011ce8c:	c1 e8 02             	shr    $0x2,%eax
f011ce8f:	c1 e0 02             	shl    $0x2,%eax
f011ce92:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f011ce98:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f011ce9f:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011cea6:	eb 29                	jmp    f011ced1 <test_kheap_phys_addr+0xc98>
		{
			allPAs[i++] = kheap_physical_address(va);
f011cea8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f011ceab:	8d 43 01             	lea    0x1(%ebx),%eax
f011ceae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011ceb1:	83 ec 0c             	sub    $0xc,%esp
f011ceb4:	ff 75 e0             	pushl  -0x20(%ebp)
f011ceb7:	e8 86 9d fe ff       	call   f0106c42 <kheap_physical_address>
f011cebc:	83 c4 10             	add    $0x10,%esp
f011cebf:	89 c2                	mov    %eax,%edx
f011cec1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cec7:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f011ceca:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f011ced1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ced4:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f011ceda:	72 cc                	jb     f011cea8 <test_kheap_phys_addr+0xc6f>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011cedc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011cedf:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f011cee5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011ceec:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011cef3:	e9 a4 00 00 00       	jmp    f011cf9c <test_kheap_phys_addr+0xd63>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011cef8:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f011cefd:	83 ec 04             	sub    $0x4,%esp
f011cf00:	8d 95 40 fd ff ff    	lea    -0x2c0(%ebp),%edx
f011cf06:	52                   	push   %edx
f011cf07:	ff 75 e0             	pushl  -0x20(%ebp)
f011cf0a:	50                   	push   %eax
f011cf0b:	e8 71 92 fe ff       	call   f0106181 <get_page_table>
f011cf10:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011cf13:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f011cf19:	85 c0                	test   %eax,%eax
f011cf1b:	75 17                	jne    f011cf34 <test_kheap_phys_addr+0xcfb>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011cf1d:	83 ec 04             	sub    $0x4,%esp
f011cf20:	68 60 09 13 f0       	push   $0xf0130960
f011cf25:	68 f1 07 00 00       	push   $0x7f1
f011cf2a:	68 be ff 12 f0       	push   $0xf012ffbe
f011cf2f:	e8 72 32 fe ff       	call   f01001a6 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011cf34:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011cf3b:	eb 44                	jmp    f011cf81 <test_kheap_phys_addr+0xd48>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f011cf3d:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f011cf43:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cf46:	c1 e2 02             	shl    $0x2,%edx
f011cf49:	01 d0                	add    %edx,%eax
f011cf4b:	8b 00                	mov    (%eax),%eax
f011cf4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011cf52:	89 c1                	mov    %eax,%ecx
f011cf54:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cf5a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011cf5d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011cf60:	39 c1                	cmp    %eax,%ecx
f011cf62:	74 17                	je     f011cf7b <test_kheap_phys_addr+0xd42>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f011cf64:	83 ec 04             	sub    $0x4,%esp
f011cf67:	68 b9 09 13 f0       	push   $0xf01309b9
f011cf6c:	68 f8 07 00 00       	push   $0x7f8
f011cf71:	68 be ff 12 f0       	push   $0xf012ffbe
f011cf76:	e8 2b 32 fe ff       	call   f01001a6 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011cf7b:	ff 45 dc             	incl   -0x24(%ebp)
f011cf7e:	ff 45 e4             	incl   -0x1c(%ebp)
f011cf81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011cf84:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f011cf8a:	7d 09                	jge    f011cf95 <test_kheap_phys_addr+0xd5c>
f011cf8c:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f011cf93:	7e a8                	jle    f011cf3d <test_kheap_phys_addr+0xd04>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011cf95:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011cf9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cf9f:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f011cfa5:	0f 82 4d ff ff ff    	jb     f011cef8 <test_kheap_phys_addr+0xcbf>
f011cfab:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f011cfad:	83 ec 0c             	sub    $0xc,%esp
f011cfb0:	68 d8 09 13 f0       	push   $0xf01309d8
f011cfb5:	e8 73 3c fe ff       	call   f0100c2d <cprintf>
f011cfba:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011cfbd:	e8 ee e5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011cfc2:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011cfc8:	e8 d7 64 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011cfcd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		kfree(ptr_allocations[0]);
f011cfd3:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f011cfd9:	83 ec 0c             	sub    $0xc,%esp
f011cfdc:	50                   	push   %eax
f011cfdd:	e8 2c 9c fe ff       	call   f0106c0e <kfree>
f011cfe2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfe5:	e8 ba 64 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011cfea:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f011cff0:	74 17                	je     f011d009 <test_kheap_phys_addr+0xdd0>
f011cff2:	83 ec 04             	sub    $0x4,%esp
f011cff5:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011cffa:	68 05 08 00 00       	push   $0x805
f011cfff:	68 be ff 12 f0       	push   $0xf012ffbe
f011d004:	e8 9d 31 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011d009:	e8 a2 e5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d00e:	89 c2                	mov    %eax,%edx
f011d010:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d016:	29 c2                	sub    %eax,%edx
f011d018:	89 d0                	mov    %edx,%eax
f011d01a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d01f:	74 17                	je     f011d038 <test_kheap_phys_addr+0xdff>
f011d021:	83 ec 04             	sub    $0x4,%esp
f011d024:	68 48 07 13 f0       	push   $0xf0130748
f011d029:	68 06 08 00 00       	push   $0x806
f011d02e:	68 be ff 12 f0       	push   $0xf012ffbe
f011d033:	e8 6e 31 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d038:	e8 73 e5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d03d:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d043:	e8 5c 64 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d048:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		kfree(ptr_allocations[1]);
f011d04e:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011d054:	83 ec 0c             	sub    $0xc,%esp
f011d057:	50                   	push   %eax
f011d058:	e8 b1 9b fe ff       	call   f0106c0e <kfree>
f011d05d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d060:	e8 3f 64 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d065:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f011d06b:	74 17                	je     f011d084 <test_kheap_phys_addr+0xe4b>
f011d06d:	83 ec 04             	sub    $0x4,%esp
f011d070:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011d075:	68 0c 08 00 00       	push   $0x80c
f011d07a:	68 be ff 12 f0       	push   $0xf012ffbe
f011d07f:	e8 22 31 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011d084:	e8 27 e5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d089:	89 c2                	mov    %eax,%edx
f011d08b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d091:	29 c2                	sub    %eax,%edx
f011d093:	89 d0                	mov    %edx,%eax
f011d095:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d09a:	74 17                	je     f011d0b3 <test_kheap_phys_addr+0xe7a>
f011d09c:	83 ec 04             	sub    $0x4,%esp
f011d09f:	68 48 07 13 f0       	push   $0xf0130748
f011d0a4:	68 0d 08 00 00       	push   $0x80d
f011d0a9:	68 be ff 12 f0       	push   $0xf012ffbe
f011d0ae:	e8 f3 30 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011d0b3:	e8 f8 e4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d0b8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0be:	e8 e1 63 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d0c3:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		kfree(ptr_allocations[6]);
f011d0c9:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011d0cf:	83 ec 0c             	sub    $0xc,%esp
f011d0d2:	50                   	push   %eax
f011d0d3:	e8 36 9b fe ff       	call   f0106c0e <kfree>
f011d0d8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0db:	e8 c4 63 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d0e0:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f011d0e6:	74 17                	je     f011d0ff <test_kheap_phys_addr+0xec6>
f011d0e8:	83 ec 04             	sub    $0x4,%esp
f011d0eb:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011d0f0:	68 13 08 00 00       	push   $0x813
f011d0f5:	68 be ff 12 f0       	push   $0xf012ffbe
f011d0fa:	e8 a7 30 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011d0ff:	e8 ac e4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d104:	89 c2                	mov    %eax,%edx
f011d106:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d10c:	29 c2                	sub    %eax,%edx
f011d10e:	89 d0                	mov    %edx,%eax
f011d110:	3d 00 06 00 00       	cmp    $0x600,%eax
f011d115:	74 17                	je     f011d12e <test_kheap_phys_addr+0xef5>
f011d117:	83 ec 04             	sub    $0x4,%esp
f011d11a:	68 48 07 13 f0       	push   $0xf0130748
f011d11f:	68 14 08 00 00       	push   $0x814
f011d124:	68 be ff 12 f0       	push   $0xf012ffbe
f011d129:	e8 78 30 fe ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f011d12e:	89 e0                	mov    %esp,%eax
f011d130:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011d132:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011d139:	10 00 00 
f011d13c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d141:	0f b6 d0             	movzbl %al,%edx
f011d144:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d14a:	01 d0                	add    %edx,%eax
f011d14c:	48                   	dec    %eax
f011d14d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011d153:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011d159:	ba 00 00 00 00       	mov    $0x0,%edx
f011d15e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011d164:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011d16a:	29 d0                	sub    %edx,%eax
f011d16c:	89 c1                	mov    %eax,%ecx
f011d16e:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011d175:	10 00 00 
f011d178:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d17d:	0f b6 c0             	movzbl %al,%eax
f011d180:	c1 e0 04             	shl    $0x4,%eax
f011d183:	89 c2                	mov    %eax,%edx
f011d185:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011d18b:	01 d0                	add    %edx,%eax
f011d18d:	48                   	dec    %eax
f011d18e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011d194:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011d19a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d19f:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011d1a5:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011d1ab:	29 d0                	sub    %edx,%eax
f011d1ad:	01 c1                	add    %eax,%ecx
f011d1af:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011d1b6:	10 00 00 
f011d1b9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011d1bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1c4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011d1ca:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d1d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1d5:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011d1db:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d1e1:	29 d0                	sub    %edx,%eax
f011d1e3:	01 c8                	add    %ecx,%eax
f011d1e5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011d1ea:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f011d1f0:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011d1f7:	10 00 00 
f011d1fa:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d1ff:	0f b6 d0             	movzbl %al,%edx
f011d202:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d208:	01 d0                	add    %edx,%eax
f011d20a:	48                   	dec    %eax
f011d20b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011d211:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d217:	ba 00 00 00 00       	mov    $0x0,%edx
f011d21c:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011d222:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d228:	29 d0                	sub    %edx,%eax
f011d22a:	89 c1                	mov    %eax,%ecx
f011d22c:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011d233:	10 00 00 
f011d236:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d23b:	0f b6 c0             	movzbl %al,%eax
f011d23e:	c1 e0 04             	shl    $0x4,%eax
f011d241:	89 c2                	mov    %eax,%edx
f011d243:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d249:	01 d0                	add    %edx,%eax
f011d24b:	48                   	dec    %eax
f011d24c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011d252:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d258:	ba 00 00 00 00       	mov    $0x0,%edx
f011d25d:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011d263:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d269:	29 d0                	sub    %edx,%eax
f011d26b:	01 c1                	add    %eax,%ecx
f011d26d:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011d274:	10 00 00 
f011d277:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d27d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d282:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011d288:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d28e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d293:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011d299:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d29f:	29 d0                	sub    %edx,%eax
f011d2a1:	01 c8                	add    %ecx,%eax
f011d2a3:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011d2a8:	c1 e8 0c             	shr    $0xc,%eax
f011d2ab:	89 c2                	mov    %eax,%edx
f011d2ad:	4a                   	dec    %edx
f011d2ae:	89 95 64 fe ff ff    	mov    %edx,-0x19c(%ebp)
f011d2b4:	c1 e0 02             	shl    $0x2,%eax
f011d2b7:	8d 50 03             	lea    0x3(%eax),%edx
f011d2ba:	b8 10 00 00 00       	mov    $0x10,%eax
f011d2bf:	48                   	dec    %eax
f011d2c0:	01 d0                	add    %edx,%eax
f011d2c2:	bf 10 00 00 00       	mov    $0x10,%edi
f011d2c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2cc:	f7 f7                	div    %edi
f011d2ce:	6b c0 10             	imul   $0x10,%eax,%eax
f011d2d1:	29 c4                	sub    %eax,%esp
f011d2d3:	89 e0                	mov    %esp,%eax
f011d2d5:	83 c0 03             	add    $0x3,%eax
f011d2d8:	c1 e8 02             	shr    $0x2,%eax
f011d2db:	c1 e0 02             	shl    $0x2,%eax
f011d2de:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		i = 0;
f011d2e4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f011d2eb:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f011d2f2:	eb 29                	jmp    f011d31d <test_kheap_phys_addr+0x10e4>
		{
			allPAs[i++] = kheap_physical_address(va);
f011d2f4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f011d2f7:	8d 43 01             	lea    0x1(%ebx),%eax
f011d2fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011d2fd:	83 ec 0c             	sub    $0xc,%esp
f011d300:	ff 75 d8             	pushl  -0x28(%ebp)
f011d303:	e8 3a 99 fe ff       	call   f0106c42 <kheap_physical_address>
f011d308:	83 c4 10             	add    $0x10,%esp
f011d30b:	89 c2                	mov    %eax,%edx
f011d30d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d313:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f011d316:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f011d31d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d320:	3b 85 80 fe ff ff    	cmp    -0x180(%ebp),%eax
f011d326:	72 cc                	jb     f011d2f4 <test_kheap_phys_addr+0x10bb>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011d328:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d32b:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		i = 0;
f011d331:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011d338:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f011d33f:	e9 a4 00 00 00       	jmp    f011d3e8 <test_kheap_phys_addr+0x11af>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011d344:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f011d349:	83 ec 04             	sub    $0x4,%esp
f011d34c:	8d 95 3c fd ff ff    	lea    -0x2c4(%ebp),%edx
f011d352:	52                   	push   %edx
f011d353:	ff 75 d8             	pushl  -0x28(%ebp)
f011d356:	50                   	push   %eax
f011d357:	e8 25 8e fe ff       	call   f0106181 <get_page_table>
f011d35c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011d35f:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f011d365:	85 c0                	test   %eax,%eax
f011d367:	75 17                	jne    f011d380 <test_kheap_phys_addr+0x1147>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011d369:	83 ec 04             	sub    $0x4,%esp
f011d36c:	68 60 09 13 f0       	push   $0xf0130960
f011d371:	68 2a 08 00 00       	push   $0x82a
f011d376:	68 be ff 12 f0       	push   $0xf012ffbe
f011d37b:	e8 26 2e fe ff       	call   f01001a6 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011d380:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011d387:	eb 44                	jmp    f011d3cd <test_kheap_phys_addr+0x1194>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f011d389:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f011d38f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011d392:	c1 e2 02             	shl    $0x2,%edx
f011d395:	01 d0                	add    %edx,%eax
f011d397:	8b 00                	mov    (%eax),%eax
f011d399:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011d39e:	89 c1                	mov    %eax,%ecx
f011d3a0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d3a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d3a9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d3ac:	39 c1                	cmp    %eax,%ecx
f011d3ae:	74 17                	je     f011d3c7 <test_kheap_phys_addr+0x118e>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f011d3b0:	83 ec 04             	sub    $0x4,%esp
f011d3b3:	68 b9 09 13 f0       	push   $0xf01309b9
f011d3b8:	68 31 08 00 00       	push   $0x831
f011d3bd:	68 be ff 12 f0       	push   $0xf012ffbe
f011d3c2:	e8 df 2d fe ff       	call   f01001a6 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011d3c7:	ff 45 d4             	incl   -0x2c(%ebp)
f011d3ca:	ff 45 e4             	incl   -0x1c(%ebp)
f011d3cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d3d0:	3b 85 5c fe ff ff    	cmp    -0x1a4(%ebp),%eax
f011d3d6:	7d 09                	jge    f011d3e1 <test_kheap_phys_addr+0x11a8>
f011d3d8:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f011d3df:	7e a8                	jle    f011d389 <test_kheap_phys_addr+0x1150>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011d3e1:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f011d3e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d3eb:	3b 85 80 fe ff ff    	cmp    -0x180(%ebp),%eax
f011d3f1:	0f 82 4d ff ff ff    	jb     f011d344 <test_kheap_phys_addr+0x110b>
f011d3f7:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f011d3f9:	83 ec 0c             	sub    $0xc,%esp
f011d3fc:	68 49 01 13 f0       	push   $0xf0130149
f011d401:	e8 27 38 fe ff       	call   f0100c2d <cprintf>
f011d406:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f011d409:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011d410:	10 00 00 
f011d413:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d418:	0f b6 d0             	movzbl %al,%edx
f011d41b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d421:	01 d0                	add    %edx,%eax
f011d423:	48                   	dec    %eax
f011d424:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011d42a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d430:	ba 00 00 00 00       	mov    $0x0,%edx
f011d435:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011d43b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d441:	29 d0                	sub    %edx,%eax
f011d443:	89 c1                	mov    %eax,%ecx
f011d445:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011d44c:	10 00 00 
f011d44f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d454:	0f b6 c0             	movzbl %al,%eax
f011d457:	c1 e0 04             	shl    $0x4,%eax
f011d45a:	89 c2                	mov    %eax,%edx
f011d45c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011d462:	01 d0                	add    %edx,%eax
f011d464:	48                   	dec    %eax
f011d465:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011d46b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011d471:	ba 00 00 00 00       	mov    $0x0,%edx
f011d476:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011d47c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011d482:	29 d0                	sub    %edx,%eax
f011d484:	01 c1                	add    %eax,%ecx
f011d486:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011d48d:	10 00 00 
f011d490:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011d496:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d49b:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011d4a1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011d4a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4ac:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011d4b2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011d4b8:	29 d0                	sub    %edx,%eax
f011d4ba:	01 c8                	add    %ecx,%eax
f011d4bc:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f011d4c1:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		i = 0;
f011d4c7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011d4ce:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011d4d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d4d7:	eb 0a                	jmp    f011d4e3 <test_kheap_phys_addr+0x12aa>
		{
			i++;
f011d4d9:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011d4dc:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011d4e3:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f011d4ea:	76 ed                	jbe    f011d4d9 <test_kheap_phys_addr+0x12a0>
		{
			i++;
		}
		int ii = i ;
f011d4ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d4ef:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		i = 0;
f011d4f5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011d4fc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011d502:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d505:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011d50c:	e9 cc 00 00 00       	jmp    f011d5dd <test_kheap_phys_addr+0x13a4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f011d511:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011d514:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f011d519:	83 ec 04             	sub    $0x4,%esp
f011d51c:	8d 8d 38 fd ff ff    	lea    -0x2c8(%ebp),%ecx
f011d522:	51                   	push   %ecx
f011d523:	52                   	push   %edx
f011d524:	50                   	push   %eax
f011d525:	e8 57 8c fe ff       	call   f0106181 <get_page_table>
f011d52a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011d52d:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f011d533:	85 c0                	test   %eax,%eax
f011d535:	75 17                	jne    f011d54e <test_kheap_phys_addr+0x1315>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011d537:	83 ec 04             	sub    $0x4,%esp
f011d53a:	68 60 09 13 f0       	push   $0xf0130960
f011d53f:	68 4c 08 00 00       	push   $0x84c
f011d544:	68 be ff 12 f0       	push   $0xf012ffbe
f011d549:	e8 58 2c fe ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011d54e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011d555:	eb 67                	jmp    f011d5be <test_kheap_phys_addr+0x1385>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f011d557:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d55a:	c1 e0 0c             	shl    $0xc,%eax
f011d55d:	89 c2                	mov    %eax,%edx
f011d55f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011d565:	01 d0                	add    %edx,%eax
f011d567:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f011d56d:	83 ec 0c             	sub    $0xc,%esp
f011d570:	ff b5 38 fe ff ff    	pushl  -0x1c8(%ebp)
f011d576:	e8 c7 96 fe ff       	call   f0106c42 <kheap_physical_address>
f011d57b:	83 c4 10             	add    $0x10,%esp
f011d57e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f011d584:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f011d58a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011d58d:	c1 e2 02             	shl    $0x2,%edx
f011d590:	01 d0                	add    %edx,%eax
f011d592:	8b 00                	mov    (%eax),%eax
f011d594:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011d599:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f011d59f:	74 17                	je     f011d5b8 <test_kheap_phys_addr+0x137f>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f011d5a1:	83 ec 04             	sub    $0x4,%esp
f011d5a4:	68 b9 09 13 f0       	push   $0xf01309b9
f011d5a9:	68 56 08 00 00       	push   $0x856
f011d5ae:	68 be ff 12 f0       	push   $0xf012ffbe
f011d5b3:	e8 ee 2b fe ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011d5b8:	ff 45 cc             	incl   -0x34(%ebp)
f011d5bb:	ff 45 e4             	incl   -0x1c(%ebp)
f011d5be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d5c1:	3b 85 3c fe ff ff    	cmp    -0x1c4(%ebp),%eax
f011d5c7:	7d 09                	jge    f011d5d2 <test_kheap_phys_addr+0x1399>
f011d5c9:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011d5d0:	7e 85                	jle    f011d557 <test_kheap_phys_addr+0x131e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011d5d2:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f011d5d9:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011d5dd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011d5e1:	0f 88 2a ff ff ff    	js     f011d511 <test_kheap_phys_addr+0x12d8>
f011d5e7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011d5eb:	7f 0d                	jg     f011d5fa <test_kheap_phys_addr+0x13c1>
f011d5ed:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f011d5f4:	0f 86 17 ff ff ff    	jbe    f011d511 <test_kheap_phys_addr+0x12d8>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f011d5fa:	83 ec 0c             	sub    $0xc,%esp
f011d5fd:	68 a2 01 13 f0       	push   $0xf01301a2
f011d602:	e8 26 36 fe ff       	call   f0100c2d <cprintf>
f011d607:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f011d60a:	83 ec 0c             	sub    $0xc,%esp
f011d60d:	68 0c 0a 13 f0       	push   $0xf0130a0c
f011d612:	e8 16 36 fe ff       	call   f0100c2d <cprintf>
f011d617:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d61a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011d61f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011d622:	5b                   	pop    %ebx
f011d623:	5e                   	pop    %esi
f011d624:	5f                   	pop    %edi
f011d625:	5d                   	pop    %ebp
f011d626:	c3                   	ret    

f011d627 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f011d627:	55                   	push   %ebp
f011d628:	89 e5                	mov    %esp,%ebp
f011d62a:	57                   	push   %edi
f011d62b:	56                   	push   %esi
f011d62c:	53                   	push   %ebx
f011d62d:	81 ec ac 02 00 00    	sub    $0x2ac,%esp
f011d633:	89 e0                	mov    %esp,%eax
f011d635:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f011d637:	83 ec 0c             	sub    $0xc,%esp
f011d63a:	68 00 ff 12 f0       	push   $0xf012ff00
f011d63f:	e8 e9 35 fe ff       	call   f0100c2d <cprintf>
f011d644:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d647:	83 ec 0c             	sub    $0xc,%esp
f011d64a:	68 30 ff 12 f0       	push   $0xf012ff30
f011d64f:	e8 d9 35 fe ff       	call   f0100c2d <cprintf>
f011d654:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d657:	83 ec 0c             	sub    $0xc,%esp
f011d65a:	68 00 ff 12 f0       	push   $0xf012ff00
f011d65f:	e8 c9 35 fe ff       	call   f0100c2d <cprintf>
f011d664:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011d667:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f011d66b:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f011d66f:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f011d675:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f011d67b:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f011d682:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011d689:	e8 22 df fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d68e:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011d691:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f011d697:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d69c:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6a1:	89 d7                	mov    %edx,%edi
f011d6a3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011d6a5:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f011d6ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d6b0:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6b5:	89 d7                	mov    %edx,%edi
f011d6b7:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011d6b9:	8d 95 58 fd ff ff    	lea    -0x2a8(%ebp),%edx
f011d6bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d6c4:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6c9:	89 d7                	mov    %edx,%edi
f011d6cb:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d6cd:	e8 de de fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d6d2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6d5:	e8 ca 5d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d6da:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d6dd:	83 ec 0c             	sub    $0xc,%esp
f011d6e0:	68 00 fc 1f 00       	push   $0x1ffc00
f011d6e5:	e8 0a 95 fe ff       	call   f0106bf4 <kmalloc>
f011d6ea:	83 c4 10             	add    $0x10,%esp
f011d6ed:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011d6f3:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011d6f9:	89 c1                	mov    %eax,%ecx
f011d6fb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d702:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d707:	0f b6 d0             	movzbl %al,%edx
f011d70a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d70d:	01 d0                	add    %edx,%eax
f011d70f:	48                   	dec    %eax
f011d710:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d713:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d716:	ba 00 00 00 00       	mov    $0x0,%edx
f011d71b:	f7 75 b4             	divl   -0x4c(%ebp)
f011d71e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d721:	29 d0                	sub    %edx,%eax
f011d723:	89 c3                	mov    %eax,%ebx
f011d725:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d72c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d731:	0f b6 c0             	movzbl %al,%eax
f011d734:	c1 e0 04             	shl    $0x4,%eax
f011d737:	89 c2                	mov    %eax,%edx
f011d739:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d73c:	01 d0                	add    %edx,%eax
f011d73e:	48                   	dec    %eax
f011d73f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d742:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d745:	ba 00 00 00 00       	mov    $0x0,%edx
f011d74a:	f7 75 ac             	divl   -0x54(%ebp)
f011d74d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d750:	29 d0                	sub    %edx,%eax
f011d752:	01 c3                	add    %eax,%ebx
f011d754:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d75b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d75e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d763:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d766:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d769:	ba 00 00 00 00       	mov    $0x0,%edx
f011d76e:	f7 75 a4             	divl   -0x5c(%ebp)
f011d771:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d774:	29 d0                	sub    %edx,%eax
f011d776:	01 d8                	add    %ebx,%eax
f011d778:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d77d:	39 c1                	cmp    %eax,%ecx
f011d77f:	74 17                	je     f011d798 <test_kheap_virt_addr+0x171>
f011d781:	83 ec 04             	sub    $0x4,%esp
f011d784:	68 a4 00 13 f0       	push   $0xf01300a4
f011d789:	68 83 08 00 00       	push   $0x883
f011d78e:	68 be ff 12 f0       	push   $0xf012ffbe
f011d793:	e8 0e 2a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d798:	e8 07 5d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d79d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011d7a0:	74 17                	je     f011d7b9 <test_kheap_virt_addr+0x192>
f011d7a2:	83 ec 04             	sub    $0x4,%esp
f011d7a5:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011d7aa:	68 84 08 00 00       	push   $0x884
f011d7af:	68 be ff 12 f0       	push   $0xf012ffbe
f011d7b4:	e8 ed 29 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011d7b9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011d7bc:	e8 ef dd fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d7c1:	29 c3                	sub    %eax,%ebx
f011d7c3:	89 d8                	mov    %ebx,%eax
f011d7c5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7ca:	74 17                	je     f011d7e3 <test_kheap_virt_addr+0x1bc>
f011d7cc:	83 ec 04             	sub    $0x4,%esp
f011d7cf:	68 40 00 13 f0       	push   $0xf0130040
f011d7d4:	68 85 08 00 00       	push   $0x885
f011d7d9:	68 be ff 12 f0       	push   $0xf012ffbe
f011d7de:	e8 c3 29 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d7e3:	e8 c8 dd fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d7e8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7eb:	e8 b4 5c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d7f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d7f3:	83 ec 0c             	sub    $0xc,%esp
f011d7f6:	68 00 fc 1f 00       	push   $0x1ffc00
f011d7fb:	e8 f4 93 fe ff       	call   f0106bf4 <kmalloc>
f011d800:	83 c4 10             	add    $0x10,%esp
f011d803:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011d809:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011d80f:	89 c1                	mov    %eax,%ecx
f011d811:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d818:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d81d:	0f b6 d0             	movzbl %al,%edx
f011d820:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d823:	01 d0                	add    %edx,%eax
f011d825:	48                   	dec    %eax
f011d826:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d829:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d82c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d831:	f7 75 9c             	divl   -0x64(%ebp)
f011d834:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d837:	29 d0                	sub    %edx,%eax
f011d839:	89 c3                	mov    %eax,%ebx
f011d83b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d842:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d847:	0f b6 c0             	movzbl %al,%eax
f011d84a:	c1 e0 04             	shl    $0x4,%eax
f011d84d:	89 c2                	mov    %eax,%edx
f011d84f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d852:	01 d0                	add    %edx,%eax
f011d854:	48                   	dec    %eax
f011d855:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d858:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d85b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d860:	f7 75 94             	divl   -0x6c(%ebp)
f011d863:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d866:	29 d0                	sub    %edx,%eax
f011d868:	01 c3                	add    %eax,%ebx
f011d86a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d871:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d874:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d879:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d87c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d87f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d884:	f7 75 8c             	divl   -0x74(%ebp)
f011d887:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d88a:	29 d0                	sub    %edx,%eax
f011d88c:	01 d8                	add    %ebx,%eax
f011d88e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d893:	39 c1                	cmp    %eax,%ecx
f011d895:	74 17                	je     f011d8ae <test_kheap_virt_addr+0x287>
f011d897:	83 ec 04             	sub    $0x4,%esp
f011d89a:	68 a4 00 13 f0       	push   $0xf01300a4
f011d89f:	68 8b 08 00 00       	push   $0x88b
f011d8a4:	68 be ff 12 f0       	push   $0xf012ffbe
f011d8a9:	e8 f8 28 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8ae:	e8 f1 5b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d8b3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011d8b6:	74 17                	je     f011d8cf <test_kheap_virt_addr+0x2a8>
f011d8b8:	83 ec 04             	sub    $0x4,%esp
f011d8bb:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011d8c0:	68 8c 08 00 00       	push   $0x88c
f011d8c5:	68 be ff 12 f0       	push   $0xf012ffbe
f011d8ca:	e8 d7 28 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011d8cf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011d8d2:	e8 d9 dc fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d8d7:	29 c3                	sub    %eax,%ebx
f011d8d9:	89 d8                	mov    %ebx,%eax
f011d8db:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d8e0:	74 17                	je     f011d8f9 <test_kheap_virt_addr+0x2d2>
f011d8e2:	83 ec 04             	sub    $0x4,%esp
f011d8e5:	68 40 00 13 f0       	push   $0xf0130040
f011d8ea:	68 8d 08 00 00       	push   $0x88d
f011d8ef:	68 be ff 12 f0       	push   $0xf012ffbe
f011d8f4:	e8 ad 28 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d8f9:	e8 b2 dc fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011d8fe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d901:	e8 9e 5b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d906:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d909:	83 ec 0c             	sub    $0xc,%esp
f011d90c:	68 00 08 00 00       	push   $0x800
f011d911:	e8 de 92 fe ff       	call   f0106bf4 <kmalloc>
f011d916:	83 c4 10             	add    $0x10,%esp
f011d919:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011d91f:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011d925:	89 c1                	mov    %eax,%ecx
f011d927:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d92e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d933:	0f b6 d0             	movzbl %al,%edx
f011d936:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d939:	01 d0                	add    %edx,%eax
f011d93b:	48                   	dec    %eax
f011d93c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d93f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d942:	ba 00 00 00 00       	mov    $0x0,%edx
f011d947:	f7 75 84             	divl   -0x7c(%ebp)
f011d94a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d94d:	29 d0                	sub    %edx,%eax
f011d94f:	89 c3                	mov    %eax,%ebx
f011d951:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d958:	10 00 00 
f011d95b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011d960:	0f b6 c0             	movzbl %al,%eax
f011d963:	c1 e0 04             	shl    $0x4,%eax
f011d966:	89 c2                	mov    %eax,%edx
f011d968:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d96e:	01 d0                	add    %edx,%eax
f011d970:	48                   	dec    %eax
f011d971:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d977:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d97d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d982:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d988:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d98e:	29 d0                	sub    %edx,%eax
f011d990:	01 c3                	add    %eax,%ebx
f011d992:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d999:	10 00 00 
f011d99c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d9a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9a7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d9ad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d9b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9b8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d9be:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d9c4:	29 d0                	sub    %edx,%eax
f011d9c6:	01 d8                	add    %ebx,%eax
f011d9c8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d9cd:	39 c1                	cmp    %eax,%ecx
f011d9cf:	74 17                	je     f011d9e8 <test_kheap_virt_addr+0x3c1>
f011d9d1:	83 ec 04             	sub    $0x4,%esp
f011d9d4:	68 a4 00 13 f0       	push   $0xf01300a4
f011d9d9:	68 93 08 00 00       	push   $0x893
f011d9de:	68 be ff 12 f0       	push   $0xf012ffbe
f011d9e3:	e8 be 27 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9e8:	e8 b7 5a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011d9ed:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011d9f0:	74 17                	je     f011da09 <test_kheap_virt_addr+0x3e2>
f011d9f2:	83 ec 04             	sub    $0x4,%esp
f011d9f5:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011d9fa:	68 94 08 00 00       	push   $0x894
f011d9ff:	68 be ff 12 f0       	push   $0xf012ffbe
f011da04:	e8 9d 27 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011da09:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011da0c:	e8 9f db fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011da11:	29 c3                	sub    %eax,%ebx
f011da13:	89 d8                	mov    %ebx,%eax
f011da15:	83 f8 01             	cmp    $0x1,%eax
f011da18:	74 17                	je     f011da31 <test_kheap_virt_addr+0x40a>
f011da1a:	83 ec 04             	sub    $0x4,%esp
f011da1d:	68 40 00 13 f0       	push   $0xf0130040
f011da22:	68 95 08 00 00       	push   $0x895
f011da27:	68 be ff 12 f0       	push   $0xf012ffbe
f011da2c:	e8 75 27 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011da31:	e8 7a db fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011da36:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da39:	e8 66 5a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011da3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011da41:	83 ec 0c             	sub    $0xc,%esp
f011da44:	68 00 08 00 00       	push   $0x800
f011da49:	e8 a6 91 fe ff       	call   f0106bf4 <kmalloc>
f011da4e:	83 c4 10             	add    $0x10,%esp
f011da51:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011da57:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011da5d:	89 c1                	mov    %eax,%ecx
f011da5f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011da66:	10 00 00 
f011da69:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011da6e:	0f b6 d0             	movzbl %al,%edx
f011da71:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011da77:	01 d0                	add    %edx,%eax
f011da79:	48                   	dec    %eax
f011da7a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011da80:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011da86:	ba 00 00 00 00       	mov    $0x0,%edx
f011da8b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011da91:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011da97:	29 d0                	sub    %edx,%eax
f011da99:	89 c3                	mov    %eax,%ebx
f011da9b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011daa2:	10 00 00 
f011daa5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011daaa:	0f b6 c0             	movzbl %al,%eax
f011daad:	c1 e0 04             	shl    $0x4,%eax
f011dab0:	89 c2                	mov    %eax,%edx
f011dab2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dab8:	01 d0                	add    %edx,%eax
f011daba:	48                   	dec    %eax
f011dabb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dac1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dac7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dacc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dad2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dad8:	29 d0                	sub    %edx,%eax
f011dada:	01 c3                	add    %eax,%ebx
f011dadc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dae3:	10 00 00 
f011dae6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011daec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011daf1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011daf7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dafd:	ba 00 00 00 00       	mov    $0x0,%edx
f011db02:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011db08:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011db0e:	29 d0                	sub    %edx,%eax
f011db10:	01 d8                	add    %ebx,%eax
f011db12:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011db17:	39 c1                	cmp    %eax,%ecx
f011db19:	74 17                	je     f011db32 <test_kheap_virt_addr+0x50b>
f011db1b:	83 ec 04             	sub    $0x4,%esp
f011db1e:	68 a4 00 13 f0       	push   $0xf01300a4
f011db23:	68 9b 08 00 00       	push   $0x89b
f011db28:	68 be ff 12 f0       	push   $0xf012ffbe
f011db2d:	e8 74 26 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db32:	e8 6d 59 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011db37:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011db3a:	74 17                	je     f011db53 <test_kheap_virt_addr+0x52c>
f011db3c:	83 ec 04             	sub    $0x4,%esp
f011db3f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011db44:	68 9c 08 00 00       	push   $0x89c
f011db49:	68 be ff 12 f0       	push   $0xf012ffbe
f011db4e:	e8 53 26 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011db53:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011db56:	e8 55 da fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011db5b:	29 c3                	sub    %eax,%ebx
f011db5d:	89 d8                	mov    %ebx,%eax
f011db5f:	83 f8 01             	cmp    $0x1,%eax
f011db62:	74 17                	je     f011db7b <test_kheap_virt_addr+0x554>
f011db64:	83 ec 04             	sub    $0x4,%esp
f011db67:	68 40 00 13 f0       	push   $0xf0130040
f011db6c:	68 9d 08 00 00       	push   $0x89d
f011db71:	68 be ff 12 f0       	push   $0xf012ffbe
f011db76:	e8 2b 26 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011db7b:	e8 30 da fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011db80:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db83:	e8 1c 59 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011db88:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011db8b:	83 ec 0c             	sub    $0xc,%esp
f011db8e:	68 00 1c 00 00       	push   $0x1c00
f011db93:	e8 5c 90 fe ff       	call   f0106bf4 <kmalloc>
f011db98:	83 c4 10             	add    $0x10,%esp
f011db9b:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011dba1:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011dba7:	89 c1                	mov    %eax,%ecx
f011dba9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011dbb0:	10 00 00 
f011dbb3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011dbb8:	0f b6 d0             	movzbl %al,%edx
f011dbbb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011dbc1:	01 d0                	add    %edx,%eax
f011dbc3:	48                   	dec    %eax
f011dbc4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011dbca:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dbd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbd5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011dbdb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dbe1:	29 d0                	sub    %edx,%eax
f011dbe3:	89 c3                	mov    %eax,%ebx
f011dbe5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011dbec:	10 00 00 
f011dbef:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011dbf4:	0f b6 c0             	movzbl %al,%eax
f011dbf7:	c1 e0 04             	shl    $0x4,%eax
f011dbfa:	89 c2                	mov    %eax,%edx
f011dbfc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dc02:	01 d0                	add    %edx,%eax
f011dc04:	48                   	dec    %eax
f011dc05:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011dc0b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dc11:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc16:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011dc1c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dc22:	29 d0                	sub    %edx,%eax
f011dc24:	01 c3                	add    %eax,%ebx
f011dc26:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dc2d:	10 00 00 
f011dc30:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dc36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc3b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011dc41:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dc47:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc4c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011dc52:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dc58:	29 d0                	sub    %edx,%eax
f011dc5a:	01 d8                	add    %ebx,%eax
f011dc5c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dc61:	39 c1                	cmp    %eax,%ecx
f011dc63:	74 17                	je     f011dc7c <test_kheap_virt_addr+0x655>
f011dc65:	83 ec 04             	sub    $0x4,%esp
f011dc68:	68 a4 00 13 f0       	push   $0xf01300a4
f011dc6d:	68 a3 08 00 00       	push   $0x8a3
f011dc72:	68 be ff 12 f0       	push   $0xf012ffbe
f011dc77:	e8 2a 25 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc7c:	e8 23 58 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011dc81:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011dc84:	74 17                	je     f011dc9d <test_kheap_virt_addr+0x676>
f011dc86:	83 ec 04             	sub    $0x4,%esp
f011dc89:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011dc8e:	68 a4 08 00 00       	push   $0x8a4
f011dc93:	68 be ff 12 f0       	push   $0xf012ffbe
f011dc98:	e8 09 25 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011dc9d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011dca0:	e8 0b d9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011dca5:	29 c3                	sub    %eax,%ebx
f011dca7:	89 d8                	mov    %ebx,%eax
f011dca9:	83 f8 02             	cmp    $0x2,%eax
f011dcac:	74 17                	je     f011dcc5 <test_kheap_virt_addr+0x69e>
f011dcae:	83 ec 04             	sub    $0x4,%esp
f011dcb1:	68 40 00 13 f0       	push   $0xf0130040
f011dcb6:	68 a5 08 00 00       	push   $0x8a5
f011dcbb:	68 be ff 12 f0       	push   $0xf012ffbe
f011dcc0:	e8 e1 24 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011dcc5:	e8 e6 d8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011dcca:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dccd:	e8 d2 57 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011dcd2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011dcd5:	83 ec 0c             	sub    $0xc,%esp
f011dcd8:	68 00 fc 2f 00       	push   $0x2ffc00
f011dcdd:	e8 12 8f fe ff       	call   f0106bf4 <kmalloc>
f011dce2:	83 c4 10             	add    $0x10,%esp
f011dce5:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011dceb:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f011dcf1:	89 c1                	mov    %eax,%ecx
f011dcf3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011dcfa:	10 00 00 
f011dcfd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011dd02:	0f b6 d0             	movzbl %al,%edx
f011dd05:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dd0b:	01 d0                	add    %edx,%eax
f011dd0d:	48                   	dec    %eax
f011dd0e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011dd14:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dd1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd1f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011dd25:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dd2b:	29 d0                	sub    %edx,%eax
f011dd2d:	89 c3                	mov    %eax,%ebx
f011dd2f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011dd36:	10 00 00 
f011dd39:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011dd3e:	0f b6 c0             	movzbl %al,%eax
f011dd41:	c1 e0 04             	shl    $0x4,%eax
f011dd44:	89 c2                	mov    %eax,%edx
f011dd46:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011dd4c:	01 d0                	add    %edx,%eax
f011dd4e:	48                   	dec    %eax
f011dd4f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011dd55:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dd5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd60:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011dd66:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dd6c:	29 d0                	sub    %edx,%eax
f011dd6e:	01 c3                	add    %eax,%ebx
f011dd70:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011dd77:	10 00 00 
f011dd7a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011dd80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd85:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011dd8b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dd91:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd96:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011dd9c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dda2:	29 d0                	sub    %edx,%eax
f011dda4:	01 d8                	add    %ebx,%eax
f011dda6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ddab:	39 c1                	cmp    %eax,%ecx
f011ddad:	74 17                	je     f011ddc6 <test_kheap_virt_addr+0x79f>
f011ddaf:	83 ec 04             	sub    $0x4,%esp
f011ddb2:	68 a4 00 13 f0       	push   $0xf01300a4
f011ddb7:	68 ab 08 00 00       	push   $0x8ab
f011ddbc:	68 be ff 12 f0       	push   $0xf012ffbe
f011ddc1:	e8 e0 23 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddc6:	e8 d9 56 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ddcb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011ddce:	74 17                	je     f011dde7 <test_kheap_virt_addr+0x7c0>
f011ddd0:	83 ec 04             	sub    $0x4,%esp
f011ddd3:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ddd8:	68 ac 08 00 00       	push   $0x8ac
f011dddd:	68 be ff 12 f0       	push   $0xf012ffbe
f011dde2:	e8 bf 23 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011dde7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011ddea:	e8 c1 d7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ddef:	29 c3                	sub    %eax,%ebx
f011ddf1:	89 d8                	mov    %ebx,%eax
f011ddf3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ddf8:	74 17                	je     f011de11 <test_kheap_virt_addr+0x7ea>
f011ddfa:	83 ec 04             	sub    $0x4,%esp
f011ddfd:	68 40 00 13 f0       	push   $0xf0130040
f011de02:	68 ad 08 00 00       	push   $0x8ad
f011de07:	68 be ff 12 f0       	push   $0xf012ffbe
f011de0c:	e8 95 23 fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011de11:	e8 9a d7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011de16:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de19:	e8 86 56 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011de1e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011de21:	83 ec 0c             	sub    $0xc,%esp
f011de24:	68 00 fc 5f 00       	push   $0x5ffc00
f011de29:	e8 c6 8d fe ff       	call   f0106bf4 <kmalloc>
f011de2e:	83 c4 10             	add    $0x10,%esp
f011de31:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011de37:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f011de3d:	89 c1                	mov    %eax,%ecx
f011de3f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011de46:	10 00 00 
f011de49:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011de4e:	0f b6 d0             	movzbl %al,%edx
f011de51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011de57:	01 d0                	add    %edx,%eax
f011de59:	48                   	dec    %eax
f011de5a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011de60:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de66:	ba 00 00 00 00       	mov    $0x0,%edx
f011de6b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011de71:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de77:	29 d0                	sub    %edx,%eax
f011de79:	89 c3                	mov    %eax,%ebx
f011de7b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011de82:	10 00 00 
f011de85:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011de8a:	0f b6 c0             	movzbl %al,%eax
f011de8d:	c1 e0 04             	shl    $0x4,%eax
f011de90:	89 c2                	mov    %eax,%edx
f011de92:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011de98:	01 d0                	add    %edx,%eax
f011de9a:	48                   	dec    %eax
f011de9b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011dea1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dea7:	ba 00 00 00 00       	mov    $0x0,%edx
f011deac:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011deb2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011deb8:	29 d0                	sub    %edx,%eax
f011deba:	01 c3                	add    %eax,%ebx
f011debc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011dec3:	10 00 00 
f011dec6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011decc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ded1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ded7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dedd:	ba 00 00 00 00       	mov    $0x0,%edx
f011dee2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011dee8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011deee:	29 d0                	sub    %edx,%eax
f011def0:	01 d8                	add    %ebx,%eax
f011def2:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011def7:	39 c1                	cmp    %eax,%ecx
f011def9:	74 17                	je     f011df12 <test_kheap_virt_addr+0x8eb>
f011defb:	83 ec 04             	sub    $0x4,%esp
f011defe:	68 a4 00 13 f0       	push   $0xf01300a4
f011df03:	68 b3 08 00 00       	push   $0x8b3
f011df08:	68 be ff 12 f0       	push   $0xf012ffbe
f011df0d:	e8 94 22 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df12:	e8 8d 55 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011df17:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011df1a:	74 17                	je     f011df33 <test_kheap_virt_addr+0x90c>
f011df1c:	83 ec 04             	sub    $0x4,%esp
f011df1f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011df24:	68 b4 08 00 00       	push   $0x8b4
f011df29:	68 be ff 12 f0       	push   $0xf012ffbe
f011df2e:	e8 73 22 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011df33:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011df36:	e8 75 d6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011df3b:	29 c3                	sub    %eax,%ebx
f011df3d:	89 d8                	mov    %ebx,%eax
f011df3f:	3d 00 06 00 00       	cmp    $0x600,%eax
f011df44:	74 17                	je     f011df5d <test_kheap_virt_addr+0x936>
f011df46:	83 ec 04             	sub    $0x4,%esp
f011df49:	68 40 00 13 f0       	push   $0xf0130040
f011df4e:	68 b5 08 00 00       	push   $0x8b5
f011df53:	68 be ff 12 f0       	push   $0xf012ffbe
f011df58:	e8 49 22 fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011df5d:	e8 4e d6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011df62:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df65:	e8 3a 55 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011df6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011df6d:	83 ec 0c             	sub    $0xc,%esp
f011df70:	68 00 38 00 00       	push   $0x3800
f011df75:	e8 7a 8c fe ff       	call   f0106bf4 <kmalloc>
f011df7a:	83 c4 10             	add    $0x10,%esp
f011df7d:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011df83:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f011df89:	89 c1                	mov    %eax,%ecx
f011df8b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011df92:	10 00 00 
f011df95:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011df9a:	0f b6 d0             	movzbl %al,%edx
f011df9d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dfa3:	01 d0                	add    %edx,%eax
f011dfa5:	48                   	dec    %eax
f011dfa6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011dfac:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfb7:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011dfbd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfc3:	29 d0                	sub    %edx,%eax
f011dfc5:	89 c3                	mov    %eax,%ebx
f011dfc7:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011dfce:	10 00 00 
f011dfd1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011dfd6:	0f b6 c0             	movzbl %al,%eax
f011dfd9:	c1 e0 04             	shl    $0x4,%eax
f011dfdc:	89 c2                	mov    %eax,%edx
f011dfde:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dfe4:	01 d0                	add    %edx,%eax
f011dfe6:	48                   	dec    %eax
f011dfe7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011dfed:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dff3:	ba 00 00 00 00       	mov    $0x0,%edx
f011dff8:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011dffe:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e004:	29 d0                	sub    %edx,%eax
f011e006:	01 c3                	add    %eax,%ebx
f011e008:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e00f:	10 00 00 
f011e012:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e018:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e01d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e023:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e029:	ba 00 00 00 00       	mov    $0x0,%edx
f011e02e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e034:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e03a:	29 d0                	sub    %edx,%eax
f011e03c:	01 d8                	add    %ebx,%eax
f011e03e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011e043:	39 c1                	cmp    %eax,%ecx
f011e045:	74 17                	je     f011e05e <test_kheap_virt_addr+0xa37>
f011e047:	83 ec 04             	sub    $0x4,%esp
f011e04a:	68 a4 00 13 f0       	push   $0xf01300a4
f011e04f:	68 bb 08 00 00       	push   $0x8bb
f011e054:	68 be ff 12 f0       	push   $0xf012ffbe
f011e059:	e8 48 21 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e05e:	e8 41 54 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e063:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011e066:	74 17                	je     f011e07f <test_kheap_virt_addr+0xa58>
f011e068:	83 ec 04             	sub    $0x4,%esp
f011e06b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011e070:	68 bc 08 00 00       	push   $0x8bc
f011e075:	68 be ff 12 f0       	push   $0xf012ffbe
f011e07a:	e8 27 21 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011e07f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011e082:	e8 29 d5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e087:	29 c3                	sub    %eax,%ebx
f011e089:	89 d8                	mov    %ebx,%eax
f011e08b:	83 f8 04             	cmp    $0x4,%eax
f011e08e:	74 17                	je     f011e0a7 <test_kheap_virt_addr+0xa80>
f011e090:	83 ec 04             	sub    $0x4,%esp
f011e093:	68 40 00 13 f0       	push   $0xf0130040
f011e098:	68 bd 08 00 00       	push   $0x8bd
f011e09d:	68 be ff 12 f0       	push   $0xf012ffbe
f011e0a2:	e8 ff 20 fe ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f011e0a7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e0ae:	10 00 00 
f011e0b1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e0b6:	0f b6 d0             	movzbl %al,%edx
f011e0b9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e0bf:	01 d0                	add    %edx,%eax
f011e0c1:	48                   	dec    %eax
f011e0c2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e0c8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e0ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0d3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e0d9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e0df:	29 d0                	sub    %edx,%eax
f011e0e1:	89 c1                	mov    %eax,%ecx
f011e0e3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e0ea:	10 00 00 
f011e0ed:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e0f2:	0f b6 c0             	movzbl %al,%eax
f011e0f5:	c1 e0 04             	shl    $0x4,%eax
f011e0f8:	89 c2                	mov    %eax,%edx
f011e0fa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e100:	01 d0                	add    %edx,%eax
f011e102:	48                   	dec    %eax
f011e103:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e109:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e10f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e114:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e11a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e120:	29 d0                	sub    %edx,%eax
f011e122:	01 c1                	add    %eax,%ecx
f011e124:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011e12b:	10 00 00 
f011e12e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e134:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e139:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011e13f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011e145:	ba 00 00 00 00       	mov    $0x0,%edx
f011e14a:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011e150:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011e156:	29 d0                	sub    %edx,%eax
f011e158:	01 c8                	add    %ecx,%eax
f011e15a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011e15f:	c1 e8 0c             	shr    $0xc,%eax
f011e162:	89 c2                	mov    %eax,%edx
f011e164:	4a                   	dec    %edx
f011e165:	89 95 dc fe ff ff    	mov    %edx,-0x124(%ebp)
f011e16b:	c1 e0 02             	shl    $0x2,%eax
f011e16e:	8d 50 03             	lea    0x3(%eax),%edx
f011e171:	b8 10 00 00 00       	mov    $0x10,%eax
f011e176:	48                   	dec    %eax
f011e177:	01 d0                	add    %edx,%eax
f011e179:	bf 10 00 00 00       	mov    $0x10,%edi
f011e17e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e183:	f7 f7                	div    %edi
f011e185:	6b c0 10             	imul   $0x10,%eax,%eax
f011e188:	29 c4                	sub    %eax,%esp
f011e18a:	89 e0                	mov    %esp,%eax
f011e18c:	83 c0 03             	add    $0x3,%eax
f011e18f:	c1 e8 02             	shr    $0x2,%eax
f011e192:	c1 e0 02             	shl    $0x2,%eax
f011e195:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE ;
f011e19b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011e1a2:	10 00 00 
f011e1a5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e1aa:	0f b6 d0             	movzbl %al,%edx
f011e1ad:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e1b3:	01 d0                	add    %edx,%eax
f011e1b5:	48                   	dec    %eax
f011e1b6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011e1bc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011e1c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1c7:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011e1cd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011e1d3:	29 d0                	sub    %edx,%eax
f011e1d5:	89 c1                	mov    %eax,%ecx
f011e1d7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011e1de:	10 00 00 
f011e1e1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e1e6:	0f b6 c0             	movzbl %al,%eax
f011e1e9:	c1 e0 04             	shl    $0x4,%eax
f011e1ec:	89 c2                	mov    %eax,%edx
f011e1ee:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e1f4:	01 d0                	add    %edx,%eax
f011e1f6:	48                   	dec    %eax
f011e1f7:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011e1fd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011e203:	ba 00 00 00 00       	mov    $0x0,%edx
f011e208:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011e20e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011e214:	29 d0                	sub    %edx,%eax
f011e216:	01 c1                	add    %eax,%ecx
f011e218:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011e21f:	10 00 00 
f011e222:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e228:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e22d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011e233:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011e239:	ba 00 00 00 00       	mov    $0x0,%edx
f011e23e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011e244:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011e24a:	29 d0                	sub    %edx,%eax
f011e24c:	01 c8                	add    %ecx,%eax
f011e24e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011e253:	c1 e8 0c             	shr    $0xc,%eax
f011e256:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011e25c:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011e263:	10 00 00 
f011e266:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e26b:	0f b6 d0             	movzbl %al,%edx
f011e26e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e274:	01 d0                	add    %edx,%eax
f011e276:	48                   	dec    %eax
f011e277:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011e27d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e283:	ba 00 00 00 00       	mov    $0x0,%edx
f011e288:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011e28e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e294:	29 d0                	sub    %edx,%eax
f011e296:	89 c1                	mov    %eax,%ecx
f011e298:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011e29f:	10 00 00 
f011e2a2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e2a7:	0f b6 c0             	movzbl %al,%eax
f011e2aa:	c1 e0 04             	shl    $0x4,%eax
f011e2ad:	89 c2                	mov    %eax,%edx
f011e2af:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e2b5:	01 d0                	add    %edx,%eax
f011e2b7:	48                   	dec    %eax
f011e2b8:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011e2be:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e2c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2c9:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011e2cf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e2d5:	29 d0                	sub    %edx,%eax
f011e2d7:	01 c1                	add    %eax,%ecx
f011e2d9:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011e2e0:	10 00 00 
f011e2e3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e2e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2ee:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011e2f4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e2fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2ff:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011e305:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e30b:	29 d0                	sub    %edx,%eax
f011e30d:	01 c8                	add    %ecx,%eax
f011e30f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011e314:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		int i = 0;
f011e31a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011e321:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f011e328:	e9 d7 00 00 00       	jmp    f011e404 <test_kheap_virt_addr+0xddd>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e32d:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f011e332:	83 ec 04             	sub    $0x4,%esp
f011e335:	8d 95 54 fd ff ff    	lea    -0x2ac(%ebp),%edx
f011e33b:	52                   	push   %edx
f011e33c:	ff 75 e4             	pushl  -0x1c(%ebp)
f011e33f:	50                   	push   %eax
f011e340:	e8 3c 7e fe ff       	call   f0106181 <get_page_table>
f011e345:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e348:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011e34e:	85 c0                	test   %eax,%eax
f011e350:	75 17                	jne    f011e369 <test_kheap_virt_addr+0xd42>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011e352:	83 ec 04             	sub    $0x4,%esp
f011e355:	68 60 09 13 f0       	push   $0xf0130960
f011e35a:	68 ce 08 00 00       	push   $0x8ce
f011e35f:	68 be ff 12 f0       	push   $0xf012ffbe
f011e364:	e8 3d 1e fe ff       	call   f01001a6 <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f011e369:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011e370:	eb 73                	jmp    f011e3e5 <test_kheap_virt_addr+0xdbe>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f011e372:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011e378:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e37b:	c1 e2 02             	shl    $0x2,%edx
f011e37e:	01 d0                	add    %edx,%eax
f011e380:	8b 00                	mov    (%eax),%eax
f011e382:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e387:	89 c1                	mov    %eax,%ecx
f011e389:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e38f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011e392:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011e395:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e39b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011e39e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011e3a1:	83 ec 0c             	sub    $0xc,%esp
f011e3a4:	50                   	push   %eax
f011e3a5:	e8 7e 88 fe ff       	call   f0106c28 <kheap_virtual_address>
f011e3aa:	83 c4 10             	add    $0x10,%esp
f011e3ad:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f011e3b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e3b6:	c1 e0 0c             	shl    $0xc,%eax
f011e3b9:	89 c2                	mov    %eax,%edx
f011e3bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e3be:	01 d0                	add    %edx,%eax
f011e3c0:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f011e3c6:	74 17                	je     f011e3df <test_kheap_virt_addr+0xdb8>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f011e3c8:	83 ec 04             	sub    $0x4,%esp
f011e3cb:	68 54 0a 13 f0       	push   $0xf0130a54
f011e3d0:	68 d8 08 00 00       	push   $0x8d8
f011e3d5:	68 be ff 12 f0       	push   $0xf012ffbe
f011e3da:	e8 c7 1d fe ff       	call   f01001a6 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f011e3df:	ff 45 dc             	incl   -0x24(%ebp)
f011e3e2:	ff 45 e0             	incl   -0x20(%ebp)
f011e3e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e3e8:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f011e3ee:	7d 0d                	jge    f011e3fd <test_kheap_virt_addr+0xdd6>
f011e3f0:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f011e3f7:	0f 8e 75 ff ff ff    	jle    f011e372 <test_kheap_virt_addr+0xd4b>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011e3fd:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f011e404:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e407:	3b 85 a0 fe ff ff    	cmp    -0x160(%ebp),%eax
f011e40d:	0f 82 1a ff ff ff    	jb     f011e32d <test_kheap_virt_addr+0xd06>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f011e413:	83 ec 0c             	sub    $0xc,%esp
f011e416:	68 70 0a 13 f0       	push   $0xf0130a70
f011e41b:	e8 0d 28 fe ff       	call   f0100c2d <cprintf>
f011e420:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011e423:	e8 88 d1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e428:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011e42e:	e8 71 50 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e433:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		kfree(ptr_allocations[0]);
f011e439:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011e43f:	83 ec 0c             	sub    $0xc,%esp
f011e442:	50                   	push   %eax
f011e443:	e8 c6 87 fe ff       	call   f0106c0e <kfree>
f011e448:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e44b:	e8 54 50 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e450:	3b 85 94 fe ff ff    	cmp    -0x16c(%ebp),%eax
f011e456:	74 17                	je     f011e46f <test_kheap_virt_addr+0xe48>
f011e458:	83 ec 04             	sub    $0x4,%esp
f011e45b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011e460:	68 e5 08 00 00       	push   $0x8e5
f011e465:	68 be ff 12 f0       	push   $0xf012ffbe
f011e46a:	e8 37 1d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011e46f:	e8 3c d1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e474:	89 c2                	mov    %eax,%edx
f011e476:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e47c:	29 c2                	sub    %eax,%edx
f011e47e:	89 d0                	mov    %edx,%eax
f011e480:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e485:	74 17                	je     f011e49e <test_kheap_virt_addr+0xe77>
f011e487:	83 ec 04             	sub    $0x4,%esp
f011e48a:	68 48 07 13 f0       	push   $0xf0130748
f011e48f:	68 e6 08 00 00       	push   $0x8e6
f011e494:	68 be ff 12 f0       	push   $0xf012ffbe
f011e499:	e8 08 1d fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e49e:	e8 0d d1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e4a3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4a9:	e8 f6 4f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e4ae:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		kfree(ptr_allocations[1]);
f011e4b4:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e4ba:	83 ec 0c             	sub    $0xc,%esp
f011e4bd:	50                   	push   %eax
f011e4be:	e8 4b 87 fe ff       	call   f0106c0e <kfree>
f011e4c3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4c6:	e8 d9 4f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e4cb:	3b 85 94 fe ff ff    	cmp    -0x16c(%ebp),%eax
f011e4d1:	74 17                	je     f011e4ea <test_kheap_virt_addr+0xec3>
f011e4d3:	83 ec 04             	sub    $0x4,%esp
f011e4d6:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011e4db:	68 ec 08 00 00       	push   $0x8ec
f011e4e0:	68 be ff 12 f0       	push   $0xf012ffbe
f011e4e5:	e8 bc 1c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011e4ea:	e8 c1 d0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e4ef:	89 c2                	mov    %eax,%edx
f011e4f1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e4f7:	29 c2                	sub    %eax,%edx
f011e4f9:	89 d0                	mov    %edx,%eax
f011e4fb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e500:	74 17                	je     f011e519 <test_kheap_virt_addr+0xef2>
f011e502:	83 ec 04             	sub    $0x4,%esp
f011e505:	68 48 07 13 f0       	push   $0xf0130748
f011e50a:	68 ed 08 00 00       	push   $0x8ed
f011e50f:	68 be ff 12 f0       	push   $0xf012ffbe
f011e514:	e8 8d 1c fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011e519:	e8 92 d0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e51e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e524:	e8 7b 4f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e529:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		kfree(ptr_allocations[6]);
f011e52f:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f011e535:	83 ec 0c             	sub    $0xc,%esp
f011e538:	50                   	push   %eax
f011e539:	e8 d0 86 fe ff       	call   f0106c0e <kfree>
f011e53e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e541:	e8 5e 4f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e546:	3b 85 94 fe ff ff    	cmp    -0x16c(%ebp),%eax
f011e54c:	74 17                	je     f011e565 <test_kheap_virt_addr+0xf3e>
f011e54e:	83 ec 04             	sub    $0x4,%esp
f011e551:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011e556:	68 f3 08 00 00       	push   $0x8f3
f011e55b:	68 be ff 12 f0       	push   $0xf012ffbe
f011e560:	e8 41 1c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011e565:	e8 46 d0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e56a:	89 c2                	mov    %eax,%edx
f011e56c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e572:	29 c2                	sub    %eax,%edx
f011e574:	89 d0                	mov    %edx,%eax
f011e576:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e57b:	74 17                	je     f011e594 <test_kheap_virt_addr+0xf6d>
f011e57d:	83 ec 04             	sub    $0x4,%esp
f011e580:	68 48 07 13 f0       	push   $0xf0130748
f011e585:	68 f4 08 00 00       	push   $0x8f4
f011e58a:	68 be ff 12 f0       	push   $0xf012ffbe
f011e58f:	e8 12 1c fe ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011e594:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011e59b:	10 00 00 
f011e59e:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e5a3:	0f b6 d0             	movzbl %al,%edx
f011e5a6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011e5ac:	01 d0                	add    %edx,%eax
f011e5ae:	48                   	dec    %eax
f011e5af:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011e5b5:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e5bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5c0:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011e5c6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e5cc:	29 d0                	sub    %edx,%eax
f011e5ce:	89 c1                	mov    %eax,%ecx
f011e5d0:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011e5d7:	10 00 00 
f011e5da:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e5df:	0f b6 c0             	movzbl %al,%eax
f011e5e2:	c1 e0 04             	shl    $0x4,%eax
f011e5e5:	89 c2                	mov    %eax,%edx
f011e5e7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011e5ed:	01 d0                	add    %edx,%eax
f011e5ef:	48                   	dec    %eax
f011e5f0:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011e5f6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e5fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e601:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011e607:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e60d:	29 d0                	sub    %edx,%eax
f011e60f:	01 c1                	add    %eax,%ecx
f011e611:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011e618:	10 00 00 
f011e61b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011e621:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e626:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011e62c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e632:	ba 00 00 00 00       	mov    $0x0,%edx
f011e637:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011e63d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e643:	29 d0                	sub    %edx,%eax
f011e645:	01 c8                	add    %ecx,%eax
f011e647:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011e64c:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		int i = 0;
f011e652:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f011e659:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011e660:	10 00 00 
f011e663:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e668:	0f b6 d0             	movzbl %al,%edx
f011e66b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e671:	01 d0                	add    %edx,%eax
f011e673:	48                   	dec    %eax
f011e674:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011e67a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011e680:	ba 00 00 00 00       	mov    $0x0,%edx
f011e685:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011e68b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011e691:	29 d0                	sub    %edx,%eax
f011e693:	89 c1                	mov    %eax,%ecx
f011e695:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011e69c:	10 00 00 
f011e69f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011e6a4:	0f b6 c0             	movzbl %al,%eax
f011e6a7:	c1 e0 04             	shl    $0x4,%eax
f011e6aa:	89 c2                	mov    %eax,%edx
f011e6ac:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011e6b2:	01 d0                	add    %edx,%eax
f011e6b4:	48                   	dec    %eax
f011e6b5:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011e6bb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e6c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6c6:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011e6cc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e6d2:	29 d0                	sub    %edx,%eax
f011e6d4:	01 c1                	add    %eax,%ecx
f011e6d6:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011e6dd:	10 00 00 
f011e6e0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e6e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6eb:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011e6f1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e6f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6fc:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011e702:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e708:	29 d0                	sub    %edx,%eax
f011e70a:	01 c8                	add    %ecx,%eax
f011e70c:	05 00 40 00 00       	add    $0x4000,%eax
f011e711:	c1 e8 0c             	shr    $0xc,%eax
f011e714:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011e71a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e720:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e723:	eb 41                	jmp    f011e766 <test_kheap_virt_addr+0x113f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011e725:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e72b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e72e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011e731:	83 ec 0c             	sub    $0xc,%esp
f011e734:	50                   	push   %eax
f011e735:	e8 ee 84 fe ff       	call   f0106c28 <kheap_virtual_address>
f011e73a:	83 c4 10             	add    $0x10,%esp
f011e73d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
			if (retrievedVA != 0)
f011e743:	83 bd 58 fe ff ff 00 	cmpl   $0x0,-0x1a8(%ebp)
f011e74a:	74 17                	je     f011e763 <test_kheap_virt_addr+0x113c>
			{
				panic("Wrong kheap_virtual_address");
f011e74c:	83 ec 04             	sub    $0x4,%esp
f011e74f:	68 54 0a 13 f0       	push   $0xf0130a54
f011e754:	68 05 09 00 00       	push   $0x905
f011e759:	68 be ff 12 f0       	push   $0xf012ffbe
f011e75e:	e8 43 1a fe ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011e763:	ff 45 d8             	incl   -0x28(%ebp)
f011e766:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e76c:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011e772:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e775:	39 c2                	cmp    %eax,%edx
f011e777:	77 ac                	ja     f011e725 <test_kheap_virt_addr+0x10fe>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011e779:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e77f:	05 00 04 00 00       	add    $0x400,%eax
f011e784:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e787:	eb 4b                	jmp    f011e7d4 <test_kheap_virt_addr+0x11ad>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011e789:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e78f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e792:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011e795:	83 ec 0c             	sub    $0xc,%esp
f011e798:	50                   	push   %eax
f011e799:	e8 8a 84 fe ff       	call   f0106c28 <kheap_virtual_address>
f011e79e:	83 c4 10             	add    $0x10,%esp
f011e7a1:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f011e7a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e7aa:	c1 e0 0c             	shl    $0xc,%eax
f011e7ad:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011e7b2:	3b 85 54 fe ff ff    	cmp    -0x1ac(%ebp),%eax
f011e7b8:	74 17                	je     f011e7d1 <test_kheap_virt_addr+0x11aa>
			{
				panic("Wrong kheap_virtual_address");
f011e7ba:	83 ec 04             	sub    $0x4,%esp
f011e7bd:	68 54 0a 13 f0       	push   $0xf0130a54
f011e7c2:	68 0f 09 00 00       	push   $0x90f
f011e7c7:	68 be ff 12 f0       	push   $0xf012ffbe
f011e7cc:	e8 d5 19 fe ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011e7d1:	ff 45 d8             	incl   -0x28(%ebp)
f011e7d4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e7da:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f011e7e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e7e3:	39 c2                	cmp    %eax,%edx
f011e7e5:	77 a2                	ja     f011e789 <test_kheap_virt_addr+0x1162>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011e7e7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e7ed:	05 04 07 00 00       	add    $0x704,%eax
f011e7f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e7f5:	eb 41                	jmp    f011e838 <test_kheap_virt_addr+0x1211>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011e7f7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e7fd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e800:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011e803:	83 ec 0c             	sub    $0xc,%esp
f011e806:	50                   	push   %eax
f011e807:	e8 1c 84 fe ff       	call   f0106c28 <kheap_virtual_address>
f011e80c:	83 c4 10             	add    $0x10,%esp
f011e80f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
			if (retrievedVA != 0)
f011e815:	83 bd 50 fe ff ff 00 	cmpl   $0x0,-0x1b0(%ebp)
f011e81c:	74 17                	je     f011e835 <test_kheap_virt_addr+0x120e>
			{
				panic("Wrong kheap_virtual_address");
f011e81e:	83 ec 04             	sub    $0x4,%esp
f011e821:	68 54 0a 13 f0       	push   $0xf0130a54
f011e826:	68 18 09 00 00       	push   $0x918
f011e82b:	68 be ff 12 f0       	push   $0xf012ffbe
f011e830:	e8 71 19 fe ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011e835:	ff 45 d8             	incl   -0x28(%ebp)
f011e838:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e83e:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f011e844:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e847:	39 c2                	cmp    %eax,%edx
f011e849:	77 ac                	ja     f011e7f7 <test_kheap_virt_addr+0x11d0>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011e84b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e851:	05 04 0d 00 00       	add    $0xd04,%eax
f011e856:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e859:	eb 4b                	jmp    f011e8a6 <test_kheap_virt_addr+0x127f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011e85b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e861:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e864:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011e867:	83 ec 0c             	sub    $0xc,%esp
f011e86a:	50                   	push   %eax
f011e86b:	e8 b8 83 fe ff       	call   f0106c28 <kheap_virtual_address>
f011e870:	83 c4 10             	add    $0x10,%esp
f011e873:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f011e879:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e87c:	c1 e0 0c             	shl    $0xc,%eax
f011e87f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011e884:	3b 85 4c fe ff ff    	cmp    -0x1b4(%ebp),%eax
f011e88a:	74 17                	je     f011e8a3 <test_kheap_virt_addr+0x127c>
			{
				panic("Wrong kheap_virtual_address");
f011e88c:	83 ec 04             	sub    $0x4,%esp
f011e88f:	68 54 0a 13 f0       	push   $0xf0130a54
f011e894:	68 21 09 00 00       	push   $0x921
f011e899:	68 be ff 12 f0       	push   $0xf012ffbe
f011e89e:	e8 03 19 fe ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011e8a3:	ff 45 d8             	incl   -0x28(%ebp)
f011e8a6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011e8ac:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f011e8b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e8b5:	39 c2                	cmp    %eax,%edx
f011e8b7:	77 a2                	ja     f011e85b <test_kheap_virt_addr+0x1234>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f011e8b9:	83 ec 0c             	sub    $0xc,%esp
f011e8bc:	68 49 01 13 f0       	push   $0xf0130149
f011e8c1:	e8 67 23 fe ff       	call   f0100c2d <cprintf>
f011e8c6:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011e8c9:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f011e8d0:	eb 54                	jmp    f011e926 <test_kheap_virt_addr+0x12ff>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011e8d2:	83 ec 0c             	sub    $0xc,%esp
f011e8d5:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e8d8:	e8 4b 83 fe ff       	call   f0106c28 <kheap_virtual_address>
f011e8dd:	83 c4 10             	add    $0x10,%esp
f011e8e0:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
			if (retrievedVA != 0)
f011e8e6:	83 bd 48 fe ff ff 00 	cmpl   $0x0,-0x1b8(%ebp)
f011e8ed:	74 30                	je     f011e91f <test_kheap_virt_addr+0x12f8>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011e8ef:	83 ec 04             	sub    $0x4,%esp
f011e8f2:	ff b5 48 fe ff ff    	pushl  -0x1b8(%ebp)
f011e8f8:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e8fb:	68 a1 0a 13 f0       	push   $0xf0130aa1
f011e900:	e8 28 23 fe ff       	call   f0100c2d <cprintf>
f011e905:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f011e908:	83 ec 04             	sub    $0x4,%esp
f011e90b:	68 54 0a 13 f0       	push   $0xf0130a54
f011e910:	68 31 09 00 00       	push   $0x931
f011e915:	68 be ff 12 f0       	push   $0xf012ffbe
f011e91a:	e8 87 18 fe ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011e91f:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f011e926:	b8 5c 45 6d 00       	mov    $0x6d455c,%eax
f011e92b:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f011e92e:	72 a2                	jb     f011e8d2 <test_kheap_virt_addr+0x12ab>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f011e930:	83 ec 0c             	sub    $0xc,%esp
f011e933:	68 a2 01 13 f0       	push   $0xf01301a2
f011e938:	e8 f0 22 fe ff       	call   f0100c2d <cprintf>
f011e93d:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f011e940:	83 ec 0c             	sub    $0xc,%esp
f011e943:	68 c0 0a 13 f0       	push   $0xf0130ac0
f011e948:	e8 e0 22 fe ff       	call   f0100c2d <cprintf>
f011e94d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e950:	b8 01 00 00 00       	mov    $0x1,%eax
f011e955:	89 f4                	mov    %esi,%esp

}
f011e957:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011e95a:	5b                   	pop    %ebx
f011e95b:	5e                   	pop    %esi
f011e95c:	5f                   	pop    %edi
f011e95d:	5d                   	pop    %ebp
f011e95e:	c3                   	ret    

f011e95f <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011e95f:	55                   	push   %ebp
f011e960:	89 e5                	mov    %esp,%ebp
f011e962:	57                   	push   %edi
f011e963:	56                   	push   %esi
f011e964:	53                   	push   %ebx
f011e965:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f011e96b:	a0 0f cc 17 f0       	mov    0xf017cc0f,%al
f011e970:	84 c0                	test   %al,%al
f011e972:	74 56                	je     f011e9ca <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011e974:	c6 05 0f cc 17 f0 00 	movb   $0x0,0xf017cc0f
		initFreeFrames = sys_calculate_free_frames() ;
f011e97b:	e8 30 cc fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011e980:	a3 58 45 6d f0       	mov    %eax,0xf06d4558
		initFreeDiskFrames = pf_calculate_free_frames() ;
f011e985:	e8 1a 4b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011e98a:	a3 54 45 6d f0       	mov    %eax,0xf06d4554
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011e98f:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f011e995:	bb 1d 0c 13 f0       	mov    $0xf0130c1d,%ebx
f011e99a:	ba 11 00 00 00       	mov    $0x11,%edx
f011e99f:	89 c7                	mov    %eax,%edi
f011e9a1:	89 de                	mov    %ebx,%esi
f011e9a3:	89 d1                	mov    %edx,%ecx
f011e9a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011e9a7:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f011e9ad:	b9 53 00 00 00       	mov    $0x53,%ecx
f011e9b2:	b0 00                	mov    $0x0,%al
f011e9b4:	89 d7                	mov    %edx,%edi
f011e9b6:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f011e9b8:	83 ec 0c             	sub    $0xc,%esp
f011e9bb:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f011e9c1:	50                   	push   %eax
f011e9c2:	e8 c8 22 fe ff       	call   f0100c8f <execute_command>
f011e9c7:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f011e9ca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011e9d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f011e9d8:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f011e9dd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e9e0:	eb 2d                	jmp    f011ea0f <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011e9e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e9e5:	05 18 da 01 00       	add    $0x1da18,%eax
f011e9ea:	83 ec 08             	sub    $0x8,%esp
f011e9ed:	68 07 0b 13 f0       	push   $0xf0130b07
f011e9f2:	50                   	push   %eax
f011e9f3:	e8 3f ad 00 00       	call   f0129737 <strcmp>
f011e9f8:	83 c4 10             	add    $0x10,%esp
f011e9fb:	85 c0                	test   %eax,%eax
f011e9fd:	75 08                	jne    f011ea07 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f011e9ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ea02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f011ea05:	eb 2f                	jmp    f011ea36 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f011ea07:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f011ea0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ea0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ea13:	74 08                	je     f011ea1d <test_three_creation_functions+0xbe>
f011ea15:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ea18:	8b 40 44             	mov    0x44(%eax),%eax
f011ea1b:	eb 05                	jmp    f011ea22 <test_three_creation_functions+0xc3>
f011ea1d:	b8 00 00 00 00       	mov    $0x0,%eax
f011ea22:	a3 ac 1f 6d f0       	mov    %eax,0xf06d1fac
f011ea27:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f011ea2c:	85 c0                	test   %eax,%eax
f011ea2e:	75 b2                	jne    f011e9e2 <test_three_creation_functions+0x83>
f011ea30:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ea34:	75 ac                	jne    f011e9e2 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f011ea36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ea39:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f011ea3f:	85 c0                	test   %eax,%eax
f011ea41:	74 17                	je     f011ea5a <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f011ea43:	83 ec 04             	sub    $0x4,%esp
f011ea46:	68 10 0b 13 f0       	push   $0xf0130b10
f011ea4b:	68 5b 09 00 00       	push   $0x95b
f011ea50:	68 be ff 12 f0       	push   $0xf012ffbe
f011ea55:	e8 4c 17 fe ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f011ea5a:	83 ec 0c             	sub    $0xc,%esp
f011ea5d:	ff 75 e4             	pushl  -0x1c(%ebp)
f011ea60:	e8 5d 83 fe ff       	call   f0106dc2 <env_page_ws_get_size>
f011ea65:	83 c4 10             	add    $0x10,%esp
f011ea68:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f011ea6b:	e8 40 cb fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ea70:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011ea73:	e8 2c 4a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ea78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea7b:	a1 54 45 6d f0       	mov    0xf06d4554,%eax
f011ea80:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011ea83:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011ea86:	74 17                	je     f011ea9f <test_three_creation_functions+0x140>
f011ea88:	83 ec 04             	sub    $0x4,%esp
f011ea8b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ea90:	68 61 09 00 00       	push   $0x961
f011ea95:	68 be ff 12 f0       	push   $0xf012ffbe
f011ea9a:	e8 07 17 fe ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ea9f:	a1 58 45 6d f0       	mov    0xf06d4558,%eax
f011eaa4:	2b 45 d8             	sub    -0x28(%ebp),%eax
f011eaa7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eaaa:	83 c2 15             	add    $0x15,%edx
f011eaad:	39 d0                	cmp    %edx,%eax
f011eaaf:	74 17                	je     f011eac8 <test_three_creation_functions+0x169>
f011eab1:	83 ec 04             	sub    $0x4,%esp
f011eab4:	68 40 00 13 f0       	push   $0xf0130040
f011eab9:	68 63 09 00 00       	push   $0x963
f011eabe:	68 be ff 12 f0       	push   $0xf012ffbe
f011eac3:	e8 de 16 fe ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f011eac8:	83 ec 0c             	sub    $0xc,%esp
f011eacb:	68 00 10 00 00       	push   $0x1000
f011ead0:	e8 1f 81 fe ff       	call   f0106bf4 <kmalloc>
f011ead5:	83 c4 10             	add    $0x10,%esp
f011ead8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f011eadb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011eae2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011eae7:	0f b6 d0             	movzbl %al,%edx
f011eaea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011eaed:	01 d0                	add    %edx,%eax
f011eaef:	48                   	dec    %eax
f011eaf0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011eaf3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eaf6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eafb:	f7 75 cc             	divl   -0x34(%ebp)
f011eafe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eb01:	29 d0                	sub    %edx,%eax
f011eb03:	89 c1                	mov    %eax,%ecx
f011eb05:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011eb0c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011eb11:	0f b6 c0             	movzbl %al,%eax
f011eb14:	c1 e0 04             	shl    $0x4,%eax
f011eb17:	89 c2                	mov    %eax,%edx
f011eb19:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011eb1c:	01 d0                	add    %edx,%eax
f011eb1e:	48                   	dec    %eax
f011eb1f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011eb22:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011eb25:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb2a:	f7 75 c4             	divl   -0x3c(%ebp)
f011eb2d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011eb30:	29 d0                	sub    %edx,%eax
f011eb32:	01 c1                	add    %eax,%ecx
f011eb34:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011eb3b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011eb3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb43:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011eb46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011eb49:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4e:	f7 75 bc             	divl   -0x44(%ebp)
f011eb51:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011eb54:	29 d0                	sub    %edx,%eax
f011eb56:	01 c8                	add    %ecx,%eax
f011eb58:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f011eb5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eb61:	39 c2                	cmp    %eax,%edx
f011eb63:	74 17                	je     f011eb7c <test_three_creation_functions+0x21d>
f011eb65:	83 ec 04             	sub    $0x4,%esp
f011eb68:	68 60 0b 13 f0       	push   $0xf0130b60
f011eb6d:	68 67 09 00 00       	push   $0x967
f011eb72:	68 be ff 12 f0       	push   $0xf012ffbe
f011eb77:	e8 2a 16 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f011eb7c:	83 ec 0c             	sub    $0xc,%esp
f011eb7f:	68 d0 0b 13 f0       	push   $0xf0130bd0
f011eb84:	e8 a4 20 fe ff       	call   f0100c2d <cprintf>
f011eb89:	83 c4 10             	add    $0x10,%esp

	return 1;
f011eb8c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011eb91:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011eb94:	5b                   	pop    %ebx
f011eb95:	5e                   	pop    %esi
f011eb96:	5f                   	pop    %edi
f011eb97:	5d                   	pop    %ebp
f011eb98:	c3                   	ret    

f011eb99 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f011eb99:	55                   	push   %ebp
f011eb9a:	89 e5                	mov    %esp,%ebp
f011eb9c:	57                   	push   %edi
f011eb9d:	53                   	push   %ebx
f011eb9e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f011eba4:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011eba8:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011ebac:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011ebb2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011ebb8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011ebbf:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011ebc6:	e8 e5 c9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ebcb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011ebce:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011ebd4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ebd9:	b8 00 00 00 00       	mov    $0x0,%eax
f011ebde:	89 d7                	mov    %edx,%edi
f011ebe0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011ebe2:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011ebe8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ebed:	b8 00 00 00 00       	mov    $0x0,%eax
f011ebf2:	89 d7                	mov    %edx,%edi
f011ebf4:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011ebf6:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011ebfc:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ec01:	b8 00 00 00 00       	mov    $0x0,%eax
f011ec06:	89 d7                	mov    %edx,%edi
f011ec08:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ec0a:	e8 a1 c9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ec0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec12:	e8 8d 48 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ec17:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ec1a:	83 ec 0c             	sub    $0xc,%esp
f011ec1d:	68 00 fc 1f 00       	push   $0x1ffc00
f011ec22:	e8 cd 7f fe ff       	call   f0106bf4 <kmalloc>
f011ec27:	83 c4 10             	add    $0x10,%esp
f011ec2a:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ec30:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011ec36:	89 c1                	mov    %eax,%ecx
f011ec38:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011ec3f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ec44:	0f b6 d0             	movzbl %al,%edx
f011ec47:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ec4a:	01 d0                	add    %edx,%eax
f011ec4c:	48                   	dec    %eax
f011ec4d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011ec50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ec53:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec58:	f7 75 c8             	divl   -0x38(%ebp)
f011ec5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ec5e:	29 d0                	sub    %edx,%eax
f011ec60:	89 c3                	mov    %eax,%ebx
f011ec62:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011ec69:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ec6e:	0f b6 c0             	movzbl %al,%eax
f011ec71:	c1 e0 04             	shl    $0x4,%eax
f011ec74:	89 c2                	mov    %eax,%edx
f011ec76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ec79:	01 d0                	add    %edx,%eax
f011ec7b:	48                   	dec    %eax
f011ec7c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011ec7f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ec82:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec87:	f7 75 c0             	divl   -0x40(%ebp)
f011ec8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ec8d:	29 d0                	sub    %edx,%eax
f011ec8f:	01 c3                	add    %eax,%ebx
f011ec91:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011ec98:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ec9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eca0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011eca3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011eca6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecab:	f7 75 b8             	divl   -0x48(%ebp)
f011ecae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ecb1:	29 d0                	sub    %edx,%eax
f011ecb3:	01 d8                	add    %ebx,%eax
f011ecb5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ecba:	39 c1                	cmp    %eax,%ecx
f011ecbc:	74 17                	je     f011ecd5 <test_kfreeall+0x13c>
f011ecbe:	83 ec 04             	sub    $0x4,%esp
f011ecc1:	68 a4 00 13 f0       	push   $0xf01300a4
f011ecc6:	68 8e 09 00 00       	push   $0x98e
f011eccb:	68 be ff 12 f0       	push   $0xf012ffbe
f011ecd0:	e8 d1 14 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecd5:	e8 ca 47 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ecda:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ecdd:	74 17                	je     f011ecf6 <test_kfreeall+0x15d>
f011ecdf:	83 ec 04             	sub    $0x4,%esp
f011ece2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ece7:	68 8f 09 00 00       	push   $0x98f
f011ecec:	68 be ff 12 f0       	push   $0xf012ffbe
f011ecf1:	e8 b0 14 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ecf6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ecf9:	e8 b2 c8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ecfe:	29 c3                	sub    %eax,%ebx
f011ed00:	89 d8                	mov    %ebx,%eax
f011ed02:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ed07:	74 17                	je     f011ed20 <test_kfreeall+0x187>
f011ed09:	83 ec 04             	sub    $0x4,%esp
f011ed0c:	68 40 00 13 f0       	push   $0xf0130040
f011ed11:	68 90 09 00 00       	push   $0x990
f011ed16:	68 be ff 12 f0       	push   $0xf012ffbe
f011ed1b:	e8 86 14 fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011ed20:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011ed27:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ed2a:	e8 81 c8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ed2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ed32:	e8 6d 47 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ed37:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ed3a:	83 ec 0c             	sub    $0xc,%esp
f011ed3d:	68 00 fc 1f 00       	push   $0x1ffc00
f011ed42:	e8 ad 7e fe ff       	call   f0106bf4 <kmalloc>
f011ed47:	83 c4 10             	add    $0x10,%esp
f011ed4a:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ed50:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011ed56:	89 c1                	mov    %eax,%ecx
f011ed58:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011ed5f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ed64:	0f b6 d0             	movzbl %al,%edx
f011ed67:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ed6a:	01 d0                	add    %edx,%eax
f011ed6c:	48                   	dec    %eax
f011ed6d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011ed70:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ed73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed78:	f7 75 b0             	divl   -0x50(%ebp)
f011ed7b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ed7e:	29 d0                	sub    %edx,%eax
f011ed80:	89 c3                	mov    %eax,%ebx
f011ed82:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011ed89:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ed8e:	0f b6 c0             	movzbl %al,%eax
f011ed91:	c1 e0 04             	shl    $0x4,%eax
f011ed94:	89 c2                	mov    %eax,%edx
f011ed96:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ed99:	01 d0                	add    %edx,%eax
f011ed9b:	48                   	dec    %eax
f011ed9c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011ed9f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011eda2:	ba 00 00 00 00       	mov    $0x0,%edx
f011eda7:	f7 75 a8             	divl   -0x58(%ebp)
f011edaa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011edad:	29 d0                	sub    %edx,%eax
f011edaf:	01 c3                	add    %eax,%ebx
f011edb1:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011edb8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011edbb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edc0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011edc3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011edc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011edcb:	f7 75 a0             	divl   -0x60(%ebp)
f011edce:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011edd1:	29 d0                	sub    %edx,%eax
f011edd3:	01 d8                	add    %ebx,%eax
f011edd5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011edda:	39 c1                	cmp    %eax,%ecx
f011eddc:	74 17                	je     f011edf5 <test_kfreeall+0x25c>
f011edde:	83 ec 04             	sub    $0x4,%esp
f011ede1:	68 a4 00 13 f0       	push   $0xf01300a4
f011ede6:	68 97 09 00 00       	push   $0x997
f011edeb:	68 be ff 12 f0       	push   $0xf012ffbe
f011edf0:	e8 b1 13 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011edf5:	e8 aa 46 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011edfa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011edfd:	74 17                	je     f011ee16 <test_kfreeall+0x27d>
f011edff:	83 ec 04             	sub    $0x4,%esp
f011ee02:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ee07:	68 98 09 00 00       	push   $0x998
f011ee0c:	68 be ff 12 f0       	push   $0xf012ffbe
f011ee11:	e8 90 13 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ee16:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ee19:	e8 92 c7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ee1e:	29 c3                	sub    %eax,%ebx
f011ee20:	89 d8                	mov    %ebx,%eax
f011ee22:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ee27:	74 17                	je     f011ee40 <test_kfreeall+0x2a7>
f011ee29:	83 ec 04             	sub    $0x4,%esp
f011ee2c:	68 40 00 13 f0       	push   $0xf0130040
f011ee31:	68 99 09 00 00       	push   $0x999
f011ee36:	68 be ff 12 f0       	push   $0xf012ffbe
f011ee3b:	e8 66 13 fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011ee40:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011ee47:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ee4a:	e8 61 c7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ee4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ee52:	e8 4d 46 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ee57:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011ee5a:	83 ec 0c             	sub    $0xc,%esp
f011ee5d:	68 00 08 00 00       	push   $0x800
f011ee62:	e8 8d 7d fe ff       	call   f0106bf4 <kmalloc>
f011ee67:	83 c4 10             	add    $0x10,%esp
f011ee6a:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ee70:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011ee76:	89 c1                	mov    %eax,%ecx
f011ee78:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011ee7f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011ee84:	0f b6 d0             	movzbl %al,%edx
f011ee87:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ee8a:	01 d0                	add    %edx,%eax
f011ee8c:	48                   	dec    %eax
f011ee8d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011ee90:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ee93:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee98:	f7 75 98             	divl   -0x68(%ebp)
f011ee9b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ee9e:	29 d0                	sub    %edx,%eax
f011eea0:	89 c3                	mov    %eax,%ebx
f011eea2:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011eea9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011eeae:	0f b6 c0             	movzbl %al,%eax
f011eeb1:	c1 e0 04             	shl    $0x4,%eax
f011eeb4:	89 c2                	mov    %eax,%edx
f011eeb6:	8b 45 90             	mov    -0x70(%ebp),%eax
f011eeb9:	01 d0                	add    %edx,%eax
f011eebb:	48                   	dec    %eax
f011eebc:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011eebf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011eec2:	ba 00 00 00 00       	mov    $0x0,%edx
f011eec7:	f7 75 90             	divl   -0x70(%ebp)
f011eeca:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011eecd:	29 d0                	sub    %edx,%eax
f011eecf:	01 c3                	add    %eax,%ebx
f011eed1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011eed8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011eedb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eee0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011eee3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011eee6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eeeb:	f7 75 88             	divl   -0x78(%ebp)
f011eeee:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011eef1:	29 d0                	sub    %edx,%eax
f011eef3:	01 d8                	add    %ebx,%eax
f011eef5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011eefa:	39 c1                	cmp    %eax,%ecx
f011eefc:	74 17                	je     f011ef15 <test_kfreeall+0x37c>
f011eefe:	83 ec 04             	sub    $0x4,%esp
f011ef01:	68 a4 00 13 f0       	push   $0xf01300a4
f011ef06:	68 a0 09 00 00       	push   $0x9a0
f011ef0b:	68 be ff 12 f0       	push   $0xf012ffbe
f011ef10:	e8 91 12 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef15:	e8 8a 45 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ef1a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ef1d:	74 17                	je     f011ef36 <test_kfreeall+0x39d>
f011ef1f:	83 ec 04             	sub    $0x4,%esp
f011ef22:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ef27:	68 a1 09 00 00       	push   $0x9a1
f011ef2c:	68 be ff 12 f0       	push   $0xf012ffbe
f011ef31:	e8 70 12 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ef36:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ef39:	e8 72 c6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ef3e:	29 c3                	sub    %eax,%ebx
f011ef40:	89 d8                	mov    %ebx,%eax
f011ef42:	83 f8 01             	cmp    $0x1,%eax
f011ef45:	74 17                	je     f011ef5e <test_kfreeall+0x3c5>
f011ef47:	83 ec 04             	sub    $0x4,%esp
f011ef4a:	68 40 00 13 f0       	push   $0xf0130040
f011ef4f:	68 a2 09 00 00       	push   $0x9a2
f011ef54:	68 be ff 12 f0       	push   $0xf012ffbe
f011ef59:	e8 48 12 fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011ef5e:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011ef65:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011ef68:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011ef6e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011ef71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ef78:	eb 0e                	jmp    f011ef88 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f011ef7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ef7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ef80:	01 d0                	add    %edx,%eax
f011ef82:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011ef85:	ff 45 f4             	incl   -0xc(%ebp)
f011ef88:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ef8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ef91:	7f e7                	jg     f011ef7a <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ef93:	e8 18 c6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ef98:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ef9b:	e8 04 45 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011efa0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011efa3:	83 ec 0c             	sub    $0xc,%esp
f011efa6:	68 00 08 00 00       	push   $0x800
f011efab:	e8 44 7c fe ff       	call   f0106bf4 <kmalloc>
f011efb0:	83 c4 10             	add    $0x10,%esp
f011efb3:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011efb9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011efbf:	89 c1                	mov    %eax,%ecx
f011efc1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011efc8:	10 00 00 
f011efcb:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011efd0:	0f b6 d0             	movzbl %al,%edx
f011efd3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011efd9:	01 d0                	add    %edx,%eax
f011efdb:	48                   	dec    %eax
f011efdc:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011efe2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011efe8:	ba 00 00 00 00       	mov    $0x0,%edx
f011efed:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011eff3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eff9:	29 d0                	sub    %edx,%eax
f011effb:	89 c3                	mov    %eax,%ebx
f011effd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f004:	10 00 00 
f011f007:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f00c:	0f b6 c0             	movzbl %al,%eax
f011f00f:	c1 e0 04             	shl    $0x4,%eax
f011f012:	89 c2                	mov    %eax,%edx
f011f014:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f01a:	01 d0                	add    %edx,%eax
f011f01c:	48                   	dec    %eax
f011f01d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f023:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f029:	ba 00 00 00 00       	mov    $0x0,%edx
f011f02e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f034:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f03a:	29 d0                	sub    %edx,%eax
f011f03c:	01 c3                	add    %eax,%ebx
f011f03e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f045:	10 00 00 
f011f048:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f04e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f053:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f059:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f05f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f064:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f06a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f070:	29 d0                	sub    %edx,%eax
f011f072:	01 d8                	add    %ebx,%eax
f011f074:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f079:	39 c1                	cmp    %eax,%ecx
f011f07b:	74 17                	je     f011f094 <test_kfreeall+0x4fb>
f011f07d:	83 ec 04             	sub    $0x4,%esp
f011f080:	68 a4 00 13 f0       	push   $0xf01300a4
f011f085:	68 ae 09 00 00       	push   $0x9ae
f011f08a:	68 be ff 12 f0       	push   $0xf012ffbe
f011f08f:	e8 12 11 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f094:	e8 0b 44 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f099:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f09c:	74 17                	je     f011f0b5 <test_kfreeall+0x51c>
f011f09e:	83 ec 04             	sub    $0x4,%esp
f011f0a1:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f0a6:	68 af 09 00 00       	push   $0x9af
f011f0ab:	68 be ff 12 f0       	push   $0xf012ffbe
f011f0b0:	e8 f1 10 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f0b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f0b8:	e8 f3 c4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f0bd:	29 c3                	sub    %eax,%ebx
f011f0bf:	89 d8                	mov    %ebx,%eax
f011f0c1:	83 f8 01             	cmp    $0x1,%eax
f011f0c4:	74 17                	je     f011f0dd <test_kfreeall+0x544>
f011f0c6:	83 ec 04             	sub    $0x4,%esp
f011f0c9:	68 40 00 13 f0       	push   $0xf0130040
f011f0ce:	68 b0 09 00 00       	push   $0x9b0
f011f0d3:	68 be ff 12 f0       	push   $0xf012ffbe
f011f0d8:	e8 c9 10 fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f0dd:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011f0e4:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f0e7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f0ed:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f0f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f0f7:	eb 0e                	jmp    f011f107 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f011f0f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f0fc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f0ff:	01 d0                	add    %edx,%eax
f011f101:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f104:	ff 45 f4             	incl   -0xc(%ebp)
f011f107:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f10d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f110:	7f e7                	jg     f011f0f9 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f112:	e8 99 c4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f117:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f11a:	e8 85 43 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f11f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f122:	83 ec 0c             	sub    $0xc,%esp
f011f125:	68 00 1c 00 00       	push   $0x1c00
f011f12a:	e8 c5 7a fe ff       	call   f0106bf4 <kmalloc>
f011f12f:	83 c4 10             	add    $0x10,%esp
f011f132:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f138:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f13e:	89 c1                	mov    %eax,%ecx
f011f140:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f147:	10 00 00 
f011f14a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f14f:	0f b6 d0             	movzbl %al,%edx
f011f152:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f158:	01 d0                	add    %edx,%eax
f011f15a:	48                   	dec    %eax
f011f15b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f161:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f167:	ba 00 00 00 00       	mov    $0x0,%edx
f011f16c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f172:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f178:	29 d0                	sub    %edx,%eax
f011f17a:	89 c3                	mov    %eax,%ebx
f011f17c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f183:	10 00 00 
f011f186:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f18b:	0f b6 c0             	movzbl %al,%eax
f011f18e:	c1 e0 04             	shl    $0x4,%eax
f011f191:	89 c2                	mov    %eax,%edx
f011f193:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f199:	01 d0                	add    %edx,%eax
f011f19b:	48                   	dec    %eax
f011f19c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f1a2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f1a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1ad:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f1b3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f1b9:	29 d0                	sub    %edx,%eax
f011f1bb:	01 c3                	add    %eax,%ebx
f011f1bd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f1c4:	10 00 00 
f011f1c7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f1cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1d2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f1d8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f1de:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1e3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f1e9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f1ef:	29 d0                	sub    %edx,%eax
f011f1f1:	01 d8                	add    %ebx,%eax
f011f1f3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f1f8:	39 c1                	cmp    %eax,%ecx
f011f1fa:	74 17                	je     f011f213 <test_kfreeall+0x67a>
f011f1fc:	83 ec 04             	sub    $0x4,%esp
f011f1ff:	68 a4 00 13 f0       	push   $0xf01300a4
f011f204:	68 bc 09 00 00       	push   $0x9bc
f011f209:	68 be ff 12 f0       	push   $0xf012ffbe
f011f20e:	e8 93 0f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f213:	e8 8c 42 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f218:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f21b:	74 17                	je     f011f234 <test_kfreeall+0x69b>
f011f21d:	83 ec 04             	sub    $0x4,%esp
f011f220:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f225:	68 bd 09 00 00       	push   $0x9bd
f011f22a:	68 be ff 12 f0       	push   $0xf012ffbe
f011f22f:	e8 72 0f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f234:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f237:	e8 74 c3 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f23c:	29 c3                	sub    %eax,%ebx
f011f23e:	89 d8                	mov    %ebx,%eax
f011f240:	83 f8 02             	cmp    $0x2,%eax
f011f243:	74 17                	je     f011f25c <test_kfreeall+0x6c3>
f011f245:	83 ec 04             	sub    $0x4,%esp
f011f248:	68 40 00 13 f0       	push   $0xf0130040
f011f24d:	68 be 09 00 00       	push   $0x9be
f011f252:	68 be ff 12 f0       	push   $0xf012ffbe
f011f257:	e8 4a 0f fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f25c:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011f263:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f266:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f26c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f26f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f276:	eb 0e                	jmp    f011f286 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f011f278:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f27b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f27e:	01 d0                	add    %edx,%eax
f011f280:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f283:	ff 45 f4             	incl   -0xc(%ebp)
f011f286:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f28c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f28f:	7f e7                	jg     f011f278 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f291:	e8 1a c3 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f296:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f299:	e8 06 42 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f29e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f2a1:	83 ec 0c             	sub    $0xc,%esp
f011f2a4:	68 00 fc 2f 00       	push   $0x2ffc00
f011f2a9:	e8 46 79 fe ff       	call   f0106bf4 <kmalloc>
f011f2ae:	83 c4 10             	add    $0x10,%esp
f011f2b1:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f2b7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f2bd:	89 c1                	mov    %eax,%ecx
f011f2bf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f2c6:	10 00 00 
f011f2c9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f2ce:	0f b6 d0             	movzbl %al,%edx
f011f2d1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f2d7:	01 d0                	add    %edx,%eax
f011f2d9:	48                   	dec    %eax
f011f2da:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f2e0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f2e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2eb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f2f1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f2f7:	29 d0                	sub    %edx,%eax
f011f2f9:	89 c3                	mov    %eax,%ebx
f011f2fb:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f302:	10 00 00 
f011f305:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f30a:	0f b6 c0             	movzbl %al,%eax
f011f30d:	c1 e0 04             	shl    $0x4,%eax
f011f310:	89 c2                	mov    %eax,%edx
f011f312:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f318:	01 d0                	add    %edx,%eax
f011f31a:	48                   	dec    %eax
f011f31b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f321:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f327:	ba 00 00 00 00       	mov    $0x0,%edx
f011f32c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f332:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f338:	29 d0                	sub    %edx,%eax
f011f33a:	01 c3                	add    %eax,%ebx
f011f33c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f343:	10 00 00 
f011f346:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f34c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f351:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f357:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f35d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f362:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f368:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f36e:	29 d0                	sub    %edx,%eax
f011f370:	01 d8                	add    %ebx,%eax
f011f372:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011f377:	39 c1                	cmp    %eax,%ecx
f011f379:	74 17                	je     f011f392 <test_kfreeall+0x7f9>
f011f37b:	83 ec 04             	sub    $0x4,%esp
f011f37e:	68 a4 00 13 f0       	push   $0xf01300a4
f011f383:	68 ca 09 00 00       	push   $0x9ca
f011f388:	68 be ff 12 f0       	push   $0xf012ffbe
f011f38d:	e8 14 0e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f392:	e8 0d 41 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f397:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f39a:	74 17                	je     f011f3b3 <test_kfreeall+0x81a>
f011f39c:	83 ec 04             	sub    $0x4,%esp
f011f39f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f3a4:	68 cb 09 00 00       	push   $0x9cb
f011f3a9:	68 be ff 12 f0       	push   $0xf012ffbe
f011f3ae:	e8 f3 0d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f3b3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f3b6:	e8 f5 c1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f3bb:	29 c3                	sub    %eax,%ebx
f011f3bd:	89 d8                	mov    %ebx,%eax
f011f3bf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f3c4:	74 17                	je     f011f3dd <test_kfreeall+0x844>
f011f3c6:	83 ec 04             	sub    $0x4,%esp
f011f3c9:	68 40 00 13 f0       	push   $0xf0130040
f011f3ce:	68 cc 09 00 00       	push   $0x9cc
f011f3d3:	68 be ff 12 f0       	push   $0xf012ffbe
f011f3d8:	e8 c9 0d fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011f3dd:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011f3e4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011f3e7:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f3ed:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011f3f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f3f7:	eb 0e                	jmp    f011f407 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f011f3f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f3fc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f3ff:	01 d0                	add    %edx,%eax
f011f401:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011f404:	ff 45 f4             	incl   -0xc(%ebp)
f011f407:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f40d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f410:	7f e7                	jg     f011f3f9 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011f412:	e8 99 c1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f417:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f41a:	e8 85 40 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f41f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011f422:	83 ec 0c             	sub    $0xc,%esp
f011f425:	68 00 fc 5f 00       	push   $0x5ffc00
f011f42a:	e8 c5 77 fe ff       	call   f0106bf4 <kmalloc>
f011f42f:	83 c4 10             	add    $0x10,%esp
f011f432:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f438:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011f43e:	89 c1                	mov    %eax,%ecx
f011f440:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f447:	10 00 00 
f011f44a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f44f:	0f b6 d0             	movzbl %al,%edx
f011f452:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f458:	01 d0                	add    %edx,%eax
f011f45a:	48                   	dec    %eax
f011f45b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f461:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f467:	ba 00 00 00 00       	mov    $0x0,%edx
f011f46c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f472:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f478:	29 d0                	sub    %edx,%eax
f011f47a:	89 c3                	mov    %eax,%ebx
f011f47c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f483:	10 00 00 
f011f486:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f48b:	0f b6 c0             	movzbl %al,%eax
f011f48e:	c1 e0 04             	shl    $0x4,%eax
f011f491:	89 c2                	mov    %eax,%edx
f011f493:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f499:	01 d0                	add    %edx,%eax
f011f49b:	48                   	dec    %eax
f011f49c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f4a2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f4a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ad:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f4b3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f4b9:	29 d0                	sub    %edx,%eax
f011f4bb:	01 c3                	add    %eax,%ebx
f011f4bd:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011f4c4:	10 00 00 
f011f4c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f4cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4d2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011f4d8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f4de:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4e3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011f4e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f4ef:	29 d0                	sub    %edx,%eax
f011f4f1:	01 d8                	add    %ebx,%eax
f011f4f3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011f4f8:	39 c1                	cmp    %eax,%ecx
f011f4fa:	74 17                	je     f011f513 <test_kfreeall+0x97a>
f011f4fc:	83 ec 04             	sub    $0x4,%esp
f011f4ff:	68 a4 00 13 f0       	push   $0xf01300a4
f011f504:	68 d8 09 00 00       	push   $0x9d8
f011f509:	68 be ff 12 f0       	push   $0xf012ffbe
f011f50e:	e8 93 0c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f513:	e8 8c 3f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f518:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f51b:	74 17                	je     f011f534 <test_kfreeall+0x99b>
f011f51d:	83 ec 04             	sub    $0x4,%esp
f011f520:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f525:	68 d9 09 00 00       	push   $0x9d9
f011f52a:	68 be ff 12 f0       	push   $0xf012ffbe
f011f52f:	e8 72 0c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f534:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f537:	e8 74 c0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f53c:	29 c3                	sub    %eax,%ebx
f011f53e:	89 d8                	mov    %ebx,%eax
f011f540:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f545:	74 17                	je     f011f55e <test_kfreeall+0x9c5>
f011f547:	83 ec 04             	sub    $0x4,%esp
f011f54a:	68 40 00 13 f0       	push   $0xf0130040
f011f54f:	68 da 09 00 00       	push   $0x9da
f011f554:	68 be ff 12 f0       	push   $0xf012ffbe
f011f559:	e8 48 0c fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011f55e:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011f565:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011f568:	e8 43 c0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f56d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f570:	e8 2f 3f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f575:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011f578:	83 ec 0c             	sub    $0xc,%esp
f011f57b:	68 00 38 00 00       	push   $0x3800
f011f580:	e8 6f 76 fe ff       	call   f0106bf4 <kmalloc>
f011f585:	83 c4 10             	add    $0x10,%esp
f011f588:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f58e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011f594:	89 c1                	mov    %eax,%ecx
f011f596:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011f59d:	10 00 00 
f011f5a0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f5a5:	0f b6 d0             	movzbl %al,%edx
f011f5a8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f5ae:	01 d0                	add    %edx,%eax
f011f5b0:	48                   	dec    %eax
f011f5b1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011f5b7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f5bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5c2:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011f5c8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f5ce:	29 d0                	sub    %edx,%eax
f011f5d0:	89 c3                	mov    %eax,%ebx
f011f5d2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011f5d9:	10 00 00 
f011f5dc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011f5e1:	0f b6 c0             	movzbl %al,%eax
f011f5e4:	c1 e0 04             	shl    $0x4,%eax
f011f5e7:	89 c2                	mov    %eax,%edx
f011f5e9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f5ef:	01 d0                	add    %edx,%eax
f011f5f1:	48                   	dec    %eax
f011f5f2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011f5f8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f5fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011f603:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011f609:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f60f:	29 d0                	sub    %edx,%eax
f011f611:	01 c3                	add    %eax,%ebx
f011f613:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011f61a:	10 00 00 
f011f61d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f623:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f628:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011f62e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f634:	ba 00 00 00 00       	mov    $0x0,%edx
f011f639:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011f63f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f645:	29 d0                	sub    %edx,%eax
f011f647:	01 d8                	add    %ebx,%eax
f011f649:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011f64e:	39 c1                	cmp    %eax,%ecx
f011f650:	74 17                	je     f011f669 <test_kfreeall+0xad0>
f011f652:	83 ec 04             	sub    $0x4,%esp
f011f655:	68 a4 00 13 f0       	push   $0xf01300a4
f011f65a:	68 e1 09 00 00       	push   $0x9e1
f011f65f:	68 be ff 12 f0       	push   $0xf012ffbe
f011f664:	e8 3d 0b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f669:	e8 36 3e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f66e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f671:	74 17                	je     f011f68a <test_kfreeall+0xaf1>
f011f673:	83 ec 04             	sub    $0x4,%esp
f011f676:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f67b:	68 e2 09 00 00       	push   $0x9e2
f011f680:	68 be ff 12 f0       	push   $0xf012ffbe
f011f685:	e8 1c 0b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f68a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f68d:	e8 1e bf fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f692:	29 c3                	sub    %eax,%ebx
f011f694:	89 d8                	mov    %ebx,%eax
f011f696:	83 f8 04             	cmp    $0x4,%eax
f011f699:	74 17                	je     f011f6b2 <test_kfreeall+0xb19>
f011f69b:	83 ec 04             	sub    $0x4,%esp
f011f69e:	68 40 00 13 f0       	push   $0xf0130040
f011f6a3:	68 e3 09 00 00       	push   $0x9e3
f011f6a8:	68 be ff 12 f0       	push   $0xf012ffbe
f011f6ad:	e8 f4 0a fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011f6b2:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011f6b9:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011f6bc:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011f6c2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011f6c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f6cc:	eb 0e                	jmp    f011f6dc <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f011f6ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f6d1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f6d4:	01 d0                	add    %edx,%eax
f011f6d6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011f6d9:	ff 45 f4             	incl   -0xc(%ebp)
f011f6dc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f6e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f6e5:	7f e7                	jg     f011f6ce <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011f6e7:	e8 c4 be fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f6ec:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011f6f2:	e8 ad 3d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f6f7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f011f6fd:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f703:	83 ec 0c             	sub    $0xc,%esp
f011f706:	50                   	push   %eax
f011f707:	e8 02 75 fe ff       	call   f0106c0e <kfree>
f011f70c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f70f:	e8 90 3d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f714:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011f71a:	74 17                	je     f011f733 <test_kfreeall+0xb9a>
f011f71c:	83 ec 04             	sub    $0x4,%esp
f011f71f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f724:	68 f2 09 00 00       	push   $0x9f2
f011f729:	68 be ff 12 f0       	push   $0xf012ffbe
f011f72e:	e8 73 0a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011f733:	e8 78 be fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f738:	89 c2                	mov    %eax,%edx
f011f73a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f740:	29 c2                	sub    %eax,%edx
f011f742:	89 d0                	mov    %edx,%eax
f011f744:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f749:	74 17                	je     f011f762 <test_kfreeall+0xbc9>
f011f74b:	83 ec 04             	sub    $0x4,%esp
f011f74e:	68 48 07 13 f0       	push   $0xf0130748
f011f753:	68 f3 09 00 00       	push   $0x9f3
f011f758:	68 be ff 12 f0       	push   $0xf012ffbe
f011f75d:	e8 44 0a fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f762:	e8 49 be fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f767:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f76d:	e8 32 3d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f772:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f011f778:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f77e:	83 ec 0c             	sub    $0xc,%esp
f011f781:	50                   	push   %eax
f011f782:	e8 87 74 fe ff       	call   f0106c0e <kfree>
f011f787:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f78a:	e8 15 3d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f78f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011f795:	74 17                	je     f011f7ae <test_kfreeall+0xc15>
f011f797:	83 ec 04             	sub    $0x4,%esp
f011f79a:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f79f:	68 f9 09 00 00       	push   $0x9f9
f011f7a4:	68 be ff 12 f0       	push   $0xf012ffbe
f011f7a9:	e8 f8 09 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011f7ae:	e8 fd bd fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f7b3:	89 c2                	mov    %eax,%edx
f011f7b5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f7bb:	29 c2                	sub    %eax,%edx
f011f7bd:	89 d0                	mov    %edx,%eax
f011f7bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f7c4:	74 17                	je     f011f7dd <test_kfreeall+0xc44>
f011f7c6:	83 ec 04             	sub    $0x4,%esp
f011f7c9:	68 48 07 13 f0       	push   $0xf0130748
f011f7ce:	68 fa 09 00 00       	push   $0x9fa
f011f7d3:	68 be ff 12 f0       	push   $0xf012ffbe
f011f7d8:	e8 c9 09 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011f7dd:	e8 ce bd fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f7e2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f7e8:	e8 b7 3c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f7ed:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f011f7f3:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011f7f9:	83 ec 0c             	sub    $0xc,%esp
f011f7fc:	50                   	push   %eax
f011f7fd:	e8 0c 74 fe ff       	call   f0106c0e <kfree>
f011f802:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f805:	e8 9a 3c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011f80a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011f810:	74 17                	je     f011f829 <test_kfreeall+0xc90>
f011f812:	83 ec 04             	sub    $0x4,%esp
f011f815:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011f81a:	68 00 0a 00 00       	push   $0xa00
f011f81f:	68 be ff 12 f0       	push   $0xf012ffbe
f011f824:	e8 7d 09 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011f829:	e8 82 bd fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011f82e:	89 c2                	mov    %eax,%edx
f011f830:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f836:	29 c2                	sub    %eax,%edx
f011f838:	89 d0                	mov    %edx,%eax
f011f83a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f83f:	74 17                	je     f011f858 <test_kfreeall+0xcbf>
f011f841:	83 ec 04             	sub    $0x4,%esp
f011f844:	68 48 07 13 f0       	push   $0xf0130748
f011f849:	68 01 0a 00 00       	push   $0xa01
f011f84e:	68 be ff 12 f0       	push   $0xf012ffbe
f011f853:	e8 4e 09 fe ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f011f858:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f85e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f861:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f868:	eb 1e                	jmp    f011f888 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f011f86a:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f011f870:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011f873:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f876:	01 c8                	add    %ecx,%eax
f011f878:	8a 00                	mov    (%eax),%al
f011f87a:	0f be c0             	movsbl %al,%eax
f011f87d:	01 d0                	add    %edx,%eax
f011f87f:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f885:	ff 45 f4             	incl   -0xc(%ebp)
f011f888:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f88e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f891:	7f d7                	jg     f011f86a <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f011f893:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f011f899:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f89f:	01 c0                	add    %eax,%eax
f011f8a1:	39 c2                	cmp    %eax,%edx
f011f8a3:	74 17                	je     f011f8bc <test_kfreeall+0xd23>
f011f8a5:	83 ec 04             	sub    $0x4,%esp
f011f8a8:	68 a4 07 13 f0       	push   $0xf01307a4
f011f8ad:	68 0d 0a 00 00       	push   $0xa0d
f011f8b2:	68 be ff 12 f0       	push   $0xf012ffbe
f011f8b7:	e8 ea 08 fe ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f011f8bc:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011f8c2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f8c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f8cc:	eb 1e                	jmp    f011f8ec <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f011f8ce:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f011f8d4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011f8d7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f8da:	01 c8                	add    %ecx,%eax
f011f8dc:	8a 00                	mov    (%eax),%al
f011f8de:	0f be c0             	movsbl %al,%eax
f011f8e1:	01 d0                	add    %edx,%eax
f011f8e3:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f8e9:	ff 45 f4             	incl   -0xc(%ebp)
f011f8ec:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f8f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f8f5:	7f d7                	jg     f011f8ce <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011f8f7:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f011f8fd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f903:	89 c1                	mov    %eax,%ecx
f011f905:	01 c9                	add    %ecx,%ecx
f011f907:	01 c8                	add    %ecx,%eax
f011f909:	39 c2                	cmp    %eax,%edx
f011f90b:	74 17                	je     f011f924 <test_kfreeall+0xd8b>
f011f90d:	83 ec 04             	sub    $0x4,%esp
f011f910:	68 a4 07 13 f0       	push   $0xf01307a4
f011f915:	68 15 0a 00 00       	push   $0xa15
f011f91a:	68 be ff 12 f0       	push   $0xf012ffbe
f011f91f:	e8 82 08 fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011f924:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011f92a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f92d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f934:	eb 1e                	jmp    f011f954 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f011f936:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f011f93c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011f93f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f942:	01 c8                	add    %ecx,%eax
f011f944:	8a 00                	mov    (%eax),%al
f011f946:	0f be c0             	movsbl %al,%eax
f011f949:	01 d0                	add    %edx,%eax
f011f94b:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f951:	ff 45 f4             	incl   -0xc(%ebp)
f011f954:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f95a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f95d:	7f d7                	jg     f011f936 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011f95f:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011f965:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f011f96b:	c1 e2 02             	shl    $0x2,%edx
f011f96e:	39 d0                	cmp    %edx,%eax
f011f970:	74 17                	je     f011f989 <test_kfreeall+0xdf0>
f011f972:	83 ec 04             	sub    $0x4,%esp
f011f975:	68 a4 07 13 f0       	push   $0xf01307a4
f011f97a:	68 1d 0a 00 00       	push   $0xa1d
f011f97f:	68 be ff 12 f0       	push   $0xf012ffbe
f011f984:	e8 1d 08 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011f989:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011f98f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011f992:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f999:	eb 1e                	jmp    f011f9b9 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f011f99b:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f011f9a1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011f9a4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f9a7:	01 c8                	add    %ecx,%eax
f011f9a9:	8a 00                	mov    (%eax),%al
f011f9ab:	0f be c0             	movsbl %al,%eax
f011f9ae:	01 d0                	add    %edx,%eax
f011f9b0:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011f9b6:	ff 45 f4             	incl   -0xc(%ebp)
f011f9b9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f9bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f9c2:	7f d7                	jg     f011f99b <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011f9c4:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f011f9ca:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f011f9d0:	89 d0                	mov    %edx,%eax
f011f9d2:	c1 e0 02             	shl    $0x2,%eax
f011f9d5:	01 d0                	add    %edx,%eax
f011f9d7:	39 c1                	cmp    %eax,%ecx
f011f9d9:	74 17                	je     f011f9f2 <test_kfreeall+0xe59>
f011f9db:	83 ec 04             	sub    $0x4,%esp
f011f9de:	68 a4 07 13 f0       	push   $0xf01307a4
f011f9e3:	68 25 0a 00 00       	push   $0xa25
f011f9e8:	68 be ff 12 f0       	push   $0xf012ffbe
f011f9ed:	e8 b4 07 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011f9f2:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011f9f8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011f9fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fa02:	eb 1e                	jmp    f011fa22 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f011fa04:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f011fa0a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fa0d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fa10:	01 c8                	add    %ecx,%eax
f011fa12:	8a 00                	mov    (%eax),%al
f011fa14:	0f be c0             	movsbl %al,%eax
f011fa17:	01 d0                	add    %edx,%eax
f011fa19:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fa1f:	ff 45 f4             	incl   -0xc(%ebp)
f011fa22:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fa28:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fa2b:	7f d7                	jg     f011fa04 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011fa2d:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f011fa33:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f011fa39:	89 d0                	mov    %edx,%eax
f011fa3b:	01 c0                	add    %eax,%eax
f011fa3d:	01 d0                	add    %edx,%eax
f011fa3f:	01 c0                	add    %eax,%eax
f011fa41:	01 d0                	add    %edx,%eax
f011fa43:	39 c1                	cmp    %eax,%ecx
f011fa45:	74 17                	je     f011fa5e <test_kfreeall+0xec5>
f011fa47:	83 ec 04             	sub    $0x4,%esp
f011fa4a:	68 a4 07 13 f0       	push   $0xf01307a4
f011fa4f:	68 2d 0a 00 00       	push   $0xa2d
f011fa54:	68 be ff 12 f0       	push   $0xf012ffbe
f011fa59:	e8 48 07 fe ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011fa5e:	e8 4d bb fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011fa63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa66:	e8 39 3a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011fa6b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011fa6e:	83 ec 0c             	sub    $0xc,%esp
f011fa71:	68 00 50 00 00       	push   $0x5000
f011fa76:	e8 79 71 fe ff       	call   f0106bf4 <kmalloc>
f011fa7b:	83 c4 10             	add    $0x10,%esp
f011fa7e:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fa84:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011fa8a:	89 c1                	mov    %eax,%ecx
f011fa8c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011fa93:	10 00 00 
f011fa96:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011fa9b:	0f b6 d0             	movzbl %al,%edx
f011fa9e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011faa4:	01 d0                	add    %edx,%eax
f011faa6:	48                   	dec    %eax
f011faa7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011faad:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fab3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fab8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011fabe:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fac4:	29 d0                	sub    %edx,%eax
f011fac6:	89 c3                	mov    %eax,%ebx
f011fac8:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011facf:	10 00 00 
f011fad2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011fad7:	0f b6 c0             	movzbl %al,%eax
f011fada:	c1 e0 04             	shl    $0x4,%eax
f011fadd:	89 c2                	mov    %eax,%edx
f011fadf:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011fae5:	01 d0                	add    %edx,%eax
f011fae7:	48                   	dec    %eax
f011fae8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011faee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011faf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011faf9:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011faff:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fb05:	29 d0                	sub    %edx,%eax
f011fb07:	01 c3                	add    %eax,%ebx
f011fb09:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011fb10:	10 00 00 
f011fb13:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fb19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb1e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011fb24:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fb2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb2f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011fb35:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fb3b:	29 d0                	sub    %edx,%eax
f011fb3d:	01 d8                	add    %ebx,%eax
f011fb3f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011fb44:	39 c1                	cmp    %eax,%ecx
f011fb46:	74 17                	je     f011fb5f <test_kfreeall+0xfc6>
f011fb48:	83 ec 04             	sub    $0x4,%esp
f011fb4b:	68 a4 00 13 f0       	push   $0xf01300a4
f011fb50:	68 36 0a 00 00       	push   $0xa36
f011fb55:	68 be ff 12 f0       	push   $0xf012ffbe
f011fb5a:	e8 47 06 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb5f:	e8 40 39 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011fb64:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fb67:	74 17                	je     f011fb80 <test_kfreeall+0xfe7>
f011fb69:	83 ec 04             	sub    $0x4,%esp
f011fb6c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011fb71:	68 37 0a 00 00       	push   $0xa37
f011fb76:	68 be ff 12 f0       	push   $0xf012ffbe
f011fb7b:	e8 26 06 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fb80:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fb83:	e8 28 ba fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011fb88:	29 c3                	sub    %eax,%ebx
f011fb8a:	89 d8                	mov    %ebx,%eax
f011fb8c:	83 f8 05             	cmp    $0x5,%eax
f011fb8f:	74 17                	je     f011fba8 <test_kfreeall+0x100f>
f011fb91:	83 ec 04             	sub    $0x4,%esp
f011fb94:	68 40 00 13 f0       	push   $0xf0130040
f011fb99:	68 38 0a 00 00       	push   $0xa38
f011fb9e:	68 be ff 12 f0       	push   $0xf012ffbe
f011fba3:	e8 fe 05 fe ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011fba8:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f011fbaf:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011fbb2:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f011fbb8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011fbbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fbc2:	eb 0e                	jmp    f011fbd2 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f011fbc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fbc7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fbca:	01 d0                	add    %edx,%eax
f011fbcc:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011fbcf:	ff 45 f4             	incl   -0xc(%ebp)
f011fbd2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011fbd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fbdb:	7f e7                	jg     f011fbc4 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011fbdd:	e8 ce b9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011fbe2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fbe5:	e8 ba 38 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011fbea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011fbed:	83 ec 0c             	sub    $0xc,%esp
f011fbf0:	68 00 00 10 00       	push   $0x100000
f011fbf5:	e8 fa 6f fe ff       	call   f0106bf4 <kmalloc>
f011fbfa:	83 c4 10             	add    $0x10,%esp
f011fbfd:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc03:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011fc09:	89 c1                	mov    %eax,%ecx
f011fc0b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011fc12:	10 00 00 
f011fc15:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011fc1a:	0f b6 d0             	movzbl %al,%edx
f011fc1d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fc23:	01 d0                	add    %edx,%eax
f011fc25:	48                   	dec    %eax
f011fc26:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011fc2c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011fc32:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc37:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011fc3d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011fc43:	29 d0                	sub    %edx,%eax
f011fc45:	89 c3                	mov    %eax,%ebx
f011fc47:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011fc4e:	10 00 00 
f011fc51:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011fc56:	0f b6 c0             	movzbl %al,%eax
f011fc59:	c1 e0 04             	shl    $0x4,%eax
f011fc5c:	89 c2                	mov    %eax,%edx
f011fc5e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fc64:	01 d0                	add    %edx,%eax
f011fc66:	48                   	dec    %eax
f011fc67:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011fc6d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fc73:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc78:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011fc7e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fc84:	29 d0                	sub    %edx,%eax
f011fc86:	01 c3                	add    %eax,%ebx
f011fc88:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011fc8f:	10 00 00 
f011fc92:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fc98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc9d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011fca3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fca9:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcae:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011fcb4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fcba:	29 d0                	sub    %edx,%eax
f011fcbc:	01 d8                	add    %ebx,%eax
f011fcbe:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f011fcc3:	39 c1                	cmp    %eax,%ecx
f011fcc5:	74 17                	je     f011fcde <test_kfreeall+0x1145>
f011fcc7:	83 ec 04             	sub    $0x4,%esp
f011fcca:	68 a4 00 13 f0       	push   $0xf01300a4
f011fccf:	68 44 0a 00 00       	push   $0xa44
f011fcd4:	68 be ff 12 f0       	push   $0xf012ffbe
f011fcd9:	e8 c8 04 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcde:	e8 c1 37 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011fce3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fce6:	74 17                	je     f011fcff <test_kfreeall+0x1166>
f011fce8:	83 ec 04             	sub    $0x4,%esp
f011fceb:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011fcf0:	68 45 0a 00 00       	push   $0xa45
f011fcf5:	68 be ff 12 f0       	push   $0xf012ffbe
f011fcfa:	e8 a7 04 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fcff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd02:	e8 a9 b8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011fd07:	29 c3                	sub    %eax,%ebx
f011fd09:	89 d8                	mov    %ebx,%eax
f011fd0b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011fd10:	74 17                	je     f011fd29 <test_kfreeall+0x1190>
f011fd12:	83 ec 04             	sub    $0x4,%esp
f011fd15:	68 40 00 13 f0       	push   $0xf0130040
f011fd1a:	68 46 0a 00 00       	push   $0xa46
f011fd1f:	68 be ff 12 f0       	push   $0xf012ffbe
f011fd24:	e8 7d 04 fe ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011fd29:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f011fd30:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f011fd33:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f011fd39:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011fd3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd43:	eb 0e                	jmp    f011fd53 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f011fd45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd48:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd4b:	01 d0                	add    %edx,%eax
f011fd4d:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011fd50:	ff 45 f4             	incl   -0xc(%ebp)
f011fd53:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fd59:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd5c:	7f e7                	jg     f011fd45 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f011fd5e:	e8 4d b8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011fd63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd66:	e8 39 37 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011fd6b:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f011fd6e:	e8 e9 6e fe ff       	call   f0106c5c <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd73:	e8 2c 37 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011fd78:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd7b:	74 17                	je     f011fd94 <test_kfreeall+0x11fb>
f011fd7d:	83 ec 04             	sub    $0x4,%esp
f011fd80:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011fd85:	68 56 0a 00 00       	push   $0xa56
f011fd8a:	68 be ff 12 f0       	push   $0xf012ffbe
f011fd8f:	e8 12 04 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f011fd94:	e8 17 b8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011fd99:	89 c2                	mov    %eax,%edx
f011fd9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011fd9e:	89 d1                	mov    %edx,%ecx
f011fda0:	29 c1                	sub    %eax,%ecx
f011fda2:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011fda9:	10 00 00 
f011fdac:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011fdb1:	0f b6 d0             	movzbl %al,%edx
f011fdb4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fdba:	01 d0                	add    %edx,%eax
f011fdbc:	48                   	dec    %eax
f011fdbd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011fdc3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fdc9:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdce:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011fdd4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fdda:	29 d0                	sub    %edx,%eax
f011fddc:	89 c3                	mov    %eax,%ebx
f011fdde:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011fde5:	10 00 00 
f011fde8:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f011fded:	0f b6 c0             	movzbl %al,%eax
f011fdf0:	c1 e0 04             	shl    $0x4,%eax
f011fdf3:	89 c2                	mov    %eax,%edx
f011fdf5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fdfb:	01 d0                	add    %edx,%eax
f011fdfd:	48                   	dec    %eax
f011fdfe:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011fe04:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fe0a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe0f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011fe15:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fe1b:	29 d0                	sub    %edx,%eax
f011fe1d:	01 c3                	add    %eax,%ebx
f011fe1f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011fe26:	10 00 00 
f011fe29:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fe2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe34:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011fe3a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fe40:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe45:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011fe4b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fe51:	29 d0                	sub    %edx,%eax
f011fe53:	01 d8                	add    %ebx,%eax
f011fe55:	05 00 40 00 00       	add    $0x4000,%eax
f011fe5a:	c1 e8 0c             	shr    $0xc,%eax
f011fe5d:	05 0d 04 00 00       	add    $0x40d,%eax
f011fe62:	39 c1                	cmp    %eax,%ecx
f011fe64:	74 17                	je     f011fe7d <test_kfreeall+0x12e4>
f011fe66:	83 ec 04             	sub    $0x4,%esp
f011fe69:	68 48 07 13 f0       	push   $0xf0130748
f011fe6e:	68 57 0a 00 00       	push   $0xa57
f011fe73:	68 be ff 12 f0       	push   $0xf012ffbe
f011fe78:	e8 29 03 fe ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011fe7d:	83 ec 0c             	sub    $0xc,%esp
f011fe80:	6a 03                	push   $0x3
f011fe82:	e8 d2 bb fe ff       	call   f010ba59 <sys_bypassPageFault>
f011fe87:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f011fe8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe91:	e9 82 00 00 00       	jmp    f011ff18 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f011fe96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fe99:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f011fea0:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f011fea3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fea6:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011fea9:	e8 99 bb fe ff       	call   f010ba47 <sys_rcr2>
f011feae:	89 c2                	mov    %eax,%edx
f011feb0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011feb3:	39 c2                	cmp    %eax,%edx
f011feb5:	74 17                	je     f011fece <test_kfreeall+0x1335>
f011feb7:	83 ec 04             	sub    $0x4,%esp
f011feba:	68 24 08 13 f0       	push   $0xf0130824
f011febf:	68 65 0a 00 00       	push   $0xa65
f011fec4:	68 be ff 12 f0       	push   $0xf012ffbe
f011fec9:	e8 d8 02 fe ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f011fece:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fed1:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f011fed8:	89 c2                	mov    %eax,%edx
f011feda:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fedd:	01 d0                	add    %edx,%eax
f011fedf:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011fee2:	e8 60 bb fe ff       	call   f010ba47 <sys_rcr2>
f011fee7:	89 c2                	mov    %eax,%edx
f011fee9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011feec:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f011fef3:	89 c1                	mov    %eax,%ecx
f011fef5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fef8:	01 c8                	add    %ecx,%eax
f011fefa:	39 c2                	cmp    %eax,%edx
f011fefc:	74 17                	je     f011ff15 <test_kfreeall+0x137c>
f011fefe:	83 ec 04             	sub    $0x4,%esp
f011ff01:	68 24 08 13 f0       	push   $0xf0130824
f011ff06:	68 67 0a 00 00       	push   $0xa67
f011ff0b:	68 be ff 12 f0       	push   $0xf012ffbe
f011ff10:	e8 91 02 fe ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011ff15:	ff 45 f4             	incl   -0xc(%ebp)
f011ff18:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011ff1c:	0f 8e 74 ff ff ff    	jle    f011fe96 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011ff22:	83 ec 0c             	sub    $0xc,%esp
f011ff25:	6a 00                	push   $0x0
f011ff27:	e8 2d bb fe ff       	call   f010ba59 <sys_bypassPageFault>
f011ff2c:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff2f:	e8 7c b6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ff34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff37:	e8 68 35 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ff3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f011ff3f:	83 ec 0c             	sub    $0xc,%esp
f011ff42:	68 00 00 40 00       	push   $0x400000
f011ff47:	e8 a8 6c fe ff       	call   f0106bf4 <kmalloc>
f011ff4c:	83 c4 10             	add    $0x10,%esp
f011ff4f:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f011ff55:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011ff5b:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f011ff60:	74 17                	je     f011ff79 <test_kfreeall+0x13e0>
f011ff62:	83 ec 04             	sub    $0x4,%esp
f011ff65:	68 84 0c 13 f0       	push   $0xf0130c84
f011ff6a:	68 73 0a 00 00       	push   $0xa73
f011ff6f:	68 be ff 12 f0       	push   $0xf012ffbe
f011ff74:	e8 2d 02 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff79:	e8 26 35 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ff7e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff81:	74 17                	je     f011ff9a <test_kfreeall+0x1401>
f011ff83:	83 ec 04             	sub    $0x4,%esp
f011ff86:	68 d8 ff 12 f0       	push   $0xf012ffd8
f011ff8b:	68 74 0a 00 00       	push   $0xa74
f011ff90:	68 be ff 12 f0       	push   $0xf012ffbe
f011ff95:	e8 0c 02 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff9a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff9d:	e8 0e b6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ffa2:	29 c3                	sub    %eax,%ebx
f011ffa4:	89 d8                	mov    %ebx,%eax
f011ffa6:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ffab:	74 17                	je     f011ffc4 <test_kfreeall+0x142b>
f011ffad:	83 ec 04             	sub    $0x4,%esp
f011ffb0:	68 40 00 13 f0       	push   $0xf0130040
f011ffb5:	68 75 0a 00 00       	push   $0xa75
f011ffba:	68 be ff 12 f0       	push   $0xf012ffbe
f011ffbf:	e8 e2 01 fe ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f011ffc4:	e8 e7 b5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f011ffc9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ffcc:	e8 d3 34 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f011ffd1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f011ffd4:	83 ec 0c             	sub    $0xc,%esp
f011ffd7:	68 00 30 00 00       	push   $0x3000
f011ffdc:	e8 13 6c fe ff       	call   f0106bf4 <kmalloc>
f011ffe1:	83 c4 10             	add    $0x10,%esp
f011ffe4:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f011ffea:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fff0:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f011fff5:	74 17                	je     f012000e <test_kfreeall+0x1475>
f011fff7:	83 ec 04             	sub    $0x4,%esp
f011fffa:	68 84 0c 13 f0       	push   $0xf0130c84
f011ffff:	68 7b 0a 00 00       	push   $0xa7b
f0120004:	68 be ff 12 f0       	push   $0xf012ffbe
f0120009:	e8 98 01 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012000e:	e8 91 34 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120013:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120016:	74 17                	je     f012002f <test_kfreeall+0x1496>
f0120018:	83 ec 04             	sub    $0x4,%esp
f012001b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120020:	68 7c 0a 00 00       	push   $0xa7c
f0120025:	68 be ff 12 f0       	push   $0xf012ffbe
f012002a:	e8 77 01 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f012002f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120032:	e8 79 b5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120037:	29 c3                	sub    %eax,%ebx
f0120039:	89 d8                	mov    %ebx,%eax
f012003b:	83 f8 03             	cmp    $0x3,%eax
f012003e:	74 17                	je     f0120057 <test_kfreeall+0x14be>
f0120040:	83 ec 04             	sub    $0x4,%esp
f0120043:	68 40 00 13 f0       	push   $0xf0130040
f0120048:	68 7d 0a 00 00       	push   $0xa7d
f012004d:	68 be ff 12 f0       	push   $0xf012ffbe
f0120052:	e8 4f 01 fe ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0120057:	e8 54 b5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012005c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012005f:	e8 40 34 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120064:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0120067:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012006d:	83 ec 0c             	sub    $0xc,%esp
f0120070:	50                   	push   %eax
f0120071:	e8 98 6b fe ff       	call   f0106c0e <kfree>
f0120076:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120079:	e8 26 34 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012007e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120081:	74 17                	je     f012009a <test_kfreeall+0x1501>
f0120083:	83 ec 04             	sub    $0x4,%esp
f0120086:	68 d8 ff 12 f0       	push   $0xf012ffd8
f012008b:	68 87 0a 00 00       	push   $0xa87
f0120090:	68 be ff 12 f0       	push   $0xf012ffbe
f0120095:	e8 0c 01 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012009a:	e8 11 b5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012009f:	89 c2                	mov    %eax,%edx
f01200a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01200a4:	29 c2                	sub    %eax,%edx
f01200a6:	89 d0                	mov    %edx,%eax
f01200a8:	83 f8 03             	cmp    $0x3,%eax
f01200ab:	74 17                	je     f01200c4 <test_kfreeall+0x152b>
f01200ad:	83 ec 04             	sub    $0x4,%esp
f01200b0:	68 70 08 13 f0       	push   $0xf0130870
f01200b5:	68 88 0a 00 00       	push   $0xa88
f01200ba:	68 be ff 12 f0       	push   $0xf012ffbe
f01200bf:	e8 e2 00 fe ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01200c4:	e8 e7 b4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01200c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200cc:	e8 d3 33 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01200d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01200d4:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01200da:	83 ec 0c             	sub    $0xc,%esp
f01200dd:	50                   	push   %eax
f01200de:	e8 2b 6b fe ff       	call   f0106c0e <kfree>
f01200e3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200e6:	e8 b9 33 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01200eb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01200ee:	74 17                	je     f0120107 <test_kfreeall+0x156e>
f01200f0:	83 ec 04             	sub    $0x4,%esp
f01200f3:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01200f8:	68 91 0a 00 00       	push   $0xa91
f01200fd:	68 be ff 12 f0       	push   $0xf012ffbe
f0120102:	e8 9f 00 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120107:	e8 a4 b4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012010c:	89 c2                	mov    %eax,%edx
f012010e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120111:	39 c2                	cmp    %eax,%edx
f0120113:	74 17                	je     f012012c <test_kfreeall+0x1593>
f0120115:	83 ec 04             	sub    $0x4,%esp
f0120118:	68 70 08 13 f0       	push   $0xf0130870
f012011d:	68 92 0a 00 00       	push   $0xa92
f0120122:	68 be ff 12 f0       	push   $0xf012ffbe
f0120127:	e8 7a 00 fe ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012012c:	e8 7f b4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120131:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120134:	e8 6b 33 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120139:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012013c:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120142:	83 ec 0c             	sub    $0xc,%esp
f0120145:	50                   	push   %eax
f0120146:	e8 c3 6a fe ff       	call   f0106c0e <kfree>
f012014b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012014e:	e8 51 33 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120153:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120156:	74 17                	je     f012016f <test_kfreeall+0x15d6>
f0120158:	83 ec 04             	sub    $0x4,%esp
f012015b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120160:	68 98 0a 00 00       	push   $0xa98
f0120165:	68 be ff 12 f0       	push   $0xf012ffbe
f012016a:	e8 37 00 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012016f:	e8 3c b4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120174:	89 c2                	mov    %eax,%edx
f0120176:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120179:	39 c2                	cmp    %eax,%edx
f012017b:	74 17                	je     f0120194 <test_kfreeall+0x15fb>
f012017d:	83 ec 04             	sub    $0x4,%esp
f0120180:	68 70 08 13 f0       	push   $0xf0130870
f0120185:	68 99 0a 00 00       	push   $0xa99
f012018a:	68 be ff 12 f0       	push   $0xf012ffbe
f012018f:	e8 12 00 fe ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120194:	e8 17 b4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120199:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012019c:	e8 03 33 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01201a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01201a4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01201aa:	83 ec 0c             	sub    $0xc,%esp
f01201ad:	50                   	push   %eax
f01201ae:	e8 5b 6a fe ff       	call   f0106c0e <kfree>
f01201b3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201b6:	e8 e9 32 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01201bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01201be:	74 17                	je     f01201d7 <test_kfreeall+0x163e>
f01201c0:	83 ec 04             	sub    $0x4,%esp
f01201c3:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01201c8:	68 9f 0a 00 00       	push   $0xa9f
f01201cd:	68 be ff 12 f0       	push   $0xf012ffbe
f01201d2:	e8 cf ff fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01201d7:	e8 d4 b3 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01201dc:	89 c2                	mov    %eax,%edx
f01201de:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01201e1:	39 c2                	cmp    %eax,%edx
f01201e3:	74 17                	je     f01201fc <test_kfreeall+0x1663>
f01201e5:	83 ec 04             	sub    $0x4,%esp
f01201e8:	68 70 08 13 f0       	push   $0xf0130870
f01201ed:	68 a0 0a 00 00       	push   $0xaa0
f01201f2:	68 be ff 12 f0       	push   $0xf012ffbe
f01201f7:	e8 aa ff fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01201fc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0120203:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012020a:	eb 48                	jmp    f0120254 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012020c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012020f:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0120214:	83 ec 04             	sub    $0x4,%esp
f0120217:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012021d:	51                   	push   %ecx
f012021e:	52                   	push   %edx
f012021f:	50                   	push   %eax
f0120220:	e8 5c 5f fe ff       	call   f0106181 <get_page_table>
f0120225:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0120228:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012022e:	85 c0                	test   %eax,%eax
f0120230:	75 17                	jne    f0120249 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0120232:	83 ec 04             	sub    $0x4,%esp
f0120235:	68 c0 08 13 f0       	push   $0xf01308c0
f012023a:	68 ad 0a 00 00       	push   $0xaad
f012023f:	68 be ff 12 f0       	push   $0xf012ffbe
f0120244:	e8 5d ff fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120249:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0120250:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0120254:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120258:	78 b2                	js     f012020c <test_kfreeall+0x1673>
f012025a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012025e:	7f 09                	jg     f0120269 <test_kfreeall+0x16d0>
f0120260:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0120267:	76 a3                	jbe    f012020c <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0120269:	83 ec 0c             	sub    $0xc,%esp
f012026c:	68 d8 0c 13 f0       	push   $0xf0130cd8
f0120271:	e8 b7 09 fe ff       	call   f0100c2d <cprintf>
f0120276:	83 c4 10             	add    $0x10,%esp

	return 1;
f0120279:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012027e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120281:	5b                   	pop    %ebx
f0120282:	5f                   	pop    %edi
f0120283:	5d                   	pop    %ebp
f0120284:	c3                   	ret    

f0120285 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0120285:	55                   	push   %ebp
f0120286:	89 e5                	mov    %esp,%ebp
f0120288:	57                   	push   %edi
f0120289:	53                   	push   %ebx
f012028a:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0120290:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0120294:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0120298:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012029e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01202a4:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01202ab:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01202b2:	e8 f9 b2 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01202b7:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01202ba:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01202c0:	b9 14 00 00 00       	mov    $0x14,%ecx
f01202c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01202ca:	89 d7                	mov    %edx,%edi
f01202cc:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01202ce:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01202d4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01202d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01202de:	89 d7                	mov    %edx,%edi
f01202e0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01202e2:	e8 c9 b2 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01202e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202ea:	e8 b5 31 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01202ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01202f2:	83 ec 0c             	sub    $0xc,%esp
f01202f5:	68 00 fc 1f 00       	push   $0x1ffc00
f01202fa:	e8 f5 68 fe ff       	call   f0106bf4 <kmalloc>
f01202ff:	83 c4 10             	add    $0x10,%esp
f0120302:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120308:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012030e:	89 c1                	mov    %eax,%ecx
f0120310:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0120317:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012031c:	0f b6 d0             	movzbl %al,%edx
f012031f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120322:	01 d0                	add    %edx,%eax
f0120324:	48                   	dec    %eax
f0120325:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0120328:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012032b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120330:	f7 75 d4             	divl   -0x2c(%ebp)
f0120333:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120336:	29 d0                	sub    %edx,%eax
f0120338:	89 c3                	mov    %eax,%ebx
f012033a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0120341:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120346:	0f b6 c0             	movzbl %al,%eax
f0120349:	c1 e0 04             	shl    $0x4,%eax
f012034c:	89 c2                	mov    %eax,%edx
f012034e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0120351:	01 d0                	add    %edx,%eax
f0120353:	48                   	dec    %eax
f0120354:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0120357:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012035a:	ba 00 00 00 00       	mov    $0x0,%edx
f012035f:	f7 75 cc             	divl   -0x34(%ebp)
f0120362:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0120365:	29 d0                	sub    %edx,%eax
f0120367:	01 c3                	add    %eax,%ebx
f0120369:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0120370:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120373:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120378:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012037b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012037e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120383:	f7 75 c4             	divl   -0x3c(%ebp)
f0120386:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0120389:	29 d0                	sub    %edx,%eax
f012038b:	01 d8                	add    %ebx,%eax
f012038d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120392:	39 c1                	cmp    %eax,%ecx
f0120394:	74 17                	je     f01203ad <test_kexpand+0x128>
f0120396:	83 ec 04             	sub    $0x4,%esp
f0120399:	68 a4 00 13 f0       	push   $0xf01300a4
f012039e:	68 d8 0a 00 00       	push   $0xad8
f01203a3:	68 be ff 12 f0       	push   $0xf012ffbe
f01203a8:	e8 f9 fd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203ad:	e8 f2 30 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01203b2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01203b5:	74 17                	je     f01203ce <test_kexpand+0x149>
f01203b7:	83 ec 04             	sub    $0x4,%esp
f01203ba:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01203bf:	68 d9 0a 00 00       	push   $0xad9
f01203c4:	68 be ff 12 f0       	push   $0xf012ffbe
f01203c9:	e8 d8 fd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01203ce:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01203d1:	e8 da b1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01203d6:	29 c3                	sub    %eax,%ebx
f01203d8:	89 d8                	mov    %ebx,%eax
f01203da:	3d 00 02 00 00       	cmp    $0x200,%eax
f01203df:	74 17                	je     f01203f8 <test_kexpand+0x173>
f01203e1:	83 ec 04             	sub    $0x4,%esp
f01203e4:	68 40 00 13 f0       	push   $0xf0130040
f01203e9:	68 da 0a 00 00       	push   $0xada
f01203ee:	68 be ff 12 f0       	push   $0xf012ffbe
f01203f3:	e8 ae fd fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01203f8:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f01203ff:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120402:	e8 a9 b1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120407:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012040a:	e8 95 30 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012040f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0120412:	83 ec 0c             	sub    $0xc,%esp
f0120415:	68 00 fc 1f 00       	push   $0x1ffc00
f012041a:	e8 d5 67 fe ff       	call   f0106bf4 <kmalloc>
f012041f:	83 c4 10             	add    $0x10,%esp
f0120422:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120428:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012042e:	89 c1                	mov    %eax,%ecx
f0120430:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0120437:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012043c:	0f b6 d0             	movzbl %al,%edx
f012043f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120442:	01 d0                	add    %edx,%eax
f0120444:	48                   	dec    %eax
f0120445:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0120448:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012044b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120450:	f7 75 bc             	divl   -0x44(%ebp)
f0120453:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0120456:	29 d0                	sub    %edx,%eax
f0120458:	89 c3                	mov    %eax,%ebx
f012045a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0120461:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120466:	0f b6 c0             	movzbl %al,%eax
f0120469:	c1 e0 04             	shl    $0x4,%eax
f012046c:	89 c2                	mov    %eax,%edx
f012046e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0120471:	01 d0                	add    %edx,%eax
f0120473:	48                   	dec    %eax
f0120474:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0120477:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012047a:	ba 00 00 00 00       	mov    $0x0,%edx
f012047f:	f7 75 b4             	divl   -0x4c(%ebp)
f0120482:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0120485:	29 d0                	sub    %edx,%eax
f0120487:	01 c3                	add    %eax,%ebx
f0120489:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0120490:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120493:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120498:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012049b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012049e:	ba 00 00 00 00       	mov    $0x0,%edx
f01204a3:	f7 75 ac             	divl   -0x54(%ebp)
f01204a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01204a9:	29 d0                	sub    %edx,%eax
f01204ab:	01 d8                	add    %ebx,%eax
f01204ad:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01204b2:	39 c1                	cmp    %eax,%ecx
f01204b4:	74 17                	je     f01204cd <test_kexpand+0x248>
f01204b6:	83 ec 04             	sub    $0x4,%esp
f01204b9:	68 a4 00 13 f0       	push   $0xf01300a4
f01204be:	68 e1 0a 00 00       	push   $0xae1
f01204c3:	68 be ff 12 f0       	push   $0xf012ffbe
f01204c8:	e8 d9 fc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01204cd:	e8 d2 2f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01204d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01204d5:	74 17                	je     f01204ee <test_kexpand+0x269>
f01204d7:	83 ec 04             	sub    $0x4,%esp
f01204da:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01204df:	68 e2 0a 00 00       	push   $0xae2
f01204e4:	68 be ff 12 f0       	push   $0xf012ffbe
f01204e9:	e8 b8 fc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01204ee:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01204f1:	e8 ba b0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01204f6:	29 c3                	sub    %eax,%ebx
f01204f8:	89 d8                	mov    %ebx,%eax
f01204fa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01204ff:	74 17                	je     f0120518 <test_kexpand+0x293>
f0120501:	83 ec 04             	sub    $0x4,%esp
f0120504:	68 40 00 13 f0       	push   $0xf0130040
f0120509:	68 e3 0a 00 00       	push   $0xae3
f012050e:	68 be ff 12 f0       	push   $0xf012ffbe
f0120513:	e8 8e fc fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0120518:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f012051f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120522:	e8 89 b0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120527:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012052a:	e8 75 2f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012052f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0120532:	83 ec 0c             	sub    $0xc,%esp
f0120535:	68 00 08 00 00       	push   $0x800
f012053a:	e8 b5 66 fe ff       	call   f0106bf4 <kmalloc>
f012053f:	83 c4 10             	add    $0x10,%esp
f0120542:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120548:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012054e:	89 c1                	mov    %eax,%ecx
f0120550:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0120557:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012055c:	0f b6 d0             	movzbl %al,%edx
f012055f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120562:	01 d0                	add    %edx,%eax
f0120564:	48                   	dec    %eax
f0120565:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0120568:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012056b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120570:	f7 75 a4             	divl   -0x5c(%ebp)
f0120573:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120576:	29 d0                	sub    %edx,%eax
f0120578:	89 c3                	mov    %eax,%ebx
f012057a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0120581:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120586:	0f b6 c0             	movzbl %al,%eax
f0120589:	c1 e0 04             	shl    $0x4,%eax
f012058c:	89 c2                	mov    %eax,%edx
f012058e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120591:	01 d0                	add    %edx,%eax
f0120593:	48                   	dec    %eax
f0120594:	89 45 98             	mov    %eax,-0x68(%ebp)
f0120597:	8b 45 98             	mov    -0x68(%ebp),%eax
f012059a:	ba 00 00 00 00       	mov    $0x0,%edx
f012059f:	f7 75 9c             	divl   -0x64(%ebp)
f01205a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01205a5:	29 d0                	sub    %edx,%eax
f01205a7:	01 c3                	add    %eax,%ebx
f01205a9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01205b0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01205b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01205b8:	89 45 90             	mov    %eax,-0x70(%ebp)
f01205bb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01205be:	ba 00 00 00 00       	mov    $0x0,%edx
f01205c3:	f7 75 94             	divl   -0x6c(%ebp)
f01205c6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01205c9:	29 d0                	sub    %edx,%eax
f01205cb:	01 d8                	add    %ebx,%eax
f01205cd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01205d2:	39 c1                	cmp    %eax,%ecx
f01205d4:	74 17                	je     f01205ed <test_kexpand+0x368>
f01205d6:	83 ec 04             	sub    $0x4,%esp
f01205d9:	68 a4 00 13 f0       	push   $0xf01300a4
f01205de:	68 ea 0a 00 00       	push   $0xaea
f01205e3:	68 be ff 12 f0       	push   $0xf012ffbe
f01205e8:	e8 b9 fb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205ed:	e8 b2 2e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01205f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01205f5:	74 17                	je     f012060e <test_kexpand+0x389>
f01205f7:	83 ec 04             	sub    $0x4,%esp
f01205fa:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01205ff:	68 eb 0a 00 00       	push   $0xaeb
f0120604:	68 be ff 12 f0       	push   $0xf012ffbe
f0120609:	e8 98 fb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012060e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120611:	e8 9a af fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120616:	29 c3                	sub    %eax,%ebx
f0120618:	89 d8                	mov    %ebx,%eax
f012061a:	83 f8 01             	cmp    $0x1,%eax
f012061d:	74 17                	je     f0120636 <test_kexpand+0x3b1>
f012061f:	83 ec 04             	sub    $0x4,%esp
f0120622:	68 40 00 13 f0       	push   $0xf0130040
f0120627:	68 ec 0a 00 00       	push   $0xaec
f012062c:	68 be ff 12 f0       	push   $0xf012ffbe
f0120631:	e8 70 fb fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0120636:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f012063d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0120640:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120646:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0120649:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120650:	eb 0e                	jmp    f0120660 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0120652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120655:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120658:	01 d0                	add    %edx,%eax
f012065a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012065d:	ff 45 f4             	incl   -0xc(%ebp)
f0120660:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120666:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120669:	7f e7                	jg     f0120652 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012066b:	e8 40 af fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120670:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120673:	e8 2c 2e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120678:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012067b:	83 ec 0c             	sub    $0xc,%esp
f012067e:	68 00 08 00 00       	push   $0x800
f0120683:	e8 6c 65 fe ff       	call   f0106bf4 <kmalloc>
f0120688:	83 c4 10             	add    $0x10,%esp
f012068b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120691:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120697:	89 c1                	mov    %eax,%ecx
f0120699:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01206a0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01206a5:	0f b6 d0             	movzbl %al,%edx
f01206a8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01206ab:	01 d0                	add    %edx,%eax
f01206ad:	48                   	dec    %eax
f01206ae:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01206b1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01206b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01206b9:	f7 75 88             	divl   -0x78(%ebp)
f01206bc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01206bf:	29 d0                	sub    %edx,%eax
f01206c1:	89 c3                	mov    %eax,%ebx
f01206c3:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01206ca:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01206cf:	0f b6 c0             	movzbl %al,%eax
f01206d2:	c1 e0 04             	shl    $0x4,%eax
f01206d5:	89 c2                	mov    %eax,%edx
f01206d7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01206da:	01 d0                	add    %edx,%eax
f01206dc:	48                   	dec    %eax
f01206dd:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01206e3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01206e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01206ee:	f7 75 80             	divl   -0x80(%ebp)
f01206f1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01206f7:	29 d0                	sub    %edx,%eax
f01206f9:	01 c3                	add    %eax,%ebx
f01206fb:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0120702:	10 00 00 
f0120705:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012070b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120710:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0120716:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012071c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120721:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0120727:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012072d:	29 d0                	sub    %edx,%eax
f012072f:	01 d8                	add    %ebx,%eax
f0120731:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120736:	39 c1                	cmp    %eax,%ecx
f0120738:	74 17                	je     f0120751 <test_kexpand+0x4cc>
f012073a:	83 ec 04             	sub    $0x4,%esp
f012073d:	68 a4 00 13 f0       	push   $0xf01300a4
f0120742:	68 f8 0a 00 00       	push   $0xaf8
f0120747:	68 be ff 12 f0       	push   $0xf012ffbe
f012074c:	e8 55 fa fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120751:	e8 4e 2d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120756:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120759:	74 17                	je     f0120772 <test_kexpand+0x4ed>
f012075b:	83 ec 04             	sub    $0x4,%esp
f012075e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120763:	68 f9 0a 00 00       	push   $0xaf9
f0120768:	68 be ff 12 f0       	push   $0xf012ffbe
f012076d:	e8 34 fa fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120772:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120775:	e8 36 ae fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012077a:	29 c3                	sub    %eax,%ebx
f012077c:	89 d8                	mov    %ebx,%eax
f012077e:	83 f8 01             	cmp    $0x1,%eax
f0120781:	74 17                	je     f012079a <test_kexpand+0x515>
f0120783:	83 ec 04             	sub    $0x4,%esp
f0120786:	68 40 00 13 f0       	push   $0xf0130040
f012078b:	68 fa 0a 00 00       	push   $0xafa
f0120790:	68 be ff 12 f0       	push   $0xf012ffbe
f0120795:	e8 0c fa fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012079a:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01207a1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01207a4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01207aa:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01207ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01207b4:	eb 0e                	jmp    f01207c4 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01207b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01207b9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01207bc:	01 d0                	add    %edx,%eax
f01207be:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01207c1:	ff 45 f4             	incl   -0xc(%ebp)
f01207c4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01207ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01207cd:	7f e7                	jg     f01207b6 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01207cf:	e8 dc ad fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01207d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207d7:	e8 c8 2c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01207dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01207df:	83 ec 0c             	sub    $0xc,%esp
f01207e2:	68 00 1c 00 00       	push   $0x1c00
f01207e7:	e8 08 64 fe ff       	call   f0106bf4 <kmalloc>
f01207ec:	83 c4 10             	add    $0x10,%esp
f01207ef:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207f5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01207fb:	89 c1                	mov    %eax,%ecx
f01207fd:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0120804:	10 00 00 
f0120807:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012080c:	0f b6 d0             	movzbl %al,%edx
f012080f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120815:	01 d0                	add    %edx,%eax
f0120817:	48                   	dec    %eax
f0120818:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012081e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120824:	ba 00 00 00 00       	mov    $0x0,%edx
f0120829:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012082f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120835:	29 d0                	sub    %edx,%eax
f0120837:	89 c3                	mov    %eax,%ebx
f0120839:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0120840:	10 00 00 
f0120843:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120848:	0f b6 c0             	movzbl %al,%eax
f012084b:	c1 e0 04             	shl    $0x4,%eax
f012084e:	89 c2                	mov    %eax,%edx
f0120850:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120856:	01 d0                	add    %edx,%eax
f0120858:	48                   	dec    %eax
f0120859:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012085f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120865:	ba 00 00 00 00       	mov    $0x0,%edx
f012086a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0120870:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120876:	29 d0                	sub    %edx,%eax
f0120878:	01 c3                	add    %eax,%ebx
f012087a:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0120881:	10 00 00 
f0120884:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012088a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012088f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0120895:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012089b:	ba 00 00 00 00       	mov    $0x0,%edx
f01208a0:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01208a6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01208ac:	29 d0                	sub    %edx,%eax
f01208ae:	01 d8                	add    %ebx,%eax
f01208b0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01208b5:	39 c1                	cmp    %eax,%ecx
f01208b7:	74 17                	je     f01208d0 <test_kexpand+0x64b>
f01208b9:	83 ec 04             	sub    $0x4,%esp
f01208bc:	68 a4 00 13 f0       	push   $0xf01300a4
f01208c1:	68 06 0b 00 00       	push   $0xb06
f01208c6:	68 be ff 12 f0       	push   $0xf012ffbe
f01208cb:	e8 d6 f8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208d0:	e8 cf 2b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01208d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01208d8:	74 17                	je     f01208f1 <test_kexpand+0x66c>
f01208da:	83 ec 04             	sub    $0x4,%esp
f01208dd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01208e2:	68 07 0b 00 00       	push   $0xb07
f01208e7:	68 be ff 12 f0       	push   $0xf012ffbe
f01208ec:	e8 b5 f8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208f1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01208f4:	e8 b7 ac fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01208f9:	29 c3                	sub    %eax,%ebx
f01208fb:	89 d8                	mov    %ebx,%eax
f01208fd:	83 f8 02             	cmp    $0x2,%eax
f0120900:	74 17                	je     f0120919 <test_kexpand+0x694>
f0120902:	83 ec 04             	sub    $0x4,%esp
f0120905:	68 40 00 13 f0       	push   $0xf0130040
f012090a:	68 08 0b 00 00       	push   $0xb08
f012090f:	68 be ff 12 f0       	push   $0xf012ffbe
f0120914:	e8 8d f8 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120919:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0120920:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120923:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120929:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012092c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120933:	eb 0e                	jmp    f0120943 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0120935:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120938:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012093b:	01 d0                	add    %edx,%eax
f012093d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120940:	ff 45 f4             	incl   -0xc(%ebp)
f0120943:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120949:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012094c:	7f e7                	jg     f0120935 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012094e:	e8 5d ac fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120953:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120956:	e8 49 2b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012095b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012095e:	83 ec 0c             	sub    $0xc,%esp
f0120961:	68 00 fc 2f 00       	push   $0x2ffc00
f0120966:	e8 89 62 fe ff       	call   f0106bf4 <kmalloc>
f012096b:	83 c4 10             	add    $0x10,%esp
f012096e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120974:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012097a:	89 c1                	mov    %eax,%ecx
f012097c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0120983:	10 00 00 
f0120986:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012098b:	0f b6 d0             	movzbl %al,%edx
f012098e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120994:	01 d0                	add    %edx,%eax
f0120996:	48                   	dec    %eax
f0120997:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012099d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01209a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01209a8:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01209ae:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01209b4:	29 d0                	sub    %edx,%eax
f01209b6:	89 c3                	mov    %eax,%ebx
f01209b8:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01209bf:	10 00 00 
f01209c2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01209c7:	0f b6 c0             	movzbl %al,%eax
f01209ca:	c1 e0 04             	shl    $0x4,%eax
f01209cd:	89 c2                	mov    %eax,%edx
f01209cf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01209d5:	01 d0                	add    %edx,%eax
f01209d7:	48                   	dec    %eax
f01209d8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01209de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01209e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01209e9:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01209ef:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01209f5:	29 d0                	sub    %edx,%eax
f01209f7:	01 c3                	add    %eax,%ebx
f01209f9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0120a00:	10 00 00 
f0120a03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120a09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a0e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0120a14:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120a1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a1f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0120a25:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120a2b:	29 d0                	sub    %edx,%eax
f0120a2d:	01 d8                	add    %ebx,%eax
f0120a2f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120a34:	39 c1                	cmp    %eax,%ecx
f0120a36:	74 17                	je     f0120a4f <test_kexpand+0x7ca>
f0120a38:	83 ec 04             	sub    $0x4,%esp
f0120a3b:	68 a4 00 13 f0       	push   $0xf01300a4
f0120a40:	68 14 0b 00 00       	push   $0xb14
f0120a45:	68 be ff 12 f0       	push   $0xf012ffbe
f0120a4a:	e8 57 f7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a4f:	e8 50 2a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120a54:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120a57:	74 17                	je     f0120a70 <test_kexpand+0x7eb>
f0120a59:	83 ec 04             	sub    $0x4,%esp
f0120a5c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120a61:	68 15 0b 00 00       	push   $0xb15
f0120a66:	68 be ff 12 f0       	push   $0xf012ffbe
f0120a6b:	e8 36 f7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a70:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120a73:	e8 38 ab fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120a78:	29 c3                	sub    %eax,%ebx
f0120a7a:	89 d8                	mov    %ebx,%eax
f0120a7c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120a81:	74 17                	je     f0120a9a <test_kexpand+0x815>
f0120a83:	83 ec 04             	sub    $0x4,%esp
f0120a86:	68 40 00 13 f0       	push   $0xf0130040
f0120a8b:	68 16 0b 00 00       	push   $0xb16
f0120a90:	68 be ff 12 f0       	push   $0xf012ffbe
f0120a95:	e8 0c f7 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120a9a:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0120aa1:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120aa4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120aaa:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120aad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ab4:	eb 0e                	jmp    f0120ac4 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0120ab6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120ab9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120abc:	01 d0                	add    %edx,%eax
f0120abe:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120ac1:	ff 45 f4             	incl   -0xc(%ebp)
f0120ac4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120aca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120acd:	7f e7                	jg     f0120ab6 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120acf:	e8 dc aa fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120ad4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ad7:	e8 c8 29 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120adc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0120adf:	83 ec 0c             	sub    $0xc,%esp
f0120ae2:	68 00 00 60 00       	push   $0x600000
f0120ae7:	e8 08 61 fe ff       	call   f0106bf4 <kmalloc>
f0120aec:	83 c4 10             	add    $0x10,%esp
f0120aef:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120af5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120afb:	89 c1                	mov    %eax,%ecx
f0120afd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0120b04:	10 00 00 
f0120b07:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120b0c:	0f b6 d0             	movzbl %al,%edx
f0120b0f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120b15:	01 d0                	add    %edx,%eax
f0120b17:	48                   	dec    %eax
f0120b18:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0120b1e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b29:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0120b2f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120b35:	29 d0                	sub    %edx,%eax
f0120b37:	89 c3                	mov    %eax,%ebx
f0120b39:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0120b40:	10 00 00 
f0120b43:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120b48:	0f b6 c0             	movzbl %al,%eax
f0120b4b:	c1 e0 04             	shl    $0x4,%eax
f0120b4e:	89 c2                	mov    %eax,%edx
f0120b50:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120b56:	01 d0                	add    %edx,%eax
f0120b58:	48                   	dec    %eax
f0120b59:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0120b5f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b6a:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0120b70:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120b76:	29 d0                	sub    %edx,%eax
f0120b78:	01 c3                	add    %eax,%ebx
f0120b7a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0120b81:	10 00 00 
f0120b84:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120b8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120b8f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0120b95:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120b9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ba0:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0120ba6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120bac:	29 d0                	sub    %edx,%eax
f0120bae:	01 d8                	add    %ebx,%eax
f0120bb0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120bb5:	39 c1                	cmp    %eax,%ecx
f0120bb7:	74 17                	je     f0120bd0 <test_kexpand+0x94b>
f0120bb9:	83 ec 04             	sub    $0x4,%esp
f0120bbc:	68 a4 00 13 f0       	push   $0xf01300a4
f0120bc1:	68 22 0b 00 00       	push   $0xb22
f0120bc6:	68 be ff 12 f0       	push   $0xf012ffbe
f0120bcb:	e8 d6 f5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bd0:	e8 cf 28 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120bd5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120bd8:	74 17                	je     f0120bf1 <test_kexpand+0x96c>
f0120bda:	83 ec 04             	sub    $0x4,%esp
f0120bdd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120be2:	68 23 0b 00 00       	push   $0xb23
f0120be7:	68 be ff 12 f0       	push   $0xf012ffbe
f0120bec:	e8 b5 f5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bf1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120bf4:	e8 b7 a9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120bf9:	29 c3                	sub    %eax,%ebx
f0120bfb:	89 d8                	mov    %ebx,%eax
f0120bfd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120c02:	74 17                	je     f0120c1b <test_kexpand+0x996>
f0120c04:	83 ec 04             	sub    $0x4,%esp
f0120c07:	68 40 00 13 f0       	push   $0xf0130040
f0120c0c:	68 24 0b 00 00       	push   $0xb24
f0120c11:	68 be ff 12 f0       	push   $0xf012ffbe
f0120c16:	e8 8b f5 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0120c1b:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0120c22:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0120c25:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120c2b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0120c31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c38:	eb 1a                	jmp    f0120c54 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0120c3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120c3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120c44:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120c4a:	01 c2                	add    %eax,%edx
f0120c4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120c4f:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0120c51:	ff 45 f4             	incl   -0xc(%ebp)
f0120c54:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120c5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c5d:	7d db                	jge    f0120c3a <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0120c5f:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0120c66:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0120c69:	e8 42 a9 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120c6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c71:	e8 2e 28 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120c76:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0120c79:	83 ec 0c             	sub    $0xc,%esp
f0120c7c:	68 00 00 70 00       	push   $0x700000
f0120c81:	e8 0a 60 fe ff       	call   f0106c90 <kexpand>
f0120c86:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0120c89:	e8 16 28 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120c8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120c91:	74 19                	je     f0120cac <test_kexpand+0xa27>
f0120c93:	68 14 0d 13 f0       	push   $0xf0130d14
f0120c98:	68 45 0d 13 f0       	push   $0xf0130d45
f0120c9d:	68 35 0b 00 00       	push   $0xb35
f0120ca2:	68 be ff 12 f0       	push   $0xf012ffbe
f0120ca7:	e8 fa f4 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0120cac:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120caf:	e8 fc a8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120cb4:	29 c3                	sub    %eax,%ebx
f0120cb6:	89 d8                	mov    %ebx,%eax
f0120cb8:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120cbd:	74 19                	je     f0120cd8 <test_kexpand+0xa53>
f0120cbf:	68 5c 0d 13 f0       	push   $0xf0130d5c
f0120cc4:	68 45 0d 13 f0       	push   $0xf0130d45
f0120cc9:	68 36 0b 00 00       	push   $0xb36
f0120cce:	68 be ff 12 f0       	push   $0xf012ffbe
f0120cd3:	e8 ce f4 fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0120cd8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120cde:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120ce1:	eb 1a                	jmp    f0120cfd <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0120ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120ce6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120ced:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120cf3:	01 c2                	add    %eax,%edx
f0120cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120cf8:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0120cfa:	ff 45 f4             	incl   -0xc(%ebp)
f0120cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d00:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0120d06:	7c db                	jl     f0120ce3 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0120d08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d0f:	eb 37                	jmp    f0120d48 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0120d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120d1b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120d21:	01 d0                	add    %edx,%eax
f0120d23:	8b 10                	mov    (%eax),%edx
f0120d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d28:	39 c2                	cmp    %eax,%edx
f0120d2a:	74 19                	je     f0120d45 <test_kexpand+0xac0>
f0120d2c:	68 8c 0d 13 f0       	push   $0xf0130d8c
f0120d31:	68 45 0d 13 f0       	push   $0xf0130d45
f0120d36:	68 42 0b 00 00       	push   $0xb42
f0120d3b:	68 be ff 12 f0       	push   $0xf012ffbe
f0120d40:	e8 61 f4 fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0120d45:	ff 45 f4             	incl   -0xc(%ebp)
f0120d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d4b:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0120d51:	7c be                	jl     f0120d11 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0120d53:	e8 58 a8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120d58:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d5b:	e8 44 27 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120d60:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0120d63:	83 ec 0c             	sub    $0xc,%esp
f0120d66:	68 00 00 a0 00       	push   $0xa00000
f0120d6b:	e8 20 5f fe ff       	call   f0106c90 <kexpand>
f0120d70:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0120d73:	e8 2c 27 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120d78:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120d7b:	74 19                	je     f0120d96 <test_kexpand+0xb11>
f0120d7d:	68 14 0d 13 f0       	push   $0xf0130d14
f0120d82:	68 45 0d 13 f0       	push   $0xf0130d45
f0120d87:	68 4d 0b 00 00       	push   $0xb4d
f0120d8c:	68 be ff 12 f0       	push   $0xf012ffbe
f0120d91:	e8 10 f4 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0120d96:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120d99:	e8 12 a8 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120d9e:	29 c3                	sub    %eax,%ebx
f0120da0:	89 d8                	mov    %ebx,%eax
f0120da2:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120da7:	74 19                	je     f0120dc2 <test_kexpand+0xb3d>
f0120da9:	68 98 0d 13 f0       	push   $0xf0130d98
f0120dae:	68 45 0d 13 f0       	push   $0xf0130d45
f0120db3:	68 4e 0b 00 00       	push   $0xb4e
f0120db8:	68 be ff 12 f0       	push   $0xf012ffbe
f0120dbd:	e8 e4 f3 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0120dc2:	e8 e9 a7 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120dc7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dca:	e8 d5 26 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120dcf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0120dd2:	83 ec 0c             	sub    $0xc,%esp
f0120dd5:	68 00 00 40 00       	push   $0x400000
f0120dda:	e8 15 5e fe ff       	call   f0106bf4 <kmalloc>
f0120ddf:	83 c4 10             	add    $0x10,%esp
f0120de2:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0120de8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120dee:	89 c1                	mov    %eax,%ecx
f0120df0:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0120df7:	10 00 00 
f0120dfa:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120dff:	0f b6 d0             	movzbl %al,%edx
f0120e02:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120e08:	01 d0                	add    %edx,%eax
f0120e0a:	48                   	dec    %eax
f0120e0b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0120e11:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e1c:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0120e22:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120e28:	29 d0                	sub    %edx,%eax
f0120e2a:	89 c3                	mov    %eax,%ebx
f0120e2c:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0120e33:	10 00 00 
f0120e36:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0120e3b:	0f b6 c0             	movzbl %al,%eax
f0120e3e:	c1 e0 04             	shl    $0x4,%eax
f0120e41:	89 c2                	mov    %eax,%edx
f0120e43:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120e49:	01 d0                	add    %edx,%eax
f0120e4b:	48                   	dec    %eax
f0120e4c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0120e52:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120e58:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e5d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0120e63:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120e69:	29 d0                	sub    %edx,%eax
f0120e6b:	01 c3                	add    %eax,%ebx
f0120e6d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0120e74:	10 00 00 
f0120e77:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120e7d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e82:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0120e88:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120e8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e93:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0120e99:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120e9f:	29 d0                	sub    %edx,%eax
f0120ea1:	01 d8                	add    %ebx,%eax
f0120ea3:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0120ea8:	39 c1                	cmp    %eax,%ecx
f0120eaa:	74 17                	je     f0120ec3 <test_kexpand+0xc3e>
f0120eac:	83 ec 04             	sub    $0x4,%esp
f0120eaf:	68 c8 0d 13 f0       	push   $0xf0130dc8
f0120eb4:	68 59 0b 00 00       	push   $0xb59
f0120eb9:	68 be ff 12 f0       	push   $0xf012ffbe
f0120ebe:	e8 e3 f2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ec3:	e8 dc 25 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120ec8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120ecb:	74 17                	je     f0120ee4 <test_kexpand+0xc5f>
f0120ecd:	83 ec 04             	sub    $0x4,%esp
f0120ed0:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120ed5:	68 5a 0b 00 00       	push   $0xb5a
f0120eda:	68 be ff 12 f0       	push   $0xf012ffbe
f0120edf:	e8 c2 f2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ee4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120ee7:	e8 c4 a6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120eec:	29 c3                	sub    %eax,%ebx
f0120eee:	89 d8                	mov    %ebx,%eax
f0120ef0:	3d 00 04 00 00       	cmp    $0x400,%eax
f0120ef5:	74 17                	je     f0120f0e <test_kexpand+0xc89>
f0120ef7:	83 ec 04             	sub    $0x4,%esp
f0120efa:	68 40 00 13 f0       	push   $0xf0130040
f0120eff:	68 5b 0b 00 00       	push   $0xb5b
f0120f04:	68 be ff 12 f0       	push   $0xf012ffbe
f0120f09:	e8 98 f2 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0120f0e:	e8 9d a6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120f13:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f16:	e8 89 25 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120f1b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0120f1e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120f24:	83 ec 0c             	sub    $0xc,%esp
f0120f27:	50                   	push   %eax
f0120f28:	e8 e1 5c fe ff       	call   f0106c0e <kfree>
f0120f2d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f30:	e8 6f 25 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120f35:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120f38:	74 17                	je     f0120f51 <test_kexpand+0xccc>
f0120f3a:	83 ec 04             	sub    $0x4,%esp
f0120f3d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0120f42:	68 64 0b 00 00       	push   $0xb64
f0120f47:	68 be ff 12 f0       	push   $0xf012ffbe
f0120f4c:	e8 55 f2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120f51:	e8 5a a6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120f56:	89 c2                	mov    %eax,%edx
f0120f58:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120f5b:	29 c2                	sub    %eax,%edx
f0120f5d:	89 d0                	mov    %edx,%eax
f0120f5f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0120f64:	74 17                	je     f0120f7d <test_kexpand+0xcf8>
f0120f66:	83 ec 04             	sub    $0x4,%esp
f0120f69:	68 70 08 13 f0       	push   $0xf0130870
f0120f6e:	68 65 0b 00 00       	push   $0xb65
f0120f73:	68 be ff 12 f0       	push   $0xf012ffbe
f0120f78:	e8 29 f2 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0120f7d:	e8 2e a6 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120f82:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f85:	e8 1a 25 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120f8a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0120f8d:	83 ec 0c             	sub    $0xc,%esp
f0120f90:	68 00 50 40 00       	push   $0x405000
f0120f95:	e8 f6 5c fe ff       	call   f0106c90 <kexpand>
f0120f9a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0120f9d:	e8 02 25 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0120fa2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0120fa5:	74 19                	je     f0120fc0 <test_kexpand+0xd3b>
f0120fa7:	68 14 0d 13 f0       	push   $0xf0130d14
f0120fac:	68 45 0d 13 f0       	push   $0xf0130d45
f0120fb1:	68 6f 0b 00 00       	push   $0xb6f
f0120fb6:	68 be ff 12 f0       	push   $0xf012ffbe
f0120fbb:	e8 e6 f1 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0120fc0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0120fc3:	e8 e8 a5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0120fc8:	29 c3                	sub    %eax,%ebx
f0120fca:	89 d8                	mov    %ebx,%eax
f0120fcc:	83 f8 05             	cmp    $0x5,%eax
f0120fcf:	74 19                	je     f0120fea <test_kexpand+0xd65>
f0120fd1:	68 f0 0d 13 f0       	push   $0xf0130df0
f0120fd6:	68 45 0d 13 f0       	push   $0xf0130d45
f0120fdb:	68 70 0b 00 00       	push   $0xb70
f0120fe0:	68 be ff 12 f0       	push   $0xf012ffbe
f0120fe5:	e8 bc f1 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0120fea:	83 ec 0c             	sub    $0xc,%esp
f0120fed:	68 d8 0c 13 f0       	push   $0xf0130cd8
f0120ff2:	e8 36 fc fd ff       	call   f0100c2d <cprintf>
f0120ff7:	83 c4 10             	add    $0x10,%esp

	return 1;
f0120ffa:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0120fff:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121002:	5b                   	pop    %ebx
f0121003:	5f                   	pop    %edi
f0121004:	5d                   	pop    %ebp
f0121005:	c3                   	ret    

f0121006 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0121006:	55                   	push   %ebp
f0121007:	89 e5                	mov    %esp,%ebp
f0121009:	57                   	push   %edi
f012100a:	53                   	push   %ebx
f012100b:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0121011:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0121015:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0121019:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012101f:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0121025:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012102c:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121033:	e8 78 a5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121038:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012103b:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0121041:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121046:	b8 00 00 00 00       	mov    $0x0,%eax
f012104b:	89 d7                	mov    %edx,%edi
f012104d:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012104f:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0121055:	b9 14 00 00 00       	mov    $0x14,%ecx
f012105a:	b8 00 00 00 00       	mov    $0x0,%eax
f012105f:	89 d7                	mov    %edx,%edi
f0121061:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121063:	e8 48 a5 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121068:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012106b:	e8 34 24 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121070:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121073:	83 ec 0c             	sub    $0xc,%esp
f0121076:	68 00 fc 1f 00       	push   $0x1ffc00
f012107b:	e8 74 5b fe ff       	call   f0106bf4 <kmalloc>
f0121080:	83 c4 10             	add    $0x10,%esp
f0121083:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121089:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012108f:	89 c1                	mov    %eax,%ecx
f0121091:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0121098:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012109d:	0f b6 d0             	movzbl %al,%edx
f01210a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01210a3:	01 d0                	add    %edx,%eax
f01210a5:	48                   	dec    %eax
f01210a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01210a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01210b1:	f7 75 d4             	divl   -0x2c(%ebp)
f01210b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210b7:	29 d0                	sub    %edx,%eax
f01210b9:	89 c3                	mov    %eax,%ebx
f01210bb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01210c2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01210c7:	0f b6 c0             	movzbl %al,%eax
f01210ca:	c1 e0 04             	shl    $0x4,%eax
f01210cd:	89 c2                	mov    %eax,%edx
f01210cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01210d2:	01 d0                	add    %edx,%eax
f01210d4:	48                   	dec    %eax
f01210d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01210d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01210db:	ba 00 00 00 00       	mov    $0x0,%edx
f01210e0:	f7 75 cc             	divl   -0x34(%ebp)
f01210e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01210e6:	29 d0                	sub    %edx,%eax
f01210e8:	01 c3                	add    %eax,%ebx
f01210ea:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01210f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01210f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01210f9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01210fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01210ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0121104:	f7 75 c4             	divl   -0x3c(%ebp)
f0121107:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012110a:	29 d0                	sub    %edx,%eax
f012110c:	01 d8                	add    %ebx,%eax
f012110e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121113:	39 c1                	cmp    %eax,%ecx
f0121115:	74 17                	je     f012112e <test_kshrink+0x128>
f0121117:	83 ec 04             	sub    $0x4,%esp
f012111a:	68 a4 00 13 f0       	push   $0xf01300a4
f012111f:	68 96 0b 00 00       	push   $0xb96
f0121124:	68 be ff 12 f0       	push   $0xf012ffbe
f0121129:	e8 78 f0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012112e:	e8 71 23 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121133:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121136:	74 17                	je     f012114f <test_kshrink+0x149>
f0121138:	83 ec 04             	sub    $0x4,%esp
f012113b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121140:	68 97 0b 00 00       	push   $0xb97
f0121145:	68 be ff 12 f0       	push   $0xf012ffbe
f012114a:	e8 57 f0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012114f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0121152:	e8 59 a4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121157:	29 c3                	sub    %eax,%ebx
f0121159:	89 d8                	mov    %ebx,%eax
f012115b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121160:	74 17                	je     f0121179 <test_kshrink+0x173>
f0121162:	83 ec 04             	sub    $0x4,%esp
f0121165:	68 40 00 13 f0       	push   $0xf0130040
f012116a:	68 98 0b 00 00       	push   $0xb98
f012116f:	68 be ff 12 f0       	push   $0xf012ffbe
f0121174:	e8 2d f0 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121179:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0121180:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121183:	e8 28 a4 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121188:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012118b:	e8 14 23 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121190:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121193:	83 ec 0c             	sub    $0xc,%esp
f0121196:	68 00 fc 1f 00       	push   $0x1ffc00
f012119b:	e8 54 5a fe ff       	call   f0106bf4 <kmalloc>
f01211a0:	83 c4 10             	add    $0x10,%esp
f01211a3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211a9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01211af:	89 c1                	mov    %eax,%ecx
f01211b1:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01211b8:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01211bd:	0f b6 d0             	movzbl %al,%edx
f01211c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01211c3:	01 d0                	add    %edx,%eax
f01211c5:	48                   	dec    %eax
f01211c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01211c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01211cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01211d1:	f7 75 bc             	divl   -0x44(%ebp)
f01211d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01211d7:	29 d0                	sub    %edx,%eax
f01211d9:	89 c3                	mov    %eax,%ebx
f01211db:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01211e2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01211e7:	0f b6 c0             	movzbl %al,%eax
f01211ea:	c1 e0 04             	shl    $0x4,%eax
f01211ed:	89 c2                	mov    %eax,%edx
f01211ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01211f2:	01 d0                	add    %edx,%eax
f01211f4:	48                   	dec    %eax
f01211f5:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01211f8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01211fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0121200:	f7 75 b4             	divl   -0x4c(%ebp)
f0121203:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121206:	29 d0                	sub    %edx,%eax
f0121208:	01 c3                	add    %eax,%ebx
f012120a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0121211:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121214:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121219:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012121c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012121f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121224:	f7 75 ac             	divl   -0x54(%ebp)
f0121227:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012122a:	29 d0                	sub    %edx,%eax
f012122c:	01 d8                	add    %ebx,%eax
f012122e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121233:	39 c1                	cmp    %eax,%ecx
f0121235:	74 17                	je     f012124e <test_kshrink+0x248>
f0121237:	83 ec 04             	sub    $0x4,%esp
f012123a:	68 a4 00 13 f0       	push   $0xf01300a4
f012123f:	68 9f 0b 00 00       	push   $0xb9f
f0121244:	68 be ff 12 f0       	push   $0xf012ffbe
f0121249:	e8 58 ef fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012124e:	e8 51 22 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121253:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121256:	74 17                	je     f012126f <test_kshrink+0x269>
f0121258:	83 ec 04             	sub    $0x4,%esp
f012125b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121260:	68 a0 0b 00 00       	push   $0xba0
f0121265:	68 be ff 12 f0       	push   $0xf012ffbe
f012126a:	e8 37 ef fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012126f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0121272:	e8 39 a3 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121277:	29 c3                	sub    %eax,%ebx
f0121279:	89 d8                	mov    %ebx,%eax
f012127b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121280:	74 17                	je     f0121299 <test_kshrink+0x293>
f0121282:	83 ec 04             	sub    $0x4,%esp
f0121285:	68 40 00 13 f0       	push   $0xf0130040
f012128a:	68 a1 0b 00 00       	push   $0xba1
f012128f:	68 be ff 12 f0       	push   $0xf012ffbe
f0121294:	e8 0d ef fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121299:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f01212a0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01212a3:	e8 08 a3 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01212a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212ab:	e8 f4 21 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01212b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01212b3:	83 ec 0c             	sub    $0xc,%esp
f01212b6:	68 00 08 00 00       	push   $0x800
f01212bb:	e8 34 59 fe ff       	call   f0106bf4 <kmalloc>
f01212c0:	83 c4 10             	add    $0x10,%esp
f01212c3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01212c9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01212cf:	89 c1                	mov    %eax,%ecx
f01212d1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01212d8:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01212dd:	0f b6 d0             	movzbl %al,%edx
f01212e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01212e3:	01 d0                	add    %edx,%eax
f01212e5:	48                   	dec    %eax
f01212e6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01212e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01212ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01212f1:	f7 75 a4             	divl   -0x5c(%ebp)
f01212f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01212f7:	29 d0                	sub    %edx,%eax
f01212f9:	89 c3                	mov    %eax,%ebx
f01212fb:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0121302:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121307:	0f b6 c0             	movzbl %al,%eax
f012130a:	c1 e0 04             	shl    $0x4,%eax
f012130d:	89 c2                	mov    %eax,%edx
f012130f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121312:	01 d0                	add    %edx,%eax
f0121314:	48                   	dec    %eax
f0121315:	89 45 98             	mov    %eax,-0x68(%ebp)
f0121318:	8b 45 98             	mov    -0x68(%ebp),%eax
f012131b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121320:	f7 75 9c             	divl   -0x64(%ebp)
f0121323:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121326:	29 d0                	sub    %edx,%eax
f0121328:	01 c3                	add    %eax,%ebx
f012132a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0121331:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121334:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121339:	89 45 90             	mov    %eax,-0x70(%ebp)
f012133c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012133f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121344:	f7 75 94             	divl   -0x6c(%ebp)
f0121347:	8b 45 90             	mov    -0x70(%ebp),%eax
f012134a:	29 d0                	sub    %edx,%eax
f012134c:	01 d8                	add    %ebx,%eax
f012134e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121353:	39 c1                	cmp    %eax,%ecx
f0121355:	74 17                	je     f012136e <test_kshrink+0x368>
f0121357:	83 ec 04             	sub    $0x4,%esp
f012135a:	68 a4 00 13 f0       	push   $0xf01300a4
f012135f:	68 a8 0b 00 00       	push   $0xba8
f0121364:	68 be ff 12 f0       	push   $0xf012ffbe
f0121369:	e8 38 ee fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012136e:	e8 31 21 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121373:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121376:	74 17                	je     f012138f <test_kshrink+0x389>
f0121378:	83 ec 04             	sub    $0x4,%esp
f012137b:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121380:	68 a9 0b 00 00       	push   $0xba9
f0121385:	68 be ff 12 f0       	push   $0xf012ffbe
f012138a:	e8 17 ee fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012138f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0121392:	e8 19 a2 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121397:	29 c3                	sub    %eax,%ebx
f0121399:	89 d8                	mov    %ebx,%eax
f012139b:	83 f8 01             	cmp    $0x1,%eax
f012139e:	74 17                	je     f01213b7 <test_kshrink+0x3b1>
f01213a0:	83 ec 04             	sub    $0x4,%esp
f01213a3:	68 40 00 13 f0       	push   $0xf0130040
f01213a8:	68 aa 0b 00 00       	push   $0xbaa
f01213ad:	68 be ff 12 f0       	push   $0xf012ffbe
f01213b2:	e8 ef ed fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01213b7:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01213be:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01213c1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01213c7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01213ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213d1:	eb 0e                	jmp    f01213e1 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01213d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01213d6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01213d9:	01 d0                	add    %edx,%eax
f01213db:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01213de:	ff 45 f4             	incl   -0xc(%ebp)
f01213e1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01213e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213ea:	7f e7                	jg     f01213d3 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01213ec:	e8 bf a1 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01213f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01213f4:	e8 ab 20 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01213f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01213fc:	83 ec 0c             	sub    $0xc,%esp
f01213ff:	68 00 08 00 00       	push   $0x800
f0121404:	e8 eb 57 fe ff       	call   f0106bf4 <kmalloc>
f0121409:	83 c4 10             	add    $0x10,%esp
f012140c:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121412:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121418:	89 c1                	mov    %eax,%ecx
f012141a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121421:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121426:	0f b6 d0             	movzbl %al,%edx
f0121429:	8b 45 88             	mov    -0x78(%ebp),%eax
f012142c:	01 d0                	add    %edx,%eax
f012142e:	48                   	dec    %eax
f012142f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121432:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121435:	ba 00 00 00 00       	mov    $0x0,%edx
f012143a:	f7 75 88             	divl   -0x78(%ebp)
f012143d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121440:	29 d0                	sub    %edx,%eax
f0121442:	89 c3                	mov    %eax,%ebx
f0121444:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012144b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121450:	0f b6 c0             	movzbl %al,%eax
f0121453:	c1 e0 04             	shl    $0x4,%eax
f0121456:	89 c2                	mov    %eax,%edx
f0121458:	8b 45 80             	mov    -0x80(%ebp),%eax
f012145b:	01 d0                	add    %edx,%eax
f012145d:	48                   	dec    %eax
f012145e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0121464:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012146a:	ba 00 00 00 00       	mov    $0x0,%edx
f012146f:	f7 75 80             	divl   -0x80(%ebp)
f0121472:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121478:	29 d0                	sub    %edx,%eax
f012147a:	01 c3                	add    %eax,%ebx
f012147c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0121483:	10 00 00 
f0121486:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012148c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121491:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0121497:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012149d:	ba 00 00 00 00       	mov    $0x0,%edx
f01214a2:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01214a8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01214ae:	29 d0                	sub    %edx,%eax
f01214b0:	01 d8                	add    %ebx,%eax
f01214b2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01214b7:	39 c1                	cmp    %eax,%ecx
f01214b9:	74 17                	je     f01214d2 <test_kshrink+0x4cc>
f01214bb:	83 ec 04             	sub    $0x4,%esp
f01214be:	68 a4 00 13 f0       	push   $0xf01300a4
f01214c3:	68 b6 0b 00 00       	push   $0xbb6
f01214c8:	68 be ff 12 f0       	push   $0xf012ffbe
f01214cd:	e8 d4 ec fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214d2:	e8 cd 1f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01214d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01214da:	74 17                	je     f01214f3 <test_kshrink+0x4ed>
f01214dc:	83 ec 04             	sub    $0x4,%esp
f01214df:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01214e4:	68 b7 0b 00 00       	push   $0xbb7
f01214e9:	68 be ff 12 f0       	push   $0xf012ffbe
f01214ee:	e8 b3 ec fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01214f3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01214f6:	e8 b5 a0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01214fb:	29 c3                	sub    %eax,%ebx
f01214fd:	89 d8                	mov    %ebx,%eax
f01214ff:	83 f8 01             	cmp    $0x1,%eax
f0121502:	74 17                	je     f012151b <test_kshrink+0x515>
f0121504:	83 ec 04             	sub    $0x4,%esp
f0121507:	68 40 00 13 f0       	push   $0xf0130040
f012150c:	68 b8 0b 00 00       	push   $0xbb8
f0121511:	68 be ff 12 f0       	push   $0xf012ffbe
f0121516:	e8 8b ec fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012151b:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0121522:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121525:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012152b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012152e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121535:	eb 0e                	jmp    f0121545 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0121537:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012153a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012153d:	01 d0                	add    %edx,%eax
f012153f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121542:	ff 45 f4             	incl   -0xc(%ebp)
f0121545:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012154b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012154e:	7f e7                	jg     f0121537 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121550:	e8 5b a0 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121555:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121558:	e8 47 1f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012155d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121560:	83 ec 0c             	sub    $0xc,%esp
f0121563:	68 00 1c 00 00       	push   $0x1c00
f0121568:	e8 87 56 fe ff       	call   f0106bf4 <kmalloc>
f012156d:	83 c4 10             	add    $0x10,%esp
f0121570:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121576:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012157c:	89 c1                	mov    %eax,%ecx
f012157e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0121585:	10 00 00 
f0121588:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012158d:	0f b6 d0             	movzbl %al,%edx
f0121590:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121596:	01 d0                	add    %edx,%eax
f0121598:	48                   	dec    %eax
f0121599:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012159f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01215a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01215aa:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01215b0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01215b6:	29 d0                	sub    %edx,%eax
f01215b8:	89 c3                	mov    %eax,%ebx
f01215ba:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01215c1:	10 00 00 
f01215c4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01215c9:	0f b6 c0             	movzbl %al,%eax
f01215cc:	c1 e0 04             	shl    $0x4,%eax
f01215cf:	89 c2                	mov    %eax,%edx
f01215d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01215d7:	01 d0                	add    %edx,%eax
f01215d9:	48                   	dec    %eax
f01215da:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01215e0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01215e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01215eb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01215f1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01215f7:	29 d0                	sub    %edx,%eax
f01215f9:	01 c3                	add    %eax,%ebx
f01215fb:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0121602:	10 00 00 
f0121605:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012160b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121610:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0121616:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012161c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121621:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0121627:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012162d:	29 d0                	sub    %edx,%eax
f012162f:	01 d8                	add    %ebx,%eax
f0121631:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121636:	39 c1                	cmp    %eax,%ecx
f0121638:	74 17                	je     f0121651 <test_kshrink+0x64b>
f012163a:	83 ec 04             	sub    $0x4,%esp
f012163d:	68 a4 00 13 f0       	push   $0xf01300a4
f0121642:	68 c4 0b 00 00       	push   $0xbc4
f0121647:	68 be ff 12 f0       	push   $0xf012ffbe
f012164c:	e8 55 eb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121651:	e8 4e 1e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121656:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121659:	74 17                	je     f0121672 <test_kshrink+0x66c>
f012165b:	83 ec 04             	sub    $0x4,%esp
f012165e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121663:	68 c5 0b 00 00       	push   $0xbc5
f0121668:	68 be ff 12 f0       	push   $0xf012ffbe
f012166d:	e8 34 eb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121672:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0121675:	e8 36 9f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012167a:	29 c3                	sub    %eax,%ebx
f012167c:	89 d8                	mov    %ebx,%eax
f012167e:	83 f8 02             	cmp    $0x2,%eax
f0121681:	74 17                	je     f012169a <test_kshrink+0x694>
f0121683:	83 ec 04             	sub    $0x4,%esp
f0121686:	68 40 00 13 f0       	push   $0xf0130040
f012168b:	68 c6 0b 00 00       	push   $0xbc6
f0121690:	68 be ff 12 f0       	push   $0xf012ffbe
f0121695:	e8 0c eb fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012169a:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01216a1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01216a4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01216aa:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01216ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01216b4:	eb 0e                	jmp    f01216c4 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01216b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216b9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01216bc:	01 d0                	add    %edx,%eax
f01216be:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01216c1:	ff 45 f4             	incl   -0xc(%ebp)
f01216c4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01216ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01216cd:	7f e7                	jg     f01216b6 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01216cf:	e8 dc 9e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01216d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216d7:	e8 c8 1d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01216dc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01216df:	83 ec 0c             	sub    $0xc,%esp
f01216e2:	68 00 fc 2f 00       	push   $0x2ffc00
f01216e7:	e8 08 55 fe ff       	call   f0106bf4 <kmalloc>
f01216ec:	83 c4 10             	add    $0x10,%esp
f01216ef:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216f5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01216fb:	89 c1                	mov    %eax,%ecx
f01216fd:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0121704:	10 00 00 
f0121707:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012170c:	0f b6 d0             	movzbl %al,%edx
f012170f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121715:	01 d0                	add    %edx,%eax
f0121717:	48                   	dec    %eax
f0121718:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012171e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121724:	ba 00 00 00 00       	mov    $0x0,%edx
f0121729:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012172f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121735:	29 d0                	sub    %edx,%eax
f0121737:	89 c3                	mov    %eax,%ebx
f0121739:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0121740:	10 00 00 
f0121743:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121748:	0f b6 c0             	movzbl %al,%eax
f012174b:	c1 e0 04             	shl    $0x4,%eax
f012174e:	89 c2                	mov    %eax,%edx
f0121750:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121756:	01 d0                	add    %edx,%eax
f0121758:	48                   	dec    %eax
f0121759:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012175f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121765:	ba 00 00 00 00       	mov    $0x0,%edx
f012176a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0121770:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121776:	29 d0                	sub    %edx,%eax
f0121778:	01 c3                	add    %eax,%ebx
f012177a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0121781:	10 00 00 
f0121784:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012178a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012178f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0121795:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012179b:	ba 00 00 00 00       	mov    $0x0,%edx
f01217a0:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01217a6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01217ac:	29 d0                	sub    %edx,%eax
f01217ae:	01 d8                	add    %ebx,%eax
f01217b0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01217b5:	39 c1                	cmp    %eax,%ecx
f01217b7:	74 17                	je     f01217d0 <test_kshrink+0x7ca>
f01217b9:	83 ec 04             	sub    $0x4,%esp
f01217bc:	68 a4 00 13 f0       	push   $0xf01300a4
f01217c1:	68 d2 0b 00 00       	push   $0xbd2
f01217c6:	68 be ff 12 f0       	push   $0xf012ffbe
f01217cb:	e8 d6 e9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217d0:	e8 cf 1c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01217d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01217d8:	74 17                	je     f01217f1 <test_kshrink+0x7eb>
f01217da:	83 ec 04             	sub    $0x4,%esp
f01217dd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01217e2:	68 d3 0b 00 00       	push   $0xbd3
f01217e7:	68 be ff 12 f0       	push   $0xf012ffbe
f01217ec:	e8 b5 e9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01217f1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01217f4:	e8 b7 9d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01217f9:	29 c3                	sub    %eax,%ebx
f01217fb:	89 d8                	mov    %ebx,%eax
f01217fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121802:	74 17                	je     f012181b <test_kshrink+0x815>
f0121804:	83 ec 04             	sub    $0x4,%esp
f0121807:	68 40 00 13 f0       	push   $0xf0130040
f012180c:	68 d4 0b 00 00       	push   $0xbd4
f0121811:	68 be ff 12 f0       	push   $0xf012ffbe
f0121816:	e8 8b e9 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012181b:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0121822:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121825:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012182b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012182e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121835:	eb 0e                	jmp    f0121845 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0121837:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012183a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012183d:	01 d0                	add    %edx,%eax
f012183f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121842:	ff 45 f4             	incl   -0xc(%ebp)
f0121845:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012184b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012184e:	7f e7                	jg     f0121837 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121850:	e8 5b 9d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121855:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121858:	e8 47 1c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012185d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0121860:	83 ec 0c             	sub    $0xc,%esp
f0121863:	68 00 00 60 00       	push   $0x600000
f0121868:	e8 87 53 fe ff       	call   f0106bf4 <kmalloc>
f012186d:	83 c4 10             	add    $0x10,%esp
f0121870:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121876:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012187c:	89 c1                	mov    %eax,%ecx
f012187e:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0121885:	10 00 00 
f0121888:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012188d:	0f b6 d0             	movzbl %al,%edx
f0121890:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121896:	01 d0                	add    %edx,%eax
f0121898:	48                   	dec    %eax
f0121899:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012189f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01218a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01218aa:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01218b0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01218b6:	29 d0                	sub    %edx,%eax
f01218b8:	89 c3                	mov    %eax,%ebx
f01218ba:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01218c1:	10 00 00 
f01218c4:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01218c9:	0f b6 c0             	movzbl %al,%eax
f01218cc:	c1 e0 04             	shl    $0x4,%eax
f01218cf:	89 c2                	mov    %eax,%edx
f01218d1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01218d7:	01 d0                	add    %edx,%eax
f01218d9:	48                   	dec    %eax
f01218da:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01218e0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01218e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01218eb:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01218f1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01218f7:	29 d0                	sub    %edx,%eax
f01218f9:	01 c3                	add    %eax,%ebx
f01218fb:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0121902:	10 00 00 
f0121905:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012190b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121910:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0121916:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012191c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121921:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0121927:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012192d:	29 d0                	sub    %edx,%eax
f012192f:	01 d8                	add    %ebx,%eax
f0121931:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121936:	39 c1                	cmp    %eax,%ecx
f0121938:	74 17                	je     f0121951 <test_kshrink+0x94b>
f012193a:	83 ec 04             	sub    $0x4,%esp
f012193d:	68 a4 00 13 f0       	push   $0xf01300a4
f0121942:	68 e0 0b 00 00       	push   $0xbe0
f0121947:	68 be ff 12 f0       	push   $0xf012ffbe
f012194c:	e8 55 e8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121951:	e8 4e 1b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121956:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121959:	74 17                	je     f0121972 <test_kshrink+0x96c>
f012195b:	83 ec 04             	sub    $0x4,%esp
f012195e:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121963:	68 e1 0b 00 00       	push   $0xbe1
f0121968:	68 be ff 12 f0       	push   $0xf012ffbe
f012196d:	e8 34 e8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121972:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0121975:	e8 36 9c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012197a:	29 c3                	sub    %eax,%ebx
f012197c:	89 d8                	mov    %ebx,%eax
f012197e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121983:	74 17                	je     f012199c <test_kshrink+0x996>
f0121985:	83 ec 04             	sub    $0x4,%esp
f0121988:	68 40 00 13 f0       	push   $0xf0130040
f012198d:	68 e2 0b 00 00       	push   $0xbe2
f0121992:	68 be ff 12 f0       	push   $0xf012ffbe
f0121997:	e8 0a e8 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f012199c:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01219a3:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01219a6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01219ac:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01219b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01219b9:	eb 1a                	jmp    f01219d5 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f01219bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01219be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01219c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01219cb:	01 c2                	add    %eax,%edx
f01219cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01219d0:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01219d2:	ff 45 f4             	incl   -0xc(%ebp)
f01219d5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01219db:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01219de:	7d db                	jge    f01219bb <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01219e0:	e8 cb 9b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01219e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219e8:	e8 b7 1a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01219ed:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f01219f0:	83 ec 0c             	sub    $0xc,%esp
f01219f3:	68 00 00 50 00       	push   $0x500000
f01219f8:	e8 79 52 fe ff       	call   f0106c76 <kshrink>
f01219fd:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0121a00:	e8 9f 1a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121a05:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121a08:	74 19                	je     f0121a23 <test_kshrink+0xa1d>
f0121a0a:	68 14 0d 13 f0       	push   $0xf0130d14
f0121a0f:	68 45 0d 13 f0       	push   $0xf0130d45
f0121a14:	68 f2 0b 00 00       	push   $0xbf2
f0121a19:	68 be ff 12 f0       	push   $0xf012ffbe
f0121a1e:	e8 83 e7 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0121a23:	e8 88 9b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121a28:	89 c2                	mov    %eax,%edx
f0121a2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0121a2d:	29 c2                	sub    %eax,%edx
f0121a2f:	89 d0                	mov    %edx,%eax
f0121a31:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121a36:	74 19                	je     f0121a51 <test_kshrink+0xa4b>
f0121a38:	68 20 0e 13 f0       	push   $0xf0130e20
f0121a3d:	68 45 0d 13 f0       	push   $0xf0130d45
f0121a42:	68 f3 0b 00 00       	push   $0xbf3
f0121a47:	68 be ff 12 f0       	push   $0xf012ffbe
f0121a4c:	e8 55 e7 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0121a51:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0121a58:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0121a5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a62:	eb 37                	jmp    f0121a9b <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0121a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121a67:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121a6e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121a74:	01 d0                	add    %edx,%eax
f0121a76:	8b 10                	mov    (%eax),%edx
f0121a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121a7b:	39 c2                	cmp    %eax,%edx
f0121a7d:	74 19                	je     f0121a98 <test_kshrink+0xa92>
f0121a7f:	68 50 0e 13 f0       	push   $0xf0130e50
f0121a84:	68 45 0d 13 f0       	push   $0xf0130d45
f0121a89:	68 fb 0b 00 00       	push   $0xbfb
f0121a8e:	68 be ff 12 f0       	push   $0xf012ffbe
f0121a93:	e8 0e e7 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0121a98:	ff 45 f4             	incl   -0xc(%ebp)
f0121a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121a9e:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0121aa4:	7e be                	jle    f0121a64 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121aa6:	83 ec 0c             	sub    $0xc,%esp
f0121aa9:	6a 03                	push   $0x3
f0121aab:	e8 a9 9f fe ff       	call   f010ba59 <sys_bypassPageFault>
f0121ab0:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0121ab3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121ab9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0121abc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121abf:	05 00 00 50 00       	add    $0x500000,%eax
f0121ac4:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0121ac7:	e8 7b 9f fe ff       	call   f010ba47 <sys_rcr2>
f0121acc:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0121acf:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0121ad5:	39 d0                	cmp    %edx,%eax
f0121ad7:	74 19                	je     f0121af2 <test_kshrink+0xaec>
f0121ad9:	68 5c 0e 13 f0       	push   $0xf0130e5c
f0121ade:	68 45 0d 13 f0       	push   $0xf0130d45
f0121ae3:	68 04 0c 00 00       	push   $0xc04
f0121ae8:	68 be ff 12 f0       	push   $0xf012ffbe
f0121aed:	e8 b4 e6 fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0121af2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121af5:	05 00 10 50 00       	add    $0x501000,%eax
f0121afa:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0121afd:	e8 45 9f fe ff       	call   f010ba47 <sys_rcr2>
f0121b02:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0121b05:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0121b0b:	39 d0                	cmp    %edx,%eax
f0121b0d:	74 19                	je     f0121b28 <test_kshrink+0xb22>
f0121b0f:	68 84 0e 13 f0       	push   $0xf0130e84
f0121b14:	68 45 0d 13 f0       	push   $0xf0130d45
f0121b19:	68 07 0c 00 00       	push   $0xc07
f0121b1e:	68 be ff 12 f0       	push   $0xf012ffbe
f0121b23:	e8 7e e6 fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f0121b28:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121b2b:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0121b30:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0121b33:	e8 0f 9f fe ff       	call   f010ba47 <sys_rcr2>
f0121b38:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0121b3b:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0121b41:	39 d0                	cmp    %edx,%eax
f0121b43:	74 19                	je     f0121b5e <test_kshrink+0xb58>
f0121b45:	68 b0 0e 13 f0       	push   $0xf0130eb0
f0121b4a:	68 45 0d 13 f0       	push   $0xf0130d45
f0121b4f:	68 0a 0c 00 00       	push   $0xc0a
f0121b54:	68 be ff 12 f0       	push   $0xf012ffbe
f0121b59:	e8 48 e6 fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121b5e:	83 ec 0c             	sub    $0xc,%esp
f0121b61:	6a 00                	push   $0x0
f0121b63:	e8 f1 9e fe ff       	call   f010ba59 <sys_bypassPageFault>
f0121b68:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0121b6b:	e8 40 9a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121b70:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b73:	e8 2c 19 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121b78:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0121b7b:	83 ec 0c             	sub    $0xc,%esp
f0121b7e:	68 00 00 20 00       	push   $0x200000
f0121b83:	e8 ee 50 fe ff       	call   f0106c76 <kshrink>
f0121b88:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0121b8b:	e8 14 19 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121b90:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121b93:	74 19                	je     f0121bae <test_kshrink+0xba8>
f0121b95:	68 14 0d 13 f0       	push   $0xf0130d14
f0121b9a:	68 45 0d 13 f0       	push   $0xf0130d45
f0121b9f:	68 17 0c 00 00       	push   $0xc17
f0121ba4:	68 be ff 12 f0       	push   $0xf012ffbe
f0121ba9:	e8 f8 e5 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0121bae:	e8 fd 99 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121bb3:	89 c2                	mov    %eax,%edx
f0121bb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0121bb8:	29 c2                	sub    %eax,%edx
f0121bba:	89 d0                	mov    %edx,%eax
f0121bbc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121bc1:	74 19                	je     f0121bdc <test_kshrink+0xbd6>
f0121bc3:	68 dc 0e 13 f0       	push   $0xf0130edc
f0121bc8:	68 45 0d 13 f0       	push   $0xf0130d45
f0121bcd:	68 18 0c 00 00       	push   $0xc18
f0121bd2:	68 be ff 12 f0       	push   $0xf012ffbe
f0121bd7:	e8 ca e5 fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0121bdc:	e8 cf 99 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121be1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121be4:	e8 bb 18 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121be9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0121bec:	83 ec 0c             	sub    $0xc,%esp
f0121bef:	68 00 00 40 00       	push   $0x400000
f0121bf4:	e8 fb 4f fe ff       	call   f0106bf4 <kmalloc>
f0121bf9:	83 c4 10             	add    $0x10,%esp
f0121bfc:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0121c02:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0121c09:	10 00 00 
f0121c0c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121c11:	0f b6 d0             	movzbl %al,%edx
f0121c14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121c1a:	01 d0                	add    %edx,%eax
f0121c1c:	48                   	dec    %eax
f0121c1d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0121c23:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121c29:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c2e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0121c34:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121c3a:	29 d0                	sub    %edx,%eax
f0121c3c:	89 c1                	mov    %eax,%ecx
f0121c3e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0121c45:	10 00 00 
f0121c48:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121c4d:	0f b6 c0             	movzbl %al,%eax
f0121c50:	c1 e0 04             	shl    $0x4,%eax
f0121c53:	89 c2                	mov    %eax,%edx
f0121c55:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121c5b:	01 d0                	add    %edx,%eax
f0121c5d:	48                   	dec    %eax
f0121c5e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0121c64:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0121c6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c6f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0121c75:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0121c7b:	29 d0                	sub    %edx,%eax
f0121c7d:	01 c1                	add    %eax,%ecx
f0121c7f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0121c86:	10 00 00 
f0121c89:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121c8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c94:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0121c9a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121ca0:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ca5:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0121cab:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121cb1:	29 d0                	sub    %edx,%eax
f0121cb3:	01 c8                	add    %ecx,%eax
f0121cb5:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0121cbb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121cc1:	83 ec 04             	sub    $0x4,%esp
f0121cc4:	52                   	push   %edx
f0121cc5:	50                   	push   %eax
f0121cc6:	68 0c 0f 13 f0       	push   $0xf0130f0c
f0121ccb:	e8 5d ef fd ff       	call   f0100c2d <cprintf>
f0121cd0:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0121cd3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121cd9:	89 c1                	mov    %eax,%ecx
f0121cdb:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0121ce2:	10 00 00 
f0121ce5:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121cea:	0f b6 d0             	movzbl %al,%edx
f0121ced:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121cf3:	01 d0                	add    %edx,%eax
f0121cf5:	48                   	dec    %eax
f0121cf6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0121cfc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121d02:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d07:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0121d0d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121d13:	29 d0                	sub    %edx,%eax
f0121d15:	89 c3                	mov    %eax,%ebx
f0121d17:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0121d1e:	10 00 00 
f0121d21:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121d26:	0f b6 c0             	movzbl %al,%eax
f0121d29:	c1 e0 04             	shl    $0x4,%eax
f0121d2c:	89 c2                	mov    %eax,%edx
f0121d2e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0121d34:	01 d0                	add    %edx,%eax
f0121d36:	48                   	dec    %eax
f0121d37:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0121d3d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121d43:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d48:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0121d4e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121d54:	29 d0                	sub    %edx,%eax
f0121d56:	01 c3                	add    %eax,%ebx
f0121d58:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0121d5f:	10 00 00 
f0121d62:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121d68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121d6d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0121d73:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d7e:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0121d84:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121d8a:	29 d0                	sub    %edx,%eax
f0121d8c:	01 d8                	add    %ebx,%eax
f0121d8e:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0121d93:	39 c1                	cmp    %eax,%ecx
f0121d95:	74 17                	je     f0121dae <test_kshrink+0xda8>
f0121d97:	83 ec 04             	sub    $0x4,%esp
f0121d9a:	68 28 0f 13 f0       	push   $0xf0130f28
f0121d9f:	68 23 0c 00 00       	push   $0xc23
f0121da4:	68 be ff 12 f0       	push   $0xf012ffbe
f0121da9:	e8 f8 e3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121dae:	e8 f1 16 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121db3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121db6:	74 17                	je     f0121dcf <test_kshrink+0xdc9>
f0121db8:	83 ec 04             	sub    $0x4,%esp
f0121dbb:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121dc0:	68 24 0c 00 00       	push   $0xc24
f0121dc5:	68 be ff 12 f0       	push   $0xf012ffbe
f0121dca:	e8 d7 e3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121dcf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0121dd2:	e8 d9 97 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121dd7:	29 c3                	sub    %eax,%ebx
f0121dd9:	89 d8                	mov    %ebx,%eax
f0121ddb:	3d 00 04 00 00       	cmp    $0x400,%eax
f0121de0:	74 17                	je     f0121df9 <test_kshrink+0xdf3>
f0121de2:	83 ec 04             	sub    $0x4,%esp
f0121de5:	68 40 00 13 f0       	push   $0xf0130040
f0121dea:	68 25 0c 00 00       	push   $0xc25
f0121def:	68 be ff 12 f0       	push   $0xf012ffbe
f0121df4:	e8 ad e3 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0121df9:	e8 b2 97 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121dfe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e01:	e8 9e 16 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121e06:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0121e09:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121e0f:	83 ec 0c             	sub    $0xc,%esp
f0121e12:	50                   	push   %eax
f0121e13:	e8 f6 4d fe ff       	call   f0106c0e <kfree>
f0121e18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e1b:	e8 84 16 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121e20:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121e23:	74 17                	je     f0121e3c <test_kshrink+0xe36>
f0121e25:	83 ec 04             	sub    $0x4,%esp
f0121e28:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0121e2d:	68 2f 0c 00 00       	push   $0xc2f
f0121e32:	68 be ff 12 f0       	push   $0xf012ffbe
f0121e37:	e8 6a e3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121e3c:	e8 6f 97 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121e41:	89 c2                	mov    %eax,%edx
f0121e43:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0121e46:	29 c2                	sub    %eax,%edx
f0121e48:	89 d0                	mov    %edx,%eax
f0121e4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121e4f:	74 17                	je     f0121e68 <test_kshrink+0xe62>
f0121e51:	83 ec 04             	sub    $0x4,%esp
f0121e54:	68 70 08 13 f0       	push   $0xf0130870
f0121e59:	68 30 0c 00 00       	push   $0xc30
f0121e5e:	68 be ff 12 f0       	push   $0xf012ffbe
f0121e63:	e8 3e e3 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0121e68:	e8 43 97 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121e6d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e70:	e8 2f 16 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121e75:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0121e78:	83 ec 0c             	sub    $0xc,%esp
f0121e7b:	68 00 b0 3f 00       	push   $0x3fb000
f0121e80:	e8 f1 4d fe ff       	call   f0106c76 <kshrink>
f0121e85:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0121e88:	e8 17 16 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121e8d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0121e90:	74 19                	je     f0121eab <test_kshrink+0xea5>
f0121e92:	68 14 0d 13 f0       	push   $0xf0130d14
f0121e97:	68 45 0d 13 f0       	push   $0xf0130d45
f0121e9c:	68 3a 0c 00 00       	push   $0xc3a
f0121ea1:	68 be ff 12 f0       	push   $0xf012ffbe
f0121ea6:	e8 fb e2 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0121eab:	e8 00 97 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121eb0:	89 c2                	mov    %eax,%edx
f0121eb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0121eb5:	29 c2                	sub    %eax,%edx
f0121eb7:	89 d0                	mov    %edx,%eax
f0121eb9:	83 f8 05             	cmp    $0x5,%eax
f0121ebc:	74 19                	je     f0121ed7 <test_kshrink+0xed1>
f0121ebe:	68 7c 0f 13 f0       	push   $0xf0130f7c
f0121ec3:	68 45 0d 13 f0       	push   $0xf0130d45
f0121ec8:	68 3b 0c 00 00       	push   $0xc3b
f0121ecd:	68 be ff 12 f0       	push   $0xf012ffbe
f0121ed2:	e8 cf e2 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0121ed7:	83 ec 0c             	sub    $0xc,%esp
f0121eda:	68 d8 0c 13 f0       	push   $0xf0130cd8
f0121edf:	e8 49 ed fd ff       	call   f0100c2d <cprintf>
f0121ee4:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121ee7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0121eec:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121eef:	5b                   	pop    %ebx
f0121ef0:	5f                   	pop    %edi
f0121ef1:	5d                   	pop    %ebp
f0121ef2:	c3                   	ret    

f0121ef3 <test_kfreelast>:


int test_kfreelast()
{
f0121ef3:	55                   	push   %ebp
f0121ef4:	89 e5                	mov    %esp,%ebp
f0121ef6:	57                   	push   %edi
f0121ef7:	53                   	push   %ebx
f0121ef8:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0121efe:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0121f02:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0121f06:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0121f0c:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0121f12:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121f19:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121f20:	e8 8b 96 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121f25:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121f28:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0121f2e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121f33:	b8 00 00 00 00       	mov    $0x0,%eax
f0121f38:	89 d7                	mov    %edx,%edi
f0121f3a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121f3c:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0121f42:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121f47:	b8 00 00 00 00       	mov    $0x0,%eax
f0121f4c:	89 d7                	mov    %edx,%edi
f0121f4e:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121f50:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0121f56:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121f5b:	b8 00 00 00 00       	mov    $0x0,%eax
f0121f60:	89 d7                	mov    %edx,%edi
f0121f62:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f64:	e8 47 96 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0121f69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f6c:	e8 33 15 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0121f71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121f74:	83 ec 0c             	sub    $0xc,%esp
f0121f77:	68 00 fc 1f 00       	push   $0x1ffc00
f0121f7c:	e8 73 4c fe ff       	call   f0106bf4 <kmalloc>
f0121f81:	83 c4 10             	add    $0x10,%esp
f0121f84:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f8a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121f90:	89 c1                	mov    %eax,%ecx
f0121f92:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0121f99:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121f9e:	0f b6 d0             	movzbl %al,%edx
f0121fa1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0121fa4:	01 d0                	add    %edx,%eax
f0121fa6:	48                   	dec    %eax
f0121fa7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0121faa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121fad:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fb2:	f7 75 cc             	divl   -0x34(%ebp)
f0121fb5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121fb8:	29 d0                	sub    %edx,%eax
f0121fba:	89 c3                	mov    %eax,%ebx
f0121fbc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0121fc3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0121fc8:	0f b6 c0             	movzbl %al,%eax
f0121fcb:	c1 e0 04             	shl    $0x4,%eax
f0121fce:	89 c2                	mov    %eax,%edx
f0121fd0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121fd3:	01 d0                	add    %edx,%eax
f0121fd5:	48                   	dec    %eax
f0121fd6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0121fd9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121fdc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fe1:	f7 75 c4             	divl   -0x3c(%ebp)
f0121fe4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121fe7:	29 d0                	sub    %edx,%eax
f0121fe9:	01 c3                	add    %eax,%ebx
f0121feb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0121ff2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121ff5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121ffa:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0121ffd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122000:	ba 00 00 00 00       	mov    $0x0,%edx
f0122005:	f7 75 bc             	divl   -0x44(%ebp)
f0122008:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012200b:	29 d0                	sub    %edx,%eax
f012200d:	01 d8                	add    %ebx,%eax
f012200f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122014:	39 c1                	cmp    %eax,%ecx
f0122016:	74 17                	je     f012202f <test_kfreelast+0x13c>
f0122018:	83 ec 04             	sub    $0x4,%esp
f012201b:	68 a4 00 13 f0       	push   $0xf01300a4
f0122020:	68 5f 0c 00 00       	push   $0xc5f
f0122025:	68 be ff 12 f0       	push   $0xf012ffbe
f012202a:	e8 77 e1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012202f:	e8 70 14 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122034:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0122037:	74 17                	je     f0122050 <test_kfreelast+0x15d>
f0122039:	83 ec 04             	sub    $0x4,%esp
f012203c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122041:	68 60 0c 00 00       	push   $0xc60
f0122046:	68 be ff 12 f0       	push   $0xf012ffbe
f012204b:	e8 56 e1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122050:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122053:	e8 58 95 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122058:	29 c3                	sub    %eax,%ebx
f012205a:	89 d8                	mov    %ebx,%eax
f012205c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122061:	74 17                	je     f012207a <test_kfreelast+0x187>
f0122063:	83 ec 04             	sub    $0x4,%esp
f0122066:	68 40 00 13 f0       	push   $0xf0130040
f012206b:	68 61 0c 00 00       	push   $0xc61
f0122070:	68 be ff 12 f0       	push   $0xf012ffbe
f0122075:	e8 2c e1 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012207a:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0122081:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122084:	e8 27 95 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122089:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012208c:	e8 13 14 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122091:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122094:	83 ec 0c             	sub    $0xc,%esp
f0122097:	68 00 fc 1f 00       	push   $0x1ffc00
f012209c:	e8 53 4b fe ff       	call   f0106bf4 <kmalloc>
f01220a1:	83 c4 10             	add    $0x10,%esp
f01220a4:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01220aa:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01220b0:	89 c1                	mov    %eax,%ecx
f01220b2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01220b9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01220be:	0f b6 d0             	movzbl %al,%edx
f01220c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01220c4:	01 d0                	add    %edx,%eax
f01220c6:	48                   	dec    %eax
f01220c7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01220ca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01220cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01220d2:	f7 75 b4             	divl   -0x4c(%ebp)
f01220d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01220d8:	29 d0                	sub    %edx,%eax
f01220da:	89 c3                	mov    %eax,%ebx
f01220dc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01220e3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01220e8:	0f b6 c0             	movzbl %al,%eax
f01220eb:	c1 e0 04             	shl    $0x4,%eax
f01220ee:	89 c2                	mov    %eax,%edx
f01220f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01220f3:	01 d0                	add    %edx,%eax
f01220f5:	48                   	dec    %eax
f01220f6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01220f9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01220fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122101:	f7 75 ac             	divl   -0x54(%ebp)
f0122104:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122107:	29 d0                	sub    %edx,%eax
f0122109:	01 c3                	add    %eax,%ebx
f012210b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0122112:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122115:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012211a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012211d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122120:	ba 00 00 00 00       	mov    $0x0,%edx
f0122125:	f7 75 a4             	divl   -0x5c(%ebp)
f0122128:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012212b:	29 d0                	sub    %edx,%eax
f012212d:	01 d8                	add    %ebx,%eax
f012212f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122134:	39 c1                	cmp    %eax,%ecx
f0122136:	74 17                	je     f012214f <test_kfreelast+0x25c>
f0122138:	83 ec 04             	sub    $0x4,%esp
f012213b:	68 a4 00 13 f0       	push   $0xf01300a4
f0122140:	68 68 0c 00 00       	push   $0xc68
f0122145:	68 be ff 12 f0       	push   $0xf012ffbe
f012214a:	e8 57 e0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012214f:	e8 50 13 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122154:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0122157:	74 17                	je     f0122170 <test_kfreelast+0x27d>
f0122159:	83 ec 04             	sub    $0x4,%esp
f012215c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122161:	68 69 0c 00 00       	push   $0xc69
f0122166:	68 be ff 12 f0       	push   $0xf012ffbe
f012216b:	e8 36 e0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122170:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122173:	e8 38 94 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122178:	29 c3                	sub    %eax,%ebx
f012217a:	89 d8                	mov    %ebx,%eax
f012217c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122181:	74 17                	je     f012219a <test_kfreelast+0x2a7>
f0122183:	83 ec 04             	sub    $0x4,%esp
f0122186:	68 40 00 13 f0       	push   $0xf0130040
f012218b:	68 6a 0c 00 00       	push   $0xc6a
f0122190:	68 be ff 12 f0       	push   $0xf012ffbe
f0122195:	e8 0c e0 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012219a:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f01221a1:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01221a4:	e8 07 94 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01221a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221ac:	e8 f3 12 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01221b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01221b4:	83 ec 0c             	sub    $0xc,%esp
f01221b7:	68 00 08 00 00       	push   $0x800
f01221bc:	e8 33 4a fe ff       	call   f0106bf4 <kmalloc>
f01221c1:	83 c4 10             	add    $0x10,%esp
f01221c4:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01221ca:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01221d0:	89 c1                	mov    %eax,%ecx
f01221d2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01221d9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01221de:	0f b6 d0             	movzbl %al,%edx
f01221e1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01221e4:	01 d0                	add    %edx,%eax
f01221e6:	48                   	dec    %eax
f01221e7:	89 45 98             	mov    %eax,-0x68(%ebp)
f01221ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01221ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01221f2:	f7 75 9c             	divl   -0x64(%ebp)
f01221f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01221f8:	29 d0                	sub    %edx,%eax
f01221fa:	89 c3                	mov    %eax,%ebx
f01221fc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0122203:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122208:	0f b6 c0             	movzbl %al,%eax
f012220b:	c1 e0 04             	shl    $0x4,%eax
f012220e:	89 c2                	mov    %eax,%edx
f0122210:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122213:	01 d0                	add    %edx,%eax
f0122215:	48                   	dec    %eax
f0122216:	89 45 90             	mov    %eax,-0x70(%ebp)
f0122219:	8b 45 90             	mov    -0x70(%ebp),%eax
f012221c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122221:	f7 75 94             	divl   -0x6c(%ebp)
f0122224:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122227:	29 d0                	sub    %edx,%eax
f0122229:	01 c3                	add    %eax,%ebx
f012222b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0122232:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122235:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012223a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012223d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122240:	ba 00 00 00 00       	mov    $0x0,%edx
f0122245:	f7 75 8c             	divl   -0x74(%ebp)
f0122248:	8b 45 88             	mov    -0x78(%ebp),%eax
f012224b:	29 d0                	sub    %edx,%eax
f012224d:	01 d8                	add    %ebx,%eax
f012224f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122254:	39 c1                	cmp    %eax,%ecx
f0122256:	74 17                	je     f012226f <test_kfreelast+0x37c>
f0122258:	83 ec 04             	sub    $0x4,%esp
f012225b:	68 a4 00 13 f0       	push   $0xf01300a4
f0122260:	68 71 0c 00 00       	push   $0xc71
f0122265:	68 be ff 12 f0       	push   $0xf012ffbe
f012226a:	e8 37 df fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012226f:	e8 30 12 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122274:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0122277:	74 17                	je     f0122290 <test_kfreelast+0x39d>
f0122279:	83 ec 04             	sub    $0x4,%esp
f012227c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122281:	68 72 0c 00 00       	push   $0xc72
f0122286:	68 be ff 12 f0       	push   $0xf012ffbe
f012228b:	e8 16 df fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122290:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122293:	e8 18 93 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122298:	29 c3                	sub    %eax,%ebx
f012229a:	89 d8                	mov    %ebx,%eax
f012229c:	83 f8 01             	cmp    $0x1,%eax
f012229f:	74 17                	je     f01222b8 <test_kfreelast+0x3c5>
f01222a1:	83 ec 04             	sub    $0x4,%esp
f01222a4:	68 40 00 13 f0       	push   $0xf0130040
f01222a9:	68 73 0c 00 00       	push   $0xc73
f01222ae:	68 be ff 12 f0       	push   $0xf012ffbe
f01222b3:	e8 ee de fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01222b8:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f01222bf:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01222c2:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01222c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01222cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01222d2:	eb 0e                	jmp    f01222e2 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01222d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01222d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01222da:	01 d0                	add    %edx,%eax
f01222dc:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01222df:	ff 45 f4             	incl   -0xc(%ebp)
f01222e2:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01222e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01222eb:	7f e7                	jg     f01222d4 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01222ed:	e8 be 92 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01222f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222f5:	e8 aa 11 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01222fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01222fd:	83 ec 0c             	sub    $0xc,%esp
f0122300:	68 00 08 00 00       	push   $0x800
f0122305:	e8 ea 48 fe ff       	call   f0106bf4 <kmalloc>
f012230a:	83 c4 10             	add    $0x10,%esp
f012230d:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122313:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0122319:	89 c1                	mov    %eax,%ecx
f012231b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122322:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122327:	0f b6 d0             	movzbl %al,%edx
f012232a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012232d:	01 d0                	add    %edx,%eax
f012232f:	48                   	dec    %eax
f0122330:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122336:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012233c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122341:	f7 75 80             	divl   -0x80(%ebp)
f0122344:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012234a:	29 d0                	sub    %edx,%eax
f012234c:	89 c3                	mov    %eax,%ebx
f012234e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122355:	10 00 00 
f0122358:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012235d:	0f b6 c0             	movzbl %al,%eax
f0122360:	c1 e0 04             	shl    $0x4,%eax
f0122363:	89 c2                	mov    %eax,%edx
f0122365:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012236b:	01 d0                	add    %edx,%eax
f012236d:	48                   	dec    %eax
f012236e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122374:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012237a:	ba 00 00 00 00       	mov    $0x0,%edx
f012237f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122385:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012238b:	29 d0                	sub    %edx,%eax
f012238d:	01 c3                	add    %eax,%ebx
f012238f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122396:	10 00 00 
f0122399:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012239f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01223a4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01223aa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01223b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01223b5:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01223bb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01223c1:	29 d0                	sub    %edx,%eax
f01223c3:	01 d8                	add    %ebx,%eax
f01223c5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01223ca:	39 c1                	cmp    %eax,%ecx
f01223cc:	74 17                	je     f01223e5 <test_kfreelast+0x4f2>
f01223ce:	83 ec 04             	sub    $0x4,%esp
f01223d1:	68 a4 00 13 f0       	push   $0xf01300a4
f01223d6:	68 7f 0c 00 00       	push   $0xc7f
f01223db:	68 be ff 12 f0       	push   $0xf012ffbe
f01223e0:	e8 c1 dd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223e5:	e8 ba 10 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01223ea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01223ed:	74 17                	je     f0122406 <test_kfreelast+0x513>
f01223ef:	83 ec 04             	sub    $0x4,%esp
f01223f2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01223f7:	68 80 0c 00 00       	push   $0xc80
f01223fc:	68 be ff 12 f0       	push   $0xf012ffbe
f0122401:	e8 a0 dd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122406:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122409:	e8 a2 91 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012240e:	29 c3                	sub    %eax,%ebx
f0122410:	89 d8                	mov    %ebx,%eax
f0122412:	83 f8 01             	cmp    $0x1,%eax
f0122415:	74 17                	je     f012242e <test_kfreelast+0x53b>
f0122417:	83 ec 04             	sub    $0x4,%esp
f012241a:	68 40 00 13 f0       	push   $0xf0130040
f012241f:	68 81 0c 00 00       	push   $0xc81
f0122424:	68 be ff 12 f0       	push   $0xf012ffbe
f0122429:	e8 78 dd fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012242e:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0122435:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122438:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012243e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122441:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122448:	eb 0e                	jmp    f0122458 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012244a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012244d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122450:	01 d0                	add    %edx,%eax
f0122452:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122455:	ff 45 f4             	incl   -0xc(%ebp)
f0122458:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012245e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122461:	7f e7                	jg     f012244a <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122463:	e8 48 91 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122468:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012246b:	e8 34 10 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122470:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122473:	83 ec 0c             	sub    $0xc,%esp
f0122476:	68 00 1c 00 00       	push   $0x1c00
f012247b:	e8 74 47 fe ff       	call   f0106bf4 <kmalloc>
f0122480:	83 c4 10             	add    $0x10,%esp
f0122483:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122489:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012248f:	89 c1                	mov    %eax,%ecx
f0122491:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122498:	10 00 00 
f012249b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01224a0:	0f b6 d0             	movzbl %al,%edx
f01224a3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01224a9:	01 d0                	add    %edx,%eax
f01224ab:	48                   	dec    %eax
f01224ac:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01224b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01224b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01224bd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01224c3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01224c9:	29 d0                	sub    %edx,%eax
f01224cb:	89 c3                	mov    %eax,%ebx
f01224cd:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01224d4:	10 00 00 
f01224d7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01224dc:	0f b6 c0             	movzbl %al,%eax
f01224df:	c1 e0 04             	shl    $0x4,%eax
f01224e2:	89 c2                	mov    %eax,%edx
f01224e4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01224ea:	01 d0                	add    %edx,%eax
f01224ec:	48                   	dec    %eax
f01224ed:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01224f3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01224f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01224fe:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0122504:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012250a:	29 d0                	sub    %edx,%eax
f012250c:	01 c3                	add    %eax,%ebx
f012250e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0122515:	10 00 00 
f0122518:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012251e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122523:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0122529:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012252f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122534:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012253a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122540:	29 d0                	sub    %edx,%eax
f0122542:	01 d8                	add    %ebx,%eax
f0122544:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122549:	39 c1                	cmp    %eax,%ecx
f012254b:	74 17                	je     f0122564 <test_kfreelast+0x671>
f012254d:	83 ec 04             	sub    $0x4,%esp
f0122550:	68 a4 00 13 f0       	push   $0xf01300a4
f0122555:	68 8d 0c 00 00       	push   $0xc8d
f012255a:	68 be ff 12 f0       	push   $0xf012ffbe
f012255f:	e8 42 dc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122564:	e8 3b 0f fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122569:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012256c:	74 17                	je     f0122585 <test_kfreelast+0x692>
f012256e:	83 ec 04             	sub    $0x4,%esp
f0122571:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122576:	68 8e 0c 00 00       	push   $0xc8e
f012257b:	68 be ff 12 f0       	push   $0xf012ffbe
f0122580:	e8 21 dc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122585:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122588:	e8 23 90 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012258d:	29 c3                	sub    %eax,%ebx
f012258f:	89 d8                	mov    %ebx,%eax
f0122591:	83 f8 02             	cmp    $0x2,%eax
f0122594:	74 17                	je     f01225ad <test_kfreelast+0x6ba>
f0122596:	83 ec 04             	sub    $0x4,%esp
f0122599:	68 40 00 13 f0       	push   $0xf0130040
f012259e:	68 8f 0c 00 00       	push   $0xc8f
f01225a3:	68 be ff 12 f0       	push   $0xf012ffbe
f01225a8:	e8 f9 db fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01225ad:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f01225b4:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01225b7:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01225bd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01225c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01225c7:	eb 0e                	jmp    f01225d7 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f01225c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01225cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01225cf:	01 d0                	add    %edx,%eax
f01225d1:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01225d4:	ff 45 f4             	incl   -0xc(%ebp)
f01225d7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01225dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01225e0:	7f e7                	jg     f01225c9 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01225e2:	e8 c9 8f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01225e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225ea:	e8 b5 0e fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01225ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01225f2:	83 ec 0c             	sub    $0xc,%esp
f01225f5:	68 00 fc 2f 00       	push   $0x2ffc00
f01225fa:	e8 f5 45 fe ff       	call   f0106bf4 <kmalloc>
f01225ff:	83 c4 10             	add    $0x10,%esp
f0122602:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122608:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012260e:	89 c1                	mov    %eax,%ecx
f0122610:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0122617:	10 00 00 
f012261a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012261f:	0f b6 d0             	movzbl %al,%edx
f0122622:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122628:	01 d0                	add    %edx,%eax
f012262a:	48                   	dec    %eax
f012262b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0122631:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122637:	ba 00 00 00 00       	mov    $0x0,%edx
f012263c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0122642:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122648:	29 d0                	sub    %edx,%eax
f012264a:	89 c3                	mov    %eax,%ebx
f012264c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0122653:	10 00 00 
f0122656:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012265b:	0f b6 c0             	movzbl %al,%eax
f012265e:	c1 e0 04             	shl    $0x4,%eax
f0122661:	89 c2                	mov    %eax,%edx
f0122663:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122669:	01 d0                	add    %edx,%eax
f012266b:	48                   	dec    %eax
f012266c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0122672:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122678:	ba 00 00 00 00       	mov    $0x0,%edx
f012267d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0122683:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122689:	29 d0                	sub    %edx,%eax
f012268b:	01 c3                	add    %eax,%ebx
f012268d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0122694:	10 00 00 
f0122697:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012269d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01226a2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01226a8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01226ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01226b3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01226b9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01226bf:	29 d0                	sub    %edx,%eax
f01226c1:	01 d8                	add    %ebx,%eax
f01226c3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01226c8:	39 c1                	cmp    %eax,%ecx
f01226ca:	74 17                	je     f01226e3 <test_kfreelast+0x7f0>
f01226cc:	83 ec 04             	sub    $0x4,%esp
f01226cf:	68 a4 00 13 f0       	push   $0xf01300a4
f01226d4:	68 9b 0c 00 00       	push   $0xc9b
f01226d9:	68 be ff 12 f0       	push   $0xf012ffbe
f01226de:	e8 c3 da fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226e3:	e8 bc 0d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01226e8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01226eb:	74 17                	je     f0122704 <test_kfreelast+0x811>
f01226ed:	83 ec 04             	sub    $0x4,%esp
f01226f0:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01226f5:	68 9c 0c 00 00       	push   $0xc9c
f01226fa:	68 be ff 12 f0       	push   $0xf012ffbe
f01226ff:	e8 a2 da fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122704:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122707:	e8 a4 8e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012270c:	29 c3                	sub    %eax,%ebx
f012270e:	89 d8                	mov    %ebx,%eax
f0122710:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122715:	74 17                	je     f012272e <test_kfreelast+0x83b>
f0122717:	83 ec 04             	sub    $0x4,%esp
f012271a:	68 40 00 13 f0       	push   $0xf0130040
f012271f:	68 9d 0c 00 00       	push   $0xc9d
f0122724:	68 be ff 12 f0       	push   $0xf012ffbe
f0122729:	e8 78 da fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012272e:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0122735:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122738:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012273e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122741:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122748:	eb 0e                	jmp    f0122758 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012274a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012274d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122750:	01 d0                	add    %edx,%eax
f0122752:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122755:	ff 45 f4             	incl   -0xc(%ebp)
f0122758:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012275e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122761:	7f e7                	jg     f012274a <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122763:	e8 48 8e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122768:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012276b:	e8 34 0d fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122770:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122773:	83 ec 0c             	sub    $0xc,%esp
f0122776:	68 00 fc 5f 00       	push   $0x5ffc00
f012277b:	e8 74 44 fe ff       	call   f0106bf4 <kmalloc>
f0122780:	83 c4 10             	add    $0x10,%esp
f0122783:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122789:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012278f:	89 c1                	mov    %eax,%ecx
f0122791:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0122798:	10 00 00 
f012279b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01227a0:	0f b6 d0             	movzbl %al,%edx
f01227a3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01227a9:	01 d0                	add    %edx,%eax
f01227ab:	48                   	dec    %eax
f01227ac:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01227b2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01227b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01227bd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01227c3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01227c9:	29 d0                	sub    %edx,%eax
f01227cb:	89 c3                	mov    %eax,%ebx
f01227cd:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01227d4:	10 00 00 
f01227d7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01227dc:	0f b6 c0             	movzbl %al,%eax
f01227df:	c1 e0 04             	shl    $0x4,%eax
f01227e2:	89 c2                	mov    %eax,%edx
f01227e4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01227ea:	01 d0                	add    %edx,%eax
f01227ec:	48                   	dec    %eax
f01227ed:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01227f3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01227f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01227fe:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0122804:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012280a:	29 d0                	sub    %edx,%eax
f012280c:	01 c3                	add    %eax,%ebx
f012280e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0122815:	10 00 00 
f0122818:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012281e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122823:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0122829:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012282f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122834:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012283a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122840:	29 d0                	sub    %edx,%eax
f0122842:	01 d8                	add    %ebx,%eax
f0122844:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122849:	39 c1                	cmp    %eax,%ecx
f012284b:	74 17                	je     f0122864 <test_kfreelast+0x971>
f012284d:	83 ec 04             	sub    $0x4,%esp
f0122850:	68 a4 00 13 f0       	push   $0xf01300a4
f0122855:	68 a9 0c 00 00       	push   $0xca9
f012285a:	68 be ff 12 f0       	push   $0xf012ffbe
f012285f:	e8 42 d9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122864:	e8 3b 0c fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122869:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012286c:	74 17                	je     f0122885 <test_kfreelast+0x992>
f012286e:	83 ec 04             	sub    $0x4,%esp
f0122871:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122876:	68 aa 0c 00 00       	push   $0xcaa
f012287b:	68 be ff 12 f0       	push   $0xf012ffbe
f0122880:	e8 21 d9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122885:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122888:	e8 23 8d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012288d:	29 c3                	sub    %eax,%ebx
f012288f:	89 d8                	mov    %ebx,%eax
f0122891:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122896:	74 17                	je     f01228af <test_kfreelast+0x9bc>
f0122898:	83 ec 04             	sub    $0x4,%esp
f012289b:	68 40 00 13 f0       	push   $0xf0130040
f01228a0:	68 ab 0c 00 00       	push   $0xcab
f01228a5:	68 be ff 12 f0       	push   $0xf012ffbe
f01228aa:	e8 f7 d8 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01228af:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f01228b6:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01228b9:	e8 f2 8c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01228be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228c1:	e8 de 0b fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01228c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01228c9:	83 ec 0c             	sub    $0xc,%esp
f01228cc:	68 00 38 00 00       	push   $0x3800
f01228d1:	e8 1e 43 fe ff       	call   f0106bf4 <kmalloc>
f01228d6:	83 c4 10             	add    $0x10,%esp
f01228d9:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01228df:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f01228e5:	89 c1                	mov    %eax,%ecx
f01228e7:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01228ee:	10 00 00 
f01228f1:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01228f6:	0f b6 d0             	movzbl %al,%edx
f01228f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01228ff:	01 d0                	add    %edx,%eax
f0122901:	48                   	dec    %eax
f0122902:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0122908:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012290e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122913:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0122919:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012291f:	29 d0                	sub    %edx,%eax
f0122921:	89 c3                	mov    %eax,%ebx
f0122923:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012292a:	10 00 00 
f012292d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122932:	0f b6 c0             	movzbl %al,%eax
f0122935:	c1 e0 04             	shl    $0x4,%eax
f0122938:	89 c2                	mov    %eax,%edx
f012293a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122940:	01 d0                	add    %edx,%eax
f0122942:	48                   	dec    %eax
f0122943:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0122949:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012294f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122954:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012295a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122960:	29 d0                	sub    %edx,%eax
f0122962:	01 c3                	add    %eax,%ebx
f0122964:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012296b:	10 00 00 
f012296e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122974:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122979:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012297f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122985:	ba 00 00 00 00       	mov    $0x0,%edx
f012298a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0122990:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122996:	29 d0                	sub    %edx,%eax
f0122998:	01 d8                	add    %ebx,%eax
f012299a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012299f:	39 c1                	cmp    %eax,%ecx
f01229a1:	74 17                	je     f01229ba <test_kfreelast+0xac7>
f01229a3:	83 ec 04             	sub    $0x4,%esp
f01229a6:	68 a4 00 13 f0       	push   $0xf01300a4
f01229ab:	68 b2 0c 00 00       	push   $0xcb2
f01229b0:	68 be ff 12 f0       	push   $0xf012ffbe
f01229b5:	e8 ec d7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229ba:	e8 e5 0a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01229bf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01229c2:	74 17                	je     f01229db <test_kfreelast+0xae8>
f01229c4:	83 ec 04             	sub    $0x4,%esp
f01229c7:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01229cc:	68 b3 0c 00 00       	push   $0xcb3
f01229d1:	68 be ff 12 f0       	push   $0xf012ffbe
f01229d6:	e8 cb d7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01229db:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01229de:	e8 cd 8b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01229e3:	29 c3                	sub    %eax,%ebx
f01229e5:	89 d8                	mov    %ebx,%eax
f01229e7:	83 f8 04             	cmp    $0x4,%eax
f01229ea:	74 17                	je     f0122a03 <test_kfreelast+0xb10>
f01229ec:	83 ec 04             	sub    $0x4,%esp
f01229ef:	68 40 00 13 f0       	push   $0xf0130040
f01229f4:	68 b4 0c 00 00       	push   $0xcb4
f01229f9:	68 be ff 12 f0       	push   $0xf012ffbe
f01229fe:	e8 a3 d7 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122a03:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0122a0a:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122a0d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0122a13:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122a16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a1d:	eb 0e                	jmp    f0122a2d <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0122a1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a22:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122a25:	01 d0                	add    %edx,%eax
f0122a27:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122a2a:	ff 45 f4             	incl   -0xc(%ebp)
f0122a2d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122a33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a36:	7f e7                	jg     f0122a1f <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122a38:	e8 73 8b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122a3d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122a43:	e8 5c 0a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122a48:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0122a4e:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122a54:	83 ec 0c             	sub    $0xc,%esp
f0122a57:	50                   	push   %eax
f0122a58:	e8 b1 41 fe ff       	call   f0106c0e <kfree>
f0122a5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a60:	e8 3f 0a fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122a65:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0122a6b:	74 17                	je     f0122a84 <test_kfreelast+0xb91>
f0122a6d:	83 ec 04             	sub    $0x4,%esp
f0122a70:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122a75:	68 c3 0c 00 00       	push   $0xcc3
f0122a7a:	68 be ff 12 f0       	push   $0xf012ffbe
f0122a7f:	e8 22 d7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a84:	e8 27 8b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122a89:	89 c2                	mov    %eax,%edx
f0122a8b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122a91:	29 c2                	sub    %eax,%edx
f0122a93:	89 d0                	mov    %edx,%eax
f0122a95:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122a9a:	74 17                	je     f0122ab3 <test_kfreelast+0xbc0>
f0122a9c:	83 ec 04             	sub    $0x4,%esp
f0122a9f:	68 48 07 13 f0       	push   $0xf0130748
f0122aa4:	68 c4 0c 00 00       	push   $0xcc4
f0122aa9:	68 be ff 12 f0       	push   $0xf012ffbe
f0122aae:	e8 f3 d6 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ab3:	e8 f8 8a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122ab8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122abe:	e8 e1 09 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122ac3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0122ac9:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0122acf:	83 ec 0c             	sub    $0xc,%esp
f0122ad2:	50                   	push   %eax
f0122ad3:	e8 36 41 fe ff       	call   f0106c0e <kfree>
f0122ad8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122adb:	e8 c4 09 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122ae0:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0122ae6:	74 17                	je     f0122aff <test_kfreelast+0xc0c>
f0122ae8:	83 ec 04             	sub    $0x4,%esp
f0122aeb:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122af0:	68 ca 0c 00 00       	push   $0xcca
f0122af5:	68 be ff 12 f0       	push   $0xf012ffbe
f0122afa:	e8 a7 d6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122aff:	e8 ac 8a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122b04:	89 c2                	mov    %eax,%edx
f0122b06:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122b0c:	29 c2                	sub    %eax,%edx
f0122b0e:	89 d0                	mov    %edx,%eax
f0122b10:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122b15:	74 17                	je     f0122b2e <test_kfreelast+0xc3b>
f0122b17:	83 ec 04             	sub    $0x4,%esp
f0122b1a:	68 48 07 13 f0       	push   $0xf0130748
f0122b1f:	68 cb 0c 00 00       	push   $0xccb
f0122b24:	68 be ff 12 f0       	push   $0xf012ffbe
f0122b29:	e8 78 d6 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b2e:	e8 7d 8a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122b33:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b39:	e8 66 09 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122b3e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0122b44:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0122b4a:	83 ec 0c             	sub    $0xc,%esp
f0122b4d:	50                   	push   %eax
f0122b4e:	e8 bb 40 fe ff       	call   f0106c0e <kfree>
f0122b53:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b56:	e8 49 09 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122b5b:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0122b61:	74 17                	je     f0122b7a <test_kfreelast+0xc87>
f0122b63:	83 ec 04             	sub    $0x4,%esp
f0122b66:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122b6b:	68 d1 0c 00 00       	push   $0xcd1
f0122b70:	68 be ff 12 f0       	push   $0xf012ffbe
f0122b75:	e8 2c d6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122b7a:	e8 31 8a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122b7f:	89 c2                	mov    %eax,%edx
f0122b81:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122b87:	29 c2                	sub    %eax,%edx
f0122b89:	89 d0                	mov    %edx,%eax
f0122b8b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122b90:	74 17                	je     f0122ba9 <test_kfreelast+0xcb6>
f0122b92:	83 ec 04             	sub    $0x4,%esp
f0122b95:	68 48 07 13 f0       	push   $0xf0130748
f0122b9a:	68 d2 0c 00 00       	push   $0xcd2
f0122b9f:	68 be ff 12 f0       	push   $0xf012ffbe
f0122ba4:	e8 fd d5 fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0122ba9:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0122baf:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122bb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122bb9:	eb 1e                	jmp    f0122bd9 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0122bbb:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0122bc1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122bc4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122bc7:	01 c8                	add    %ecx,%eax
f0122bc9:	8a 00                	mov    (%eax),%al
f0122bcb:	0f be c0             	movsbl %al,%eax
f0122bce:	01 d0                	add    %edx,%eax
f0122bd0:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122bd6:	ff 45 f4             	incl   -0xc(%ebp)
f0122bd9:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0122bdf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122be2:	7f d7                	jg     f0122bbb <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0122be4:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0122bea:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0122bf0:	01 c0                	add    %eax,%eax
f0122bf2:	39 c2                	cmp    %eax,%edx
f0122bf4:	74 17                	je     f0122c0d <test_kfreelast+0xd1a>
f0122bf6:	83 ec 04             	sub    $0x4,%esp
f0122bf9:	68 a4 07 13 f0       	push   $0xf01307a4
f0122bfe:	68 dd 0c 00 00       	push   $0xcdd
f0122c03:	68 be ff 12 f0       	push   $0xf012ffbe
f0122c08:	e8 99 d5 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122c0d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0122c13:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122c16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122c1d:	eb 1e                	jmp    f0122c3d <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f0122c1f:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0122c25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122c28:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122c2b:	01 c8                	add    %ecx,%eax
f0122c2d:	8a 00                	mov    (%eax),%al
f0122c2f:	0f be c0             	movsbl %al,%eax
f0122c32:	01 d0                	add    %edx,%eax
f0122c34:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122c3a:	ff 45 f4             	incl   -0xc(%ebp)
f0122c3d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0122c43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122c46:	7f d7                	jg     f0122c1f <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122c48:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0122c4e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0122c54:	89 c1                	mov    %eax,%ecx
f0122c56:	01 c9                	add    %ecx,%ecx
f0122c58:	01 c8                	add    %ecx,%eax
f0122c5a:	39 c2                	cmp    %eax,%edx
f0122c5c:	74 17                	je     f0122c75 <test_kfreelast+0xd82>
f0122c5e:	83 ec 04             	sub    $0x4,%esp
f0122c61:	68 a4 07 13 f0       	push   $0xf01307a4
f0122c66:	68 e5 0c 00 00       	push   $0xce5
f0122c6b:	68 be ff 12 f0       	push   $0xf012ffbe
f0122c70:	e8 31 d5 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122c75:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0122c7b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122c7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122c85:	eb 1e                	jmp    f0122ca5 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f0122c87:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f0122c8d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122c90:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122c93:	01 c8                	add    %ecx,%eax
f0122c95:	8a 00                	mov    (%eax),%al
f0122c97:	0f be c0             	movsbl %al,%eax
f0122c9a:	01 d0                	add    %edx,%eax
f0122c9c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122ca2:	ff 45 f4             	incl   -0xc(%ebp)
f0122ca5:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122cab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122cae:	7f d7                	jg     f0122c87 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122cb0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122cb6:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f0122cbc:	c1 e2 02             	shl    $0x2,%edx
f0122cbf:	39 d0                	cmp    %edx,%eax
f0122cc1:	74 17                	je     f0122cda <test_kfreelast+0xde7>
f0122cc3:	83 ec 04             	sub    $0x4,%esp
f0122cc6:	68 a4 07 13 f0       	push   $0xf01307a4
f0122ccb:	68 ed 0c 00 00       	push   $0xced
f0122cd0:	68 be ff 12 f0       	push   $0xf012ffbe
f0122cd5:	e8 cc d4 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122cda:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0122ce0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122ce3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122cea:	eb 1e                	jmp    f0122d0a <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f0122cec:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f0122cf2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122cf5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122cf8:	01 c8                	add    %ecx,%eax
f0122cfa:	8a 00                	mov    (%eax),%al
f0122cfc:	0f be c0             	movsbl %al,%eax
f0122cff:	01 d0                	add    %edx,%eax
f0122d01:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122d07:	ff 45 f4             	incl   -0xc(%ebp)
f0122d0a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122d10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d13:	7f d7                	jg     f0122cec <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122d15:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f0122d1b:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0122d21:	89 d0                	mov    %edx,%eax
f0122d23:	c1 e0 02             	shl    $0x2,%eax
f0122d26:	01 d0                	add    %edx,%eax
f0122d28:	39 c1                	cmp    %eax,%ecx
f0122d2a:	74 17                	je     f0122d43 <test_kfreelast+0xe50>
f0122d2c:	83 ec 04             	sub    $0x4,%esp
f0122d2f:	68 a4 07 13 f0       	push   $0xf01307a4
f0122d34:	68 f5 0c 00 00       	push   $0xcf5
f0122d39:	68 be ff 12 f0       	push   $0xf012ffbe
f0122d3e:	e8 63 d4 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122d43:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0122d49:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122d4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d53:	eb 1e                	jmp    f0122d73 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f0122d55:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f0122d5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122d5e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122d61:	01 c8                	add    %ecx,%eax
f0122d63:	8a 00                	mov    (%eax),%al
f0122d65:	0f be c0             	movsbl %al,%eax
f0122d68:	01 d0                	add    %edx,%eax
f0122d6a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122d70:	ff 45 f4             	incl   -0xc(%ebp)
f0122d73:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122d79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d7c:	7f d7                	jg     f0122d55 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122d7e:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f0122d84:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122d8a:	89 d0                	mov    %edx,%eax
f0122d8c:	01 c0                	add    %eax,%eax
f0122d8e:	01 d0                	add    %edx,%eax
f0122d90:	01 c0                	add    %eax,%eax
f0122d92:	01 d0                	add    %edx,%eax
f0122d94:	39 c1                	cmp    %eax,%ecx
f0122d96:	74 17                	je     f0122daf <test_kfreelast+0xebc>
f0122d98:	83 ec 04             	sub    $0x4,%esp
f0122d9b:	68 a4 07 13 f0       	push   $0xf01307a4
f0122da0:	68 fd 0c 00 00       	push   $0xcfd
f0122da5:	68 be ff 12 f0       	push   $0xf012ffbe
f0122daa:	e8 f7 d3 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122daf:	e8 fc 87 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122db4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122db7:	e8 e8 06 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122dbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0122dbf:	83 ec 0c             	sub    $0xc,%esp
f0122dc2:	68 00 50 00 00       	push   $0x5000
f0122dc7:	e8 28 3e fe ff       	call   f0106bf4 <kmalloc>
f0122dcc:	83 c4 10             	add    $0x10,%esp
f0122dcf:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122dd5:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0122ddb:	89 c1                	mov    %eax,%ecx
f0122ddd:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0122de4:	10 00 00 
f0122de7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122dec:	0f b6 d0             	movzbl %al,%edx
f0122def:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0122df5:	01 d0                	add    %edx,%eax
f0122df7:	48                   	dec    %eax
f0122df8:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0122dfe:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122e04:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e09:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0122e0f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122e15:	29 d0                	sub    %edx,%eax
f0122e17:	89 c3                	mov    %eax,%ebx
f0122e19:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0122e20:	10 00 00 
f0122e23:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122e28:	0f b6 c0             	movzbl %al,%eax
f0122e2b:	c1 e0 04             	shl    $0x4,%eax
f0122e2e:	89 c2                	mov    %eax,%edx
f0122e30:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122e36:	01 d0                	add    %edx,%eax
f0122e38:	48                   	dec    %eax
f0122e39:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0122e3f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122e45:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e4a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0122e50:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122e56:	29 d0                	sub    %edx,%eax
f0122e58:	01 c3                	add    %eax,%ebx
f0122e5a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0122e61:	10 00 00 
f0122e64:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122e6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e6f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0122e75:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122e7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e80:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0122e86:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122e8c:	29 d0                	sub    %edx,%eax
f0122e8e:	01 d8                	add    %ebx,%eax
f0122e90:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0122e95:	39 c1                	cmp    %eax,%ecx
f0122e97:	74 17                	je     f0122eb0 <test_kfreelast+0xfbd>
f0122e99:	83 ec 04             	sub    $0x4,%esp
f0122e9c:	68 a4 00 13 f0       	push   $0xf01300a4
f0122ea1:	68 06 0d 00 00       	push   $0xd06
f0122ea6:	68 be ff 12 f0       	push   $0xf012ffbe
f0122eab:	e8 f6 d2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122eb0:	e8 ef 05 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122eb5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0122eb8:	74 17                	je     f0122ed1 <test_kfreelast+0xfde>
f0122eba:	83 ec 04             	sub    $0x4,%esp
f0122ebd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0122ec2:	68 07 0d 00 00       	push   $0xd07
f0122ec7:	68 be ff 12 f0       	push   $0xf012ffbe
f0122ecc:	e8 d5 d2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ed1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0122ed4:	e8 d7 86 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122ed9:	29 c3                	sub    %eax,%ebx
f0122edb:	89 d8                	mov    %ebx,%eax
f0122edd:	83 f8 05             	cmp    $0x5,%eax
f0122ee0:	74 17                	je     f0122ef9 <test_kfreelast+0x1006>
f0122ee2:	83 ec 04             	sub    $0x4,%esp
f0122ee5:	68 40 00 13 f0       	push   $0xf0130040
f0122eea:	68 08 0d 00 00       	push   $0xd08
f0122eef:	68 be ff 12 f0       	push   $0xf012ffbe
f0122ef4:	e8 ad d2 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0122ef9:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f0122f00:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0122f03:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0122f09:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122f0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122f13:	eb 0e                	jmp    f0122f23 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f0122f15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122f18:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122f1b:	01 d0                	add    %edx,%eax
f0122f1d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122f20:	ff 45 f4             	incl   -0xc(%ebp)
f0122f23:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122f29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122f2c:	7f e7                	jg     f0122f15 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f2e:	e8 7d 86 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0122f33:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f36:	e8 69 05 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0122f3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0122f3e:	83 ec 0c             	sub    $0xc,%esp
f0122f41:	68 00 00 10 00       	push   $0x100000
f0122f46:	e8 a9 3c fe ff       	call   f0106bf4 <kmalloc>
f0122f4b:	83 c4 10             	add    $0x10,%esp
f0122f4e:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f54:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0122f5a:	89 c1                	mov    %eax,%ecx
f0122f5c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0122f63:	10 00 00 
f0122f66:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122f6b:	0f b6 d0             	movzbl %al,%edx
f0122f6e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122f74:	01 d0                	add    %edx,%eax
f0122f76:	48                   	dec    %eax
f0122f77:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0122f7d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122f83:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f88:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0122f8e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122f94:	29 d0                	sub    %edx,%eax
f0122f96:	89 c3                	mov    %eax,%ebx
f0122f98:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0122f9f:	10 00 00 
f0122fa2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0122fa7:	0f b6 c0             	movzbl %al,%eax
f0122faa:	c1 e0 04             	shl    $0x4,%eax
f0122fad:	89 c2                	mov    %eax,%edx
f0122faf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122fb5:	01 d0                	add    %edx,%eax
f0122fb7:	48                   	dec    %eax
f0122fb8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0122fbe:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122fc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fc9:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0122fcf:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122fd5:	29 d0                	sub    %edx,%eax
f0122fd7:	01 c3                	add    %eax,%ebx
f0122fd9:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0122fe0:	10 00 00 
f0122fe3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122fe9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122fee:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0122ff4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122ffa:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fff:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123005:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012300b:	29 d0                	sub    %edx,%eax
f012300d:	01 d8                	add    %ebx,%eax
f012300f:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0123014:	39 c1                	cmp    %eax,%ecx
f0123016:	74 17                	je     f012302f <test_kfreelast+0x113c>
f0123018:	83 ec 04             	sub    $0x4,%esp
f012301b:	68 a4 00 13 f0       	push   $0xf01300a4
f0123020:	68 14 0d 00 00       	push   $0xd14
f0123025:	68 be ff 12 f0       	push   $0xf012ffbe
f012302a:	e8 77 d1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012302f:	e8 70 04 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0123034:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123037:	74 17                	je     f0123050 <test_kfreelast+0x115d>
f0123039:	83 ec 04             	sub    $0x4,%esp
f012303c:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0123041:	68 15 0d 00 00       	push   $0xd15
f0123046:	68 be ff 12 f0       	push   $0xf012ffbe
f012304b:	e8 56 d1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123050:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0123053:	e8 58 85 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123058:	29 c3                	sub    %eax,%ebx
f012305a:	89 d8                	mov    %ebx,%eax
f012305c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123061:	74 17                	je     f012307a <test_kfreelast+0x1187>
f0123063:	83 ec 04             	sub    $0x4,%esp
f0123066:	68 40 00 13 f0       	push   $0xf0130040
f012306b:	68 16 0d 00 00       	push   $0xd16
f0123070:	68 be ff 12 f0       	push   $0xf012ffbe
f0123075:	e8 2c d1 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012307a:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f0123081:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0123084:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012308a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012308d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123094:	eb 0e                	jmp    f01230a4 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f0123096:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123099:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012309c:	01 d0                	add    %edx,%eax
f012309e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01230a1:	ff 45 f4             	incl   -0xc(%ebp)
f01230a4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01230aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01230ad:	7f e7                	jg     f0123096 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f01230af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01230b6:	e8 f5 84 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01230bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230be:	e8 e1 03 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01230c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f01230c6:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f01230cc:	83 ec 0c             	sub    $0xc,%esp
f01230cf:	50                   	push   %eax
f01230d0:	e8 39 3b fe ff       	call   f0106c0e <kfree>
f01230d5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230d8:	e8 c7 03 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01230dd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01230e0:	74 17                	je     f01230f9 <test_kfreelast+0x1206>
f01230e2:	83 ec 04             	sub    $0x4,%esp
f01230e5:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01230ea:	68 26 0d 00 00       	push   $0xd26
f01230ef:	68 be ff 12 f0       	push   $0xf012ffbe
f01230f4:	e8 ad d0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01230f9:	e8 b2 84 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01230fe:	89 c2                	mov    %eax,%edx
f0123100:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123103:	29 c2                	sub    %eax,%edx
f0123105:	89 d0                	mov    %edx,%eax
f0123107:	3d 00 01 00 00       	cmp    $0x100,%eax
f012310c:	74 17                	je     f0123125 <test_kfreelast+0x1232>
f012310e:	83 ec 04             	sub    $0x4,%esp
f0123111:	68 48 07 13 f0       	push   $0xf0130748
f0123116:	68 27 0d 00 00       	push   $0xd27
f012311b:	68 be ff 12 f0       	push   $0xf012ffbe
f0123120:	e8 81 d0 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0123125:	e8 86 84 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012312a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012312d:	e8 72 03 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0123132:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0123135:	83 ec 0c             	sub    $0xc,%esp
f0123138:	68 00 78 00 00       	push   $0x7800
f012313d:	e8 b2 3a fe ff       	call   f0106bf4 <kmalloc>
f0123142:	83 c4 10             	add    $0x10,%esp
f0123145:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012314b:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0123151:	89 c1                	mov    %eax,%ecx
f0123153:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012315a:	10 00 00 
f012315d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0123162:	0f b6 d0             	movzbl %al,%edx
f0123165:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012316b:	01 d0                	add    %edx,%eax
f012316d:	48                   	dec    %eax
f012316e:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123174:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012317a:	ba 00 00 00 00       	mov    $0x0,%edx
f012317f:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123185:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012318b:	29 d0                	sub    %edx,%eax
f012318d:	89 c3                	mov    %eax,%ebx
f012318f:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0123196:	10 00 00 
f0123199:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012319e:	0f b6 c0             	movzbl %al,%eax
f01231a1:	c1 e0 04             	shl    $0x4,%eax
f01231a4:	89 c2                	mov    %eax,%edx
f01231a6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01231ac:	01 d0                	add    %edx,%eax
f01231ae:	48                   	dec    %eax
f01231af:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f01231b5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01231bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01231c0:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01231c6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01231cc:	29 d0                	sub    %edx,%eax
f01231ce:	01 c3                	add    %eax,%ebx
f01231d0:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01231d7:	10 00 00 
f01231da:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01231e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01231e5:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01231eb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01231f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01231f6:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01231fc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123202:	29 d0                	sub    %edx,%eax
f0123204:	01 d8                	add    %ebx,%eax
f0123206:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012320b:	39 c1                	cmp    %eax,%ecx
f012320d:	74 17                	je     f0123226 <test_kfreelast+0x1333>
f012320f:	83 ec 04             	sub    $0x4,%esp
f0123212:	68 a4 00 13 f0       	push   $0xf01300a4
f0123217:	68 30 0d 00 00       	push   $0xd30
f012321c:	68 be ff 12 f0       	push   $0xf012ffbe
f0123221:	e8 80 cf fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123226:	e8 79 02 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012322b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012322e:	74 17                	je     f0123247 <test_kfreelast+0x1354>
f0123230:	83 ec 04             	sub    $0x4,%esp
f0123233:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0123238:	68 31 0d 00 00       	push   $0xd31
f012323d:	68 be ff 12 f0       	push   $0xf012ffbe
f0123242:	e8 5f cf fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123247:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012324a:	e8 61 83 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012324f:	29 c3                	sub    %eax,%ebx
f0123251:	89 d8                	mov    %ebx,%eax
f0123253:	83 f8 08             	cmp    $0x8,%eax
f0123256:	74 17                	je     f012326f <test_kfreelast+0x137c>
f0123258:	83 ec 04             	sub    $0x4,%esp
f012325b:	68 40 00 13 f0       	push   $0xf0130040
f0123260:	68 32 0d 00 00       	push   $0xd32
f0123265:	68 be ff 12 f0       	push   $0xf012ffbe
f012326a:	e8 37 cf fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012326f:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f0123276:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0123279:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012327f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123282:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123289:	eb 0e                	jmp    f0123299 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012328b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012328e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123291:	01 d0                	add    %edx,%eax
f0123293:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123296:	ff 45 f4             	incl   -0xc(%ebp)
f0123299:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012329f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01232a2:	7f e7                	jg     f012328b <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01232a4:	e8 07 83 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01232a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01232ac:	e8 f3 01 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01232b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f01232b4:	83 ec 0c             	sub    $0xc,%esp
f01232b7:	68 00 00 10 00       	push   $0x100000
f01232bc:	e8 33 39 fe ff       	call   f0106bf4 <kmalloc>
f01232c1:	83 c4 10             	add    $0x10,%esp
f01232c4:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01232ca:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f01232d0:	89 c1                	mov    %eax,%ecx
f01232d2:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01232d9:	10 00 00 
f01232dc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01232e1:	0f b6 d0             	movzbl %al,%edx
f01232e4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01232ea:	01 d0                	add    %edx,%eax
f01232ec:	48                   	dec    %eax
f01232ed:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01232f3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01232f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01232fe:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123304:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012330a:	29 d0                	sub    %edx,%eax
f012330c:	89 c3                	mov    %eax,%ebx
f012330e:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123315:	10 00 00 
f0123318:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012331d:	0f b6 c0             	movzbl %al,%eax
f0123320:	c1 e0 04             	shl    $0x4,%eax
f0123323:	89 c2                	mov    %eax,%edx
f0123325:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012332b:	01 d0                	add    %edx,%eax
f012332d:	48                   	dec    %eax
f012332e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123334:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012333a:	ba 00 00 00 00       	mov    $0x0,%edx
f012333f:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123345:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012334b:	29 d0                	sub    %edx,%eax
f012334d:	01 c3                	add    %eax,%ebx
f012334f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0123356:	10 00 00 
f0123359:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012335f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123364:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012336a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123370:	ba 00 00 00 00       	mov    $0x0,%edx
f0123375:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012337b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123381:	29 d0                	sub    %edx,%eax
f0123383:	01 d8                	add    %ebx,%eax
f0123385:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012338a:	39 c1                	cmp    %eax,%ecx
f012338c:	74 17                	je     f01233a5 <test_kfreelast+0x14b2>
f012338e:	83 ec 04             	sub    $0x4,%esp
f0123391:	68 a4 00 13 f0       	push   $0xf01300a4
f0123396:	68 3e 0d 00 00       	push   $0xd3e
f012339b:	68 be ff 12 f0       	push   $0xf012ffbe
f01233a0:	e8 01 ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233a5:	e8 fa 00 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f01233aa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01233ad:	74 17                	je     f01233c6 <test_kfreelast+0x14d3>
f01233af:	83 ec 04             	sub    $0x4,%esp
f01233b2:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01233b7:	68 3f 0d 00 00       	push   $0xd3f
f01233bc:	68 be ff 12 f0       	push   $0xf012ffbe
f01233c1:	e8 e0 cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01233c6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01233c9:	e8 e2 81 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01233ce:	29 c3                	sub    %eax,%ebx
f01233d0:	89 d8                	mov    %ebx,%eax
f01233d2:	3d 00 01 00 00       	cmp    $0x100,%eax
f01233d7:	74 17                	je     f01233f0 <test_kfreelast+0x14fd>
f01233d9:	83 ec 04             	sub    $0x4,%esp
f01233dc:	68 40 00 13 f0       	push   $0xf0130040
f01233e1:	68 40 0d 00 00       	push   $0xd40
f01233e6:	68 be ff 12 f0       	push   $0xf012ffbe
f01233eb:	e8 b6 cd fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f01233f0:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f01233f7:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f01233fa:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0123400:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0123403:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012340a:	eb 0e                	jmp    f012341a <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012340c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012340f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123412:	01 d0                	add    %edx,%eax
f0123414:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0123417:	ff 45 f4             	incl   -0xc(%ebp)
f012341a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0123420:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123423:	7f e7                	jg     f012340c <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0123425:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0123429:	83 ec 08             	sub    $0x8,%esp
f012342c:	ff 75 f0             	pushl  -0x10(%ebp)
f012342f:	68 ac 0f 13 f0       	push   $0xf0130fac
f0123434:	e8 f4 d7 fd ff       	call   f0100c2d <cprintf>
f0123439:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012343c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123443:	e8 68 81 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123448:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012344b:	e8 54 00 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f0123450:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0123453:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0123459:	83 ec 0c             	sub    $0xc,%esp
f012345c:	50                   	push   %eax
f012345d:	e8 ac 37 fe ff       	call   f0106c0e <kfree>
f0123462:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123465:	e8 3a 00 fe ff       	call   f01034a4 <pf_calculate_free_frames>
f012346a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012346d:	74 1d                	je     f012348c <test_kfreelast+0x1599>
f012346f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123473:	75 17                	jne    f012348c <test_kfreelast+0x1599>
f0123475:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012347c:	83 ec 0c             	sub    $0xc,%esp
f012347f:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123484:	e8 a4 d7 fd ff       	call   f0100c2d <cprintf>
f0123489:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012348c:	e8 1f 81 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123491:	89 c2                	mov    %eax,%edx
f0123493:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123496:	29 c2                	sub    %eax,%edx
f0123498:	89 d0                	mov    %edx,%eax
f012349a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012349f:	74 1d                	je     f01234be <test_kfreelast+0x15cb>
f01234a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01234a5:	75 17                	jne    f01234be <test_kfreelast+0x15cb>
f01234a7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01234ae:	83 ec 0c             	sub    $0xc,%esp
f01234b1:	68 40 10 13 f0       	push   $0xf0131040
f01234b6:	e8 72 d7 fd ff       	call   f0100c2d <cprintf>
f01234bb:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f01234be:	e8 ed 80 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01234c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234c6:	e8 d9 ff fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01234cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f01234ce:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f01234d4:	83 ec 0c             	sub    $0xc,%esp
f01234d7:	50                   	push   %eax
f01234d8:	e8 31 37 fe ff       	call   f0106c0e <kfree>
f01234dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01234e0:	e8 bf ff fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01234e5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01234e8:	74 1d                	je     f0123507 <test_kfreelast+0x1614>
f01234ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01234ee:	75 17                	jne    f0123507 <test_kfreelast+0x1614>
f01234f0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01234f7:	83 ec 0c             	sub    $0xc,%esp
f01234fa:	68 d4 0f 13 f0       	push   $0xf0130fd4
f01234ff:	e8 29 d7 fd ff       	call   f0100c2d <cprintf>
f0123504:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123507:	e8 a4 80 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012350c:	89 c2                	mov    %eax,%edx
f012350e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123511:	29 c2                	sub    %eax,%edx
f0123513:	89 d0                	mov    %edx,%eax
f0123515:	83 f8 08             	cmp    $0x8,%eax
f0123518:	74 1d                	je     f0123537 <test_kfreelast+0x1644>
f012351a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012351e:	75 17                	jne    f0123537 <test_kfreelast+0x1644>
f0123520:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123527:	83 ec 0c             	sub    $0xc,%esp
f012352a:	68 40 10 13 f0       	push   $0xf0131040
f012352f:	e8 f9 d6 fd ff       	call   f0100c2d <cprintf>
f0123534:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0123537:	e8 74 80 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012353c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012353f:	e8 60 ff fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123544:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0123547:	83 ec 0c             	sub    $0xc,%esp
f012354a:	68 00 28 00 00       	push   $0x2800
f012354f:	e8 a0 36 fe ff       	call   f0106bf4 <kmalloc>
f0123554:	83 c4 10             	add    $0x10,%esp
f0123557:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012355d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f0123563:	89 c1                	mov    %eax,%ecx
f0123565:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012356c:	10 00 00 
f012356f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0123574:	0f b6 d0             	movzbl %al,%edx
f0123577:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012357d:	01 d0                	add    %edx,%eax
f012357f:	48                   	dec    %eax
f0123580:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0123586:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012358c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123591:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0123597:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012359d:	29 d0                	sub    %edx,%eax
f012359f:	89 c3                	mov    %eax,%ebx
f01235a1:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01235a8:	10 00 00 
f01235ab:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01235b0:	0f b6 c0             	movzbl %al,%eax
f01235b3:	c1 e0 04             	shl    $0x4,%eax
f01235b6:	89 c2                	mov    %eax,%edx
f01235b8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01235be:	01 d0                	add    %edx,%eax
f01235c0:	48                   	dec    %eax
f01235c1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01235c7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01235cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01235d2:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01235d8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01235de:	29 d0                	sub    %edx,%eax
f01235e0:	01 c3                	add    %eax,%ebx
f01235e2:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f01235e9:	10 00 00 
f01235ec:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01235f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235f7:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f01235fd:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123603:	ba 00 00 00 00       	mov    $0x0,%edx
f0123608:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012360e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123614:	29 d0                	sub    %edx,%eax
f0123616:	01 d8                	add    %ebx,%eax
f0123618:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012361d:	39 c1                	cmp    %eax,%ecx
f012361f:	74 1d                	je     f012363e <test_kfreelast+0x174b>
f0123621:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123625:	75 17                	jne    f012363e <test_kfreelast+0x174b>
f0123627:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012362e:	83 ec 0c             	sub    $0xc,%esp
f0123631:	68 78 10 13 f0       	push   $0xf0131078
f0123636:	e8 f2 d5 fd ff       	call   f0100c2d <cprintf>
f012363b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012363e:	e8 61 fe fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123643:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123646:	74 1d                	je     f0123665 <test_kfreelast+0x1772>
f0123648:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012364c:	75 17                	jne    f0123665 <test_kfreelast+0x1772>
f012364e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123655:	83 ec 0c             	sub    $0xc,%esp
f0123658:	68 d4 0f 13 f0       	push   $0xf0130fd4
f012365d:	e8 cb d5 fd ff       	call   f0100c2d <cprintf>
f0123662:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0123665:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0123668:	e8 43 7f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012366d:	29 c3                	sub    %eax,%ebx
f012366f:	89 d8                	mov    %ebx,%eax
f0123671:	83 f8 03             	cmp    $0x3,%eax
f0123674:	74 1d                	je     f0123693 <test_kfreelast+0x17a0>
f0123676:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012367a:	75 17                	jne    f0123693 <test_kfreelast+0x17a0>
f012367c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123683:	83 ec 0c             	sub    $0xc,%esp
f0123686:	68 e0 10 13 f0       	push   $0xf01310e0
f012368b:	e8 9d d5 fd ff       	call   f0100c2d <cprintf>
f0123690:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f0123693:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012369a:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012369d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f01236a3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01236a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01236ad:	eb 0e                	jmp    f01236bd <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f01236af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01236b2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01236b5:	01 d0                	add    %edx,%eax
f01236b7:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f01236ba:	ff 45 f4             	incl   -0xc(%ebp)
f01236bd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01236c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01236c6:	7f e7                	jg     f01236af <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01236c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01236cc:	75 17                	jne    f01236e5 <test_kfreelast+0x17f2>
f01236ce:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f01236d2:	83 ec 08             	sub    $0x8,%esp
f01236d5:	ff 75 f0             	pushl  -0x10(%ebp)
f01236d8:	68 ac 0f 13 f0       	push   $0xf0130fac
f01236dd:	e8 4b d5 fd ff       	call   f0100c2d <cprintf>
f01236e2:	83 c4 10             	add    $0x10,%esp
f01236e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f01236ec:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f01236f2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01236f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01236fc:	eb 1e                	jmp    f012371c <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f01236fe:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f0123704:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123707:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012370a:	01 c8                	add    %ecx,%eax
f012370c:	8a 00                	mov    (%eax),%al
f012370e:	0f be c0             	movsbl %al,%eax
f0123711:	01 d0                	add    %edx,%eax
f0123713:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0123719:	ff 45 f4             	incl   -0xc(%ebp)
f012371c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123722:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123725:	7f d7                	jg     f01236fe <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0123727:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012372d:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0123733:	89 d0                	mov    %edx,%eax
f0123735:	01 c0                	add    %eax,%eax
f0123737:	01 d0                	add    %edx,%eax
f0123739:	c1 e0 02             	shl    $0x2,%eax
f012373c:	39 c1                	cmp    %eax,%ecx
f012373e:	74 1d                	je     f012375d <test_kfreelast+0x186a>
f0123740:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123744:	75 17                	jne    f012375d <test_kfreelast+0x186a>
f0123746:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012374d:	83 ec 0c             	sub    $0xc,%esp
f0123750:	68 24 11 13 f0       	push   $0xf0131124
f0123755:	e8 d3 d4 fd ff       	call   f0100c2d <cprintf>
f012375a:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012375d:	83 ec 0c             	sub    $0xc,%esp
f0123760:	6a 03                	push   $0x3
f0123762:	e8 f2 82 fe ff       	call   f010ba59 <sys_bypassPageFault>
f0123767:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012376a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f0123770:	05 00 30 00 00       	add    $0x3000,%eax
f0123775:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f0123778:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012377f:	eb 3c                	jmp    f01237bd <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f0123781:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123784:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123787:	01 d0                	add    %edx,%eax
f0123789:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012378c:	e8 b6 82 fe ff       	call   f010ba47 <sys_rcr2>
f0123791:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123794:	8b 55 84             	mov    -0x7c(%ebp),%edx
f0123797:	01 ca                	add    %ecx,%edx
f0123799:	39 d0                	cmp    %edx,%eax
f012379b:	74 1d                	je     f01237ba <test_kfreelast+0x18c7>
f012379d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01237a1:	75 17                	jne    f01237ba <test_kfreelast+0x18c7>
f01237a3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01237aa:	83 ec 0c             	sub    $0xc,%esp
f01237ad:	68 58 11 13 f0       	push   $0xf0131158
f01237b2:	e8 76 d4 fd ff       	call   f0100c2d <cprintf>
f01237b7:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f01237ba:	ff 45 f4             	incl   -0xc(%ebp)
f01237bd:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f01237c4:	7e bb                	jle    f0123781 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01237c6:	83 ec 0c             	sub    $0xc,%esp
f01237c9:	6a 00                	push   $0x0
f01237cb:	e8 89 82 fe ff       	call   f010ba59 <sys_bypassPageFault>
f01237d0:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01237d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01237d7:	75 17                	jne    f01237f0 <test_kfreelast+0x18fd>
f01237d9:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f01237dd:	83 ec 08             	sub    $0x8,%esp
f01237e0:	ff 75 f0             	pushl  -0x10(%ebp)
f01237e3:	68 ac 0f 13 f0       	push   $0xf0130fac
f01237e8:	e8 40 d4 fd ff       	call   f0100c2d <cprintf>
f01237ed:	83 c4 10             	add    $0x10,%esp
f01237f0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f01237f7:	e8 b4 7d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01237fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237ff:	e8 a0 fc fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123804:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f0123807:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012380d:	83 ec 0c             	sub    $0xc,%esp
f0123810:	50                   	push   %eax
f0123811:	e8 f8 33 fe ff       	call   f0106c0e <kfree>
f0123816:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123819:	e8 86 fc fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012381e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123821:	74 1d                	je     f0123840 <test_kfreelast+0x194d>
f0123823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123827:	75 17                	jne    f0123840 <test_kfreelast+0x194d>
f0123829:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123830:	83 ec 0c             	sub    $0xc,%esp
f0123833:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123838:	e8 f0 d3 fd ff       	call   f0100c2d <cprintf>
f012383d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123840:	e8 6b 7d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123845:	89 c2                	mov    %eax,%edx
f0123847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012384a:	29 c2                	sub    %eax,%edx
f012384c:	89 d0                	mov    %edx,%eax
f012384e:	83 f8 03             	cmp    $0x3,%eax
f0123851:	74 1d                	je     f0123870 <test_kfreelast+0x197d>
f0123853:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123857:	75 17                	jne    f0123870 <test_kfreelast+0x197d>
f0123859:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123860:	83 ec 0c             	sub    $0xc,%esp
f0123863:	68 40 10 13 f0       	push   $0xf0131040
f0123868:	e8 c0 d3 fd ff       	call   f0100c2d <cprintf>
f012386d:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123870:	e8 3b 7d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123875:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123878:	e8 27 fc fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012387d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f0123880:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0123886:	83 ec 0c             	sub    $0xc,%esp
f0123889:	50                   	push   %eax
f012388a:	e8 7f 33 fe ff       	call   f0106c0e <kfree>
f012388f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123892:	e8 0d fc fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123897:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012389a:	74 1d                	je     f01238b9 <test_kfreelast+0x19c6>
f012389c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01238a0:	75 17                	jne    f01238b9 <test_kfreelast+0x19c6>
f01238a2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01238a9:	83 ec 0c             	sub    $0xc,%esp
f01238ac:	68 d4 0f 13 f0       	push   $0xf0130fd4
f01238b1:	e8 77 d3 fd ff       	call   f0100c2d <cprintf>
f01238b6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01238b9:	e8 f2 7c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01238be:	89 c2                	mov    %eax,%edx
f01238c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01238c3:	29 c2                	sub    %eax,%edx
f01238c5:	89 d0                	mov    %edx,%eax
f01238c7:	83 f8 04             	cmp    $0x4,%eax
f01238ca:	74 1d                	je     f01238e9 <test_kfreelast+0x19f6>
f01238cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01238d0:	75 17                	jne    f01238e9 <test_kfreelast+0x19f6>
f01238d2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01238d9:	83 ec 0c             	sub    $0xc,%esp
f01238dc:	68 40 10 13 f0       	push   $0xf0131040
f01238e1:	e8 47 d3 fd ff       	call   f0100c2d <cprintf>
f01238e6:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01238e9:	e8 c2 7c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01238ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238f1:	e8 ae fb fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01238f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f01238f9:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f01238ff:	83 ec 0c             	sub    $0xc,%esp
f0123902:	50                   	push   %eax
f0123903:	e8 06 33 fe ff       	call   f0106c0e <kfree>
f0123908:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012390b:	e8 94 fb fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123910:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123913:	74 1d                	je     f0123932 <test_kfreelast+0x1a3f>
f0123915:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123919:	75 17                	jne    f0123932 <test_kfreelast+0x1a3f>
f012391b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123922:	83 ec 0c             	sub    $0xc,%esp
f0123925:	68 d4 0f 13 f0       	push   $0xf0130fd4
f012392a:	e8 fe d2 fd ff       	call   f0100c2d <cprintf>
f012392f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123932:	e8 79 7c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123937:	89 c2                	mov    %eax,%edx
f0123939:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012393c:	29 c2                	sub    %eax,%edx
f012393e:	89 d0                	mov    %edx,%eax
f0123940:	83 f8 05             	cmp    $0x5,%eax
f0123943:	74 1d                	je     f0123962 <test_kfreelast+0x1a6f>
f0123945:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123949:	75 17                	jne    f0123962 <test_kfreelast+0x1a6f>
f012394b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123952:	83 ec 0c             	sub    $0xc,%esp
f0123955:	68 40 10 13 f0       	push   $0xf0131040
f012395a:	e8 ce d2 fd ff       	call   f0100c2d <cprintf>
f012395f:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f0123962:	e8 49 7c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123967:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012396a:	e8 35 fb fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012396f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f0123972:	83 ec 0c             	sub    $0xc,%esp
f0123975:	68 00 c8 00 00       	push   $0xc800
f012397a:	e8 75 32 fe ff       	call   f0106bf4 <kmalloc>
f012397f:	83 c4 10             	add    $0x10,%esp
f0123982:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0123988:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012398e:	89 c1                	mov    %eax,%ecx
f0123990:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0123997:	10 00 00 
f012399a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012399f:	0f b6 d0             	movzbl %al,%edx
f01239a2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01239a8:	01 d0                	add    %edx,%eax
f01239aa:	48                   	dec    %eax
f01239ab:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01239b1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01239b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01239bc:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01239c2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01239c8:	29 d0                	sub    %edx,%eax
f01239ca:	89 c3                	mov    %eax,%ebx
f01239cc:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01239d3:	10 00 00 
f01239d6:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01239db:	0f b6 c0             	movzbl %al,%eax
f01239de:	c1 e0 04             	shl    $0x4,%eax
f01239e1:	89 c2                	mov    %eax,%edx
f01239e3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01239e9:	01 d0                	add    %edx,%eax
f01239eb:	48                   	dec    %eax
f01239ec:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01239f2:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01239f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01239fd:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0123a03:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123a09:	29 d0                	sub    %edx,%eax
f0123a0b:	01 c3                	add    %eax,%ebx
f0123a0d:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0123a14:	10 00 00 
f0123a17:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0123a1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a22:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0123a28:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123a2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a33:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0123a39:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123a3f:	29 d0                	sub    %edx,%eax
f0123a41:	01 d8                	add    %ebx,%eax
f0123a43:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123a48:	39 c1                	cmp    %eax,%ecx
f0123a4a:	74 1d                	je     f0123a69 <test_kfreelast+0x1b76>
f0123a4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123a50:	75 17                	jne    f0123a69 <test_kfreelast+0x1b76>
f0123a52:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123a59:	83 ec 0c             	sub    $0xc,%esp
f0123a5c:	68 78 10 13 f0       	push   $0xf0131078
f0123a61:	e8 c7 d1 fd ff       	call   f0100c2d <cprintf>
f0123a66:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123a69:	e8 36 fa fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123a6e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123a71:	74 1d                	je     f0123a90 <test_kfreelast+0x1b9d>
f0123a73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123a77:	75 17                	jne    f0123a90 <test_kfreelast+0x1b9d>
f0123a79:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123a80:	83 ec 0c             	sub    $0xc,%esp
f0123a83:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123a88:	e8 a0 d1 fd ff       	call   f0100c2d <cprintf>
f0123a8d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0123a90:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0123a93:	e8 18 7b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123a98:	29 c3                	sub    %eax,%ebx
f0123a9a:	89 d8                	mov    %ebx,%eax
f0123a9c:	83 f8 0d             	cmp    $0xd,%eax
f0123a9f:	74 1d                	je     f0123abe <test_kfreelast+0x1bcb>
f0123aa1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123aa5:	75 17                	jne    f0123abe <test_kfreelast+0x1bcb>
f0123aa7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123aae:	83 ec 0c             	sub    $0xc,%esp
f0123ab1:	68 e0 10 13 f0       	push   $0xf01310e0
f0123ab6:	e8 72 d1 fd ff       	call   f0100c2d <cprintf>
f0123abb:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0123abe:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f0123ac5:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f0123ac8:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123ace:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0123ad1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123ad8:	eb 0e                	jmp    f0123ae8 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f0123ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123add:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123ae0:	01 d0                	add    %edx,%eax
f0123ae2:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f0123ae5:	ff 45 f4             	incl   -0xc(%ebp)
f0123ae8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0123aee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123af1:	7f e7                	jg     f0123ada <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123af3:	e8 b8 7a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123af8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123afb:	e8 a4 f9 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123b00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f0123b03:	83 ec 0c             	sub    $0xc,%esp
f0123b06:	68 00 fc 2f 00       	push   $0x2ffc00
f0123b0b:	e8 e4 30 fe ff       	call   f0106bf4 <kmalloc>
f0123b10:	83 c4 10             	add    $0x10,%esp
f0123b13:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0123b19:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123b1f:	89 c1                	mov    %eax,%ecx
f0123b21:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0123b28:	10 00 00 
f0123b2b:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0123b30:	0f b6 d0             	movzbl %al,%edx
f0123b33:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0123b39:	01 d0                	add    %edx,%eax
f0123b3b:	48                   	dec    %eax
f0123b3c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0123b42:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0123b48:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b4d:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0123b53:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0123b59:	29 d0                	sub    %edx,%eax
f0123b5b:	89 c3                	mov    %eax,%ebx
f0123b5d:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0123b64:	10 00 00 
f0123b67:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0123b6c:	0f b6 c0             	movzbl %al,%eax
f0123b6f:	c1 e0 04             	shl    $0x4,%eax
f0123b72:	89 c2                	mov    %eax,%edx
f0123b74:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123b7a:	01 d0                	add    %edx,%eax
f0123b7c:	48                   	dec    %eax
f0123b7d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0123b83:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0123b89:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b8e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0123b94:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0123b9a:	29 d0                	sub    %edx,%eax
f0123b9c:	01 c3                	add    %eax,%ebx
f0123b9e:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0123ba5:	10 00 00 
f0123ba8:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123bae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123bb3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0123bb9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0123bbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bc4:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0123bca:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0123bd0:	29 d0                	sub    %edx,%eax
f0123bd2:	01 d8                	add    %ebx,%eax
f0123bd4:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f0123bd9:	39 c1                	cmp    %eax,%ecx
f0123bdb:	74 1d                	je     f0123bfa <test_kfreelast+0x1d07>
f0123bdd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123be1:	75 17                	jne    f0123bfa <test_kfreelast+0x1d07>
f0123be3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123bea:	83 ec 0c             	sub    $0xc,%esp
f0123bed:	68 78 10 13 f0       	push   $0xf0131078
f0123bf2:	e8 36 d0 fd ff       	call   f0100c2d <cprintf>
f0123bf7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123bfa:	e8 a5 f8 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123bff:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123c02:	74 1d                	je     f0123c21 <test_kfreelast+0x1d2e>
f0123c04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123c08:	75 17                	jne    f0123c21 <test_kfreelast+0x1d2e>
f0123c0a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123c11:	83 ec 0c             	sub    $0xc,%esp
f0123c14:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123c19:	e8 0f d0 fd ff       	call   f0100c2d <cprintf>
f0123c1e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0123c21:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0123c24:	e8 87 79 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123c29:	29 c3                	sub    %eax,%ebx
f0123c2b:	89 d8                	mov    %ebx,%eax
f0123c2d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123c32:	74 1d                	je     f0123c51 <test_kfreelast+0x1d5e>
f0123c34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123c38:	75 17                	jne    f0123c51 <test_kfreelast+0x1d5e>
f0123c3a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123c41:	83 ec 0c             	sub    $0xc,%esp
f0123c44:	68 e0 10 13 f0       	push   $0xf01310e0
f0123c49:	e8 df cf fd ff       	call   f0100c2d <cprintf>
f0123c4e:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0123c51:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f0123c58:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f0123c5b:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123c61:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0123c64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123c6b:	eb 0e                	jmp    f0123c7b <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f0123c6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123c70:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123c73:	01 d0                	add    %edx,%eax
f0123c75:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0123c78:	ff 45 f4             	incl   -0xc(%ebp)
f0123c7b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0123c81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123c84:	7f e7                	jg     f0123c6d <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0123c86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123c8a:	75 17                	jne    f0123ca3 <test_kfreelast+0x1db0>
f0123c8c:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0123c90:	83 ec 08             	sub    $0x8,%esp
f0123c93:	ff 75 f0             	pushl  -0x10(%ebp)
f0123c96:	68 ac 0f 13 f0       	push   $0xf0130fac
f0123c9b:	e8 8d cf fd ff       	call   f0100c2d <cprintf>
f0123ca0:	83 c4 10             	add    $0x10,%esp
f0123ca3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f0123caa:	e8 01 79 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123caf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cb2:	e8 ed f7 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123cb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f0123cba:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123cc0:	83 ec 0c             	sub    $0xc,%esp
f0123cc3:	50                   	push   %eax
f0123cc4:	e8 45 2f fe ff       	call   f0106c0e <kfree>
f0123cc9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123ccc:	e8 d3 f7 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123cd1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123cd4:	74 1d                	je     f0123cf3 <test_kfreelast+0x1e00>
f0123cd6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123cda:	75 17                	jne    f0123cf3 <test_kfreelast+0x1e00>
f0123cdc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123ce3:	83 ec 0c             	sub    $0xc,%esp
f0123ce6:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123ceb:	e8 3d cf fd ff       	call   f0100c2d <cprintf>
f0123cf0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123cf3:	e8 b8 78 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123cf8:	89 c2                	mov    %eax,%edx
f0123cfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123cfd:	29 c2                	sub    %eax,%edx
f0123cff:	89 d0                	mov    %edx,%eax
f0123d01:	83 f8 0d             	cmp    $0xd,%eax
f0123d04:	74 1d                	je     f0123d23 <test_kfreelast+0x1e30>
f0123d06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123d0a:	75 17                	jne    f0123d23 <test_kfreelast+0x1e30>
f0123d0c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123d13:	83 ec 0c             	sub    $0xc,%esp
f0123d16:	68 40 10 13 f0       	push   $0xf0131040
f0123d1b:	e8 0d cf fd ff       	call   f0100c2d <cprintf>
f0123d20:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123d23:	83 ec 0c             	sub    $0xc,%esp
f0123d26:	6a 03                	push   $0x3
f0123d28:	e8 2c 7d fe ff       	call   f010ba59 <sys_bypassPageFault>
f0123d2d:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0123d30:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123d36:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f0123d39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123d40:	eb 3c                	jmp    f0123d7e <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f0123d42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123d45:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123d48:	01 d0                	add    %edx,%eax
f0123d4a:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0123d4d:	e8 f5 7c fe ff       	call   f010ba47 <sys_rcr2>
f0123d52:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123d55:	8b 55 84             	mov    -0x7c(%ebp),%edx
f0123d58:	01 ca                	add    %ecx,%edx
f0123d5a:	39 d0                	cmp    %edx,%eax
f0123d5c:	74 1d                	je     f0123d7b <test_kfreelast+0x1e88>
f0123d5e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123d62:	75 17                	jne    f0123d7b <test_kfreelast+0x1e88>
f0123d64:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123d6b:	83 ec 0c             	sub    $0xc,%esp
f0123d6e:	68 58 11 13 f0       	push   $0xf0131158
f0123d73:	e8 b5 ce fd ff       	call   f0100c2d <cprintf>
f0123d78:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f0123d7b:	ff 45 f4             	incl   -0xc(%ebp)
f0123d7e:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0123d85:	7e bb                	jle    f0123d42 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123d87:	83 ec 0c             	sub    $0xc,%esp
f0123d8a:	6a 00                	push   $0x0
f0123d8c:	e8 c8 7c fe ff       	call   f010ba59 <sys_bypassPageFault>
f0123d91:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0123d94:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123d9a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0123d9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123da4:	eb 1e                	jmp    f0123dc4 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f0123da6:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f0123dac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123daf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123db2:	01 c8                	add    %ecx,%eax
f0123db4:	8a 00                	mov    (%eax),%al
f0123db6:	0f be c0             	movsbl %al,%eax
f0123db9:	01 d0                	add    %edx,%eax
f0123dbb:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0123dc1:	ff 45 f4             	incl   -0xc(%ebp)
f0123dc4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0123dca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123dcd:	7f d7                	jg     f0123da6 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0123dcf:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f0123dd5:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0123ddb:	89 d0                	mov    %edx,%eax
f0123ddd:	01 c0                	add    %eax,%eax
f0123ddf:	01 d0                	add    %edx,%eax
f0123de1:	01 c0                	add    %eax,%eax
f0123de3:	01 d0                	add    %edx,%eax
f0123de5:	01 c0                	add    %eax,%eax
f0123de7:	39 c1                	cmp    %eax,%ecx
f0123de9:	74 1d                	je     f0123e08 <test_kfreelast+0x1f15>
f0123deb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123def:	75 17                	jne    f0123e08 <test_kfreelast+0x1f15>
f0123df1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123df8:	83 ec 0c             	sub    $0xc,%esp
f0123dfb:	68 24 11 13 f0       	push   $0xf0131124
f0123e00:	e8 28 ce fd ff       	call   f0100c2d <cprintf>
f0123e05:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0123e08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123e0c:	75 17                	jne    f0123e25 <test_kfreelast+0x1f32>
f0123e0e:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0123e12:	83 ec 08             	sub    $0x8,%esp
f0123e15:	ff 75 f0             	pushl  -0x10(%ebp)
f0123e18:	68 ac 0f 13 f0       	push   $0xf0130fac
f0123e1d:	e8 0b ce fd ff       	call   f0100c2d <cprintf>
f0123e22:	83 c4 10             	add    $0x10,%esp
f0123e25:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123e2c:	e8 7f 77 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123e31:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e34:	e8 6b f6 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123e39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f0123e3c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0123e42:	83 ec 0c             	sub    $0xc,%esp
f0123e45:	50                   	push   %eax
f0123e46:	e8 c3 2d fe ff       	call   f0106c0e <kfree>
f0123e4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123e4e:	e8 51 f6 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123e53:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123e56:	74 1d                	je     f0123e75 <test_kfreelast+0x1f82>
f0123e58:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123e5c:	75 17                	jne    f0123e75 <test_kfreelast+0x1f82>
f0123e5e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123e65:	83 ec 0c             	sub    $0xc,%esp
f0123e68:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123e6d:	e8 bb cd fd ff       	call   f0100c2d <cprintf>
f0123e72:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123e75:	e8 36 77 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123e7a:	89 c2                	mov    %eax,%edx
f0123e7c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123e7f:	29 c2                	sub    %eax,%edx
f0123e81:	89 d0                	mov    %edx,%eax
f0123e83:	83 f8 02             	cmp    $0x2,%eax
f0123e86:	74 1d                	je     f0123ea5 <test_kfreelast+0x1fb2>
f0123e88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123e8c:	75 17                	jne    f0123ea5 <test_kfreelast+0x1fb2>
f0123e8e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123e95:	83 ec 0c             	sub    $0xc,%esp
f0123e98:	68 40 10 13 f0       	push   $0xf0131040
f0123e9d:	e8 8b cd fd ff       	call   f0100c2d <cprintf>
f0123ea2:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ea5:	e8 06 77 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123eaa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ead:	e8 f2 f5 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123eb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f0123eb5:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123ebb:	83 ec 0c             	sub    $0xc,%esp
f0123ebe:	50                   	push   %eax
f0123ebf:	e8 4a 2d fe ff       	call   f0106c0e <kfree>
f0123ec4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123ec7:	e8 d8 f5 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123ecc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123ecf:	74 1d                	je     f0123eee <test_kfreelast+0x1ffb>
f0123ed1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123ed5:	75 17                	jne    f0123eee <test_kfreelast+0x1ffb>
f0123ed7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123ede:	83 ec 0c             	sub    $0xc,%esp
f0123ee1:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123ee6:	e8 42 cd fd ff       	call   f0100c2d <cprintf>
f0123eeb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123eee:	e8 bd 76 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123ef3:	89 c2                	mov    %eax,%edx
f0123ef5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123ef8:	29 c2                	sub    %eax,%edx
f0123efa:	89 d0                	mov    %edx,%eax
f0123efc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123f01:	74 1d                	je     f0123f20 <test_kfreelast+0x202d>
f0123f03:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123f07:	75 17                	jne    f0123f20 <test_kfreelast+0x202d>
f0123f09:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123f10:	83 ec 0c             	sub    $0xc,%esp
f0123f13:	68 40 10 13 f0       	push   $0xf0131040
f0123f18:	e8 10 cd fd ff       	call   f0100c2d <cprintf>
f0123f1d:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f20:	e8 8b 76 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123f25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f28:	e8 77 f5 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123f2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0123f30:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0123f36:	83 ec 0c             	sub    $0xc,%esp
f0123f39:	50                   	push   %eax
f0123f3a:	e8 cf 2c fe ff       	call   f0106c0e <kfree>
f0123f3f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123f42:	e8 5d f5 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123f47:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123f4a:	74 1d                	je     f0123f69 <test_kfreelast+0x2076>
f0123f4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123f50:	75 17                	jne    f0123f69 <test_kfreelast+0x2076>
f0123f52:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123f59:	83 ec 0c             	sub    $0xc,%esp
f0123f5c:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123f61:	e8 c7 cc fd ff       	call   f0100c2d <cprintf>
f0123f66:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123f69:	e8 42 76 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123f6e:	89 c2                	mov    %eax,%edx
f0123f70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123f73:	29 c2                	sub    %eax,%edx
f0123f75:	89 d0                	mov    %edx,%eax
f0123f77:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123f7c:	74 1d                	je     f0123f9b <test_kfreelast+0x20a8>
f0123f7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123f82:	75 17                	jne    f0123f9b <test_kfreelast+0x20a8>
f0123f84:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123f8b:	83 ec 0c             	sub    $0xc,%esp
f0123f8e:	68 40 10 13 f0       	push   $0xf0131040
f0123f93:	e8 95 cc fd ff       	call   f0100c2d <cprintf>
f0123f98:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f9b:	e8 10 76 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123fa0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fa3:	e8 fc f4 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123fa8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0123fab:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0123fb1:	83 ec 0c             	sub    $0xc,%esp
f0123fb4:	50                   	push   %eax
f0123fb5:	e8 54 2c fe ff       	call   f0106c0e <kfree>
f0123fba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0123fbd:	e8 e2 f4 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0123fc2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0123fc5:	74 1d                	je     f0123fe4 <test_kfreelast+0x20f1>
f0123fc7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123fcb:	75 17                	jne    f0123fe4 <test_kfreelast+0x20f1>
f0123fcd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0123fd4:	83 ec 0c             	sub    $0xc,%esp
f0123fd7:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0123fdc:	e8 4c cc fd ff       	call   f0100c2d <cprintf>
f0123fe1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0123fe4:	e8 c7 75 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0123fe9:	89 c2                	mov    %eax,%edx
f0123feb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123fee:	29 c2                	sub    %eax,%edx
f0123ff0:	89 d0                	mov    %edx,%eax
f0123ff2:	83 f8 01             	cmp    $0x1,%eax
f0123ff5:	74 1d                	je     f0124014 <test_kfreelast+0x2121>
f0123ff7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123ffb:	75 17                	jne    f0124014 <test_kfreelast+0x2121>
f0123ffd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0124004:	83 ec 0c             	sub    $0xc,%esp
f0124007:	68 40 10 13 f0       	push   $0xf0131040
f012400c:	e8 1c cc fd ff       	call   f0100c2d <cprintf>
f0124011:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124014:	e8 97 75 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124019:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012401c:	e8 83 f4 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0124021:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0124024:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012402a:	83 ec 0c             	sub    $0xc,%esp
f012402d:	50                   	push   %eax
f012402e:	e8 db 2b fe ff       	call   f0106c0e <kfree>
f0124033:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0124036:	e8 69 f4 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012403b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012403e:	74 1d                	je     f012405d <test_kfreelast+0x216a>
f0124040:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124044:	75 17                	jne    f012405d <test_kfreelast+0x216a>
f0124046:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012404d:	83 ec 0c             	sub    $0xc,%esp
f0124050:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0124055:	e8 d3 cb fd ff       	call   f0100c2d <cprintf>
f012405a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012405d:	e8 4e 75 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124062:	89 c2                	mov    %eax,%edx
f0124064:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0124067:	29 c2                	sub    %eax,%edx
f0124069:	89 d0                	mov    %edx,%eax
f012406b:	83 f8 01             	cmp    $0x1,%eax
f012406e:	74 1d                	je     f012408d <test_kfreelast+0x219a>
f0124070:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124074:	75 17                	jne    f012408d <test_kfreelast+0x219a>
f0124076:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012407d:	83 ec 0c             	sub    $0xc,%esp
f0124080:	68 40 10 13 f0       	push   $0xf0131040
f0124085:	e8 a3 cb fd ff       	call   f0100c2d <cprintf>
f012408a:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012408d:	e8 1e 75 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124092:	89 c2                	mov    %eax,%edx
f0124094:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124097:	39 c2                	cmp    %eax,%edx
f0124099:	74 1d                	je     f01240b8 <test_kfreelast+0x21c5>
f012409b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012409f:	75 17                	jne    f01240b8 <test_kfreelast+0x21c5>
f01240a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01240a8:	83 ec 0c             	sub    $0xc,%esp
f01240ab:	68 a0 11 13 f0       	push   $0xf01311a0
f01240b0:	e8 78 cb fd ff       	call   f0100c2d <cprintf>
f01240b5:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01240b8:	83 ec 0c             	sub    $0xc,%esp
f01240bb:	6a 03                	push   $0x3
f01240bd:	e8 97 79 fe ff       	call   f010ba59 <sys_bypassPageFault>
f01240c2:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f01240c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01240cc:	e9 8e 00 00 00       	jmp    f012415f <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f01240d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01240d4:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f01240db:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f01240de:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01240e1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f01240e4:	e8 5e 79 fe ff       	call   f010ba47 <sys_rcr2>
f01240e9:	89 c2                	mov    %eax,%edx
f01240eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01240ee:	39 c2                	cmp    %eax,%edx
f01240f0:	74 1d                	je     f012410f <test_kfreelast+0x221c>
f01240f2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01240f6:	75 17                	jne    f012410f <test_kfreelast+0x221c>
f01240f8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01240ff:	83 ec 0c             	sub    $0xc,%esp
f0124102:	68 58 11 13 f0       	push   $0xf0131158
f0124107:	e8 21 cb fd ff       	call   f0100c2d <cprintf>
f012410c:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012410f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0124112:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f0124119:	89 c2                	mov    %eax,%edx
f012411b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012411e:	01 d0                	add    %edx,%eax
f0124120:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0124123:	e8 1f 79 fe ff       	call   f010ba47 <sys_rcr2>
f0124128:	89 c2                	mov    %eax,%edx
f012412a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012412d:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f0124134:	89 c1                	mov    %eax,%ecx
f0124136:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124139:	01 c8                	add    %ecx,%eax
f012413b:	39 c2                	cmp    %eax,%edx
f012413d:	74 1d                	je     f012415c <test_kfreelast+0x2269>
f012413f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124143:	75 17                	jne    f012415c <test_kfreelast+0x2269>
f0124145:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012414c:	83 ec 0c             	sub    $0xc,%esp
f012414f:	68 58 11 13 f0       	push   $0xf0131158
f0124154:	e8 d4 ca fd ff       	call   f0100c2d <cprintf>
f0124159:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012415c:	ff 45 f4             	incl   -0xc(%ebp)
f012415f:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0124163:	0f 8e 68 ff ff ff    	jle    f01240d1 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0124169:	83 ec 0c             	sub    $0xc,%esp
f012416c:	6a 00                	push   $0x0
f012416e:	e8 e6 78 fe ff       	call   f010ba59 <sys_bypassPageFault>
f0124173:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124176:	e8 35 74 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012417b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012417e:	e8 21 f3 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0124183:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0124186:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012418c:	83 ec 0c             	sub    $0xc,%esp
f012418f:	50                   	push   %eax
f0124190:	e8 79 2a fe ff       	call   f0106c0e <kfree>
f0124195:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0124198:	e8 07 f3 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012419d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01241a0:	74 1d                	je     f01241bf <test_kfreelast+0x22cc>
f01241a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01241a6:	75 17                	jne    f01241bf <test_kfreelast+0x22cc>
f01241a8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01241af:	83 ec 0c             	sub    $0xc,%esp
f01241b2:	68 d4 0f 13 f0       	push   $0xf0130fd4
f01241b7:	e8 71 ca fd ff       	call   f0100c2d <cprintf>
f01241bc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f01241bf:	e8 ec 73 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01241c4:	89 c2                	mov    %eax,%edx
f01241c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01241c9:	39 c2                	cmp    %eax,%edx
f01241cb:	74 1d                	je     f01241ea <test_kfreelast+0x22f7>
f01241cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01241d1:	75 17                	jne    f01241ea <test_kfreelast+0x22f7>
f01241d3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01241da:	83 ec 0c             	sub    $0xc,%esp
f01241dd:	68 d8 11 13 f0       	push   $0xf01311d8
f01241e2:	e8 46 ca fd ff       	call   f0100c2d <cprintf>
f01241e7:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01241ea:	e8 c1 73 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01241ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241f2:	e8 ad f2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01241f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f01241fa:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0124200:	83 ec 0c             	sub    $0xc,%esp
f0124203:	50                   	push   %eax
f0124204:	e8 05 2a fe ff       	call   f0106c0e <kfree>
f0124209:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012420c:	e8 93 f2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0124211:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0124214:	74 1d                	je     f0124233 <test_kfreelast+0x2340>
f0124216:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012421a:	75 17                	jne    f0124233 <test_kfreelast+0x2340>
f012421c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0124223:	83 ec 0c             	sub    $0xc,%esp
f0124226:	68 d4 0f 13 f0       	push   $0xf0130fd4
f012422b:	e8 fd c9 fd ff       	call   f0100c2d <cprintf>
f0124230:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0124233:	e8 78 73 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124238:	89 c2                	mov    %eax,%edx
f012423a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012423d:	39 c2                	cmp    %eax,%edx
f012423f:	74 1d                	je     f012425e <test_kfreelast+0x236b>
f0124241:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124245:	75 17                	jne    f012425e <test_kfreelast+0x236b>
f0124247:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012424e:	83 ec 0c             	sub    $0xc,%esp
f0124251:	68 d8 11 13 f0       	push   $0xf01311d8
f0124256:	e8 d2 c9 fd ff       	call   f0100c2d <cprintf>
f012425b:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012425e:	e8 4d 73 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124263:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124266:	e8 39 f2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012426b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012426e:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0124274:	83 ec 0c             	sub    $0xc,%esp
f0124277:	50                   	push   %eax
f0124278:	e8 91 29 fe ff       	call   f0106c0e <kfree>
f012427d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0124280:	e8 1f f2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0124285:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0124288:	74 1d                	je     f01242a7 <test_kfreelast+0x23b4>
f012428a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012428e:	75 17                	jne    f01242a7 <test_kfreelast+0x23b4>
f0124290:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0124297:	83 ec 0c             	sub    $0xc,%esp
f012429a:	68 d4 0f 13 f0       	push   $0xf0130fd4
f012429f:	e8 89 c9 fd ff       	call   f0100c2d <cprintf>
f01242a4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f01242a7:	e8 04 73 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01242ac:	89 c2                	mov    %eax,%edx
f01242ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01242b1:	39 c2                	cmp    %eax,%edx
f01242b3:	74 1d                	je     f01242d2 <test_kfreelast+0x23df>
f01242b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01242b9:	75 17                	jne    f01242d2 <test_kfreelast+0x23df>
f01242bb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01242c2:	83 ec 0c             	sub    $0xc,%esp
f01242c5:	68 d8 11 13 f0       	push   $0xf01311d8
f01242ca:	e8 5e c9 fd ff       	call   f0100c2d <cprintf>
f01242cf:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01242d2:	e8 d9 72 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01242d7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242da:	e8 c5 f1 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01242df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f01242e2:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f01242e8:	83 ec 0c             	sub    $0xc,%esp
f01242eb:	50                   	push   %eax
f01242ec:	e8 1d 29 fe ff       	call   f0106c0e <kfree>
f01242f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01242f4:	e8 ab f1 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01242f9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01242fc:	74 1d                	je     f012431b <test_kfreelast+0x2428>
f01242fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124302:	75 17                	jne    f012431b <test_kfreelast+0x2428>
f0124304:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012430b:	83 ec 0c             	sub    $0xc,%esp
f012430e:	68 d4 0f 13 f0       	push   $0xf0130fd4
f0124313:	e8 15 c9 fd ff       	call   f0100c2d <cprintf>
f0124318:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012431b:	e8 90 72 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124320:	89 c2                	mov    %eax,%edx
f0124322:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0124325:	39 c2                	cmp    %eax,%edx
f0124327:	74 1d                	je     f0124346 <test_kfreelast+0x2453>
f0124329:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012432d:	75 17                	jne    f0124346 <test_kfreelast+0x2453>
f012432f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0124336:	83 ec 0c             	sub    $0xc,%esp
f0124339:	68 d8 11 13 f0       	push   $0xf01311d8
f012433e:	e8 ea c8 fd ff       	call   f0100c2d <cprintf>
f0124343:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0124346:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012434a:	75 17                	jne    f0124363 <test_kfreelast+0x2470>
f012434c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0124350:	83 ec 08             	sub    $0x8,%esp
f0124353:	ff 75 f0             	pushl  -0x10(%ebp)
f0124356:	68 ac 0f 13 f0       	push   $0xf0130fac
f012435b:	e8 cd c8 fd ff       	call   f0100c2d <cprintf>
f0124360:	83 c4 10             	add    $0x10,%esp
f0124363:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012436a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012436f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0124372:	5b                   	pop    %ebx
f0124373:	5f                   	pop    %edi
f0124374:	5d                   	pop    %ebp
f0124375:	c3                   	ret    

f0124376 <test_krealloc>:

int test_krealloc() {
f0124376:	55                   	push   %ebp
f0124377:	89 e5                	mov    %esp,%ebp
f0124379:	57                   	push   %edi
f012437a:	53                   	push   %ebx
f012437b:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f0124381:	83 ec 0c             	sub    $0xc,%esp
f0124384:	68 00 ff 12 f0       	push   $0xf012ff00
f0124389:	e8 9f c8 fd ff       	call   f0100c2d <cprintf>
f012438e:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0124391:	83 ec 0c             	sub    $0xc,%esp
f0124394:	68 30 ff 12 f0       	push   $0xf012ff30
f0124399:	e8 8f c8 fd ff       	call   f0100c2d <cprintf>
f012439e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f01243a1:	83 ec 0c             	sub    $0xc,%esp
f01243a4:	68 00 ff 12 f0       	push   $0xf012ff00
f01243a9:	e8 7f c8 fd ff       	call   f0100c2d <cprintf>
f01243ae:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f01243b1:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f01243b5:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f01243b9:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f01243bf:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f01243c5:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01243cc:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f01243d3:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01243d9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01243de:	b8 00 00 00 00       	mov    $0x0,%eax
f01243e3:	89 d7                	mov    %edx,%edi
f01243e5:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f01243e7:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f01243ee:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f01243f4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01243f9:	b8 00 00 00 00       	mov    $0x0,%eax
f01243fe:	89 d7                	mov    %edx,%edi
f0124400:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0124402:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f0124408:	b9 14 00 00 00       	mov    $0x14,%ecx
f012440d:	b8 00 00 00 00       	mov    $0x0,%eax
f0124412:	89 d7                	mov    %edx,%edi
f0124414:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0124416:	e8 95 71 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012441b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012441e:	83 ec 08             	sub    $0x8,%esp
f0124421:	68 00 fc 0f 00       	push   $0xffc00
f0124426:	6a 00                	push   $0x0
f0124428:	e8 7d 28 fe ff       	call   f0106caa <krealloc>
f012442d:	83 c4 10             	add    $0x10,%esp
f0124430:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0124436:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012443c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0124441:	77 17                	ja     f012445a <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0124443:	83 ec 04             	sub    $0x4,%esp
f0124446:	68 20 12 13 f0       	push   $0xf0131220
f012444b:	68 77 0e 00 00       	push   $0xe77
f0124450:	68 be ff 12 f0       	push   $0xf012ffbe
f0124455:	e8 4c bd fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012445a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124460:	89 c1                	mov    %eax,%ecx
f0124462:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124469:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012446e:	0f b6 d0             	movzbl %al,%edx
f0124471:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124474:	01 d0                	add    %edx,%eax
f0124476:	48                   	dec    %eax
f0124477:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012447a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012447d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124482:	f7 75 b4             	divl   -0x4c(%ebp)
f0124485:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124488:	29 d0                	sub    %edx,%eax
f012448a:	89 c3                	mov    %eax,%ebx
f012448c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124493:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124498:	0f b6 c0             	movzbl %al,%eax
f012449b:	c1 e0 04             	shl    $0x4,%eax
f012449e:	89 c2                	mov    %eax,%edx
f01244a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01244a3:	01 d0                	add    %edx,%eax
f01244a5:	48                   	dec    %eax
f01244a6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01244a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01244ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01244b1:	f7 75 ac             	divl   -0x54(%ebp)
f01244b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01244b7:	29 d0                	sub    %edx,%eax
f01244b9:	01 c3                	add    %eax,%ebx
f01244bb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01244c2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01244c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244ca:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01244cd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01244d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01244d5:	f7 75 a4             	divl   -0x5c(%ebp)
f01244d8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01244db:	29 d0                	sub    %edx,%eax
f01244dd:	01 d8                	add    %ebx,%eax
f01244df:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01244e4:	39 c1                	cmp    %eax,%ecx
f01244e6:	74 17                	je     f01244ff <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f01244e8:	83 ec 04             	sub    $0x4,%esp
f01244eb:	68 5c 12 13 f0       	push   $0xf013125c
f01244f0:	68 79 0e 00 00       	push   $0xe79
f01244f5:	68 be ff 12 f0       	push   $0xf012ffbe
f01244fa:	e8 a7 bc fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f01244ff:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0124502:	e8 a9 70 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124507:	29 c3                	sub    %eax,%ebx
f0124509:	89 d8                	mov    %ebx,%eax
f012450b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0124510:	74 17                	je     f0124529 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f0124512:	83 ec 04             	sub    $0x4,%esp
f0124515:	68 8e 12 13 f0       	push   $0xf013128e
f012451a:	68 7c 0e 00 00       	push   $0xe7c
f012451f:	68 be ff 12 f0       	push   $0xf012ffbe
f0124524:	e8 7d bc fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f0124529:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f0124530:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0124533:	e8 78 70 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124538:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012453b:	83 ec 08             	sub    $0x8,%esp
f012453e:	68 00 fc 0f 00       	push   $0xffc00
f0124543:	6a 00                	push   $0x0
f0124545:	e8 60 27 fe ff       	call   f0106caa <krealloc>
f012454a:	83 c4 10             	add    $0x10,%esp
f012454d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f0124553:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124559:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012455e:	77 17                	ja     f0124577 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f0124560:	83 ec 04             	sub    $0x4,%esp
f0124563:	68 20 12 13 f0       	push   $0xf0131220
f0124568:	68 84 0e 00 00       	push   $0xe84
f012456d:	68 be ff 12 f0       	push   $0xf012ffbe
f0124572:	e8 2f bc fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f0124577:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012457d:	89 c1                	mov    %eax,%ecx
f012457f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124586:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012458b:	0f b6 d0             	movzbl %al,%edx
f012458e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124591:	01 d0                	add    %edx,%eax
f0124593:	48                   	dec    %eax
f0124594:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124597:	8b 45 98             	mov    -0x68(%ebp),%eax
f012459a:	ba 00 00 00 00       	mov    $0x0,%edx
f012459f:	f7 75 9c             	divl   -0x64(%ebp)
f01245a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01245a5:	29 d0                	sub    %edx,%eax
f01245a7:	89 c3                	mov    %eax,%ebx
f01245a9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01245b0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01245b5:	0f b6 c0             	movzbl %al,%eax
f01245b8:	c1 e0 04             	shl    $0x4,%eax
f01245bb:	89 c2                	mov    %eax,%edx
f01245bd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01245c0:	01 d0                	add    %edx,%eax
f01245c2:	48                   	dec    %eax
f01245c3:	89 45 90             	mov    %eax,-0x70(%ebp)
f01245c6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01245c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01245ce:	f7 75 94             	divl   -0x6c(%ebp)
f01245d1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01245d4:	29 d0                	sub    %edx,%eax
f01245d6:	01 c3                	add    %eax,%ebx
f01245d8:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01245df:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01245e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245e7:	89 45 88             	mov    %eax,-0x78(%ebp)
f01245ea:	8b 45 88             	mov    -0x78(%ebp),%eax
f01245ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01245f2:	f7 75 8c             	divl   -0x74(%ebp)
f01245f5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01245f8:	29 d0                	sub    %edx,%eax
f01245fa:	01 d8                	add    %ebx,%eax
f01245fc:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0124601:	39 c1                	cmp    %eax,%ecx
f0124603:	74 17                	je     f012461c <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f0124605:	83 ec 04             	sub    $0x4,%esp
f0124608:	68 5c 12 13 f0       	push   $0xf013125c
f012460d:	68 86 0e 00 00       	push   $0xe86
f0124612:	68 be ff 12 f0       	push   $0xf012ffbe
f0124617:	e8 8a bb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012461c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012461f:	e8 8c 6f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124624:	29 c3                	sub    %eax,%ebx
f0124626:	89 d8                	mov    %ebx,%eax
f0124628:	3d 00 01 00 00       	cmp    $0x100,%eax
f012462d:	74 17                	je     f0124646 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012462f:	83 ec 04             	sub    $0x4,%esp
f0124632:	68 8e 12 13 f0       	push   $0xf013128e
f0124637:	68 88 0e 00 00       	push   $0xe88
f012463c:	68 be ff 12 f0       	push   $0xf012ffbe
f0124641:	e8 60 bb fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f0124646:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012464d:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0124650:	e8 5b 6f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124655:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f0124658:	83 ec 08             	sub    $0x8,%esp
f012465b:	68 00 fc 0f 00       	push   $0xffc00
f0124660:	6a 00                	push   $0x0
f0124662:	e8 43 26 fe ff       	call   f0106caa <krealloc>
f0124667:	83 c4 10             	add    $0x10,%esp
f012466a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f0124670:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124676:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012467b:	77 17                	ja     f0124694 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012467d:	83 ec 04             	sub    $0x4,%esp
f0124680:	68 20 12 13 f0       	push   $0xf0131220
f0124685:	68 90 0e 00 00       	push   $0xe90
f012468a:	68 be ff 12 f0       	push   $0xf012ffbe
f012468f:	e8 12 bb fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f0124694:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012469a:	89 c1                	mov    %eax,%ecx
f012469c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01246a3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01246a8:	0f b6 d0             	movzbl %al,%edx
f01246ab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01246ae:	01 d0                	add    %edx,%eax
f01246b0:	48                   	dec    %eax
f01246b1:	89 45 80             	mov    %eax,-0x80(%ebp)
f01246b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01246b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01246bc:	f7 75 84             	divl   -0x7c(%ebp)
f01246bf:	8b 45 80             	mov    -0x80(%ebp),%eax
f01246c2:	29 d0                	sub    %edx,%eax
f01246c4:	89 c3                	mov    %eax,%ebx
f01246c6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01246cd:	10 00 00 
f01246d0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01246d5:	0f b6 c0             	movzbl %al,%eax
f01246d8:	c1 e0 04             	shl    $0x4,%eax
f01246db:	89 c2                	mov    %eax,%edx
f01246dd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01246e3:	01 d0                	add    %edx,%eax
f01246e5:	48                   	dec    %eax
f01246e6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01246ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01246f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01246f7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01246fd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124703:	29 d0                	sub    %edx,%eax
f0124705:	01 c3                	add    %eax,%ebx
f0124707:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012470e:	10 00 00 
f0124711:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124717:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012471c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124722:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124728:	ba 00 00 00 00       	mov    $0x0,%edx
f012472d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124733:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124739:	29 d0                	sub    %edx,%eax
f012473b:	01 d8                	add    %ebx,%eax
f012473d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124742:	39 c1                	cmp    %eax,%ecx
f0124744:	74 17                	je     f012475d <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f0124746:	83 ec 04             	sub    $0x4,%esp
f0124749:	68 5c 12 13 f0       	push   $0xf013125c
f012474e:	68 92 0e 00 00       	push   $0xe92
f0124753:	68 be ff 12 f0       	push   $0xf012ffbe
f0124758:	e8 49 ba fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012475d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0124760:	e8 4b 6e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124765:	29 c3                	sub    %eax,%ebx
f0124767:	89 d8                	mov    %ebx,%eax
f0124769:	3d 00 01 00 00       	cmp    $0x100,%eax
f012476e:	74 17                	je     f0124787 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f0124770:	83 ec 04             	sub    $0x4,%esp
f0124773:	68 8e 12 13 f0       	push   $0xf013128e
f0124778:	68 94 0e 00 00       	push   $0xe94
f012477d:	68 be ff 12 f0       	push   $0xf012ffbe
f0124782:	e8 1f ba fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f0124787:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012478e:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0124791:	e8 1a 6e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124796:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f0124799:	83 ec 08             	sub    $0x8,%esp
f012479c:	68 00 fc 0f 00       	push   $0xffc00
f01247a1:	6a 00                	push   $0x0
f01247a3:	e8 02 25 fe ff       	call   f0106caa <krealloc>
f01247a8:	83 c4 10             	add    $0x10,%esp
f01247ab:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f01247b1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01247b7:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f01247bc:	77 17                	ja     f01247d5 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f01247be:	83 ec 04             	sub    $0x4,%esp
f01247c1:	68 20 12 13 f0       	push   $0xf0131220
f01247c6:	68 9b 0e 00 00       	push   $0xe9b
f01247cb:	68 be ff 12 f0       	push   $0xf012ffbe
f01247d0:	e8 d1 b9 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f01247d5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01247db:	89 c1                	mov    %eax,%ecx
f01247dd:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01247e4:	10 00 00 
f01247e7:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01247ec:	0f b6 d0             	movzbl %al,%edx
f01247ef:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01247f5:	01 d0                	add    %edx,%eax
f01247f7:	48                   	dec    %eax
f01247f8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01247fe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124804:	ba 00 00 00 00       	mov    $0x0,%edx
f0124809:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012480f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124815:	29 d0                	sub    %edx,%eax
f0124817:	89 c3                	mov    %eax,%ebx
f0124819:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124820:	10 00 00 
f0124823:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124828:	0f b6 c0             	movzbl %al,%eax
f012482b:	c1 e0 04             	shl    $0x4,%eax
f012482e:	89 c2                	mov    %eax,%edx
f0124830:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124836:	01 d0                	add    %edx,%eax
f0124838:	48                   	dec    %eax
f0124839:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012483f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124845:	ba 00 00 00 00       	mov    $0x0,%edx
f012484a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124850:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124856:	29 d0                	sub    %edx,%eax
f0124858:	01 c3                	add    %eax,%ebx
f012485a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124861:	10 00 00 
f0124864:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012486a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012486f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124875:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012487b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124880:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124886:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012488c:	29 d0                	sub    %edx,%eax
f012488e:	01 d8                	add    %ebx,%eax
f0124890:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0124895:	39 c1                	cmp    %eax,%ecx
f0124897:	74 17                	je     f01248b0 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f0124899:	83 ec 04             	sub    $0x4,%esp
f012489c:	68 5c 12 13 f0       	push   $0xf013125c
f01248a1:	68 9d 0e 00 00       	push   $0xe9d
f01248a6:	68 be ff 12 f0       	push   $0xf012ffbe
f01248ab:	e8 f6 b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f01248b0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01248b3:	e8 f8 6c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01248b8:	29 c3                	sub    %eax,%ebx
f01248ba:	89 d8                	mov    %ebx,%eax
f01248bc:	3d 00 01 00 00       	cmp    $0x100,%eax
f01248c1:	74 17                	je     f01248da <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f01248c3:	83 ec 04             	sub    $0x4,%esp
f01248c6:	68 8e 12 13 f0       	push   $0xf013128e
f01248cb:	68 9f 0e 00 00       	push   $0xe9f
f01248d0:	68 be ff 12 f0       	push   $0xf012ffbe
f01248d5:	e8 cc b8 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f01248da:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f01248e1:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f01248e4:	e8 c7 6c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01248e9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f01248ec:	83 ec 08             	sub    $0x8,%esp
f01248ef:	68 00 fc 1f 00       	push   $0x1ffc00
f01248f4:	6a 00                	push   $0x0
f01248f6:	e8 af 23 fe ff       	call   f0106caa <krealloc>
f01248fb:	83 c4 10             	add    $0x10,%esp
f01248fe:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f0124904:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012490a:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012490f:	77 17                	ja     f0124928 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f0124911:	83 ec 04             	sub    $0x4,%esp
f0124914:	68 20 12 13 f0       	push   $0xf0131220
f0124919:	68 a6 0e 00 00       	push   $0xea6
f012491e:	68 be ff 12 f0       	push   $0xf012ffbe
f0124923:	e8 7e b8 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f0124928:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012492e:	89 c1                	mov    %eax,%ecx
f0124930:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124937:	10 00 00 
f012493a:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012493f:	0f b6 d0             	movzbl %al,%edx
f0124942:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124948:	01 d0                	add    %edx,%eax
f012494a:	48                   	dec    %eax
f012494b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124951:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124957:	ba 00 00 00 00       	mov    $0x0,%edx
f012495c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124962:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124968:	29 d0                	sub    %edx,%eax
f012496a:	89 c3                	mov    %eax,%ebx
f012496c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124973:	10 00 00 
f0124976:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012497b:	0f b6 c0             	movzbl %al,%eax
f012497e:	c1 e0 04             	shl    $0x4,%eax
f0124981:	89 c2                	mov    %eax,%edx
f0124983:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124989:	01 d0                	add    %edx,%eax
f012498b:	48                   	dec    %eax
f012498c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124992:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124998:	ba 00 00 00 00       	mov    $0x0,%edx
f012499d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01249a3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01249a9:	29 d0                	sub    %edx,%eax
f01249ab:	01 c3                	add    %eax,%ebx
f01249ad:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01249b4:	10 00 00 
f01249b7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01249bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249c2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01249c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01249ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01249d3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01249d9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01249df:	29 d0                	sub    %edx,%eax
f01249e1:	01 d8                	add    %ebx,%eax
f01249e3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01249e8:	39 c1                	cmp    %eax,%ecx
f01249ea:	74 17                	je     f0124a03 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f01249ec:	83 ec 04             	sub    $0x4,%esp
f01249ef:	68 5c 12 13 f0       	push   $0xf013125c
f01249f4:	68 a8 0e 00 00       	push   $0xea8
f01249f9:	68 be ff 12 f0       	push   $0xf012ffbe
f01249fe:	e8 a3 b7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f0124a03:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0124a06:	e8 a5 6b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124a0b:	29 c3                	sub    %eax,%ebx
f0124a0d:	89 d8                	mov    %ebx,%eax
f0124a0f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124a14:	74 17                	je     f0124a2d <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f0124a16:	83 ec 04             	sub    $0x4,%esp
f0124a19:	68 8e 12 13 f0       	push   $0xf013128e
f0124a1e:	68 aa 0e 00 00       	push   $0xeaa
f0124a23:	68 be ff 12 f0       	push   $0xf012ffbe
f0124a28:	e8 79 b7 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f0124a2d:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f0124a34:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f0124a37:	e8 74 6b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124a3c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f0124a3f:	83 ec 08             	sub    $0x8,%esp
f0124a42:	68 00 fc 1f 00       	push   $0x1ffc00
f0124a47:	6a 00                	push   $0x0
f0124a49:	e8 5c 22 fe ff       	call   f0106caa <krealloc>
f0124a4e:	83 c4 10             	add    $0x10,%esp
f0124a51:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f0124a57:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124a5d:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f0124a62:	77 17                	ja     f0124a7b <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f0124a64:	83 ec 04             	sub    $0x4,%esp
f0124a67:	68 20 12 13 f0       	push   $0xf0131220
f0124a6c:	68 b1 0e 00 00       	push   $0xeb1
f0124a71:	68 be ff 12 f0       	push   $0xf012ffbe
f0124a76:	e8 2b b7 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f0124a7b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124a81:	89 c1                	mov    %eax,%ecx
f0124a83:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124a8a:	10 00 00 
f0124a8d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124a92:	0f b6 d0             	movzbl %al,%edx
f0124a95:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124a9b:	01 d0                	add    %edx,%eax
f0124a9d:	48                   	dec    %eax
f0124a9e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124aa4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124aaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aaf:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124ab5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124abb:	29 d0                	sub    %edx,%eax
f0124abd:	89 c3                	mov    %eax,%ebx
f0124abf:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124ac6:	10 00 00 
f0124ac9:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124ace:	0f b6 c0             	movzbl %al,%eax
f0124ad1:	c1 e0 04             	shl    $0x4,%eax
f0124ad4:	89 c2                	mov    %eax,%edx
f0124ad6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124adc:	01 d0                	add    %edx,%eax
f0124ade:	48                   	dec    %eax
f0124adf:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124ae5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124aeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124af0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124af6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124afc:	29 d0                	sub    %edx,%eax
f0124afe:	01 c3                	add    %eax,%ebx
f0124b00:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124b07:	10 00 00 
f0124b0a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124b10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b15:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124b1b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124b21:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b26:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124b2c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124b32:	29 d0                	sub    %edx,%eax
f0124b34:	01 d8                	add    %ebx,%eax
f0124b36:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0124b3b:	39 c1                	cmp    %eax,%ecx
f0124b3d:	74 17                	je     f0124b56 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f0124b3f:	83 ec 04             	sub    $0x4,%esp
f0124b42:	68 5c 12 13 f0       	push   $0xf013125c
f0124b47:	68 b3 0e 00 00       	push   $0xeb3
f0124b4c:	68 be ff 12 f0       	push   $0xf012ffbe
f0124b51:	e8 50 b6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f0124b56:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0124b59:	e8 52 6a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124b5e:	29 c3                	sub    %eax,%ebx
f0124b60:	89 d8                	mov    %ebx,%eax
f0124b62:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124b67:	74 17                	je     f0124b80 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f0124b69:	83 ec 04             	sub    $0x4,%esp
f0124b6c:	68 8e 12 13 f0       	push   $0xf013128e
f0124b71:	68 b5 0e 00 00       	push   $0xeb5
f0124b76:	68 be ff 12 f0       	push   $0xf012ffbe
f0124b7b:	e8 26 b6 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f0124b80:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f0124b87:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f0124b8a:	e8 21 6a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124b8f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f0124b92:	83 ec 08             	sub    $0x8,%esp
f0124b95:	68 00 fc 2f 00       	push   $0x2ffc00
f0124b9a:	6a 00                	push   $0x0
f0124b9c:	e8 09 21 fe ff       	call   f0106caa <krealloc>
f0124ba1:	83 c4 10             	add    $0x10,%esp
f0124ba4:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f0124baa:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0124bb0:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f0124bb5:	77 17                	ja     f0124bce <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f0124bb7:	83 ec 04             	sub    $0x4,%esp
f0124bba:	68 20 12 13 f0       	push   $0xf0131220
f0124bbf:	68 bc 0e 00 00       	push   $0xebc
f0124bc4:	68 be ff 12 f0       	push   $0xf012ffbe
f0124bc9:	e8 d8 b5 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f0124bce:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0124bd4:	89 c1                	mov    %eax,%ecx
f0124bd6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0124bdd:	10 00 00 
f0124be0:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124be5:	0f b6 d0             	movzbl %al,%edx
f0124be8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124bee:	01 d0                	add    %edx,%eax
f0124bf0:	48                   	dec    %eax
f0124bf1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0124bf7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124bfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c02:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0124c08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c0e:	29 d0                	sub    %edx,%eax
f0124c10:	89 c3                	mov    %eax,%ebx
f0124c12:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124c19:	10 00 00 
f0124c1c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124c21:	0f b6 c0             	movzbl %al,%eax
f0124c24:	c1 e0 04             	shl    $0x4,%eax
f0124c27:	89 c2                	mov    %eax,%edx
f0124c29:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124c2f:	01 d0                	add    %edx,%eax
f0124c31:	48                   	dec    %eax
f0124c32:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124c38:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124c3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c43:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124c49:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124c4f:	29 d0                	sub    %edx,%eax
f0124c51:	01 c3                	add    %eax,%ebx
f0124c53:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124c5a:	10 00 00 
f0124c5d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124c63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c68:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124c6e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124c74:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c79:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124c7f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124c85:	29 d0                	sub    %edx,%eax
f0124c87:	01 d8                	add    %ebx,%eax
f0124c89:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0124c8e:	39 c1                	cmp    %eax,%ecx
f0124c90:	74 17                	je     f0124ca9 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f0124c92:	83 ec 04             	sub    $0x4,%esp
f0124c95:	68 5c 12 13 f0       	push   $0xf013125c
f0124c9a:	68 be 0e 00 00       	push   $0xebe
f0124c9f:	68 be ff 12 f0       	push   $0xf012ffbe
f0124ca4:	e8 fd b4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f0124ca9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0124cac:	e8 ff 68 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124cb1:	29 c3                	sub    %eax,%ebx
f0124cb3:	89 d8                	mov    %ebx,%eax
f0124cb5:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124cba:	74 17                	je     f0124cd3 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f0124cbc:	83 ec 04             	sub    $0x4,%esp
f0124cbf:	68 08 04 13 f0       	push   $0xf0130408
f0124cc4:	68 c0 0e 00 00       	push   $0xec0
f0124cc9:	68 be ff 12 f0       	push   $0xf012ffbe
f0124cce:	e8 d3 b4 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f0124cd3:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f0124cda:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f0124cdd:	e8 ce 68 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124ce2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f0124ce5:	83 ec 08             	sub    $0x8,%esp
f0124ce8:	68 00 fc 2f 00       	push   $0x2ffc00
f0124ced:	6a 00                	push   $0x0
f0124cef:	e8 b6 1f fe ff       	call   f0106caa <krealloc>
f0124cf4:	83 c4 10             	add    $0x10,%esp
f0124cf7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f0124cfd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d03:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f0124d08:	77 17                	ja     f0124d21 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f0124d0a:	83 ec 04             	sub    $0x4,%esp
f0124d0d:	68 20 12 13 f0       	push   $0xf0131220
f0124d12:	68 c7 0e 00 00       	push   $0xec7
f0124d17:	68 be ff 12 f0       	push   $0xf012ffbe
f0124d1c:	e8 85 b4 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f0124d21:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124d27:	89 c1                	mov    %eax,%ecx
f0124d29:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0124d30:	10 00 00 
f0124d33:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124d38:	0f b6 d0             	movzbl %al,%edx
f0124d3b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124d41:	01 d0                	add    %edx,%eax
f0124d43:	48                   	dec    %eax
f0124d44:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0124d4a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124d50:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d55:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0124d5b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124d61:	29 d0                	sub    %edx,%eax
f0124d63:	89 c3                	mov    %eax,%ebx
f0124d65:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0124d6c:	10 00 00 
f0124d6f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0124d74:	0f b6 c0             	movzbl %al,%eax
f0124d77:	c1 e0 04             	shl    $0x4,%eax
f0124d7a:	89 c2                	mov    %eax,%edx
f0124d7c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124d82:	01 d0                	add    %edx,%eax
f0124d84:	48                   	dec    %eax
f0124d85:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0124d8b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124d91:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d96:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0124d9c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124da2:	29 d0                	sub    %edx,%eax
f0124da4:	01 c3                	add    %eax,%ebx
f0124da6:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0124dad:	10 00 00 
f0124db0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124db6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124dbb:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0124dc1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124dc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dcc:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0124dd2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124dd8:	29 d0                	sub    %edx,%eax
f0124dda:	01 d8                	add    %ebx,%eax
f0124ddc:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0124de1:	39 c1                	cmp    %eax,%ecx
f0124de3:	74 17                	je     f0124dfc <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f0124de5:	83 ec 04             	sub    $0x4,%esp
f0124de8:	68 5c 12 13 f0       	push   $0xf013125c
f0124ded:	68 c9 0e 00 00       	push   $0xec9
f0124df2:	68 be ff 12 f0       	push   $0xf012ffbe
f0124df7:	e8 aa b3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f0124dfc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0124dff:	e8 ac 67 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124e04:	29 c3                	sub    %eax,%ebx
f0124e06:	89 d8                	mov    %ebx,%eax
f0124e08:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124e0d:	74 17                	je     f0124e26 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f0124e0f:	83 ec 04             	sub    $0x4,%esp
f0124e12:	68 8e 12 13 f0       	push   $0xf013128e
f0124e17:	68 cb 0e 00 00       	push   $0xecb
f0124e1c:	68 be ff 12 f0       	push   $0xf012ffbe
f0124e21:	e8 80 b3 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f0124e26:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f0124e2d:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f0124e30:	e8 7b 67 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0124e35:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f0124e38:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f0124e3f:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f0124e42:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124e48:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f0124e4e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124e54:	8a 55 cf             	mov    -0x31(%ebp),%dl
f0124e57:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f0124e59:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f0124e5f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124e65:	01 c2                	add    %eax,%edx
f0124e67:	8a 45 ce             	mov    -0x32(%ebp),%al
f0124e6a:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f0124e6c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124e72:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f0124e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0124e7f:	eb 11                	jmp    f0124e92 <test_krealloc+0xb1c>
			ptr[i] = 2;
f0124e81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0124e84:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124e8a:	01 d0                	add    %edx,%eax
f0124e8c:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f0124e8f:	ff 45 f4             	incl   -0xc(%ebp)
f0124e92:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0124e98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0124e9b:	7d e4                	jge    f0124e81 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f0124e9d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124ea3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f0124ea9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124eaf:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f0124eb5:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0124ebb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0124ec2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124ec8:	01 d0                	add    %edx,%eax
f0124eca:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f0124ed0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124ed6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f0124edc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0124ee3:	eb 1b                	jmp    f0124f00 <test_krealloc+0xb8a>
			intArr[i] = 4;
f0124ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0124ee8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0124eef:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124ef5:	01 d0                	add    %edx,%eax
f0124ef7:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f0124efd:	ff 45 f0             	incl   -0x10(%ebp)
f0124f00:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0124f06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0124f09:	7d da                	jge    f0124ee5 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0124f0b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124f11:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f0124f17:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0124f1e:	eb 17                	jmp    f0124f37 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f0124f20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0124f23:	01 c0                	add    %eax,%eax
f0124f25:	89 c2                	mov    %eax,%edx
f0124f27:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124f2d:	01 d0                	add    %edx,%eax
f0124f2f:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f0124f34:	ff 45 ec             	incl   -0x14(%ebp)
f0124f37:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0124f3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0124f40:	7d de                	jge    f0124f20 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f0124f42:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124f48:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f0124f4e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124f54:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f0124f59:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0124f5f:	01 c0                	add    %eax,%eax
f0124f61:	89 c2                	mov    %eax,%edx
f0124f63:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124f69:	01 d0                	add    %edx,%eax
f0124f6b:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f0124f70:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0124f76:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f0124f7c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0124f83:	eb 49                	jmp    f0124fce <test_krealloc+0xc58>
			structArr[i].a = 7;
f0124f85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0124f88:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0124f8f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124f95:	01 d0                	add    %edx,%eax
f0124f97:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f0124f9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0124f9d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0124fa4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124faa:	01 d0                	add    %edx,%eax
f0124fac:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f0124fb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0124fb5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0124fbc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124fc2:	01 d0                	add    %edx,%eax
f0124fc4:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f0124fcb:	ff 45 e8             	incl   -0x18(%ebp)
f0124fce:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124fd4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0124fd7:	7d ac                	jge    f0124f85 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f0124fd9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124fdf:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f0124fe5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124feb:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f0124fee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124ff4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f0124ffa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125000:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f0125007:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012500d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0125014:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012501a:	01 d0                	add    %edx,%eax
f012501c:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012501f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125025:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012502c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125032:	01 d0                	add    %edx,%eax
f0125034:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012503a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125040:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0125047:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012504d:	01 d0                	add    %edx,%eax
f012504f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f0125056:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012505c:	8a 00                	mov    (%eax),%al
f012505e:	3a 45 cf             	cmp    -0x31(%ebp),%al
f0125061:	75 17                	jne    f012507a <test_krealloc+0xd04>
f0125063:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0125069:	89 c2                	mov    %eax,%edx
f012506b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125071:	01 d0                	add    %edx,%eax
f0125073:	8a 00                	mov    (%eax),%al
f0125075:	3a 45 ce             	cmp    -0x32(%ebp),%al
f0125078:	74 17                	je     f0125091 <test_krealloc+0xd1b>
			panic(
f012507a:	83 ec 04             	sub    $0x4,%esp
f012507d:	68 ac 12 13 f0       	push   $0xf01312ac
f0125082:	68 0e 0f 00 00       	push   $0xf0e
f0125087:	68 be ff 12 f0       	push   $0xf012ffbe
f012508c:	e8 15 b1 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f0125091:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125097:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012509d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01250a3:	8a 00                	mov    (%eax),%al
f01250a5:	3c 02                	cmp    $0x2,%al
f01250a7:	75 16                	jne    f01250bf <test_krealloc+0xd49>
f01250a9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01250af:	89 c2                	mov    %eax,%edx
f01250b1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01250b7:	01 d0                	add    %edx,%eax
f01250b9:	8a 00                	mov    (%eax),%al
f01250bb:	3c 02                	cmp    $0x2,%al
f01250bd:	74 20                	je     f01250df <test_krealloc+0xd69>
			panic(
f01250bf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01250c5:	8a 00                	mov    (%eax),%al
f01250c7:	0f be c0             	movsbl %al,%eax
f01250ca:	50                   	push   %eax
f01250cb:	68 ec 12 13 f0       	push   $0xf01312ec
f01250d0:	68 14 0f 00 00       	push   $0xf14
f01250d5:	68 be ff 12 f0       	push   $0xf012ffbe
f01250da:	e8 c7 b0 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f01250df:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01250e5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f01250eb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01250f1:	8b 00                	mov    (%eax),%eax
f01250f3:	83 f8 03             	cmp    $0x3,%eax
f01250f6:	75 1c                	jne    f0125114 <test_krealloc+0xd9e>
f01250f8:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01250fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0125105:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012510b:	01 d0                	add    %edx,%eax
f012510d:	8b 00                	mov    (%eax),%eax
f012510f:	83 f8 03             	cmp    $0x3,%eax
f0125112:	74 17                	je     f012512b <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f0125114:	83 ec 04             	sub    $0x4,%esp
f0125117:	68 38 13 13 f0       	push   $0xf0131338
f012511c:	68 18 0f 00 00       	push   $0xf18
f0125121:	68 be ff 12 f0       	push   $0xf012ffbe
f0125126:	e8 7b b0 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012512b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125131:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f0125137:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012513d:	8b 00                	mov    (%eax),%eax
f012513f:	83 f8 04             	cmp    $0x4,%eax
f0125142:	75 1c                	jne    f0125160 <test_krealloc+0xdea>
f0125144:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012514a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0125151:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125157:	01 d0                	add    %edx,%eax
f0125159:	8b 00                	mov    (%eax),%eax
f012515b:	83 f8 04             	cmp    $0x4,%eax
f012515e:	74 17                	je     f0125177 <test_krealloc+0xe01>
			panic(
f0125160:	83 ec 04             	sub    $0x4,%esp
f0125163:	68 ac 12 13 f0       	push   $0xf01312ac
f0125168:	68 1d 0f 00 00       	push   $0xf1d
f012516d:	68 be ff 12 f0       	push   $0xf012ffbe
f0125172:	e8 2f b0 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f0125177:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012517d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f0125183:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125189:	66 8b 00             	mov    (%eax),%ax
f012518c:	66 83 f8 05          	cmp    $0x5,%ax
f0125190:	75 1b                	jne    f01251ad <test_krealloc+0xe37>
f0125192:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0125198:	01 c0                	add    %eax,%eax
f012519a:	89 c2                	mov    %eax,%edx
f012519c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01251a2:	01 d0                	add    %edx,%eax
f01251a4:	66 8b 00             	mov    (%eax),%ax
f01251a7:	66 83 f8 05          	cmp    $0x5,%ax
f01251ab:	74 17                	je     f01251c4 <test_krealloc+0xe4e>
			panic(
f01251ad:	83 ec 04             	sub    $0x4,%esp
f01251b0:	68 ac 12 13 f0       	push   $0xf01312ac
f01251b5:	68 22 0f 00 00       	push   $0xf22
f01251ba:	68 be ff 12 f0       	push   $0xf012ffbe
f01251bf:	e8 e2 af fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f01251c4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01251ca:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f01251d0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01251d6:	66 8b 00             	mov    (%eax),%ax
f01251d9:	66 83 f8 06          	cmp    $0x6,%ax
f01251dd:	75 1b                	jne    f01251fa <test_krealloc+0xe84>
f01251df:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01251e5:	01 c0                	add    %eax,%eax
f01251e7:	89 c2                	mov    %eax,%edx
f01251e9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01251ef:	01 d0                	add    %edx,%eax
f01251f1:	66 8b 00             	mov    (%eax),%ax
f01251f4:	66 83 f8 06          	cmp    $0x6,%ax
f01251f8:	74 17                	je     f0125211 <test_krealloc+0xe9b>
			panic(
f01251fa:	83 ec 04             	sub    $0x4,%esp
f01251fd:	68 ac 12 13 f0       	push   $0xf01312ac
f0125202:	68 27 0f 00 00       	push   $0xf27
f0125207:	68 be ff 12 f0       	push   $0xf012ffbe
f012520c:	e8 95 af fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f0125211:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125217:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012521d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125223:	8a 00                	mov    (%eax),%al
f0125225:	3c 07                	cmp    $0x7,%al
f0125227:	75 1b                	jne    f0125244 <test_krealloc+0xece>
f0125229:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012522f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0125236:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012523c:	01 d0                	add    %edx,%eax
f012523e:	8a 00                	mov    (%eax),%al
f0125240:	3c 07                	cmp    $0x7,%al
f0125242:	74 17                	je     f012525b <test_krealloc+0xee5>
			panic(
f0125244:	83 ec 04             	sub    $0x4,%esp
f0125247:	68 ac 12 13 f0       	push   $0xf01312ac
f012524c:	68 2c 0f 00 00       	push   $0xf2c
f0125251:	68 be ff 12 f0       	push   $0xf012ffbe
f0125256:	e8 4b af fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012525b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125261:	66 8b 40 02          	mov    0x2(%eax),%ax
f0125265:	66 83 f8 07          	cmp    $0x7,%ax
f0125269:	75 1f                	jne    f012528a <test_krealloc+0xf14>
f012526b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125271:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0125278:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012527e:	01 d0                	add    %edx,%eax
f0125280:	66 8b 40 02          	mov    0x2(%eax),%ax
f0125284:	66 83 f8 07          	cmp    $0x7,%ax
f0125288:	74 17                	je     f01252a1 <test_krealloc+0xf2b>
			panic(
f012528a:	83 ec 04             	sub    $0x4,%esp
f012528d:	68 ac 12 13 f0       	push   $0xf01312ac
f0125292:	68 2f 0f 00 00       	push   $0xf2f
f0125297:	68 be ff 12 f0       	push   $0xf012ffbe
f012529c:	e8 05 af fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f01252a1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01252a7:	8b 40 04             	mov    0x4(%eax),%eax
f01252aa:	83 f8 07             	cmp    $0x7,%eax
f01252ad:	75 1d                	jne    f01252cc <test_krealloc+0xf56>
f01252af:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01252b5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01252bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01252c2:	01 d0                	add    %edx,%eax
f01252c4:	8b 40 04             	mov    0x4(%eax),%eax
f01252c7:	83 f8 07             	cmp    $0x7,%eax
f01252ca:	74 17                	je     f01252e3 <test_krealloc+0xf6d>
			panic(
f01252cc:	83 ec 04             	sub    $0x4,%esp
f01252cf:	68 ac 12 13 f0       	push   $0xf01312ac
f01252d4:	68 32 0f 00 00       	push   $0xf32
f01252d9:	68 be ff 12 f0       	push   $0xf012ffbe
f01252de:	e8 c3 ae fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f01252e3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01252e9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f01252ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01252f5:	8a 00                	mov    (%eax),%al
f01252f7:	3c 08                	cmp    $0x8,%al
f01252f9:	75 1b                	jne    f0125316 <test_krealloc+0xfa0>
f01252fb:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125301:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0125308:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012530e:	01 d0                	add    %edx,%eax
f0125310:	8a 00                	mov    (%eax),%al
f0125312:	3c 08                	cmp    $0x8,%al
f0125314:	74 17                	je     f012532d <test_krealloc+0xfb7>
			panic(
f0125316:	83 ec 04             	sub    $0x4,%esp
f0125319:	68 ac 12 13 f0       	push   $0xf01312ac
f012531e:	68 37 0f 00 00       	push   $0xf37
f0125323:	68 be ff 12 f0       	push   $0xf012ffbe
f0125328:	e8 79 ae fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012532d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125333:	66 8b 40 02          	mov    0x2(%eax),%ax
f0125337:	66 83 f8 08          	cmp    $0x8,%ax
f012533b:	75 1f                	jne    f012535c <test_krealloc+0xfe6>
f012533d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125343:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012534a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125350:	01 d0                	add    %edx,%eax
f0125352:	66 8b 40 02          	mov    0x2(%eax),%ax
f0125356:	66 83 f8 08          	cmp    $0x8,%ax
f012535a:	74 17                	je     f0125373 <test_krealloc+0xffd>
			panic(
f012535c:	83 ec 04             	sub    $0x4,%esp
f012535f:	68 ac 12 13 f0       	push   $0xf01312ac
f0125364:	68 3a 0f 00 00       	push   $0xf3a
f0125369:	68 be ff 12 f0       	push   $0xf012ffbe
f012536e:	e8 33 ae fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f0125373:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125379:	8b 40 04             	mov    0x4(%eax),%eax
f012537c:	83 f8 08             	cmp    $0x8,%eax
f012537f:	75 1d                	jne    f012539e <test_krealloc+0x1028>
f0125381:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125387:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012538e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125394:	01 d0                	add    %edx,%eax
f0125396:	8b 40 04             	mov    0x4(%eax),%eax
f0125399:	83 f8 08             	cmp    $0x8,%eax
f012539c:	74 17                	je     f01253b5 <test_krealloc+0x103f>
			panic(
f012539e:	83 ec 04             	sub    $0x4,%esp
f01253a1:	68 ac 12 13 f0       	push   $0xf01312ac
f01253a6:	68 3d 0f 00 00       	push   $0xf3d
f01253ab:	68 be ff 12 f0       	push   $0xf012ffbe
f01253b0:	e8 f1 ad fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f01253b5:	e8 f6 61 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01253ba:	89 c2                	mov    %eax,%edx
f01253bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01253bf:	39 c2                	cmp    %eax,%edx
f01253c1:	74 17                	je     f01253da <test_krealloc+0x1064>
			panic(
f01253c3:	83 ec 04             	sub    $0x4,%esp
f01253c6:	68 6c 13 13 f0       	push   $0xf013136c
f01253cb:	68 41 0f 00 00       	push   $0xf41
f01253d0:	68 be ff 12 f0       	push   $0xf012ffbe
f01253d5:	e8 cc ad fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f01253da:	83 ec 0c             	sub    $0xc,%esp
f01253dd:	68 b8 13 13 f0       	push   $0xf01313b8
f01253e2:	e8 46 b8 fd ff       	call   f0100c2d <cprintf>
f01253e7:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f01253ea:	e8 c1 61 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01253ef:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01253f2:	e8 ad e0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01253f7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f01253fd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125403:	83 ec 08             	sub    $0x8,%esp
f0125406:	6a 00                	push   $0x0
f0125408:	50                   	push   %eax
f0125409:	e8 9c 18 fe ff       	call   f0106caa <krealloc>
f012540e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0125411:	e8 8e e0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0125416:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012541c:	74 17                	je     f0125435 <test_krealloc+0x10bf>
			panic(
f012541e:	83 ec 04             	sub    $0x4,%esp
f0125421:	68 dc 13 13 f0       	push   $0xf01313dc
f0125426:	68 4e 0f 00 00       	push   $0xf4e
f012542b:	68 be ff 12 f0       	push   $0xf012ffbe
f0125430:	e8 71 ad fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f0125435:	e8 76 61 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012543a:	89 c2                	mov    %eax,%edx
f012543c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012543f:	29 c2                	sub    %eax,%edx
f0125441:	89 d0                	mov    %edx,%eax
f0125443:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125448:	74 17                	je     f0125461 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012544a:	83 ec 04             	sub    $0x4,%esp
f012544d:	68 50 14 13 f0       	push   $0xf0131450
f0125452:	68 50 0f 00 00       	push   $0xf50
f0125457:	68 be ff 12 f0       	push   $0xf012ffbe
f012545c:	e8 45 ad fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f0125461:	e8 4a 61 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125466:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0125469:	e8 36 e0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012546e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f0125474:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012547a:	83 ec 08             	sub    $0x8,%esp
f012547d:	6a 00                	push   $0x0
f012547f:	50                   	push   %eax
f0125480:	e8 25 18 fe ff       	call   f0106caa <krealloc>
f0125485:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0125488:	e8 17 e0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012548d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0125493:	74 17                	je     f01254ac <test_krealloc+0x1136>
			panic(
f0125495:	83 ec 04             	sub    $0x4,%esp
f0125498:	68 dc 13 13 f0       	push   $0xf01313dc
f012549d:	68 59 0f 00 00       	push   $0xf59
f01254a2:	68 be ff 12 f0       	push   $0xf012ffbe
f01254a7:	e8 fa ac fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f01254ac:	e8 ff 60 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01254b1:	89 c2                	mov    %eax,%edx
f01254b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01254b6:	29 c2                	sub    %eax,%edx
f01254b8:	89 d0                	mov    %edx,%eax
f01254ba:	3d 00 01 00 00       	cmp    $0x100,%eax
f01254bf:	74 17                	je     f01254d8 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f01254c1:	83 ec 04             	sub    $0x4,%esp
f01254c4:	68 50 14 13 f0       	push   $0xf0131450
f01254c9:	68 5b 0f 00 00       	push   $0xf5b
f01254ce:	68 be ff 12 f0       	push   $0xf012ffbe
f01254d3:	e8 ce ac fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f01254d8:	e8 d3 60 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01254dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01254e0:	e8 bf df fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01254e5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f01254eb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01254f1:	83 ec 08             	sub    $0x8,%esp
f01254f4:	6a 00                	push   $0x0
f01254f6:	50                   	push   %eax
f01254f7:	e8 ae 17 fe ff       	call   f0106caa <krealloc>
f01254fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01254ff:	e8 a0 df fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0125504:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012550a:	74 17                	je     f0125523 <test_krealloc+0x11ad>
			panic(
f012550c:	83 ec 04             	sub    $0x4,%esp
f012550f:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0125514:	68 63 0f 00 00       	push   $0xf63
f0125519:	68 be ff 12 f0       	push   $0xf012ffbe
f012551e:	e8 83 ac fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f0125523:	e8 88 60 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125528:	89 c2                	mov    %eax,%edx
f012552a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012552d:	29 c2                	sub    %eax,%edx
f012552f:	89 d0                	mov    %edx,%eax
f0125531:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125536:	74 17                	je     f012554f <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f0125538:	83 ec 04             	sub    $0x4,%esp
f012553b:	68 50 14 13 f0       	push   $0xf0131450
f0125540:	68 65 0f 00 00       	push   $0xf65
f0125545:	68 be ff 12 f0       	push   $0xf012ffbe
f012554a:	e8 57 ac fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012554f:	e8 5c 60 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125554:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0125557:	e8 48 df fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012555c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f0125562:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125568:	83 ec 08             	sub    $0x8,%esp
f012556b:	6a 00                	push   $0x0
f012556d:	50                   	push   %eax
f012556e:	e8 37 17 fe ff       	call   f0106caa <krealloc>
f0125573:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0125576:	e8 29 df fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012557b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0125581:	74 17                	je     f012559a <test_krealloc+0x1224>
			panic(
f0125583:	83 ec 04             	sub    $0x4,%esp
f0125586:	68 dc 13 13 f0       	push   $0xf01313dc
f012558b:	68 6d 0f 00 00       	push   $0xf6d
f0125590:	68 be ff 12 f0       	push   $0xf012ffbe
f0125595:	e8 0c ac fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012559a:	e8 11 60 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012559f:	89 c2                	mov    %eax,%edx
f01255a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01255a4:	29 c2                	sub    %eax,%edx
f01255a6:	89 d0                	mov    %edx,%eax
f01255a8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01255ad:	74 17                	je     f01255c6 <test_krealloc+0x1250>
			panic(
f01255af:	83 ec 04             	sub    $0x4,%esp
f01255b2:	68 84 14 13 f0       	push   $0xf0131484
f01255b7:	68 70 0f 00 00       	push   $0xf70
f01255bc:	68 be ff 12 f0       	push   $0xf012ffbe
f01255c1:	e8 e0 ab fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01255c6:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01255cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01255d4:	eb 48                	jmp    f012561e <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f01255d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01255d9:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f01255de:	83 ec 04             	sub    $0x4,%esp
f01255e1:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f01255e7:	51                   	push   %ecx
f01255e8:	52                   	push   %edx
f01255e9:	50                   	push   %eax
f01255ea:	e8 92 0b fe ff       	call   f0106181 <get_page_table>
f01255ef:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01255f2:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f01255f8:	85 c0                	test   %eax,%eax
f01255fa:	75 17                	jne    f0125613 <test_krealloc+0x129d>
					panic(
f01255fc:	83 ec 04             	sub    $0x4,%esp
f01255ff:	68 c0 08 13 f0       	push   $0xf01308c0
f0125604:	68 7c 0f 00 00       	push   $0xf7c
f0125609:	68 be ff 12 f0       	push   $0xf012ffbe
f012560e:	e8 93 ab fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f0125613:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012561a:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012561e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0125622:	78 b2                	js     f01255d6 <test_krealloc+0x1260>
f0125624:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0125628:	7f 09                	jg     f0125633 <test_krealloc+0x12bd>
f012562a:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f0125631:	76 a3                	jbe    f01255d6 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f0125633:	83 ec 0c             	sub    $0xc,%esp
f0125636:	68 c3 14 13 f0       	push   $0xf01314c3
f012563b:	e8 ed b5 fd ff       	call   f0100c2d <cprintf>
f0125640:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f0125643:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125649:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012564f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0125656:	eb 21                	jmp    f0125679 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f0125658:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012565e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125661:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125667:	01 c8                	add    %ecx,%eax
f0125669:	8a 00                	mov    (%eax),%al
f012566b:	0f be c0             	movsbl %al,%eax
f012566e:	01 d0                	add    %edx,%eax
f0125670:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f0125676:	ff 45 dc             	incl   -0x24(%ebp)
f0125679:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012567f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125682:	7d d4                	jge    f0125658 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f0125684:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012568a:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f0125690:	42                   	inc    %edx
f0125691:	01 d2                	add    %edx,%edx
f0125693:	39 d0                	cmp    %edx,%eax
f0125695:	74 17                	je     f01256ae <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f0125697:	83 ec 04             	sub    $0x4,%esp
f012569a:	68 cc 14 13 f0       	push   $0xf01314cc
f012569f:	68 8e 0f 00 00       	push   $0xf8e
f01256a4:	68 be ff 12 f0       	push   $0xf012ffbe
f01256a9:	e8 f8 aa fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f01256ae:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01256b4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f01256ba:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01256c1:	eb 25                	jmp    f01256e8 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f01256c3:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f01256c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01256cc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01256d3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01256d9:	01 c8                	add    %ecx,%eax
f01256db:	8b 00                	mov    (%eax),%eax
f01256dd:	01 d0                	add    %edx,%eax
f01256df:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f01256e5:	ff 45 dc             	incl   -0x24(%ebp)
f01256e8:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01256ee:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01256f1:	7d d0                	jge    f01256c3 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f01256f3:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01256f9:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f01256ff:	42                   	inc    %edx
f0125700:	c1 e2 02             	shl    $0x2,%edx
f0125703:	39 d0                	cmp    %edx,%eax
f0125705:	74 17                	je     f012571e <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f0125707:	83 ec 04             	sub    $0x4,%esp
f012570a:	68 cc 14 13 f0       	push   $0xf01314cc
f012570f:	68 98 0f 00 00       	push   $0xf98
f0125714:	68 be ff 12 f0       	push   $0xf012ffbe
f0125719:	e8 88 aa fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012571e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125724:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012572a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0125731:	eb 24                	jmp    f0125757 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f0125733:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f0125739:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012573c:	01 c0                	add    %eax,%eax
f012573e:	89 c1                	mov    %eax,%ecx
f0125740:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125746:	01 c8                	add    %ecx,%eax
f0125748:	66 8b 00             	mov    (%eax),%ax
f012574b:	98                   	cwtl   
f012574c:	01 d0                	add    %edx,%eax
f012574e:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f0125754:	ff 45 dc             	incl   -0x24(%ebp)
f0125757:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012575d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125760:	7d d1                	jge    f0125733 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f0125762:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f0125768:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012576e:	8d 48 01             	lea    0x1(%eax),%ecx
f0125771:	89 c8                	mov    %ecx,%eax
f0125773:	c1 e0 02             	shl    $0x2,%eax
f0125776:	01 c8                	add    %ecx,%eax
f0125778:	39 c2                	cmp    %eax,%edx
f012577a:	74 17                	je     f0125793 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012577c:	83 ec 04             	sub    $0x4,%esp
f012577f:	68 cc 14 13 f0       	push   $0xf01314cc
f0125784:	68 a2 0f 00 00       	push   $0xfa2
f0125789:	68 be ff 12 f0       	push   $0xf012ffbe
f012578e:	e8 13 aa fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f0125793:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125799:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012579f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01257a6:	eb 70                	jmp    f0125818 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f01257a8:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f01257ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01257b1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01257b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01257be:	01 c8                	add    %ecx,%eax
f01257c0:	8a 00                	mov    (%eax),%al
f01257c2:	0f be c0             	movsbl %al,%eax
f01257c5:	01 d0                	add    %edx,%eax
f01257c7:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f01257cd:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f01257d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01257d6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01257dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01257e3:	01 c8                	add    %ecx,%eax
f01257e5:	66 8b 40 02          	mov    0x2(%eax),%ax
f01257e9:	98                   	cwtl   
f01257ea:	01 d0                	add    %edx,%eax
f01257ec:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f01257f2:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f01257f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01257fb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0125802:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125808:	01 c8                	add    %ecx,%eax
f012580a:	8b 40 04             	mov    0x4(%eax),%eax
f012580d:	01 d0                	add    %edx,%eax
f012580f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f0125815:	ff 45 dc             	incl   -0x24(%ebp)
f0125818:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012581e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125821:	7d 85                	jge    f01257a8 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f0125823:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f0125829:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012582f:	8d 50 01             	lea    0x1(%eax),%edx
f0125832:	89 d0                	mov    %edx,%eax
f0125834:	01 c0                	add    %eax,%eax
f0125836:	01 d0                	add    %edx,%eax
f0125838:	01 c0                	add    %eax,%eax
f012583a:	01 d0                	add    %edx,%eax
f012583c:	39 c1                	cmp    %eax,%ecx
f012583e:	75 3a                	jne    f012587a <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f0125840:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f0125846:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012584c:	8d 50 01             	lea    0x1(%eax),%edx
f012584f:	89 d0                	mov    %edx,%eax
f0125851:	01 c0                	add    %eax,%eax
f0125853:	01 d0                	add    %edx,%eax
f0125855:	01 c0                	add    %eax,%eax
f0125857:	01 d0                	add    %edx,%eax
f0125859:	39 c1                	cmp    %eax,%ecx
f012585b:	75 1d                	jne    f012587a <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012585d:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f0125863:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125869:	8d 50 01             	lea    0x1(%eax),%edx
f012586c:	89 d0                	mov    %edx,%eax
f012586e:	01 c0                	add    %eax,%eax
f0125870:	01 d0                	add    %edx,%eax
f0125872:	01 c0                	add    %eax,%eax
f0125874:	01 d0                	add    %edx,%eax
f0125876:	39 c1                	cmp    %eax,%ecx
f0125878:	74 17                	je     f0125891 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012587a:	83 ec 04             	sub    $0x4,%esp
f012587d:	68 cc 14 13 f0       	push   $0xf01314cc
f0125882:	68 b0 0f 00 00       	push   $0xfb0
f0125887:	68 be ff 12 f0       	push   $0xf012ffbe
f012588c:	e8 15 a9 fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f0125891:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f0125898:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012589b:	e8 10 5d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01258a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f01258a3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01258a9:	83 ec 08             	sub    $0x8,%esp
f01258ac:	68 00 3c 00 00       	push   $0x3c00
f01258b1:	50                   	push   %eax
f01258b2:	e8 f3 13 fe ff       	call   f0106caa <krealloc>
f01258b7:	83 c4 10             	add    $0x10,%esp
f01258ba:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f01258c0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01258c6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01258cb:	77 17                	ja     f01258e4 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f01258cd:	83 ec 04             	sub    $0x4,%esp
f01258d0:	68 20 12 13 f0       	push   $0xf0131220
f01258d5:	68 bc 0f 00 00       	push   $0xfbc
f01258da:	68 be ff 12 f0       	push   $0xf012ffbe
f01258df:	e8 c2 a8 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f01258e4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01258ea:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01258f0:	74 17                	je     f0125909 <test_krealloc+0x1593>
			panic(
f01258f2:	83 ec 04             	sub    $0x4,%esp
f01258f5:	68 04 15 13 f0       	push   $0xf0131504
f01258fa:	68 bf 0f 00 00       	push   $0xfbf
f01258ff:	68 be ff 12 f0       	push   $0xf012ffbe
f0125904:	e8 9d a8 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f0125909:	e8 a2 5c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012590e:	89 c2                	mov    %eax,%edx
f0125910:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125913:	39 c2                	cmp    %eax,%edx
f0125915:	74 17                	je     f012592e <test_krealloc+0x15b8>
			panic(
f0125917:	83 ec 04             	sub    $0x4,%esp
f012591a:	68 70 15 13 f0       	push   $0xf0131570
f012591f:	68 c2 0f 00 00       	push   $0xfc2
f0125924:	68 be ff 12 f0       	push   $0xf012ffbe
f0125929:	e8 78 a8 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012592e:	e8 7d 5c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125933:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f0125936:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012593c:	83 ec 08             	sub    $0x8,%esp
f012593f:	68 00 fc 0f 00       	push   $0xffc00
f0125944:	50                   	push   %eax
f0125945:	e8 60 13 fe ff       	call   f0106caa <krealloc>
f012594a:	83 c4 10             	add    $0x10,%esp
f012594d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125953:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125959:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012595e:	77 17                	ja     f0125977 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125960:	83 ec 04             	sub    $0x4,%esp
f0125963:	68 20 12 13 f0       	push   $0xf0131220
f0125968:	68 c8 0f 00 00       	push   $0xfc8
f012596d:	68 be ff 12 f0       	push   $0xf012ffbe
f0125972:	e8 2f a8 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f0125977:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012597d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0125983:	74 17                	je     f012599c <test_krealloc+0x1626>
			panic(
f0125985:	83 ec 04             	sub    $0x4,%esp
f0125988:	68 04 15 13 f0       	push   $0xf0131504
f012598d:	68 cb 0f 00 00       	push   $0xfcb
f0125992:	68 be ff 12 f0       	push   $0xf012ffbe
f0125997:	e8 0a a8 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012599c:	e8 0f 5c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01259a1:	89 c2                	mov    %eax,%edx
f01259a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01259a6:	39 c2                	cmp    %eax,%edx
f01259a8:	74 17                	je     f01259c1 <test_krealloc+0x164b>
			panic(
f01259aa:	83 ec 04             	sub    $0x4,%esp
f01259ad:	68 70 15 13 f0       	push   $0xf0131570
f01259b2:	68 ce 0f 00 00       	push   $0xfce
f01259b7:	68 be ff 12 f0       	push   $0xf012ffbe
f01259bc:	e8 e5 a7 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f01259c1:	e8 ea 5b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01259c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f01259c9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01259cf:	83 ec 08             	sub    $0x8,%esp
f01259d2:	68 00 fc 0f 00       	push   $0xffc00
f01259d7:	50                   	push   %eax
f01259d8:	e8 cd 12 fe ff       	call   f0106caa <krealloc>
f01259dd:	83 c4 10             	add    $0x10,%esp
f01259e0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f01259e6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01259ec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01259f1:	77 17                	ja     f0125a0a <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f01259f3:	83 ec 04             	sub    $0x4,%esp
f01259f6:	68 20 12 13 f0       	push   $0xf0131220
f01259fb:	68 d4 0f 00 00       	push   $0xfd4
f0125a00:	68 be ff 12 f0       	push   $0xf012ffbe
f0125a05:	e8 9c a7 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f0125a0a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125a10:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0125a16:	74 17                	je     f0125a2f <test_krealloc+0x16b9>
			panic(
f0125a18:	83 ec 04             	sub    $0x4,%esp
f0125a1b:	68 04 15 13 f0       	push   $0xf0131504
f0125a20:	68 d7 0f 00 00       	push   $0xfd7
f0125a25:	68 be ff 12 f0       	push   $0xf012ffbe
f0125a2a:	e8 77 a7 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f0125a2f:	e8 7c 5b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125a34:	89 c2                	mov    %eax,%edx
f0125a36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125a39:	39 c2                	cmp    %eax,%edx
f0125a3b:	74 17                	je     f0125a54 <test_krealloc+0x16de>
			panic(
f0125a3d:	83 ec 04             	sub    $0x4,%esp
f0125a40:	68 70 15 13 f0       	push   $0xf0131570
f0125a45:	68 da 0f 00 00       	push   $0xfda
f0125a4a:	68 be ff 12 f0       	push   $0xf012ffbe
f0125a4f:	e8 52 a7 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f0125a54:	e8 57 5b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125a59:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f0125a5c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125a62:	83 ec 08             	sub    $0x8,%esp
f0125a65:	68 00 fc 0f 00       	push   $0xffc00
f0125a6a:	50                   	push   %eax
f0125a6b:	e8 3a 12 fe ff       	call   f0106caa <krealloc>
f0125a70:	83 c4 10             	add    $0x10,%esp
f0125a73:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125a79:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125a7f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0125a84:	77 17                	ja     f0125a9d <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125a86:	83 ec 04             	sub    $0x4,%esp
f0125a89:	68 20 12 13 f0       	push   $0xf0131220
f0125a8e:	68 e2 0f 00 00       	push   $0xfe2
f0125a93:	68 be ff 12 f0       	push   $0xf012ffbe
f0125a98:	e8 09 a7 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f0125a9d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125aa3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0125aa9:	74 17                	je     f0125ac2 <test_krealloc+0x174c>
			panic(
f0125aab:	83 ec 04             	sub    $0x4,%esp
f0125aae:	68 b4 15 13 f0       	push   $0xf01315b4
f0125ab3:	68 e5 0f 00 00       	push   $0xfe5
f0125ab8:	68 be ff 12 f0       	push   $0xf012ffbe
f0125abd:	e8 e4 a6 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f0125ac2:	e8 e9 5a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125ac7:	89 c2                	mov    %eax,%edx
f0125ac9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125acc:	39 c2                	cmp    %eax,%edx
f0125ace:	74 17                	je     f0125ae7 <test_krealloc+0x1771>
			panic(
f0125ad0:	83 ec 04             	sub    $0x4,%esp
f0125ad3:	68 70 15 13 f0       	push   $0xf0131570
f0125ad8:	68 e8 0f 00 00       	push   $0xfe8
f0125add:	68 be ff 12 f0       	push   $0xf012ffbe
f0125ae2:	e8 bf a6 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f0125ae7:	83 ec 0c             	sub    $0xc,%esp
f0125aea:	68 d7 07 13 f0       	push   $0xf01307d7
f0125aef:	e8 39 b1 fd ff       	call   f0100c2d <cprintf>
f0125af4:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f0125af7:	e8 b4 5a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125afc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f0125aff:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125b05:	83 ec 08             	sub    $0x8,%esp
f0125b08:	68 00 18 10 00       	push   $0x101800
f0125b0d:	50                   	push   %eax
f0125b0e:	e8 97 11 fe ff       	call   f0106caa <krealloc>
f0125b13:	83 c4 10             	add    $0x10,%esp
f0125b16:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125b19:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125b1c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0125b21:	77 17                	ja     f0125b3a <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125b23:	83 ec 04             	sub    $0x4,%esp
f0125b26:	68 20 12 13 f0       	push   $0xf0131220
f0125b2b:	68 f1 0f 00 00       	push   $0xff1
f0125b30:	68 be ff 12 f0       	push   $0xf012ffbe
f0125b35:	e8 6c a6 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f0125b3a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125b40:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0125b43:	74 17                	je     f0125b5c <test_krealloc+0x17e6>
			panic(
f0125b45:	83 ec 04             	sub    $0x4,%esp
f0125b48:	68 14 16 13 f0       	push   $0xf0131614
f0125b4d:	68 f4 0f 00 00       	push   $0xff4
f0125b52:	68 be ff 12 f0       	push   $0xf012ffbe
f0125b57:	e8 4a a6 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f0125b5c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0125b5f:	e8 4c 5a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125b64:	29 c3                	sub    %eax,%ebx
f0125b66:	89 d8                	mov    %ebx,%eax
f0125b68:	83 f8 02             	cmp    $0x2,%eax
f0125b6b:	74 17                	je     f0125b84 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f0125b6d:	83 ec 04             	sub    $0x4,%esp
f0125b70:	68 90 16 13 f0       	push   $0xf0131690
f0125b75:	68 f6 0f 00 00       	push   $0xff6
f0125b7a:	68 be ff 12 f0       	push   $0xf012ffbe
f0125b7f:	e8 22 a6 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f0125b84:	e8 27 5a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125b89:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f0125b8c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125b92:	83 ec 08             	sub    $0x8,%esp
f0125b95:	68 00 fc 3f 00       	push   $0x3ffc00
f0125b9a:	50                   	push   %eax
f0125b9b:	e8 0a 11 fe ff       	call   f0106caa <krealloc>
f0125ba0:	83 c4 10             	add    $0x10,%esp
f0125ba3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125ba6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125ba9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0125bae:	77 17                	ja     f0125bc7 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125bb0:	83 ec 04             	sub    $0x4,%esp
f0125bb3:	68 20 12 13 f0       	push   $0xf0131220
f0125bb8:	68 fc 0f 00 00       	push   $0xffc
f0125bbd:	68 be ff 12 f0       	push   $0xf012ffbe
f0125bc2:	e8 df a5 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f0125bc7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125bcd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0125bd0:	74 17                	je     f0125be9 <test_krealloc+0x1873>
			panic(
f0125bd2:	83 ec 04             	sub    $0x4,%esp
f0125bd5:	68 14 16 13 f0       	push   $0xf0131614
f0125bda:	68 ff 0f 00 00       	push   $0xfff
f0125bdf:	68 be ff 12 f0       	push   $0xf012ffbe
f0125be4:	e8 bd a5 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f0125be9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0125bec:	e8 bf 59 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125bf1:	29 c3                	sub    %eax,%ebx
f0125bf3:	89 d8                	mov    %ebx,%eax
f0125bf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125bfa:	74 17                	je     f0125c13 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f0125bfc:	83 ec 04             	sub    $0x4,%esp
f0125bff:	68 90 16 13 f0       	push   $0xf0131690
f0125c04:	68 02 10 00 00       	push   $0x1002
f0125c09:	68 be ff 12 f0       	push   $0xf012ffbe
f0125c0e:	e8 93 a5 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f0125c13:	83 ec 0c             	sub    $0xc,%esp
f0125c16:	68 1c 08 13 f0       	push   $0xf013081c
f0125c1b:	e8 0d b0 fd ff       	call   f0100c2d <cprintf>
f0125c20:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f0125c23:	e8 88 59 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125c28:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f0125c2b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125c31:	83 ec 08             	sub    $0x8,%esp
f0125c34:	68 00 fc 9f 00       	push   $0x9ffc00
f0125c39:	50                   	push   %eax
f0125c3a:	e8 6b 10 fe ff       	call   f0106caa <krealloc>
f0125c3f:	83 c4 10             	add    $0x10,%esp
f0125c42:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125c45:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125c48:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0125c4d:	77 17                	ja     f0125c66 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125c4f:	83 ec 04             	sub    $0x4,%esp
f0125c52:	68 20 12 13 f0       	push   $0xf0131220
f0125c57:	68 0d 10 00 00       	push   $0x100d
f0125c5c:	68 be ff 12 f0       	push   $0xf012ffbe
f0125c61:	e8 40 a5 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f0125c66:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0125c6d:	10 00 00 
f0125c70:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0125c75:	0f b6 d0             	movzbl %al,%edx
f0125c78:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125c7e:	01 d0                	add    %edx,%eax
f0125c80:	48                   	dec    %eax
f0125c81:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0125c87:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c92:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0125c98:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125c9e:	29 d0                	sub    %edx,%eax
f0125ca0:	89 c1                	mov    %eax,%ecx
f0125ca2:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125ca9:	10 00 00 
f0125cac:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0125cb1:	0f b6 c0             	movzbl %al,%eax
f0125cb4:	c1 e0 04             	shl    $0x4,%eax
f0125cb7:	89 c2                	mov    %eax,%edx
f0125cb9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125cbf:	01 d0                	add    %edx,%eax
f0125cc1:	48                   	dec    %eax
f0125cc2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125cc8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125cce:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cd3:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125cd9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125cdf:	29 d0                	sub    %edx,%eax
f0125ce1:	01 c1                	add    %eax,%ecx
f0125ce3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125cea:	10 00 00 
f0125ced:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125cf3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cf8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125cfe:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125d04:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d09:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125d0f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125d15:	29 d0                	sub    %edx,%eax
f0125d17:	01 c8                	add    %ecx,%eax
f0125d19:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f0125d1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125d22:	39 c2                	cmp    %eax,%edx
f0125d24:	74 18                	je     f0125d3e <test_krealloc+0x19c8>
			panic(
f0125d26:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125d29:	50                   	push   %eax
f0125d2a:	68 c4 16 13 f0       	push   $0xf01316c4
f0125d2f:	68 11 10 00 00       	push   $0x1011
f0125d34:	68 be ff 12 f0       	push   $0xf012ffbe
f0125d39:	e8 68 a4 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f0125d3e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125d44:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0125d47:	75 17                	jne    f0125d60 <test_krealloc+0x19ea>
			panic(
f0125d49:	83 ec 04             	sub    $0x4,%esp
f0125d4c:	68 08 17 13 f0       	push   $0xf0131708
f0125d51:	68 14 10 00 00       	push   $0x1014
f0125d56:	68 be ff 12 f0       	push   $0xf012ffbe
f0125d5b:	e8 46 a4 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f0125d60:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0125d63:	e8 48 58 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125d68:	29 c3                	sub    %eax,%ebx
f0125d6a:	89 d8                	mov    %ebx,%eax
f0125d6c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125d71:	74 17                	je     f0125d8a <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f0125d73:	83 ec 04             	sub    $0x4,%esp
f0125d76:	68 90 16 13 f0       	push   $0xf0131690
f0125d7b:	68 17 10 00 00       	push   $0x1017
f0125d80:	68 be ff 12 f0       	push   $0xf012ffbe
f0125d85:	e8 1c a4 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f0125d8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125d8d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f0125d93:	e8 18 58 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125d98:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f0125d9b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125da1:	83 ec 08             	sub    $0x8,%esp
f0125da4:	68 00 fc 5f 00       	push   $0x5ffc00
f0125da9:	50                   	push   %eax
f0125daa:	e8 fb 0e fe ff       	call   f0106caa <krealloc>
f0125daf:	83 c4 10             	add    $0x10,%esp
f0125db2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125db5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125db8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0125dbd:	77 17                	ja     f0125dd6 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125dbf:	83 ec 04             	sub    $0x4,%esp
f0125dc2:	68 20 12 13 f0       	push   $0xf0131220
f0125dc7:	68 20 10 00 00       	push   $0x1020
f0125dcc:	68 be ff 12 f0       	push   $0xf012ffbe
f0125dd1:	e8 d0 a3 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f0125dd6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125ddc:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0125ddf:	74 17                	je     f0125df8 <test_krealloc+0x1a82>
			panic(
f0125de1:	83 ec 04             	sub    $0x4,%esp
f0125de4:	68 14 16 13 f0       	push   $0xf0131614
f0125de9:	68 23 10 00 00       	push   $0x1023
f0125dee:	68 be ff 12 f0       	push   $0xf012ffbe
f0125df3:	e8 ae a3 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f0125df8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0125dfb:	e8 b0 57 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125e00:	29 c3                	sub    %eax,%ebx
f0125e02:	89 d8                	mov    %ebx,%eax
f0125e04:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125e09:	74 17                	je     f0125e22 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f0125e0b:	83 ec 04             	sub    $0x4,%esp
f0125e0e:	68 90 16 13 f0       	push   $0xf0131690
f0125e13:	68 26 10 00 00       	push   $0x1026
f0125e18:	68 be ff 12 f0       	push   $0xf012ffbe
f0125e1d:	e8 84 a3 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f0125e22:	e8 89 57 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125e27:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f0125e2a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125e30:	83 ec 08             	sub    $0x8,%esp
f0125e33:	68 00 fc 3f 01       	push   $0x13ffc00
f0125e38:	50                   	push   %eax
f0125e39:	e8 6c 0e fe ff       	call   f0106caa <krealloc>
f0125e3e:	83 c4 10             	add    $0x10,%esp
f0125e41:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0125e44:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125e47:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0125e4c:	77 17                	ja     f0125e65 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f0125e4e:	83 ec 04             	sub    $0x4,%esp
f0125e51:	68 20 12 13 f0       	push   $0xf0131220
f0125e56:	68 2d 10 00 00       	push   $0x102d
f0125e5b:	68 be ff 12 f0       	push   $0xf012ffbe
f0125e60:	e8 41 a3 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f0125e65:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125e6b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0125e6e:	75 17                	jne    f0125e87 <test_krealloc+0x1b11>
			panic(
f0125e70:	83 ec 04             	sub    $0x4,%esp
f0125e73:	68 08 17 13 f0       	push   $0xf0131708
f0125e78:	68 30 10 00 00       	push   $0x1030
f0125e7d:	68 be ff 12 f0       	push   $0xf012ffbe
f0125e82:	e8 1f a3 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f0125e87:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125e8e:	10 00 00 
f0125e91:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0125e96:	0f b6 d0             	movzbl %al,%edx
f0125e99:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125e9f:	01 d0                	add    %edx,%eax
f0125ea1:	48                   	dec    %eax
f0125ea2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125ea8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125eae:	ba 00 00 00 00       	mov    $0x0,%edx
f0125eb3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125eb9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125ebf:	29 d0                	sub    %edx,%eax
f0125ec1:	89 c1                	mov    %eax,%ecx
f0125ec3:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125eca:	10 00 00 
f0125ecd:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0125ed2:	0f b6 c0             	movzbl %al,%eax
f0125ed5:	c1 e0 04             	shl    $0x4,%eax
f0125ed8:	89 c2                	mov    %eax,%edx
f0125eda:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125ee0:	01 d0                	add    %edx,%eax
f0125ee2:	48                   	dec    %eax
f0125ee3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125ee9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125eef:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ef4:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125efa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125f00:	29 d0                	sub    %edx,%eax
f0125f02:	01 c1                	add    %eax,%ecx
f0125f04:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0125f0b:	10 00 00 
f0125f0e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0125f14:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f19:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0125f1f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125f25:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f2a:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0125f30:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125f36:	29 d0                	sub    %edx,%eax
f0125f38:	01 c8                	add    %ecx,%eax
f0125f3a:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f0125f40:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125f43:	39 c2                	cmp    %eax,%edx
f0125f45:	74 17                	je     f0125f5e <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f0125f47:	83 ec 04             	sub    $0x4,%esp
f0125f4a:	68 8c 17 13 f0       	push   $0xf013178c
f0125f4f:	68 32 10 00 00       	push   $0x1032
f0125f54:	68 be ff 12 f0       	push   $0xf012ffbe
f0125f59:	e8 48 a2 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f0125f5e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0125f61:	e8 4a 56 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0125f66:	29 c3                	sub    %eax,%ebx
f0125f68:	89 d8                	mov    %ebx,%eax
f0125f6a:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f0125f6f:	74 17                	je     f0125f88 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f0125f71:	83 ec 04             	sub    $0x4,%esp
f0125f74:	68 90 16 13 f0       	push   $0xf0131690
f0125f79:	68 35 10 00 00       	push   $0x1035
f0125f7e:	68 be ff 12 f0       	push   $0xf012ffbe
f0125f83:	e8 1e a2 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f0125f88:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125f8b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f0125f91:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125f97:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f0125f9d:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f0125fa4:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f0125fa7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0125fae:	eb 21                	jmp    f0125fd1 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f0125fb0:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f0125fb6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f0125fb9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125fbf:	01 c8                	add    %ecx,%eax
f0125fc1:	8a 00                	mov    (%eax),%al
f0125fc3:	0f be c0             	movsbl %al,%eax
f0125fc6:	01 d0                	add    %edx,%eax
f0125fc8:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f0125fce:	ff 45 d8             	incl   -0x28(%ebp)
f0125fd1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0125fd7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0125fda:	7d d4                	jge    f0125fb0 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f0125fdc:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0125fe2:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f0125fe8:	42                   	inc    %edx
f0125fe9:	01 d2                	add    %edx,%edx
f0125feb:	39 d0                	cmp    %edx,%eax
f0125fed:	74 17                	je     f0126006 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f0125fef:	83 ec 04             	sub    $0x4,%esp
f0125ff2:	68 c0 17 13 f0       	push   $0xf01317c0
f0125ff7:	68 43 10 00 00       	push   $0x1043
f0125ffc:	68 be ff 12 f0       	push   $0xf012ffbe
f0126001:	e8 a0 a1 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0126006:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012600c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f0126012:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f0126019:	00 00 00 
		sums[1] = 0;
f012601c:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f0126023:	00 00 00 
		sums[2] = 0;
f0126026:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012602d:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f0126030:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0126037:	eb 70                	jmp    f01260a9 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f0126039:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012603f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126042:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0126049:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012604f:	01 c8                	add    %ecx,%eax
f0126051:	8a 00                	mov    (%eax),%al
f0126053:	0f be c0             	movsbl %al,%eax
f0126056:	01 d0                	add    %edx,%eax
f0126058:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012605e:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0126064:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126067:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012606e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126074:	01 c8                	add    %ecx,%eax
f0126076:	66 8b 40 02          	mov    0x2(%eax),%ax
f012607a:	98                   	cwtl   
f012607b:	01 d0                	add    %edx,%eax
f012607d:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f0126083:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f0126089:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012608c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0126093:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126099:	01 c8                	add    %ecx,%eax
f012609b:	8b 40 04             	mov    0x4(%eax),%eax
f012609e:	01 d0                	add    %edx,%eax
f01260a0:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f01260a6:	ff 45 d8             	incl   -0x28(%ebp)
f01260a9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01260af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01260b2:	7d 85                	jge    f0126039 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f01260b4:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f01260ba:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01260c0:	8d 50 01             	lea    0x1(%eax),%edx
f01260c3:	89 d0                	mov    %edx,%eax
f01260c5:	01 c0                	add    %eax,%eax
f01260c7:	01 d0                	add    %edx,%eax
f01260c9:	01 c0                	add    %eax,%eax
f01260cb:	01 d0                	add    %edx,%eax
f01260cd:	39 c1                	cmp    %eax,%ecx
f01260cf:	75 3a                	jne    f012610b <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f01260d1:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f01260d7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01260dd:	8d 50 01             	lea    0x1(%eax),%edx
f01260e0:	89 d0                	mov    %edx,%eax
f01260e2:	01 c0                	add    %eax,%eax
f01260e4:	01 d0                	add    %edx,%eax
f01260e6:	01 c0                	add    %eax,%eax
f01260e8:	01 d0                	add    %edx,%eax
f01260ea:	39 c1                	cmp    %eax,%ecx
f01260ec:	75 1d                	jne    f012610b <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f01260ee:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f01260f4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01260fa:	8d 50 01             	lea    0x1(%eax),%edx
f01260fd:	89 d0                	mov    %edx,%eax
f01260ff:	01 c0                	add    %eax,%eax
f0126101:	01 d0                	add    %edx,%eax
f0126103:	01 c0                	add    %eax,%eax
f0126105:	01 d0                	add    %edx,%eax
f0126107:	39 c1                	cmp    %eax,%ecx
f0126109:	74 17                	je     f0126122 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012610b:	83 ec 04             	sub    $0x4,%esp
f012610e:	68 c0 17 13 f0       	push   $0xf01317c0
f0126113:	68 55 10 00 00       	push   $0x1055
f0126118:	68 be ff 12 f0       	push   $0xf012ffbe
f012611d:	e8 84 a0 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0126122:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0126128:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012612e:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f0126135:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0126138:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012613f:	eb 24                	jmp    f0126165 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f0126141:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f0126147:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012614a:	01 c0                	add    %eax,%eax
f012614c:	89 c1                	mov    %eax,%ecx
f012614e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126154:	01 c8                	add    %ecx,%eax
f0126156:	66 8b 00             	mov    (%eax),%ax
f0126159:	98                   	cwtl   
f012615a:	01 d0                	add    %edx,%eax
f012615c:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f0126162:	ff 45 d8             	incl   -0x28(%ebp)
f0126165:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012616b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012616e:	7d d1                	jge    f0126141 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f0126170:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f0126176:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012617c:	8d 48 01             	lea    0x1(%eax),%ecx
f012617f:	89 c8                	mov    %ecx,%eax
f0126181:	c1 e0 02             	shl    $0x2,%eax
f0126184:	01 c8                	add    %ecx,%eax
f0126186:	39 c2                	cmp    %eax,%edx
f0126188:	74 17                	je     f01261a1 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012618a:	83 ec 04             	sub    $0x4,%esp
f012618d:	68 c0 17 13 f0       	push   $0xf01317c0
f0126192:	68 5f 10 00 00       	push   $0x105f
f0126197:	68 be ff 12 f0       	push   $0xf012ffbe
f012619c:	e8 05 a0 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f01261a1:	e8 0a 54 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01261a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01261a9:	e8 f6 d2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01261ae:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f01261b4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01261ba:	83 ec 08             	sub    $0x8,%esp
f01261bd:	6a 00                	push   $0x0
f01261bf:	50                   	push   %eax
f01261c0:	e8 e5 0a fe ff       	call   f0106caa <krealloc>
f01261c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01261c8:	e8 d7 d2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01261cd:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01261d3:	74 17                	je     f01261ec <test_krealloc+0x1e76>
			panic(
f01261d5:	83 ec 04             	sub    $0x4,%esp
f01261d8:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01261dd:	68 67 10 00 00       	push   $0x1067
f01261e2:	68 be ff 12 f0       	push   $0xf012ffbe
f01261e7:	e8 ba 9f fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f01261ec:	e8 bf 53 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01261f1:	89 c2                	mov    %eax,%edx
f01261f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01261f6:	29 c2                	sub    %eax,%edx
f01261f8:	89 d0                	mov    %edx,%eax
f01261fa:	3d 00 14 00 00       	cmp    $0x1400,%eax
f01261ff:	74 17                	je     f0126218 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f0126201:	83 ec 04             	sub    $0x4,%esp
f0126204:	68 50 14 13 f0       	push   $0xf0131450
f0126209:	68 69 10 00 00       	push   $0x1069
f012620e:	68 be ff 12 f0       	push   $0xf012ffbe
f0126213:	e8 8e 9f fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f0126218:	e8 93 53 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012621d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0126220:	e8 7f d2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0126225:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012622b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0126231:	83 ec 0c             	sub    $0xc,%esp
f0126234:	50                   	push   %eax
f0126235:	e8 d4 09 fe ff       	call   f0106c0e <kfree>
f012623a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012623d:	e8 62 d2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0126242:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0126248:	74 17                	je     f0126261 <test_krealloc+0x1eeb>
			panic(
f012624a:	83 ec 04             	sub    $0x4,%esp
f012624d:	68 d8 ff 12 f0       	push   $0xf012ffd8
f0126252:	68 71 10 00 00       	push   $0x1071
f0126257:	68 be ff 12 f0       	push   $0xf012ffbe
f012625c:	e8 45 9f fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f0126261:	e8 4a 53 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126266:	89 c2                	mov    %eax,%edx
f0126268:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012626b:	29 c2                	sub    %eax,%edx
f012626d:	89 d0                	mov    %edx,%eax
f012626f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126274:	74 17                	je     f012628d <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f0126276:	83 ec 04             	sub    $0x4,%esp
f0126279:	68 50 14 13 f0       	push   $0xf0131450
f012627e:	68 73 10 00 00       	push   $0x1073
f0126283:	68 be ff 12 f0       	push   $0xf012ffbe
f0126288:	e8 19 9f fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012628d:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f0126294:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012629b:	eb 48                	jmp    f01262e5 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012629d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01262a0:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f01262a5:	83 ec 04             	sub    $0x4,%esp
f01262a8:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f01262ae:	51                   	push   %ecx
f01262af:	52                   	push   %edx
f01262b0:	50                   	push   %eax
f01262b1:	e8 cb fe fd ff       	call   f0106181 <get_page_table>
f01262b6:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01262b9:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01262bf:	85 c0                	test   %eax,%eax
f01262c1:	75 17                	jne    f01262da <test_krealloc+0x1f64>
					panic(
f01262c3:	83 ec 04             	sub    $0x4,%esp
f01262c6:	68 c0 08 13 f0       	push   $0xf01308c0
f01262cb:	68 80 10 00 00       	push   $0x1080
f01262d0:	68 be ff 12 f0       	push   $0xf012ffbe
f01262d5:	e8 cc 9e fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01262da:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f01262e1:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f01262e5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01262e9:	78 b2                	js     f012629d <test_krealloc+0x1f27>
f01262eb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01262ef:	7f 09                	jg     f01262fa <test_krealloc+0x1f84>
f01262f1:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01262f8:	76 a3                	jbe    f012629d <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f01262fa:	83 ec 0c             	sub    $0xc,%esp
f01262fd:	68 a2 01 13 f0       	push   $0xf01301a2
f0126302:	e8 26 a9 fd ff       	call   f0100c2d <cprintf>
f0126307:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012630a:	83 ec 0c             	sub    $0xc,%esp
f012630d:	68 ec 17 13 f0       	push   $0xf01317ec
f0126312:	e8 16 a9 fd ff       	call   f0100c2d <cprintf>
f0126317:	83 c4 10             	add    $0x10,%esp
	return 0;
f012631a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012631f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126322:	5b                   	pop    %ebx
f0126323:	5f                   	pop    %edi
f0126324:	5d                   	pop    %ebp
f0126325:	c3                   	ret    

f0126326 <test_krealloc_BF>:


int test_krealloc_BF() {
f0126326:	55                   	push   %ebp
f0126327:	89 e5                	mov    %esp,%ebp
f0126329:	57                   	push   %edi
f012632a:	53                   	push   %ebx
f012632b:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f0126331:	83 ec 0c             	sub    $0xc,%esp
f0126334:	68 00 ff 12 f0       	push   $0xf012ff00
f0126339:	e8 ef a8 fd ff       	call   f0100c2d <cprintf>
f012633e:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0126341:	83 ec 0c             	sub    $0xc,%esp
f0126344:	68 30 ff 12 f0       	push   $0xf012ff30
f0126349:	e8 df a8 fd ff       	call   f0100c2d <cprintf>
f012634e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0126351:	83 ec 0c             	sub    $0xc,%esp
f0126354:	68 00 ff 12 f0       	push   $0xf012ff00
f0126359:	e8 cf a8 fd ff       	call   f0100c2d <cprintf>
f012635e:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0126361:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0126365:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0126369:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012636f:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0126375:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012637c:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0126383:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0126389:	b9 14 00 00 00       	mov    $0x14,%ecx
f012638e:	b8 00 00 00 00       	mov    $0x0,%eax
f0126393:	89 d7                	mov    %edx,%edi
f0126395:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0126397:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012639e:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f01263a4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01263a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01263ae:	89 d7                	mov    %edx,%edi
f01263b0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f01263b2:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f01263b8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01263bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01263c2:	89 d7                	mov    %edx,%edi
f01263c4:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f01263c6:	e8 e5 51 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01263cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f01263ce:	83 ec 08             	sub    $0x8,%esp
f01263d1:	68 00 fc 0f 00       	push   $0xffc00
f01263d6:	6a 00                	push   $0x0
f01263d8:	e8 cd 08 fe ff       	call   f0106caa <krealloc>
f01263dd:	83 c4 10             	add    $0x10,%esp
f01263e0:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f01263e6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01263ec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01263f1:	77 17                	ja     f012640a <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f01263f3:	83 ec 04             	sub    $0x4,%esp
f01263f6:	68 20 12 13 f0       	push   $0xf0131220
f01263fb:	68 af 10 00 00       	push   $0x10af
f0126400:	68 be ff 12 f0       	push   $0xf012ffbe
f0126405:	e8 9c 9d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012640a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126410:	89 c1                	mov    %eax,%ecx
f0126412:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126419:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012641e:	0f b6 d0             	movzbl %al,%edx
f0126421:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126424:	01 d0                	add    %edx,%eax
f0126426:	48                   	dec    %eax
f0126427:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012642a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012642d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126432:	f7 75 b4             	divl   -0x4c(%ebp)
f0126435:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126438:	29 d0                	sub    %edx,%eax
f012643a:	89 c3                	mov    %eax,%ebx
f012643c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126443:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126448:	0f b6 c0             	movzbl %al,%eax
f012644b:	c1 e0 04             	shl    $0x4,%eax
f012644e:	89 c2                	mov    %eax,%edx
f0126450:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126453:	01 d0                	add    %edx,%eax
f0126455:	48                   	dec    %eax
f0126456:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126459:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012645c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126461:	f7 75 ac             	divl   -0x54(%ebp)
f0126464:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126467:	29 d0                	sub    %edx,%eax
f0126469:	01 c3                	add    %eax,%ebx
f012646b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0126472:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126475:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012647a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012647d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126480:	ba 00 00 00 00       	mov    $0x0,%edx
f0126485:	f7 75 a4             	divl   -0x5c(%ebp)
f0126488:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012648b:	29 d0                	sub    %edx,%eax
f012648d:	01 d8                	add    %ebx,%eax
f012648f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126494:	39 c1                	cmp    %eax,%ecx
f0126496:	74 17                	je     f01264af <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f0126498:	83 ec 04             	sub    $0x4,%esp
f012649b:	68 5c 12 13 f0       	push   $0xf013125c
f01264a0:	68 b1 10 00 00       	push   $0x10b1
f01264a5:	68 be ff 12 f0       	push   $0xf012ffbe
f01264aa:	e8 f7 9c fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f01264af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01264b2:	e8 f9 50 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01264b7:	29 c3                	sub    %eax,%ebx
f01264b9:	89 d8                	mov    %ebx,%eax
f01264bb:	3d 00 01 00 00       	cmp    $0x100,%eax
f01264c0:	74 17                	je     f01264d9 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f01264c2:	83 ec 04             	sub    $0x4,%esp
f01264c5:	68 8e 12 13 f0       	push   $0xf013128e
f01264ca:	68 b4 10 00 00       	push   $0x10b4
f01264cf:	68 be ff 12 f0       	push   $0xf012ffbe
f01264d4:	e8 cd 9c fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f01264d9:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f01264e0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f01264e3:	e8 c8 50 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01264e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f01264eb:	83 ec 08             	sub    $0x8,%esp
f01264ee:	68 00 fc 0f 00       	push   $0xffc00
f01264f3:	6a 00                	push   $0x0
f01264f5:	e8 b0 07 fe ff       	call   f0106caa <krealloc>
f01264fa:	83 c4 10             	add    $0x10,%esp
f01264fd:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f0126503:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126509:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012650e:	77 17                	ja     f0126527 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f0126510:	83 ec 04             	sub    $0x4,%esp
f0126513:	68 20 12 13 f0       	push   $0xf0131220
f0126518:	68 bc 10 00 00       	push   $0x10bc
f012651d:	68 be ff 12 f0       	push   $0xf012ffbe
f0126522:	e8 7f 9c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f0126527:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012652d:	89 c1                	mov    %eax,%ecx
f012652f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0126536:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012653b:	0f b6 d0             	movzbl %al,%edx
f012653e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126541:	01 d0                	add    %edx,%eax
f0126543:	48                   	dec    %eax
f0126544:	89 45 98             	mov    %eax,-0x68(%ebp)
f0126547:	8b 45 98             	mov    -0x68(%ebp),%eax
f012654a:	ba 00 00 00 00       	mov    $0x0,%edx
f012654f:	f7 75 9c             	divl   -0x64(%ebp)
f0126552:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126555:	29 d0                	sub    %edx,%eax
f0126557:	89 c3                	mov    %eax,%ebx
f0126559:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0126560:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126565:	0f b6 c0             	movzbl %al,%eax
f0126568:	c1 e0 04             	shl    $0x4,%eax
f012656b:	89 c2                	mov    %eax,%edx
f012656d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126570:	01 d0                	add    %edx,%eax
f0126572:	48                   	dec    %eax
f0126573:	89 45 90             	mov    %eax,-0x70(%ebp)
f0126576:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126579:	ba 00 00 00 00       	mov    $0x0,%edx
f012657e:	f7 75 94             	divl   -0x6c(%ebp)
f0126581:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126584:	29 d0                	sub    %edx,%eax
f0126586:	01 c3                	add    %eax,%ebx
f0126588:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012658f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126592:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126597:	89 45 88             	mov    %eax,-0x78(%ebp)
f012659a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012659d:	ba 00 00 00 00       	mov    $0x0,%edx
f01265a2:	f7 75 8c             	divl   -0x74(%ebp)
f01265a5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01265a8:	29 d0                	sub    %edx,%eax
f01265aa:	01 d8                	add    %ebx,%eax
f01265ac:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f01265b1:	39 c1                	cmp    %eax,%ecx
f01265b3:	74 17                	je     f01265cc <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f01265b5:	83 ec 04             	sub    $0x4,%esp
f01265b8:	68 5c 12 13 f0       	push   $0xf013125c
f01265bd:	68 be 10 00 00       	push   $0x10be
f01265c2:	68 be ff 12 f0       	push   $0xf012ffbe
f01265c7:	e8 da 9b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f01265cc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01265cf:	e8 dc 4f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01265d4:	29 c3                	sub    %eax,%ebx
f01265d6:	89 d8                	mov    %ebx,%eax
f01265d8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01265dd:	74 17                	je     f01265f6 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f01265df:	83 ec 04             	sub    $0x4,%esp
f01265e2:	68 8e 12 13 f0       	push   $0xf013128e
f01265e7:	68 c0 10 00 00       	push   $0x10c0
f01265ec:	68 be ff 12 f0       	push   $0xf012ffbe
f01265f1:	e8 b0 9b fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f01265f6:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f01265fd:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0126600:	e8 ab 4f fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126605:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f0126608:	83 ec 08             	sub    $0x8,%esp
f012660b:	68 00 fc 0f 00       	push   $0xffc00
f0126610:	6a 00                	push   $0x0
f0126612:	e8 93 06 fe ff       	call   f0106caa <krealloc>
f0126617:	83 c4 10             	add    $0x10,%esp
f012661a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f0126620:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126626:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012662b:	77 17                	ja     f0126644 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012662d:	83 ec 04             	sub    $0x4,%esp
f0126630:	68 20 12 13 f0       	push   $0xf0131220
f0126635:	68 c8 10 00 00       	push   $0x10c8
f012663a:	68 be ff 12 f0       	push   $0xf012ffbe
f012663f:	e8 62 9b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f0126644:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012664a:	89 c1                	mov    %eax,%ecx
f012664c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0126653:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126658:	0f b6 d0             	movzbl %al,%edx
f012665b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012665e:	01 d0                	add    %edx,%eax
f0126660:	48                   	dec    %eax
f0126661:	89 45 80             	mov    %eax,-0x80(%ebp)
f0126664:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126667:	ba 00 00 00 00       	mov    $0x0,%edx
f012666c:	f7 75 84             	divl   -0x7c(%ebp)
f012666f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126672:	29 d0                	sub    %edx,%eax
f0126674:	89 c3                	mov    %eax,%ebx
f0126676:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012667d:	10 00 00 
f0126680:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126685:	0f b6 c0             	movzbl %al,%eax
f0126688:	c1 e0 04             	shl    $0x4,%eax
f012668b:	89 c2                	mov    %eax,%edx
f012668d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126693:	01 d0                	add    %edx,%eax
f0126695:	48                   	dec    %eax
f0126696:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012669c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01266a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01266a7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01266ad:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01266b3:	29 d0                	sub    %edx,%eax
f01266b5:	01 c3                	add    %eax,%ebx
f01266b7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01266be:	10 00 00 
f01266c1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01266c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01266cc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01266d2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01266d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01266dd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01266e3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01266e9:	29 d0                	sub    %edx,%eax
f01266eb:	01 d8                	add    %ebx,%eax
f01266ed:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01266f2:	39 c1                	cmp    %eax,%ecx
f01266f4:	74 17                	je     f012670d <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f01266f6:	83 ec 04             	sub    $0x4,%esp
f01266f9:	68 5c 12 13 f0       	push   $0xf013125c
f01266fe:	68 ca 10 00 00       	push   $0x10ca
f0126703:	68 be ff 12 f0       	push   $0xf012ffbe
f0126708:	e8 99 9a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012670d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0126710:	e8 9b 4e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126715:	29 c3                	sub    %eax,%ebx
f0126717:	89 d8                	mov    %ebx,%eax
f0126719:	3d 00 01 00 00       	cmp    $0x100,%eax
f012671e:	74 17                	je     f0126737 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f0126720:	83 ec 04             	sub    $0x4,%esp
f0126723:	68 8e 12 13 f0       	push   $0xf013128e
f0126728:	68 cc 10 00 00       	push   $0x10cc
f012672d:	68 be ff 12 f0       	push   $0xf012ffbe
f0126732:	e8 6f 9a fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f0126737:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012673e:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0126741:	e8 6a 4e fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126746:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f0126749:	83 ec 08             	sub    $0x8,%esp
f012674c:	68 00 fc 0f 00       	push   $0xffc00
f0126751:	6a 00                	push   $0x0
f0126753:	e8 52 05 fe ff       	call   f0106caa <krealloc>
f0126758:	83 c4 10             	add    $0x10,%esp
f012675b:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f0126761:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126767:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012676c:	77 17                	ja     f0126785 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012676e:	83 ec 04             	sub    $0x4,%esp
f0126771:	68 20 12 13 f0       	push   $0xf0131220
f0126776:	68 d3 10 00 00       	push   $0x10d3
f012677b:	68 be ff 12 f0       	push   $0xf012ffbe
f0126780:	e8 21 9a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f0126785:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012678b:	89 c1                	mov    %eax,%ecx
f012678d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126794:	10 00 00 
f0126797:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012679c:	0f b6 d0             	movzbl %al,%edx
f012679f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01267a5:	01 d0                	add    %edx,%eax
f01267a7:	48                   	dec    %eax
f01267a8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01267ae:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01267b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01267b9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01267bf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01267c5:	29 d0                	sub    %edx,%eax
f01267c7:	89 c3                	mov    %eax,%ebx
f01267c9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01267d0:	10 00 00 
f01267d3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01267d8:	0f b6 c0             	movzbl %al,%eax
f01267db:	c1 e0 04             	shl    $0x4,%eax
f01267de:	89 c2                	mov    %eax,%edx
f01267e0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01267e6:	01 d0                	add    %edx,%eax
f01267e8:	48                   	dec    %eax
f01267e9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01267ef:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01267f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01267fa:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126800:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126806:	29 d0                	sub    %edx,%eax
f0126808:	01 c3                	add    %eax,%ebx
f012680a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126811:	10 00 00 
f0126814:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012681a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012681f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126825:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012682b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126830:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126836:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012683c:	29 d0                	sub    %edx,%eax
f012683e:	01 d8                	add    %ebx,%eax
f0126840:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0126845:	39 c1                	cmp    %eax,%ecx
f0126847:	74 17                	je     f0126860 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f0126849:	83 ec 04             	sub    $0x4,%esp
f012684c:	68 5c 12 13 f0       	push   $0xf013125c
f0126851:	68 d5 10 00 00       	push   $0x10d5
f0126856:	68 be ff 12 f0       	push   $0xf012ffbe
f012685b:	e8 46 99 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f0126860:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0126863:	e8 48 4d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126868:	29 c3                	sub    %eax,%ebx
f012686a:	89 d8                	mov    %ebx,%eax
f012686c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126871:	74 17                	je     f012688a <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f0126873:	83 ec 04             	sub    $0x4,%esp
f0126876:	68 8e 12 13 f0       	push   $0xf013128e
f012687b:	68 d7 10 00 00       	push   $0x10d7
f0126880:	68 be ff 12 f0       	push   $0xf012ffbe
f0126885:	e8 1c 99 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012688a:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f0126891:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f0126894:	e8 17 4d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126899:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012689c:	83 ec 08             	sub    $0x8,%esp
f012689f:	68 00 fc 1f 00       	push   $0x1ffc00
f01268a4:	6a 00                	push   $0x0
f01268a6:	e8 ff 03 fe ff       	call   f0106caa <krealloc>
f01268ab:	83 c4 10             	add    $0x10,%esp
f01268ae:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f01268b4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01268ba:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f01268bf:	77 17                	ja     f01268d8 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f01268c1:	83 ec 04             	sub    $0x4,%esp
f01268c4:	68 20 12 13 f0       	push   $0xf0131220
f01268c9:	68 de 10 00 00       	push   $0x10de
f01268ce:	68 be ff 12 f0       	push   $0xf012ffbe
f01268d3:	e8 ce 98 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f01268d8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01268de:	89 c1                	mov    %eax,%ecx
f01268e0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01268e7:	10 00 00 
f01268ea:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f01268ef:	0f b6 d0             	movzbl %al,%edx
f01268f2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01268f8:	01 d0                	add    %edx,%eax
f01268fa:	48                   	dec    %eax
f01268fb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126901:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126907:	ba 00 00 00 00       	mov    $0x0,%edx
f012690c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126912:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126918:	29 d0                	sub    %edx,%eax
f012691a:	89 c3                	mov    %eax,%ebx
f012691c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0126923:	10 00 00 
f0126926:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012692b:	0f b6 c0             	movzbl %al,%eax
f012692e:	c1 e0 04             	shl    $0x4,%eax
f0126931:	89 c2                	mov    %eax,%edx
f0126933:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126939:	01 d0                	add    %edx,%eax
f012693b:	48                   	dec    %eax
f012693c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126942:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126948:	ba 00 00 00 00       	mov    $0x0,%edx
f012694d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126953:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126959:	29 d0                	sub    %edx,%eax
f012695b:	01 c3                	add    %eax,%ebx
f012695d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126964:	10 00 00 
f0126967:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012696d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126972:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126978:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012697e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126983:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126989:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012698f:	29 d0                	sub    %edx,%eax
f0126991:	01 d8                	add    %ebx,%eax
f0126993:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126998:	39 c1                	cmp    %eax,%ecx
f012699a:	74 17                	je     f01269b3 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012699c:	83 ec 04             	sub    $0x4,%esp
f012699f:	68 5c 12 13 f0       	push   $0xf013125c
f01269a4:	68 e0 10 00 00       	push   $0x10e0
f01269a9:	68 be ff 12 f0       	push   $0xf012ffbe
f01269ae:	e8 f3 97 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f01269b3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01269b6:	e8 f5 4b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01269bb:	29 c3                	sub    %eax,%ebx
f01269bd:	89 d8                	mov    %ebx,%eax
f01269bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f01269c4:	74 17                	je     f01269dd <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f01269c6:	83 ec 04             	sub    $0x4,%esp
f01269c9:	68 8e 12 13 f0       	push   $0xf013128e
f01269ce:	68 e2 10 00 00       	push   $0x10e2
f01269d3:	68 be ff 12 f0       	push   $0xf012ffbe
f01269d8:	e8 c9 97 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f01269dd:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f01269e4:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f01269e7:	e8 c4 4b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01269ec:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f01269ef:	83 ec 08             	sub    $0x8,%esp
f01269f2:	68 00 fc 1f 00       	push   $0x1ffc00
f01269f7:	6a 00                	push   $0x0
f01269f9:	e8 ac 02 fe ff       	call   f0106caa <krealloc>
f01269fe:	83 c4 10             	add    $0x10,%esp
f0126a01:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f0126a07:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126a0d:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f0126a12:	77 17                	ja     f0126a2b <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f0126a14:	83 ec 04             	sub    $0x4,%esp
f0126a17:	68 20 12 13 f0       	push   $0xf0131220
f0126a1c:	68 e9 10 00 00       	push   $0x10e9
f0126a21:	68 be ff 12 f0       	push   $0xf012ffbe
f0126a26:	e8 7b 97 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f0126a2b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126a31:	89 c1                	mov    %eax,%ecx
f0126a33:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126a3a:	10 00 00 
f0126a3d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126a42:	0f b6 d0             	movzbl %al,%edx
f0126a45:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126a4b:	01 d0                	add    %edx,%eax
f0126a4d:	48                   	dec    %eax
f0126a4e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126a54:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126a5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a5f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126a65:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126a6b:	29 d0                	sub    %edx,%eax
f0126a6d:	89 c3                	mov    %eax,%ebx
f0126a6f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0126a76:	10 00 00 
f0126a79:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126a7e:	0f b6 c0             	movzbl %al,%eax
f0126a81:	c1 e0 04             	shl    $0x4,%eax
f0126a84:	89 c2                	mov    %eax,%edx
f0126a86:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126a8c:	01 d0                	add    %edx,%eax
f0126a8e:	48                   	dec    %eax
f0126a8f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126a95:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126aa0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126aa6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126aac:	29 d0                	sub    %edx,%eax
f0126aae:	01 c3                	add    %eax,%ebx
f0126ab0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126ab7:	10 00 00 
f0126aba:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126ac0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126ac5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0126acb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126ad1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ad6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0126adc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126ae2:	29 d0                	sub    %edx,%eax
f0126ae4:	01 d8                	add    %ebx,%eax
f0126ae6:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0126aeb:	39 c1                	cmp    %eax,%ecx
f0126aed:	74 17                	je     f0126b06 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f0126aef:	83 ec 04             	sub    $0x4,%esp
f0126af2:	68 5c 12 13 f0       	push   $0xf013125c
f0126af7:	68 eb 10 00 00       	push   $0x10eb
f0126afc:	68 be ff 12 f0       	push   $0xf012ffbe
f0126b01:	e8 a0 96 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f0126b06:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0126b09:	e8 a2 4a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126b0e:	29 c3                	sub    %eax,%ebx
f0126b10:	89 d8                	mov    %ebx,%eax
f0126b12:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b17:	74 17                	je     f0126b30 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f0126b19:	83 ec 04             	sub    $0x4,%esp
f0126b1c:	68 8e 12 13 f0       	push   $0xf013128e
f0126b21:	68 ed 10 00 00       	push   $0x10ed
f0126b26:	68 be ff 12 f0       	push   $0xf012ffbe
f0126b2b:	e8 76 96 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f0126b30:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f0126b37:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f0126b3a:	e8 71 4a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126b3f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f0126b42:	83 ec 08             	sub    $0x8,%esp
f0126b45:	68 00 fc 2f 00       	push   $0x2ffc00
f0126b4a:	6a 00                	push   $0x0
f0126b4c:	e8 59 01 fe ff       	call   f0106caa <krealloc>
f0126b51:	83 c4 10             	add    $0x10,%esp
f0126b54:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f0126b5a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126b60:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f0126b65:	77 17                	ja     f0126b7e <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f0126b67:	83 ec 04             	sub    $0x4,%esp
f0126b6a:	68 20 12 13 f0       	push   $0xf0131220
f0126b6f:	68 f4 10 00 00       	push   $0x10f4
f0126b74:	68 be ff 12 f0       	push   $0xf012ffbe
f0126b79:	e8 28 96 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f0126b7e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126b84:	89 c1                	mov    %eax,%ecx
f0126b86:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126b8d:	10 00 00 
f0126b90:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126b95:	0f b6 d0             	movzbl %al,%edx
f0126b98:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126b9e:	01 d0                	add    %edx,%eax
f0126ba0:	48                   	dec    %eax
f0126ba1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126ba7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126bad:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bb2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126bb8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126bbe:	29 d0                	sub    %edx,%eax
f0126bc0:	89 c3                	mov    %eax,%ebx
f0126bc2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126bc9:	10 00 00 
f0126bcc:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126bd1:	0f b6 c0             	movzbl %al,%eax
f0126bd4:	c1 e0 04             	shl    $0x4,%eax
f0126bd7:	89 c2                	mov    %eax,%edx
f0126bd9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0126bdf:	01 d0                	add    %edx,%eax
f0126be1:	48                   	dec    %eax
f0126be2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126be8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126bee:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bf3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126bf9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126bff:	29 d0                	sub    %edx,%eax
f0126c01:	01 c3                	add    %eax,%ebx
f0126c03:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126c0a:	10 00 00 
f0126c0d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126c13:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c18:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126c1e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c29:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126c2f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126c35:	29 d0                	sub    %edx,%eax
f0126c37:	01 d8                	add    %ebx,%eax
f0126c39:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0126c3e:	39 c1                	cmp    %eax,%ecx
f0126c40:	74 17                	je     f0126c59 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f0126c42:	83 ec 04             	sub    $0x4,%esp
f0126c45:	68 5c 12 13 f0       	push   $0xf013125c
f0126c4a:	68 f6 10 00 00       	push   $0x10f6
f0126c4f:	68 be ff 12 f0       	push   $0xf012ffbe
f0126c54:	e8 4d 95 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f0126c59:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0126c5c:	e8 4f 49 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126c61:	29 c3                	sub    %eax,%ebx
f0126c63:	89 d8                	mov    %ebx,%eax
f0126c65:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126c6a:	74 17                	je     f0126c83 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f0126c6c:	83 ec 04             	sub    $0x4,%esp
f0126c6f:	68 08 04 13 f0       	push   $0xf0130408
f0126c74:	68 f8 10 00 00       	push   $0x10f8
f0126c79:	68 be ff 12 f0       	push   $0xf012ffbe
f0126c7e:	e8 23 95 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f0126c83:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f0126c8a:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f0126c8d:	e8 1e 49 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126c92:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f0126c95:	83 ec 08             	sub    $0x8,%esp
f0126c98:	68 00 fc 2f 00       	push   $0x2ffc00
f0126c9d:	6a 00                	push   $0x0
f0126c9f:	e8 06 00 fe ff       	call   f0106caa <krealloc>
f0126ca4:	83 c4 10             	add    $0x10,%esp
f0126ca7:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f0126cad:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126cb3:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f0126cb8:	77 17                	ja     f0126cd1 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f0126cba:	83 ec 04             	sub    $0x4,%esp
f0126cbd:	68 20 12 13 f0       	push   $0xf0131220
f0126cc2:	68 ff 10 00 00       	push   $0x10ff
f0126cc7:	68 be ff 12 f0       	push   $0xf012ffbe
f0126ccc:	e8 d5 94 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f0126cd1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126cd7:	89 c1                	mov    %eax,%ecx
f0126cd9:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126ce0:	10 00 00 
f0126ce3:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126ce8:	0f b6 d0             	movzbl %al,%edx
f0126ceb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126cf1:	01 d0                	add    %edx,%eax
f0126cf3:	48                   	dec    %eax
f0126cf4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126cfa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126d00:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d05:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126d0b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126d11:	29 d0                	sub    %edx,%eax
f0126d13:	89 c3                	mov    %eax,%ebx
f0126d15:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0126d1c:	10 00 00 
f0126d1f:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0126d24:	0f b6 c0             	movzbl %al,%eax
f0126d27:	c1 e0 04             	shl    $0x4,%eax
f0126d2a:	89 c2                	mov    %eax,%edx
f0126d2c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126d32:	01 d0                	add    %edx,%eax
f0126d34:	48                   	dec    %eax
f0126d35:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0126d3b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0126d41:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d46:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0126d4c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0126d52:	29 d0                	sub    %edx,%eax
f0126d54:	01 c3                	add    %eax,%ebx
f0126d56:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126d5d:	10 00 00 
f0126d60:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126d66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d6b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126d71:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d7c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126d82:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126d88:	29 d0                	sub    %edx,%eax
f0126d8a:	01 d8                	add    %ebx,%eax
f0126d8c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0126d91:	39 c1                	cmp    %eax,%ecx
f0126d93:	74 17                	je     f0126dac <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f0126d95:	83 ec 04             	sub    $0x4,%esp
f0126d98:	68 5c 12 13 f0       	push   $0xf013125c
f0126d9d:	68 01 11 00 00       	push   $0x1101
f0126da2:	68 be ff 12 f0       	push   $0xf012ffbe
f0126da7:	e8 fa 93 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f0126dac:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0126daf:	e8 fc 47 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126db4:	29 c3                	sub    %eax,%ebx
f0126db6:	89 d8                	mov    %ebx,%eax
f0126db8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126dbd:	74 17                	je     f0126dd6 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f0126dbf:	83 ec 04             	sub    $0x4,%esp
f0126dc2:	68 8e 12 13 f0       	push   $0xf013128e
f0126dc7:	68 03 11 00 00       	push   $0x1103
f0126dcc:	68 be ff 12 f0       	push   $0xf012ffbe
f0126dd1:	e8 d0 93 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f0126dd6:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f0126ddd:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f0126de0:	e8 cb 47 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0126de5:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f0126de8:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f0126def:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f0126df2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126df8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f0126dfe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126e04:	8a 55 cf             	mov    -0x31(%ebp),%dl
f0126e07:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f0126e09:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f0126e0f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126e15:	01 c2                	add    %eax,%edx
f0126e17:	8a 45 ce             	mov    -0x32(%ebp),%al
f0126e1a:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f0126e1c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126e22:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f0126e28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e2f:	eb 11                	jmp    f0126e42 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f0126e31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e34:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126e3a:	01 d0                	add    %edx,%eax
f0126e3c:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f0126e3f:	ff 45 f4             	incl   -0xc(%ebp)
f0126e42:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126e48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e4b:	7d e4                	jge    f0126e31 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f0126e4d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126e53:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f0126e59:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126e5f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f0126e65:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0126e6b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126e72:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126e78:	01 d0                	add    %edx,%eax
f0126e7a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f0126e80:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126e86:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f0126e8c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0126e93:	eb 1b                	jmp    f0126eb0 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f0126e95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0126e98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126e9f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126ea5:	01 d0                	add    %edx,%eax
f0126ea7:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f0126ead:	ff 45 f0             	incl   -0x10(%ebp)
f0126eb0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0126eb6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0126eb9:	7d da                	jge    f0126e95 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0126ebb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126ec1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f0126ec7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126ece:	eb 17                	jmp    f0126ee7 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f0126ed0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0126ed3:	01 c0                	add    %eax,%eax
f0126ed5:	89 c2                	mov    %eax,%edx
f0126ed7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126edd:	01 d0                	add    %edx,%eax
f0126edf:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f0126ee4:	ff 45 ec             	incl   -0x14(%ebp)
f0126ee7:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0126eed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0126ef0:	7d de                	jge    f0126ed0 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f0126ef2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126ef8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f0126efe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126f04:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f0126f09:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0126f0f:	01 c0                	add    %eax,%eax
f0126f11:	89 c2                	mov    %eax,%edx
f0126f13:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126f19:	01 d0                	add    %edx,%eax
f0126f1b:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f0126f20:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126f26:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f0126f2c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0126f33:	eb 49                	jmp    f0126f7e <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f0126f35:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0126f38:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0126f3f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126f45:	01 d0                	add    %edx,%eax
f0126f47:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f0126f4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0126f4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0126f54:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126f5a:	01 d0                	add    %edx,%eax
f0126f5c:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f0126f62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0126f65:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0126f6c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126f72:	01 d0                	add    %edx,%eax
f0126f74:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f0126f7b:	ff 45 e8             	incl   -0x18(%ebp)
f0126f7e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0126f84:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0126f87:	7d ac                	jge    f0126f35 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f0126f89:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126f8f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f0126f95:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126f9b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f0126f9e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fa4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f0126faa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fb0:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f0126fb7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0126fbd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0126fc4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fca:	01 d0                	add    %edx,%eax
f0126fcc:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f0126fcf:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0126fd5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0126fdc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fe2:	01 d0                	add    %edx,%eax
f0126fe4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f0126fea:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0126ff0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0126ff7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126ffd:	01 d0                	add    %edx,%eax
f0126fff:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f0127006:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012700c:	8a 00                	mov    (%eax),%al
f012700e:	3a 45 cf             	cmp    -0x31(%ebp),%al
f0127011:	75 17                	jne    f012702a <test_krealloc_BF+0xd04>
f0127013:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127019:	89 c2                	mov    %eax,%edx
f012701b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127021:	01 d0                	add    %edx,%eax
f0127023:	8a 00                	mov    (%eax),%al
f0127025:	3a 45 ce             	cmp    -0x32(%ebp),%al
f0127028:	74 17                	je     f0127041 <test_krealloc_BF+0xd1b>
			panic(
f012702a:	83 ec 04             	sub    $0x4,%esp
f012702d:	68 ac 12 13 f0       	push   $0xf01312ac
f0127032:	68 46 11 00 00       	push   $0x1146
f0127037:	68 be ff 12 f0       	push   $0xf012ffbe
f012703c:	e8 65 91 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f0127041:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0127047:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012704d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127053:	8a 00                	mov    (%eax),%al
f0127055:	3c 02                	cmp    $0x2,%al
f0127057:	75 16                	jne    f012706f <test_krealloc_BF+0xd49>
f0127059:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012705f:	89 c2                	mov    %eax,%edx
f0127061:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127067:	01 d0                	add    %edx,%eax
f0127069:	8a 00                	mov    (%eax),%al
f012706b:	3c 02                	cmp    $0x2,%al
f012706d:	74 20                	je     f012708f <test_krealloc_BF+0xd69>
			panic(
f012706f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127075:	8a 00                	mov    (%eax),%al
f0127077:	0f be c0             	movsbl %al,%eax
f012707a:	50                   	push   %eax
f012707b:	68 ec 12 13 f0       	push   $0xf01312ec
f0127080:	68 4c 11 00 00       	push   $0x114c
f0127085:	68 be ff 12 f0       	push   $0xf012ffbe
f012708a:	e8 17 91 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012708f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0127095:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012709b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01270a1:	8b 00                	mov    (%eax),%eax
f01270a3:	83 f8 03             	cmp    $0x3,%eax
f01270a6:	75 1c                	jne    f01270c4 <test_krealloc_BF+0xd9e>
f01270a8:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01270ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01270b5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01270bb:	01 d0                	add    %edx,%eax
f01270bd:	8b 00                	mov    (%eax),%eax
f01270bf:	83 f8 03             	cmp    $0x3,%eax
f01270c2:	74 17                	je     f01270db <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f01270c4:	83 ec 04             	sub    $0x4,%esp
f01270c7:	68 38 13 13 f0       	push   $0xf0131338
f01270cc:	68 50 11 00 00       	push   $0x1150
f01270d1:	68 be ff 12 f0       	push   $0xf012ffbe
f01270d6:	e8 cb 90 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f01270db:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01270e1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f01270e7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01270ed:	8b 00                	mov    (%eax),%eax
f01270ef:	83 f8 04             	cmp    $0x4,%eax
f01270f2:	75 1c                	jne    f0127110 <test_krealloc_BF+0xdea>
f01270f4:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01270fa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127101:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127107:	01 d0                	add    %edx,%eax
f0127109:	8b 00                	mov    (%eax),%eax
f012710b:	83 f8 04             	cmp    $0x4,%eax
f012710e:	74 17                	je     f0127127 <test_krealloc_BF+0xe01>
			panic(
f0127110:	83 ec 04             	sub    $0x4,%esp
f0127113:	68 ac 12 13 f0       	push   $0xf01312ac
f0127118:	68 55 11 00 00       	push   $0x1155
f012711d:	68 be ff 12 f0       	push   $0xf012ffbe
f0127122:	e8 7f 90 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f0127127:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012712d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f0127133:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127139:	66 8b 00             	mov    (%eax),%ax
f012713c:	66 83 f8 05          	cmp    $0x5,%ax
f0127140:	75 1b                	jne    f012715d <test_krealloc_BF+0xe37>
f0127142:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0127148:	01 c0                	add    %eax,%eax
f012714a:	89 c2                	mov    %eax,%edx
f012714c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127152:	01 d0                	add    %edx,%eax
f0127154:	66 8b 00             	mov    (%eax),%ax
f0127157:	66 83 f8 05          	cmp    $0x5,%ax
f012715b:	74 17                	je     f0127174 <test_krealloc_BF+0xe4e>
			panic(
f012715d:	83 ec 04             	sub    $0x4,%esp
f0127160:	68 ac 12 13 f0       	push   $0xf01312ac
f0127165:	68 5a 11 00 00       	push   $0x115a
f012716a:	68 be ff 12 f0       	push   $0xf012ffbe
f012716f:	e8 32 90 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f0127174:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012717a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f0127180:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127186:	66 8b 00             	mov    (%eax),%ax
f0127189:	66 83 f8 06          	cmp    $0x6,%ax
f012718d:	75 1b                	jne    f01271aa <test_krealloc_BF+0xe84>
f012718f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0127195:	01 c0                	add    %eax,%eax
f0127197:	89 c2                	mov    %eax,%edx
f0127199:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012719f:	01 d0                	add    %edx,%eax
f01271a1:	66 8b 00             	mov    (%eax),%ax
f01271a4:	66 83 f8 06          	cmp    $0x6,%ax
f01271a8:	74 17                	je     f01271c1 <test_krealloc_BF+0xe9b>
			panic(
f01271aa:	83 ec 04             	sub    $0x4,%esp
f01271ad:	68 ac 12 13 f0       	push   $0xf01312ac
f01271b2:	68 5f 11 00 00       	push   $0x115f
f01271b7:	68 be ff 12 f0       	push   $0xf012ffbe
f01271bc:	e8 e5 8f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f01271c1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01271c7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f01271cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01271d3:	8a 00                	mov    (%eax),%al
f01271d5:	3c 07                	cmp    $0x7,%al
f01271d7:	75 1b                	jne    f01271f4 <test_krealloc_BF+0xece>
f01271d9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01271df:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01271e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01271ec:	01 d0                	add    %edx,%eax
f01271ee:	8a 00                	mov    (%eax),%al
f01271f0:	3c 07                	cmp    $0x7,%al
f01271f2:	74 17                	je     f012720b <test_krealloc_BF+0xee5>
			panic(
f01271f4:	83 ec 04             	sub    $0x4,%esp
f01271f7:	68 ac 12 13 f0       	push   $0xf01312ac
f01271fc:	68 64 11 00 00       	push   $0x1164
f0127201:	68 be ff 12 f0       	push   $0xf012ffbe
f0127206:	e8 9b 8f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012720b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127211:	66 8b 40 02          	mov    0x2(%eax),%ax
f0127215:	66 83 f8 07          	cmp    $0x7,%ax
f0127219:	75 1f                	jne    f012723a <test_krealloc_BF+0xf14>
f012721b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0127221:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0127228:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012722e:	01 d0                	add    %edx,%eax
f0127230:	66 8b 40 02          	mov    0x2(%eax),%ax
f0127234:	66 83 f8 07          	cmp    $0x7,%ax
f0127238:	74 17                	je     f0127251 <test_krealloc_BF+0xf2b>
			panic(
f012723a:	83 ec 04             	sub    $0x4,%esp
f012723d:	68 ac 12 13 f0       	push   $0xf01312ac
f0127242:	68 67 11 00 00       	push   $0x1167
f0127247:	68 be ff 12 f0       	push   $0xf012ffbe
f012724c:	e8 55 8f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f0127251:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127257:	8b 40 04             	mov    0x4(%eax),%eax
f012725a:	83 f8 07             	cmp    $0x7,%eax
f012725d:	75 1d                	jne    f012727c <test_krealloc_BF+0xf56>
f012725f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0127265:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012726c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127272:	01 d0                	add    %edx,%eax
f0127274:	8b 40 04             	mov    0x4(%eax),%eax
f0127277:	83 f8 07             	cmp    $0x7,%eax
f012727a:	74 17                	je     f0127293 <test_krealloc_BF+0xf6d>
			panic(
f012727c:	83 ec 04             	sub    $0x4,%esp
f012727f:	68 ac 12 13 f0       	push   $0xf01312ac
f0127284:	68 6a 11 00 00       	push   $0x116a
f0127289:	68 be ff 12 f0       	push   $0xf012ffbe
f012728e:	e8 13 8f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f0127293:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0127299:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012729f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01272a5:	8a 00                	mov    (%eax),%al
f01272a7:	3c 08                	cmp    $0x8,%al
f01272a9:	75 1b                	jne    f01272c6 <test_krealloc_BF+0xfa0>
f01272ab:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01272b1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01272b8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01272be:	01 d0                	add    %edx,%eax
f01272c0:	8a 00                	mov    (%eax),%al
f01272c2:	3c 08                	cmp    $0x8,%al
f01272c4:	74 17                	je     f01272dd <test_krealloc_BF+0xfb7>
			panic(
f01272c6:	83 ec 04             	sub    $0x4,%esp
f01272c9:	68 ac 12 13 f0       	push   $0xf01312ac
f01272ce:	68 6f 11 00 00       	push   $0x116f
f01272d3:	68 be ff 12 f0       	push   $0xf012ffbe
f01272d8:	e8 c9 8e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f01272dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01272e3:	66 8b 40 02          	mov    0x2(%eax),%ax
f01272e7:	66 83 f8 08          	cmp    $0x8,%ax
f01272eb:	75 1f                	jne    f012730c <test_krealloc_BF+0xfe6>
f01272ed:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01272f3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01272fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127300:	01 d0                	add    %edx,%eax
f0127302:	66 8b 40 02          	mov    0x2(%eax),%ax
f0127306:	66 83 f8 08          	cmp    $0x8,%ax
f012730a:	74 17                	je     f0127323 <test_krealloc_BF+0xffd>
			panic(
f012730c:	83 ec 04             	sub    $0x4,%esp
f012730f:	68 ac 12 13 f0       	push   $0xf01312ac
f0127314:	68 72 11 00 00       	push   $0x1172
f0127319:	68 be ff 12 f0       	push   $0xf012ffbe
f012731e:	e8 83 8e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f0127323:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127329:	8b 40 04             	mov    0x4(%eax),%eax
f012732c:	83 f8 08             	cmp    $0x8,%eax
f012732f:	75 1d                	jne    f012734e <test_krealloc_BF+0x1028>
f0127331:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0127337:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012733e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127344:	01 d0                	add    %edx,%eax
f0127346:	8b 40 04             	mov    0x4(%eax),%eax
f0127349:	83 f8 08             	cmp    $0x8,%eax
f012734c:	74 17                	je     f0127365 <test_krealloc_BF+0x103f>
			panic(
f012734e:	83 ec 04             	sub    $0x4,%esp
f0127351:	68 ac 12 13 f0       	push   $0xf01312ac
f0127356:	68 75 11 00 00       	push   $0x1175
f012735b:	68 be ff 12 f0       	push   $0xf012ffbe
f0127360:	e8 41 8e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f0127365:	e8 46 42 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012736a:	89 c2                	mov    %eax,%edx
f012736c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012736f:	39 c2                	cmp    %eax,%edx
f0127371:	74 17                	je     f012738a <test_krealloc_BF+0x1064>
			panic(
f0127373:	83 ec 04             	sub    $0x4,%esp
f0127376:	68 6c 13 13 f0       	push   $0xf013136c
f012737b:	68 79 11 00 00       	push   $0x1179
f0127380:	68 be ff 12 f0       	push   $0xf012ffbe
f0127385:	e8 1c 8e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012738a:	83 ec 0c             	sub    $0xc,%esp
f012738d:	68 b8 13 13 f0       	push   $0xf01313b8
f0127392:	e8 96 98 fd ff       	call   f0100c2d <cprintf>
f0127397:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012739a:	e8 11 42 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012739f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01273a2:	e8 fd c0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01273a7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f01273ad:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01273b3:	83 ec 08             	sub    $0x8,%esp
f01273b6:	6a 00                	push   $0x0
f01273b8:	50                   	push   %eax
f01273b9:	e8 ec f8 fd ff       	call   f0106caa <krealloc>
f01273be:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01273c1:	e8 de c0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01273c6:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01273cc:	74 17                	je     f01273e5 <test_krealloc_BF+0x10bf>
			panic(
f01273ce:	83 ec 04             	sub    $0x4,%esp
f01273d1:	68 dc 13 13 f0       	push   $0xf01313dc
f01273d6:	68 86 11 00 00       	push   $0x1186
f01273db:	68 be ff 12 f0       	push   $0xf012ffbe
f01273e0:	e8 c1 8d fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f01273e5:	e8 c6 41 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01273ea:	89 c2                	mov    %eax,%edx
f01273ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01273ef:	29 c2                	sub    %eax,%edx
f01273f1:	89 d0                	mov    %edx,%eax
f01273f3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01273f8:	74 17                	je     f0127411 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f01273fa:	83 ec 04             	sub    $0x4,%esp
f01273fd:	68 50 14 13 f0       	push   $0xf0131450
f0127402:	68 88 11 00 00       	push   $0x1188
f0127407:	68 be ff 12 f0       	push   $0xf012ffbe
f012740c:	e8 95 8d fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f0127411:	e8 9a 41 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127416:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0127419:	e8 86 c0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012741e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f0127424:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012742a:	83 ec 08             	sub    $0x8,%esp
f012742d:	6a 00                	push   $0x0
f012742f:	50                   	push   %eax
f0127430:	e8 75 f8 fd ff       	call   f0106caa <krealloc>
f0127435:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0127438:	e8 67 c0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012743d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0127443:	74 17                	je     f012745c <test_krealloc_BF+0x1136>
			panic(
f0127445:	83 ec 04             	sub    $0x4,%esp
f0127448:	68 dc 13 13 f0       	push   $0xf01313dc
f012744d:	68 91 11 00 00       	push   $0x1191
f0127452:	68 be ff 12 f0       	push   $0xf012ffbe
f0127457:	e8 4a 8d fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012745c:	e8 4f 41 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127461:	89 c2                	mov    %eax,%edx
f0127463:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127466:	29 c2                	sub    %eax,%edx
f0127468:	89 d0                	mov    %edx,%eax
f012746a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012746f:	74 17                	je     f0127488 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f0127471:	83 ec 04             	sub    $0x4,%esp
f0127474:	68 50 14 13 f0       	push   $0xf0131450
f0127479:	68 93 11 00 00       	push   $0x1193
f012747e:	68 be ff 12 f0       	push   $0xf012ffbe
f0127483:	e8 1e 8d fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f0127488:	e8 23 41 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012748d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0127490:	e8 0f c0 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f0127495:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012749b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01274a1:	83 ec 08             	sub    $0x8,%esp
f01274a4:	6a 00                	push   $0x0
f01274a6:	50                   	push   %eax
f01274a7:	e8 fe f7 fd ff       	call   f0106caa <krealloc>
f01274ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01274af:	e8 f0 bf fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01274b4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01274ba:	74 17                	je     f01274d3 <test_krealloc_BF+0x11ad>
			panic(
f01274bc:	83 ec 04             	sub    $0x4,%esp
f01274bf:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01274c4:	68 9b 11 00 00       	push   $0x119b
f01274c9:	68 be ff 12 f0       	push   $0xf012ffbe
f01274ce:	e8 d3 8c fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f01274d3:	e8 d8 40 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01274d8:	89 c2                	mov    %eax,%edx
f01274da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01274dd:	29 c2                	sub    %eax,%edx
f01274df:	89 d0                	mov    %edx,%eax
f01274e1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01274e6:	74 17                	je     f01274ff <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f01274e8:	83 ec 04             	sub    $0x4,%esp
f01274eb:	68 50 14 13 f0       	push   $0xf0131450
f01274f0:	68 9d 11 00 00       	push   $0x119d
f01274f5:	68 be ff 12 f0       	push   $0xf012ffbe
f01274fa:	e8 a7 8c fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f01274ff:	e8 ac 40 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127504:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0127507:	e8 98 bf fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012750c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f0127512:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0127518:	83 ec 08             	sub    $0x8,%esp
f012751b:	6a 00                	push   $0x0
f012751d:	50                   	push   %eax
f012751e:	e8 87 f7 fd ff       	call   f0106caa <krealloc>
f0127523:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0127526:	e8 79 bf fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012752b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0127531:	74 17                	je     f012754a <test_krealloc_BF+0x1224>
			panic(
f0127533:	83 ec 04             	sub    $0x4,%esp
f0127536:	68 dc 13 13 f0       	push   $0xf01313dc
f012753b:	68 a5 11 00 00       	push   $0x11a5
f0127540:	68 be ff 12 f0       	push   $0xf012ffbe
f0127545:	e8 5c 8c fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012754a:	e8 61 40 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f012754f:	89 c2                	mov    %eax,%edx
f0127551:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127554:	29 c2                	sub    %eax,%edx
f0127556:	89 d0                	mov    %edx,%eax
f0127558:	3d 00 03 00 00       	cmp    $0x300,%eax
f012755d:	74 17                	je     f0127576 <test_krealloc_BF+0x1250>
			panic(
f012755f:	83 ec 04             	sub    $0x4,%esp
f0127562:	68 84 14 13 f0       	push   $0xf0131484
f0127567:	68 a8 11 00 00       	push   $0x11a8
f012756c:	68 be ff 12 f0       	push   $0xf012ffbe
f0127571:	e8 30 8c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f0127576:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012757d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0127584:	eb 48                	jmp    f01275ce <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f0127586:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0127589:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f012758e:	83 ec 04             	sub    $0x4,%esp
f0127591:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f0127597:	51                   	push   %ecx
f0127598:	52                   	push   %edx
f0127599:	50                   	push   %eax
f012759a:	e8 e2 eb fd ff       	call   f0106181 <get_page_table>
f012759f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01275a2:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f01275a8:	85 c0                	test   %eax,%eax
f01275aa:	75 17                	jne    f01275c3 <test_krealloc_BF+0x129d>
					panic(
f01275ac:	83 ec 04             	sub    $0x4,%esp
f01275af:	68 c0 08 13 f0       	push   $0xf01308c0
f01275b4:	68 b4 11 00 00       	push   $0x11b4
f01275b9:	68 be ff 12 f0       	push   $0xf012ffbe
f01275be:	e8 e3 8b fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01275c3:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f01275ca:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f01275ce:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01275d2:	78 b2                	js     f0127586 <test_krealloc_BF+0x1260>
f01275d4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01275d8:	7f 09                	jg     f01275e3 <test_krealloc_BF+0x12bd>
f01275da:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f01275e1:	76 a3                	jbe    f0127586 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f01275e3:	83 ec 0c             	sub    $0xc,%esp
f01275e6:	68 c3 14 13 f0       	push   $0xf01314c3
f01275eb:	e8 3d 96 fd ff       	call   f0100c2d <cprintf>
f01275f0:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f01275f3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01275f9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f01275ff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0127606:	eb 21                	jmp    f0127629 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f0127608:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012760e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0127611:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127617:	01 c8                	add    %ecx,%eax
f0127619:	8a 00                	mov    (%eax),%al
f012761b:	0f be c0             	movsbl %al,%eax
f012761e:	01 d0                	add    %edx,%eax
f0127620:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f0127626:	ff 45 dc             	incl   -0x24(%ebp)
f0127629:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012762f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0127632:	7d d4                	jge    f0127608 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f0127634:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012763a:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f0127640:	42                   	inc    %edx
f0127641:	01 d2                	add    %edx,%edx
f0127643:	39 d0                	cmp    %edx,%eax
f0127645:	74 17                	je     f012765e <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f0127647:	83 ec 04             	sub    $0x4,%esp
f012764a:	68 cc 14 13 f0       	push   $0xf01314cc
f012764f:	68 c6 11 00 00       	push   $0x11c6
f0127654:	68 be ff 12 f0       	push   $0xf012ffbe
f0127659:	e8 48 8b fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012765e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0127664:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012766a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0127671:	eb 25                	jmp    f0127698 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f0127673:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0127679:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012767c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0127683:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127689:	01 c8                	add    %ecx,%eax
f012768b:	8b 00                	mov    (%eax),%eax
f012768d:	01 d0                	add    %edx,%eax
f012768f:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f0127695:	ff 45 dc             	incl   -0x24(%ebp)
f0127698:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012769e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01276a1:	7d d0                	jge    f0127673 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f01276a3:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01276a9:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f01276af:	42                   	inc    %edx
f01276b0:	c1 e2 02             	shl    $0x2,%edx
f01276b3:	39 d0                	cmp    %edx,%eax
f01276b5:	74 17                	je     f01276ce <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f01276b7:	83 ec 04             	sub    $0x4,%esp
f01276ba:	68 cc 14 13 f0       	push   $0xf01314cc
f01276bf:	68 d0 11 00 00       	push   $0x11d0
f01276c4:	68 be ff 12 f0       	push   $0xf012ffbe
f01276c9:	e8 d8 8a fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f01276ce:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01276d4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f01276da:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01276e1:	eb 24                	jmp    f0127707 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f01276e3:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01276e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01276ec:	01 c0                	add    %eax,%eax
f01276ee:	89 c1                	mov    %eax,%ecx
f01276f0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01276f6:	01 c8                	add    %ecx,%eax
f01276f8:	66 8b 00             	mov    (%eax),%ax
f01276fb:	98                   	cwtl   
f01276fc:	01 d0                	add    %edx,%eax
f01276fe:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f0127704:	ff 45 dc             	incl   -0x24(%ebp)
f0127707:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012770d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0127710:	7d d1                	jge    f01276e3 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f0127712:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0127718:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012771e:	8d 48 01             	lea    0x1(%eax),%ecx
f0127721:	89 c8                	mov    %ecx,%eax
f0127723:	c1 e0 02             	shl    $0x2,%eax
f0127726:	01 c8                	add    %ecx,%eax
f0127728:	39 c2                	cmp    %eax,%edx
f012772a:	74 17                	je     f0127743 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012772c:	83 ec 04             	sub    $0x4,%esp
f012772f:	68 cc 14 13 f0       	push   $0xf01314cc
f0127734:	68 da 11 00 00       	push   $0x11da
f0127739:	68 be ff 12 f0       	push   $0xf012ffbe
f012773e:	e8 63 8a fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f0127743:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127749:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012774f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0127756:	eb 70                	jmp    f01277c8 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f0127758:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012775e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127761:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0127768:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012776e:	01 c8                	add    %ecx,%eax
f0127770:	8a 00                	mov    (%eax),%al
f0127772:	0f be c0             	movsbl %al,%eax
f0127775:	01 d0                	add    %edx,%eax
f0127777:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012777d:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f0127783:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127786:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012778d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127793:	01 c8                	add    %ecx,%eax
f0127795:	66 8b 40 02          	mov    0x2(%eax),%ax
f0127799:	98                   	cwtl   
f012779a:	01 d0                	add    %edx,%eax
f012779c:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f01277a2:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01277a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01277ab:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01277b2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01277b8:	01 c8                	add    %ecx,%eax
f01277ba:	8b 40 04             	mov    0x4(%eax),%eax
f01277bd:	01 d0                	add    %edx,%eax
f01277bf:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f01277c5:	ff 45 dc             	incl   -0x24(%ebp)
f01277c8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01277ce:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01277d1:	7d 85                	jge    f0127758 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f01277d3:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f01277d9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01277df:	8d 50 01             	lea    0x1(%eax),%edx
f01277e2:	89 d0                	mov    %edx,%eax
f01277e4:	01 c0                	add    %eax,%eax
f01277e6:	01 d0                	add    %edx,%eax
f01277e8:	01 c0                	add    %eax,%eax
f01277ea:	01 d0                	add    %edx,%eax
f01277ec:	39 c1                	cmp    %eax,%ecx
f01277ee:	75 3a                	jne    f012782a <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f01277f0:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f01277f6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01277fc:	8d 50 01             	lea    0x1(%eax),%edx
f01277ff:	89 d0                	mov    %edx,%eax
f0127801:	01 c0                	add    %eax,%eax
f0127803:	01 d0                	add    %edx,%eax
f0127805:	01 c0                	add    %eax,%eax
f0127807:	01 d0                	add    %edx,%eax
f0127809:	39 c1                	cmp    %eax,%ecx
f012780b:	75 1d                	jne    f012782a <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012780d:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0127813:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0127819:	8d 50 01             	lea    0x1(%eax),%edx
f012781c:	89 d0                	mov    %edx,%eax
f012781e:	01 c0                	add    %eax,%eax
f0127820:	01 d0                	add    %edx,%eax
f0127822:	01 c0                	add    %eax,%eax
f0127824:	01 d0                	add    %edx,%eax
f0127826:	39 c1                	cmp    %eax,%ecx
f0127828:	74 17                	je     f0127841 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012782a:	83 ec 04             	sub    $0x4,%esp
f012782d:	68 cc 14 13 f0       	push   $0xf01314cc
f0127832:	68 e8 11 00 00       	push   $0x11e8
f0127837:	68 be ff 12 f0       	push   $0xf012ffbe
f012783c:	e8 65 89 fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f0127841:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f0127848:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012784b:	e8 60 3d fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127850:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f0127853:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0127859:	83 ec 08             	sub    $0x8,%esp
f012785c:	68 00 3c 00 00       	push   $0x3c00
f0127861:	50                   	push   %eax
f0127862:	e8 43 f4 fd ff       	call   f0106caa <krealloc>
f0127867:	83 c4 10             	add    $0x10,%esp
f012786a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127870:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127876:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012787b:	77 17                	ja     f0127894 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012787d:	83 ec 04             	sub    $0x4,%esp
f0127880:	68 20 12 13 f0       	push   $0xf0131220
f0127885:	68 f4 11 00 00       	push   $0x11f4
f012788a:	68 be ff 12 f0       	push   $0xf012ffbe
f012788f:	e8 12 89 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f0127894:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012789a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01278a0:	74 17                	je     f01278b9 <test_krealloc_BF+0x1593>
			panic(
f01278a2:	83 ec 04             	sub    $0x4,%esp
f01278a5:	68 04 15 13 f0       	push   $0xf0131504
f01278aa:	68 f7 11 00 00       	push   $0x11f7
f01278af:	68 be ff 12 f0       	push   $0xf012ffbe
f01278b4:	e8 ed 88 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f01278b9:	e8 f2 3c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01278be:	89 c2                	mov    %eax,%edx
f01278c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01278c3:	39 c2                	cmp    %eax,%edx
f01278c5:	74 17                	je     f01278de <test_krealloc_BF+0x15b8>
			panic(
f01278c7:	83 ec 04             	sub    $0x4,%esp
f01278ca:	68 70 15 13 f0       	push   $0xf0131570
f01278cf:	68 fa 11 00 00       	push   $0x11fa
f01278d4:	68 be ff 12 f0       	push   $0xf012ffbe
f01278d9:	e8 c8 88 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f01278de:	e8 cd 3c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01278e3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f01278e6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01278ec:	83 ec 08             	sub    $0x8,%esp
f01278ef:	68 00 fc 0f 00       	push   $0xffc00
f01278f4:	50                   	push   %eax
f01278f5:	e8 b0 f3 fd ff       	call   f0106caa <krealloc>
f01278fa:	83 c4 10             	add    $0x10,%esp
f01278fd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127903:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127909:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012790e:	77 17                	ja     f0127927 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127910:	83 ec 04             	sub    $0x4,%esp
f0127913:	68 20 12 13 f0       	push   $0xf0131220
f0127918:	68 00 12 00 00       	push   $0x1200
f012791d:	68 be ff 12 f0       	push   $0xf012ffbe
f0127922:	e8 7f 88 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f0127927:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012792d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0127933:	74 17                	je     f012794c <test_krealloc_BF+0x1626>
			panic(
f0127935:	83 ec 04             	sub    $0x4,%esp
f0127938:	68 04 15 13 f0       	push   $0xf0131504
f012793d:	68 03 12 00 00       	push   $0x1203
f0127942:	68 be ff 12 f0       	push   $0xf012ffbe
f0127947:	e8 5a 88 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012794c:	e8 5f 3c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127951:	89 c2                	mov    %eax,%edx
f0127953:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127956:	39 c2                	cmp    %eax,%edx
f0127958:	74 17                	je     f0127971 <test_krealloc_BF+0x164b>
			panic(
f012795a:	83 ec 04             	sub    $0x4,%esp
f012795d:	68 70 15 13 f0       	push   $0xf0131570
f0127962:	68 06 12 00 00       	push   $0x1206
f0127967:	68 be ff 12 f0       	push   $0xf012ffbe
f012796c:	e8 35 88 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f0127971:	e8 3a 3c fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127976:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f0127979:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012797f:	83 ec 08             	sub    $0x8,%esp
f0127982:	68 00 fc 0f 00       	push   $0xffc00
f0127987:	50                   	push   %eax
f0127988:	e8 1d f3 fd ff       	call   f0106caa <krealloc>
f012798d:	83 c4 10             	add    $0x10,%esp
f0127990:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127996:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012799c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01279a1:	77 17                	ja     f01279ba <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f01279a3:	83 ec 04             	sub    $0x4,%esp
f01279a6:	68 20 12 13 f0       	push   $0xf0131220
f01279ab:	68 0c 12 00 00       	push   $0x120c
f01279b0:	68 be ff 12 f0       	push   $0xf012ffbe
f01279b5:	e8 ec 87 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f01279ba:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01279c0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01279c6:	74 17                	je     f01279df <test_krealloc_BF+0x16b9>
			panic(
f01279c8:	83 ec 04             	sub    $0x4,%esp
f01279cb:	68 04 15 13 f0       	push   $0xf0131504
f01279d0:	68 0f 12 00 00       	push   $0x120f
f01279d5:	68 be ff 12 f0       	push   $0xf012ffbe
f01279da:	e8 c7 87 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f01279df:	e8 cc 3b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01279e4:	89 c2                	mov    %eax,%edx
f01279e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01279e9:	39 c2                	cmp    %eax,%edx
f01279eb:	74 17                	je     f0127a04 <test_krealloc_BF+0x16de>
			panic(
f01279ed:	83 ec 04             	sub    $0x4,%esp
f01279f0:	68 70 15 13 f0       	push   $0xf0131570
f01279f5:	68 12 12 00 00       	push   $0x1212
f01279fa:	68 be ff 12 f0       	push   $0xf012ffbe
f01279ff:	e8 a2 87 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f0127a04:	e8 a7 3b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127a09:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f0127a0c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0127a12:	83 ec 08             	sub    $0x8,%esp
f0127a15:	68 00 fc 0f 00       	push   $0xffc00
f0127a1a:	50                   	push   %eax
f0127a1b:	e8 8a f2 fd ff       	call   f0106caa <krealloc>
f0127a20:	83 c4 10             	add    $0x10,%esp
f0127a23:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127a29:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127a2f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0127a34:	77 17                	ja     f0127a4d <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127a36:	83 ec 04             	sub    $0x4,%esp
f0127a39:	68 20 12 13 f0       	push   $0xf0131220
f0127a3e:	68 1a 12 00 00       	push   $0x121a
f0127a43:	68 be ff 12 f0       	push   $0xf012ffbe
f0127a48:	e8 59 87 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f0127a4d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0127a53:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0127a59:	74 17                	je     f0127a72 <test_krealloc_BF+0x174c>
			panic(
f0127a5b:	83 ec 04             	sub    $0x4,%esp
f0127a5e:	68 b4 15 13 f0       	push   $0xf01315b4
f0127a63:	68 1d 12 00 00       	push   $0x121d
f0127a68:	68 be ff 12 f0       	push   $0xf012ffbe
f0127a6d:	e8 34 87 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f0127a72:	e8 39 3b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127a77:	89 c2                	mov    %eax,%edx
f0127a79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127a7c:	39 c2                	cmp    %eax,%edx
f0127a7e:	74 17                	je     f0127a97 <test_krealloc_BF+0x1771>
			panic(
f0127a80:	83 ec 04             	sub    $0x4,%esp
f0127a83:	68 70 15 13 f0       	push   $0xf0131570
f0127a88:	68 20 12 00 00       	push   $0x1220
f0127a8d:	68 be ff 12 f0       	push   $0xf012ffbe
f0127a92:	e8 0f 87 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f0127a97:	83 ec 0c             	sub    $0xc,%esp
f0127a9a:	68 d7 07 13 f0       	push   $0xf01307d7
f0127a9f:	e8 89 91 fd ff       	call   f0100c2d <cprintf>
f0127aa4:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f0127aa7:	e8 04 3b fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127aac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f0127aaf:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0127ab5:	83 ec 08             	sub    $0x8,%esp
f0127ab8:	68 00 18 10 00       	push   $0x101800
f0127abd:	50                   	push   %eax
f0127abe:	e8 e7 f1 fd ff       	call   f0106caa <krealloc>
f0127ac3:	83 c4 10             	add    $0x10,%esp
f0127ac6:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127ac9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127acc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0127ad1:	77 17                	ja     f0127aea <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127ad3:	83 ec 04             	sub    $0x4,%esp
f0127ad6:	68 20 12 13 f0       	push   $0xf0131220
f0127adb:	68 29 12 00 00       	push   $0x1229
f0127ae0:	68 be ff 12 f0       	push   $0xf012ffbe
f0127ae5:	e8 bc 86 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f0127aea:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0127af0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0127af3:	74 17                	je     f0127b0c <test_krealloc_BF+0x17e6>
			panic(
f0127af5:	83 ec 04             	sub    $0x4,%esp
f0127af8:	68 14 16 13 f0       	push   $0xf0131614
f0127afd:	68 2c 12 00 00       	push   $0x122c
f0127b02:	68 be ff 12 f0       	push   $0xf012ffbe
f0127b07:	e8 9a 86 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f0127b0c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0127b0f:	e8 9c 3a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127b14:	29 c3                	sub    %eax,%ebx
f0127b16:	89 d8                	mov    %ebx,%eax
f0127b18:	83 f8 02             	cmp    $0x2,%eax
f0127b1b:	74 17                	je     f0127b34 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f0127b1d:	83 ec 04             	sub    $0x4,%esp
f0127b20:	68 90 16 13 f0       	push   $0xf0131690
f0127b25:	68 2e 12 00 00       	push   $0x122e
f0127b2a:	68 be ff 12 f0       	push   $0xf012ffbe
f0127b2f:	e8 72 86 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f0127b34:	e8 77 3a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127b39:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f0127b3c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0127b42:	83 ec 08             	sub    $0x8,%esp
f0127b45:	68 00 fc 3f 00       	push   $0x3ffc00
f0127b4a:	50                   	push   %eax
f0127b4b:	e8 5a f1 fd ff       	call   f0106caa <krealloc>
f0127b50:	83 c4 10             	add    $0x10,%esp
f0127b53:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127b56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127b59:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0127b5e:	77 17                	ja     f0127b77 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127b60:	83 ec 04             	sub    $0x4,%esp
f0127b63:	68 20 12 13 f0       	push   $0xf0131220
f0127b68:	68 34 12 00 00       	push   $0x1234
f0127b6d:	68 be ff 12 f0       	push   $0xf012ffbe
f0127b72:	e8 2f 86 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f0127b77:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0127b7d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0127b80:	74 17                	je     f0127b99 <test_krealloc_BF+0x1873>
			panic(
f0127b82:	83 ec 04             	sub    $0x4,%esp
f0127b85:	68 14 16 13 f0       	push   $0xf0131614
f0127b8a:	68 37 12 00 00       	push   $0x1237
f0127b8f:	68 be ff 12 f0       	push   $0xf012ffbe
f0127b94:	e8 0d 86 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f0127b99:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0127b9c:	e8 0f 3a fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127ba1:	29 c3                	sub    %eax,%ebx
f0127ba3:	89 d8                	mov    %ebx,%eax
f0127ba5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127baa:	74 17                	je     f0127bc3 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f0127bac:	83 ec 04             	sub    $0x4,%esp
f0127baf:	68 90 16 13 f0       	push   $0xf0131690
f0127bb4:	68 3a 12 00 00       	push   $0x123a
f0127bb9:	68 be ff 12 f0       	push   $0xf012ffbe
f0127bbe:	e8 e3 85 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f0127bc3:	83 ec 0c             	sub    $0xc,%esp
f0127bc6:	68 1c 08 13 f0       	push   $0xf013081c
f0127bcb:	e8 5d 90 fd ff       	call   f0100c2d <cprintf>
f0127bd0:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f0127bd3:	e8 d8 39 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127bd8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f0127bdb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0127be1:	83 ec 08             	sub    $0x8,%esp
f0127be4:	68 00 fc 9f 00       	push   $0x9ffc00
f0127be9:	50                   	push   %eax
f0127bea:	e8 bb f0 fd ff       	call   f0106caa <krealloc>
f0127bef:	83 c4 10             	add    $0x10,%esp
f0127bf2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127bf5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127bf8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0127bfd:	77 17                	ja     f0127c16 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127bff:	83 ec 04             	sub    $0x4,%esp
f0127c02:	68 20 12 13 f0       	push   $0xf0131220
f0127c07:	68 45 12 00 00       	push   $0x1245
f0127c0c:	68 be ff 12 f0       	push   $0xf012ffbe
f0127c11:	e8 90 85 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f0127c16:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127c1d:	10 00 00 
f0127c20:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0127c25:	0f b6 d0             	movzbl %al,%edx
f0127c28:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127c2e:	01 d0                	add    %edx,%eax
f0127c30:	48                   	dec    %eax
f0127c31:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127c37:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127c3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c42:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127c48:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127c4e:	29 d0                	sub    %edx,%eax
f0127c50:	89 c1                	mov    %eax,%ecx
f0127c52:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127c59:	10 00 00 
f0127c5c:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0127c61:	0f b6 c0             	movzbl %al,%eax
f0127c64:	c1 e0 04             	shl    $0x4,%eax
f0127c67:	89 c2                	mov    %eax,%edx
f0127c69:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127c6f:	01 d0                	add    %edx,%eax
f0127c71:	48                   	dec    %eax
f0127c72:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127c78:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c83:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127c89:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127c8f:	29 d0                	sub    %edx,%eax
f0127c91:	01 c1                	add    %eax,%ecx
f0127c93:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127c9a:	10 00 00 
f0127c9d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127ca3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127ca8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127cae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127cb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cb9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127cbf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127cc5:	29 d0                	sub    %edx,%eax
f0127cc7:	01 c8                	add    %ecx,%eax
f0127cc9:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f0127ccf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127cd2:	39 c2                	cmp    %eax,%edx
f0127cd4:	74 18                	je     f0127cee <test_krealloc_BF+0x19c8>
			panic(
f0127cd6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127cd9:	50                   	push   %eax
f0127cda:	68 c4 16 13 f0       	push   $0xf01316c4
f0127cdf:	68 49 12 00 00       	push   $0x1249
f0127ce4:	68 be ff 12 f0       	push   $0xf012ffbe
f0127ce9:	e8 b8 84 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f0127cee:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0127cf4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0127cf7:	75 17                	jne    f0127d10 <test_krealloc_BF+0x19ea>
			panic(
f0127cf9:	83 ec 04             	sub    $0x4,%esp
f0127cfc:	68 08 17 13 f0       	push   $0xf0131708
f0127d01:	68 4c 12 00 00       	push   $0x124c
f0127d06:	68 be ff 12 f0       	push   $0xf012ffbe
f0127d0b:	e8 96 84 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f0127d10:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0127d13:	e8 98 38 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127d18:	29 c3                	sub    %eax,%ebx
f0127d1a:	89 d8                	mov    %ebx,%eax
f0127d1c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127d21:	74 17                	je     f0127d3a <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f0127d23:	83 ec 04             	sub    $0x4,%esp
f0127d26:	68 90 16 13 f0       	push   $0xf0131690
f0127d2b:	68 4f 12 00 00       	push   $0x124f
f0127d30:	68 be ff 12 f0       	push   $0xf012ffbe
f0127d35:	e8 6c 84 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f0127d3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127d3d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f0127d43:	e8 68 38 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127d48:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f0127d4b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127d51:	83 ec 08             	sub    $0x8,%esp
f0127d54:	68 00 fc 3f 00       	push   $0x3ffc00
f0127d59:	50                   	push   %eax
f0127d5a:	e8 4b ef fd ff       	call   f0106caa <krealloc>
f0127d5f:	83 c4 10             	add    $0x10,%esp
f0127d62:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127d65:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127d68:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0127d6d:	77 17                	ja     f0127d86 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127d6f:	83 ec 04             	sub    $0x4,%esp
f0127d72:	68 20 12 13 f0       	push   $0xf0131220
f0127d77:	68 58 12 00 00       	push   $0x1258
f0127d7c:	68 be ff 12 f0       	push   $0xf012ffbe
f0127d81:	e8 20 84 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f0127d86:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127d8c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0127d8f:	75 17                	jne    f0127da8 <test_krealloc_BF+0x1a82>
			panic(
f0127d91:	83 ec 04             	sub    $0x4,%esp
f0127d94:	68 08 17 13 f0       	push   $0xf0131708
f0127d99:	68 5b 12 00 00       	push   $0x125b
f0127d9e:	68 be ff 12 f0       	push   $0xf012ffbe
f0127da3:	e8 fe 83 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega)
f0127da8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127daf:	10 00 00 
f0127db2:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0127db7:	0f b6 d0             	movzbl %al,%edx
f0127dba:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127dc0:	01 d0                	add    %edx,%eax
f0127dc2:	48                   	dec    %eax
f0127dc3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127dc9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127dcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dd4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127dda:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127de0:	29 d0                	sub    %edx,%eax
f0127de2:	89 c1                	mov    %eax,%ecx
f0127de4:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0127deb:	10 00 00 
f0127dee:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0127df3:	0f b6 c0             	movzbl %al,%eax
f0127df6:	c1 e0 04             	shl    $0x4,%eax
f0127df9:	89 c2                	mov    %eax,%edx
f0127dfb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127e01:	01 d0                	add    %edx,%eax
f0127e03:	48                   	dec    %eax
f0127e04:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0127e0a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e15:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0127e1b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127e21:	29 d0                	sub    %edx,%eax
f0127e23:	01 c1                	add    %eax,%ecx
f0127e25:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0127e2c:	10 00 00 
f0127e2f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127e35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e3a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0127e40:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e4b:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0127e51:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127e57:	29 d0                	sub    %edx,%eax
f0127e59:	01 c8                	add    %ecx,%eax
f0127e5b:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0127e61:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127e64:	39 c2                	cmp    %eax,%edx
f0127e66:	74 17                	je     f0127e7f <test_krealloc_BF+0x1b59>
					panic("krealloc: Wrong start address for allocated space");
f0127e68:	83 ec 04             	sub    $0x4,%esp
f0127e6b:	68 5c 12 13 f0       	push   $0xf013125c
f0127e70:	68 5d 12 00 00       	push   $0x125d
f0127e75:	68 be ff 12 f0       	push   $0xf012ffbe
f0127e7a:	e8 27 83 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f0127e7f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0127e82:	e8 29 37 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127e87:	29 c3                	sub    %eax,%ebx
f0127e89:	89 d8                	mov    %ebx,%eax
f0127e8b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127e90:	74 17                	je     f0127ea9 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f0127e92:	83 ec 04             	sub    $0x4,%esp
f0127e95:	68 90 16 13 f0       	push   $0xf0131690
f0127e9a:	68 61 12 00 00       	push   $0x1261
f0127e9f:	68 be ff 12 f0       	push   $0xf012ffbe
f0127ea4:	e8 fd 82 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f0127ea9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127eac:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f0127eb2:	e8 f9 36 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127eb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f0127eba:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127ec0:	83 ec 08             	sub    $0x8,%esp
f0127ec3:	68 00 fc 3f 01       	push   $0x13ffc00
f0127ec8:	50                   	push   %eax
f0127ec9:	e8 dc ed fd ff       	call   f0106caa <krealloc>
f0127ece:	83 c4 10             	add    $0x10,%esp
f0127ed1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0127ed4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127ed7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0127edc:	77 17                	ja     f0127ef5 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f0127ede:	83 ec 04             	sub    $0x4,%esp
f0127ee1:	68 20 12 13 f0       	push   $0xf0131220
f0127ee6:	68 68 12 00 00       	push   $0x1268
f0127eeb:	68 be ff 12 f0       	push   $0xf012ffbe
f0127ef0:	e8 b1 82 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f0127ef5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127efb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0127efe:	75 17                	jne    f0127f17 <test_krealloc_BF+0x1bf1>
			panic(
f0127f00:	83 ec 04             	sub    $0x4,%esp
f0127f03:	68 08 17 13 f0       	push   $0xf0131708
f0127f08:	68 6b 12 00 00       	push   $0x126b
f0127f0d:	68 be ff 12 f0       	push   $0xf012ffbe
f0127f12:	e8 8f 82 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f0127f17:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0127f1e:	10 00 00 
f0127f21:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0127f26:	0f b6 d0             	movzbl %al,%edx
f0127f29:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127f2f:	01 d0                	add    %edx,%eax
f0127f31:	48                   	dec    %eax
f0127f32:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0127f38:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0127f3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f43:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0127f49:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0127f4f:	29 d0                	sub    %edx,%eax
f0127f51:	89 c1                	mov    %eax,%ecx
f0127f53:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0127f5a:	10 00 00 
f0127f5d:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0127f62:	0f b6 c0             	movzbl %al,%eax
f0127f65:	c1 e0 04             	shl    $0x4,%eax
f0127f68:	89 c2                	mov    %eax,%edx
f0127f6a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0127f70:	01 d0                	add    %edx,%eax
f0127f72:	48                   	dec    %eax
f0127f73:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0127f79:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0127f7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f84:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0127f8a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0127f90:	29 d0                	sub    %edx,%eax
f0127f92:	01 c1                	add    %eax,%ecx
f0127f94:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0127f9b:	10 00 00 
f0127f9e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0127fa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127fa9:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0127faf:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0127fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fba:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0127fc0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0127fc6:	29 d0                	sub    %edx,%eax
f0127fc8:	01 c8                	add    %ecx,%eax
f0127fca:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f0127fd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127fd3:	39 c2                	cmp    %eax,%edx
f0127fd5:	74 17                	je     f0127fee <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space");
f0127fd7:	83 ec 04             	sub    $0x4,%esp
f0127fda:	68 8c 17 13 f0       	push   $0xf013178c
f0127fdf:	68 6d 12 00 00       	push   $0x126d
f0127fe4:	68 be ff 12 f0       	push   $0xf012ffbe
f0127fe9:	e8 b8 81 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f0127fee:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0127ff1:	e8 ba 35 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0127ff6:	29 c3                	sub    %eax,%ebx
f0127ff8:	89 d8                	mov    %ebx,%eax
f0127ffa:	3d 00 10 00 00       	cmp    $0x1000,%eax
f0127fff:	74 17                	je     f0128018 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f0128001:	83 ec 04             	sub    $0x4,%esp
f0128004:	68 90 16 13 f0       	push   $0xf0131690
f0128009:	68 70 12 00 00       	push   $0x1270
f012800e:	68 be ff 12 f0       	push   $0xf012ffbe
f0128013:	e8 8e 81 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f0128018:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012801b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f0128021:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128027:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012802d:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0128034:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f0128037:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012803e:	eb 21                	jmp    f0128061 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f0128040:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0128046:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f0128049:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012804f:	01 c8                	add    %ecx,%eax
f0128051:	8a 00                	mov    (%eax),%al
f0128053:	0f be c0             	movsbl %al,%eax
f0128056:	01 d0                	add    %edx,%eax
f0128058:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012805e:	ff 45 d8             	incl   -0x28(%ebp)
f0128061:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128067:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012806a:	7d d4                	jge    f0128040 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012806c:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0128072:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f0128078:	42                   	inc    %edx
f0128079:	01 d2                	add    %edx,%edx
f012807b:	39 d0                	cmp    %edx,%eax
f012807d:	74 17                	je     f0128096 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012807f:	83 ec 04             	sub    $0x4,%esp
f0128082:	68 c0 17 13 f0       	push   $0xf01317c0
f0128087:	68 7e 12 00 00       	push   $0x127e
f012808c:	68 be ff 12 f0       	push   $0xf012ffbe
f0128091:	e8 10 81 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0128096:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012809c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f01280a2:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01280a9:	00 00 00 
		sums[1] = 0;
f01280ac:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f01280b3:	00 00 00 
		sums[2] = 0;
f01280b6:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f01280bd:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f01280c0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01280c7:	eb 70                	jmp    f0128139 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f01280c9:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01280cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01280d2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01280d9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01280df:	01 c8                	add    %ecx,%eax
f01280e1:	8a 00                	mov    (%eax),%al
f01280e3:	0f be c0             	movsbl %al,%eax
f01280e6:	01 d0                	add    %edx,%eax
f01280e8:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f01280ee:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01280f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01280f7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01280fe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0128104:	01 c8                	add    %ecx,%eax
f0128106:	66 8b 40 02          	mov    0x2(%eax),%ax
f012810a:	98                   	cwtl   
f012810b:	01 d0                	add    %edx,%eax
f012810d:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f0128113:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0128119:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012811c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0128123:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0128129:	01 c8                	add    %ecx,%eax
f012812b:	8b 40 04             	mov    0x4(%eax),%eax
f012812e:	01 d0                	add    %edx,%eax
f0128130:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f0128136:	ff 45 d8             	incl   -0x28(%ebp)
f0128139:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012813f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128142:	7d 85                	jge    f01280c9 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f0128144:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012814a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128150:	8d 50 01             	lea    0x1(%eax),%edx
f0128153:	89 d0                	mov    %edx,%eax
f0128155:	01 c0                	add    %eax,%eax
f0128157:	01 d0                	add    %edx,%eax
f0128159:	01 c0                	add    %eax,%eax
f012815b:	01 d0                	add    %edx,%eax
f012815d:	39 c1                	cmp    %eax,%ecx
f012815f:	75 3a                	jne    f012819b <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f0128161:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f0128167:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012816d:	8d 50 01             	lea    0x1(%eax),%edx
f0128170:	89 d0                	mov    %edx,%eax
f0128172:	01 c0                	add    %eax,%eax
f0128174:	01 d0                	add    %edx,%eax
f0128176:	01 c0                	add    %eax,%eax
f0128178:	01 d0                	add    %edx,%eax
f012817a:	39 c1                	cmp    %eax,%ecx
f012817c:	75 1d                	jne    f012819b <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012817e:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f0128184:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012818a:	8d 50 01             	lea    0x1(%eax),%edx
f012818d:	89 d0                	mov    %edx,%eax
f012818f:	01 c0                	add    %eax,%eax
f0128191:	01 d0                	add    %edx,%eax
f0128193:	01 c0                	add    %eax,%eax
f0128195:	01 d0                	add    %edx,%eax
f0128197:	39 c1                	cmp    %eax,%ecx
f0128199:	74 17                	je     f01281b2 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012819b:	83 ec 04             	sub    $0x4,%esp
f012819e:	68 c0 17 13 f0       	push   $0xf01317c0
f01281a3:	68 90 12 00 00       	push   $0x1290
f01281a8:	68 be ff 12 f0       	push   $0xf012ffbe
f01281ad:	e8 f4 7f fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f01281b2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01281b8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f01281be:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01281c5:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f01281c8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01281cf:	eb 24                	jmp    f01281f5 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f01281d1:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01281d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01281da:	01 c0                	add    %eax,%eax
f01281dc:	89 c1                	mov    %eax,%ecx
f01281de:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01281e4:	01 c8                	add    %ecx,%eax
f01281e6:	66 8b 00             	mov    (%eax),%ax
f01281e9:	98                   	cwtl   
f01281ea:	01 d0                	add    %edx,%eax
f01281ec:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f01281f2:	ff 45 d8             	incl   -0x28(%ebp)
f01281f5:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01281fb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01281fe:	7d d1                	jge    f01281d1 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f0128200:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0128206:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012820c:	8d 48 01             	lea    0x1(%eax),%ecx
f012820f:	89 c8                	mov    %ecx,%eax
f0128211:	c1 e0 02             	shl    $0x2,%eax
f0128214:	01 c8                	add    %ecx,%eax
f0128216:	39 c2                	cmp    %eax,%edx
f0128218:	74 17                	je     f0128231 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012821a:	83 ec 04             	sub    $0x4,%esp
f012821d:	68 c0 17 13 f0       	push   $0xf01317c0
f0128222:	68 9a 12 00 00       	push   $0x129a
f0128227:	68 be ff 12 f0       	push   $0xf012ffbe
f012822c:	e8 75 7f fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f0128231:	e8 7a 33 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0128236:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0128239:	e8 66 b2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012823e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f0128244:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012824a:	83 ec 08             	sub    $0x8,%esp
f012824d:	6a 00                	push   $0x0
f012824f:	50                   	push   %eax
f0128250:	e8 55 ea fd ff       	call   f0106caa <krealloc>
f0128255:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f0128258:	e8 47 b2 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f012825d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0128263:	74 17                	je     f012827c <test_krealloc_BF+0x1f56>
			panic(
f0128265:	83 ec 04             	sub    $0x4,%esp
f0128268:	68 d8 ff 12 f0       	push   $0xf012ffd8
f012826d:	68 a2 12 00 00       	push   $0x12a2
f0128272:	68 be ff 12 f0       	push   $0xf012ffbe
f0128277:	e8 2a 7f fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012827c:	e8 2f 33 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f0128281:	89 c2                	mov    %eax,%edx
f0128283:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128286:	29 c2                	sub    %eax,%edx
f0128288:	89 d0                	mov    %edx,%eax
f012828a:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012828f:	74 17                	je     f01282a8 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f0128291:	83 ec 04             	sub    $0x4,%esp
f0128294:	68 50 14 13 f0       	push   $0xf0131450
f0128299:	68 a4 12 00 00       	push   $0x12a4
f012829e:	68 be ff 12 f0       	push   $0xf012ffbe
f01282a3:	e8 fe 7e fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f01282a8:	e8 03 33 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01282ad:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01282b0:	e8 ef b1 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01282b5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f01282bb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01282c1:	83 ec 0c             	sub    $0xc,%esp
f01282c4:	50                   	push   %eax
f01282c5:	e8 44 e9 fd ff       	call   f0106c0e <kfree>
f01282ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01282cd:	e8 d2 b1 fd ff       	call   f01034a4 <pf_calculate_free_frames>
f01282d2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01282d8:	74 17                	je     f01282f1 <test_krealloc_BF+0x1fcb>
			panic(
f01282da:	83 ec 04             	sub    $0x4,%esp
f01282dd:	68 d8 ff 12 f0       	push   $0xf012ffd8
f01282e2:	68 ac 12 00 00       	push   $0x12ac
f01282e7:	68 be ff 12 f0       	push   $0xf012ffbe
f01282ec:	e8 b5 7e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f01282f1:	e8 ba 32 fe ff       	call   f010b5b0 <sys_calculate_free_frames>
f01282f6:	89 c2                	mov    %eax,%edx
f01282f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01282fb:	29 c2                	sub    %eax,%edx
f01282fd:	89 d0                	mov    %edx,%eax
f01282ff:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128304:	74 17                	je     f012831d <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0128306:	83 ec 04             	sub    $0x4,%esp
f0128309:	68 50 14 13 f0       	push   $0xf0131450
f012830e:	68 ae 12 00 00       	push   $0x12ae
f0128313:	68 be ff 12 f0       	push   $0xf012ffbe
f0128318:	e8 89 7e fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012831d:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f0128324:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012832b:	eb 48                	jmp    f0128375 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012832d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0128330:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0128335:	83 ec 04             	sub    $0x4,%esp
f0128338:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012833e:	51                   	push   %ecx
f012833f:	52                   	push   %edx
f0128340:	50                   	push   %eax
f0128341:	e8 3b de fd ff       	call   f0106181 <get_page_table>
f0128346:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f0128349:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012834f:	85 c0                	test   %eax,%eax
f0128351:	75 17                	jne    f012836a <test_krealloc_BF+0x2044>
					panic(
f0128353:	83 ec 04             	sub    $0x4,%esp
f0128356:	68 c0 08 13 f0       	push   $0xf01308c0
f012835b:	68 bb 12 00 00       	push   $0x12bb
f0128360:	68 be ff 12 f0       	push   $0xf012ffbe
f0128365:	e8 3c 7e fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012836a:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f0128371:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f0128375:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0128379:	78 b2                	js     f012832d <test_krealloc_BF+0x2007>
f012837b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012837f:	7f 09                	jg     f012838a <test_krealloc_BF+0x2064>
f0128381:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0128388:	76 a3                	jbe    f012832d <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012838a:	83 ec 0c             	sub    $0xc,%esp
f012838d:	68 a2 01 13 f0       	push   $0xf01301a2
f0128392:	e8 96 88 fd ff       	call   f0100c2d <cprintf>
f0128397:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012839a:	83 ec 0c             	sub    $0xc,%esp
f012839d:	68 28 18 13 f0       	push   $0xf0131828
f01283a2:	e8 86 88 fd ff       	call   f0100c2d <cprintf>
f01283a7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01283aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01283af:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01283b2:	5b                   	pop    %ebx
f01283b3:	5f                   	pop    %edi
f01283b4:	5d                   	pop    %ebp
f01283b5:	c3                   	ret    

f01283b6 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f01283b6:	55                   	push   %ebp
f01283b7:	89 e5                	mov    %esp,%ebp
f01283b9:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f01283bc:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01283c0:	77 07                	ja     f01283c9 <nearest_pow2_ceil+0x13>
f01283c2:	b8 01 00 00 00       	mov    $0x1,%eax
f01283c7:	eb 20                	jmp    f01283e9 <nearest_pow2_ceil+0x33>
    int power = 2;
f01283c9:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01283d0:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01283d3:	eb 08                	jmp    f01283dd <nearest_pow2_ceil+0x27>
    	power <<= 1;
f01283d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01283d8:	01 c0                	add    %eax,%eax
f01283da:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f01283dd:	d1 6d 08             	shrl   0x8(%ebp)
f01283e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01283e4:	75 ef                	jne    f01283d5 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f01283e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01283e9:	c9                   	leave  
f01283ea:	c3                   	ret    

f01283eb <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f01283eb:	55                   	push   %ebp
f01283ec:	89 e5                	mov    %esp,%ebp
f01283ee:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f01283f1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01283f5:	77 07                	ja     f01283fe <log2_ceil+0x13>
f01283f7:	b8 01 00 00 00       	mov    $0x1,%eax
f01283fc:	eb 1b                	jmp    f0128419 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f01283fe:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0128405:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0128408:	eb 03                	jmp    f012840d <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012840a:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012840d:	d1 6d 08             	shrl   0x8(%ebp)
f0128410:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0128414:	75 f4                	jne    f012840a <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f0128416:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0128419:	c9                   	leave  
f012841a:	c3                   	ret    

f012841b <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012841b:	55                   	push   %ebp
f012841c:	89 e5                	mov    %esp,%ebp
f012841e:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f0128421:	8b 45 08             	mov    0x8(%ebp),%eax
f0128424:	8b 00                	mov    (%eax),%eax
f0128426:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0128429:	8b 45 08             	mov    0x8(%ebp),%eax
f012842c:	8b 00                	mov    (%eax),%eax
f012842e:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0128431:	eb 52                	jmp    f0128485 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0128433:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128436:	8b 00                	mov    (%eax),%eax
f0128438:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012843b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012843e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128441:	75 12                	jne    f0128455 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0128443:	83 ec 0c             	sub    $0xc,%esp
f0128446:	68 68 18 13 f0       	push   $0xf0131868
f012844b:	e8 dd 87 fd ff       	call   f0100c2d <cprintf>
f0128450:	83 c4 10             	add    $0x10,%esp
			break;
f0128453:	eb 3f                	jmp    f0128494 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0128455:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0128459:	74 38                	je     f0128493 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012845b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012845e:	8b 00                	mov    (%eax),%eax
f0128460:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0128463:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128466:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128469:	75 12                	jne    f012847d <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012846b:	83 ec 0c             	sub    $0xc,%esp
f012846e:	68 84 18 13 f0       	push   $0xf0131884
f0128473:	e8 b5 87 fd ff       	call   f0100c2d <cprintf>
f0128478:	83 c4 10             	add    $0x10,%esp
			break;
f012847b:	eb 17                	jmp    f0128494 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012847d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128480:	8b 00                	mov    (%eax),%eax
f0128482:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0128485:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0128489:	74 09                	je     f0128494 <detect_loop_in_FrameInfo_list+0x79>
f012848b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012848f:	75 a2                	jne    f0128433 <detect_loop_in_FrameInfo_list+0x18>
f0128491:	eb 01                	jmp    f0128494 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0128493:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0128494:	83 ec 0c             	sub    $0xc,%esp
f0128497:	68 9b 18 13 f0       	push   $0xf013189b
f012849c:	e8 8c 87 fd ff       	call   f0100c2d <cprintf>
f01284a1:	83 c4 10             	add    $0x10,%esp
}
f01284a4:	90                   	nop
f01284a5:	c9                   	leave  
f01284a6:	c3                   	ret    

f01284a7 <scarce_memory>:

void scarce_memory()
{
f01284a7:	55                   	push   %ebp
f01284a8:	89 e5                	mov    %esp,%ebp
f01284aa:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f01284ad:	a1 a0 1f 6d f0       	mov    0xf06d1fa0,%eax
f01284b2:	ba 64 00 00 00       	mov    $0x64,%edx
f01284b7:	29 c2                	sub    %eax,%edx
f01284b9:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01284be:	0f af c2             	imul   %edx,%eax
f01284c1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01284c6:	f7 e2                	mul    %edx
f01284c8:	89 d0                	mov    %edx,%eax
f01284ca:	c1 e8 05             	shr    $0x5,%eax
f01284cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f01284d0:	a1 a0 1f 6d f0       	mov    0xf06d1fa0,%eax
f01284d5:	ba 64 00 00 00       	mov    $0x64,%edx
f01284da:	29 c2                	sub    %eax,%edx
f01284dc:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f01284e1:	89 d1                	mov    %edx,%ecx
f01284e3:	0f af c8             	imul   %eax,%ecx
f01284e6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01284eb:	f7 e1                	mul    %ecx
f01284ed:	c1 ea 05             	shr    $0x5,%edx
f01284f0:	89 d0                	mov    %edx,%eax
f01284f2:	c1 e0 02             	shl    $0x2,%eax
f01284f5:	01 d0                	add    %edx,%eax
f01284f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01284fe:	01 d0                	add    %edx,%eax
f0128500:	c1 e0 02             	shl    $0x2,%eax
f0128503:	29 c1                	sub    %eax,%ecx
f0128505:	89 ca                	mov    %ecx,%edx
f0128507:	85 d2                	test   %edx,%edx
f0128509:	74 03                	je     f012850e <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012850b:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012850e:	8b 15 b0 43 6d f0    	mov    0xf06d43b0,%edx
f0128514:	a1 c4 43 6d f0       	mov    0xf06d43c4,%eax
f0128519:	29 c2                	sub    %eax,%edx
f012851b:	89 d0                	mov    %edx,%eax
f012851d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0128520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128523:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0128526:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f0128529:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0128530:	eb 12                	jmp    f0128544 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f0128532:	83 ec 0c             	sub    $0xc,%esp
f0128535:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0128538:	50                   	push   %eax
f0128539:	e8 84 da fd ff       	call   f0105fc2 <allocate_frame>
f012853e:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0128541:	ff 45 f0             	incl   -0x10(%ebp)
f0128544:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128547:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012854a:	76 e6                	jbe    f0128532 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012854c:	90                   	nop
f012854d:	c9                   	leave  
f012854e:	c3                   	ret    

f012854f <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012854f:	55                   	push   %ebp
f0128550:	89 e5                	mov    %esp,%ebp
f0128552:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0128555:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012855c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0128563:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012856a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012856e:	0f 85 d3 01 00 00    	jne    f0128747 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0128574:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012857b:	e9 e1 00 00 00       	jmp    f0128661 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f0128580:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0128587:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012858a:	c1 e0 04             	shl    $0x4,%eax
f012858d:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0128592:	8b 00                	mov    (%eax),%eax
f0128594:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0128597:	e9 82 00 00 00       	jmp    f012861e <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012859c:	83 ec 0c             	sub    $0xc,%esp
f012859f:	ff 75 e4             	pushl  -0x1c(%ebp)
f01285a2:	e8 1b e8 fd ff       	call   f0106dc2 <env_page_ws_get_size>
f01285a7:	83 c4 10             	add    $0x10,%esp
f01285aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01285ad:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01285b2:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f01285b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01285bb:	0f af c2             	imul   %edx,%eax
f01285be:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01285c3:	f7 e2                	mul    %edx
f01285c5:	89 d0                	mov    %edx,%eax
f01285c7:	c1 e8 05             	shr    $0x5,%eax
f01285ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01285cd:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01285d2:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f01285d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01285db:	89 d1                	mov    %edx,%ecx
f01285dd:	0f af c8             	imul   %eax,%ecx
f01285e0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01285e5:	f7 e1                	mul    %ecx
f01285e7:	c1 ea 05             	shr    $0x5,%edx
f01285ea:	89 d0                	mov    %edx,%eax
f01285ec:	c1 e0 02             	shl    $0x2,%eax
f01285ef:	01 d0                	add    %edx,%eax
f01285f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01285f8:	01 d0                	add    %edx,%eax
f01285fa:	c1 e0 02             	shl    $0x2,%eax
f01285fd:	29 c1                	sub    %eax,%ecx
f01285ff:	89 ca                	mov    %ecx,%edx
f0128601:	85 d2                	test   %edx,%edx
f0128603:	74 03                	je     f0128608 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f0128605:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0128608:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012860b:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012860e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0128611:	c1 e0 04             	shl    $0x4,%eax
f0128614:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f0128619:	8b 00                	mov    (%eax),%eax
f012861b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012861e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0128622:	74 08                	je     f012862c <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f0128624:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0128627:	8b 40 44             	mov    0x44(%eax),%eax
f012862a:	eb 05                	jmp    f0128631 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012862c:	b8 00 00 00 00       	mov    $0x0,%eax
f0128631:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0128634:	c1 e2 04             	shl    $0x4,%edx
f0128637:	81 c2 54 c0 66 f0    	add    $0xf066c054,%edx
f012863d:	89 02                	mov    %eax,(%edx)
f012863f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0128642:	c1 e0 04             	shl    $0x4,%eax
f0128645:	05 54 c0 66 f0       	add    $0xf066c054,%eax
f012864a:	8b 00                	mov    (%eax),%eax
f012864c:	85 c0                	test   %eax,%eax
f012864e:	0f 85 48 ff ff ff    	jne    f012859c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f0128654:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0128658:	0f 85 3e ff ff ff    	jne    f012859c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012865e:	ff 45 e8             	incl   -0x18(%ebp)
f0128661:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0128666:	0f b6 c0             	movzbl %al,%eax
f0128669:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012866c:	0f 8f 0e ff ff ff    	jg     f0128580 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0128672:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0128679:	a1 a4 1f 6d f0       	mov    0xf06d1fa4,%eax
f012867e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0128681:	eb 19                	jmp    f012869c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0128683:	83 ec 0c             	sub    $0xc,%esp
f0128686:	ff 75 dc             	pushl  -0x24(%ebp)
f0128689:	e8 34 e7 fd ff       	call   f0106dc2 <env_page_ws_get_size>
f012868e:	83 c4 10             	add    $0x10,%esp
f0128691:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0128694:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f0128699:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012869c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01286a0:	74 08                	je     f01286aa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f01286a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01286a5:	8b 40 44             	mov    0x44(%eax),%eax
f01286a8:	eb 05                	jmp    f01286af <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f01286aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01286af:	a3 ac 1f 6d f0       	mov    %eax,0xf06d1fac
f01286b4:	a1 ac 1f 6d f0       	mov    0xf06d1fac,%eax
f01286b9:	85 c0                	test   %eax,%eax
f01286bb:	75 c6                	jne    f0128683 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f01286bd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01286c1:	75 c0                	jne    f0128683 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f01286c3:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01286c8:	85 c0                	test   %eax,%eax
f01286ca:	0f 84 ec 00 00 00    	je     f01287bc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f01286d0:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01286d5:	83 ec 0c             	sub    $0xc,%esp
f01286d8:	50                   	push   %eax
f01286d9:	e8 e4 e6 fd ff       	call   f0106dc2 <env_page_ws_get_size>
f01286de:	83 c4 10             	add    $0x10,%esp
f01286e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01286e4:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f01286e9:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f01286ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01286f2:	0f af c2             	imul   %edx,%eax
f01286f5:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01286fa:	f7 e2                	mul    %edx
f01286fc:	89 d0                	mov    %edx,%eax
f01286fe:	c1 e8 05             	shr    $0x5,%eax
f0128701:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0128704:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128709:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012870f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128712:	89 d1                	mov    %edx,%ecx
f0128714:	0f af c8             	imul   %eax,%ecx
f0128717:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012871c:	f7 e1                	mul    %ecx
f012871e:	c1 ea 05             	shr    $0x5,%edx
f0128721:	89 d0                	mov    %edx,%eax
f0128723:	c1 e0 02             	shl    $0x2,%eax
f0128726:	01 d0                	add    %edx,%eax
f0128728:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012872f:	01 d0                	add    %edx,%eax
f0128731:	c1 e0 02             	shl    $0x2,%eax
f0128734:	29 c1                	sub    %eax,%ecx
f0128736:	89 ca                	mov    %ecx,%edx
f0128738:	85 d2                	test   %edx,%edx
f012873a:	74 03                	je     f012873f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012873c:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012873f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0128742:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0128745:	eb 75                	jmp    f01287bc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0128747:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f012874c:	83 ec 0c             	sub    $0xc,%esp
f012874f:	50                   	push   %eax
f0128750:	e8 6d e6 fd ff       	call   f0106dc2 <env_page_ws_get_size>
f0128755:	83 c4 10             	add    $0x10,%esp
f0128758:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012875b:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128760:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f0128766:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128769:	0f af c2             	imul   %edx,%eax
f012876c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0128771:	f7 e2                	mul    %edx
f0128773:	89 d0                	mov    %edx,%eax
f0128775:	c1 e8 05             	shr    $0x5,%eax
f0128778:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012877b:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128780:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f0128786:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128789:	89 d1                	mov    %edx,%ecx
f012878b:	0f af c8             	imul   %eax,%ecx
f012878e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0128793:	f7 e1                	mul    %ecx
f0128795:	c1 ea 05             	shr    $0x5,%edx
f0128798:	89 d0                	mov    %edx,%eax
f012879a:	c1 e0 02             	shl    $0x2,%eax
f012879d:	01 d0                	add    %edx,%eax
f012879f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01287a6:	01 d0                	add    %edx,%eax
f01287a8:	c1 e0 02             	shl    $0x2,%eax
f01287ab:	29 c1                	sub    %eax,%ecx
f01287ad:	89 ca                	mov    %ecx,%edx
f01287af:	85 d2                	test   %edx,%edx
f01287b1:	74 03                	je     f01287b6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f01287b3:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01287b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01287b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f01287bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01287bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01287c2:	01 c2                	add    %eax,%edx
f01287c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01287c7:	01 d0                	add    %edx,%eax
}
f01287c9:	c9                   	leave  
f01287ca:	c3                   	ret    

f01287cb <schenv>:


void schenv()
{
f01287cb:	55                   	push   %ebp
f01287cc:	89 e5                	mov    %esp,%ebp
f01287ce:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f01287d1:	c6 05 44 44 6d f0 00 	movb   $0x0,0xf06d4444
	__ne = NULL;
f01287d8:	c7 05 d4 43 6d f0 00 	movl   $0x0,0xf06d43d4
f01287df:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f01287e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287e9:	eb 3a                	jmp    f0128825 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f01287eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01287ee:	c1 e0 04             	shl    $0x4,%eax
f01287f1:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f01287f6:	83 ec 0c             	sub    $0xc,%esp
f01287f9:	50                   	push   %eax
f01287fa:	e8 b8 b3 fd ff       	call   f0103bb7 <queue_size>
f01287ff:	83 c4 10             	add    $0x10,%esp
f0128802:	85 c0                	test   %eax,%eax
f0128804:	74 1c                	je     f0128822 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0128806:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128809:	c1 e0 04             	shl    $0x4,%eax
f012880c:	05 50 c0 66 f0       	add    $0xf066c050,%eax
f0128811:	8b 00                	mov    (%eax),%eax
f0128813:	a3 d4 43 6d f0       	mov    %eax,0xf06d43d4
			__nl = i;
f0128818:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012881b:	a2 44 44 6d f0       	mov    %al,0xf06d4444
			break;
f0128820:	eb 10                	jmp    f0128832 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0128822:	ff 45 f4             	incl   -0xc(%ebp)
f0128825:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f012882a:	0f b6 c0             	movzbl %al,%eax
f012882d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128830:	7f b9                	jg     f01287eb <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0128832:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128837:	85 c0                	test   %eax,%eax
f0128839:	0f 84 86 00 00 00    	je     f01288c5 <schenv+0xfa>
	{
		if (__ne != NULL)
f012883f:	a1 d4 43 6d f0       	mov    0xf06d43d4,%eax
f0128844:	85 c0                	test   %eax,%eax
f0128846:	74 4b                	je     f0128893 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f0128848:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f012884d:	0f b6 c0             	movzbl %al,%eax
f0128850:	8d 50 01             	lea    0x1(%eax),%edx
f0128853:	a0 44 44 6d f0       	mov    0xf06d4444,%al
f0128858:	0f b6 c0             	movzbl %al,%eax
f012885b:	39 c2                	cmp    %eax,%edx
f012885d:	7d 66                	jge    f01288c5 <schenv+0xfa>
			{
				__ne = curenv;
f012885f:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128864:	a3 d4 43 6d f0       	mov    %eax,0xf06d43d4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0128869:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f012886e:	0f b6 c0             	movzbl %al,%eax
f0128871:	8a 15 1c 44 6d f0    	mov    0xf06d441c,%dl
f0128877:	0f b6 d2             	movzbl %dl,%edx
f012887a:	4a                   	dec    %edx
f012887b:	39 d0                	cmp    %edx,%eax
f012887d:	7d 08                	jge    f0128887 <schenv+0xbc>
f012887f:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f0128884:	40                   	inc    %eax
f0128885:	eb 05                	jmp    f012888c <schenv+0xc1>
f0128887:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f012888c:	a2 44 44 6d f0       	mov    %al,0xf06d4444
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0128891:	eb 32                	jmp    f01288c5 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0128893:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128898:	a3 d4 43 6d f0       	mov    %eax,0xf06d43d4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012889d:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f01288a2:	0f b6 c0             	movzbl %al,%eax
f01288a5:	8a 15 1c 44 6d f0    	mov    0xf06d441c,%dl
f01288ab:	0f b6 d2             	movzbl %dl,%edx
f01288ae:	4a                   	dec    %edx
f01288af:	39 d0                	cmp    %edx,%eax
f01288b1:	7d 08                	jge    f01288bb <schenv+0xf0>
f01288b3:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f01288b8:	40                   	inc    %eax
f01288b9:	eb 05                	jmp    f01288c0 <schenv+0xf5>
f01288bb:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f01288c0:	a2 44 44 6d f0       	mov    %al,0xf06d4444
		}
	}
}
f01288c5:	90                   	nop
f01288c6:	c9                   	leave  
f01288c7:	c3                   	ret    

f01288c8 <chksch>:

void chksch(uint8 onoff)
{
f01288c8:	55                   	push   %ebp
f01288c9:	89 e5                	mov    %esp,%ebp
f01288cb:	83 ec 04             	sub    $0x4,%esp
f01288ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01288d1:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f01288d4:	c7 05 30 44 6d f0 00 	movl   $0x0,0xf06d4430
f01288db:	00 00 00 
	__ne = NULL;
f01288de:	c7 05 d4 43 6d f0 00 	movl   $0x0,0xf06d43d4
f01288e5:	00 00 00 
	__pl = 0 ;
f01288e8:	c6 05 44 c0 66 f0 00 	movb   $0x0,0xf066c044
	__nl = 0 ;
f01288ef:	c6 05 44 44 6d f0 00 	movb   $0x0,0xf06d4444
	__chkstatus = onoff;
f01288f6:	8a 45 fc             	mov    -0x4(%ebp),%al
f01288f9:	a2 d0 43 6d f0       	mov    %al,0xf06d43d0
}
f01288fe:	90                   	nop
f01288ff:	c9                   	leave  
f0128900:	c3                   	ret    

f0128901 <chk1>:
void chk1()
{
f0128901:	55                   	push   %ebp
f0128902:	89 e5                	mov    %esp,%ebp
f0128904:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0128907:	a0 d0 43 6d f0       	mov    0xf06d43d0,%al
f012890c:	84 c0                	test   %al,%al
f012890e:	74 2b                	je     f012893b <chk1+0x3a>
		return ;
	__pe = curenv;
f0128910:	a1 74 46 64 f0       	mov    0xf0644674,%eax
f0128915:	a3 30 44 6d f0       	mov    %eax,0xf06d4430
	__pl = __nl ;
f012891a:	a0 44 44 6d f0       	mov    0xf06d4444,%al
f012891f:	a2 44 c0 66 f0       	mov    %al,0xf066c044
	if (__pe == NULL)
f0128924:	a1 30 44 6d f0       	mov    0xf06d4430,%eax
f0128929:	85 c0                	test   %eax,%eax
f012892b:	75 07                	jne    f0128934 <chk1+0x33>
	{
		__pl = 0;
f012892d:	c6 05 44 c0 66 f0 00 	movb   $0x0,0xf066c044
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0128934:	e8 92 fe ff ff       	call   f01287cb <schenv>
f0128939:	eb 01                	jmp    f012893c <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012893b:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012893c:	c9                   	leave  
f012893d:	c3                   	ret    

f012893e <chk2>:
void chk2(struct Env* __se)
{
f012893e:	55                   	push   %ebp
f012893f:	89 e5                	mov    %esp,%ebp
f0128941:	53                   	push   %ebx
f0128942:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0128945:	a0 d0 43 6d f0       	mov    0xf06d43d0,%al
f012894a:	84 c0                	test   %al,%al
f012894c:	0f 84 35 02 00 00    	je     f0128b87 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0128952:	a1 d4 43 6d f0       	mov    0xf06d43d4,%eax
f0128957:	39 45 08             	cmp    %eax,0x8(%ebp)
f012895a:	74 19                	je     f0128975 <chk2+0x37>
f012895c:	68 b5 18 13 f0       	push   $0xf01318b5
f0128961:	68 c2 18 13 f0       	push   $0xf01318c2
f0128966:	68 c0 00 00 00       	push   $0xc0
f012896b:	68 d7 18 13 f0       	push   $0xf01318d7
f0128970:	e8 a0 78 fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0128975:	a1 d4 43 6d f0       	mov    0xf06d43d4,%eax
f012897a:	85 c0                	test   %eax,%eax
f012897c:	0f 84 1b 01 00 00    	je     f0128a9d <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0128982:	a0 44 44 6d f0       	mov    0xf06d4444,%al
f0128987:	0f b6 c0             	movzbl %al,%eax
f012898a:	8a 80 c8 43 6d f0    	mov    -0xf92bc38(%eax),%al
f0128990:	0f b6 d8             	movzbl %al,%ebx
f0128993:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0128998:	99                   	cltd   
f0128999:	f7 fb                	idiv   %ebx
f012899b:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01289a1:	a0 44 44 6d f0       	mov    0xf06d4444,%al
f01289a6:	0f b6 c0             	movzbl %al,%eax
f01289a9:	8a 80 c8 43 6d f0    	mov    -0xf92bc38(%eax),%al
f01289af:	0f b6 d8             	movzbl %al,%ebx
f01289b2:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01289b7:	99                   	cltd   
f01289b8:	f7 fb                	idiv   %ebx
f01289ba:	89 c3                	mov    %eax,%ebx
f01289bc:	89 c8                	mov    %ecx,%eax
f01289be:	99                   	cltd   
f01289bf:	f7 fb                	idiv   %ebx
f01289c1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f01289c5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01289c9:	83 e0 01             	and    $0x1,%eax
f01289cc:	66 85 c0             	test   %ax,%ax
f01289cf:	74 07                	je     f01289d8 <chk2+0x9a>
f01289d1:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01289d5:	40                   	inc    %eax
f01289d6:	eb 04                	jmp    f01289dc <chk2+0x9e>
f01289d8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01289dc:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f01289e0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f01289e4:	89 d0                	mov    %edx,%eax
f01289e6:	c1 e0 02             	shl    $0x2,%eax
f01289e9:	01 d0                	add    %edx,%eax
f01289eb:	01 c0                	add    %eax,%eax
f01289ed:	01 d0                	add    %edx,%eax
f01289ef:	c1 e0 02             	shl    $0x2,%eax
f01289f2:	01 d0                	add    %edx,%eax
f01289f4:	01 c0                	add    %eax,%eax
f01289f6:	89 c1                	mov    %eax,%ecx
f01289f8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01289fd:	f7 e9                	imul   %ecx
f01289ff:	c1 fa 05             	sar    $0x5,%edx
f0128a02:	89 c8                	mov    %ecx,%eax
f0128a04:	c1 f8 1f             	sar    $0x1f,%eax
f0128a07:	29 c2                	sub    %eax,%edx
f0128a09:	89 d0                	mov    %edx,%eax
f0128a0b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0128a0f:	e8 74 b0 fd ff       	call   f0103a88 <kclock_read_cnt0>
f0128a14:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0128a18:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0128a1c:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0128a20:	76 0a                	jbe    f0128a2c <chk2+0xee>
f0128a22:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0128a26:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0128a2a:	76 19                	jbe    f0128a45 <chk2+0x107>
f0128a2c:	68 f0 18 13 f0       	push   $0xf01318f0
f0128a31:	68 c2 18 13 f0       	push   $0xf01318c2
f0128a36:	68 ca 00 00 00       	push   $0xca
f0128a3b:	68 d7 18 13 f0       	push   $0xf01318d7
f0128a40:	e8 d0 77 fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0128a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a4c:	eb 42                	jmp    f0128a90 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0128a4e:	a1 d4 43 6d f0       	mov    0xf06d43d4,%eax
f0128a53:	8b 40 4c             	mov    0x4c(%eax),%eax
f0128a56:	89 c2                	mov    %eax,%edx
f0128a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128a5b:	c1 e0 04             	shl    $0x4,%eax
f0128a5e:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0128a63:	83 ec 08             	sub    $0x8,%esp
f0128a66:	52                   	push   %edx
f0128a67:	50                   	push   %eax
f0128a68:	e8 1c b3 fd ff       	call   f0103d89 <find_env_in_queue>
f0128a6d:	83 c4 10             	add    $0x10,%esp
f0128a70:	85 c0                	test   %eax,%eax
f0128a72:	74 19                	je     f0128a8d <chk2+0x14f>
f0128a74:	68 14 19 13 f0       	push   $0xf0131914
f0128a79:	68 c2 18 13 f0       	push   $0xf01318c2
f0128a7e:	68 ce 00 00 00       	push   $0xce
f0128a83:	68 d7 18 13 f0       	push   $0xf01318d7
f0128a88:	e8 88 77 fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0128a8d:	ff 45 f4             	incl   -0xc(%ebp)
f0128a90:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0128a95:	0f b6 c0             	movzbl %al,%eax
f0128a98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a9b:	7f b1                	jg     f0128a4e <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0128a9d:	a1 30 44 6d f0       	mov    0xf06d4430,%eax
f0128aa2:	85 c0                	test   %eax,%eax
f0128aa4:	0f 84 de 00 00 00    	je     f0128b88 <chk2+0x24a>
f0128aaa:	8b 15 30 44 6d f0    	mov    0xf06d4430,%edx
f0128ab0:	a1 d4 43 6d f0       	mov    0xf06d43d4,%eax
f0128ab5:	39 c2                	cmp    %eax,%edx
f0128ab7:	0f 84 cb 00 00 00    	je     f0128b88 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0128abd:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f0128ac2:	0f b6 c0             	movzbl %al,%eax
f0128ac5:	8a 15 1c 44 6d f0    	mov    0xf06d441c,%dl
f0128acb:	0f b6 d2             	movzbl %dl,%edx
f0128ace:	4a                   	dec    %edx
f0128acf:	39 d0                	cmp    %edx,%eax
f0128ad1:	74 08                	je     f0128adb <chk2+0x19d>
f0128ad3:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f0128ad8:	40                   	inc    %eax
f0128ad9:	eb 05                	jmp    f0128ae0 <chk2+0x1a2>
f0128adb:	a0 44 c0 66 f0       	mov    0xf066c044,%al
f0128ae0:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0128ae3:	a1 30 44 6d f0       	mov    0xf06d4430,%eax
f0128ae8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0128aeb:	89 c2                	mov    %eax,%edx
f0128aed:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0128af1:	c1 e0 04             	shl    $0x4,%eax
f0128af4:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0128af9:	83 ec 08             	sub    $0x8,%esp
f0128afc:	52                   	push   %edx
f0128afd:	50                   	push   %eax
f0128afe:	e8 86 b2 fd ff       	call   f0103d89 <find_env_in_queue>
f0128b03:	83 c4 10             	add    $0x10,%esp
f0128b06:	85 c0                	test   %eax,%eax
f0128b08:	75 19                	jne    f0128b23 <chk2+0x1e5>
f0128b0a:	68 54 19 13 f0       	push   $0xf0131954
f0128b0f:	68 c2 18 13 f0       	push   $0xf01318c2
f0128b14:	68 d4 00 00 00       	push   $0xd4
f0128b19:	68 d7 18 13 f0       	push   $0xf01318d7
f0128b1e:	e8 f2 76 fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0128b23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0128b2a:	eb 4c                	jmp    f0128b78 <chk2+0x23a>
		{
			if (i == __tl) continue;
f0128b2c:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0128b30:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0128b33:	74 3f                	je     f0128b74 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0128b35:	a1 30 44 6d f0       	mov    0xf06d4430,%eax
f0128b3a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0128b3d:	89 c2                	mov    %eax,%edx
f0128b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128b42:	c1 e0 04             	shl    $0x4,%eax
f0128b45:	05 4c c0 66 f0       	add    $0xf066c04c,%eax
f0128b4a:	83 ec 08             	sub    $0x8,%esp
f0128b4d:	52                   	push   %edx
f0128b4e:	50                   	push   %eax
f0128b4f:	e8 35 b2 fd ff       	call   f0103d89 <find_env_in_queue>
f0128b54:	83 c4 10             	add    $0x10,%esp
f0128b57:	85 c0                	test   %eax,%eax
f0128b59:	74 1a                	je     f0128b75 <chk2+0x237>
f0128b5b:	68 98 19 13 f0       	push   $0xf0131998
f0128b60:	68 c2 18 13 f0       	push   $0xf01318c2
f0128b65:	68 d8 00 00 00       	push   $0xd8
f0128b6a:	68 d7 18 13 f0       	push   $0xf01318d7
f0128b6f:	e8 a1 76 fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0128b74:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0128b75:	ff 45 f0             	incl   -0x10(%ebp)
f0128b78:	a0 1c 44 6d f0       	mov    0xf06d441c,%al
f0128b7d:	0f b6 c0             	movzbl %al,%eax
f0128b80:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0128b83:	7f a7                	jg     f0128b2c <chk2+0x1ee>
f0128b85:	eb 01                	jmp    f0128b88 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0128b87:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0128b88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0128b8b:	c9                   	leave  
f0128b8c:	c3                   	ret    

f0128b8d <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0128b8d:	55                   	push   %ebp
f0128b8e:	89 e5                	mov    %esp,%ebp
f0128b90:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0128b93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b9a:	eb 40                	jmp    f0128bdc <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0128b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128b9f:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0128ba5:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0128baa:	83 ec 08             	sub    $0x8,%esp
f0128bad:	52                   	push   %edx
f0128bae:	50                   	push   %eax
f0128baf:	e8 92 01 00 00       	call   f0128d46 <check_va2pa>
f0128bb4:	83 c4 10             	add    $0x10,%esp
f0128bb7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128bba:	74 19                	je     f0128bd5 <check_boot_pgdir+0x48>
f0128bbc:	68 d8 19 13 f0       	push   $0xf01319d8
f0128bc1:	68 c2 18 13 f0       	push   $0xf01318c2
f0128bc6:	68 ff 00 00 00       	push   $0xff
f0128bcb:	68 d7 18 13 f0       	push   $0xf01318d7
f0128bd0:	e8 d1 75 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0128bd5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0128bdc:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f0128be3:	75 b7                	jne    f0128b9c <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0128be5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bec:	eb 74                	jmp    f0128c62 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0128bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128bf1:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0128bf7:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0128bfc:	83 ec 08             	sub    $0x8,%esp
f0128bff:	52                   	push   %edx
f0128c00:	50                   	push   %eax
f0128c01:	e8 40 01 00 00       	call   f0128d46 <check_va2pa>
f0128c06:	83 c4 10             	add    $0x10,%esp
f0128c09:	c7 45 f0 00 40 17 f0 	movl   $0xf0174000,-0x10(%ebp)
f0128c10:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0128c17:	77 17                	ja     f0128c30 <check_boot_pgdir+0xa3>
f0128c19:	ff 75 f0             	pushl  -0x10(%ebp)
f0128c1c:	68 10 1a 13 f0       	push   $0xf0131a10
f0128c21:	68 04 01 00 00       	push   $0x104
f0128c26:	68 d7 18 13 f0       	push   $0xf01318d7
f0128c2b:	e8 76 75 fd ff       	call   f01001a6 <_panic>
f0128c30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0128c33:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0128c39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c3c:	01 ca                	add    %ecx,%edx
f0128c3e:	39 d0                	cmp    %edx,%eax
f0128c40:	74 19                	je     f0128c5b <check_boot_pgdir+0xce>
f0128c42:	68 44 1a 13 f0       	push   $0xf0131a44
f0128c47:	68 c2 18 13 f0       	push   $0xf01318c2
f0128c4c:	68 04 01 00 00       	push   $0x104
f0128c51:	68 d7 18 13 f0       	push   $0xf01318d7
f0128c56:	e8 4b 75 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0128c5b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0128c62:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0128c69:	76 83                	jbe    f0128bee <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0128c6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c72:	e9 af 00 00 00       	jmp    f0128d26 <check_boot_pgdir+0x199>
		switch (i) {
f0128c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128c7a:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0128c7f:	74 11                	je     f0128c92 <check_boot_pgdir+0x105>
f0128c81:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0128c86:	72 36                	jb     f0128cbe <check_boot_pgdir+0x131>
f0128c88:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0128c8d:	83 f8 02             	cmp    $0x2,%eax
f0128c90:	77 2c                	ja     f0128cbe <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0128c92:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0128c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c9a:	c1 e2 02             	shl    $0x2,%edx
f0128c9d:	01 d0                	add    %edx,%eax
f0128c9f:	8b 00                	mov    (%eax),%eax
f0128ca1:	85 c0                	test   %eax,%eax
f0128ca3:	75 7a                	jne    f0128d1f <check_boot_pgdir+0x192>
f0128ca5:	68 c6 1a 13 f0       	push   $0xf0131ac6
f0128caa:	68 c2 18 13 f0       	push   $0xf01318c2
f0128caf:	68 0f 01 00 00       	push   $0x10f
f0128cb4:	68 d7 18 13 f0       	push   $0xf01318d7
f0128cb9:	e8 e8 74 fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0128cbe:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0128cc5:	76 2c                	jbe    f0128cf3 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f0128cc7:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0128ccc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ccf:	c1 e2 02             	shl    $0x2,%edx
f0128cd2:	01 d0                	add    %edx,%eax
f0128cd4:	8b 00                	mov    (%eax),%eax
f0128cd6:	85 c0                	test   %eax,%eax
f0128cd8:	75 48                	jne    f0128d22 <check_boot_pgdir+0x195>
f0128cda:	68 c6 1a 13 f0       	push   $0xf0131ac6
f0128cdf:	68 c2 18 13 f0       	push   $0xf01318c2
f0128ce4:	68 13 01 00 00       	push   $0x113
f0128ce9:	68 d7 18 13 f0       	push   $0xf01318d7
f0128cee:	e8 b3 74 fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0128cf3:	a1 18 44 6d f0       	mov    0xf06d4418,%eax
f0128cf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128cfb:	c1 e2 02             	shl    $0x2,%edx
f0128cfe:	01 d0                	add    %edx,%eax
f0128d00:	8b 00                	mov    (%eax),%eax
f0128d02:	85 c0                	test   %eax,%eax
f0128d04:	74 1c                	je     f0128d22 <check_boot_pgdir+0x195>
f0128d06:	68 dc 1a 13 f0       	push   $0xf0131adc
f0128d0b:	68 c2 18 13 f0       	push   $0xf01318c2
f0128d10:	68 15 01 00 00       	push   $0x115
f0128d15:	68 d7 18 13 f0       	push   $0xf01318d7
f0128d1a:	e8 87 74 fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0128d1f:	90                   	nop
f0128d20:	eb 01                	jmp    f0128d23 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0128d22:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0128d23:	ff 45 f4             	incl   -0xc(%ebp)
f0128d26:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0128d2d:	0f 86 44 ff ff ff    	jbe    f0128c77 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0128d33:	83 ec 0c             	sub    $0xc,%esp
f0128d36:	68 f8 1a 13 f0       	push   $0xf0131af8
f0128d3b:	e8 ed 7e fd ff       	call   f0100c2d <cprintf>
f0128d40:	83 c4 10             	add    $0x10,%esp
}
f0128d43:	90                   	nop
f0128d44:	c9                   	leave  
f0128d45:	c3                   	ret    

f0128d46 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0128d46:	55                   	push   %ebp
f0128d47:	89 e5                	mov    %esp,%ebp
f0128d49:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0128d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0128d4f:	c1 e8 16             	shr    $0x16,%eax
f0128d52:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0128d5c:	01 d0                	add    %edx,%eax
f0128d5e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0128d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d64:	8b 00                	mov    (%eax),%eax
f0128d66:	83 e0 01             	and    $0x1,%eax
f0128d69:	85 c0                	test   %eax,%eax
f0128d6b:	75 0a                	jne    f0128d77 <check_va2pa+0x31>
		return ~0;
f0128d6d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0128d72:	e9 87 00 00 00       	jmp    f0128dfe <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0128d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d7a:	8b 00                	mov    (%eax),%eax
f0128d7c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0128d81:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0128d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128d87:	c1 e8 0c             	shr    $0xc,%eax
f0128d8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0128d8d:	a1 b0 43 6d f0       	mov    0xf06d43b0,%eax
f0128d92:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0128d95:	72 17                	jb     f0128dae <check_va2pa+0x68>
f0128d97:	ff 75 f0             	pushl  -0x10(%ebp)
f0128d9a:	68 18 1b 13 f0       	push   $0xf0131b18
f0128d9f:	68 2b 01 00 00       	push   $0x12b
f0128da4:	68 d7 18 13 f0       	push   $0xf01318d7
f0128da9:	e8 f8 73 fd ff       	call   f01001a6 <_panic>
f0128dae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128db1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0128db6:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0128db9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0128dbc:	c1 e8 0c             	shr    $0xc,%eax
f0128dbf:	25 ff 03 00 00       	and    $0x3ff,%eax
f0128dc4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128dcb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0128dce:	01 d0                	add    %edx,%eax
f0128dd0:	8b 00                	mov    (%eax),%eax
f0128dd2:	83 e0 01             	and    $0x1,%eax
f0128dd5:	85 c0                	test   %eax,%eax
f0128dd7:	75 07                	jne    f0128de0 <check_va2pa+0x9a>
		return ~0;
f0128dd9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0128dde:	eb 1e                	jmp    f0128dfe <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0128de0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0128de3:	c1 e8 0c             	shr    $0xc,%eax
f0128de6:	25 ff 03 00 00       	and    $0x3ff,%eax
f0128deb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128df2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0128df5:	01 d0                	add    %edx,%eax
f0128df7:	8b 00                	mov    (%eax),%eax
f0128df9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0128dfe:	c9                   	leave  
f0128dff:	c3                   	ret    

f0128e00 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0128e00:	55                   	push   %ebp
f0128e01:	89 e5                	mov    %esp,%ebp
f0128e03:	53                   	push   %ebx
f0128e04:	83 ec 14             	sub    $0x14,%esp
f0128e07:	8b 45 10             	mov    0x10(%ebp),%eax
f0128e0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0128e0d:	8b 45 14             	mov    0x14(%ebp),%eax
f0128e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0128e13:	8b 45 18             	mov    0x18(%ebp),%eax
f0128e16:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e1b:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0128e1e:	77 55                	ja     f0128e75 <printnum+0x75>
f0128e20:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0128e23:	72 05                	jb     f0128e2a <printnum+0x2a>
f0128e25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0128e28:	77 4b                	ja     f0128e75 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0128e2a:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0128e2d:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0128e30:	8b 45 18             	mov    0x18(%ebp),%eax
f0128e33:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e38:	52                   	push   %edx
f0128e39:	50                   	push   %eax
f0128e3a:	ff 75 f4             	pushl  -0xc(%ebp)
f0128e3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0128e40:	e8 0b 14 00 00       	call   f012a250 <__udivdi3>
f0128e45:	83 c4 10             	add    $0x10,%esp
f0128e48:	83 ec 04             	sub    $0x4,%esp
f0128e4b:	ff 75 20             	pushl  0x20(%ebp)
f0128e4e:	53                   	push   %ebx
f0128e4f:	ff 75 18             	pushl  0x18(%ebp)
f0128e52:	52                   	push   %edx
f0128e53:	50                   	push   %eax
f0128e54:	ff 75 0c             	pushl  0xc(%ebp)
f0128e57:	ff 75 08             	pushl  0x8(%ebp)
f0128e5a:	e8 a1 ff ff ff       	call   f0128e00 <printnum>
f0128e5f:	83 c4 20             	add    $0x20,%esp
f0128e62:	eb 1a                	jmp    f0128e7e <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0128e64:	83 ec 08             	sub    $0x8,%esp
f0128e67:	ff 75 0c             	pushl  0xc(%ebp)
f0128e6a:	ff 75 20             	pushl  0x20(%ebp)
f0128e6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0128e70:	ff d0                	call   *%eax
f0128e72:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0128e75:	ff 4d 1c             	decl   0x1c(%ebp)
f0128e78:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0128e7c:	7f e6                	jg     f0128e64 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0128e7e:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0128e81:	bb 00 00 00 00       	mov    $0x0,%ebx
f0128e86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0128e89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e8c:	53                   	push   %ebx
f0128e8d:	51                   	push   %ecx
f0128e8e:	52                   	push   %edx
f0128e8f:	50                   	push   %eax
f0128e90:	e8 cb 14 00 00       	call   f012a360 <__umoddi3>
f0128e95:	83 c4 10             	add    $0x10,%esp
f0128e98:	05 74 1d 13 f0       	add    $0xf0131d74,%eax
f0128e9d:	8a 00                	mov    (%eax),%al
f0128e9f:	0f be c0             	movsbl %al,%eax
f0128ea2:	83 ec 08             	sub    $0x8,%esp
f0128ea5:	ff 75 0c             	pushl  0xc(%ebp)
f0128ea8:	50                   	push   %eax
f0128ea9:	8b 45 08             	mov    0x8(%ebp),%eax
f0128eac:	ff d0                	call   *%eax
f0128eae:	83 c4 10             	add    $0x10,%esp
}
f0128eb1:	90                   	nop
f0128eb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0128eb5:	c9                   	leave  
f0128eb6:	c3                   	ret    

f0128eb7 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0128eb7:	55                   	push   %ebp
f0128eb8:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0128eba:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0128ebe:	7e 1c                	jle    f0128edc <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0128ec0:	8b 45 08             	mov    0x8(%ebp),%eax
f0128ec3:	8b 00                	mov    (%eax),%eax
f0128ec5:	8d 50 08             	lea    0x8(%eax),%edx
f0128ec8:	8b 45 08             	mov    0x8(%ebp),%eax
f0128ecb:	89 10                	mov    %edx,(%eax)
f0128ecd:	8b 45 08             	mov    0x8(%ebp),%eax
f0128ed0:	8b 00                	mov    (%eax),%eax
f0128ed2:	83 e8 08             	sub    $0x8,%eax
f0128ed5:	8b 50 04             	mov    0x4(%eax),%edx
f0128ed8:	8b 00                	mov    (%eax),%eax
f0128eda:	eb 40                	jmp    f0128f1c <getuint+0x65>
	else if (lflag)
f0128edc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0128ee0:	74 1e                	je     f0128f00 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0128ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0128ee5:	8b 00                	mov    (%eax),%eax
f0128ee7:	8d 50 04             	lea    0x4(%eax),%edx
f0128eea:	8b 45 08             	mov    0x8(%ebp),%eax
f0128eed:	89 10                	mov    %edx,(%eax)
f0128eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0128ef2:	8b 00                	mov    (%eax),%eax
f0128ef4:	83 e8 04             	sub    $0x4,%eax
f0128ef7:	8b 00                	mov    (%eax),%eax
f0128ef9:	ba 00 00 00 00       	mov    $0x0,%edx
f0128efe:	eb 1c                	jmp    f0128f1c <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0128f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f03:	8b 00                	mov    (%eax),%eax
f0128f05:	8d 50 04             	lea    0x4(%eax),%edx
f0128f08:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f0b:	89 10                	mov    %edx,(%eax)
f0128f0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f10:	8b 00                	mov    (%eax),%eax
f0128f12:	83 e8 04             	sub    $0x4,%eax
f0128f15:	8b 00                	mov    (%eax),%eax
f0128f17:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0128f1c:	5d                   	pop    %ebp
f0128f1d:	c3                   	ret    

f0128f1e <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0128f1e:	55                   	push   %ebp
f0128f1f:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0128f21:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0128f25:	7e 1c                	jle    f0128f43 <getint+0x25>
		return va_arg(*ap, long long);
f0128f27:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f2a:	8b 00                	mov    (%eax),%eax
f0128f2c:	8d 50 08             	lea    0x8(%eax),%edx
f0128f2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f32:	89 10                	mov    %edx,(%eax)
f0128f34:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f37:	8b 00                	mov    (%eax),%eax
f0128f39:	83 e8 08             	sub    $0x8,%eax
f0128f3c:	8b 50 04             	mov    0x4(%eax),%edx
f0128f3f:	8b 00                	mov    (%eax),%eax
f0128f41:	eb 38                	jmp    f0128f7b <getint+0x5d>
	else if (lflag)
f0128f43:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0128f47:	74 1a                	je     f0128f63 <getint+0x45>
		return va_arg(*ap, long);
f0128f49:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f4c:	8b 00                	mov    (%eax),%eax
f0128f4e:	8d 50 04             	lea    0x4(%eax),%edx
f0128f51:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f54:	89 10                	mov    %edx,(%eax)
f0128f56:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f59:	8b 00                	mov    (%eax),%eax
f0128f5b:	83 e8 04             	sub    $0x4,%eax
f0128f5e:	8b 00                	mov    (%eax),%eax
f0128f60:	99                   	cltd   
f0128f61:	eb 18                	jmp    f0128f7b <getint+0x5d>
	else
		return va_arg(*ap, int);
f0128f63:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f66:	8b 00                	mov    (%eax),%eax
f0128f68:	8d 50 04             	lea    0x4(%eax),%edx
f0128f6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f6e:	89 10                	mov    %edx,(%eax)
f0128f70:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f73:	8b 00                	mov    (%eax),%eax
f0128f75:	83 e8 04             	sub    $0x4,%eax
f0128f78:	8b 00                	mov    (%eax),%eax
f0128f7a:	99                   	cltd   
}
f0128f7b:	5d                   	pop    %ebp
f0128f7c:	c3                   	ret    

f0128f7d <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0128f7d:	55                   	push   %ebp
f0128f7e:	89 e5                	mov    %esp,%ebp
f0128f80:	56                   	push   %esi
f0128f81:	53                   	push   %ebx
f0128f82:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0128f85:	eb 17                	jmp    f0128f9e <vprintfmt+0x21>
			if (ch == '\0')
f0128f87:	85 db                	test   %ebx,%ebx
f0128f89:	0f 84 af 03 00 00    	je     f012933e <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0128f8f:	83 ec 08             	sub    $0x8,%esp
f0128f92:	ff 75 0c             	pushl  0xc(%ebp)
f0128f95:	53                   	push   %ebx
f0128f96:	8b 45 08             	mov    0x8(%ebp),%eax
f0128f99:	ff d0                	call   *%eax
f0128f9b:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0128f9e:	8b 45 10             	mov    0x10(%ebp),%eax
f0128fa1:	8d 50 01             	lea    0x1(%eax),%edx
f0128fa4:	89 55 10             	mov    %edx,0x10(%ebp)
f0128fa7:	8a 00                	mov    (%eax),%al
f0128fa9:	0f b6 d8             	movzbl %al,%ebx
f0128fac:	83 fb 25             	cmp    $0x25,%ebx
f0128faf:	75 d6                	jne    f0128f87 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0128fb1:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0128fb5:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0128fbc:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0128fc3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0128fca:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0128fd1:	8b 45 10             	mov    0x10(%ebp),%eax
f0128fd4:	8d 50 01             	lea    0x1(%eax),%edx
f0128fd7:	89 55 10             	mov    %edx,0x10(%ebp)
f0128fda:	8a 00                	mov    (%eax),%al
f0128fdc:	0f b6 d8             	movzbl %al,%ebx
f0128fdf:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0128fe2:	83 f8 55             	cmp    $0x55,%eax
f0128fe5:	0f 87 2b 03 00 00    	ja     f0129316 <vprintfmt+0x399>
f0128feb:	8b 04 85 98 1d 13 f0 	mov    -0xfece268(,%eax,4),%eax
f0128ff2:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0128ff4:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0128ff8:	eb d7                	jmp    f0128fd1 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0128ffa:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0128ffe:	eb d1                	jmp    f0128fd1 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0129000:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0129007:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012900a:	89 d0                	mov    %edx,%eax
f012900c:	c1 e0 02             	shl    $0x2,%eax
f012900f:	01 d0                	add    %edx,%eax
f0129011:	01 c0                	add    %eax,%eax
f0129013:	01 d8                	add    %ebx,%eax
f0129015:	83 e8 30             	sub    $0x30,%eax
f0129018:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012901b:	8b 45 10             	mov    0x10(%ebp),%eax
f012901e:	8a 00                	mov    (%eax),%al
f0129020:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0129023:	83 fb 2f             	cmp    $0x2f,%ebx
f0129026:	7e 3e                	jle    f0129066 <vprintfmt+0xe9>
f0129028:	83 fb 39             	cmp    $0x39,%ebx
f012902b:	7f 39                	jg     f0129066 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012902d:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0129030:	eb d5                	jmp    f0129007 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0129032:	8b 45 14             	mov    0x14(%ebp),%eax
f0129035:	83 c0 04             	add    $0x4,%eax
f0129038:	89 45 14             	mov    %eax,0x14(%ebp)
f012903b:	8b 45 14             	mov    0x14(%ebp),%eax
f012903e:	83 e8 04             	sub    $0x4,%eax
f0129041:	8b 00                	mov    (%eax),%eax
f0129043:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0129046:	eb 1f                	jmp    f0129067 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0129048:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012904c:	79 83                	jns    f0128fd1 <vprintfmt+0x54>
				width = 0;
f012904e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0129055:	e9 77 ff ff ff       	jmp    f0128fd1 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012905a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0129061:	e9 6b ff ff ff       	jmp    f0128fd1 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0129066:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0129067:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012906b:	0f 89 60 ff ff ff    	jns    f0128fd1 <vprintfmt+0x54>
				width = precision, precision = -1;
f0129071:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0129074:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0129077:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012907e:	e9 4e ff ff ff       	jmp    f0128fd1 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0129083:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0129086:	e9 46 ff ff ff       	jmp    f0128fd1 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012908b:	8b 45 14             	mov    0x14(%ebp),%eax
f012908e:	83 c0 04             	add    $0x4,%eax
f0129091:	89 45 14             	mov    %eax,0x14(%ebp)
f0129094:	8b 45 14             	mov    0x14(%ebp),%eax
f0129097:	83 e8 04             	sub    $0x4,%eax
f012909a:	8b 00                	mov    (%eax),%eax
f012909c:	83 ec 08             	sub    $0x8,%esp
f012909f:	ff 75 0c             	pushl  0xc(%ebp)
f01290a2:	50                   	push   %eax
f01290a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01290a6:	ff d0                	call   *%eax
f01290a8:	83 c4 10             	add    $0x10,%esp
			break;
f01290ab:	e9 89 02 00 00       	jmp    f0129339 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f01290b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01290b3:	83 c0 04             	add    $0x4,%eax
f01290b6:	89 45 14             	mov    %eax,0x14(%ebp)
f01290b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01290bc:	83 e8 04             	sub    $0x4,%eax
f01290bf:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f01290c1:	85 db                	test   %ebx,%ebx
f01290c3:	79 02                	jns    f01290c7 <vprintfmt+0x14a>
				err = -err;
f01290c5:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f01290c7:	83 fb 64             	cmp    $0x64,%ebx
f01290ca:	7f 0b                	jg     f01290d7 <vprintfmt+0x15a>
f01290cc:	8b 34 9d e0 1b 13 f0 	mov    -0xfece420(,%ebx,4),%esi
f01290d3:	85 f6                	test   %esi,%esi
f01290d5:	75 19                	jne    f01290f0 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f01290d7:	53                   	push   %ebx
f01290d8:	68 85 1d 13 f0       	push   $0xf0131d85
f01290dd:	ff 75 0c             	pushl  0xc(%ebp)
f01290e0:	ff 75 08             	pushl  0x8(%ebp)
f01290e3:	e8 5e 02 00 00       	call   f0129346 <printfmt>
f01290e8:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01290eb:	e9 49 02 00 00       	jmp    f0129339 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01290f0:	56                   	push   %esi
f01290f1:	68 8e 1d 13 f0       	push   $0xf0131d8e
f01290f6:	ff 75 0c             	pushl  0xc(%ebp)
f01290f9:	ff 75 08             	pushl  0x8(%ebp)
f01290fc:	e8 45 02 00 00       	call   f0129346 <printfmt>
f0129101:	83 c4 10             	add    $0x10,%esp
			break;
f0129104:	e9 30 02 00 00       	jmp    f0129339 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0129109:	8b 45 14             	mov    0x14(%ebp),%eax
f012910c:	83 c0 04             	add    $0x4,%eax
f012910f:	89 45 14             	mov    %eax,0x14(%ebp)
f0129112:	8b 45 14             	mov    0x14(%ebp),%eax
f0129115:	83 e8 04             	sub    $0x4,%eax
f0129118:	8b 30                	mov    (%eax),%esi
f012911a:	85 f6                	test   %esi,%esi
f012911c:	75 05                	jne    f0129123 <vprintfmt+0x1a6>
				p = "(null)";
f012911e:	be 91 1d 13 f0       	mov    $0xf0131d91,%esi
			if (width > 0 && padc != '-')
f0129123:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0129127:	7e 6d                	jle    f0129196 <vprintfmt+0x219>
f0129129:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012912d:	74 67                	je     f0129196 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012912f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0129132:	83 ec 08             	sub    $0x8,%esp
f0129135:	50                   	push   %eax
f0129136:	56                   	push   %esi
f0129137:	e8 12 05 00 00       	call   f012964e <strnlen>
f012913c:	83 c4 10             	add    $0x10,%esp
f012913f:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0129142:	eb 16                	jmp    f012915a <vprintfmt+0x1dd>
					putch(padc, putdat);
f0129144:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0129148:	83 ec 08             	sub    $0x8,%esp
f012914b:	ff 75 0c             	pushl  0xc(%ebp)
f012914e:	50                   	push   %eax
f012914f:	8b 45 08             	mov    0x8(%ebp),%eax
f0129152:	ff d0                	call   *%eax
f0129154:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0129157:	ff 4d e4             	decl   -0x1c(%ebp)
f012915a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012915e:	7f e4                	jg     f0129144 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0129160:	eb 34                	jmp    f0129196 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0129162:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0129166:	74 1c                	je     f0129184 <vprintfmt+0x207>
f0129168:	83 fb 1f             	cmp    $0x1f,%ebx
f012916b:	7e 05                	jle    f0129172 <vprintfmt+0x1f5>
f012916d:	83 fb 7e             	cmp    $0x7e,%ebx
f0129170:	7e 12                	jle    f0129184 <vprintfmt+0x207>
					putch('?', putdat);
f0129172:	83 ec 08             	sub    $0x8,%esp
f0129175:	ff 75 0c             	pushl  0xc(%ebp)
f0129178:	6a 3f                	push   $0x3f
f012917a:	8b 45 08             	mov    0x8(%ebp),%eax
f012917d:	ff d0                	call   *%eax
f012917f:	83 c4 10             	add    $0x10,%esp
f0129182:	eb 0f                	jmp    f0129193 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0129184:	83 ec 08             	sub    $0x8,%esp
f0129187:	ff 75 0c             	pushl  0xc(%ebp)
f012918a:	53                   	push   %ebx
f012918b:	8b 45 08             	mov    0x8(%ebp),%eax
f012918e:	ff d0                	call   *%eax
f0129190:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0129193:	ff 4d e4             	decl   -0x1c(%ebp)
f0129196:	89 f0                	mov    %esi,%eax
f0129198:	8d 70 01             	lea    0x1(%eax),%esi
f012919b:	8a 00                	mov    (%eax),%al
f012919d:	0f be d8             	movsbl %al,%ebx
f01291a0:	85 db                	test   %ebx,%ebx
f01291a2:	74 24                	je     f01291c8 <vprintfmt+0x24b>
f01291a4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01291a8:	78 b8                	js     f0129162 <vprintfmt+0x1e5>
f01291aa:	ff 4d e0             	decl   -0x20(%ebp)
f01291ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01291b1:	79 af                	jns    f0129162 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01291b3:	eb 13                	jmp    f01291c8 <vprintfmt+0x24b>
				putch(' ', putdat);
f01291b5:	83 ec 08             	sub    $0x8,%esp
f01291b8:	ff 75 0c             	pushl  0xc(%ebp)
f01291bb:	6a 20                	push   $0x20
f01291bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01291c0:	ff d0                	call   *%eax
f01291c2:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01291c5:	ff 4d e4             	decl   -0x1c(%ebp)
f01291c8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01291cc:	7f e7                	jg     f01291b5 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f01291ce:	e9 66 01 00 00       	jmp    f0129339 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01291d3:	83 ec 08             	sub    $0x8,%esp
f01291d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01291d9:	8d 45 14             	lea    0x14(%ebp),%eax
f01291dc:	50                   	push   %eax
f01291dd:	e8 3c fd ff ff       	call   f0128f1e <getint>
f01291e2:	83 c4 10             	add    $0x10,%esp
f01291e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01291e8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01291eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01291ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01291f1:	85 d2                	test   %edx,%edx
f01291f3:	79 23                	jns    f0129218 <vprintfmt+0x29b>
				putch('-', putdat);
f01291f5:	83 ec 08             	sub    $0x8,%esp
f01291f8:	ff 75 0c             	pushl  0xc(%ebp)
f01291fb:	6a 2d                	push   $0x2d
f01291fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0129200:	ff d0                	call   *%eax
f0129202:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0129205:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0129208:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012920b:	f7 d8                	neg    %eax
f012920d:	83 d2 00             	adc    $0x0,%edx
f0129210:	f7 da                	neg    %edx
f0129212:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0129215:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0129218:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012921f:	e9 bc 00 00 00       	jmp    f01292e0 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0129224:	83 ec 08             	sub    $0x8,%esp
f0129227:	ff 75 e8             	pushl  -0x18(%ebp)
f012922a:	8d 45 14             	lea    0x14(%ebp),%eax
f012922d:	50                   	push   %eax
f012922e:	e8 84 fc ff ff       	call   f0128eb7 <getuint>
f0129233:	83 c4 10             	add    $0x10,%esp
f0129236:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0129239:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012923c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0129243:	e9 98 00 00 00       	jmp    f01292e0 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0129248:	83 ec 08             	sub    $0x8,%esp
f012924b:	ff 75 0c             	pushl  0xc(%ebp)
f012924e:	6a 58                	push   $0x58
f0129250:	8b 45 08             	mov    0x8(%ebp),%eax
f0129253:	ff d0                	call   *%eax
f0129255:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0129258:	83 ec 08             	sub    $0x8,%esp
f012925b:	ff 75 0c             	pushl  0xc(%ebp)
f012925e:	6a 58                	push   $0x58
f0129260:	8b 45 08             	mov    0x8(%ebp),%eax
f0129263:	ff d0                	call   *%eax
f0129265:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0129268:	83 ec 08             	sub    $0x8,%esp
f012926b:	ff 75 0c             	pushl  0xc(%ebp)
f012926e:	6a 58                	push   $0x58
f0129270:	8b 45 08             	mov    0x8(%ebp),%eax
f0129273:	ff d0                	call   *%eax
f0129275:	83 c4 10             	add    $0x10,%esp
			break;
f0129278:	e9 bc 00 00 00       	jmp    f0129339 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012927d:	83 ec 08             	sub    $0x8,%esp
f0129280:	ff 75 0c             	pushl  0xc(%ebp)
f0129283:	6a 30                	push   $0x30
f0129285:	8b 45 08             	mov    0x8(%ebp),%eax
f0129288:	ff d0                	call   *%eax
f012928a:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012928d:	83 ec 08             	sub    $0x8,%esp
f0129290:	ff 75 0c             	pushl  0xc(%ebp)
f0129293:	6a 78                	push   $0x78
f0129295:	8b 45 08             	mov    0x8(%ebp),%eax
f0129298:	ff d0                	call   *%eax
f012929a:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012929d:	8b 45 14             	mov    0x14(%ebp),%eax
f01292a0:	83 c0 04             	add    $0x4,%eax
f01292a3:	89 45 14             	mov    %eax,0x14(%ebp)
f01292a6:	8b 45 14             	mov    0x14(%ebp),%eax
f01292a9:	83 e8 04             	sub    $0x4,%eax
f01292ac:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01292ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01292b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01292b8:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01292bf:	eb 1f                	jmp    f01292e0 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01292c1:	83 ec 08             	sub    $0x8,%esp
f01292c4:	ff 75 e8             	pushl  -0x18(%ebp)
f01292c7:	8d 45 14             	lea    0x14(%ebp),%eax
f01292ca:	50                   	push   %eax
f01292cb:	e8 e7 fb ff ff       	call   f0128eb7 <getuint>
f01292d0:	83 c4 10             	add    $0x10,%esp
f01292d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01292d6:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01292d9:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01292e0:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01292e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01292e7:	83 ec 04             	sub    $0x4,%esp
f01292ea:	52                   	push   %edx
f01292eb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01292ee:	50                   	push   %eax
f01292ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01292f2:	ff 75 f0             	pushl  -0x10(%ebp)
f01292f5:	ff 75 0c             	pushl  0xc(%ebp)
f01292f8:	ff 75 08             	pushl  0x8(%ebp)
f01292fb:	e8 00 fb ff ff       	call   f0128e00 <printnum>
f0129300:	83 c4 20             	add    $0x20,%esp
			break;
f0129303:	eb 34                	jmp    f0129339 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0129305:	83 ec 08             	sub    $0x8,%esp
f0129308:	ff 75 0c             	pushl  0xc(%ebp)
f012930b:	53                   	push   %ebx
f012930c:	8b 45 08             	mov    0x8(%ebp),%eax
f012930f:	ff d0                	call   *%eax
f0129311:	83 c4 10             	add    $0x10,%esp
			break;
f0129314:	eb 23                	jmp    f0129339 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0129316:	83 ec 08             	sub    $0x8,%esp
f0129319:	ff 75 0c             	pushl  0xc(%ebp)
f012931c:	6a 25                	push   $0x25
f012931e:	8b 45 08             	mov    0x8(%ebp),%eax
f0129321:	ff d0                	call   *%eax
f0129323:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0129326:	ff 4d 10             	decl   0x10(%ebp)
f0129329:	eb 03                	jmp    f012932e <vprintfmt+0x3b1>
f012932b:	ff 4d 10             	decl   0x10(%ebp)
f012932e:	8b 45 10             	mov    0x10(%ebp),%eax
f0129331:	48                   	dec    %eax
f0129332:	8a 00                	mov    (%eax),%al
f0129334:	3c 25                	cmp    $0x25,%al
f0129336:	75 f3                	jne    f012932b <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0129338:	90                   	nop
		}
	}
f0129339:	e9 47 fc ff ff       	jmp    f0128f85 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012933e:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012933f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129342:	5b                   	pop    %ebx
f0129343:	5e                   	pop    %esi
f0129344:	5d                   	pop    %ebp
f0129345:	c3                   	ret    

f0129346 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0129346:	55                   	push   %ebp
f0129347:	89 e5                	mov    %esp,%ebp
f0129349:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012934c:	8d 45 10             	lea    0x10(%ebp),%eax
f012934f:	83 c0 04             	add    $0x4,%eax
f0129352:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0129355:	8b 45 10             	mov    0x10(%ebp),%eax
f0129358:	ff 75 f4             	pushl  -0xc(%ebp)
f012935b:	50                   	push   %eax
f012935c:	ff 75 0c             	pushl  0xc(%ebp)
f012935f:	ff 75 08             	pushl  0x8(%ebp)
f0129362:	e8 16 fc ff ff       	call   f0128f7d <vprintfmt>
f0129367:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012936a:	90                   	nop
f012936b:	c9                   	leave  
f012936c:	c3                   	ret    

f012936d <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012936d:	55                   	push   %ebp
f012936e:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0129370:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129373:	8b 40 08             	mov    0x8(%eax),%eax
f0129376:	8d 50 01             	lea    0x1(%eax),%edx
f0129379:	8b 45 0c             	mov    0xc(%ebp),%eax
f012937c:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012937f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129382:	8b 10                	mov    (%eax),%edx
f0129384:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129387:	8b 40 04             	mov    0x4(%eax),%eax
f012938a:	39 c2                	cmp    %eax,%edx
f012938c:	73 12                	jae    f01293a0 <sprintputch+0x33>
		*b->buf++ = ch;
f012938e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129391:	8b 00                	mov    (%eax),%eax
f0129393:	8d 48 01             	lea    0x1(%eax),%ecx
f0129396:	8b 55 0c             	mov    0xc(%ebp),%edx
f0129399:	89 0a                	mov    %ecx,(%edx)
f012939b:	8b 55 08             	mov    0x8(%ebp),%edx
f012939e:	88 10                	mov    %dl,(%eax)
}
f01293a0:	90                   	nop
f01293a1:	5d                   	pop    %ebp
f01293a2:	c3                   	ret    

f01293a3 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01293a3:	55                   	push   %ebp
f01293a4:	89 e5                	mov    %esp,%ebp
f01293a6:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01293a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01293ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01293af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01293b2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01293b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01293b8:	01 d0                	add    %edx,%eax
f01293ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01293bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01293c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01293c8:	74 06                	je     f01293d0 <vsnprintf+0x2d>
f01293ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01293ce:	7f 07                	jg     f01293d7 <vsnprintf+0x34>
		return -E_INVAL;
f01293d0:	b8 03 00 00 00       	mov    $0x3,%eax
f01293d5:	eb 20                	jmp    f01293f7 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01293d7:	ff 75 14             	pushl  0x14(%ebp)
f01293da:	ff 75 10             	pushl  0x10(%ebp)
f01293dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01293e0:	50                   	push   %eax
f01293e1:	68 6d 93 12 f0       	push   $0xf012936d
f01293e6:	e8 92 fb ff ff       	call   f0128f7d <vprintfmt>
f01293eb:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01293ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01293f1:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01293f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01293f7:	c9                   	leave  
f01293f8:	c3                   	ret    

f01293f9 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01293f9:	55                   	push   %ebp
f01293fa:	89 e5                	mov    %esp,%ebp
f01293fc:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01293ff:	8d 45 10             	lea    0x10(%ebp),%eax
f0129402:	83 c0 04             	add    $0x4,%eax
f0129405:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0129408:	8b 45 10             	mov    0x10(%ebp),%eax
f012940b:	ff 75 f4             	pushl  -0xc(%ebp)
f012940e:	50                   	push   %eax
f012940f:	ff 75 0c             	pushl  0xc(%ebp)
f0129412:	ff 75 08             	pushl  0x8(%ebp)
f0129415:	e8 89 ff ff ff       	call   f01293a3 <vsnprintf>
f012941a:	83 c4 10             	add    $0x10,%esp
f012941d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0129420:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0129423:	c9                   	leave  
f0129424:	c3                   	ret    

f0129425 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0129425:	55                   	push   %ebp
f0129426:	89 e5                	mov    %esp,%ebp
f0129428:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012942b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012942f:	74 13                	je     f0129444 <readline+0x1f>
		cprintf("%s", prompt);
f0129431:	83 ec 08             	sub    $0x8,%esp
f0129434:	ff 75 08             	pushl  0x8(%ebp)
f0129437:	68 f0 1e 13 f0       	push   $0xf0131ef0
f012943c:	e8 ec 77 fd ff       	call   f0100c2d <cprintf>
f0129441:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0129444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012944b:	83 ec 0c             	sub    $0xc,%esp
f012944e:	6a 00                	push   $0x0
f0129450:	e8 85 77 fd ff       	call   f0100bda <iscons>
f0129455:	83 c4 10             	add    $0x10,%esp
f0129458:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012945b:	e8 61 77 fd ff       	call   f0100bc1 <getchar>
f0129460:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0129463:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129467:	79 22                	jns    f012948b <readline+0x66>
			if (c != -E_EOF)
f0129469:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012946d:	0f 84 ad 00 00 00    	je     f0129520 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0129473:	83 ec 08             	sub    $0x8,%esp
f0129476:	ff 75 ec             	pushl  -0x14(%ebp)
f0129479:	68 f3 1e 13 f0       	push   $0xf0131ef3
f012947e:	e8 aa 77 fd ff       	call   f0100c2d <cprintf>
f0129483:	83 c4 10             	add    $0x10,%esp
			return;
f0129486:	e9 95 00 00 00       	jmp    f0129520 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012948b:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012948f:	7e 34                	jle    f01294c5 <readline+0xa0>
f0129491:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0129498:	7f 2b                	jg     f01294c5 <readline+0xa0>
			if (echoing)
f012949a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012949e:	74 0e                	je     f01294ae <readline+0x89>
				cputchar(c);
f01294a0:	83 ec 0c             	sub    $0xc,%esp
f01294a3:	ff 75 ec             	pushl  -0x14(%ebp)
f01294a6:	e8 ff 76 fd ff       	call   f0100baa <cputchar>
f01294ab:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01294ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01294b1:	8d 50 01             	lea    0x1(%eax),%edx
f01294b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01294b7:	89 c2                	mov    %eax,%edx
f01294b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01294bc:	01 d0                	add    %edx,%eax
f01294be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01294c1:	88 10                	mov    %dl,(%eax)
f01294c3:	eb 56                	jmp    f012951b <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01294c5:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01294c9:	75 1f                	jne    f01294ea <readline+0xc5>
f01294cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01294cf:	7e 19                	jle    f01294ea <readline+0xc5>
			if (echoing)
f01294d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01294d5:	74 0e                	je     f01294e5 <readline+0xc0>
				cputchar(c);
f01294d7:	83 ec 0c             	sub    $0xc,%esp
f01294da:	ff 75 ec             	pushl  -0x14(%ebp)
f01294dd:	e8 c8 76 fd ff       	call   f0100baa <cputchar>
f01294e2:	83 c4 10             	add    $0x10,%esp

			i--;
f01294e5:	ff 4d f4             	decl   -0xc(%ebp)
f01294e8:	eb 31                	jmp    f012951b <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01294ea:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01294ee:	74 0a                	je     f01294fa <readline+0xd5>
f01294f0:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01294f4:	0f 85 61 ff ff ff    	jne    f012945b <readline+0x36>
			if (echoing)
f01294fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01294fe:	74 0e                	je     f012950e <readline+0xe9>
				cputchar(c);
f0129500:	83 ec 0c             	sub    $0xc,%esp
f0129503:	ff 75 ec             	pushl  -0x14(%ebp)
f0129506:	e8 9f 76 fd ff       	call   f0100baa <cputchar>
f012950b:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012950e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129511:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129514:	01 d0                	add    %edx,%eax
f0129516:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0129519:	eb 06                	jmp    f0129521 <readline+0xfc>
		}
	}
f012951b:	e9 3b ff ff ff       	jmp    f012945b <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0129520:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0129521:	c9                   	leave  
f0129522:	c3                   	ret    

f0129523 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0129523:	55                   	push   %ebp
f0129524:	89 e5                	mov    %esp,%ebp
f0129526:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0129529:	e8 03 22 fe ff       	call   f010b731 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012952e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0129532:	74 13                	je     f0129547 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0129534:	83 ec 08             	sub    $0x8,%esp
f0129537:	ff 75 08             	pushl  0x8(%ebp)
f012953a:	68 f0 1e 13 f0       	push   $0xf0131ef0
f012953f:	e8 e9 76 fd ff       	call   f0100c2d <cprintf>
f0129544:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0129547:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012954e:	83 ec 0c             	sub    $0xc,%esp
f0129551:	6a 00                	push   $0x0
f0129553:	e8 82 76 fd ff       	call   f0100bda <iscons>
f0129558:	83 c4 10             	add    $0x10,%esp
f012955b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012955e:	e8 5e 76 fd ff       	call   f0100bc1 <getchar>
f0129563:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0129566:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012956a:	79 23                	jns    f012958f <atomic_readline+0x6c>
			if (c != -E_EOF)
f012956c:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0129570:	74 13                	je     f0129585 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0129572:	83 ec 08             	sub    $0x8,%esp
f0129575:	ff 75 ec             	pushl  -0x14(%ebp)
f0129578:	68 f3 1e 13 f0       	push   $0xf0131ef3
f012957d:	e8 ab 76 fd ff       	call   f0100c2d <cprintf>
f0129582:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0129585:	e8 c1 21 fe ff       	call   f010b74b <sys_enable_interrupt>
			return;
f012958a:	e9 9a 00 00 00       	jmp    f0129629 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012958f:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0129593:	7e 34                	jle    f01295c9 <atomic_readline+0xa6>
f0129595:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012959c:	7f 2b                	jg     f01295c9 <atomic_readline+0xa6>
			if (echoing)
f012959e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01295a2:	74 0e                	je     f01295b2 <atomic_readline+0x8f>
				cputchar(c);
f01295a4:	83 ec 0c             	sub    $0xc,%esp
f01295a7:	ff 75 ec             	pushl  -0x14(%ebp)
f01295aa:	e8 fb 75 fd ff       	call   f0100baa <cputchar>
f01295af:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01295b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01295b5:	8d 50 01             	lea    0x1(%eax),%edx
f01295b8:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01295bb:	89 c2                	mov    %eax,%edx
f01295bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01295c0:	01 d0                	add    %edx,%eax
f01295c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01295c5:	88 10                	mov    %dl,(%eax)
f01295c7:	eb 5b                	jmp    f0129624 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01295c9:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01295cd:	75 1f                	jne    f01295ee <atomic_readline+0xcb>
f01295cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01295d3:	7e 19                	jle    f01295ee <atomic_readline+0xcb>
			if (echoing)
f01295d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01295d9:	74 0e                	je     f01295e9 <atomic_readline+0xc6>
				cputchar(c);
f01295db:	83 ec 0c             	sub    $0xc,%esp
f01295de:	ff 75 ec             	pushl  -0x14(%ebp)
f01295e1:	e8 c4 75 fd ff       	call   f0100baa <cputchar>
f01295e6:	83 c4 10             	add    $0x10,%esp
			i--;
f01295e9:	ff 4d f4             	decl   -0xc(%ebp)
f01295ec:	eb 36                	jmp    f0129624 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01295ee:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01295f2:	74 0a                	je     f01295fe <atomic_readline+0xdb>
f01295f4:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01295f8:	0f 85 60 ff ff ff    	jne    f012955e <atomic_readline+0x3b>
			if (echoing)
f01295fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0129602:	74 0e                	je     f0129612 <atomic_readline+0xef>
				cputchar(c);
f0129604:	83 ec 0c             	sub    $0xc,%esp
f0129607:	ff 75 ec             	pushl  -0x14(%ebp)
f012960a:	e8 9b 75 fd ff       	call   f0100baa <cputchar>
f012960f:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0129612:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129615:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129618:	01 d0                	add    %edx,%eax
f012961a:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012961d:	e8 29 21 fe ff       	call   f010b74b <sys_enable_interrupt>
			return;
f0129622:	eb 05                	jmp    f0129629 <atomic_readline+0x106>
		}
	}
f0129624:	e9 35 ff ff ff       	jmp    f012955e <atomic_readline+0x3b>
}
f0129629:	c9                   	leave  
f012962a:	c3                   	ret    

f012962b <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f012962b:	55                   	push   %ebp
f012962c:	89 e5                	mov    %esp,%ebp
f012962e:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0129631:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0129638:	eb 06                	jmp    f0129640 <strlen+0x15>
		n++;
f012963a:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012963d:	ff 45 08             	incl   0x8(%ebp)
f0129640:	8b 45 08             	mov    0x8(%ebp),%eax
f0129643:	8a 00                	mov    (%eax),%al
f0129645:	84 c0                	test   %al,%al
f0129647:	75 f1                	jne    f012963a <strlen+0xf>
		n++;
	return n;
f0129649:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012964c:	c9                   	leave  
f012964d:	c3                   	ret    

f012964e <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012964e:	55                   	push   %ebp
f012964f:	89 e5                	mov    %esp,%ebp
f0129651:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0129654:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012965b:	eb 09                	jmp    f0129666 <strnlen+0x18>
		n++;
f012965d:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0129660:	ff 45 08             	incl   0x8(%ebp)
f0129663:	ff 4d 0c             	decl   0xc(%ebp)
f0129666:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012966a:	74 09                	je     f0129675 <strnlen+0x27>
f012966c:	8b 45 08             	mov    0x8(%ebp),%eax
f012966f:	8a 00                	mov    (%eax),%al
f0129671:	84 c0                	test   %al,%al
f0129673:	75 e8                	jne    f012965d <strnlen+0xf>
		n++;
	return n;
f0129675:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0129678:	c9                   	leave  
f0129679:	c3                   	ret    

f012967a <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012967a:	55                   	push   %ebp
f012967b:	89 e5                	mov    %esp,%ebp
f012967d:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0129680:	8b 45 08             	mov    0x8(%ebp),%eax
f0129683:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0129686:	90                   	nop
f0129687:	8b 45 08             	mov    0x8(%ebp),%eax
f012968a:	8d 50 01             	lea    0x1(%eax),%edx
f012968d:	89 55 08             	mov    %edx,0x8(%ebp)
f0129690:	8b 55 0c             	mov    0xc(%ebp),%edx
f0129693:	8d 4a 01             	lea    0x1(%edx),%ecx
f0129696:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0129699:	8a 12                	mov    (%edx),%dl
f012969b:	88 10                	mov    %dl,(%eax)
f012969d:	8a 00                	mov    (%eax),%al
f012969f:	84 c0                	test   %al,%al
f01296a1:	75 e4                	jne    f0129687 <strcpy+0xd>
		/* do nothing */;
	return ret;
f01296a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01296a6:	c9                   	leave  
f01296a7:	c3                   	ret    

f01296a8 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01296a8:	55                   	push   %ebp
f01296a9:	89 e5                	mov    %esp,%ebp
f01296ab:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01296ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01296b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01296b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01296bb:	eb 1f                	jmp    f01296dc <strncpy+0x34>
		*dst++ = *src;
f01296bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01296c0:	8d 50 01             	lea    0x1(%eax),%edx
f01296c3:	89 55 08             	mov    %edx,0x8(%ebp)
f01296c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01296c9:	8a 12                	mov    (%edx),%dl
f01296cb:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01296cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01296d0:	8a 00                	mov    (%eax),%al
f01296d2:	84 c0                	test   %al,%al
f01296d4:	74 03                	je     f01296d9 <strncpy+0x31>
			src++;
f01296d6:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01296d9:	ff 45 fc             	incl   -0x4(%ebp)
f01296dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01296df:	3b 45 10             	cmp    0x10(%ebp),%eax
f01296e2:	72 d9                	jb     f01296bd <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01296e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01296e7:	c9                   	leave  
f01296e8:	c3                   	ret    

f01296e9 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01296e9:	55                   	push   %ebp
f01296ea:	89 e5                	mov    %esp,%ebp
f01296ec:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01296ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01296f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01296f5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01296f9:	74 30                	je     f012972b <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01296fb:	eb 16                	jmp    f0129713 <strlcpy+0x2a>
			*dst++ = *src++;
f01296fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0129700:	8d 50 01             	lea    0x1(%eax),%edx
f0129703:	89 55 08             	mov    %edx,0x8(%ebp)
f0129706:	8b 55 0c             	mov    0xc(%ebp),%edx
f0129709:	8d 4a 01             	lea    0x1(%edx),%ecx
f012970c:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012970f:	8a 12                	mov    (%edx),%dl
f0129711:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0129713:	ff 4d 10             	decl   0x10(%ebp)
f0129716:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012971a:	74 09                	je     f0129725 <strlcpy+0x3c>
f012971c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012971f:	8a 00                	mov    (%eax),%al
f0129721:	84 c0                	test   %al,%al
f0129723:	75 d8                	jne    f01296fd <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0129725:	8b 45 08             	mov    0x8(%ebp),%eax
f0129728:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012972b:	8b 55 08             	mov    0x8(%ebp),%edx
f012972e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129731:	29 c2                	sub    %eax,%edx
f0129733:	89 d0                	mov    %edx,%eax
}
f0129735:	c9                   	leave  
f0129736:	c3                   	ret    

f0129737 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0129737:	55                   	push   %ebp
f0129738:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012973a:	eb 06                	jmp    f0129742 <strcmp+0xb>
		p++, q++;
f012973c:	ff 45 08             	incl   0x8(%ebp)
f012973f:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0129742:	8b 45 08             	mov    0x8(%ebp),%eax
f0129745:	8a 00                	mov    (%eax),%al
f0129747:	84 c0                	test   %al,%al
f0129749:	74 0e                	je     f0129759 <strcmp+0x22>
f012974b:	8b 45 08             	mov    0x8(%ebp),%eax
f012974e:	8a 10                	mov    (%eax),%dl
f0129750:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129753:	8a 00                	mov    (%eax),%al
f0129755:	38 c2                	cmp    %al,%dl
f0129757:	74 e3                	je     f012973c <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0129759:	8b 45 08             	mov    0x8(%ebp),%eax
f012975c:	8a 00                	mov    (%eax),%al
f012975e:	0f b6 d0             	movzbl %al,%edx
f0129761:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129764:	8a 00                	mov    (%eax),%al
f0129766:	0f b6 c0             	movzbl %al,%eax
f0129769:	29 c2                	sub    %eax,%edx
f012976b:	89 d0                	mov    %edx,%eax
}
f012976d:	5d                   	pop    %ebp
f012976e:	c3                   	ret    

f012976f <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012976f:	55                   	push   %ebp
f0129770:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0129772:	eb 09                	jmp    f012977d <strncmp+0xe>
		n--, p++, q++;
f0129774:	ff 4d 10             	decl   0x10(%ebp)
f0129777:	ff 45 08             	incl   0x8(%ebp)
f012977a:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012977d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0129781:	74 17                	je     f012979a <strncmp+0x2b>
f0129783:	8b 45 08             	mov    0x8(%ebp),%eax
f0129786:	8a 00                	mov    (%eax),%al
f0129788:	84 c0                	test   %al,%al
f012978a:	74 0e                	je     f012979a <strncmp+0x2b>
f012978c:	8b 45 08             	mov    0x8(%ebp),%eax
f012978f:	8a 10                	mov    (%eax),%dl
f0129791:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129794:	8a 00                	mov    (%eax),%al
f0129796:	38 c2                	cmp    %al,%dl
f0129798:	74 da                	je     f0129774 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012979a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012979e:	75 07                	jne    f01297a7 <strncmp+0x38>
		return 0;
f01297a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01297a5:	eb 14                	jmp    f01297bb <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01297a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01297aa:	8a 00                	mov    (%eax),%al
f01297ac:	0f b6 d0             	movzbl %al,%edx
f01297af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01297b2:	8a 00                	mov    (%eax),%al
f01297b4:	0f b6 c0             	movzbl %al,%eax
f01297b7:	29 c2                	sub    %eax,%edx
f01297b9:	89 d0                	mov    %edx,%eax
}
f01297bb:	5d                   	pop    %ebp
f01297bc:	c3                   	ret    

f01297bd <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01297bd:	55                   	push   %ebp
f01297be:	89 e5                	mov    %esp,%ebp
f01297c0:	83 ec 04             	sub    $0x4,%esp
f01297c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01297c6:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01297c9:	eb 12                	jmp    f01297dd <strchr+0x20>
		if (*s == c)
f01297cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01297ce:	8a 00                	mov    (%eax),%al
f01297d0:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01297d3:	75 05                	jne    f01297da <strchr+0x1d>
			return (char *) s;
f01297d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01297d8:	eb 11                	jmp    f01297eb <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01297da:	ff 45 08             	incl   0x8(%ebp)
f01297dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01297e0:	8a 00                	mov    (%eax),%al
f01297e2:	84 c0                	test   %al,%al
f01297e4:	75 e5                	jne    f01297cb <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01297e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01297eb:	c9                   	leave  
f01297ec:	c3                   	ret    

f01297ed <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01297ed:	55                   	push   %ebp
f01297ee:	89 e5                	mov    %esp,%ebp
f01297f0:	83 ec 04             	sub    $0x4,%esp
f01297f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01297f6:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01297f9:	eb 0d                	jmp    f0129808 <strfind+0x1b>
		if (*s == c)
f01297fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01297fe:	8a 00                	mov    (%eax),%al
f0129800:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0129803:	74 0e                	je     f0129813 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0129805:	ff 45 08             	incl   0x8(%ebp)
f0129808:	8b 45 08             	mov    0x8(%ebp),%eax
f012980b:	8a 00                	mov    (%eax),%al
f012980d:	84 c0                	test   %al,%al
f012980f:	75 ea                	jne    f01297fb <strfind+0xe>
f0129811:	eb 01                	jmp    f0129814 <strfind+0x27>
		if (*s == c)
			break;
f0129813:	90                   	nop
	return (char *) s;
f0129814:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0129817:	c9                   	leave  
f0129818:	c3                   	ret    

f0129819 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0129819:	55                   	push   %ebp
f012981a:	89 e5                	mov    %esp,%ebp
f012981c:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012981f:	8b 45 08             	mov    0x8(%ebp),%eax
f0129822:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0129825:	8b 45 10             	mov    0x10(%ebp),%eax
f0129828:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012982b:	eb 0e                	jmp    f012983b <memset+0x22>
		*p++ = c;
f012982d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129830:	8d 50 01             	lea    0x1(%eax),%edx
f0129833:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0129836:	8b 55 0c             	mov    0xc(%ebp),%edx
f0129839:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012983b:	ff 4d f8             	decl   -0x8(%ebp)
f012983e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0129842:	79 e9                	jns    f012982d <memset+0x14>
		*p++ = c;

	return v;
f0129844:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0129847:	c9                   	leave  
f0129848:	c3                   	ret    

f0129849 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0129849:	55                   	push   %ebp
f012984a:	89 e5                	mov    %esp,%ebp
f012984c:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012984f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129852:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0129855:	8b 45 08             	mov    0x8(%ebp),%eax
f0129858:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012985b:	eb 16                	jmp    f0129873 <memcpy+0x2a>
		*d++ = *s++;
f012985d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129860:	8d 50 01             	lea    0x1(%eax),%edx
f0129863:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0129866:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0129869:	8d 4a 01             	lea    0x1(%edx),%ecx
f012986c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012986f:	8a 12                	mov    (%edx),%dl
f0129871:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0129873:	8b 45 10             	mov    0x10(%ebp),%eax
f0129876:	8d 50 ff             	lea    -0x1(%eax),%edx
f0129879:	89 55 10             	mov    %edx,0x10(%ebp)
f012987c:	85 c0                	test   %eax,%eax
f012987e:	75 dd                	jne    f012985d <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0129880:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0129883:	c9                   	leave  
f0129884:	c3                   	ret    

f0129885 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0129885:	55                   	push   %ebp
f0129886:	89 e5                	mov    %esp,%ebp
f0129888:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012988b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012988e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0129891:	8b 45 08             	mov    0x8(%ebp),%eax
f0129894:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0129897:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012989a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012989d:	73 50                	jae    f01298ef <memmove+0x6a>
f012989f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01298a2:	8b 45 10             	mov    0x10(%ebp),%eax
f01298a5:	01 d0                	add    %edx,%eax
f01298a7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01298aa:	76 43                	jbe    f01298ef <memmove+0x6a>
		s += n;
f01298ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01298af:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01298b2:	8b 45 10             	mov    0x10(%ebp),%eax
f01298b5:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01298b8:	eb 10                	jmp    f01298ca <memmove+0x45>
			*--d = *--s;
f01298ba:	ff 4d f8             	decl   -0x8(%ebp)
f01298bd:	ff 4d fc             	decl   -0x4(%ebp)
f01298c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01298c3:	8a 10                	mov    (%eax),%dl
f01298c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01298c8:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01298ca:	8b 45 10             	mov    0x10(%ebp),%eax
f01298cd:	8d 50 ff             	lea    -0x1(%eax),%edx
f01298d0:	89 55 10             	mov    %edx,0x10(%ebp)
f01298d3:	85 c0                	test   %eax,%eax
f01298d5:	75 e3                	jne    f01298ba <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01298d7:	eb 23                	jmp    f01298fc <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01298d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01298dc:	8d 50 01             	lea    0x1(%eax),%edx
f01298df:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01298e2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01298e5:	8d 4a 01             	lea    0x1(%edx),%ecx
f01298e8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01298eb:	8a 12                	mov    (%edx),%dl
f01298ed:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01298ef:	8b 45 10             	mov    0x10(%ebp),%eax
f01298f2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01298f5:	89 55 10             	mov    %edx,0x10(%ebp)
f01298f8:	85 c0                	test   %eax,%eax
f01298fa:	75 dd                	jne    f01298d9 <memmove+0x54>
			*d++ = *s++;

	return dst;
f01298fc:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01298ff:	c9                   	leave  
f0129900:	c3                   	ret    

f0129901 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0129901:	55                   	push   %ebp
f0129902:	89 e5                	mov    %esp,%ebp
f0129904:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0129907:	8b 45 08             	mov    0x8(%ebp),%eax
f012990a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012990d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129910:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0129913:	eb 2a                	jmp    f012993f <memcmp+0x3e>
		if (*s1 != *s2)
f0129915:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129918:	8a 10                	mov    (%eax),%dl
f012991a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012991d:	8a 00                	mov    (%eax),%al
f012991f:	38 c2                	cmp    %al,%dl
f0129921:	74 16                	je     f0129939 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0129923:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129926:	8a 00                	mov    (%eax),%al
f0129928:	0f b6 d0             	movzbl %al,%edx
f012992b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012992e:	8a 00                	mov    (%eax),%al
f0129930:	0f b6 c0             	movzbl %al,%eax
f0129933:	29 c2                	sub    %eax,%edx
f0129935:	89 d0                	mov    %edx,%eax
f0129937:	eb 18                	jmp    f0129951 <memcmp+0x50>
		s1++, s2++;
f0129939:	ff 45 fc             	incl   -0x4(%ebp)
f012993c:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012993f:	8b 45 10             	mov    0x10(%ebp),%eax
f0129942:	8d 50 ff             	lea    -0x1(%eax),%edx
f0129945:	89 55 10             	mov    %edx,0x10(%ebp)
f0129948:	85 c0                	test   %eax,%eax
f012994a:	75 c9                	jne    f0129915 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012994c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0129951:	c9                   	leave  
f0129952:	c3                   	ret    

f0129953 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0129953:	55                   	push   %ebp
f0129954:	89 e5                	mov    %esp,%ebp
f0129956:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0129959:	8b 55 08             	mov    0x8(%ebp),%edx
f012995c:	8b 45 10             	mov    0x10(%ebp),%eax
f012995f:	01 d0                	add    %edx,%eax
f0129961:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0129964:	eb 15                	jmp    f012997b <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0129966:	8b 45 08             	mov    0x8(%ebp),%eax
f0129969:	8a 00                	mov    (%eax),%al
f012996b:	0f b6 d0             	movzbl %al,%edx
f012996e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129971:	0f b6 c0             	movzbl %al,%eax
f0129974:	39 c2                	cmp    %eax,%edx
f0129976:	74 0d                	je     f0129985 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0129978:	ff 45 08             	incl   0x8(%ebp)
f012997b:	8b 45 08             	mov    0x8(%ebp),%eax
f012997e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0129981:	72 e3                	jb     f0129966 <memfind+0x13>
f0129983:	eb 01                	jmp    f0129986 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0129985:	90                   	nop
	return (void *) s;
f0129986:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0129989:	c9                   	leave  
f012998a:	c3                   	ret    

f012998b <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012998b:	55                   	push   %ebp
f012998c:	89 e5                	mov    %esp,%ebp
f012998e:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0129991:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0129998:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012999f:	eb 03                	jmp    f01299a4 <strtol+0x19>
		s++;
f01299a1:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01299a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01299a7:	8a 00                	mov    (%eax),%al
f01299a9:	3c 20                	cmp    $0x20,%al
f01299ab:	74 f4                	je     f01299a1 <strtol+0x16>
f01299ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01299b0:	8a 00                	mov    (%eax),%al
f01299b2:	3c 09                	cmp    $0x9,%al
f01299b4:	74 eb                	je     f01299a1 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01299b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01299b9:	8a 00                	mov    (%eax),%al
f01299bb:	3c 2b                	cmp    $0x2b,%al
f01299bd:	75 05                	jne    f01299c4 <strtol+0x39>
		s++;
f01299bf:	ff 45 08             	incl   0x8(%ebp)
f01299c2:	eb 13                	jmp    f01299d7 <strtol+0x4c>
	else if (*s == '-')
f01299c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01299c7:	8a 00                	mov    (%eax),%al
f01299c9:	3c 2d                	cmp    $0x2d,%al
f01299cb:	75 0a                	jne    f01299d7 <strtol+0x4c>
		s++, neg = 1;
f01299cd:	ff 45 08             	incl   0x8(%ebp)
f01299d0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01299d7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01299db:	74 06                	je     f01299e3 <strtol+0x58>
f01299dd:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01299e1:	75 20                	jne    f0129a03 <strtol+0x78>
f01299e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01299e6:	8a 00                	mov    (%eax),%al
f01299e8:	3c 30                	cmp    $0x30,%al
f01299ea:	75 17                	jne    f0129a03 <strtol+0x78>
f01299ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01299ef:	40                   	inc    %eax
f01299f0:	8a 00                	mov    (%eax),%al
f01299f2:	3c 78                	cmp    $0x78,%al
f01299f4:	75 0d                	jne    f0129a03 <strtol+0x78>
		s += 2, base = 16;
f01299f6:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01299fa:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0129a01:	eb 28                	jmp    f0129a2b <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0129a03:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0129a07:	75 15                	jne    f0129a1e <strtol+0x93>
f0129a09:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a0c:	8a 00                	mov    (%eax),%al
f0129a0e:	3c 30                	cmp    $0x30,%al
f0129a10:	75 0c                	jne    f0129a1e <strtol+0x93>
		s++, base = 8;
f0129a12:	ff 45 08             	incl   0x8(%ebp)
f0129a15:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0129a1c:	eb 0d                	jmp    f0129a2b <strtol+0xa0>
	else if (base == 0)
f0129a1e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0129a22:	75 07                	jne    f0129a2b <strtol+0xa0>
		base = 10;
f0129a24:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0129a2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a2e:	8a 00                	mov    (%eax),%al
f0129a30:	3c 2f                	cmp    $0x2f,%al
f0129a32:	7e 19                	jle    f0129a4d <strtol+0xc2>
f0129a34:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a37:	8a 00                	mov    (%eax),%al
f0129a39:	3c 39                	cmp    $0x39,%al
f0129a3b:	7f 10                	jg     f0129a4d <strtol+0xc2>
			dig = *s - '0';
f0129a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a40:	8a 00                	mov    (%eax),%al
f0129a42:	0f be c0             	movsbl %al,%eax
f0129a45:	83 e8 30             	sub    $0x30,%eax
f0129a48:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0129a4b:	eb 42                	jmp    f0129a8f <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0129a4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a50:	8a 00                	mov    (%eax),%al
f0129a52:	3c 60                	cmp    $0x60,%al
f0129a54:	7e 19                	jle    f0129a6f <strtol+0xe4>
f0129a56:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a59:	8a 00                	mov    (%eax),%al
f0129a5b:	3c 7a                	cmp    $0x7a,%al
f0129a5d:	7f 10                	jg     f0129a6f <strtol+0xe4>
			dig = *s - 'a' + 10;
f0129a5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a62:	8a 00                	mov    (%eax),%al
f0129a64:	0f be c0             	movsbl %al,%eax
f0129a67:	83 e8 57             	sub    $0x57,%eax
f0129a6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0129a6d:	eb 20                	jmp    f0129a8f <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0129a6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a72:	8a 00                	mov    (%eax),%al
f0129a74:	3c 40                	cmp    $0x40,%al
f0129a76:	7e 39                	jle    f0129ab1 <strtol+0x126>
f0129a78:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a7b:	8a 00                	mov    (%eax),%al
f0129a7d:	3c 5a                	cmp    $0x5a,%al
f0129a7f:	7f 30                	jg     f0129ab1 <strtol+0x126>
			dig = *s - 'A' + 10;
f0129a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0129a84:	8a 00                	mov    (%eax),%al
f0129a86:	0f be c0             	movsbl %al,%eax
f0129a89:	83 e8 37             	sub    $0x37,%eax
f0129a8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0129a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129a92:	3b 45 10             	cmp    0x10(%ebp),%eax
f0129a95:	7d 19                	jge    f0129ab0 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0129a97:	ff 45 08             	incl   0x8(%ebp)
f0129a9a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129a9d:	0f af 45 10          	imul   0x10(%ebp),%eax
f0129aa1:	89 c2                	mov    %eax,%edx
f0129aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129aa6:	01 d0                	add    %edx,%eax
f0129aa8:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0129aab:	e9 7b ff ff ff       	jmp    f0129a2b <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0129ab0:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0129ab1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0129ab5:	74 08                	je     f0129abf <strtol+0x134>
		*endptr = (char *) s;
f0129ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129aba:	8b 55 08             	mov    0x8(%ebp),%edx
f0129abd:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0129abf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0129ac3:	74 07                	je     f0129acc <strtol+0x141>
f0129ac5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129ac8:	f7 d8                	neg    %eax
f0129aca:	eb 03                	jmp    f0129acf <strtol+0x144>
f0129acc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0129acf:	c9                   	leave  
f0129ad0:	c3                   	ret    

f0129ad1 <ltostr>:

void
ltostr(long value, char *str)
{
f0129ad1:	55                   	push   %ebp
f0129ad2:	89 e5                	mov    %esp,%ebp
f0129ad4:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0129ad7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0129ade:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0129ae5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0129ae9:	79 13                	jns    f0129afe <ltostr+0x2d>
	{
		neg = 1;
f0129aeb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0129af2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129af5:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0129af8:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0129afb:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0129afe:	8b 45 08             	mov    0x8(%ebp),%eax
f0129b01:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0129b06:	99                   	cltd   
f0129b07:	f7 f9                	idiv   %ecx
f0129b09:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0129b0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129b0f:	8d 50 01             	lea    0x1(%eax),%edx
f0129b12:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0129b15:	89 c2                	mov    %eax,%edx
f0129b17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129b1a:	01 d0                	add    %edx,%eax
f0129b1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0129b1f:	83 c2 30             	add    $0x30,%edx
f0129b22:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0129b24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0129b27:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0129b2c:	f7 e9                	imul   %ecx
f0129b2e:	c1 fa 02             	sar    $0x2,%edx
f0129b31:	89 c8                	mov    %ecx,%eax
f0129b33:	c1 f8 1f             	sar    $0x1f,%eax
f0129b36:	29 c2                	sub    %eax,%edx
f0129b38:	89 d0                	mov    %edx,%eax
f0129b3a:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0129b3d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0129b40:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0129b45:	f7 e9                	imul   %ecx
f0129b47:	c1 fa 02             	sar    $0x2,%edx
f0129b4a:	89 c8                	mov    %ecx,%eax
f0129b4c:	c1 f8 1f             	sar    $0x1f,%eax
f0129b4f:	29 c2                	sub    %eax,%edx
f0129b51:	89 d0                	mov    %edx,%eax
f0129b53:	c1 e0 02             	shl    $0x2,%eax
f0129b56:	01 d0                	add    %edx,%eax
f0129b58:	01 c0                	add    %eax,%eax
f0129b5a:	29 c1                	sub    %eax,%ecx
f0129b5c:	89 ca                	mov    %ecx,%edx
f0129b5e:	85 d2                	test   %edx,%edx
f0129b60:	75 9c                	jne    f0129afe <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0129b62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0129b69:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129b6c:	48                   	dec    %eax
f0129b6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0129b70:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0129b74:	74 3d                	je     f0129bb3 <ltostr+0xe2>
		start = 1 ;
f0129b76:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0129b7d:	eb 34                	jmp    f0129bb3 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0129b7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129b82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129b85:	01 d0                	add    %edx,%eax
f0129b87:	8a 00                	mov    (%eax),%al
f0129b89:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0129b8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129b8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129b92:	01 c2                	add    %eax,%edx
f0129b94:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0129b97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129b9a:	01 c8                	add    %ecx,%eax
f0129b9c:	8a 00                	mov    (%eax),%al
f0129b9e:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0129ba0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0129ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129ba6:	01 c2                	add    %eax,%edx
f0129ba8:	8a 45 eb             	mov    -0x15(%ebp),%al
f0129bab:	88 02                	mov    %al,(%edx)
		start++ ;
f0129bad:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0129bb0:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0129bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bb6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0129bb9:	7c c4                	jl     f0129b7f <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0129bbb:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0129bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129bc1:	01 d0                	add    %edx,%eax
f0129bc3:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0129bc6:	90                   	nop
f0129bc7:	c9                   	leave  
f0129bc8:	c3                   	ret    

f0129bc9 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0129bc9:	55                   	push   %ebp
f0129bca:	89 e5                	mov    %esp,%ebp
f0129bcc:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0129bcf:	ff 75 08             	pushl  0x8(%ebp)
f0129bd2:	e8 54 fa ff ff       	call   f012962b <strlen>
f0129bd7:	83 c4 04             	add    $0x4,%esp
f0129bda:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0129bdd:	ff 75 0c             	pushl  0xc(%ebp)
f0129be0:	e8 46 fa ff ff       	call   f012962b <strlen>
f0129be5:	83 c4 04             	add    $0x4,%esp
f0129be8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0129beb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0129bf2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0129bf9:	eb 17                	jmp    f0129c12 <strcconcat+0x49>
		final[s] = str1[s] ;
f0129bfb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0129bfe:	8b 45 10             	mov    0x10(%ebp),%eax
f0129c01:	01 c2                	add    %eax,%edx
f0129c03:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0129c06:	8b 45 08             	mov    0x8(%ebp),%eax
f0129c09:	01 c8                	add    %ecx,%eax
f0129c0b:	8a 00                	mov    (%eax),%al
f0129c0d:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0129c0f:	ff 45 fc             	incl   -0x4(%ebp)
f0129c12:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129c15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129c18:	7c e1                	jl     f0129bfb <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0129c1a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0129c21:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0129c28:	eb 1f                	jmp    f0129c49 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0129c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129c2d:	8d 50 01             	lea    0x1(%eax),%edx
f0129c30:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0129c33:	89 c2                	mov    %eax,%edx
f0129c35:	8b 45 10             	mov    0x10(%ebp),%eax
f0129c38:	01 c2                	add    %eax,%edx
f0129c3a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0129c3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129c40:	01 c8                	add    %ecx,%eax
f0129c42:	8a 00                	mov    (%eax),%al
f0129c44:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0129c46:	ff 45 f8             	incl   -0x8(%ebp)
f0129c49:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129c4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0129c4f:	7c d9                	jl     f0129c2a <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0129c51:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0129c54:	8b 45 10             	mov    0x10(%ebp),%eax
f0129c57:	01 d0                	add    %edx,%eax
f0129c59:	c6 00 00             	movb   $0x0,(%eax)
}
f0129c5c:	90                   	nop
f0129c5d:	c9                   	leave  
f0129c5e:	c3                   	ret    

f0129c5f <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0129c5f:	55                   	push   %ebp
f0129c60:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0129c62:	8b 45 14             	mov    0x14(%ebp),%eax
f0129c65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0129c6b:	8b 45 14             	mov    0x14(%ebp),%eax
f0129c6e:	8b 00                	mov    (%eax),%eax
f0129c70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129c77:	8b 45 10             	mov    0x10(%ebp),%eax
f0129c7a:	01 d0                	add    %edx,%eax
f0129c7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0129c82:	eb 0c                	jmp    f0129c90 <strsplit+0x31>
			*string++ = 0;
f0129c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0129c87:	8d 50 01             	lea    0x1(%eax),%edx
f0129c8a:	89 55 08             	mov    %edx,0x8(%ebp)
f0129c8d:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0129c90:	8b 45 08             	mov    0x8(%ebp),%eax
f0129c93:	8a 00                	mov    (%eax),%al
f0129c95:	84 c0                	test   %al,%al
f0129c97:	74 18                	je     f0129cb1 <strsplit+0x52>
f0129c99:	8b 45 08             	mov    0x8(%ebp),%eax
f0129c9c:	8a 00                	mov    (%eax),%al
f0129c9e:	0f be c0             	movsbl %al,%eax
f0129ca1:	50                   	push   %eax
f0129ca2:	ff 75 0c             	pushl  0xc(%ebp)
f0129ca5:	e8 13 fb ff ff       	call   f01297bd <strchr>
f0129caa:	83 c4 08             	add    $0x8,%esp
f0129cad:	85 c0                	test   %eax,%eax
f0129caf:	75 d3                	jne    f0129c84 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0129cb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0129cb4:	8a 00                	mov    (%eax),%al
f0129cb6:	84 c0                	test   %al,%al
f0129cb8:	74 5a                	je     f0129d14 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0129cba:	8b 45 14             	mov    0x14(%ebp),%eax
f0129cbd:	8b 00                	mov    (%eax),%eax
f0129cbf:	83 f8 0f             	cmp    $0xf,%eax
f0129cc2:	75 07                	jne    f0129ccb <strsplit+0x6c>
		{
			return 0;
f0129cc4:	b8 00 00 00 00       	mov    $0x0,%eax
f0129cc9:	eb 66                	jmp    f0129d31 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0129ccb:	8b 45 14             	mov    0x14(%ebp),%eax
f0129cce:	8b 00                	mov    (%eax),%eax
f0129cd0:	8d 48 01             	lea    0x1(%eax),%ecx
f0129cd3:	8b 55 14             	mov    0x14(%ebp),%edx
f0129cd6:	89 0a                	mov    %ecx,(%edx)
f0129cd8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129cdf:	8b 45 10             	mov    0x10(%ebp),%eax
f0129ce2:	01 c2                	add    %eax,%edx
f0129ce4:	8b 45 08             	mov    0x8(%ebp),%eax
f0129ce7:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0129ce9:	eb 03                	jmp    f0129cee <strsplit+0x8f>
			string++;
f0129ceb:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0129cee:	8b 45 08             	mov    0x8(%ebp),%eax
f0129cf1:	8a 00                	mov    (%eax),%al
f0129cf3:	84 c0                	test   %al,%al
f0129cf5:	74 8b                	je     f0129c82 <strsplit+0x23>
f0129cf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0129cfa:	8a 00                	mov    (%eax),%al
f0129cfc:	0f be c0             	movsbl %al,%eax
f0129cff:	50                   	push   %eax
f0129d00:	ff 75 0c             	pushl  0xc(%ebp)
f0129d03:	e8 b5 fa ff ff       	call   f01297bd <strchr>
f0129d08:	83 c4 08             	add    $0x8,%esp
f0129d0b:	85 c0                	test   %eax,%eax
f0129d0d:	74 dc                	je     f0129ceb <strsplit+0x8c>
			string++;
	}
f0129d0f:	e9 6e ff ff ff       	jmp    f0129c82 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0129d14:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0129d15:	8b 45 14             	mov    0x14(%ebp),%eax
f0129d18:	8b 00                	mov    (%eax),%eax
f0129d1a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129d21:	8b 45 10             	mov    0x10(%ebp),%eax
f0129d24:	01 d0                	add    %edx,%eax
f0129d26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0129d2c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129d31:	c9                   	leave  
f0129d32:	c3                   	ret    

f0129d33 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0129d33:	55                   	push   %ebp
f0129d34:	89 e5                	mov    %esp,%ebp
f0129d36:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0129d39:	90                   	nop
f0129d3a:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0129d41:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0129d44:	89 c2                	mov    %eax,%edx
f0129d46:	ec                   	in     (%dx),%al
f0129d47:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0129d4a:	8a 45 f7             	mov    -0x9(%ebp),%al
f0129d4d:	0f b6 c0             	movzbl %al,%eax
f0129d50:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0129d53:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129d56:	25 c0 00 00 00       	and    $0xc0,%eax
f0129d5b:	83 f8 40             	cmp    $0x40,%eax
f0129d5e:	75 da                	jne    f0129d3a <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0129d60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0129d64:	74 11                	je     f0129d77 <ide_wait_ready+0x44>
f0129d66:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0129d69:	83 e0 21             	and    $0x21,%eax
f0129d6c:	85 c0                	test   %eax,%eax
f0129d6e:	74 07                	je     f0129d77 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0129d70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0129d75:	eb 05                	jmp    f0129d7c <ide_wait_ready+0x49>
	}
	return 0;
f0129d77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0129d7c:	c9                   	leave  
f0129d7d:	c3                   	ret    

f0129d7e <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0129d7e:	55                   	push   %ebp
f0129d7f:	89 e5                	mov    %esp,%ebp
f0129d81:	57                   	push   %edi
f0129d82:	53                   	push   %ebx
f0129d83:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0129d86:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0129d8d:	76 16                	jbe    f0129da5 <ide_read+0x27>
f0129d8f:	68 03 1f 13 f0       	push   $0xf0131f03
f0129d94:	68 10 1f 13 f0       	push   $0xf0131f10
f0129d99:	6a 25                	push   $0x25
f0129d9b:	68 25 1f 13 f0       	push   $0xf0131f25
f0129da0:	e8 01 64 fd ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f0129da5:	83 ec 0c             	sub    $0xc,%esp
f0129da8:	6a 00                	push   $0x0
f0129daa:	e8 84 ff ff ff       	call   f0129d33 <ide_wait_ready>
f0129daf:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0129db2:	8b 45 10             	mov    0x10(%ebp),%eax
f0129db5:	0f b6 c0             	movzbl %al,%eax
f0129db8:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0129dbf:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0129dc2:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0129dc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0129dc8:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0129dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0129dcc:	0f b6 c0             	movzbl %al,%eax
f0129dcf:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0129dd6:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0129dd9:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0129ddc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0129ddf:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0129de0:	8b 45 08             	mov    0x8(%ebp),%eax
f0129de3:	c1 e8 08             	shr    $0x8,%eax
f0129de6:	0f b6 c0             	movzbl %al,%eax
f0129de9:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0129df0:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0129df3:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0129df6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0129df9:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0129dfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0129dfd:	c1 e8 10             	shr    $0x10,%eax
f0129e00:	0f b6 c0             	movzbl %al,%eax
f0129e03:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0129e0a:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0129e0d:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0129e10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0129e13:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0129e14:	a1 0c 4f 64 f0       	mov    0xf0644f0c,%eax
f0129e19:	83 e0 01             	and    $0x1,%eax
f0129e1c:	c1 e0 04             	shl    $0x4,%eax
f0129e1f:	88 c2                	mov    %al,%dl
f0129e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0129e24:	c1 e8 18             	shr    $0x18,%eax
f0129e27:	83 e0 0f             	and    $0xf,%eax
f0129e2a:	09 d0                	or     %edx,%eax
f0129e2c:	83 c8 e0             	or     $0xffffffe0,%eax
f0129e2f:	0f b6 c0             	movzbl %al,%eax
f0129e32:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0129e39:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0129e3c:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0129e3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0129e42:	ee                   	out    %al,(%dx)
f0129e43:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0129e4a:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0129e4e:	8a 45 d7             	mov    -0x29(%ebp),%al
f0129e51:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0129e54:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0129e55:	eb 55                	jmp    f0129eac <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0129e57:	83 ec 0c             	sub    $0xc,%esp
f0129e5a:	6a 01                	push   $0x1
f0129e5c:	e8 d2 fe ff ff       	call   f0129d33 <ide_wait_ready>
f0129e61:	83 c4 10             	add    $0x10,%esp
f0129e64:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0129e67:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0129e6b:	79 05                	jns    f0129e72 <ide_read+0xf4>
			return r;
f0129e6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129e70:	eb 45                	jmp    f0129eb7 <ide_read+0x139>
f0129e72:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0129e79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129e7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0129e7f:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0129e86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e89:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0129e8c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129e8f:	89 cb                	mov    %ecx,%ebx
f0129e91:	89 df                	mov    %ebx,%edi
f0129e93:	89 c1                	mov    %eax,%ecx
f0129e95:	fc                   	cld    
f0129e96:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0129e98:	89 c8                	mov    %ecx,%eax
f0129e9a:	89 fb                	mov    %edi,%ebx
f0129e9c:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0129e9f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0129ea2:	ff 4d 10             	decl   0x10(%ebp)
f0129ea5:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0129eac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0129eb0:	75 a5                	jne    f0129e57 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0129eb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0129eb7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129eba:	5b                   	pop    %ebx
f0129ebb:	5f                   	pop    %edi
f0129ebc:	5d                   	pop    %ebp
f0129ebd:	c3                   	ret    

f0129ebe <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0129ebe:	55                   	push   %ebp
f0129ebf:	89 e5                	mov    %esp,%ebp
f0129ec1:	56                   	push   %esi
f0129ec2:	53                   	push   %ebx
f0129ec3:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0129ec6:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0129ecd:	76 16                	jbe    f0129ee5 <ide_write+0x27>
f0129ecf:	68 03 1f 13 f0       	push   $0xf0131f03
f0129ed4:	68 10 1f 13 f0       	push   $0xf0131f10
f0129ed9:	6a 3e                	push   $0x3e
f0129edb:	68 25 1f 13 f0       	push   $0xf0131f25
f0129ee0:	e8 c1 62 fd ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0129ee5:	83 ec 0c             	sub    $0xc,%esp
f0129ee8:	6a 00                	push   $0x0
f0129eea:	e8 44 fe ff ff       	call   f0129d33 <ide_wait_ready>
f0129eef:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0129ef2:	8b 45 10             	mov    0x10(%ebp),%eax
f0129ef5:	0f b6 c0             	movzbl %al,%eax
f0129ef8:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0129eff:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0129f02:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0129f05:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0129f08:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0129f09:	8b 45 08             	mov    0x8(%ebp),%eax
f0129f0c:	0f b6 c0             	movzbl %al,%eax
f0129f0f:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0129f16:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0129f19:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0129f1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0129f1f:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0129f20:	8b 45 08             	mov    0x8(%ebp),%eax
f0129f23:	c1 e8 08             	shr    $0x8,%eax
f0129f26:	0f b6 c0             	movzbl %al,%eax
f0129f29:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0129f30:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0129f33:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0129f36:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0129f39:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0129f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0129f3d:	c1 e8 10             	shr    $0x10,%eax
f0129f40:	0f b6 c0             	movzbl %al,%eax
f0129f43:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0129f4a:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0129f4d:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0129f50:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0129f53:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0129f54:	a1 0c 4f 64 f0       	mov    0xf0644f0c,%eax
f0129f59:	83 e0 01             	and    $0x1,%eax
f0129f5c:	c1 e0 04             	shl    $0x4,%eax
f0129f5f:	88 c2                	mov    %al,%dl
f0129f61:	8b 45 08             	mov    0x8(%ebp),%eax
f0129f64:	c1 e8 18             	shr    $0x18,%eax
f0129f67:	83 e0 0f             	and    $0xf,%eax
f0129f6a:	09 d0                	or     %edx,%eax
f0129f6c:	83 c8 e0             	or     $0xffffffe0,%eax
f0129f6f:	0f b6 c0             	movzbl %al,%eax
f0129f72:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0129f79:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0129f7c:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0129f7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0129f82:	ee                   	out    %al,(%dx)
f0129f83:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0129f8a:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0129f8e:	8a 45 d7             	mov    -0x29(%ebp),%al
f0129f91:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0129f94:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0129f95:	eb 55                	jmp    f0129fec <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0129f97:	83 ec 0c             	sub    $0xc,%esp
f0129f9a:	6a 01                	push   $0x1
f0129f9c:	e8 92 fd ff ff       	call   f0129d33 <ide_wait_ready>
f0129fa1:	83 c4 10             	add    $0x10,%esp
f0129fa4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0129fa7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0129fab:	79 05                	jns    f0129fb2 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0129fad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129fb0:	eb 45                	jmp    f0129ff7 <ide_write+0x139>
f0129fb2:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0129fb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0129fbc:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0129fbf:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0129fc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129fc9:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0129fcc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129fcf:	89 cb                	mov    %ecx,%ebx
f0129fd1:	89 de                	mov    %ebx,%esi
f0129fd3:	89 c1                	mov    %eax,%ecx
f0129fd5:	fc                   	cld    
f0129fd6:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0129fd8:	89 c8                	mov    %ecx,%eax
f0129fda:	89 f3                	mov    %esi,%ebx
f0129fdc:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0129fdf:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0129fe2:	ff 4d 10             	decl   0x10(%ebp)
f0129fe5:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0129fec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0129ff0:	75 a5                	jne    f0129f97 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0129ff2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0129ff7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129ffa:	5b                   	pop    %ebx
f0129ffb:	5e                   	pop    %esi
f0129ffc:	5d                   	pop    %ebp
f0129ffd:	c3                   	ret    

f0129ffe <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0129ffe:	55                   	push   %ebp
f0129fff:	89 e5                	mov    %esp,%ebp
f012a001:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f012a004:	83 ec 0c             	sub    $0xc,%esp
f012a007:	68 30 1f 13 f0       	push   $0xf0131f30
f012a00c:	e8 1c 6c fd ff       	call   f0100c2d <cprintf>
f012a011:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f012a014:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f012a01b:	83 ec 0c             	sub    $0xc,%esp
f012a01e:	68 5c 1f 13 f0       	push   $0xf0131f5c
f012a023:	e8 05 6c fd ff       	call   f0100c2d <cprintf>
f012a028:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f012a02b:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f012a02f:	a1 00 44 6d f0       	mov    0xf06d4400,%eax
f012a034:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012a037:	eb 56                	jmp    f012a08f <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f012a039:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012a03d:	74 1c                	je     f012a05b <print_mem_block_lists+0x5d>
f012a03f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a042:	8b 50 08             	mov    0x8(%eax),%edx
f012a045:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a048:	8b 48 08             	mov    0x8(%eax),%ecx
f012a04b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a04e:	8b 40 0c             	mov    0xc(%eax),%eax
f012a051:	01 c8                	add    %ecx,%eax
f012a053:	39 c2                	cmp    %eax,%edx
f012a055:	73 04                	jae    f012a05b <print_mem_block_lists+0x5d>
			sorted = 0 ;
f012a057:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f012a05b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a05e:	8b 50 08             	mov    0x8(%eax),%edx
f012a061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a064:	8b 40 0c             	mov    0xc(%eax),%eax
f012a067:	01 c2                	add    %eax,%edx
f012a069:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a06c:	8b 40 08             	mov    0x8(%eax),%eax
f012a06f:	83 ec 04             	sub    $0x4,%esp
f012a072:	52                   	push   %edx
f012a073:	50                   	push   %eax
f012a074:	68 71 1f 13 f0       	push   $0xf0131f71
f012a079:	e8 af 6b fd ff       	call   f0100c2d <cprintf>
f012a07e:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f012a081:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a084:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f012a087:	a1 08 44 6d f0       	mov    0xf06d4408,%eax
f012a08c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012a08f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012a093:	74 07                	je     f012a09c <print_mem_block_lists+0x9e>
f012a095:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a098:	8b 00                	mov    (%eax),%eax
f012a09a:	eb 05                	jmp    f012a0a1 <print_mem_block_lists+0xa3>
f012a09c:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0a1:	a3 08 44 6d f0       	mov    %eax,0xf06d4408
f012a0a6:	a1 08 44 6d f0       	mov    0xf06d4408,%eax
f012a0ab:	85 c0                	test   %eax,%eax
f012a0ad:	75 8a                	jne    f012a039 <print_mem_block_lists+0x3b>
f012a0af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012a0b3:	75 84                	jne    f012a039 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f012a0b5:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f012a0b9:	75 10                	jne    f012a0cb <print_mem_block_lists+0xcd>
f012a0bb:	83 ec 0c             	sub    $0xc,%esp
f012a0be:	68 80 1f 13 f0       	push   $0xf0131f80
f012a0c3:	e8 65 6b fd ff       	call   f0100c2d <cprintf>
f012a0c8:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f012a0cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f012a0d2:	83 ec 0c             	sub    $0xc,%esp
f012a0d5:	68 a4 1f 13 f0       	push   $0xf0131fa4
f012a0da:	e8 4e 6b fd ff       	call   f0100c2d <cprintf>
f012a0df:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f012a0e2:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f012a0e6:	a1 30 4f 64 f0       	mov    0xf0644f30,%eax
f012a0eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012a0ee:	eb 56                	jmp    f012a146 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f012a0f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012a0f4:	74 1c                	je     f012a112 <print_mem_block_lists+0x114>
f012a0f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a0f9:	8b 50 08             	mov    0x8(%eax),%edx
f012a0fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a0ff:	8b 48 08             	mov    0x8(%eax),%ecx
f012a102:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a105:	8b 40 0c             	mov    0xc(%eax),%eax
f012a108:	01 c8                	add    %ecx,%eax
f012a10a:	39 c2                	cmp    %eax,%edx
f012a10c:	73 04                	jae    f012a112 <print_mem_block_lists+0x114>
			sorted = 0 ;
f012a10e:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f012a112:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a115:	8b 50 08             	mov    0x8(%eax),%edx
f012a118:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a11b:	8b 40 0c             	mov    0xc(%eax),%eax
f012a11e:	01 c2                	add    %eax,%edx
f012a120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a123:	8b 40 08             	mov    0x8(%eax),%eax
f012a126:	83 ec 04             	sub    $0x4,%esp
f012a129:	52                   	push   %edx
f012a12a:	50                   	push   %eax
f012a12b:	68 71 1f 13 f0       	push   $0xf0131f71
f012a130:	e8 f8 6a fd ff       	call   f0100c2d <cprintf>
f012a135:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f012a138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a13b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f012a13e:	a1 38 4f 64 f0       	mov    0xf0644f38,%eax
f012a143:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012a146:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012a14a:	74 07                	je     f012a153 <print_mem_block_lists+0x155>
f012a14c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a14f:	8b 00                	mov    (%eax),%eax
f012a151:	eb 05                	jmp    f012a158 <print_mem_block_lists+0x15a>
f012a153:	b8 00 00 00 00       	mov    $0x0,%eax
f012a158:	a3 38 4f 64 f0       	mov    %eax,0xf0644f38
f012a15d:	a1 38 4f 64 f0       	mov    0xf0644f38,%eax
f012a162:	85 c0                	test   %eax,%eax
f012a164:	75 8a                	jne    f012a0f0 <print_mem_block_lists+0xf2>
f012a166:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012a16a:	75 84                	jne    f012a0f0 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f012a16c:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f012a170:	75 10                	jne    f012a182 <print_mem_block_lists+0x184>
f012a172:	83 ec 0c             	sub    $0xc,%esp
f012a175:	68 bc 1f 13 f0       	push   $0xf0131fbc
f012a17a:	e8 ae 6a fd ff       	call   f0100c2d <cprintf>
f012a17f:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f012a182:	83 ec 0c             	sub    $0xc,%esp
f012a185:	68 30 1f 13 f0       	push   $0xf0131f30
f012a18a:	e8 9e 6a fd ff       	call   f0100c2d <cprintf>
f012a18f:	83 c4 10             	add    $0x10,%esp

}
f012a192:	90                   	nop
f012a193:	c9                   	leave  
f012a194:	c3                   	ret    

f012a195 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f012a195:	55                   	push   %ebp
f012a196:	89 e5                	mov    %esp,%ebp
f012a198:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	panic("initialize_MemBlocksList() is not implemented yet...!!");
f012a19b:	83 ec 04             	sub    $0x4,%esp
f012a19e:	68 e4 1f 13 f0       	push   $0xf0131fe4
f012a1a3:	6a 41                	push   $0x41
f012a1a5:	68 1b 20 13 f0       	push   $0xf013201b
f012a1aa:	e8 f7 5f fd ff       	call   f01001a6 <_panic>

f012a1af <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f012a1af:	55                   	push   %ebp
f012a1b0:	89 e5                	mov    %esp,%ebp
f012a1b2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	panic("find_block() is not implemented yet...!!");
f012a1b5:	83 ec 04             	sub    $0x4,%esp
f012a1b8:	68 34 20 13 f0       	push   $0xf0132034
f012a1bd:	6a 4c                	push   $0x4c
f012a1bf:	68 1b 20 13 f0       	push   $0xf013201b
f012a1c4:	e8 dd 5f fd ff       	call   f01001a6 <_panic>

f012a1c9 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f012a1c9:	55                   	push   %ebp
f012a1ca:	89 e5                	mov    %esp,%ebp
f012a1cc:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	panic("insert_sorted_allocList() is not implemented yet...!!");
f012a1cf:	83 ec 04             	sub    $0x4,%esp
f012a1d2:	68 60 20 13 f0       	push   $0xf0132060
f012a1d7:	6a 57                	push   $0x57
f012a1d9:	68 1b 20 13 f0       	push   $0xf013201b
f012a1de:	e8 c3 5f fd ff       	call   f01001a6 <_panic>

f012a1e3 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f012a1e3:	55                   	push   %ebp
f012a1e4:	89 e5                	mov    %esp,%ebp
f012a1e6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	panic("alloc_block_FF() is not implemented yet...!!");
f012a1e9:	83 ec 04             	sub    $0x4,%esp
f012a1ec:	68 98 20 13 f0       	push   $0xf0132098
f012a1f1:	6a 61                	push   $0x61
f012a1f3:	68 1b 20 13 f0       	push   $0xf013201b
f012a1f8:	e8 a9 5f fd ff       	call   f01001a6 <_panic>

f012a1fd <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f012a1fd:	55                   	push   %ebp
f012a1fe:	89 e5                	mov    %esp,%ebp
f012a200:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	panic("alloc_block_BF() is not implemented yet...!!");
f012a203:	83 ec 04             	sub    $0x4,%esp
f012a206:	68 c8 20 13 f0       	push   $0xf01320c8
f012a20b:	6a 6b                	push   $0x6b
f012a20d:	68 1b 20 13 f0       	push   $0xf013201b
f012a212:	e8 8f 5f fd ff       	call   f01001a6 <_panic>

f012a217 <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f012a217:	55                   	push   %ebp
f012a218:	89 e5                	mov    %esp,%ebp
f012a21a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your code
	panic("alloc_block_NF() is not implemented yet...!!");
f012a21d:	83 ec 04             	sub    $0x4,%esp
f012a220:	68 f8 20 13 f0       	push   $0xf01320f8
f012a225:	6a 76                	push   $0x76
f012a227:	68 1b 20 13 f0       	push   $0xf013201b
f012a22c:	e8 75 5f fd ff       	call   f01001a6 <_panic>

f012a231 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f012a231:	55                   	push   %ebp
f012a232:	89 e5                	mov    %esp,%ebp
f012a234:	83 ec 08             	sub    $0x8,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	panic("insert_sorted_with_merge_freeList() is not implemented yet...!!");
f012a237:	83 ec 04             	sub    $0x4,%esp
f012a23a:	68 28 21 13 f0       	push   $0xf0132128
f012a23f:	68 84 00 00 00       	push   $0x84
f012a244:	68 1b 20 13 f0       	push   $0xf013201b
f012a249:	e8 58 5f fd ff       	call   f01001a6 <_panic>
f012a24e:	66 90                	xchg   %ax,%ax

f012a250 <__udivdi3>:
f012a250:	55                   	push   %ebp
f012a251:	57                   	push   %edi
f012a252:	56                   	push   %esi
f012a253:	53                   	push   %ebx
f012a254:	83 ec 1c             	sub    $0x1c,%esp
f012a257:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f012a25b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012a25f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012a263:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f012a267:	89 ca                	mov    %ecx,%edx
f012a269:	89 f8                	mov    %edi,%eax
f012a26b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012a26f:	85 f6                	test   %esi,%esi
f012a271:	75 2d                	jne    f012a2a0 <__udivdi3+0x50>
f012a273:	39 cf                	cmp    %ecx,%edi
f012a275:	77 65                	ja     f012a2dc <__udivdi3+0x8c>
f012a277:	89 fd                	mov    %edi,%ebp
f012a279:	85 ff                	test   %edi,%edi
f012a27b:	75 0b                	jne    f012a288 <__udivdi3+0x38>
f012a27d:	b8 01 00 00 00       	mov    $0x1,%eax
f012a282:	31 d2                	xor    %edx,%edx
f012a284:	f7 f7                	div    %edi
f012a286:	89 c5                	mov    %eax,%ebp
f012a288:	31 d2                	xor    %edx,%edx
f012a28a:	89 c8                	mov    %ecx,%eax
f012a28c:	f7 f5                	div    %ebp
f012a28e:	89 c1                	mov    %eax,%ecx
f012a290:	89 d8                	mov    %ebx,%eax
f012a292:	f7 f5                	div    %ebp
f012a294:	89 cf                	mov    %ecx,%edi
f012a296:	89 fa                	mov    %edi,%edx
f012a298:	83 c4 1c             	add    $0x1c,%esp
f012a29b:	5b                   	pop    %ebx
f012a29c:	5e                   	pop    %esi
f012a29d:	5f                   	pop    %edi
f012a29e:	5d                   	pop    %ebp
f012a29f:	c3                   	ret    
f012a2a0:	39 ce                	cmp    %ecx,%esi
f012a2a2:	77 28                	ja     f012a2cc <__udivdi3+0x7c>
f012a2a4:	0f bd fe             	bsr    %esi,%edi
f012a2a7:	83 f7 1f             	xor    $0x1f,%edi
f012a2aa:	75 40                	jne    f012a2ec <__udivdi3+0x9c>
f012a2ac:	39 ce                	cmp    %ecx,%esi
f012a2ae:	72 0a                	jb     f012a2ba <__udivdi3+0x6a>
f012a2b0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f012a2b4:	0f 87 9e 00 00 00    	ja     f012a358 <__udivdi3+0x108>
f012a2ba:	b8 01 00 00 00       	mov    $0x1,%eax
f012a2bf:	89 fa                	mov    %edi,%edx
f012a2c1:	83 c4 1c             	add    $0x1c,%esp
f012a2c4:	5b                   	pop    %ebx
f012a2c5:	5e                   	pop    %esi
f012a2c6:	5f                   	pop    %edi
f012a2c7:	5d                   	pop    %ebp
f012a2c8:	c3                   	ret    
f012a2c9:	8d 76 00             	lea    0x0(%esi),%esi
f012a2cc:	31 ff                	xor    %edi,%edi
f012a2ce:	31 c0                	xor    %eax,%eax
f012a2d0:	89 fa                	mov    %edi,%edx
f012a2d2:	83 c4 1c             	add    $0x1c,%esp
f012a2d5:	5b                   	pop    %ebx
f012a2d6:	5e                   	pop    %esi
f012a2d7:	5f                   	pop    %edi
f012a2d8:	5d                   	pop    %ebp
f012a2d9:	c3                   	ret    
f012a2da:	66 90                	xchg   %ax,%ax
f012a2dc:	89 d8                	mov    %ebx,%eax
f012a2de:	f7 f7                	div    %edi
f012a2e0:	31 ff                	xor    %edi,%edi
f012a2e2:	89 fa                	mov    %edi,%edx
f012a2e4:	83 c4 1c             	add    $0x1c,%esp
f012a2e7:	5b                   	pop    %ebx
f012a2e8:	5e                   	pop    %esi
f012a2e9:	5f                   	pop    %edi
f012a2ea:	5d                   	pop    %ebp
f012a2eb:	c3                   	ret    
f012a2ec:	bd 20 00 00 00       	mov    $0x20,%ebp
f012a2f1:	89 eb                	mov    %ebp,%ebx
f012a2f3:	29 fb                	sub    %edi,%ebx
f012a2f5:	89 f9                	mov    %edi,%ecx
f012a2f7:	d3 e6                	shl    %cl,%esi
f012a2f9:	89 c5                	mov    %eax,%ebp
f012a2fb:	88 d9                	mov    %bl,%cl
f012a2fd:	d3 ed                	shr    %cl,%ebp
f012a2ff:	89 e9                	mov    %ebp,%ecx
f012a301:	09 f1                	or     %esi,%ecx
f012a303:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f012a307:	89 f9                	mov    %edi,%ecx
f012a309:	d3 e0                	shl    %cl,%eax
f012a30b:	89 c5                	mov    %eax,%ebp
f012a30d:	89 d6                	mov    %edx,%esi
f012a30f:	88 d9                	mov    %bl,%cl
f012a311:	d3 ee                	shr    %cl,%esi
f012a313:	89 f9                	mov    %edi,%ecx
f012a315:	d3 e2                	shl    %cl,%edx
f012a317:	8b 44 24 08          	mov    0x8(%esp),%eax
f012a31b:	88 d9                	mov    %bl,%cl
f012a31d:	d3 e8                	shr    %cl,%eax
f012a31f:	09 c2                	or     %eax,%edx
f012a321:	89 d0                	mov    %edx,%eax
f012a323:	89 f2                	mov    %esi,%edx
f012a325:	f7 74 24 0c          	divl   0xc(%esp)
f012a329:	89 d6                	mov    %edx,%esi
f012a32b:	89 c3                	mov    %eax,%ebx
f012a32d:	f7 e5                	mul    %ebp
f012a32f:	39 d6                	cmp    %edx,%esi
f012a331:	72 19                	jb     f012a34c <__udivdi3+0xfc>
f012a333:	74 0b                	je     f012a340 <__udivdi3+0xf0>
f012a335:	89 d8                	mov    %ebx,%eax
f012a337:	31 ff                	xor    %edi,%edi
f012a339:	e9 58 ff ff ff       	jmp    f012a296 <__udivdi3+0x46>
f012a33e:	66 90                	xchg   %ax,%ax
f012a340:	8b 54 24 08          	mov    0x8(%esp),%edx
f012a344:	89 f9                	mov    %edi,%ecx
f012a346:	d3 e2                	shl    %cl,%edx
f012a348:	39 c2                	cmp    %eax,%edx
f012a34a:	73 e9                	jae    f012a335 <__udivdi3+0xe5>
f012a34c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012a34f:	31 ff                	xor    %edi,%edi
f012a351:	e9 40 ff ff ff       	jmp    f012a296 <__udivdi3+0x46>
f012a356:	66 90                	xchg   %ax,%ax
f012a358:	31 c0                	xor    %eax,%eax
f012a35a:	e9 37 ff ff ff       	jmp    f012a296 <__udivdi3+0x46>
f012a35f:	90                   	nop

f012a360 <__umoddi3>:
f012a360:	55                   	push   %ebp
f012a361:	57                   	push   %edi
f012a362:	56                   	push   %esi
f012a363:	53                   	push   %ebx
f012a364:	83 ec 1c             	sub    $0x1c,%esp
f012a367:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f012a36b:	8b 74 24 34          	mov    0x34(%esp),%esi
f012a36f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012a373:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f012a377:	89 44 24 0c          	mov    %eax,0xc(%esp)
f012a37b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f012a37f:	89 f3                	mov    %esi,%ebx
f012a381:	89 fa                	mov    %edi,%edx
f012a383:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012a387:	89 34 24             	mov    %esi,(%esp)
f012a38a:	85 c0                	test   %eax,%eax
f012a38c:	75 1a                	jne    f012a3a8 <__umoddi3+0x48>
f012a38e:	39 f7                	cmp    %esi,%edi
f012a390:	0f 86 a2 00 00 00    	jbe    f012a438 <__umoddi3+0xd8>
f012a396:	89 c8                	mov    %ecx,%eax
f012a398:	89 f2                	mov    %esi,%edx
f012a39a:	f7 f7                	div    %edi
f012a39c:	89 d0                	mov    %edx,%eax
f012a39e:	31 d2                	xor    %edx,%edx
f012a3a0:	83 c4 1c             	add    $0x1c,%esp
f012a3a3:	5b                   	pop    %ebx
f012a3a4:	5e                   	pop    %esi
f012a3a5:	5f                   	pop    %edi
f012a3a6:	5d                   	pop    %ebp
f012a3a7:	c3                   	ret    
f012a3a8:	39 f0                	cmp    %esi,%eax
f012a3aa:	0f 87 ac 00 00 00    	ja     f012a45c <__umoddi3+0xfc>
f012a3b0:	0f bd e8             	bsr    %eax,%ebp
f012a3b3:	83 f5 1f             	xor    $0x1f,%ebp
f012a3b6:	0f 84 ac 00 00 00    	je     f012a468 <__umoddi3+0x108>
f012a3bc:	bf 20 00 00 00       	mov    $0x20,%edi
f012a3c1:	29 ef                	sub    %ebp,%edi
f012a3c3:	89 fe                	mov    %edi,%esi
f012a3c5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f012a3c9:	89 e9                	mov    %ebp,%ecx
f012a3cb:	d3 e0                	shl    %cl,%eax
f012a3cd:	89 d7                	mov    %edx,%edi
f012a3cf:	89 f1                	mov    %esi,%ecx
f012a3d1:	d3 ef                	shr    %cl,%edi
f012a3d3:	09 c7                	or     %eax,%edi
f012a3d5:	89 e9                	mov    %ebp,%ecx
f012a3d7:	d3 e2                	shl    %cl,%edx
f012a3d9:	89 14 24             	mov    %edx,(%esp)
f012a3dc:	89 d8                	mov    %ebx,%eax
f012a3de:	d3 e0                	shl    %cl,%eax
f012a3e0:	89 c2                	mov    %eax,%edx
f012a3e2:	8b 44 24 08          	mov    0x8(%esp),%eax
f012a3e6:	d3 e0                	shl    %cl,%eax
f012a3e8:	89 44 24 04          	mov    %eax,0x4(%esp)
f012a3ec:	8b 44 24 08          	mov    0x8(%esp),%eax
f012a3f0:	89 f1                	mov    %esi,%ecx
f012a3f2:	d3 e8                	shr    %cl,%eax
f012a3f4:	09 d0                	or     %edx,%eax
f012a3f6:	d3 eb                	shr    %cl,%ebx
f012a3f8:	89 da                	mov    %ebx,%edx
f012a3fa:	f7 f7                	div    %edi
f012a3fc:	89 d3                	mov    %edx,%ebx
f012a3fe:	f7 24 24             	mull   (%esp)
f012a401:	89 c6                	mov    %eax,%esi
f012a403:	89 d1                	mov    %edx,%ecx
f012a405:	39 d3                	cmp    %edx,%ebx
f012a407:	0f 82 87 00 00 00    	jb     f012a494 <__umoddi3+0x134>
f012a40d:	0f 84 91 00 00 00    	je     f012a4a4 <__umoddi3+0x144>
f012a413:	8b 54 24 04          	mov    0x4(%esp),%edx
f012a417:	29 f2                	sub    %esi,%edx
f012a419:	19 cb                	sbb    %ecx,%ebx
f012a41b:	89 d8                	mov    %ebx,%eax
f012a41d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012a421:	d3 e0                	shl    %cl,%eax
f012a423:	89 e9                	mov    %ebp,%ecx
f012a425:	d3 ea                	shr    %cl,%edx
f012a427:	09 d0                	or     %edx,%eax
f012a429:	89 e9                	mov    %ebp,%ecx
f012a42b:	d3 eb                	shr    %cl,%ebx
f012a42d:	89 da                	mov    %ebx,%edx
f012a42f:	83 c4 1c             	add    $0x1c,%esp
f012a432:	5b                   	pop    %ebx
f012a433:	5e                   	pop    %esi
f012a434:	5f                   	pop    %edi
f012a435:	5d                   	pop    %ebp
f012a436:	c3                   	ret    
f012a437:	90                   	nop
f012a438:	89 fd                	mov    %edi,%ebp
f012a43a:	85 ff                	test   %edi,%edi
f012a43c:	75 0b                	jne    f012a449 <__umoddi3+0xe9>
f012a43e:	b8 01 00 00 00       	mov    $0x1,%eax
f012a443:	31 d2                	xor    %edx,%edx
f012a445:	f7 f7                	div    %edi
f012a447:	89 c5                	mov    %eax,%ebp
f012a449:	89 f0                	mov    %esi,%eax
f012a44b:	31 d2                	xor    %edx,%edx
f012a44d:	f7 f5                	div    %ebp
f012a44f:	89 c8                	mov    %ecx,%eax
f012a451:	f7 f5                	div    %ebp
f012a453:	89 d0                	mov    %edx,%eax
f012a455:	e9 44 ff ff ff       	jmp    f012a39e <__umoddi3+0x3e>
f012a45a:	66 90                	xchg   %ax,%ax
f012a45c:	89 c8                	mov    %ecx,%eax
f012a45e:	89 f2                	mov    %esi,%edx
f012a460:	83 c4 1c             	add    $0x1c,%esp
f012a463:	5b                   	pop    %ebx
f012a464:	5e                   	pop    %esi
f012a465:	5f                   	pop    %edi
f012a466:	5d                   	pop    %ebp
f012a467:	c3                   	ret    
f012a468:	3b 04 24             	cmp    (%esp),%eax
f012a46b:	72 06                	jb     f012a473 <__umoddi3+0x113>
f012a46d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012a471:	77 0f                	ja     f012a482 <__umoddi3+0x122>
f012a473:	89 f2                	mov    %esi,%edx
f012a475:	29 f9                	sub    %edi,%ecx
f012a477:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f012a47b:	89 14 24             	mov    %edx,(%esp)
f012a47e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f012a482:	8b 44 24 04          	mov    0x4(%esp),%eax
f012a486:	8b 14 24             	mov    (%esp),%edx
f012a489:	83 c4 1c             	add    $0x1c,%esp
f012a48c:	5b                   	pop    %ebx
f012a48d:	5e                   	pop    %esi
f012a48e:	5f                   	pop    %edi
f012a48f:	5d                   	pop    %ebp
f012a490:	c3                   	ret    
f012a491:	8d 76 00             	lea    0x0(%esi),%esi
f012a494:	2b 04 24             	sub    (%esp),%eax
f012a497:	19 fa                	sbb    %edi,%edx
f012a499:	89 d1                	mov    %edx,%ecx
f012a49b:	89 c6                	mov    %eax,%esi
f012a49d:	e9 71 ff ff ff       	jmp    f012a413 <__umoddi3+0xb3>
f012a4a2:	66 90                	xchg   %ax,%ax
f012a4a4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f012a4a8:	72 ea                	jb     f012a494 <__umoddi3+0x134>
f012a4aa:	89 d9                	mov    %ebx,%ecx
f012a4ac:	e9 62 ff ff ff       	jmp    f012a413 <__umoddi3+0xb3>
